
TUT_F4_AUDIO_I2S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f798  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0800f930  0800f930  0001f930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe58  0800fe58  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe58  0800fe58  0001fe58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe60  0800fe60  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe60  0800fe60  0001fe60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe64  0800fe64  0001fe64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800fe68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000255c  200000b8  0800ff20  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002614  0800ff20  00022614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dfb6  00000000  00000000  0002012b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055ee  00000000  00000000  0003e0e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  000436d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000106a  00000000  00000000  00044c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c767  00000000  00000000  00045cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000238f5  00000000  00000000  00062459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fb04  00000000  00000000  00085d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005aa4  00000000  00000000  00115854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0011b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000b8 	.word	0x200000b8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800f918 	.word	0x0800f918

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000bc 	.word	0x200000bc
 80001d4:	0800f918 	.word	0x0800f918

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	603a      	str	r2, [r7, #0]
 80004de:	80fb      	strh	r3, [r7, #6]
 80004e0:	460b      	mov	r3, r1
 80004e2:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 80004e4:	2300      	movs	r3, #0
 80004e6:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80004e8:	2200      	movs	r2, #0
 80004ea:	6839      	ldr	r1, [r7, #0]
 80004ec:	481c      	ldr	r0, [pc, #112]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 80004ee:	f000 f8f9 	bl	80006e4 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 80004f4:	4a1b      	ldr	r2, [pc, #108]	; (8000564 <AUDIO_OUT_Init+0x90>)
 80004f6:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80004f8:	4819      	ldr	r0, [pc, #100]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 80004fa:	f005 ff65 	bl	80063c8 <HAL_I2S_GetState>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d103      	bne.n	800050c <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8000504:	2100      	movs	r1, #0
 8000506:	4816      	ldr	r0, [pc, #88]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 8000508:	f000 f94a 	bl	80007a0 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 800050c:	6838      	ldr	r0, [r7, #0]
 800050e:	f000 fa0f 	bl	8000930 <I2S3_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 8000518:	2301      	movs	r3, #1
 800051a:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d10e      	bne.n	8000540 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <AUDIO_OUT_Init+0x94>)
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	2094      	movs	r0, #148	; 0x94
 8000528:	4798      	blx	r3
 800052a:	4603      	mov	r3, r0
 800052c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000530:	2be0      	cmp	r3, #224	; 0xe0
 8000532:	d103      	bne.n	800053c <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <AUDIO_OUT_Init+0x98>)
 8000536:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <AUDIO_OUT_Init+0x94>)
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	e001      	b.n	8000540 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 800053c:	2301      	movs	r3, #1
 800053e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d107      	bne.n	8000556 <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <AUDIO_OUT_Init+0x98>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	681c      	ldr	r4, [r3, #0]
 800054c:	797a      	ldrb	r2, [r7, #5]
 800054e:	88f9      	ldrh	r1, [r7, #6]
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	2094      	movs	r0, #148	; 0x94
 8000554:	47a0      	blx	r4
  }
  
  return ret;
 8000556:	7bfb      	ldrb	r3, [r7, #15]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	200000d8 	.word	0x200000d8
 8000564:	40003c00 	.word	0x40003c00
 8000568:	20000004 	.word	0x20000004
 800056c:	200000d4 	.word	0x200000d4

08000570 <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <AUDIO_OUT_Play+0x4c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	b292      	uxth	r2, r2
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	2094      	movs	r0, #148	; 0x94
 8000588:	4798      	blx	r3
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8000590:	2301      	movs	r3, #1
 8000592:	e00f      	b.n	80005b4 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800059a:	d203      	bcs.n	80005a4 <AUDIO_OUT_Play+0x34>
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	085b      	lsrs	r3, r3, #1
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	e001      	b.n	80005a8 <AUDIO_OUT_Play+0x38>
 80005a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a8:	461a      	mov	r2, r3
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <AUDIO_OUT_Play+0x50>)
 80005ae:	f005 fb89 	bl	8005cc4 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005b2:	2300      	movs	r3, #0
  }
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200000d4 	.word	0x200000d4
 80005c0:	200000d8 	.word	0x200000d8

080005c4 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <AUDIO_OUT_Pause+0x24>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	691b      	ldr	r3, [r3, #16]
 80005ce:	2094      	movs	r0, #148	; 0x94
 80005d0:	4798      	blx	r3
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 80005d8:	2301      	movs	r3, #1
 80005da:	e003      	b.n	80005e4 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <AUDIO_OUT_Pause+0x28>)
 80005de:	f005 fc19 	bl	8005e14 <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005e2:	2300      	movs	r3, #0
  }
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200000d4 	.word	0x200000d4
 80005ec:	200000d8 	.word	0x200000d8

080005f0 <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <AUDIO_OUT_Resume+0x24>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	2094      	movs	r0, #148	; 0x94
 80005fc:	4798      	blx	r3
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	e003      	b.n	8000610 <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 8000608:	4803      	ldr	r0, [pc, #12]	; (8000618 <AUDIO_OUT_Resume+0x28>)
 800060a:	f005 fc65 	bl	8005ed8 <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800060e:	2300      	movs	r3, #0
  }
}
 8000610:	4618      	mov	r0, r3
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000d4 	.word	0x200000d4
 8000618:	200000d8 	.word	0x200000d8

0800061c <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8000624:	480e      	ldr	r0, [pc, #56]	; (8000660 <AUDIO_OUT_Stop+0x44>)
 8000626:	f005 fceb 	bl	8006000 <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <AUDIO_OUT_Stop+0x48>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	2094      	movs	r0, #148	; 0x94
 8000634:	4798      	blx	r3
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 800063c:	2301      	movs	r3, #1
 800063e:	e00b      	b.n	8000658 <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d107      	bne.n	8000656 <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(1);
 8000646:	2001      	movs	r0, #1
 8000648:	f001 fde6 	bl	8002218 <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2110      	movs	r1, #16
 8000650:	4805      	ldr	r0, [pc, #20]	; (8000668 <AUDIO_OUT_Stop+0x4c>)
 8000652:	f002 fdbd 	bl	80031d0 <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000656:	2300      	movs	r3, #0
  }
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000d8 	.word	0x200000d8
 8000664:	200000d4 	.word	0x200000d4
 8000668:	40020c00 	.word	0x40020c00

0800066c <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <AUDIO_OUT_SetVolume+0x2c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	6a1b      	ldr	r3, [r3, #32]
 800067c:	79fa      	ldrb	r2, [r7, #7]
 800067e:	4611      	mov	r1, r2
 8000680:	2094      	movs	r0, #148	; 0x94
 8000682:	4798      	blx	r3
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	e000      	b.n	8000690 <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800068e:	2300      	movs	r3, #0
  }
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000d4 	.word	0x200000d4

0800069c <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <HAL_I2S_TxCpltCallback+0x20>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d101      	bne.n	80006b2 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 80006ae:	f001 fcef 	bl	8002090 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40003c00 	.word	0x40003c00

080006c0 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d101      	bne.n	80006d6 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 80006d2:	f001 fcf1 	bl	80020b8 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40003c00 	.word	0x40003c00

080006e4 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80006f6:	23ff      	movs	r3, #255	; 0xff
 80006f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  
  for(index = 0; index < 8; index++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000702:	e010      	b.n	8000726 <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 8000704:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000708:	4a22      	ldr	r2, [pc, #136]	; (8000794 <AUDIO_OUT_ClockConfig+0xb0>)
 800070a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	429a      	cmp	r2, r3
 8000712:	d103      	bne.n	800071c <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 8000714:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000718:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  for(index = 0; index < 8; index++)
 800071c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000720:	3301      	adds	r3, #1
 8000722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000726:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800072a:	2b07      	cmp	r3, #7
 800072c:	d9ea      	bls.n	8000704 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4618      	mov	r0, r3
 8000734:	f006 ff9a 	bl	800766c <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000738:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800073c:	f003 0307 	and.w	r3, r3, #7
 8000740:	2b00      	cmp	r3, #0
 8000742:	d115      	bne.n	8000770 <AUDIO_OUT_ClockConfig+0x8c>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000744:	2301      	movs	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8000748:	2308      	movs	r3, #8
 800074a:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 800074c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <AUDIO_OUT_ClockConfig+0xb4>)
 8000752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000756:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000758:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800075c:	4a0f      	ldr	r2, [pc, #60]	; (800079c <AUDIO_OUT_ClockConfig+0xb8>)
 800075e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000762:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4618      	mov	r0, r3
 800076a:	f006 fe8f 	bl	800748c <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 800076e:	e00d      	b.n	800078c <AUDIO_OUT_ClockConfig+0xa8>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000770:	2301      	movs	r3, #1
 8000772:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8000774:	2308      	movs	r3, #8
 8000776:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000778:	f44f 7381 	mov.w	r3, #258	; 0x102
 800077c:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 800077e:	2303      	movs	r3, #3
 8000780:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4618      	mov	r0, r3
 8000788:	f006 fe80 	bl	800748c <HAL_RCCEx_PeriphCLKConfig>
}
 800078c:	bf00      	nop
 800078e:	3730      	adds	r7, #48	; 0x30
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	0800f984 	.word	0x0800f984
 8000798:	0800f9a4 	.word	0x0800f9a4
 800079c:	0800f9c4 	.word	0x0800f9c4

080007a0 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	4b56      	ldr	r3, [pc, #344]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	4a55      	ldr	r2, [pc, #340]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007b8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ba:	4b53      	ldr	r3, [pc, #332]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	4b4f      	ldr	r3, [pc, #316]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a4e      	ldr	r2, [pc, #312]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b4c      	ldr	r3, [pc, #304]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b48      	ldr	r3, [pc, #288]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a47      	ldr	r2, [pc, #284]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b45      	ldr	r3, [pc, #276]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80007fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 800080c:	2302      	movs	r3, #2
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8000810:	2306      	movs	r3, #6
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	483c      	ldr	r0, [pc, #240]	; (800090c <AUDIO_OUT_MspInit+0x16c>)
 800081c:	f002 fa70 	bl	8002d00 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8000820:	2310      	movs	r3, #16
 8000822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4839      	ldr	r0, [pc, #228]	; (8000910 <AUDIO_OUT_MspInit+0x170>)
 800082c:	f002 fa68 	bl	8002d00 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	4b34      	ldr	r3, [pc, #208]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000838:	4a33      	ldr	r2, [pc, #204]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	6313      	str	r3, [r2, #48]	; 0x30
 8000840:	4b31      	ldr	r3, [pc, #196]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	482d      	ldr	r0, [pc, #180]	; (800090c <AUDIO_OUT_MspInit+0x16c>)
 8000858:	f002 fa52 	bl	8002d00 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	4b29      	ldr	r3, [pc, #164]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	4a28      	ldr	r2, [pc, #160]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 8000866:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800086a:	6313      	str	r3, [r2, #48]	; 0x30
 800086c:	4b26      	ldr	r3, [pc, #152]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a25      	ldr	r2, [pc, #148]	; (8000914 <AUDIO_OUT_MspInit+0x174>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d136      	bne.n	80008f0 <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8000882:	4b25      	ldr	r3, [pc, #148]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000888:	4b23      	ldr	r3, [pc, #140]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 800088a:	2240      	movs	r2, #64	; 0x40
 800088c:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800088e:	4b22      	ldr	r3, [pc, #136]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8000894:	4b20      	ldr	r3, [pc, #128]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 8000896:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800089a:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 800089e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008a2:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008aa:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008b8:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008bc:	2204      	movs	r2, #4
 80008be:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008c2:	2203      	movs	r2, #3
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008d4:	4a11      	ldr	r2, [pc, #68]	; (800091c <AUDIO_OUT_MspInit+0x17c>)
 80008d6:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008dc:	639a      	str	r2, [r3, #56]	; 0x38
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008e6:	f001 fe7b 	bl	80025e0 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 80008ea:	480b      	ldr	r0, [pc, #44]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008ec:	f001 fdca 	bl	8002484 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	210e      	movs	r1, #14
 80008f4:	202f      	movs	r0, #47	; 0x2f
 80008f6:	f001 fd8e 	bl	8002416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80008fa:	202f      	movs	r0, #47	; 0x2f
 80008fc:	f001 fda7 	bl	800244e <HAL_NVIC_EnableIRQ>
}
 8000900:	bf00      	nop
 8000902:	3730      	adds	r7, #48	; 0x30
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40020800 	.word	0x40020800
 8000910:	40020000 	.word	0x40020000
 8000914:	40003c00 	.word	0x40003c00
 8000918:	20000120 	.word	0x20000120
 800091c:	400260b8 	.word	0x400260b8

08000920 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <I2S3_Init+0x68>)
 800093a:	4a18      	ldr	r2, [pc, #96]	; (800099c <I2S3_Init+0x6c>)
 800093c:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <I2S3_Init+0x68>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	69da      	ldr	r2, [r3, #28]
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <I2S3_Init+0x68>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800094c:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <I2S3_Init+0x68>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <I2S3_Init+0x68>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <I2S3_Init+0x68>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <I2S3_Init+0x68>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <I2S3_Init+0x68>)
 8000968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800096c:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <I2S3_Init+0x68>)
 8000970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000974:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <I2S3_Init+0x68>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 800097c:	4806      	ldr	r0, [pc, #24]	; (8000998 <I2S3_Init+0x68>)
 800097e:	f005 f861 	bl	8005a44 <HAL_I2S_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 8000988:	2301      	movs	r3, #1
 800098a:	e000      	b.n	800098e <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 800098c:	2300      	movs	r3, #0
  }
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200000d8 	.word	0x200000d8
 800099c:	40003c00 	.word	0x40003c00

080009a0 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_I2S_ErrorCallback+0x20>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d101      	bne.n	80009b6 <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 80009b2:	f7ff ffb5 	bl	8000920 <AUDIO_OUT_Error_CallBack>
  }
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40003c00 	.word	0x40003c00

080009c4 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80009c8:	4814      	ldr	r0, [pc, #80]	; (8000a1c <I2Cx_Init+0x58>)
 80009ca:	f004 fcd1 	bl	8005370 <HAL_I2C_GetState>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d121      	bne.n	8000a18 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <I2Cx_Init+0x58>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <I2Cx_Init+0x5c>)
 80009d8:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <I2Cx_Init+0x58>)
 80009dc:	2243      	movs	r2, #67	; 0x43
 80009de:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <I2Cx_Init+0x58>)
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <I2Cx_Init+0x60>)
 80009e4:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <I2Cx_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <I2Cx_Init+0x58>)
 80009ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009f2:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <I2Cx_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <I2Cx_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <I2Cx_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <I2Cx_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <I2Cx_Init+0x58>)
 8000a0e:	f000 f86b 	bl	8000ae8 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000a12:	4802      	ldr	r0, [pc, #8]	; (8000a1c <I2Cx_Init+0x58>)
 8000a14:	f004 f818 	bl	8004a48 <HAL_I2C_Init>
  }
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000180 	.word	0x20000180
 8000a20:	40005400 	.word	0x40005400
 8000a24:	000186a0 	.word	0x000186a0

08000a28 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af04      	add	r7, sp, #16
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80fb      	strh	r3, [r7, #6]
 8000a32:	460b      	mov	r3, r1
 8000a34:	717b      	strb	r3, [r7, #5]
 8000a36:	4613      	mov	r3, r2
 8000a38:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000a3e:	797b      	ldrb	r3, [r7, #5]
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <I2Cx_WriteData+0x48>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	88f9      	ldrh	r1, [r7, #6]
 8000a48:	9302      	str	r3, [sp, #8]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2301      	movs	r3, #1
 8000a54:	4807      	ldr	r0, [pc, #28]	; (8000a74 <I2Cx_WriteData+0x4c>)
 8000a56:	f004 f96b 	bl	8004d30 <HAL_I2C_Mem_Write>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000a64:	f000 f834 	bl	8000ad0 <I2Cx_Error>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000000 	.word	0x20000000
 8000a74:	20000180 	.word	0x20000180

08000a78 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af04      	add	r7, sp, #16
 8000a7e:	4603      	mov	r3, r0
 8000a80:	460a      	mov	r2, r1
 8000a82:	80fb      	strh	r3, [r7, #6]
 8000a84:	4613      	mov	r3, r2
 8000a86:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000a90:	797b      	ldrb	r3, [r7, #5]
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <I2Cx_ReadData+0x50>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	88f9      	ldrh	r1, [r7, #6]
 8000a9a:	9302      	str	r3, [sp, #8]
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	f107 030e 	add.w	r3, r7, #14
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	4808      	ldr	r0, [pc, #32]	; (8000acc <I2Cx_ReadData+0x54>)
 8000aaa:	f004 fa3b 	bl	8004f24 <HAL_I2C_Mem_Read>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000ab8:	f000 f80a 	bl	8000ad0 <I2Cx_Error>
  }
  return value;
 8000abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000180 	.word	0x20000180

08000ad0 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000ad4:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <I2Cx_Error+0x14>)
 8000ad6:	f004 f8fb 	bl	8004cd0 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000ada:	f7ff ff73 	bl	80009c4 <I2Cx_Init>
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000180 	.word	0x20000180

08000ae8 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a24      	ldr	r2, [pc, #144]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000afa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000b28:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000b2e:	2312      	movs	r3, #18
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000b36:	2302      	movs	r3, #2
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4812      	ldr	r0, [pc, #72]	; (8000b90 <I2Cx_MspInit+0xa8>)
 8000b46:	f002 f8db 	bl	8002d00 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b4c:	6a1b      	ldr	r3, [r3, #32]
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b54:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b58:	6a1b      	ldr	r3, [r3, #32]
 8000b5a:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b60:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	210f      	movs	r1, #15
 8000b66:	201f      	movs	r0, #31
 8000b68:	f001 fc55 	bl	8002416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000b6c:	201f      	movs	r0, #31
 8000b6e:	f001 fc6e 	bl	800244e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	210f      	movs	r1, #15
 8000b76:	2020      	movs	r0, #32
 8000b78:	f001 fc4d 	bl	8002416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000b7c:	2020      	movs	r0, #32
 8000b7e:	f001 fc66 	bl	800244e <HAL_NVIC_EnableIRQ>
}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020400 	.word	0x40020400

08000b94 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <AUDIO_IO_Init+0x68>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a16      	ldr	r2, [pc, #88]	; (8000bfc <AUDIO_IO_Init+0x68>)
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <AUDIO_IO_Init+0x68>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000bb6:	2310      	movs	r3, #16
 8000bb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <AUDIO_IO_Init+0x6c>)
 8000bcc:	f002 f898 	bl	8002d00 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000bd0:	f7ff fef8 	bl	80009c4 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <AUDIO_IO_Init+0x6c>)
 8000bda:	f002 faf9 	bl	80031d0 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bde:	2005      	movs	r0, #5
 8000be0:	f001 fb1a 	bl	8002218 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000be4:	2201      	movs	r2, #1
 8000be6:	2110      	movs	r1, #16
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <AUDIO_IO_Init+0x6c>)
 8000bea:	f002 faf1 	bl	80031d0 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bee:	2005      	movs	r0, #5
 8000bf0:	f001 fb12 	bl	8002218 <HAL_Delay>
}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020c00 	.word	0x40020c00

08000c04 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	71bb      	strb	r3, [r7, #6]
 8000c20:	4613      	mov	r3, r2
 8000c22:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	797a      	ldrb	r2, [r7, #5]
 8000c2a:	79b9      	ldrb	r1, [r7, #6]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fefb 	bl	8000a28 <I2Cx_WriteData>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	460a      	mov	r2, r1
 8000c44:	71fb      	strb	r3, [r7, #7]
 8000c46:	4613      	mov	r3, r2
 8000c48:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	79ba      	ldrb	r2, [r7, #6]
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ff10 	bl	8000a78 <I2Cx_ReadData>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <AUDIO_StorageParse>:

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b0d6      	sub	sp, #344	; 0x158
 8000c68:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USBHPath);
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	4945      	ldr	r1, [pc, #276]	; (8000d88 <AUDIO_StorageParse+0x124>)
 8000c74:	4618      	mov	r0, r3
 8000c76:	f00d ff9b 	bl	800ebb0 <f_opendir>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FileList.ptr = 0;
 8000c80:	4b42      	ldr	r3, [pc, #264]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8

  if(res == FR_OK)
 8000c88:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d16b      	bne.n	8000d68 <AUDIO_StorageParse+0x104>
  {
    while(Appli_state == APPLICATION_READY)
 8000c90:	e066      	b.n	8000d60 <AUDIO_StorageParse+0xfc>
    {
      res = f_readdir(&dir, &fno);
 8000c92:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f00e f821 	bl	800ece2 <f_readdir>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if(res != FR_OK || fno.fname[0] == 0)
 8000ca6:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d15c      	bne.n	8000d68 <AUDIO_StorageParse+0x104>
 8000cae:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000cb2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cb6:	7d9b      	ldrb	r3, [r3, #22]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d055      	beq.n	8000d68 <AUDIO_StorageParse+0x104>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000cbc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000cc0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cc4:	7d9b      	ldrb	r3, [r3, #22]
 8000cc6:	2b2e      	cmp	r3, #46	; 0x2e
 8000cc8:	d100      	bne.n	8000ccc <AUDIO_StorageParse+0x68>
      {
        continue;
 8000cca:	e049      	b.n	8000d60 <AUDIO_StorageParse+0xfc>
      }

      fn = fno.fname;
 8000ccc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cd0:	3316      	adds	r3, #22
 8000cd2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000cd6:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000cd8:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000cdc:	2b17      	cmp	r3, #23
 8000cde:	d83f      	bhi.n	8000d60 <AUDIO_StorageParse+0xfc>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000ce0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000ce4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ce8:	7a1b      	ldrb	r3, [r3, #8]
 8000cea:	f003 0310 	and.w	r3, r3, #16
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d136      	bne.n	8000d60 <AUDIO_StorageParse+0xfc>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000cf2:	4927      	ldr	r1, [pc, #156]	; (8000d90 <AUDIO_StorageParse+0x12c>)
 8000cf4:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000cf8:	f00e fd61 	bl	800f7be <strstr>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d107      	bne.n	8000d12 <AUDIO_StorageParse+0xae>
 8000d02:	4924      	ldr	r1, [pc, #144]	; (8000d94 <AUDIO_StorageParse+0x130>)
 8000d04:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000d08:	f00e fd59 	bl	800f7be <strstr>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d026      	beq.n	8000d60 <AUDIO_StorageParse+0xfc>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d14:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	4413      	add	r3, r2
 8000d24:	4a19      	ldr	r2, [pc, #100]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d26:	4413      	add	r3, r2
 8000d28:	3301      	adds	r3, #1
 8000d2a:	2228      	movs	r2, #40	; 0x28
 8000d2c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8000d30:	4618      	mov	r0, r3
 8000d32:	f00e fd31 	bl	800f798 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d38:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4913      	ldr	r1, [pc, #76]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	4413      	add	r3, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d52:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d56:	3301      	adds	r3, #1
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d5c:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
    while(Appli_state == APPLICATION_READY)
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <AUDIO_StorageParse+0x134>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d094      	beq.n	8000c92 <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d6a:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	; 0x3d8
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <AUDIO_StorageParse+0x138>)
 8000d70:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	4618      	mov	r0, r3
 8000d76:	f00d ff8e 	bl	800ec96 <f_closedir>
  return res;
 8000d7a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20001980 	.word	0x20001980
 8000d8c:	20001340 	.word	0x20001340
 8000d90:	0800f930 	.word	0x0800f930
 8000d94:	0800f934 	.word	0x0800f934
 8000d98:	200021c4 	.word	0x200021c4
 8000d9c:	200001d6 	.word	0x200001d6

08000da0 <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK) return NumObs;
 8000da4:	f7ff ff5e 	bl	8000c64 <AUDIO_StorageParse>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d102      	bne.n	8000db4 <AUDIO_GetWavObjectNumber+0x14>
 8000dae:	4b02      	ldr	r3, [pc, #8]	; (8000db8 <AUDIO_GetWavObjectNumber+0x18>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	e7ff      	b.n	8000db4 <AUDIO_GetWavObjectNumber+0x14>
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200001d6 	.word	0x200001d6

08000dbc <Mount_USB>:

void Mount_USB (void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4905      	ldr	r1, [pc, #20]	; (8000dd8 <Mount_USB+0x1c>)
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <Mount_USB+0x20>)
 8000dc6:	f00d f8ff 	bl	800dfc8 <f_mount>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <Mount_USB+0x24>)
 8000dd0:	701a      	strb	r2, [r3, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20001980 	.word	0x20001980
 8000ddc:	20001984 	.word	0x20001984
 8000de0:	200001d4 	.word	0x200001d4

08000de4 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	4603      	mov	r3, r0
 8000dee:	81fb      	strh	r3, [r7, #14]
 8000df0:	460b      	mov	r3, r1
 8000df2:	81bb      	strh	r3, [r7, #12]
 8000df4:	4613      	mov	r3, r2
 8000df6:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000dfc:	f7ff feca 	bl	8000b94 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000e00:	89fb      	ldrh	r3, [r7, #14]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2201      	movs	r2, #1
 8000e06:	2102      	movs	r1, #2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 fb01 	bl	8001410 <CODEC_IO_Write>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	461a      	mov	r2, r3
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	4413      	add	r3, r2
 8000e16:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000e18:	89bb      	ldrh	r3, [r7, #12]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	d81b      	bhi.n	8000e58 <cs43l22_Init+0x74>
 8000e20:	a201      	add	r2, pc, #4	; (adr r2, 8000e28 <cs43l22_Init+0x44>)
 8000e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e26:	bf00      	nop
 8000e28:	08000e39 	.word	0x08000e39
 8000e2c:	08000e41 	.word	0x08000e41
 8000e30:	08000e49 	.word	0x08000e49
 8000e34:	08000e51 	.word	0x08000e51
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000e38:	4b5b      	ldr	r3, [pc, #364]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e3a:	22fa      	movs	r2, #250	; 0xfa
 8000e3c:	701a      	strb	r2, [r3, #0]
    break;
 8000e3e:	e00f      	b.n	8000e60 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000e40:	4b59      	ldr	r3, [pc, #356]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e42:	22af      	movs	r2, #175	; 0xaf
 8000e44:	701a      	strb	r2, [r3, #0]
    break;
 8000e46:	e00b      	b.n	8000e60 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000e48:	4b57      	ldr	r3, [pc, #348]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e4a:	22aa      	movs	r2, #170	; 0xaa
 8000e4c:	701a      	strb	r2, [r3, #0]
    break;
 8000e4e:	e007      	b.n	8000e60 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000e50:	4b55      	ldr	r3, [pc, #340]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e52:	2205      	movs	r2, #5
 8000e54:	701a      	strb	r2, [r3, #0]
    break;    
 8000e56:	e003      	b.n	8000e60 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000e58:	4b53      	ldr	r3, [pc, #332]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e5a:	2205      	movs	r2, #5
 8000e5c:	701a      	strb	r2, [r3, #0]
    break;    
 8000e5e:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000e60:	89fb      	ldrh	r3, [r7, #14]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	4a50      	ldr	r2, [pc, #320]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e66:	7812      	ldrb	r2, [r2, #0]
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 facf 	bl	8001410 <CODEC_IO_Write>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	4413      	add	r3, r2
 8000e7a:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000e7c:	89fb      	ldrh	r3, [r7, #14]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2281      	movs	r2, #129	; 0x81
 8000e82:	2105      	movs	r1, #5
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 fac3 	bl	8001410 <CODEC_IO_Write>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	4413      	add	r3, r2
 8000e92:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000e94:	89fb      	ldrh	r3, [r7, #14]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2204      	movs	r2, #4
 8000e9a:	2106      	movs	r1, #6
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fab7 	bl	8001410 <CODEC_IO_Write>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000eac:	7afa      	ldrb	r2, [r7, #11]
 8000eae:	89fb      	ldrh	r3, [r7, #14]
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f964 	bl	8001180 <cs43l22_SetVolume>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000ec0:	89bb      	ldrh	r3, [r7, #12]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d023      	beq.n	8000f0e <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000ec6:	89fb      	ldrh	r3, [r7, #14]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2206      	movs	r2, #6
 8000ecc:	210f      	movs	r1, #15
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fa9e 	bl	8001410 <CODEC_IO_Write>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	4413      	add	r3, r2
 8000edc:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000ede:	89fb      	ldrh	r3, [r7, #14]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2124      	movs	r1, #36	; 0x24
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fa92 	bl	8001410 <CODEC_IO_Write>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000ef6:	89fb      	ldrh	r3, [r7, #14]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2200      	movs	r2, #0
 8000efc:	2125      	movs	r1, #37	; 0x25
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fa86 	bl	8001410 <CODEC_IO_Write>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000f0e:	89fb      	ldrh	r3, [r7, #14]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2200      	movs	r2, #0
 8000f14:	210a      	movs	r1, #10
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fa7a 	bl	8001410 <CODEC_IO_Write>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	4413      	add	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000f26:	89fb      	ldrh	r3, [r7, #14]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	210e      	movs	r1, #14
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fa6e 	bl	8001410 <CODEC_IO_Write>
 8000f34:	4603      	mov	r3, r0
 8000f36:	461a      	mov	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000f3e:	89fb      	ldrh	r3, [r7, #14]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2200      	movs	r2, #0
 8000f44:	2127      	movs	r1, #39	; 0x27
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fa62 	bl	8001410 <CODEC_IO_Write>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	4413      	add	r3, r2
 8000f54:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	211f      	movs	r1, #31
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fa56 	bl	8001410 <CODEC_IO_Write>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000f6e:	89fb      	ldrh	r3, [r7, #14]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	220a      	movs	r2, #10
 8000f74:	211a      	movs	r1, #26
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fa4a 	bl	8001410 <CODEC_IO_Write>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	4413      	add	r3, r2
 8000f84:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000f86:	89fb      	ldrh	r3, [r7, #14]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	220a      	movs	r2, #10
 8000f8c:	211b      	movs	r1, #27
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fa3e 	bl	8001410 <CODEC_IO_Write>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000f9e:	697b      	ldr	r3, [r7, #20]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200001d8 	.word	0x200001d8

08000fac <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000fb0:	f7ff fe28 	bl	8000c04 <AUDIO_IO_DeInit>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000fc2:	f7ff fde7 	bl	8000b94 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2101      	movs	r1, #1
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fe34 	bl	8000c3a <AUDIO_IO_Read>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	f023 0307 	bic.w	r3, r3, #7
 8000fdc:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	80fb      	strh	r3, [r7, #6]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <cs43l22_Play+0x70>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d123      	bne.n	800104c <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2206      	movs	r2, #6
 800100a:	210e      	movs	r1, #14
 800100c:	4618      	mov	r0, r3
 800100e:	f000 f9ff 	bl	8001410 <CODEC_IO_Write>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4413      	add	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f919 	bl	8001258 <cs43l22_SetMute>
 8001026:	4602      	mov	r2, r0
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	229e      	movs	r2, #158	; 0x9e
 8001034:	2102      	movs	r1, #2
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f9ea 	bl	8001410 <CODEC_IO_Write>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <cs43l22_Play+0x70>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 800104c:	68fb      	ldr	r3, [r7, #12]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000034 	.word	0x20000034

0800105c <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	2101      	movs	r1, #1
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f8f2 	bl	8001258 <cs43l22_SetMute>
 8001074:	4602      	mov	r2, r0
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4413      	add	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2201      	movs	r2, #1
 8001082:	2102      	movs	r1, #2
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f9c3 	bl	8001410 <CODEC_IO_Write>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4413      	add	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001094:	68fb      	ldr	r3, [r7, #12]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f8ce 	bl	8001258 <cs43l22_SetMute>
 80010bc:	4602      	mov	r2, r0
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4413      	add	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	e002      	b.n	80010d0 <cs43l22_Resume+0x30>
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3301      	adds	r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2bfe      	cmp	r3, #254	; 0xfe
 80010d4:	d9f9      	bls.n	80010ca <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <cs43l22_Resume+0x74>)
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	2104      	movs	r1, #4
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f994 	bl	8001410 <CODEC_IO_Write>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	229e      	movs	r2, #158	; 0x9e
 80010f8:	2102      	movs	r1, #2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f988 	bl	8001410 <CODEC_IO_Write>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200001d8 	.word	0x200001d8

08001118 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	2101      	movs	r1, #1
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f893 	bl	8001258 <cs43l22_SetMute>
 8001132:	4602      	mov	r2, r0
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2204      	movs	r2, #4
 8001140:	210e      	movs	r1, #14
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f964 	bl	8001410 <CODEC_IO_Write>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	229f      	movs	r2, #159	; 0x9f
 8001158:	2102      	movs	r1, #2
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f958 	bl	8001410 <CODEC_IO_Write>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <cs43l22_Stop+0x64>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001170:	68fb      	ldr	r3, [r7, #12]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000034 	.word	0x20000034

08001180 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	460a      	mov	r2, r1
 800118a:	80fb      	strh	r3, [r7, #6]
 800118c:	4613      	mov	r3, r2
 800118e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001194:	797b      	ldrb	r3, [r7, #5]
 8001196:	2b64      	cmp	r3, #100	; 0x64
 8001198:	d80b      	bhi.n	80011b2 <cs43l22_SetVolume+0x32>
 800119a:	797a      	ldrb	r2, [r7, #5]
 800119c:	4613      	mov	r3, r2
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	1a9b      	subs	r3, r3, r2
 80011a2:	4a25      	ldr	r2, [pc, #148]	; (8001238 <cs43l22_SetVolume+0xb8>)
 80011a4:	fb82 1203 	smull	r1, r2, r2, r3
 80011a8:	1152      	asrs	r2, r2, #5
 80011aa:	17db      	asrs	r3, r3, #31
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	e000      	b.n	80011b4 <cs43l22_SetVolume+0x34>
 80011b2:	23ff      	movs	r3, #255	; 0xff
 80011b4:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80011b6:	7afb      	ldrb	r3, [r7, #11]
 80011b8:	2be6      	cmp	r3, #230	; 0xe6
 80011ba:	d91c      	bls.n	80011f6 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	b2d8      	uxtb	r0, r3
 80011c0:	7afb      	ldrb	r3, [r7, #11]
 80011c2:	3319      	adds	r3, #25
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	2120      	movs	r1, #32
 80011ca:	f000 f921 	bl	8001410 <CODEC_IO_Write>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4413      	add	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	b2d8      	uxtb	r0, r3
 80011dc:	7afb      	ldrb	r3, [r7, #11]
 80011de:	3319      	adds	r3, #25
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	2121      	movs	r1, #33	; 0x21
 80011e6:	f000 f913 	bl	8001410 <CODEC_IO_Write>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4413      	add	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e01b      	b.n	800122e <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	b2d8      	uxtb	r0, r3
 80011fa:	7afb      	ldrb	r3, [r7, #11]
 80011fc:	3319      	adds	r3, #25
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	461a      	mov	r2, r3
 8001202:	2120      	movs	r1, #32
 8001204:	f000 f904 	bl	8001410 <CODEC_IO_Write>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	b2d8      	uxtb	r0, r3
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	3319      	adds	r3, #25
 800121a:	b2db      	uxtb	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	2121      	movs	r1, #33	; 0x21
 8001220:	f000 f8f6 	bl	8001410 <CODEC_IO_Write>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	51eb851f 	.word	0x51eb851f

0800123c <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d124      	bne.n	80012b8 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	22ff      	movs	r2, #255	; 0xff
 8001274:	2104      	movs	r1, #4
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f8ca 	bl	8001410 <CODEC_IO_Write>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2201      	movs	r2, #1
 800128c:	2122      	movs	r1, #34	; 0x22
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f8be 	bl	8001410 <CODEC_IO_Write>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2201      	movs	r2, #1
 80012a4:	2123      	movs	r1, #35	; 0x23
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f8b2 	bl	8001410 <CODEC_IO_Write>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	e025      	b.n	8001304 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2200      	movs	r2, #0
 80012be:	2122      	movs	r1, #34	; 0x22
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f8a5 	bl	8001410 <CODEC_IO_Write>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2200      	movs	r2, #0
 80012d6:	2123      	movs	r1, #35	; 0x23
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f899 	bl	8001410 <CODEC_IO_Write>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4a08      	ldr	r2, [pc, #32]	; (8001310 <cs43l22_SetMute+0xb8>)
 80012ee:	7812      	ldrb	r2, [r2, #0]
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	2104      	movs	r1, #4
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 f88b 	bl	8001410 <CODEC_IO_Write>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4413      	add	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001304:	68fb      	ldr	r3, [r7, #12]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200001d8 	.word	0x200001d8

08001314 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	460a      	mov	r2, r1
 800131e:	80fb      	strh	r3, [r7, #6]
 8001320:	4613      	mov	r3, r2
 8001322:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001328:	797b      	ldrb	r3, [r7, #5]
 800132a:	3b01      	subs	r3, #1
 800132c:	2b03      	cmp	r3, #3
 800132e:	d84b      	bhi.n	80013c8 <cs43l22_SetOutputMode+0xb4>
 8001330:	a201      	add	r2, pc, #4	; (adr r2, 8001338 <cs43l22_SetOutputMode+0x24>)
 8001332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001336:	bf00      	nop
 8001338:	08001349 	.word	0x08001349
 800133c:	08001369 	.word	0x08001369
 8001340:	08001389 	.word	0x08001389
 8001344:	080013a9 	.word	0x080013a9
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	22fa      	movs	r2, #250	; 0xfa
 800134e:	2104      	movs	r1, #4
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f85d 	bl	8001410 <CODEC_IO_Write>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4413      	add	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001360:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 8001362:	22fa      	movs	r2, #250	; 0xfa
 8001364:	701a      	strb	r2, [r3, #0]
      break;
 8001366:	e03f      	b.n	80013e8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	22af      	movs	r2, #175	; 0xaf
 800136e:	2104      	movs	r1, #4
 8001370:	4618      	mov	r0, r3
 8001372:	f000 f84d 	bl	8001410 <CODEC_IO_Write>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4413      	add	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 8001382:	22af      	movs	r2, #175	; 0xaf
 8001384:	701a      	strb	r2, [r3, #0]
      break;
 8001386:	e02f      	b.n	80013e8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	22aa      	movs	r2, #170	; 0xaa
 800138e:	2104      	movs	r1, #4
 8001390:	4618      	mov	r0, r3
 8001392:	f000 f83d 	bl	8001410 <CODEC_IO_Write>
 8001396:	4603      	mov	r3, r0
 8001398:	461a      	mov	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4413      	add	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 80013a2:	22aa      	movs	r2, #170	; 0xaa
 80013a4:	701a      	strb	r2, [r3, #0]
      break;
 80013a6:	e01f      	b.n	80013e8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2205      	movs	r2, #5
 80013ae:	2104      	movs	r1, #4
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f82d 	bl	8001410 <CODEC_IO_Write>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4413      	add	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 80013c2:	2205      	movs	r2, #5
 80013c4:	701a      	strb	r2, [r3, #0]
      break;    
 80013c6:	e00f      	b.n	80013e8 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2205      	movs	r2, #5
 80013ce:	2104      	movs	r1, #4
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f81d 	bl	8001410 <CODEC_IO_Write>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4413      	add	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 80013e2:	2205      	movs	r2, #5
 80013e4:	701a      	strb	r2, [r3, #0]
      break;
 80013e6:	bf00      	nop
  }  
  return counter;
 80013e8:	68fb      	ldr	r3, [r7, #12]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200001d8 	.word	0x200001d8

080013f8 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	460b      	mov	r3, r1
 800141c:	71bb      	strb	r3, [r7, #6]
 800141e:	4613      	mov	r3, r2
 8001420:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001426:	797a      	ldrb	r2, [r7, #5]
 8001428:	79b9      	ldrb	r1, [r7, #6]
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fbf0 	bl	8000c12 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	b2db      	uxtb	r3, r3
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_GPIO_EXTI_Callback>:
int8_t idx = 0; /* Indice de archivos */
uint8_t cantidad_archivos = 4; /* Cantidad de archivos a reproducir */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_2)
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	2b04      	cmp	r3, #4
 800144e:	d102      	bne.n	8001456 <HAL_GPIO_EXTI_Callback+0x16>
	{
		next = true;
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <HAL_GPIO_EXTI_Callback+0x30>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_6)
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	2b40      	cmp	r3, #64	; 0x40
 800145a:	d102      	bne.n	8001462 <HAL_GPIO_EXTI_Callback+0x22>
	{
		prev = true;
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_GPIO_EXTI_Callback+0x34>)
 800145e:	2201      	movs	r2, #1
 8001460:	701a      	strb	r2, [r3, #0]
	}
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	2000032c 	.word	0x2000032c
 8001474:	2000032d 	.word	0x2000032d

08001478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147c:	f000 fe5a 	bl	8002134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001480:	f000 f850 	bl	8001524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001484:	f000 f960 	bl	8001748 <MX_GPIO_Init>
  MX_DMA_Init();
 8001488:	f000 f93e 	bl	8001708 <MX_DMA_Init>
  MX_I2C1_Init();
 800148c:	f000 f8b2 	bl	80015f4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001490:	f000 f90c 	bl	80016ac <MX_I2S3_Init>
  MX_FATFS_Init();
 8001494:	f007 f972 	bl	800877c <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001498:	f00d fd82 	bl	800efa0 <MX_USB_HOST_Init>
  MX_I2C2_Init();
 800149c:	f000 f8d8 	bl	8001650 <MX_I2C2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC,sel_1_a_Pin,GPIO_PIN_RESET );
 80014a0:	2200      	movs	r2, #0
 80014a2:	2108      	movs	r1, #8
 80014a4:	481a      	ldr	r0, [pc, #104]	; (8001510 <main+0x98>)
 80014a6:	f001 fe93 	bl	80031d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,sel_1_b_Pin, GPIO_PIN_SET);
 80014aa:	2201      	movs	r2, #1
 80014ac:	2102      	movs	r1, #2
 80014ae:	4818      	ldr	r0, [pc, #96]	; (8001510 <main+0x98>)
 80014b0:	f001 fe8e 	bl	80031d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, sel_3_b_Pin|sel_3_a_Pin|sel_2_b_Pin|sel_2_a_Pin, GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	21aa      	movs	r1, #170	; 0xaa
 80014b8:	4816      	ldr	r0, [pc, #88]	; (8001514 <main+0x9c>)
 80014ba:	f001 fe89 	bl	80031d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, sel_2_b_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	2120      	movs	r1, #32
 80014c2:	4814      	ldr	r0, [pc, #80]	; (8001514 <main+0x9c>)
 80014c4:	f001 fe84 	bl	80031d0 <HAL_GPIO_WritePin>

	    /* USER CODE END WHILE */
	    MX_USB_HOST_Process();
 80014c8:	f00d fd90 	bl	800efec <MX_USB_HOST_Process>

	    /* USER CODE BEGIN 3 */

	    if (Appli_state == APPLICATION_READY)
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <main+0xa0>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d1e5      	bne.n	80014a0 <main+0x28>
	    {
	    	Mount_USB();
 80014d4:	f7ff fc72 	bl	8000dbc <Mount_USB>
	    	AUDIO_PLAYER_Start(0);
 80014d8:	2000      	movs	r0, #0
 80014da:	f000 fc5b 	bl	8001d94 <AUDIO_PLAYER_Start>

	    	while (1)
	    	{
	    		AUDIO_PLAYER_Process(TRUE,idx);
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <main+0xa4>)
 80014e0:	f993 3000 	ldrsb.w	r3, [r3]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	4619      	mov	r1, r3
 80014e8:	2001      	movs	r0, #1
 80014ea:	f000 fcb3 	bl	8001e54 <AUDIO_PLAYER_Process>

	    		if (next)
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <main+0xa8>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f3      	beq.n	80014de <main+0x66>
	    		{
	    			idx = idx + 1;
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <main+0xa4>)
 80014f8:	f993 3000 	ldrsb.w	r3, [r3]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	3301      	adds	r3, #1
 8001500:	b2db      	uxtb	r3, r3
 8001502:	b25a      	sxtb	r2, r3
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <main+0xa4>)
 8001506:	701a      	strb	r2, [r3, #0]
	    			next = false;
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <main+0xa8>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
	    		AUDIO_PLAYER_Process(TRUE,idx);
 800150e:	e7e6      	b.n	80014de <main+0x66>
 8001510:	40020800 	.word	0x40020800
 8001514:	40020000 	.word	0x40020000
 8001518:	200021c4 	.word	0x200021c4
 800151c:	2000032e 	.word	0x2000032e
 8001520:	2000032c 	.word	0x2000032c

08001524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b094      	sub	sp, #80	; 0x50
 8001528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152a:	f107 0320 	add.w	r3, r7, #32
 800152e:	2230      	movs	r2, #48	; 0x30
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f00e f928 	bl	800f788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <SystemClock_Config+0xc8>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	4a26      	ldr	r2, [pc, #152]	; (80015ec <SystemClock_Config+0xc8>)
 8001552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001556:	6413      	str	r3, [r2, #64]	; 0x40
 8001558:	4b24      	ldr	r3, [pc, #144]	; (80015ec <SystemClock_Config+0xc8>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001564:	2300      	movs	r3, #0
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <SystemClock_Config+0xcc>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a20      	ldr	r2, [pc, #128]	; (80015f0 <SystemClock_Config+0xcc>)
 800156e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <SystemClock_Config+0xcc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001580:	2301      	movs	r3, #1
 8001582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800158a:	2302      	movs	r3, #2
 800158c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800158e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001594:	2304      	movs	r3, #4
 8001596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001598:	23c0      	movs	r3, #192	; 0xc0
 800159a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800159c:	2304      	movs	r3, #4
 800159e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80015a0:	2308      	movs	r3, #8
 80015a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a4:	f107 0320 	add.w	r3, r7, #32
 80015a8:	4618      	mov	r0, r3
 80015aa:	f005 faeb 	bl	8006b84 <HAL_RCC_OscConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015b4:	f000 f97e 	bl	80018b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b8:	230f      	movs	r3, #15
 80015ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015bc:	2302      	movs	r3, #2
 80015be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	2103      	movs	r1, #3
 80015d4:	4618      	mov	r0, r3
 80015d6:	f005 fd4d 	bl	8007074 <HAL_RCC_ClockConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015e0:	f000 f968 	bl	80018b4 <Error_Handler>
  }
}
 80015e4:	bf00      	nop
 80015e6:	3750      	adds	r7, #80	; 0x50
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40007000 	.word	0x40007000

080015f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_I2C1_Init+0x50>)
 80015fa:	4a13      	ldr	r2, [pc, #76]	; (8001648 <MX_I2C1_Init+0x54>)
 80015fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_I2C1_Init+0x50>)
 8001600:	4a12      	ldr	r2, [pc, #72]	; (800164c <MX_I2C1_Init+0x58>)
 8001602:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_I2C1_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_I2C1_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_I2C1_Init+0x50>)
 8001612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001616:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <MX_I2C1_Init+0x50>)
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_I2C1_Init+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <MX_I2C1_Init+0x50>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_I2C1_Init+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <MX_I2C1_Init+0x50>)
 8001632:	f003 fa09 	bl	8004a48 <HAL_I2C_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800163c:	f000 f93a 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200001dc 	.word	0x200001dc
 8001648:	40005400 	.word	0x40005400
 800164c:	00061a80 	.word	0x00061a80

08001650 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <MX_I2C2_Init+0x50>)
 8001656:	4a13      	ldr	r2, [pc, #76]	; (80016a4 <MX_I2C2_Init+0x54>)
 8001658:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_I2C2_Init+0x50>)
 800165c:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <MX_I2C2_Init+0x58>)
 800165e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <MX_I2C2_Init+0x50>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <MX_I2C2_Init+0x50>)
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <MX_I2C2_Init+0x50>)
 800166e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001672:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <MX_I2C2_Init+0x50>)
 8001676:	2200      	movs	r2, #0
 8001678:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <MX_I2C2_Init+0x50>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <MX_I2C2_Init+0x50>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <MX_I2C2_Init+0x50>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800168c:	4804      	ldr	r0, [pc, #16]	; (80016a0 <MX_I2C2_Init+0x50>)
 800168e:	f003 f9db 	bl	8004a48 <HAL_I2C_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001698:	f000 f90c 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000230 	.word	0x20000230
 80016a4:	40005800 	.word	0x40005800
 80016a8:	00061a80 	.word	0x00061a80

080016ac <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <MX_I2S3_Init+0x54>)
 80016b2:	4a14      	ldr	r2, [pc, #80]	; (8001704 <MX_I2S3_Init+0x58>)
 80016b4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_I2S3_Init+0x54>)
 80016b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016bc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <MX_I2S3_Init+0x54>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_I2S3_Init+0x54>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <MX_I2S3_Init+0x54>)
 80016cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <MX_I2S3_Init+0x54>)
 80016d4:	f64a 4244 	movw	r2, #44100	; 0xac44
 80016d8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_I2S3_Init+0x54>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <MX_I2S3_Init+0x54>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_I2S3_Init+0x54>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_I2S3_Init+0x54>)
 80016ee:	f004 f9a9 	bl	8005a44 <HAL_I2S_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80016f8:	f000 f8dc 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000284 	.word	0x20000284
 8001704:	40003c00 	.word	0x40003c00

08001708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_DMA_Init+0x3c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <MX_DMA_Init+0x3c>)
 8001718:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_DMA_Init+0x3c>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	2010      	movs	r0, #16
 8001730:	f000 fe71 	bl	8002416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001734:	2010      	movs	r0, #16
 8001736:	f000 fe8a 	bl	800244e <HAL_NVIC_EnableIRQ>

}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800

08001748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	4b50      	ldr	r3, [pc, #320]	; (80018a4 <MX_GPIO_Init+0x15c>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a4f      	ldr	r2, [pc, #316]	; (80018a4 <MX_GPIO_Init+0x15c>)
 8001768:	f043 0310 	orr.w	r3, r3, #16
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b4d      	ldr	r3, [pc, #308]	; (80018a4 <MX_GPIO_Init+0x15c>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b49      	ldr	r3, [pc, #292]	; (80018a4 <MX_GPIO_Init+0x15c>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a48      	ldr	r2, [pc, #288]	; (80018a4 <MX_GPIO_Init+0x15c>)
 8001784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b46      	ldr	r3, [pc, #280]	; (80018a4 <MX_GPIO_Init+0x15c>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <MX_GPIO_Init+0x15c>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a41      	ldr	r2, [pc, #260]	; (80018a4 <MX_GPIO_Init+0x15c>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b3f      	ldr	r3, [pc, #252]	; (80018a4 <MX_GPIO_Init+0x15c>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	4b3b      	ldr	r3, [pc, #236]	; (80018a4 <MX_GPIO_Init+0x15c>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a3a      	ldr	r2, [pc, #232]	; (80018a4 <MX_GPIO_Init+0x15c>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <MX_GPIO_Init+0x15c>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <MX_GPIO_Init+0x15c>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a33      	ldr	r2, [pc, #204]	; (80018a4 <MX_GPIO_Init+0x15c>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b31      	ldr	r3, [pc, #196]	; (80018a4 <MX_GPIO_Init+0x15c>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|sel_1_b_Pin|sel_1_a_Pin, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	210b      	movs	r1, #11
 80017ee:	482e      	ldr	r0, [pc, #184]	; (80018a8 <MX_GPIO_Init+0x160>)
 80017f0:	f001 fcee 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, sel_3_b_Pin|sel_3_a_Pin|sel_2_b_Pin|sel_2_a_Pin, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	21aa      	movs	r1, #170	; 0xaa
 80017f8:	482c      	ldr	r0, [pc, #176]	; (80018ac <MX_GPIO_Init+0x164>)
 80017fa:	f001 fce9 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80017fe:	2344      	movs	r3, #68	; 0x44
 8001800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001802:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001808:	2301      	movs	r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	4827      	ldr	r0, [pc, #156]	; (80018b0 <MX_GPIO_Init+0x168>)
 8001814:	f001 fa74 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 sel_1_b_Pin sel_1_a_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|sel_1_b_Pin|sel_1_a_Pin;
 8001818:	230b      	movs	r3, #11
 800181a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181c:	2301      	movs	r3, #1
 800181e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	481e      	ldr	r0, [pc, #120]	; (80018a8 <MX_GPIO_Init+0x160>)
 8001830:	f001 fa66 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001834:	2301      	movs	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001838:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800183c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800183e:	2302      	movs	r3, #2
 8001840:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	4818      	ldr	r0, [pc, #96]	; (80018ac <MX_GPIO_Init+0x164>)
 800184a:	f001 fa59 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : sel_3_b_Pin sel_3_a_Pin sel_2_b_Pin sel_2_a_Pin */
  GPIO_InitStruct.Pin = sel_3_b_Pin|sel_3_a_Pin|sel_2_b_Pin|sel_2_a_Pin;
 800184e:	23aa      	movs	r3, #170	; 0xaa
 8001850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001852:	2301      	movs	r3, #1
 8001854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	4811      	ldr	r0, [pc, #68]	; (80018ac <MX_GPIO_Init+0x164>)
 8001866:	f001 fa4b 	bl	8002d00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	2006      	movs	r0, #6
 8001870:	f000 fdd1 	bl	8002416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001874:	2006      	movs	r0, #6
 8001876:	f000 fdea 	bl	800244e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2100      	movs	r1, #0
 800187e:	2008      	movs	r0, #8
 8001880:	f000 fdc9 	bl	8002416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001884:	2008      	movs	r0, #8
 8001886:	f000 fde2 	bl	800244e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	2017      	movs	r0, #23
 8001890:	f000 fdc1 	bl	8002416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001894:	2017      	movs	r0, #23
 8001896:	f000 fdda 	bl	800244e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800189a:	bf00      	nop
 800189c:	3728      	adds	r7, #40	; 0x28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020800 	.word	0x40020800
 80018ac:	40020000 	.word	0x40020000
 80018b0:	40021000 	.word	0x40021000

080018b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b8:	b672      	cpsid	i
}
 80018ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018bc:	e7fe      	b.n	80018bc <Error_Handler+0x8>
	...

080018c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_MspInit+0x4c>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a0f      	ldr	r2, [pc, #60]	; (800190c <HAL_MspInit+0x4c>)
 80018d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_MspInit+0x4c>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_MspInit+0x4c>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a08      	ldr	r2, [pc, #32]	; (800190c <HAL_MspInit+0x4c>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_MspInit+0x4c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018fe:	2007      	movs	r0, #7
 8001900:	f000 fd7e 	bl	8002400 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40023800 	.word	0x40023800

08001910 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08c      	sub	sp, #48	; 0x30
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a3b      	ldr	r2, [pc, #236]	; (8001a1c <HAL_I2C_MspInit+0x10c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d12d      	bne.n	800198e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	61bb      	str	r3, [r7, #24]
 8001936:	4b3a      	ldr	r3, [pc, #232]	; (8001a20 <HAL_I2C_MspInit+0x110>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a39      	ldr	r2, [pc, #228]	; (8001a20 <HAL_I2C_MspInit+0x110>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <HAL_I2C_MspInit+0x110>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800194e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001954:	2312      	movs	r3, #18
 8001956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001958:	2301      	movs	r3, #1
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001960:	2304      	movs	r3, #4
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	4619      	mov	r1, r3
 800196a:	482e      	ldr	r0, [pc, #184]	; (8001a24 <HAL_I2C_MspInit+0x114>)
 800196c:	f001 f9c8 	bl	8002d00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <HAL_I2C_MspInit+0x110>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	4a29      	ldr	r2, [pc, #164]	; (8001a20 <HAL_I2C_MspInit+0x110>)
 800197a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800197e:	6413      	str	r3, [r2, #64]	; 0x40
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <HAL_I2C_MspInit+0x110>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800198c:	e041      	b.n	8001a12 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a25      	ldr	r2, [pc, #148]	; (8001a28 <HAL_I2C_MspInit+0x118>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d13c      	bne.n	8001a12 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <HAL_I2C_MspInit+0x110>)
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a0:	4a1f      	ldr	r2, [pc, #124]	; (8001a20 <HAL_I2C_MspInit+0x110>)
 80019a2:	f043 0302 	orr.w	r3, r3, #2
 80019a6:	6313      	str	r3, [r2, #48]	; 0x30
 80019a8:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <HAL_I2C_MspInit+0x110>)
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ba:	2312      	movs	r3, #18
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c2:	2303      	movs	r3, #3
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019c6:	2304      	movs	r3, #4
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	4619      	mov	r1, r3
 80019d0:	4814      	ldr	r0, [pc, #80]	; (8001a24 <HAL_I2C_MspInit+0x114>)
 80019d2:	f001 f995 	bl	8002d00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019d6:	2308      	movs	r3, #8
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019da:	2312      	movs	r3, #18
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e2:	2303      	movs	r3, #3
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80019e6:	2309      	movs	r3, #9
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	480c      	ldr	r0, [pc, #48]	; (8001a24 <HAL_I2C_MspInit+0x114>)
 80019f2:	f001 f985 	bl	8002d00 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_I2C_MspInit+0x110>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_I2C_MspInit+0x110>)
 8001a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a04:	6413      	str	r3, [r2, #64]	; 0x40
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_I2C_MspInit+0x110>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
}
 8001a12:	bf00      	nop
 8001a14:	3730      	adds	r7, #48	; 0x30
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40005400 	.word	0x40005400
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40020400 	.word	0x40020400
 8001a28:	40005800 	.word	0x40005800

08001a2c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a15      	ldr	r2, [pc, #84]	; (8001a90 <HAL_I2C_MspDeInit+0x64>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d10f      	bne.n	8001a5e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_I2C_MspDeInit+0x68>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <HAL_I2C_MspDeInit+0x68>)
 8001a44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a48:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001a4a:	2140      	movs	r1, #64	; 0x40
 8001a4c:	4812      	ldr	r0, [pc, #72]	; (8001a98 <HAL_I2C_MspDeInit+0x6c>)
 8001a4e:	f001 fadb 	bl	8003008 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001a52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a56:	4810      	ldr	r0, [pc, #64]	; (8001a98 <HAL_I2C_MspDeInit+0x6c>)
 8001a58:	f001 fad6 	bl	8003008 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001a5c:	e013      	b.n	8001a86 <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C2)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a0e      	ldr	r2, [pc, #56]	; (8001a9c <HAL_I2C_MspDeInit+0x70>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d10e      	bne.n	8001a86 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_I2C_MspDeInit+0x68>)
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <HAL_I2C_MspDeInit+0x68>)
 8001a6e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a72:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001a74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a78:	4807      	ldr	r0, [pc, #28]	; (8001a98 <HAL_I2C_MspDeInit+0x6c>)
 8001a7a:	f001 fac5 	bl	8003008 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 8001a7e:	2108      	movs	r1, #8
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <HAL_I2C_MspDeInit+0x6c>)
 8001a82:	f001 fac1 	bl	8003008 <HAL_GPIO_DeInit>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40005400 	.word	0x40005400
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	40005800 	.word	0x40005800

08001aa0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b090      	sub	sp, #64	; 0x40
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
 8001ac8:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a4f      	ldr	r2, [pc, #316]	; (8001c0c <HAL_I2S_MspInit+0x16c>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	f040 8096 	bne.w	8001c02 <HAL_I2S_MspInit+0x162>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001ada:	23c8      	movs	r3, #200	; 0xc8
 8001adc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001ade:	2305      	movs	r3, #5
 8001ae0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4618      	mov	r0, r3
 8001aec:	f005 fcce 	bl	800748c <HAL_RCCEx_PeriphCLKConfig>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8001af6:	f7ff fedd 	bl	80018b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	4b44      	ldr	r3, [pc, #272]	; (8001c10 <HAL_I2S_MspInit+0x170>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a43      	ldr	r2, [pc, #268]	; (8001c10 <HAL_I2S_MspInit+0x170>)
 8001b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b41      	ldr	r3, [pc, #260]	; (8001c10 <HAL_I2S_MspInit+0x170>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <HAL_I2S_MspInit+0x170>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a3c      	ldr	r2, [pc, #240]	; (8001c10 <HAL_I2S_MspInit+0x170>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b3a      	ldr	r3, [pc, #232]	; (8001c10 <HAL_I2S_MspInit+0x170>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <HAL_I2S_MspInit+0x170>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a35      	ldr	r2, [pc, #212]	; (8001c10 <HAL_I2S_MspInit+0x170>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <HAL_I2S_MspInit+0x170>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b4e:	2310      	movs	r3, #16
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b5e:	2306      	movs	r3, #6
 8001b60:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b66:	4619      	mov	r1, r3
 8001b68:	482a      	ldr	r0, [pc, #168]	; (8001c14 <HAL_I2S_MspInit+0x174>)
 8001b6a:	f001 f8c9 	bl	8002d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001b6e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b80:	2306      	movs	r3, #6
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4823      	ldr	r0, [pc, #140]	; (8001c18 <HAL_I2S_MspInit+0x178>)
 8001b8c:	f001 f8b8 	bl	8002d00 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001b90:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <HAL_I2S_MspInit+0x17c>)
 8001b92:	4a23      	ldr	r2, [pc, #140]	; (8001c20 <HAL_I2S_MspInit+0x180>)
 8001b94:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <HAL_I2S_MspInit+0x17c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <HAL_I2S_MspInit+0x17c>)
 8001b9e:	2240      	movs	r2, #64	; 0x40
 8001ba0:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <HAL_I2S_MspInit+0x17c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ba8:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <HAL_I2S_MspInit+0x17c>)
 8001baa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bae:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <HAL_I2S_MspInit+0x17c>)
 8001bb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bb6:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bb8:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <HAL_I2S_MspInit+0x17c>)
 8001bba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bbe:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001bc0:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <HAL_I2S_MspInit+0x17c>)
 8001bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bc6:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <HAL_I2S_MspInit+0x17c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001bce:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <HAL_I2S_MspInit+0x17c>)
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <HAL_I2S_MspInit+0x17c>)
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <HAL_I2S_MspInit+0x17c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <HAL_I2S_MspInit+0x17c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001be6:	480d      	ldr	r0, [pc, #52]	; (8001c1c <HAL_I2S_MspInit+0x17c>)
 8001be8:	f000 fc4c 	bl	8002484 <HAL_DMA_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 8001bf2:	f7ff fe5f 	bl	80018b4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a08      	ldr	r2, [pc, #32]	; (8001c1c <HAL_I2S_MspInit+0x17c>)
 8001bfa:	639a      	str	r2, [r3, #56]	; 0x38
 8001bfc:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <HAL_I2S_MspInit+0x17c>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c02:	bf00      	nop
 8001c04:	3740      	adds	r7, #64	; 0x40
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40003c00 	.word	0x40003c00
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020000 	.word	0x40020000
 8001c18:	40020800 	.word	0x40020800
 8001c1c:	200002cc 	.word	0x200002cc
 8001c20:	40026088 	.word	0x40026088

08001c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <NMI_Handler+0x4>

08001c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2e:	e7fe      	b.n	8001c2e <HardFault_Handler+0x4>

08001c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <MemManage_Handler+0x4>

08001c36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <BusFault_Handler+0x4>

08001c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <UsageFault_Handler+0x4>

08001c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c70:	f000 fab2 	bl	80021d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	f001 fac1 	bl	8003204 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001c8a:	2004      	movs	r0, #4
 8001c8c:	f001 faba 	bl	8003204 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <DMA1_Stream5_IRQHandler+0x10>)
 8001c9a:	f000 fdc7 	bl	800282c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200002cc 	.word	0x200002cc

08001ca8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001cac:	2040      	movs	r0, #64	; 0x40
 8001cae:	f001 faa9 	bl	8003204 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <OTG_FS_IRQHandler+0x10>)
 8001cbe:	f001 fd23 	bl	8003708 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200021c8 	.word	0x200021c8

08001ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd4:	4a14      	ldr	r2, [pc, #80]	; (8001d28 <_sbrk+0x5c>)
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <_sbrk+0x60>)
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <_sbrk+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <_sbrk+0x64>)
 8001cea:	4a12      	ldr	r2, [pc, #72]	; (8001d34 <_sbrk+0x68>)
 8001cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d207      	bcs.n	8001d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cfc:	f00d fd86 	bl	800f80c <__errno>
 8001d00:	4603      	mov	r3, r0
 8001d02:	220c      	movs	r2, #12
 8001d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0a:	e009      	b.n	8001d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d12:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <_sbrk+0x64>)
 8001d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20020000 	.word	0x20020000
 8001d2c:	00000400 	.word	0x00000400
 8001d30:	20000330 	.word	0x20000330
 8001d34:	20002618 	.word	0x20002618

08001d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <SystemInit+0x28>)
 8001d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d42:	4a07      	ldr	r2, [pc, #28]	; (8001d60 <SystemInit+0x28>)
 8001d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d4c:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <SystemInit+0x28>)
 8001d4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d52:	609a      	str	r2, [r3, #8]
#endif
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <PlayerInit+0x2c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	4619      	mov	r1, r3
 8001d76:	2003      	movs	r0, #3
 8001d78:	f7fe fbac 	bl	80004d4 <AUDIO_OUT_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <PlayerInit+0x22>
	{
		return 1;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 8001d86:	2300      	movs	r3, #0
	}
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	2000003c 	.word	0x2000003c

08001d94 <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
  UINT bytesread;

  f_close(&WavFile);
 8001d9e:	4828      	ldr	r0, [pc, #160]	; (8001e40 <AUDIO_PLAYER_Start+0xac>)
 8001da0:	f00c fcd3 	bl	800e74a <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8001da4:	f7fe fffc 	bl	8000da0 <AUDIO_GetWavObjectNumber>
 8001da8:	4603      	mov	r3, r0
 8001daa:	461a      	mov	r2, r3
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d93f      	bls.n	8001e34 <AUDIO_PLAYER_Start+0xa0>
  {

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 8001db4:	79fa      	ldrb	r2, [r7, #7]
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a20      	ldr	r2, [pc, #128]	; (8001e44 <AUDIO_PLAYER_Start+0xb0>)
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4619      	mov	r1, r3
 8001dca:	481d      	ldr	r0, [pc, #116]	; (8001e40 <AUDIO_PLAYER_Start+0xac>)
 8001dcc:	f00c f942 	bl	800e054 <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	222c      	movs	r2, #44	; 0x2c
 8001dd6:	491c      	ldr	r1, [pc, #112]	; (8001e48 <AUDIO_PLAYER_Start+0xb4>)
 8001dd8:	4819      	ldr	r0, [pc, #100]	; (8001e40 <AUDIO_PLAYER_Start+0xac>)
 8001dda:	f00c faf9 	bl	800e3d0 <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 8001dde:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <AUDIO_PLAYER_Start+0xb4>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ffbe 	bl	8001d64 <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <AUDIO_PLAYER_Start+0xb8>)
 8001dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 8001df2:	2100      	movs	r1, #0
 8001df4:	4812      	ldr	r0, [pc, #72]	; (8001e40 <AUDIO_PLAYER_Start+0xac>)
 8001df6:	f00c fcd2 	bl	800e79e <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 8001dfa:	f107 030c 	add.w	r3, r7, #12
 8001dfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e02:	4912      	ldr	r1, [pc, #72]	; (8001e4c <AUDIO_PLAYER_Start+0xb8>)
 8001e04:	480e      	ldr	r0, [pc, #56]	; (8001e40 <AUDIO_PLAYER_Start+0xac>)
 8001e06:	f00c fae3 	bl	800e3d0 <f_read>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d111      	bne.n	8001e34 <AUDIO_PLAYER_Start+0xa0>
    {
      AudioState = AUDIO_STATE_PLAY;
 8001e10:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <AUDIO_PLAYER_Start+0xbc>)
 8001e12:	2203      	movs	r2, #3
 8001e14:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00b      	beq.n	8001e34 <AUDIO_PLAYER_Start+0xa0>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8001e1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e20:	480a      	ldr	r0, [pc, #40]	; (8001e4c <AUDIO_PLAYER_Start+0xb8>)
 8001e22:	f7fe fba5 	bl	8000570 <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4a08      	ldr	r2, [pc, #32]	; (8001e4c <AUDIO_PLAYER_Start+0xb8>)
 8001e2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e2e:	6053      	str	r3, [r2, #4]
          return AUDIO_ERROR_NONE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e000      	b.n	8001e36 <AUDIO_PLAYER_Start+0xa2>
        }
      }
  }
  return AUDIO_ERROR_IO;
 8001e34:	2301      	movs	r3, #1
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20001748 	.word	0x20001748
 8001e44:	20001340 	.word	0x20001340
 8001e48:	2000171c 	.word	0x2000171c
 8001e4c:	20000334 	.word	0x20000334
 8001e50:	2000133c 	.word	0x2000133c

08001e54 <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop, uint8_t idx)
{
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	460a      	mov	r2, r1
 8001e5e:	71fb      	strb	r3, [r7, #7]
 8001e60:	4613      	mov	r3, r2
 8001e62:	71bb      	strb	r3, [r7, #6]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	73fb      	strb	r3, [r7, #15]
  
  switch(AudioState)
 8001e68:	4b82      	ldr	r3, [pc, #520]	; (8002074 <AUDIO_PLAYER_Process+0x220>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	3b03      	subs	r3, #3
 8001e6e:	2b0a      	cmp	r3, #10
 8001e70:	f200 80f8 	bhi.w	8002064 <AUDIO_PLAYER_Process+0x210>
 8001e74:	a201      	add	r2, pc, #4	; (adr r2, 8001e7c <AUDIO_PLAYER_Process+0x28>)
 8001e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7a:	bf00      	nop
 8001e7c:	08001ea9 	.word	0x08001ea9
 8001e80:	08002065 	.word	0x08002065
 8001e84:	08001f71 	.word	0x08001f71
 8001e88:	08001fbf 	.word	0x08001fbf
 8001e8c:	08002065 	.word	0x08002065
 8001e90:	08002065 	.word	0x08002065
 8001e94:	08001f5f 	.word	0x08001f5f
 8001e98:	08002001 	.word	0x08002001
 8001e9c:	0800200d 	.word	0x0800200d
 8001ea0:	08002019 	.word	0x08002019
 8001ea4:	0800203f 	.word	0x0800203f
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8001ea8:	4b73      	ldr	r3, [pc, #460]	; (8002078 <AUDIO_PLAYER_Process+0x224>)
 8001eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	4b72      	ldr	r3, [pc, #456]	; (800207c <AUDIO_PLAYER_Process+0x228>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d306      	bcc.n	8001ec6 <AUDIO_PLAYER_Process+0x72>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001eb8:	2002      	movs	r0, #2
 8001eba:	f7fe fbaf 	bl	800061c <AUDIO_OUT_Stop>
      AUDIO_PLAYER_Start(idx);
 8001ebe:	79bb      	ldrb	r3, [r7, #6]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff67 	bl	8001d94 <AUDIO_PLAYER_Start>
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8001ec6:	4b6c      	ldr	r3, [pc, #432]	; (8002078 <AUDIO_PLAYER_Process+0x224>)
 8001ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d11e      	bne.n	8001f10 <AUDIO_PLAYER_Process+0xbc>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8001ed2:	f107 0308 	add.w	r3, r7, #8
 8001ed6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eda:	4967      	ldr	r1, [pc, #412]	; (8002078 <AUDIO_PLAYER_Process+0x224>)
 8001edc:	4868      	ldr	r0, [pc, #416]	; (8002080 <AUDIO_PLAYER_Process+0x22c>)
 8001ede:	f00c fa77 	bl	800e3d0 <f_read>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d004      	beq.n	8001ef2 <AUDIO_PLAYER_Process+0x9e>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001ee8:	2002      	movs	r0, #2
 8001eea:	f7fe fb97 	bl	800061c <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e0bc      	b.n	800206c <AUDIO_PLAYER_Process+0x218>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001ef2:	4b61      	ldr	r3, [pc, #388]	; (8002078 <AUDIO_PLAYER_Process+0x224>)
 8001ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001efc:	4b5e      	ldr	r3, [pc, #376]	; (8002078 <AUDIO_PLAYER_Process+0x224>)
 8001efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	4413      	add	r3, r2
 8001f08:	4a5b      	ldr	r2, [pc, #364]	; (8002078 <AUDIO_PLAYER_Process+0x224>)
 8001f0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f0e:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 8001f10:	4b59      	ldr	r3, [pc, #356]	; (8002078 <AUDIO_PLAYER_Process+0x224>)
 8001f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	f040 80a5 	bne.w	8002068 <AUDIO_PLAYER_Process+0x214>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8001f1e:	f107 0308 	add.w	r3, r7, #8
 8001f22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f26:	4957      	ldr	r1, [pc, #348]	; (8002084 <AUDIO_PLAYER_Process+0x230>)
 8001f28:	4855      	ldr	r0, [pc, #340]	; (8002080 <AUDIO_PLAYER_Process+0x22c>)
 8001f2a:	f00c fa51 	bl	800e3d0 <f_read>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d004      	beq.n	8001f3e <AUDIO_PLAYER_Process+0xea>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001f34:	2002      	movs	r0, #2
 8001f36:	f7fe fb71 	bl	800061c <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e096      	b.n	800206c <AUDIO_PLAYER_Process+0x218>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001f3e:	4b4e      	ldr	r3, [pc, #312]	; (8002078 <AUDIO_PLAYER_Process+0x224>)
 8001f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001f48:	4b4b      	ldr	r3, [pc, #300]	; (8002078 <AUDIO_PLAYER_Process+0x224>)
 8001f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4413      	add	r3, r2
 8001f54:	4a48      	ldr	r2, [pc, #288]	; (8002078 <AUDIO_PLAYER_Process+0x224>)
 8001f56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f5a:	6053      	str	r3, [r2, #4]
    }
    break;
 8001f5c:	e084      	b.n	8002068 <AUDIO_PLAYER_Process+0x214>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001f5e:	2002      	movs	r0, #2
 8001f60:	f7fe fb5c 	bl	800061c <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 8001f64:	4b43      	ldr	r3, [pc, #268]	; (8002074 <AUDIO_PLAYER_Process+0x220>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	73fb      	strb	r3, [r7, #15]
    break;
 8001f6e:	e07c      	b.n	800206a <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 8001f70:	4b45      	ldr	r3, [pc, #276]	; (8002088 <AUDIO_PLAYER_Process+0x234>)
 8001f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3301      	adds	r3, #1
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	b21a      	sxth	r2, r3
 8001f7e:	4b42      	ldr	r3, [pc, #264]	; (8002088 <AUDIO_PLAYER_Process+0x234>)
 8001f80:	801a      	strh	r2, [r3, #0]
 8001f82:	4b41      	ldr	r3, [pc, #260]	; (8002088 <AUDIO_PLAYER_Process+0x234>)
 8001f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f88:	461c      	mov	r4, r3
 8001f8a:	f7fe ff09 	bl	8000da0 <AUDIO_GetWavObjectNumber>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	429c      	cmp	r4, r3
 8001f92:	db09      	blt.n	8001fa8 <AUDIO_PLAYER_Process+0x154>
    {
    	if (isLoop)
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <AUDIO_PLAYER_Process+0x14e>
    	{
    		FilePos = 0;
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <AUDIO_PLAYER_Process+0x234>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	801a      	strh	r2, [r3, #0]
 8001fa0:	e002      	b.n	8001fa8 <AUDIO_PLAYER_Process+0x154>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 8001fa2:	4b34      	ldr	r3, [pc, #208]	; (8002074 <AUDIO_PLAYER_Process+0x220>)
 8001fa4:	2209      	movs	r2, #9
 8001fa6:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001fa8:	2002      	movs	r0, #2
 8001faa:	f7fe fb37 	bl	800061c <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8001fae:	4b36      	ldr	r3, [pc, #216]	; (8002088 <AUDIO_PLAYER_Process+0x234>)
 8001fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff feec 	bl	8001d94 <AUDIO_PLAYER_Start>
    break;    
 8001fbc:	e055      	b.n	800206a <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8001fbe:	4b32      	ldr	r3, [pc, #200]	; (8002088 <AUDIO_PLAYER_Process+0x234>)
 8001fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	b21a      	sxth	r2, r3
 8001fcc:	4b2e      	ldr	r3, [pc, #184]	; (8002088 <AUDIO_PLAYER_Process+0x234>)
 8001fce:	801a      	strh	r2, [r3, #0]
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <AUDIO_PLAYER_Process+0x234>)
 8001fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	da07      	bge.n	8001fea <AUDIO_PLAYER_Process+0x196>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 8001fda:	f7fe fee1 	bl	8000da0 <AUDIO_GetWavObjectNumber>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	b21a      	sxth	r2, r3
 8001fe6:	4b28      	ldr	r3, [pc, #160]	; (8002088 <AUDIO_PLAYER_Process+0x234>)
 8001fe8:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001fea:	2002      	movs	r0, #2
 8001fec:	f7fe fb16 	bl	800061c <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8001ff0:	4b25      	ldr	r3, [pc, #148]	; (8002088 <AUDIO_PLAYER_Process+0x234>)
 8001ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fecb 	bl	8001d94 <AUDIO_PLAYER_Start>
    break;   
 8001ffe:	e034      	b.n	800206a <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 8002000:	f7fe fae0 	bl	80005c4 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8002004:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <AUDIO_PLAYER_Process+0x220>)
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
    break;
 800200a:	e02e      	b.n	800206a <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 800200c:	f7fe faf0 	bl	80005f0 <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 8002010:	4b18      	ldr	r3, [pc, #96]	; (8002074 <AUDIO_PLAYER_Process+0x220>)
 8002012:	2203      	movs	r2, #3
 8002014:	701a      	strb	r2, [r3, #0]
    break;
 8002016:	e028      	b.n	800206a <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 8002018:	4b1c      	ldr	r3, [pc, #112]	; (800208c <AUDIO_PLAYER_Process+0x238>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b5a      	cmp	r3, #90	; 0x5a
 800201e:	d804      	bhi.n	800202a <AUDIO_PLAYER_Process+0x1d6>
    {
      uwVolume += 10;
 8002020:	4b1a      	ldr	r3, [pc, #104]	; (800208c <AUDIO_PLAYER_Process+0x238>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	330a      	adds	r3, #10
 8002026:	4a19      	ldr	r2, [pc, #100]	; (800208c <AUDIO_PLAYER_Process+0x238>)
 8002028:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 800202a:	4b18      	ldr	r3, [pc, #96]	; (800208c <AUDIO_PLAYER_Process+0x238>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fb1b 	bl	800066c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8002036:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <AUDIO_PLAYER_Process+0x220>)
 8002038:	2203      	movs	r2, #3
 800203a:	701a      	strb	r2, [r3, #0]
    break;
 800203c:	e015      	b.n	800206a <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 800203e:	4b13      	ldr	r3, [pc, #76]	; (800208c <AUDIO_PLAYER_Process+0x238>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b09      	cmp	r3, #9
 8002044:	d904      	bls.n	8002050 <AUDIO_PLAYER_Process+0x1fc>
    {
      uwVolume -= 10;
 8002046:	4b11      	ldr	r3, [pc, #68]	; (800208c <AUDIO_PLAYER_Process+0x238>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	3b0a      	subs	r3, #10
 800204c:	4a0f      	ldr	r2, [pc, #60]	; (800208c <AUDIO_PLAYER_Process+0x238>)
 800204e:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8002050:	4b0e      	ldr	r3, [pc, #56]	; (800208c <AUDIO_PLAYER_Process+0x238>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fb08 	bl	800066c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <AUDIO_PLAYER_Process+0x220>)
 800205e:	2203      	movs	r2, #3
 8002060:	701a      	strb	r2, [r3, #0]
    break;
 8002062:	e002      	b.n	800206a <AUDIO_PLAYER_Process+0x216>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 8002064:	bf00      	nop
 8002066:	e000      	b.n	800206a <AUDIO_PLAYER_Process+0x216>
    break;
 8002068:	bf00      	nop
  }
  return audio_error;
 800206a:	7bfb      	ldrb	r3, [r7, #15]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	bd90      	pop	{r4, r7, pc}
 8002074:	2000133c 	.word	0x2000133c
 8002078:	20000334 	.word	0x20000334
 800207c:	2000171c 	.word	0x2000171c
 8002080:	20001748 	.word	0x20001748
 8002084:	20000b34 	.word	0x20000b34
 8002088:	2000133e 	.word	0x2000133e
 800208c:	2000003c 	.word	0x2000003c

08002090 <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b03      	cmp	r3, #3
 800209a:	d104      	bne.n	80020a6 <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 800209e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a2:	2202      	movs	r2, #2
 80020a4:	701a      	strb	r2, [r3, #0]
  }
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	2000133c 	.word	0x2000133c
 80020b4:	20000334 	.word	0x20000334

080020b8 <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d104      	bne.n	80020ce <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 80020c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
  }
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	2000133c 	.word	0x2000133c
 80020dc:	20000334 	.word	0x20000334

080020e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002118 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80020e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80020e6:	e003      	b.n	80020f0 <LoopCopyDataInit>

080020e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80020ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020ee:	3104      	adds	r1, #4

080020f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020f0:	480b      	ldr	r0, [pc, #44]	; (8002120 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020f8:	d3f6      	bcc.n	80020e8 <CopyDataInit>
  ldr  r2, =_sbss
 80020fa:	4a0b      	ldr	r2, [pc, #44]	; (8002128 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80020fc:	e002      	b.n	8002104 <LoopFillZerobss>

080020fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80020fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002100:	f842 3b04 	str.w	r3, [r2], #4

08002104 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002104:	4b09      	ldr	r3, [pc, #36]	; (800212c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002106:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002108:	d3f9      	bcc.n	80020fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800210a:	f7ff fe15 	bl	8001d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800210e:	f00d fb83 	bl	800f818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002112:	f7ff f9b1 	bl	8001478 <main>
  bx  lr    
 8002116:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002118:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800211c:	0800fe68 	.word	0x0800fe68
  ldr  r0, =_sdata
 8002120:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002124:	200000b8 	.word	0x200000b8
  ldr  r2, =_sbss
 8002128:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 800212c:	20002614 	.word	0x20002614

08002130 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002130:	e7fe      	b.n	8002130 <ADC_IRQHandler>
	...

08002134 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002138:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <HAL_Init+0x40>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0d      	ldr	r2, [pc, #52]	; (8002174 <HAL_Init+0x40>)
 800213e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002142:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_Init+0x40>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <HAL_Init+0x40>)
 800214a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800214e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <HAL_Init+0x40>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a07      	ldr	r2, [pc, #28]	; (8002174 <HAL_Init+0x40>)
 8002156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800215c:	2003      	movs	r0, #3
 800215e:	f000 f94f 	bl	8002400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002162:	2000      	movs	r0, #0
 8002164:	f000 f808 	bl	8002178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002168:	f7ff fbaa 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023c00 	.word	0x40023c00

08002178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <HAL_InitTick+0x54>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_InitTick+0x58>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4619      	mov	r1, r3
 800218a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800218e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002192:	fbb2 f3f3 	udiv	r3, r2, r3
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f967 	bl	800246a <HAL_SYSTICK_Config>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e00e      	b.n	80021c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b0f      	cmp	r3, #15
 80021aa:	d80a      	bhi.n	80021c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ac:	2200      	movs	r2, #0
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
 80021b4:	f000 f92f 	bl	8002416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b8:	4a06      	ldr	r2, [pc, #24]	; (80021d4 <HAL_InitTick+0x5c>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	e000      	b.n	80021c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000038 	.word	0x20000038
 80021d0:	20000044 	.word	0x20000044
 80021d4:	20000040 	.word	0x20000040

080021d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_IncTick+0x20>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	461a      	mov	r2, r3
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_IncTick+0x24>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4413      	add	r3, r2
 80021e8:	4a04      	ldr	r2, [pc, #16]	; (80021fc <HAL_IncTick+0x24>)
 80021ea:	6013      	str	r3, [r2, #0]
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000044 	.word	0x20000044
 80021fc:	20001978 	.word	0x20001978

08002200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return uwTick;
 8002204:	4b03      	ldr	r3, [pc, #12]	; (8002214 <HAL_GetTick+0x14>)
 8002206:	681b      	ldr	r3, [r3, #0]
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20001978 	.word	0x20001978

08002218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002220:	f7ff ffee 	bl	8002200 <HAL_GetTick>
 8002224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002230:	d005      	beq.n	800223e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <HAL_Delay+0x44>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800223e:	bf00      	nop
 8002240:	f7ff ffde 	bl	8002200 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	429a      	cmp	r2, r3
 800224e:	d8f7      	bhi.n	8002240 <HAL_Delay+0x28>
  {
  }
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000044 	.word	0x20000044

08002260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800227c:	4013      	ands	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800228c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002292:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	60d3      	str	r3, [r2, #12]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0307 	and.w	r3, r3, #7
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db0b      	blt.n	80022ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	f003 021f 	and.w	r2, r3, #31
 80022dc:	4907      	ldr	r1, [pc, #28]	; (80022fc <__NVIC_EnableIRQ+0x38>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	2001      	movs	r0, #1
 80022e6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000e100 	.word	0xe000e100

08002300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	db0a      	blt.n	800232a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	490c      	ldr	r1, [pc, #48]	; (800234c <__NVIC_SetPriority+0x4c>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	440b      	add	r3, r1
 8002324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002328:	e00a      	b.n	8002340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4908      	ldr	r1, [pc, #32]	; (8002350 <__NVIC_SetPriority+0x50>)
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	3b04      	subs	r3, #4
 8002338:	0112      	lsls	r2, r2, #4
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	440b      	add	r3, r1
 800233e:	761a      	strb	r2, [r3, #24]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000e100 	.word	0xe000e100
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	; 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f1c3 0307 	rsb	r3, r3, #7
 800236e:	2b04      	cmp	r3, #4
 8002370:	bf28      	it	cs
 8002372:	2304      	movcs	r3, #4
 8002374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3304      	adds	r3, #4
 800237a:	2b06      	cmp	r3, #6
 800237c:	d902      	bls.n	8002384 <NVIC_EncodePriority+0x30>
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3b03      	subs	r3, #3
 8002382:	e000      	b.n	8002386 <NVIC_EncodePriority+0x32>
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	f04f 32ff 	mov.w	r2, #4294967295
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	401a      	ands	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800239c:	f04f 31ff 	mov.w	r1, #4294967295
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43d9      	mvns	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	4313      	orrs	r3, r2
         );
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3724      	adds	r7, #36	; 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023cc:	d301      	bcc.n	80023d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00f      	b.n	80023f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <SysTick_Config+0x40>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023da:	210f      	movs	r1, #15
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295
 80023e0:	f7ff ff8e 	bl	8002300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <SysTick_Config+0x40>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <SysTick_Config+0x40>)
 80023ec:	2207      	movs	r2, #7
 80023ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	e000e010 	.word	0xe000e010

08002400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff29 	bl	8002260 <__NVIC_SetPriorityGrouping>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002428:	f7ff ff3e 	bl	80022a8 <__NVIC_GetPriorityGrouping>
 800242c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	6978      	ldr	r0, [r7, #20]
 8002434:	f7ff ff8e 	bl	8002354 <NVIC_EncodePriority>
 8002438:	4602      	mov	r2, r0
 800243a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff5d 	bl	8002300 <__NVIC_SetPriority>
}
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	4603      	mov	r3, r0
 8002456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff31 	bl	80022c4 <__NVIC_EnableIRQ>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ffa2 	bl	80023bc <SysTick_Config>
 8002478:	4603      	mov	r3, r0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002490:	f7ff feb6 	bl	8002200 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e099      	b.n	80025d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0201 	bic.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024c0:	e00f      	b.n	80024e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024c2:	f7ff fe9d 	bl	8002200 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d908      	bls.n	80024e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2220      	movs	r2, #32
 80024d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2203      	movs	r2, #3
 80024da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e078      	b.n	80025d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1e8      	bne.n	80024c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	4b38      	ldr	r3, [pc, #224]	; (80025dc <HAL_DMA_Init+0x158>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800250e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002526:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	2b04      	cmp	r3, #4
 800253a:	d107      	bne.n	800254c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	4313      	orrs	r3, r2
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f023 0307 	bic.w	r3, r3, #7
 8002562:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	4313      	orrs	r3, r2
 800256c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	2b04      	cmp	r3, #4
 8002574:	d117      	bne.n	80025a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4313      	orrs	r3, r2
 800257e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00e      	beq.n	80025a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 fb3d 	bl	8002c08 <DMA_CheckFifoParam>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2240      	movs	r2, #64	; 0x40
 8002598:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025a2:	2301      	movs	r3, #1
 80025a4:	e016      	b.n	80025d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 faf4 	bl	8002b9c <DMA_CalcBaseAndBitshift>
 80025b4:	4603      	mov	r3, r0
 80025b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025bc:	223f      	movs	r2, #63	; 0x3f
 80025be:	409a      	lsls	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	f010803f 	.word	0xf010803f

080025e0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e050      	b.n	8002694 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d101      	bne.n	8002602 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80025fe:	2302      	movs	r3, #2
 8002600:	e048      	b.n	8002694 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0201 	bic.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2200      	movs	r2, #0
 8002620:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2200      	movs	r2, #0
 8002630:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2200      	movs	r2, #0
 8002638:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2221      	movs	r2, #33	; 0x21
 8002640:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 faaa 	bl	8002b9c <DMA_CalcBaseAndBitshift>
 8002648:	4603      	mov	r3, r0
 800264a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002674:	223f      	movs	r2, #63	; 0x3f
 8002676:	409a      	lsls	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_DMA_Start_IT+0x26>
 80026be:	2302      	movs	r3, #2
 80026c0:	e040      	b.n	8002744 <HAL_DMA_Start_IT+0xa8>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d12f      	bne.n	8002736 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2202      	movs	r2, #2
 80026da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 fa28 	bl	8002b40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	223f      	movs	r2, #63	; 0x3f
 80026f6:	409a      	lsls	r2, r3
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0216 	orr.w	r2, r2, #22
 800270a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0208 	orr.w	r2, r2, #8
 8002722:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	e005      	b.n	8002742 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800273e:	2302      	movs	r3, #2
 8002740:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002742:	7dfb      	ldrb	r3, [r7, #23]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002758:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800275a:	f7ff fd51 	bl	8002200 <HAL_GetTick>
 800275e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d008      	beq.n	800277e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2280      	movs	r2, #128	; 0x80
 8002770:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e052      	b.n	8002824 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0216 	bic.w	r2, r2, #22
 800278c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800279c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d103      	bne.n	80027ae <HAL_DMA_Abort+0x62>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d007      	beq.n	80027be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0208 	bic.w	r2, r2, #8
 80027bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0201 	bic.w	r2, r2, #1
 80027cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ce:	e013      	b.n	80027f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027d0:	f7ff fd16 	bl	8002200 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b05      	cmp	r3, #5
 80027dc:	d90c      	bls.n	80027f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2220      	movs	r2, #32
 80027e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2203      	movs	r2, #3
 80027e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e015      	b.n	8002824 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1e4      	bne.n	80027d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280a:	223f      	movs	r2, #63	; 0x3f
 800280c:	409a      	lsls	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002838:	4b8e      	ldr	r3, [pc, #568]	; (8002a74 <HAL_DMA_IRQHandler+0x248>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a8e      	ldr	r2, [pc, #568]	; (8002a78 <HAL_DMA_IRQHandler+0x24c>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	0a9b      	lsrs	r3, r3, #10
 8002844:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002856:	2208      	movs	r2, #8
 8002858:	409a      	lsls	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4013      	ands	r3, r2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d01a      	beq.n	8002898 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d013      	beq.n	8002898 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0204 	bic.w	r2, r2, #4
 800287e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002884:	2208      	movs	r2, #8
 8002886:	409a      	lsls	r2, r3
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002890:	f043 0201 	orr.w	r2, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289c:	2201      	movs	r2, #1
 800289e:	409a      	lsls	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d012      	beq.n	80028ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ba:	2201      	movs	r2, #1
 80028bc:	409a      	lsls	r2, r3
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c6:	f043 0202 	orr.w	r2, r3, #2
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d2:	2204      	movs	r2, #4
 80028d4:	409a      	lsls	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d012      	beq.n	8002904 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00b      	beq.n	8002904 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f0:	2204      	movs	r2, #4
 80028f2:	409a      	lsls	r2, r3
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fc:	f043 0204 	orr.w	r2, r3, #4
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002908:	2210      	movs	r2, #16
 800290a:	409a      	lsls	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4013      	ands	r3, r2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d043      	beq.n	800299c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	d03c      	beq.n	800299c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002926:	2210      	movs	r2, #16
 8002928:	409a      	lsls	r2, r3
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d018      	beq.n	800296e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d108      	bne.n	800295c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d024      	beq.n	800299c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	4798      	blx	r3
 800295a:	e01f      	b.n	800299c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01b      	beq.n	800299c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
 800296c:	e016      	b.n	800299c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d107      	bne.n	800298c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0208 	bic.w	r2, r2, #8
 800298a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a0:	2220      	movs	r2, #32
 80029a2:	409a      	lsls	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 808f 	beq.w	8002acc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 8087 	beq.w	8002acc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c2:	2220      	movs	r2, #32
 80029c4:	409a      	lsls	r2, r3
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b05      	cmp	r3, #5
 80029d4:	d136      	bne.n	8002a44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0216 	bic.w	r2, r2, #22
 80029e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	695a      	ldr	r2, [r3, #20]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d103      	bne.n	8002a06 <HAL_DMA_IRQHandler+0x1da>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0208 	bic.w	r2, r2, #8
 8002a14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1a:	223f      	movs	r2, #63	; 0x3f
 8002a1c:	409a      	lsls	r2, r3
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d07e      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	4798      	blx	r3
        }
        return;
 8002a42:	e079      	b.n	8002b38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d01d      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10d      	bne.n	8002a7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d031      	beq.n	8002acc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	4798      	blx	r3
 8002a70:	e02c      	b.n	8002acc <HAL_DMA_IRQHandler+0x2a0>
 8002a72:	bf00      	nop
 8002a74:	20000038 	.word	0x20000038
 8002a78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d023      	beq.n	8002acc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	4798      	blx	r3
 8002a8c:	e01e      	b.n	8002acc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10f      	bne.n	8002abc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0210 	bic.w	r2, r2, #16
 8002aaa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d032      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d022      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2205      	movs	r2, #5
 8002ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	3301      	adds	r3, #1
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d307      	bcc.n	8002b14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f2      	bne.n	8002af8 <HAL_DMA_IRQHandler+0x2cc>
 8002b12:	e000      	b.n	8002b16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	4798      	blx	r3
 8002b36:	e000      	b.n	8002b3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b38:	bf00      	nop
    }
  }
}
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b40      	cmp	r3, #64	; 0x40
 8002b6c:	d108      	bne.n	8002b80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b7e:	e007      	b.n	8002b90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	60da      	str	r2, [r3, #12]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	3b10      	subs	r3, #16
 8002bac:	4a14      	ldr	r2, [pc, #80]	; (8002c00 <DMA_CalcBaseAndBitshift+0x64>)
 8002bae:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb2:	091b      	lsrs	r3, r3, #4
 8002bb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bb6:	4a13      	ldr	r2, [pc, #76]	; (8002c04 <DMA_CalcBaseAndBitshift+0x68>)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4413      	add	r3, r2
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d909      	bls.n	8002bde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bd2:	f023 0303 	bic.w	r3, r3, #3
 8002bd6:	1d1a      	adds	r2, r3, #4
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	659a      	str	r2, [r3, #88]	; 0x58
 8002bdc:	e007      	b.n	8002bee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002be6:	f023 0303 	bic.w	r3, r3, #3
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	aaaaaaab 	.word	0xaaaaaaab
 8002c04:	0800f9fc 	.word	0x0800f9fc

08002c08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d11f      	bne.n	8002c62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d856      	bhi.n	8002cd6 <DMA_CheckFifoParam+0xce>
 8002c28:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <DMA_CheckFifoParam+0x28>)
 8002c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2e:	bf00      	nop
 8002c30:	08002c41 	.word	0x08002c41
 8002c34:	08002c53 	.word	0x08002c53
 8002c38:	08002c41 	.word	0x08002c41
 8002c3c:	08002cd7 	.word	0x08002cd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d046      	beq.n	8002cda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c50:	e043      	b.n	8002cda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c5a:	d140      	bne.n	8002cde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c60:	e03d      	b.n	8002cde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c6a:	d121      	bne.n	8002cb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d837      	bhi.n	8002ce2 <DMA_CheckFifoParam+0xda>
 8002c72:	a201      	add	r2, pc, #4	; (adr r2, 8002c78 <DMA_CheckFifoParam+0x70>)
 8002c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c78:	08002c89 	.word	0x08002c89
 8002c7c:	08002c8f 	.word	0x08002c8f
 8002c80:	08002c89 	.word	0x08002c89
 8002c84:	08002ca1 	.word	0x08002ca1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c8c:	e030      	b.n	8002cf0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d025      	beq.n	8002ce6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c9e:	e022      	b.n	8002ce6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ca8:	d11f      	bne.n	8002cea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cae:	e01c      	b.n	8002cea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d903      	bls.n	8002cbe <DMA_CheckFifoParam+0xb6>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d003      	beq.n	8002cc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cbc:	e018      	b.n	8002cf0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc2:	e015      	b.n	8002cf0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00e      	beq.n	8002cee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd4:	e00b      	b.n	8002cee <DMA_CheckFifoParam+0xe6>
      break;
 8002cd6:	bf00      	nop
 8002cd8:	e00a      	b.n	8002cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cda:	bf00      	nop
 8002cdc:	e008      	b.n	8002cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cde:	bf00      	nop
 8002ce0:	e006      	b.n	8002cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ce2:	bf00      	nop
 8002ce4:	e004      	b.n	8002cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ce6:	bf00      	nop
 8002ce8:	e002      	b.n	8002cf0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cea:	bf00      	nop
 8002cec:	e000      	b.n	8002cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cee:	bf00      	nop
    }
  } 
  
  return status; 
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop

08002d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b089      	sub	sp, #36	; 0x24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	e159      	b.n	8002fd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	f040 8148 	bne.w	8002fca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d005      	beq.n	8002d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d130      	bne.n	8002db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d88:	2201      	movs	r2, #1
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	f003 0201 	and.w	r2, r3, #1
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d017      	beq.n	8002df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	2203      	movs	r2, #3
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d123      	bne.n	8002e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	08da      	lsrs	r2, r3, #3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3208      	adds	r2, #8
 8002e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	220f      	movs	r2, #15
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	08da      	lsrs	r2, r3, #3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3208      	adds	r2, #8
 8002e3e:	69b9      	ldr	r1, [r7, #24]
 8002e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	2203      	movs	r2, #3
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0203 	and.w	r2, r3, #3
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80a2 	beq.w	8002fca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	4b57      	ldr	r3, [pc, #348]	; (8002fe8 <HAL_GPIO_Init+0x2e8>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	4a56      	ldr	r2, [pc, #344]	; (8002fe8 <HAL_GPIO_Init+0x2e8>)
 8002e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e94:	6453      	str	r3, [r2, #68]	; 0x44
 8002e96:	4b54      	ldr	r3, [pc, #336]	; (8002fe8 <HAL_GPIO_Init+0x2e8>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ea2:	4a52      	ldr	r2, [pc, #328]	; (8002fec <HAL_GPIO_Init+0x2ec>)
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	089b      	lsrs	r3, r3, #2
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	220f      	movs	r2, #15
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a49      	ldr	r2, [pc, #292]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d019      	beq.n	8002f02 <HAL_GPIO_Init+0x202>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a48      	ldr	r2, [pc, #288]	; (8002ff4 <HAL_GPIO_Init+0x2f4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d013      	beq.n	8002efe <HAL_GPIO_Init+0x1fe>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a47      	ldr	r2, [pc, #284]	; (8002ff8 <HAL_GPIO_Init+0x2f8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00d      	beq.n	8002efa <HAL_GPIO_Init+0x1fa>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a46      	ldr	r2, [pc, #280]	; (8002ffc <HAL_GPIO_Init+0x2fc>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d007      	beq.n	8002ef6 <HAL_GPIO_Init+0x1f6>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a45      	ldr	r2, [pc, #276]	; (8003000 <HAL_GPIO_Init+0x300>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d101      	bne.n	8002ef2 <HAL_GPIO_Init+0x1f2>
 8002eee:	2304      	movs	r3, #4
 8002ef0:	e008      	b.n	8002f04 <HAL_GPIO_Init+0x204>
 8002ef2:	2307      	movs	r3, #7
 8002ef4:	e006      	b.n	8002f04 <HAL_GPIO_Init+0x204>
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e004      	b.n	8002f04 <HAL_GPIO_Init+0x204>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e002      	b.n	8002f04 <HAL_GPIO_Init+0x204>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_GPIO_Init+0x204>
 8002f02:	2300      	movs	r3, #0
 8002f04:	69fa      	ldr	r2, [r7, #28]
 8002f06:	f002 0203 	and.w	r2, r2, #3
 8002f0a:	0092      	lsls	r2, r2, #2
 8002f0c:	4093      	lsls	r3, r2
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f14:	4935      	ldr	r1, [pc, #212]	; (8002fec <HAL_GPIO_Init+0x2ec>)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	089b      	lsrs	r3, r3, #2
 8002f1a:	3302      	adds	r3, #2
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f22:	4b38      	ldr	r3, [pc, #224]	; (8003004 <HAL_GPIO_Init+0x304>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f46:	4a2f      	ldr	r2, [pc, #188]	; (8003004 <HAL_GPIO_Init+0x304>)
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f4c:	4b2d      	ldr	r3, [pc, #180]	; (8003004 <HAL_GPIO_Init+0x304>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f70:	4a24      	ldr	r2, [pc, #144]	; (8003004 <HAL_GPIO_Init+0x304>)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f76:	4b23      	ldr	r3, [pc, #140]	; (8003004 <HAL_GPIO_Init+0x304>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f9a:	4a1a      	ldr	r2, [pc, #104]	; (8003004 <HAL_GPIO_Init+0x304>)
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fa0:	4b18      	ldr	r3, [pc, #96]	; (8003004 <HAL_GPIO_Init+0x304>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fc4:	4a0f      	ldr	r2, [pc, #60]	; (8003004 <HAL_GPIO_Init+0x304>)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	2b0f      	cmp	r3, #15
 8002fd4:	f67f aea2 	bls.w	8002d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fd8:	bf00      	nop
 8002fda:	bf00      	nop
 8002fdc:	3724      	adds	r7, #36	; 0x24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40013800 	.word	0x40013800
 8002ff0:	40020000 	.word	0x40020000
 8002ff4:	40020400 	.word	0x40020400
 8002ff8:	40020800 	.word	0x40020800
 8002ffc:	40020c00 	.word	0x40020c00
 8003000:	40021000 	.word	0x40021000
 8003004:	40013c00 	.word	0x40013c00

08003008 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003012:	2300      	movs	r3, #0
 8003014:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	e0bb      	b.n	800319c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003024:	2201      	movs	r2, #1
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4013      	ands	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	429a      	cmp	r2, r3
 800303c:	f040 80ab 	bne.w	8003196 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003040:	4a5c      	ldr	r2, [pc, #368]	; (80031b4 <HAL_GPIO_DeInit+0x1ac>)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	089b      	lsrs	r3, r3, #2
 8003046:	3302      	adds	r3, #2
 8003048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	220f      	movs	r2, #15
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	4013      	ands	r3, r2
 8003060:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a54      	ldr	r2, [pc, #336]	; (80031b8 <HAL_GPIO_DeInit+0x1b0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d019      	beq.n	800309e <HAL_GPIO_DeInit+0x96>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a53      	ldr	r2, [pc, #332]	; (80031bc <HAL_GPIO_DeInit+0x1b4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d013      	beq.n	800309a <HAL_GPIO_DeInit+0x92>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a52      	ldr	r2, [pc, #328]	; (80031c0 <HAL_GPIO_DeInit+0x1b8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00d      	beq.n	8003096 <HAL_GPIO_DeInit+0x8e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a51      	ldr	r2, [pc, #324]	; (80031c4 <HAL_GPIO_DeInit+0x1bc>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d007      	beq.n	8003092 <HAL_GPIO_DeInit+0x8a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a50      	ldr	r2, [pc, #320]	; (80031c8 <HAL_GPIO_DeInit+0x1c0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d101      	bne.n	800308e <HAL_GPIO_DeInit+0x86>
 800308a:	2304      	movs	r3, #4
 800308c:	e008      	b.n	80030a0 <HAL_GPIO_DeInit+0x98>
 800308e:	2307      	movs	r3, #7
 8003090:	e006      	b.n	80030a0 <HAL_GPIO_DeInit+0x98>
 8003092:	2303      	movs	r3, #3
 8003094:	e004      	b.n	80030a0 <HAL_GPIO_DeInit+0x98>
 8003096:	2302      	movs	r3, #2
 8003098:	e002      	b.n	80030a0 <HAL_GPIO_DeInit+0x98>
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <HAL_GPIO_DeInit+0x98>
 800309e:	2300      	movs	r3, #0
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	f002 0203 	and.w	r2, r2, #3
 80030a6:	0092      	lsls	r2, r2, #2
 80030a8:	4093      	lsls	r3, r2
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d132      	bne.n	8003116 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80030b0:	4b46      	ldr	r3, [pc, #280]	; (80031cc <HAL_GPIO_DeInit+0x1c4>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	43db      	mvns	r3, r3
 80030b8:	4944      	ldr	r1, [pc, #272]	; (80031cc <HAL_GPIO_DeInit+0x1c4>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80030be:	4b43      	ldr	r3, [pc, #268]	; (80031cc <HAL_GPIO_DeInit+0x1c4>)
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	43db      	mvns	r3, r3
 80030c6:	4941      	ldr	r1, [pc, #260]	; (80031cc <HAL_GPIO_DeInit+0x1c4>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80030cc:	4b3f      	ldr	r3, [pc, #252]	; (80031cc <HAL_GPIO_DeInit+0x1c4>)
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	43db      	mvns	r3, r3
 80030d4:	493d      	ldr	r1, [pc, #244]	; (80031cc <HAL_GPIO_DeInit+0x1c4>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80030da:	4b3c      	ldr	r3, [pc, #240]	; (80031cc <HAL_GPIO_DeInit+0x1c4>)
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	493a      	ldr	r1, [pc, #232]	; (80031cc <HAL_GPIO_DeInit+0x1c4>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	220f      	movs	r2, #15
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80030f8:	4a2e      	ldr	r2, [pc, #184]	; (80031b4 <HAL_GPIO_DeInit+0x1ac>)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	089b      	lsrs	r3, r3, #2
 80030fe:	3302      	adds	r3, #2
 8003100:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	43da      	mvns	r2, r3
 8003108:	482a      	ldr	r0, [pc, #168]	; (80031b4 <HAL_GPIO_DeInit+0x1ac>)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	089b      	lsrs	r3, r3, #2
 800310e:	400a      	ands	r2, r1
 8003110:	3302      	adds	r3, #2
 8003112:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	2103      	movs	r1, #3
 8003120:	fa01 f303 	lsl.w	r3, r1, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	401a      	ands	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	08da      	lsrs	r2, r3, #3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3208      	adds	r2, #8
 8003134:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	220f      	movs	r2, #15
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	08d2      	lsrs	r2, r2, #3
 800314c:	4019      	ands	r1, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3208      	adds	r2, #8
 8003152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	2103      	movs	r1, #3
 8003160:	fa01 f303 	lsl.w	r3, r1, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	401a      	ands	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	2101      	movs	r1, #1
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	fa01 f303 	lsl.w	r3, r1, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	401a      	ands	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	2103      	movs	r1, #3
 800318a:	fa01 f303 	lsl.w	r3, r1, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	401a      	ands	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	3301      	adds	r3, #1
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2b0f      	cmp	r3, #15
 80031a0:	f67f af40 	bls.w	8003024 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40013800 	.word	0x40013800
 80031b8:	40020000 	.word	0x40020000
 80031bc:	40020400 	.word	0x40020400
 80031c0:	40020800 	.word	0x40020800
 80031c4:	40020c00 	.word	0x40020c00
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40013c00 	.word	0x40013c00

080031d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	807b      	strh	r3, [r7, #2]
 80031dc:	4613      	mov	r3, r2
 80031de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031e0:	787b      	ldrb	r3, [r7, #1]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031e6:	887a      	ldrh	r2, [r7, #2]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031ec:	e003      	b.n	80031f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031ee:	887b      	ldrh	r3, [r7, #2]
 80031f0:	041a      	lsls	r2, r3, #16
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	619a      	str	r2, [r3, #24]
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800320e:	4b08      	ldr	r3, [pc, #32]	; (8003230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003210:	695a      	ldr	r2, [r3, #20]
 8003212:	88fb      	ldrh	r3, [r7, #6]
 8003214:	4013      	ands	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d006      	beq.n	8003228 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800321a:	4a05      	ldr	r2, [pc, #20]	; (8003230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe f90c 	bl	8001440 <HAL_GPIO_EXTI_Callback>
  }
}
 8003228:	bf00      	nop
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40013c00 	.word	0x40013c00

08003234 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003236:	b08f      	sub	sp, #60	; 0x3c
 8003238:	af0a      	add	r7, sp, #40	; 0x28
 800323a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e054      	b.n	80032f0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d106      	bne.n	8003266 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f00b fefb 	bl	800f05c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2203      	movs	r2, #3
 800326a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d102      	bne.n	8003280 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f004 fb05 	bl	8007894 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	687e      	ldr	r6, [r7, #4]
 8003292:	466d      	mov	r5, sp
 8003294:	f106 0410 	add.w	r4, r6, #16
 8003298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800329a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800329c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800329e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80032a8:	1d33      	adds	r3, r6, #4
 80032aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032ac:	6838      	ldr	r0, [r7, #0]
 80032ae:	f004 fa7f 	bl	80077b0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2101      	movs	r1, #1
 80032b8:	4618      	mov	r0, r3
 80032ba:	f004 fafc 	bl	80078b6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	687e      	ldr	r6, [r7, #4]
 80032c6:	466d      	mov	r5, sp
 80032c8:	f106 0410 	add.w	r4, r6, #16
 80032cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80032dc:	1d33      	adds	r3, r6, #4
 80032de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032e0:	6838      	ldr	r0, [r7, #0]
 80032e2:	f004 fc85 	bl	8007bf0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032f8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80032f8:	b590      	push	{r4, r7, lr}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af04      	add	r7, sp, #16
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	4608      	mov	r0, r1
 8003302:	4611      	mov	r1, r2
 8003304:	461a      	mov	r2, r3
 8003306:	4603      	mov	r3, r0
 8003308:	70fb      	strb	r3, [r7, #3]
 800330a:	460b      	mov	r3, r1
 800330c:	70bb      	strb	r3, [r7, #2]
 800330e:	4613      	mov	r3, r2
 8003310:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_HCD_HC_Init+0x28>
 800331c:	2302      	movs	r3, #2
 800331e:	e076      	b.n	800340e <HAL_HCD_HC_Init+0x116>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	212c      	movs	r1, #44	; 0x2c
 800332e:	fb01 f303 	mul.w	r3, r1, r3
 8003332:	4413      	add	r3, r2
 8003334:	333d      	adds	r3, #61	; 0x3d
 8003336:	2200      	movs	r2, #0
 8003338:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800333a:	78fb      	ldrb	r3, [r7, #3]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	212c      	movs	r1, #44	; 0x2c
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	4413      	add	r3, r2
 8003346:	3338      	adds	r3, #56	; 0x38
 8003348:	787a      	ldrb	r2, [r7, #1]
 800334a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	212c      	movs	r1, #44	; 0x2c
 8003352:	fb01 f303 	mul.w	r3, r1, r3
 8003356:	4413      	add	r3, r2
 8003358:	3340      	adds	r3, #64	; 0x40
 800335a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800335c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	212c      	movs	r1, #44	; 0x2c
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	4413      	add	r3, r2
 800336a:	3339      	adds	r3, #57	; 0x39
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	212c      	movs	r1, #44	; 0x2c
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	4413      	add	r3, r2
 800337c:	333f      	adds	r3, #63	; 0x3f
 800337e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003382:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	78ba      	ldrb	r2, [r7, #2]
 8003388:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800338c:	b2d0      	uxtb	r0, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	212c      	movs	r1, #44	; 0x2c
 8003392:	fb01 f303 	mul.w	r3, r1, r3
 8003396:	4413      	add	r3, r2
 8003398:	333a      	adds	r3, #58	; 0x3a
 800339a:	4602      	mov	r2, r0
 800339c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800339e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	da09      	bge.n	80033ba <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	212c      	movs	r1, #44	; 0x2c
 80033ac:	fb01 f303 	mul.w	r3, r1, r3
 80033b0:	4413      	add	r3, r2
 80033b2:	333b      	adds	r3, #59	; 0x3b
 80033b4:	2201      	movs	r2, #1
 80033b6:	701a      	strb	r2, [r3, #0]
 80033b8:	e008      	b.n	80033cc <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80033ba:	78fb      	ldrb	r3, [r7, #3]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	212c      	movs	r1, #44	; 0x2c
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	4413      	add	r3, r2
 80033c6:	333b      	adds	r3, #59	; 0x3b
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80033cc:	78fb      	ldrb	r3, [r7, #3]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	212c      	movs	r1, #44	; 0x2c
 80033d2:	fb01 f303 	mul.w	r3, r1, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	333c      	adds	r3, #60	; 0x3c
 80033da:	f897 2020 	ldrb.w	r2, [r7, #32]
 80033de:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	787c      	ldrb	r4, [r7, #1]
 80033e6:	78ba      	ldrb	r2, [r7, #2]
 80033e8:	78f9      	ldrb	r1, [r7, #3]
 80033ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033ec:	9302      	str	r3, [sp, #8]
 80033ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033f2:	9301      	str	r3, [sp, #4]
 80033f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	4623      	mov	r3, r4
 80033fc:	f004 fd7e 	bl	8007efc <USB_HC_Init>
 8003400:	4603      	mov	r3, r0
 8003402:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800340c:	7bfb      	ldrb	r3, [r7, #15]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	bd90      	pop	{r4, r7, pc}

08003416 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	460b      	mov	r3, r1
 8003420:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_HCD_HC_Halt+0x1e>
 8003430:	2302      	movs	r3, #2
 8003432:	e00f      	b.n	8003454 <HAL_HCD_HC_Halt+0x3e>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	78fa      	ldrb	r2, [r7, #3]
 8003442:	4611      	mov	r1, r2
 8003444:	4618      	mov	r0, r3
 8003446:	f004 ffce 	bl	80083e6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003452:	7bfb      	ldrb	r3, [r7, #15]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	4608      	mov	r0, r1
 8003466:	4611      	mov	r1, r2
 8003468:	461a      	mov	r2, r3
 800346a:	4603      	mov	r3, r0
 800346c:	70fb      	strb	r3, [r7, #3]
 800346e:	460b      	mov	r3, r1
 8003470:	70bb      	strb	r3, [r7, #2]
 8003472:	4613      	mov	r3, r2
 8003474:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	212c      	movs	r1, #44	; 0x2c
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	4413      	add	r3, r2
 8003482:	333b      	adds	r3, #59	; 0x3b
 8003484:	78ba      	ldrb	r2, [r7, #2]
 8003486:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	212c      	movs	r1, #44	; 0x2c
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	4413      	add	r3, r2
 8003494:	333f      	adds	r3, #63	; 0x3f
 8003496:	787a      	ldrb	r2, [r7, #1]
 8003498:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800349a:	7c3b      	ldrb	r3, [r7, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d112      	bne.n	80034c6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	212c      	movs	r1, #44	; 0x2c
 80034a6:	fb01 f303 	mul.w	r3, r1, r3
 80034aa:	4413      	add	r3, r2
 80034ac:	3342      	adds	r3, #66	; 0x42
 80034ae:	2203      	movs	r2, #3
 80034b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	212c      	movs	r1, #44	; 0x2c
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	4413      	add	r3, r2
 80034be:	333d      	adds	r3, #61	; 0x3d
 80034c0:	7f3a      	ldrb	r2, [r7, #28]
 80034c2:	701a      	strb	r2, [r3, #0]
 80034c4:	e008      	b.n	80034d8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	212c      	movs	r1, #44	; 0x2c
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	4413      	add	r3, r2
 80034d2:	3342      	adds	r3, #66	; 0x42
 80034d4:	2202      	movs	r2, #2
 80034d6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80034d8:	787b      	ldrb	r3, [r7, #1]
 80034da:	2b03      	cmp	r3, #3
 80034dc:	f200 80c6 	bhi.w	800366c <HAL_HCD_HC_SubmitRequest+0x210>
 80034e0:	a201      	add	r2, pc, #4	; (adr r2, 80034e8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80034e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e6:	bf00      	nop
 80034e8:	080034f9 	.word	0x080034f9
 80034ec:	08003659 	.word	0x08003659
 80034f0:	0800355d 	.word	0x0800355d
 80034f4:	080035db 	.word	0x080035db
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80034f8:	7c3b      	ldrb	r3, [r7, #16]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	f040 80b8 	bne.w	8003670 <HAL_HCD_HC_SubmitRequest+0x214>
 8003500:	78bb      	ldrb	r3, [r7, #2]
 8003502:	2b00      	cmp	r3, #0
 8003504:	f040 80b4 	bne.w	8003670 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003508:	8b3b      	ldrh	r3, [r7, #24]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d108      	bne.n	8003520 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	212c      	movs	r1, #44	; 0x2c
 8003514:	fb01 f303 	mul.w	r3, r1, r3
 8003518:	4413      	add	r3, r2
 800351a:	3355      	adds	r3, #85	; 0x55
 800351c:	2201      	movs	r2, #1
 800351e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	212c      	movs	r1, #44	; 0x2c
 8003526:	fb01 f303 	mul.w	r3, r1, r3
 800352a:	4413      	add	r3, r2
 800352c:	3355      	adds	r3, #85	; 0x55
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d109      	bne.n	8003548 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	212c      	movs	r1, #44	; 0x2c
 800353a:	fb01 f303 	mul.w	r3, r1, r3
 800353e:	4413      	add	r3, r2
 8003540:	3342      	adds	r3, #66	; 0x42
 8003542:	2200      	movs	r2, #0
 8003544:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003546:	e093      	b.n	8003670 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	212c      	movs	r1, #44	; 0x2c
 800354e:	fb01 f303 	mul.w	r3, r1, r3
 8003552:	4413      	add	r3, r2
 8003554:	3342      	adds	r3, #66	; 0x42
 8003556:	2202      	movs	r2, #2
 8003558:	701a      	strb	r2, [r3, #0]
      break;
 800355a:	e089      	b.n	8003670 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800355c:	78bb      	ldrb	r3, [r7, #2]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d11d      	bne.n	800359e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	212c      	movs	r1, #44	; 0x2c
 8003568:	fb01 f303 	mul.w	r3, r1, r3
 800356c:	4413      	add	r3, r2
 800356e:	3355      	adds	r3, #85	; 0x55
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d109      	bne.n	800358a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	212c      	movs	r1, #44	; 0x2c
 800357c:	fb01 f303 	mul.w	r3, r1, r3
 8003580:	4413      	add	r3, r2
 8003582:	3342      	adds	r3, #66	; 0x42
 8003584:	2200      	movs	r2, #0
 8003586:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003588:	e073      	b.n	8003672 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	212c      	movs	r1, #44	; 0x2c
 8003590:	fb01 f303 	mul.w	r3, r1, r3
 8003594:	4413      	add	r3, r2
 8003596:	3342      	adds	r3, #66	; 0x42
 8003598:	2202      	movs	r2, #2
 800359a:	701a      	strb	r2, [r3, #0]
      break;
 800359c:	e069      	b.n	8003672 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800359e:	78fb      	ldrb	r3, [r7, #3]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	212c      	movs	r1, #44	; 0x2c
 80035a4:	fb01 f303 	mul.w	r3, r1, r3
 80035a8:	4413      	add	r3, r2
 80035aa:	3354      	adds	r3, #84	; 0x54
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d109      	bne.n	80035c6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035b2:	78fb      	ldrb	r3, [r7, #3]
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	212c      	movs	r1, #44	; 0x2c
 80035b8:	fb01 f303 	mul.w	r3, r1, r3
 80035bc:	4413      	add	r3, r2
 80035be:	3342      	adds	r3, #66	; 0x42
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
      break;
 80035c4:	e055      	b.n	8003672 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035c6:	78fb      	ldrb	r3, [r7, #3]
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	212c      	movs	r1, #44	; 0x2c
 80035cc:	fb01 f303 	mul.w	r3, r1, r3
 80035d0:	4413      	add	r3, r2
 80035d2:	3342      	adds	r3, #66	; 0x42
 80035d4:	2202      	movs	r2, #2
 80035d6:	701a      	strb	r2, [r3, #0]
      break;
 80035d8:	e04b      	b.n	8003672 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80035da:	78bb      	ldrb	r3, [r7, #2]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d11d      	bne.n	800361c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	212c      	movs	r1, #44	; 0x2c
 80035e6:	fb01 f303 	mul.w	r3, r1, r3
 80035ea:	4413      	add	r3, r2
 80035ec:	3355      	adds	r3, #85	; 0x55
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d109      	bne.n	8003608 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	212c      	movs	r1, #44	; 0x2c
 80035fa:	fb01 f303 	mul.w	r3, r1, r3
 80035fe:	4413      	add	r3, r2
 8003600:	3342      	adds	r3, #66	; 0x42
 8003602:	2200      	movs	r2, #0
 8003604:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003606:	e034      	b.n	8003672 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003608:	78fb      	ldrb	r3, [r7, #3]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	212c      	movs	r1, #44	; 0x2c
 800360e:	fb01 f303 	mul.w	r3, r1, r3
 8003612:	4413      	add	r3, r2
 8003614:	3342      	adds	r3, #66	; 0x42
 8003616:	2202      	movs	r2, #2
 8003618:	701a      	strb	r2, [r3, #0]
      break;
 800361a:	e02a      	b.n	8003672 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	212c      	movs	r1, #44	; 0x2c
 8003622:	fb01 f303 	mul.w	r3, r1, r3
 8003626:	4413      	add	r3, r2
 8003628:	3354      	adds	r3, #84	; 0x54
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d109      	bne.n	8003644 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	212c      	movs	r1, #44	; 0x2c
 8003636:	fb01 f303 	mul.w	r3, r1, r3
 800363a:	4413      	add	r3, r2
 800363c:	3342      	adds	r3, #66	; 0x42
 800363e:	2200      	movs	r2, #0
 8003640:	701a      	strb	r2, [r3, #0]
      break;
 8003642:	e016      	b.n	8003672 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003644:	78fb      	ldrb	r3, [r7, #3]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	212c      	movs	r1, #44	; 0x2c
 800364a:	fb01 f303 	mul.w	r3, r1, r3
 800364e:	4413      	add	r3, r2
 8003650:	3342      	adds	r3, #66	; 0x42
 8003652:	2202      	movs	r2, #2
 8003654:	701a      	strb	r2, [r3, #0]
      break;
 8003656:	e00c      	b.n	8003672 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	212c      	movs	r1, #44	; 0x2c
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	4413      	add	r3, r2
 8003664:	3342      	adds	r3, #66	; 0x42
 8003666:	2200      	movs	r2, #0
 8003668:	701a      	strb	r2, [r3, #0]
      break;
 800366a:	e002      	b.n	8003672 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800366c:	bf00      	nop
 800366e:	e000      	b.n	8003672 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003670:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	212c      	movs	r1, #44	; 0x2c
 8003678:	fb01 f303 	mul.w	r3, r1, r3
 800367c:	4413      	add	r3, r2
 800367e:	3344      	adds	r3, #68	; 0x44
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	8b3a      	ldrh	r2, [r7, #24]
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	202c      	movs	r0, #44	; 0x2c
 800368c:	fb00 f303 	mul.w	r3, r0, r3
 8003690:	440b      	add	r3, r1
 8003692:	334c      	adds	r3, #76	; 0x4c
 8003694:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	212c      	movs	r1, #44	; 0x2c
 800369c:	fb01 f303 	mul.w	r3, r1, r3
 80036a0:	4413      	add	r3, r2
 80036a2:	3360      	adds	r3, #96	; 0x60
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	212c      	movs	r1, #44	; 0x2c
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	4413      	add	r3, r2
 80036b4:	3350      	adds	r3, #80	; 0x50
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	212c      	movs	r1, #44	; 0x2c
 80036c0:	fb01 f303 	mul.w	r3, r1, r3
 80036c4:	4413      	add	r3, r2
 80036c6:	3339      	adds	r3, #57	; 0x39
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	212c      	movs	r1, #44	; 0x2c
 80036d2:	fb01 f303 	mul.w	r3, r1, r3
 80036d6:	4413      	add	r3, r2
 80036d8:	3361      	adds	r3, #97	; 0x61
 80036da:	2200      	movs	r2, #0
 80036dc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	78fb      	ldrb	r3, [r7, #3]
 80036e4:	222c      	movs	r2, #44	; 0x2c
 80036e6:	fb02 f303 	mul.w	r3, r2, r3
 80036ea:	3338      	adds	r3, #56	; 0x38
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	18d1      	adds	r1, r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	f004 fd22 	bl	8008140 <USB_HC_StartXfer>
 80036fc:	4603      	mov	r3, r0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop

08003708 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f004 fa23 	bl	8007b6a <USB_GetMode>
 8003724:	4603      	mov	r3, r0
 8003726:	2b01      	cmp	r3, #1
 8003728:	f040 80f6 	bne.w	8003918 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f004 fa07 	bl	8007b44 <USB_ReadInterrupts>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80ec 	beq.w	8003916 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f004 f9fe 	bl	8007b44 <USB_ReadInterrupts>
 8003748:	4603      	mov	r3, r0
 800374a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800374e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003752:	d104      	bne.n	800375e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800375c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f004 f9ee 	bl	8007b44 <USB_ReadInterrupts>
 8003768:	4603      	mov	r3, r0
 800376a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800376e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003772:	d104      	bne.n	800377e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800377c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f004 f9de 	bl	8007b44 <USB_ReadInterrupts>
 8003788:	4603      	mov	r3, r0
 800378a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800378e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003792:	d104      	bne.n	800379e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800379c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f004 f9ce 	bl	8007b44 <USB_ReadInterrupts>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d103      	bne.n	80037ba <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2202      	movs	r2, #2
 80037b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f004 f9c0 	bl	8007b44 <USB_ReadInterrupts>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037ce:	d11c      	bne.n	800380a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80037d8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10f      	bne.n	800380a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80037ea:	2110      	movs	r1, #16
 80037ec:	6938      	ldr	r0, [r7, #16]
 80037ee:	f004 f8af 	bl	8007950 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80037f2:	6938      	ldr	r0, [r7, #16]
 80037f4:	f004 f8e0 	bl	80079b8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2101      	movs	r1, #1
 80037fe:	4618      	mov	r0, r3
 8003800:	f004 fab6 	bl	8007d70 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f00b fca7 	bl	800f158 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f004 f998 	bl	8007b44 <USB_ReadInterrupts>
 8003814:	4603      	mov	r3, r0
 8003816:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800381a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800381e:	d102      	bne.n	8003826 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f001 f89e 	bl	8004962 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f004 f98a 	bl	8007b44 <USB_ReadInterrupts>
 8003830:	4603      	mov	r3, r0
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b08      	cmp	r3, #8
 8003838:	d106      	bne.n	8003848 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f00b fc70 	bl	800f120 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2208      	movs	r2, #8
 8003846:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f004 f979 	bl	8007b44 <USB_ReadInterrupts>
 8003852:	4603      	mov	r3, r0
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	2b10      	cmp	r3, #16
 800385a:	d101      	bne.n	8003860 <HAL_HCD_IRQHandler+0x158>
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <HAL_HCD_IRQHandler+0x15a>
 8003860:	2300      	movs	r3, #0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d012      	beq.n	800388c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	699a      	ldr	r2, [r3, #24]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0210 	bic.w	r2, r2, #16
 8003874:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 ffa1 	bl	80047be <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699a      	ldr	r2, [r3, #24]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0210 	orr.w	r2, r2, #16
 800388a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f004 f957 	bl	8007b44 <USB_ReadInterrupts>
 8003896:	4603      	mov	r3, r0
 8003898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038a0:	d13a      	bne.n	8003918 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f004 fd8c 	bl	80083c4 <USB_HC_ReadInterrupt>
 80038ac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	e025      	b.n	8003900 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	fa22 f303 	lsr.w	r3, r2, r3
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d018      	beq.n	80038fa <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038de:	d106      	bne.n	80038ee <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	4619      	mov	r1, r3
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f8ab 	bl	8003a42 <HCD_HC_IN_IRQHandler>
 80038ec:	e005      	b.n	80038fa <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	4619      	mov	r1, r3
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fbf9 	bl	80040ec <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	3301      	adds	r3, #1
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	429a      	cmp	r2, r3
 8003908:	d3d4      	bcc.n	80038b4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003912:	615a      	str	r2, [r3, #20]
 8003914:	e000      	b.n	8003918 <HAL_HCD_IRQHandler+0x210>
      return;
 8003916:	bf00      	nop
    }
  }
}
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_HCD_Start+0x16>
 8003930:	2302      	movs	r3, #2
 8003932:	e013      	b.n	800395c <HAL_HCD_Start+0x3e>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2101      	movs	r1, #1
 8003942:	4618      	mov	r0, r3
 8003944:	f004 fa78 	bl	8007e38 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f003 ff90 	bl	8007872 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_HCD_Stop+0x16>
 8003976:	2302      	movs	r3, #2
 8003978:	e00d      	b.n	8003996 <HAL_HCD_Stop+0x32>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f004 fe66 	bl	8008658 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f004 fa1a 	bl	8007de4 <USB_ResetPort>
 80039b0:	4603      	mov	r3, r0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
 80039c2:	460b      	mov	r3, r1
 80039c4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80039c6:	78fb      	ldrb	r3, [r7, #3]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	212c      	movs	r1, #44	; 0x2c
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	4413      	add	r3, r2
 80039d2:	3360      	adds	r3, #96	; 0x60
 80039d4:	781b      	ldrb	r3, [r3, #0]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	460b      	mov	r3, r1
 80039ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	212c      	movs	r1, #44	; 0x2c
 80039f4:	fb01 f303 	mul.w	r3, r1, r3
 80039f8:	4413      	add	r3, r2
 80039fa:	3350      	adds	r3, #80	; 0x50
 80039fc:	681b      	ldr	r3, [r3, #0]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f004 fa5e 	bl	8007ed8 <USB_GetCurrentFrame>
 8003a1c:	4603      	mov	r3, r0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f004 fa39 	bl	8007eaa <USB_GetHostSpeed>
 8003a38:	4603      	mov	r3, r0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b086      	sub	sp, #24
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d11a      	bne.n	8003aa8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7e:	461a      	mov	r2, r3
 8003a80:	2304      	movs	r3, #4
 8003a82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	212c      	movs	r1, #44	; 0x2c
 8003a8a:	fb01 f303 	mul.w	r3, r1, r3
 8003a8e:	4413      	add	r3, r2
 8003a90:	3361      	adds	r3, #97	; 0x61
 8003a92:	2206      	movs	r2, #6
 8003a94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f004 fca0 	bl	80083e6 <USB_HC_Halt>
 8003aa6:	e0af      	b.n	8003c08 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003abe:	d11b      	bne.n	8003af8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003acc:	461a      	mov	r2, r3
 8003ace:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ad2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	212c      	movs	r1, #44	; 0x2c
 8003ada:	fb01 f303 	mul.w	r3, r1, r3
 8003ade:	4413      	add	r3, r2
 8003ae0:	3361      	adds	r3, #97	; 0x61
 8003ae2:	2207      	movs	r2, #7
 8003ae4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	4611      	mov	r1, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f004 fc78 	bl	80083e6 <USB_HC_Halt>
 8003af6:	e087      	b.n	8003c08 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	d109      	bne.n	8003b22 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	2320      	movs	r3, #32
 8003b1e:	6093      	str	r3, [r2, #8]
 8003b20:	e072      	b.n	8003c08 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d11a      	bne.n	8003b6e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b44:	461a      	mov	r2, r3
 8003b46:	2308      	movs	r3, #8
 8003b48:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	212c      	movs	r1, #44	; 0x2c
 8003b50:	fb01 f303 	mul.w	r3, r1, r3
 8003b54:	4413      	add	r3, r2
 8003b56:	3361      	adds	r3, #97	; 0x61
 8003b58:	2205      	movs	r2, #5
 8003b5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f004 fc3d 	bl	80083e6 <USB_HC_Halt>
 8003b6c:	e04c      	b.n	8003c08 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b84:	d11b      	bne.n	8003bbe <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b92:	461a      	mov	r2, r3
 8003b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b98:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	212c      	movs	r1, #44	; 0x2c
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	3361      	adds	r3, #97	; 0x61
 8003ba8:	2208      	movs	r2, #8
 8003baa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f004 fc15 	bl	80083e6 <USB_HC_Halt>
 8003bbc:	e024      	b.n	8003c08 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd0:	2b80      	cmp	r3, #128	; 0x80
 8003bd2:	d119      	bne.n	8003c08 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be0:	461a      	mov	r2, r3
 8003be2:	2380      	movs	r3, #128	; 0x80
 8003be4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	212c      	movs	r1, #44	; 0x2c
 8003bec:	fb01 f303 	mul.w	r3, r1, r3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	3361      	adds	r3, #97	; 0x61
 8003bf4:	2206      	movs	r2, #6
 8003bf6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	4611      	mov	r1, r2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f004 fbef 	bl	80083e6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c1e:	d112      	bne.n	8003c46 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	4611      	mov	r1, r2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f004 fbdb 	bl	80083e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c42:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003c44:	e24e      	b.n	80040e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	f040 80df 	bne.w	8003e1c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d019      	beq.n	8003c9a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	212c      	movs	r1, #44	; 0x2c
 8003c6c:	fb01 f303 	mul.w	r3, r1, r3
 8003c70:	4413      	add	r3, r2
 8003c72:	3348      	adds	r3, #72	; 0x48
 8003c74:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	0159      	lsls	r1, r3, #5
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	440b      	add	r3, r1
 8003c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003c88:	1ad2      	subs	r2, r2, r3
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	202c      	movs	r0, #44	; 0x2c
 8003c90:	fb00 f303 	mul.w	r3, r0, r3
 8003c94:	440b      	add	r3, r1
 8003c96:	3350      	adds	r3, #80	; 0x50
 8003c98:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	212c      	movs	r1, #44	; 0x2c
 8003ca0:	fb01 f303 	mul.w	r3, r1, r3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3361      	adds	r3, #97	; 0x61
 8003ca8:	2201      	movs	r2, #1
 8003caa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	212c      	movs	r1, #44	; 0x2c
 8003cb2:	fb01 f303 	mul.w	r3, r1, r3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	335c      	adds	r3, #92	; 0x5c
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cca:	461a      	mov	r2, r3
 8003ccc:	2301      	movs	r3, #1
 8003cce:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	212c      	movs	r1, #44	; 0x2c
 8003cd6:	fb01 f303 	mul.w	r3, r1, r3
 8003cda:	4413      	add	r3, r2
 8003cdc:	333f      	adds	r3, #63	; 0x3f
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d009      	beq.n	8003cf8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	212c      	movs	r1, #44	; 0x2c
 8003cea:	fb01 f303 	mul.w	r3, r1, r3
 8003cee:	4413      	add	r3, r2
 8003cf0:	333f      	adds	r3, #63	; 0x3f
 8003cf2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d111      	bne.n	8003d1c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	4611      	mov	r1, r2
 8003d02:	4618      	mov	r0, r3
 8003d04:	f004 fb6f 	bl	80083e6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d14:	461a      	mov	r2, r3
 8003d16:	2310      	movs	r3, #16
 8003d18:	6093      	str	r3, [r2, #8]
 8003d1a:	e03a      	b.n	8003d92 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	212c      	movs	r1, #44	; 0x2c
 8003d22:	fb01 f303 	mul.w	r3, r1, r3
 8003d26:	4413      	add	r3, r2
 8003d28:	333f      	adds	r3, #63	; 0x3f
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b03      	cmp	r3, #3
 8003d2e:	d009      	beq.n	8003d44 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	212c      	movs	r1, #44	; 0x2c
 8003d36:	fb01 f303 	mul.w	r3, r1, r3
 8003d3a:	4413      	add	r3, r2
 8003d3c:	333f      	adds	r3, #63	; 0x3f
 8003d3e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d126      	bne.n	8003d92 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	0151      	lsls	r1, r2, #5
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	440a      	add	r2, r1
 8003d5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d62:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	212c      	movs	r1, #44	; 0x2c
 8003d6a:	fb01 f303 	mul.w	r3, r1, r3
 8003d6e:	4413      	add	r3, r2
 8003d70:	3360      	adds	r3, #96	; 0x60
 8003d72:	2201      	movs	r2, #1
 8003d74:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	b2d9      	uxtb	r1, r3
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	202c      	movs	r0, #44	; 0x2c
 8003d80:	fb00 f303 	mul.w	r3, r0, r3
 8003d84:	4413      	add	r3, r2
 8003d86:	3360      	adds	r3, #96	; 0x60
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f00b f9f1 	bl	800f174 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d12b      	bne.n	8003df2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	212c      	movs	r1, #44	; 0x2c
 8003da0:	fb01 f303 	mul.w	r3, r1, r3
 8003da4:	4413      	add	r3, r2
 8003da6:	3348      	adds	r3, #72	; 0x48
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	202c      	movs	r0, #44	; 0x2c
 8003db0:	fb00 f202 	mul.w	r2, r0, r2
 8003db4:	440a      	add	r2, r1
 8003db6:	3240      	adds	r2, #64	; 0x40
 8003db8:	8812      	ldrh	r2, [r2, #0]
 8003dba:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 818e 	beq.w	80040e4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	212c      	movs	r1, #44	; 0x2c
 8003dce:	fb01 f303 	mul.w	r3, r1, r3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3354      	adds	r3, #84	; 0x54
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	f083 0301 	eor.w	r3, r3, #1
 8003ddc:	b2d8      	uxtb	r0, r3
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	212c      	movs	r1, #44	; 0x2c
 8003de4:	fb01 f303 	mul.w	r3, r1, r3
 8003de8:	4413      	add	r3, r2
 8003dea:	3354      	adds	r3, #84	; 0x54
 8003dec:	4602      	mov	r2, r0
 8003dee:	701a      	strb	r2, [r3, #0]
}
 8003df0:	e178      	b.n	80040e4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	212c      	movs	r1, #44	; 0x2c
 8003df8:	fb01 f303 	mul.w	r3, r1, r3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	3354      	adds	r3, #84	; 0x54
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	f083 0301 	eor.w	r3, r3, #1
 8003e06:	b2d8      	uxtb	r0, r3
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	212c      	movs	r1, #44	; 0x2c
 8003e0e:	fb01 f303 	mul.w	r3, r1, r3
 8003e12:	4413      	add	r3, r2
 8003e14:	3354      	adds	r3, #84	; 0x54
 8003e16:	4602      	mov	r2, r0
 8003e18:	701a      	strb	r2, [r3, #0]
}
 8003e1a:	e163      	b.n	80040e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	f040 80f6 	bne.w	8004020 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	212c      	movs	r1, #44	; 0x2c
 8003e3a:	fb01 f303 	mul.w	r3, r1, r3
 8003e3e:	4413      	add	r3, r2
 8003e40:	3361      	adds	r3, #97	; 0x61
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d109      	bne.n	8003e5c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	212c      	movs	r1, #44	; 0x2c
 8003e4e:	fb01 f303 	mul.w	r3, r1, r3
 8003e52:	4413      	add	r3, r2
 8003e54:	3360      	adds	r3, #96	; 0x60
 8003e56:	2201      	movs	r2, #1
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	e0c9      	b.n	8003ff0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	212c      	movs	r1, #44	; 0x2c
 8003e62:	fb01 f303 	mul.w	r3, r1, r3
 8003e66:	4413      	add	r3, r2
 8003e68:	3361      	adds	r3, #97	; 0x61
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b05      	cmp	r3, #5
 8003e6e:	d109      	bne.n	8003e84 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	212c      	movs	r1, #44	; 0x2c
 8003e76:	fb01 f303 	mul.w	r3, r1, r3
 8003e7a:	4413      	add	r3, r2
 8003e7c:	3360      	adds	r3, #96	; 0x60
 8003e7e:	2205      	movs	r2, #5
 8003e80:	701a      	strb	r2, [r3, #0]
 8003e82:	e0b5      	b.n	8003ff0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	212c      	movs	r1, #44	; 0x2c
 8003e8a:	fb01 f303 	mul.w	r3, r1, r3
 8003e8e:	4413      	add	r3, r2
 8003e90:	3361      	adds	r3, #97	; 0x61
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b06      	cmp	r3, #6
 8003e96:	d009      	beq.n	8003eac <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	212c      	movs	r1, #44	; 0x2c
 8003e9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3361      	adds	r3, #97	; 0x61
 8003ea6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d150      	bne.n	8003f4e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	212c      	movs	r1, #44	; 0x2c
 8003eb2:	fb01 f303 	mul.w	r3, r1, r3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	335c      	adds	r3, #92	; 0x5c
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	202c      	movs	r0, #44	; 0x2c
 8003ec4:	fb00 f303 	mul.w	r3, r0, r3
 8003ec8:	440b      	add	r3, r1
 8003eca:	335c      	adds	r3, #92	; 0x5c
 8003ecc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	212c      	movs	r1, #44	; 0x2c
 8003ed4:	fb01 f303 	mul.w	r3, r1, r3
 8003ed8:	4413      	add	r3, r2
 8003eda:	335c      	adds	r3, #92	; 0x5c
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d912      	bls.n	8003f08 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	212c      	movs	r1, #44	; 0x2c
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	4413      	add	r3, r2
 8003eee:	335c      	adds	r3, #92	; 0x5c
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	212c      	movs	r1, #44	; 0x2c
 8003efa:	fb01 f303 	mul.w	r3, r1, r3
 8003efe:	4413      	add	r3, r2
 8003f00:	3360      	adds	r3, #96	; 0x60
 8003f02:	2204      	movs	r2, #4
 8003f04:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f06:	e073      	b.n	8003ff0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	212c      	movs	r1, #44	; 0x2c
 8003f0e:	fb01 f303 	mul.w	r3, r1, r3
 8003f12:	4413      	add	r3, r2
 8003f14:	3360      	adds	r3, #96	; 0x60
 8003f16:	2202      	movs	r2, #2
 8003f18:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f30:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f38:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f46:	461a      	mov	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f4c:	e050      	b.n	8003ff0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	212c      	movs	r1, #44	; 0x2c
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	4413      	add	r3, r2
 8003f5a:	3361      	adds	r3, #97	; 0x61
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	d122      	bne.n	8003fa8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	212c      	movs	r1, #44	; 0x2c
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3360      	adds	r3, #96	; 0x60
 8003f70:	2202      	movs	r2, #2
 8003f72:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f8a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f92:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	e023      	b.n	8003ff0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	212c      	movs	r1, #44	; 0x2c
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3361      	adds	r3, #97	; 0x61
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b07      	cmp	r3, #7
 8003fba:	d119      	bne.n	8003ff0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	212c      	movs	r1, #44	; 0x2c
 8003fc2:	fb01 f303 	mul.w	r3, r1, r3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	335c      	adds	r3, #92	; 0x5c
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	202c      	movs	r0, #44	; 0x2c
 8003fd4:	fb00 f303 	mul.w	r3, r0, r3
 8003fd8:	440b      	add	r3, r1
 8003fda:	335c      	adds	r3, #92	; 0x5c
 8003fdc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	212c      	movs	r1, #44	; 0x2c
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	4413      	add	r3, r2
 8003fea:	3360      	adds	r3, #96	; 0x60
 8003fec:	2204      	movs	r2, #4
 8003fee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	2302      	movs	r3, #2
 8004000:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	b2d9      	uxtb	r1, r3
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	202c      	movs	r0, #44	; 0x2c
 800400c:	fb00 f303 	mul.w	r3, r0, r3
 8004010:	4413      	add	r3, r2
 8004012:	3360      	adds	r3, #96	; 0x60
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f00b f8ab 	bl	800f174 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800401e:	e061      	b.n	80040e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	4413      	add	r3, r2
 8004028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b10      	cmp	r3, #16
 8004034:	d156      	bne.n	80040e4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	212c      	movs	r1, #44	; 0x2c
 800403c:	fb01 f303 	mul.w	r3, r1, r3
 8004040:	4413      	add	r3, r2
 8004042:	333f      	adds	r3, #63	; 0x3f
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b03      	cmp	r3, #3
 8004048:	d111      	bne.n	800406e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	212c      	movs	r1, #44	; 0x2c
 8004050:	fb01 f303 	mul.w	r3, r1, r3
 8004054:	4413      	add	r3, r2
 8004056:	335c      	adds	r3, #92	; 0x5c
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	4611      	mov	r1, r2
 8004066:	4618      	mov	r0, r3
 8004068:	f004 f9bd 	bl	80083e6 <USB_HC_Halt>
 800406c:	e031      	b.n	80040d2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	212c      	movs	r1, #44	; 0x2c
 8004074:	fb01 f303 	mul.w	r3, r1, r3
 8004078:	4413      	add	r3, r2
 800407a:	333f      	adds	r3, #63	; 0x3f
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	212c      	movs	r1, #44	; 0x2c
 8004088:	fb01 f303 	mul.w	r3, r1, r3
 800408c:	4413      	add	r3, r2
 800408e:	333f      	adds	r3, #63	; 0x3f
 8004090:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004092:	2b02      	cmp	r3, #2
 8004094:	d11d      	bne.n	80040d2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	212c      	movs	r1, #44	; 0x2c
 800409c:	fb01 f303 	mul.w	r3, r1, r3
 80040a0:	4413      	add	r3, r2
 80040a2:	335c      	adds	r3, #92	; 0x5c
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d110      	bne.n	80040d2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	212c      	movs	r1, #44	; 0x2c
 80040b6:	fb01 f303 	mul.w	r3, r1, r3
 80040ba:	4413      	add	r3, r2
 80040bc:	3361      	adds	r3, #97	; 0x61
 80040be:	2203      	movs	r2, #3
 80040c0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	4611      	mov	r1, r2
 80040cc:	4618      	mov	r0, r3
 80040ce:	f004 f98a 	bl	80083e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040de:	461a      	mov	r2, r3
 80040e0:	2310      	movs	r3, #16
 80040e2:	6093      	str	r3, [r2, #8]
}
 80040e4:	bf00      	nop
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	460b      	mov	r3, r1
 80040f6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	4413      	add	r3, r2
 800410e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b04      	cmp	r3, #4
 800411a:	d11a      	bne.n	8004152 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	4413      	add	r3, r2
 8004124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004128:	461a      	mov	r2, r3
 800412a:	2304      	movs	r3, #4
 800412c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	212c      	movs	r1, #44	; 0x2c
 8004134:	fb01 f303 	mul.w	r3, r1, r3
 8004138:	4413      	add	r3, r2
 800413a:	3361      	adds	r3, #97	; 0x61
 800413c:	2206      	movs	r2, #6
 800413e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	4611      	mov	r1, r2
 800414a:	4618      	mov	r0, r3
 800414c:	f004 f94b 	bl	80083e6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004150:	e331      	b.n	80047b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	4413      	add	r3, r2
 800415a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b20      	cmp	r3, #32
 8004166:	d12e      	bne.n	80041c6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	4413      	add	r3, r2
 8004170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004174:	461a      	mov	r2, r3
 8004176:	2320      	movs	r3, #32
 8004178:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	212c      	movs	r1, #44	; 0x2c
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	4413      	add	r3, r2
 8004186:	333d      	adds	r3, #61	; 0x3d
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b01      	cmp	r3, #1
 800418c:	f040 8313 	bne.w	80047b6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	212c      	movs	r1, #44	; 0x2c
 8004196:	fb01 f303 	mul.w	r3, r1, r3
 800419a:	4413      	add	r3, r2
 800419c:	333d      	adds	r3, #61	; 0x3d
 800419e:	2200      	movs	r2, #0
 80041a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	212c      	movs	r1, #44	; 0x2c
 80041a8:	fb01 f303 	mul.w	r3, r1, r3
 80041ac:	4413      	add	r3, r2
 80041ae:	3360      	adds	r3, #96	; 0x60
 80041b0:	2202      	movs	r2, #2
 80041b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	4611      	mov	r1, r2
 80041be:	4618      	mov	r0, r3
 80041c0:	f004 f911 	bl	80083e6 <USB_HC_Halt>
}
 80041c4:	e2f7      	b.n	80047b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041dc:	d112      	bne.n	8004204 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ea:	461a      	mov	r2, r3
 80041ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041f0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	4611      	mov	r1, r2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f004 f8f2 	bl	80083e6 <USB_HC_Halt>
}
 8004202:	e2d8      	b.n	80047b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	4413      	add	r3, r2
 800420c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b01      	cmp	r3, #1
 8004218:	d140      	bne.n	800429c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	212c      	movs	r1, #44	; 0x2c
 8004220:	fb01 f303 	mul.w	r3, r1, r3
 8004224:	4413      	add	r3, r2
 8004226:	335c      	adds	r3, #92	; 0x5c
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	4413      	add	r3, r2
 8004234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423e:	2b40      	cmp	r3, #64	; 0x40
 8004240:	d111      	bne.n	8004266 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	212c      	movs	r1, #44	; 0x2c
 8004248:	fb01 f303 	mul.w	r3, r1, r3
 800424c:	4413      	add	r3, r2
 800424e:	333d      	adds	r3, #61	; 0x3d
 8004250:	2201      	movs	r2, #1
 8004252:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	4413      	add	r3, r2
 800425c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004260:	461a      	mov	r2, r3
 8004262:	2340      	movs	r3, #64	; 0x40
 8004264:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	4413      	add	r3, r2
 800426e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004272:	461a      	mov	r2, r3
 8004274:	2301      	movs	r3, #1
 8004276:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	212c      	movs	r1, #44	; 0x2c
 800427e:	fb01 f303 	mul.w	r3, r1, r3
 8004282:	4413      	add	r3, r2
 8004284:	3361      	adds	r3, #97	; 0x61
 8004286:	2201      	movs	r2, #1
 8004288:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	4611      	mov	r1, r2
 8004294:	4618      	mov	r0, r3
 8004296:	f004 f8a6 	bl	80083e6 <USB_HC_Halt>
}
 800429a:	e28c      	b.n	80047b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ae:	2b40      	cmp	r3, #64	; 0x40
 80042b0:	d12c      	bne.n	800430c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	212c      	movs	r1, #44	; 0x2c
 80042b8:	fb01 f303 	mul.w	r3, r1, r3
 80042bc:	4413      	add	r3, r2
 80042be:	3361      	adds	r3, #97	; 0x61
 80042c0:	2204      	movs	r2, #4
 80042c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	212c      	movs	r1, #44	; 0x2c
 80042ca:	fb01 f303 	mul.w	r3, r1, r3
 80042ce:	4413      	add	r3, r2
 80042d0:	333d      	adds	r3, #61	; 0x3d
 80042d2:	2201      	movs	r2, #1
 80042d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	212c      	movs	r1, #44	; 0x2c
 80042dc:	fb01 f303 	mul.w	r3, r1, r3
 80042e0:	4413      	add	r3, r2
 80042e2:	335c      	adds	r3, #92	; 0x5c
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f004 f877 	bl	80083e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004304:	461a      	mov	r2, r3
 8004306:	2340      	movs	r3, #64	; 0x40
 8004308:	6093      	str	r3, [r2, #8]
}
 800430a:	e254      	b.n	80047b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	4413      	add	r3, r2
 8004314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b08      	cmp	r3, #8
 8004320:	d11a      	bne.n	8004358 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	4413      	add	r3, r2
 800432a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432e:	461a      	mov	r2, r3
 8004330:	2308      	movs	r3, #8
 8004332:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	212c      	movs	r1, #44	; 0x2c
 800433a:	fb01 f303 	mul.w	r3, r1, r3
 800433e:	4413      	add	r3, r2
 8004340:	3361      	adds	r3, #97	; 0x61
 8004342:	2205      	movs	r2, #5
 8004344:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	4611      	mov	r1, r2
 8004350:	4618      	mov	r0, r3
 8004352:	f004 f848 	bl	80083e6 <USB_HC_Halt>
}
 8004356:	e22e      	b.n	80047b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	4413      	add	r3, r2
 8004360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 0310 	and.w	r3, r3, #16
 800436a:	2b10      	cmp	r3, #16
 800436c:	d140      	bne.n	80043f0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	212c      	movs	r1, #44	; 0x2c
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	4413      	add	r3, r2
 800437a:	335c      	adds	r3, #92	; 0x5c
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	212c      	movs	r1, #44	; 0x2c
 8004386:	fb01 f303 	mul.w	r3, r1, r3
 800438a:	4413      	add	r3, r2
 800438c:	3361      	adds	r3, #97	; 0x61
 800438e:	2203      	movs	r2, #3
 8004390:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	212c      	movs	r1, #44	; 0x2c
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	4413      	add	r3, r2
 800439e:	333d      	adds	r3, #61	; 0x3d
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d112      	bne.n	80043cc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	212c      	movs	r1, #44	; 0x2c
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	4413      	add	r3, r2
 80043b2:	333c      	adds	r3, #60	; 0x3c
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d108      	bne.n	80043cc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	212c      	movs	r1, #44	; 0x2c
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	4413      	add	r3, r2
 80043c6:	333d      	adds	r3, #61	; 0x3d
 80043c8:	2201      	movs	r2, #1
 80043ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	4611      	mov	r1, r2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f004 f805 	bl	80083e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e8:	461a      	mov	r2, r3
 80043ea:	2310      	movs	r3, #16
 80043ec:	6093      	str	r3, [r2, #8]
}
 80043ee:	e1e2      	b.n	80047b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004402:	2b80      	cmp	r3, #128	; 0x80
 8004404:	d164      	bne.n	80044d0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d111      	bne.n	8004432 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	212c      	movs	r1, #44	; 0x2c
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	4413      	add	r3, r2
 800441a:	3361      	adds	r3, #97	; 0x61
 800441c:	2206      	movs	r2, #6
 800441e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	4611      	mov	r1, r2
 800442a:	4618      	mov	r0, r3
 800442c:	f003 ffdb 	bl	80083e6 <USB_HC_Halt>
 8004430:	e044      	b.n	80044bc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	212c      	movs	r1, #44	; 0x2c
 8004438:	fb01 f303 	mul.w	r3, r1, r3
 800443c:	4413      	add	r3, r2
 800443e:	335c      	adds	r3, #92	; 0x5c
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	202c      	movs	r0, #44	; 0x2c
 800444a:	fb00 f303 	mul.w	r3, r0, r3
 800444e:	440b      	add	r3, r1
 8004450:	335c      	adds	r3, #92	; 0x5c
 8004452:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	212c      	movs	r1, #44	; 0x2c
 800445a:	fb01 f303 	mul.w	r3, r1, r3
 800445e:	4413      	add	r3, r2
 8004460:	335c      	adds	r3, #92	; 0x5c
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b02      	cmp	r3, #2
 8004466:	d920      	bls.n	80044aa <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	212c      	movs	r1, #44	; 0x2c
 800446e:	fb01 f303 	mul.w	r3, r1, r3
 8004472:	4413      	add	r3, r2
 8004474:	335c      	adds	r3, #92	; 0x5c
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	212c      	movs	r1, #44	; 0x2c
 8004480:	fb01 f303 	mul.w	r3, r1, r3
 8004484:	4413      	add	r3, r2
 8004486:	3360      	adds	r3, #96	; 0x60
 8004488:	2204      	movs	r2, #4
 800448a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	b2d9      	uxtb	r1, r3
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	202c      	movs	r0, #44	; 0x2c
 8004496:	fb00 f303 	mul.w	r3, r0, r3
 800449a:	4413      	add	r3, r2
 800449c:	3360      	adds	r3, #96	; 0x60
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f00a fe66 	bl	800f174 <HAL_HCD_HC_NotifyURBChange_Callback>
 80044a8:	e008      	b.n	80044bc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	212c      	movs	r1, #44	; 0x2c
 80044b0:	fb01 f303 	mul.w	r3, r1, r3
 80044b4:	4413      	add	r3, r2
 80044b6:	3360      	adds	r3, #96	; 0x60
 80044b8:	2202      	movs	r2, #2
 80044ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c8:	461a      	mov	r2, r3
 80044ca:	2380      	movs	r3, #128	; 0x80
 80044cc:	6093      	str	r3, [r2, #8]
}
 80044ce:	e172      	b.n	80047b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e6:	d11b      	bne.n	8004520 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	212c      	movs	r1, #44	; 0x2c
 80044ee:	fb01 f303 	mul.w	r3, r1, r3
 80044f2:	4413      	add	r3, r2
 80044f4:	3361      	adds	r3, #97	; 0x61
 80044f6:	2208      	movs	r2, #8
 80044f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	4611      	mov	r1, r2
 8004504:	4618      	mov	r0, r3
 8004506:	f003 ff6e 	bl	80083e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	4413      	add	r3, r2
 8004512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004516:	461a      	mov	r2, r3
 8004518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800451c:	6093      	str	r3, [r2, #8]
}
 800451e:	e14a      	b.n	80047b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	4413      	add	r3, r2
 8004528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b02      	cmp	r3, #2
 8004534:	f040 813f 	bne.w	80047b6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	212c      	movs	r1, #44	; 0x2c
 800453e:	fb01 f303 	mul.w	r3, r1, r3
 8004542:	4413      	add	r3, r2
 8004544:	3361      	adds	r3, #97	; 0x61
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d17d      	bne.n	8004648 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	212c      	movs	r1, #44	; 0x2c
 8004552:	fb01 f303 	mul.w	r3, r1, r3
 8004556:	4413      	add	r3, r2
 8004558:	3360      	adds	r3, #96	; 0x60
 800455a:	2201      	movs	r2, #1
 800455c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	212c      	movs	r1, #44	; 0x2c
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	4413      	add	r3, r2
 800456a:	333f      	adds	r3, #63	; 0x3f
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d00a      	beq.n	8004588 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	212c      	movs	r1, #44	; 0x2c
 8004578:	fb01 f303 	mul.w	r3, r1, r3
 800457c:	4413      	add	r3, r2
 800457e:	333f      	adds	r3, #63	; 0x3f
 8004580:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004582:	2b03      	cmp	r3, #3
 8004584:	f040 8100 	bne.w	8004788 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d113      	bne.n	80045b8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	212c      	movs	r1, #44	; 0x2c
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	4413      	add	r3, r2
 800459c:	3355      	adds	r3, #85	; 0x55
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	f083 0301 	eor.w	r3, r3, #1
 80045a4:	b2d8      	uxtb	r0, r3
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	212c      	movs	r1, #44	; 0x2c
 80045ac:	fb01 f303 	mul.w	r3, r1, r3
 80045b0:	4413      	add	r3, r2
 80045b2:	3355      	adds	r3, #85	; 0x55
 80045b4:	4602      	mov	r2, r0
 80045b6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	f040 80e3 	bne.w	8004788 <HCD_HC_OUT_IRQHandler+0x69c>
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	212c      	movs	r1, #44	; 0x2c
 80045c8:	fb01 f303 	mul.w	r3, r1, r3
 80045cc:	4413      	add	r3, r2
 80045ce:	334c      	adds	r3, #76	; 0x4c
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 80d8 	beq.w	8004788 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	212c      	movs	r1, #44	; 0x2c
 80045de:	fb01 f303 	mul.w	r3, r1, r3
 80045e2:	4413      	add	r3, r2
 80045e4:	334c      	adds	r3, #76	; 0x4c
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	202c      	movs	r0, #44	; 0x2c
 80045ee:	fb00 f202 	mul.w	r2, r0, r2
 80045f2:	440a      	add	r2, r1
 80045f4:	3240      	adds	r2, #64	; 0x40
 80045f6:	8812      	ldrh	r2, [r2, #0]
 80045f8:	4413      	add	r3, r2
 80045fa:	3b01      	subs	r3, #1
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	202c      	movs	r0, #44	; 0x2c
 8004602:	fb00 f202 	mul.w	r2, r0, r2
 8004606:	440a      	add	r2, r1
 8004608:	3240      	adds	r2, #64	; 0x40
 800460a:	8812      	ldrh	r2, [r2, #0]
 800460c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80b5 	beq.w	8004788 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	212c      	movs	r1, #44	; 0x2c
 8004624:	fb01 f303 	mul.w	r3, r1, r3
 8004628:	4413      	add	r3, r2
 800462a:	3355      	adds	r3, #85	; 0x55
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	f083 0301 	eor.w	r3, r3, #1
 8004632:	b2d8      	uxtb	r0, r3
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	212c      	movs	r1, #44	; 0x2c
 800463a:	fb01 f303 	mul.w	r3, r1, r3
 800463e:	4413      	add	r3, r2
 8004640:	3355      	adds	r3, #85	; 0x55
 8004642:	4602      	mov	r2, r0
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	e09f      	b.n	8004788 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	212c      	movs	r1, #44	; 0x2c
 800464e:	fb01 f303 	mul.w	r3, r1, r3
 8004652:	4413      	add	r3, r2
 8004654:	3361      	adds	r3, #97	; 0x61
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b03      	cmp	r3, #3
 800465a:	d109      	bne.n	8004670 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	212c      	movs	r1, #44	; 0x2c
 8004662:	fb01 f303 	mul.w	r3, r1, r3
 8004666:	4413      	add	r3, r2
 8004668:	3360      	adds	r3, #96	; 0x60
 800466a:	2202      	movs	r2, #2
 800466c:	701a      	strb	r2, [r3, #0]
 800466e:	e08b      	b.n	8004788 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	212c      	movs	r1, #44	; 0x2c
 8004676:	fb01 f303 	mul.w	r3, r1, r3
 800467a:	4413      	add	r3, r2
 800467c:	3361      	adds	r3, #97	; 0x61
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b04      	cmp	r3, #4
 8004682:	d109      	bne.n	8004698 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	212c      	movs	r1, #44	; 0x2c
 800468a:	fb01 f303 	mul.w	r3, r1, r3
 800468e:	4413      	add	r3, r2
 8004690:	3360      	adds	r3, #96	; 0x60
 8004692:	2202      	movs	r2, #2
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	e077      	b.n	8004788 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	212c      	movs	r1, #44	; 0x2c
 800469e:	fb01 f303 	mul.w	r3, r1, r3
 80046a2:	4413      	add	r3, r2
 80046a4:	3361      	adds	r3, #97	; 0x61
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b05      	cmp	r3, #5
 80046aa:	d109      	bne.n	80046c0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	212c      	movs	r1, #44	; 0x2c
 80046b2:	fb01 f303 	mul.w	r3, r1, r3
 80046b6:	4413      	add	r3, r2
 80046b8:	3360      	adds	r3, #96	; 0x60
 80046ba:	2205      	movs	r2, #5
 80046bc:	701a      	strb	r2, [r3, #0]
 80046be:	e063      	b.n	8004788 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	212c      	movs	r1, #44	; 0x2c
 80046c6:	fb01 f303 	mul.w	r3, r1, r3
 80046ca:	4413      	add	r3, r2
 80046cc:	3361      	adds	r3, #97	; 0x61
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	2b06      	cmp	r3, #6
 80046d2:	d009      	beq.n	80046e8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	212c      	movs	r1, #44	; 0x2c
 80046da:	fb01 f303 	mul.w	r3, r1, r3
 80046de:	4413      	add	r3, r2
 80046e0:	3361      	adds	r3, #97	; 0x61
 80046e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d14f      	bne.n	8004788 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	212c      	movs	r1, #44	; 0x2c
 80046ee:	fb01 f303 	mul.w	r3, r1, r3
 80046f2:	4413      	add	r3, r2
 80046f4:	335c      	adds	r3, #92	; 0x5c
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	202c      	movs	r0, #44	; 0x2c
 8004700:	fb00 f303 	mul.w	r3, r0, r3
 8004704:	440b      	add	r3, r1
 8004706:	335c      	adds	r3, #92	; 0x5c
 8004708:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	212c      	movs	r1, #44	; 0x2c
 8004710:	fb01 f303 	mul.w	r3, r1, r3
 8004714:	4413      	add	r3, r2
 8004716:	335c      	adds	r3, #92	; 0x5c
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d912      	bls.n	8004744 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	212c      	movs	r1, #44	; 0x2c
 8004724:	fb01 f303 	mul.w	r3, r1, r3
 8004728:	4413      	add	r3, r2
 800472a:	335c      	adds	r3, #92	; 0x5c
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	212c      	movs	r1, #44	; 0x2c
 8004736:	fb01 f303 	mul.w	r3, r1, r3
 800473a:	4413      	add	r3, r2
 800473c:	3360      	adds	r3, #96	; 0x60
 800473e:	2204      	movs	r2, #4
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	e021      	b.n	8004788 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	212c      	movs	r1, #44	; 0x2c
 800474a:	fb01 f303 	mul.w	r3, r1, r3
 800474e:	4413      	add	r3, r2
 8004750:	3360      	adds	r3, #96	; 0x60
 8004752:	2202      	movs	r2, #2
 8004754:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	4413      	add	r3, r2
 800475e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800476c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004774:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	4413      	add	r3, r2
 800477e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004782:	461a      	mov	r2, r3
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	4413      	add	r3, r2
 8004790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004794:	461a      	mov	r2, r3
 8004796:	2302      	movs	r3, #2
 8004798:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	b2d9      	uxtb	r1, r3
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	202c      	movs	r0, #44	; 0x2c
 80047a4:	fb00 f303 	mul.w	r3, r0, r3
 80047a8:	4413      	add	r3, r2
 80047aa:	3360      	adds	r3, #96	; 0x60
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f00a fcdf 	bl	800f174 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80047b6:	bf00      	nop
 80047b8:	3720      	adds	r7, #32
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b08a      	sub	sp, #40	; 0x28
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	0c5b      	lsrs	r3, r3, #17
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	091b      	lsrs	r3, r3, #4
 80047ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047f2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d004      	beq.n	8004804 <HCD_RXQLVL_IRQHandler+0x46>
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2b05      	cmp	r3, #5
 80047fe:	f000 80a9 	beq.w	8004954 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004802:	e0aa      	b.n	800495a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 80a6 	beq.w	8004958 <HCD_RXQLVL_IRQHandler+0x19a>
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	212c      	movs	r1, #44	; 0x2c
 8004812:	fb01 f303 	mul.w	r3, r1, r3
 8004816:	4413      	add	r3, r2
 8004818:	3344      	adds	r3, #68	; 0x44
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 809b 	beq.w	8004958 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	212c      	movs	r1, #44	; 0x2c
 8004828:	fb01 f303 	mul.w	r3, r1, r3
 800482c:	4413      	add	r3, r2
 800482e:	3350      	adds	r3, #80	; 0x50
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	441a      	add	r2, r3
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	202c      	movs	r0, #44	; 0x2c
 800483c:	fb00 f303 	mul.w	r3, r0, r3
 8004840:	440b      	add	r3, r1
 8004842:	334c      	adds	r3, #76	; 0x4c
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d87a      	bhi.n	8004940 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	212c      	movs	r1, #44	; 0x2c
 8004854:	fb01 f303 	mul.w	r3, r1, r3
 8004858:	4413      	add	r3, r2
 800485a:	3344      	adds	r3, #68	; 0x44
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	b292      	uxth	r2, r2
 8004862:	4619      	mov	r1, r3
 8004864:	f003 f916 	bl	8007a94 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	212c      	movs	r1, #44	; 0x2c
 800486e:	fb01 f303 	mul.w	r3, r1, r3
 8004872:	4413      	add	r3, r2
 8004874:	3344      	adds	r3, #68	; 0x44
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	441a      	add	r2, r3
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	202c      	movs	r0, #44	; 0x2c
 8004882:	fb00 f303 	mul.w	r3, r0, r3
 8004886:	440b      	add	r3, r1
 8004888:	3344      	adds	r3, #68	; 0x44
 800488a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	212c      	movs	r1, #44	; 0x2c
 8004892:	fb01 f303 	mul.w	r3, r1, r3
 8004896:	4413      	add	r3, r2
 8004898:	3350      	adds	r3, #80	; 0x50
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	441a      	add	r2, r3
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	202c      	movs	r0, #44	; 0x2c
 80048a6:	fb00 f303 	mul.w	r3, r0, r3
 80048aa:	440b      	add	r3, r1
 80048ac:	3350      	adds	r3, #80	; 0x50
 80048ae:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	0cdb      	lsrs	r3, r3, #19
 80048c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048c4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	212c      	movs	r1, #44	; 0x2c
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	4413      	add	r3, r2
 80048d2:	3340      	adds	r3, #64	; 0x40
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	4293      	cmp	r3, r2
 80048dc:	d13c      	bne.n	8004958 <HCD_RXQLVL_IRQHandler+0x19a>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d039      	beq.n	8004958 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048fa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004902:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	4413      	add	r3, r2
 800490c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004910:	461a      	mov	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	212c      	movs	r1, #44	; 0x2c
 800491c:	fb01 f303 	mul.w	r3, r1, r3
 8004920:	4413      	add	r3, r2
 8004922:	3354      	adds	r3, #84	; 0x54
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	f083 0301 	eor.w	r3, r3, #1
 800492a:	b2d8      	uxtb	r0, r3
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	212c      	movs	r1, #44	; 0x2c
 8004932:	fb01 f303 	mul.w	r3, r1, r3
 8004936:	4413      	add	r3, r2
 8004938:	3354      	adds	r3, #84	; 0x54
 800493a:	4602      	mov	r2, r0
 800493c:	701a      	strb	r2, [r3, #0]
      break;
 800493e:	e00b      	b.n	8004958 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	212c      	movs	r1, #44	; 0x2c
 8004946:	fb01 f303 	mul.w	r3, r1, r3
 800494a:	4413      	add	r3, r2
 800494c:	3360      	adds	r3, #96	; 0x60
 800494e:	2204      	movs	r2, #4
 8004950:	701a      	strb	r2, [r3, #0]
      break;
 8004952:	e001      	b.n	8004958 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004954:	bf00      	nop
 8004956:	e000      	b.n	800495a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004958:	bf00      	nop
  }
}
 800495a:	bf00      	nop
 800495c:	3728      	adds	r7, #40	; 0x28
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b086      	sub	sp, #24
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800498e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b02      	cmp	r3, #2
 8004998:	d10b      	bne.n	80049b2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d102      	bne.n	80049aa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f00a fbc9 	bl	800f13c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f043 0302 	orr.w	r3, r3, #2
 80049b0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d132      	bne.n	8004a22 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f043 0308 	orr.w	r3, r3, #8
 80049c2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d126      	bne.n	8004a1c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d113      	bne.n	80049fe <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80049dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049e0:	d106      	bne.n	80049f0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2102      	movs	r1, #2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f003 f9c1 	bl	8007d70 <USB_InitFSLSPClkSel>
 80049ee:	e011      	b.n	8004a14 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2101      	movs	r1, #1
 80049f6:	4618      	mov	r0, r3
 80049f8:	f003 f9ba 	bl	8007d70 <USB_InitFSLSPClkSel>
 80049fc:	e00a      	b.n	8004a14 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d106      	bne.n	8004a14 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004a12:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f00a fbbb 	bl	800f190 <HAL_HCD_PortEnabled_Callback>
 8004a1a:	e002      	b.n	8004a22 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f00a fbc5 	bl	800f1ac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b20      	cmp	r3, #32
 8004a2a:	d103      	bne.n	8004a34 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f043 0320 	orr.w	r3, r3, #32
 8004a32:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	6013      	str	r3, [r2, #0]
}
 8004a40:	bf00      	nop
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e12b      	b.n	8004cb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fc ff4e 	bl	8001910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2224      	movs	r2, #36	; 0x24
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0201 	bic.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004aac:	f002 fcda 	bl	8007464 <HAL_RCC_GetPCLK1Freq>
 8004ab0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	4a81      	ldr	r2, [pc, #516]	; (8004cbc <HAL_I2C_Init+0x274>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d807      	bhi.n	8004acc <HAL_I2C_Init+0x84>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4a80      	ldr	r2, [pc, #512]	; (8004cc0 <HAL_I2C_Init+0x278>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	bf94      	ite	ls
 8004ac4:	2301      	movls	r3, #1
 8004ac6:	2300      	movhi	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	e006      	b.n	8004ada <HAL_I2C_Init+0x92>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4a7d      	ldr	r2, [pc, #500]	; (8004cc4 <HAL_I2C_Init+0x27c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	bf94      	ite	ls
 8004ad4:	2301      	movls	r3, #1
 8004ad6:	2300      	movhi	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e0e7      	b.n	8004cb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4a78      	ldr	r2, [pc, #480]	; (8004cc8 <HAL_I2C_Init+0x280>)
 8004ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aea:	0c9b      	lsrs	r3, r3, #18
 8004aec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	4a6a      	ldr	r2, [pc, #424]	; (8004cbc <HAL_I2C_Init+0x274>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d802      	bhi.n	8004b1c <HAL_I2C_Init+0xd4>
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	e009      	b.n	8004b30 <HAL_I2C_Init+0xe8>
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b22:	fb02 f303 	mul.w	r3, r2, r3
 8004b26:	4a69      	ldr	r2, [pc, #420]	; (8004ccc <HAL_I2C_Init+0x284>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	099b      	lsrs	r3, r3, #6
 8004b2e:	3301      	adds	r3, #1
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	430b      	orrs	r3, r1
 8004b36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	495c      	ldr	r1, [pc, #368]	; (8004cbc <HAL_I2C_Init+0x274>)
 8004b4c:	428b      	cmp	r3, r1
 8004b4e:	d819      	bhi.n	8004b84 <HAL_I2C_Init+0x13c>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1e59      	subs	r1, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b5e:	1c59      	adds	r1, r3, #1
 8004b60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b64:	400b      	ands	r3, r1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <HAL_I2C_Init+0x138>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	1e59      	subs	r1, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b78:	3301      	adds	r3, #1
 8004b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b7e:	e051      	b.n	8004c24 <HAL_I2C_Init+0x1dc>
 8004b80:	2304      	movs	r3, #4
 8004b82:	e04f      	b.n	8004c24 <HAL_I2C_Init+0x1dc>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d111      	bne.n	8004bb0 <HAL_I2C_Init+0x168>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	1e58      	subs	r0, r3, #1
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6859      	ldr	r1, [r3, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	440b      	add	r3, r1
 8004b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf0c      	ite	eq
 8004ba8:	2301      	moveq	r3, #1
 8004baa:	2300      	movne	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	e012      	b.n	8004bd6 <HAL_I2C_Init+0x18e>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	1e58      	subs	r0, r3, #1
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6859      	ldr	r1, [r3, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	0099      	lsls	r1, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bf0c      	ite	eq
 8004bd0:	2301      	moveq	r3, #1
 8004bd2:	2300      	movne	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_I2C_Init+0x196>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e022      	b.n	8004c24 <HAL_I2C_Init+0x1dc>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10e      	bne.n	8004c04 <HAL_I2C_Init+0x1bc>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1e58      	subs	r0, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6859      	ldr	r1, [r3, #4]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	440b      	add	r3, r1
 8004bf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c02:	e00f      	b.n	8004c24 <HAL_I2C_Init+0x1dc>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	1e58      	subs	r0, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6859      	ldr	r1, [r3, #4]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	0099      	lsls	r1, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	6809      	ldr	r1, [r1, #0]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69da      	ldr	r2, [r3, #28]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6911      	ldr	r1, [r2, #16]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68d2      	ldr	r2, [r2, #12]
 8004c5e:	4311      	orrs	r1, r2
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	430b      	orrs	r3, r1
 8004c66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695a      	ldr	r2, [r3, #20]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	000186a0 	.word	0x000186a0
 8004cc0:	001e847f 	.word	0x001e847f
 8004cc4:	003d08ff 	.word	0x003d08ff
 8004cc8:	431bde83 	.word	0x431bde83
 8004ccc:	10624dd3 	.word	0x10624dd3

08004cd0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e021      	b.n	8004d26 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2224      	movs	r2, #36	; 0x24
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0201 	bic.w	r2, r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fc fe96 	bl	8001a2c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
	...

08004d30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af02      	add	r7, sp, #8
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	4608      	mov	r0, r1
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	4603      	mov	r3, r0
 8004d40:	817b      	strh	r3, [r7, #10]
 8004d42:	460b      	mov	r3, r1
 8004d44:	813b      	strh	r3, [r7, #8]
 8004d46:	4613      	mov	r3, r2
 8004d48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d4a:	f7fd fa59 	bl	8002200 <HAL_GetTick>
 8004d4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	f040 80d9 	bne.w	8004f10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	2319      	movs	r3, #25
 8004d64:	2201      	movs	r2, #1
 8004d66:	496d      	ldr	r1, [pc, #436]	; (8004f1c <HAL_I2C_Mem_Write+0x1ec>)
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 fc8d 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004d74:	2302      	movs	r3, #2
 8004d76:	e0cc      	b.n	8004f12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d101      	bne.n	8004d86 <HAL_I2C_Mem_Write+0x56>
 8004d82:	2302      	movs	r3, #2
 8004d84:	e0c5      	b.n	8004f12 <HAL_I2C_Mem_Write+0x1e2>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d007      	beq.n	8004dac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0201 	orr.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2221      	movs	r2, #33	; 0x21
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2240      	movs	r2, #64	; 0x40
 8004dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a3a      	ldr	r2, [r7, #32]
 8004dd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4a4d      	ldr	r2, [pc, #308]	; (8004f20 <HAL_I2C_Mem_Write+0x1f0>)
 8004dec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dee:	88f8      	ldrh	r0, [r7, #6]
 8004df0:	893a      	ldrh	r2, [r7, #8]
 8004df2:	8979      	ldrh	r1, [r7, #10]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	9301      	str	r3, [sp, #4]
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 fac4 	bl	800538c <I2C_RequestMemoryWrite>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d052      	beq.n	8004eb0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e081      	b.n	8004f12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 fd0e 	bl	8005834 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00d      	beq.n	8004e3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d107      	bne.n	8004e36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e06b      	b.n	8004f12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	781a      	ldrb	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d11b      	bne.n	8004eb0 <HAL_I2C_Mem_Write+0x180>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d017      	beq.n	8004eb0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	781a      	ldrb	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1aa      	bne.n	8004e0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 fcfa 	bl	80058b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00d      	beq.n	8004ee4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d107      	bne.n	8004ee0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ede:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e016      	b.n	8004f12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e000      	b.n	8004f12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004f10:	2302      	movs	r3, #2
  }
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	00100002 	.word	0x00100002
 8004f20:	ffff0000 	.word	0xffff0000

08004f24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08c      	sub	sp, #48	; 0x30
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	4608      	mov	r0, r1
 8004f2e:	4611      	mov	r1, r2
 8004f30:	461a      	mov	r2, r3
 8004f32:	4603      	mov	r3, r0
 8004f34:	817b      	strh	r3, [r7, #10]
 8004f36:	460b      	mov	r3, r1
 8004f38:	813b      	strh	r3, [r7, #8]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f3e:	f7fd f95f 	bl	8002200 <HAL_GetTick>
 8004f42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	f040 8208 	bne.w	8005362 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	2319      	movs	r3, #25
 8004f58:	2201      	movs	r2, #1
 8004f5a:	497b      	ldr	r1, [pc, #492]	; (8005148 <HAL_I2C_Mem_Read+0x224>)
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 fb93 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e1fb      	b.n	8005364 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_I2C_Mem_Read+0x56>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e1f4      	b.n	8005364 <HAL_I2C_Mem_Read+0x440>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d007      	beq.n	8004fa0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2222      	movs	r2, #34	; 0x22
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2240      	movs	r2, #64	; 0x40
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4a5b      	ldr	r2, [pc, #364]	; (800514c <HAL_I2C_Mem_Read+0x228>)
 8004fe0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fe2:	88f8      	ldrh	r0, [r7, #6]
 8004fe4:	893a      	ldrh	r2, [r7, #8]
 8004fe6:	8979      	ldrh	r1, [r7, #10]
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	9301      	str	r3, [sp, #4]
 8004fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 fa60 	bl	80054b8 <I2C_RequestMemoryRead>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e1b0      	b.n	8005364 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005006:	2b00      	cmp	r3, #0
 8005008:	d113      	bne.n	8005032 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800500a:	2300      	movs	r3, #0
 800500c:	623b      	str	r3, [r7, #32]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	623b      	str	r3, [r7, #32]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	623b      	str	r3, [r7, #32]
 800501e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	e184      	b.n	800533c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005036:	2b01      	cmp	r3, #1
 8005038:	d11b      	bne.n	8005072 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005048:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800504a:	2300      	movs	r3, #0
 800504c:	61fb      	str	r3, [r7, #28]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	61fb      	str	r3, [r7, #28]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	61fb      	str	r3, [r7, #28]
 800505e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	e164      	b.n	800533c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005076:	2b02      	cmp	r3, #2
 8005078:	d11b      	bne.n	80050b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005088:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005098:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800509a:	2300      	movs	r3, #0
 800509c:	61bb      	str	r3, [r7, #24]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	e144      	b.n	800533c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b2:	2300      	movs	r3, #0
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	617b      	str	r3, [r7, #20]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80050c8:	e138      	b.n	800533c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	f200 80f1 	bhi.w	80052b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d123      	bne.n	8005124 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 fc29 	bl	8005938 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e139      	b.n	8005364 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691a      	ldr	r2, [r3, #16]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510c:	3b01      	subs	r3, #1
 800510e:	b29a      	uxth	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005118:	b29b      	uxth	r3, r3
 800511a:	3b01      	subs	r3, #1
 800511c:	b29a      	uxth	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005122:	e10b      	b.n	800533c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005128:	2b02      	cmp	r3, #2
 800512a:	d14e      	bne.n	80051ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005132:	2200      	movs	r2, #0
 8005134:	4906      	ldr	r1, [pc, #24]	; (8005150 <HAL_I2C_Mem_Read+0x22c>)
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 faa6 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d008      	beq.n	8005154 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e10e      	b.n	8005364 <HAL_I2C_Mem_Read+0x440>
 8005146:	bf00      	nop
 8005148:	00100002 	.word	0x00100002
 800514c:	ffff0000 	.word	0xffff0000
 8005150:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005162:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005180:	3b01      	subs	r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	691a      	ldr	r2, [r3, #16]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051be:	b29b      	uxth	r3, r3
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051c8:	e0b8      	b.n	800533c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d0:	2200      	movs	r2, #0
 80051d2:	4966      	ldr	r1, [pc, #408]	; (800536c <HAL_I2C_Mem_Read+0x448>)
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 fa57 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e0bf      	b.n	8005364 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691a      	ldr	r2, [r3, #16]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005210:	3b01      	subs	r3, #1
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522c:	2200      	movs	r2, #0
 800522e:	494f      	ldr	r1, [pc, #316]	; (800536c <HAL_I2C_Mem_Read+0x448>)
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 fa29 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e091      	b.n	8005364 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800524e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691a      	ldr	r2, [r3, #16]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005278:	b29b      	uxth	r3, r3
 800527a:	3b01      	subs	r3, #1
 800527c:	b29a      	uxth	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052b4:	e042      	b.n	800533c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 fb3c 	bl	8005938 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e04c      	b.n	8005364 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e6:	3b01      	subs	r3, #1
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	f003 0304 	and.w	r3, r3, #4
 8005306:	2b04      	cmp	r3, #4
 8005308:	d118      	bne.n	800533c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691a      	ldr	r2, [r3, #16]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005332:	b29b      	uxth	r3, r3
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005340:	2b00      	cmp	r3, #0
 8005342:	f47f aec2 	bne.w	80050ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2220      	movs	r2, #32
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	e000      	b.n	8005364 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005362:	2302      	movs	r3, #2
  }
}
 8005364:	4618      	mov	r0, r3
 8005366:	3728      	adds	r7, #40	; 0x28
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	00010004 	.word	0x00010004

08005370 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800537e:	b2db      	uxtb	r3, r3
}
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af02      	add	r7, sp, #8
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	4608      	mov	r0, r1
 8005396:	4611      	mov	r1, r2
 8005398:	461a      	mov	r2, r3
 800539a:	4603      	mov	r3, r0
 800539c:	817b      	strh	r3, [r7, #10]
 800539e:	460b      	mov	r3, r1
 80053a0:	813b      	strh	r3, [r7, #8]
 80053a2:	4613      	mov	r3, r2
 80053a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	2200      	movs	r2, #0
 80053be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 f960 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00d      	beq.n	80053ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053dc:	d103      	bne.n	80053e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e05f      	b.n	80054aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053ea:	897b      	ldrh	r3, [r7, #10]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	461a      	mov	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	6a3a      	ldr	r2, [r7, #32]
 80053fe:	492d      	ldr	r1, [pc, #180]	; (80054b4 <I2C_RequestMemoryWrite+0x128>)
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 f998 	bl	8005736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e04c      	b.n	80054aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005428:	6a39      	ldr	r1, [r7, #32]
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 fa02 	bl	8005834 <I2C_WaitOnTXEFlagUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00d      	beq.n	8005452 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	2b04      	cmp	r3, #4
 800543c:	d107      	bne.n	800544e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800544c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e02b      	b.n	80054aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005452:	88fb      	ldrh	r3, [r7, #6]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d105      	bne.n	8005464 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005458:	893b      	ldrh	r3, [r7, #8]
 800545a:	b2da      	uxtb	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	611a      	str	r2, [r3, #16]
 8005462:	e021      	b.n	80054a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005464:	893b      	ldrh	r3, [r7, #8]
 8005466:	0a1b      	lsrs	r3, r3, #8
 8005468:	b29b      	uxth	r3, r3
 800546a:	b2da      	uxtb	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005474:	6a39      	ldr	r1, [r7, #32]
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 f9dc 	bl	8005834 <I2C_WaitOnTXEFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00d      	beq.n	800549e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	2b04      	cmp	r3, #4
 8005488:	d107      	bne.n	800549a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005498:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e005      	b.n	80054aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800549e:	893b      	ldrh	r3, [r7, #8]
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3718      	adds	r7, #24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	00010002 	.word	0x00010002

080054b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	4608      	mov	r0, r1
 80054c2:	4611      	mov	r1, r2
 80054c4:	461a      	mov	r2, r3
 80054c6:	4603      	mov	r3, r0
 80054c8:	817b      	strh	r3, [r7, #10]
 80054ca:	460b      	mov	r3, r1
 80054cc:	813b      	strh	r3, [r7, #8]
 80054ce:	4613      	mov	r3, r2
 80054d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 f8c2 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00d      	beq.n	8005526 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005518:	d103      	bne.n	8005522 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005520:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e0aa      	b.n	800567c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005526:	897b      	ldrh	r3, [r7, #10]
 8005528:	b2db      	uxtb	r3, r3
 800552a:	461a      	mov	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005534:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	6a3a      	ldr	r2, [r7, #32]
 800553a:	4952      	ldr	r1, [pc, #328]	; (8005684 <I2C_RequestMemoryRead+0x1cc>)
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 f8fa 	bl	8005736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e097      	b.n	800567c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800554c:	2300      	movs	r3, #0
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005564:	6a39      	ldr	r1, [r7, #32]
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 f964 	bl	8005834 <I2C_WaitOnTXEFlagUntilTimeout>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00d      	beq.n	800558e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005576:	2b04      	cmp	r3, #4
 8005578:	d107      	bne.n	800558a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005588:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e076      	b.n	800567c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800558e:	88fb      	ldrh	r3, [r7, #6]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d105      	bne.n	80055a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005594:	893b      	ldrh	r3, [r7, #8]
 8005596:	b2da      	uxtb	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	611a      	str	r2, [r3, #16]
 800559e:	e021      	b.n	80055e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055a0:	893b      	ldrh	r3, [r7, #8]
 80055a2:	0a1b      	lsrs	r3, r3, #8
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b0:	6a39      	ldr	r1, [r7, #32]
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 f93e 	bl	8005834 <I2C_WaitOnTXEFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00d      	beq.n	80055da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d107      	bne.n	80055d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e050      	b.n	800567c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055da:	893b      	ldrh	r3, [r7, #8]
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e6:	6a39      	ldr	r1, [r7, #32]
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 f923 	bl	8005834 <I2C_WaitOnTXEFlagUntilTimeout>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00d      	beq.n	8005610 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	2b04      	cmp	r3, #4
 80055fa:	d107      	bne.n	800560c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800560a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e035      	b.n	800567c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800561e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	2200      	movs	r2, #0
 8005628:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 f82b 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00d      	beq.n	8005654 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005646:	d103      	bne.n	8005650 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800564e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e013      	b.n	800567c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005654:	897b      	ldrh	r3, [r7, #10]
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	b2da      	uxtb	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	6a3a      	ldr	r2, [r7, #32]
 8005668:	4906      	ldr	r1, [pc, #24]	; (8005684 <I2C_RequestMemoryRead+0x1cc>)
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 f863 	bl	8005736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e000      	b.n	800567c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	00010002 	.word	0x00010002

08005688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	4613      	mov	r3, r2
 8005696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005698:	e025      	b.n	80056e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a0:	d021      	beq.n	80056e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a2:	f7fc fdad 	bl	8002200 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d302      	bcc.n	80056b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d116      	bne.n	80056e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	f043 0220 	orr.w	r2, r3, #32
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e023      	b.n	800572e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	0c1b      	lsrs	r3, r3, #16
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d10d      	bne.n	800570c <I2C_WaitOnFlagUntilTimeout+0x84>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	43da      	mvns	r2, r3
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4013      	ands	r3, r2
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	bf0c      	ite	eq
 8005702:	2301      	moveq	r3, #1
 8005704:	2300      	movne	r3, #0
 8005706:	b2db      	uxtb	r3, r3
 8005708:	461a      	mov	r2, r3
 800570a:	e00c      	b.n	8005726 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	43da      	mvns	r2, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4013      	ands	r3, r2
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	bf0c      	ite	eq
 800571e:	2301      	moveq	r3, #1
 8005720:	2300      	movne	r3, #0
 8005722:	b2db      	uxtb	r3, r3
 8005724:	461a      	mov	r2, r3
 8005726:	79fb      	ldrb	r3, [r7, #7]
 8005728:	429a      	cmp	r2, r3
 800572a:	d0b6      	beq.n	800569a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
 800573c:	60f8      	str	r0, [r7, #12]
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	607a      	str	r2, [r7, #4]
 8005742:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005744:	e051      	b.n	80057ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005754:	d123      	bne.n	800579e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005764:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800576e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2220      	movs	r2, #32
 800577a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	f043 0204 	orr.w	r2, r3, #4
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e046      	b.n	800582c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a4:	d021      	beq.n	80057ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057a6:	f7fc fd2b 	bl	8002200 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d302      	bcc.n	80057bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d116      	bne.n	80057ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2220      	movs	r2, #32
 80057c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	f043 0220 	orr.w	r2, r3, #32
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e020      	b.n	800582c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	0c1b      	lsrs	r3, r3, #16
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d10c      	bne.n	800580e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	43da      	mvns	r2, r3
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4013      	ands	r3, r2
 8005800:	b29b      	uxth	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	bf14      	ite	ne
 8005806:	2301      	movne	r3, #1
 8005808:	2300      	moveq	r3, #0
 800580a:	b2db      	uxtb	r3, r3
 800580c:	e00b      	b.n	8005826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	43da      	mvns	r2, r3
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	4013      	ands	r3, r2
 800581a:	b29b      	uxth	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	bf14      	ite	ne
 8005820:	2301      	movne	r3, #1
 8005822:	2300      	moveq	r3, #0
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d18d      	bne.n	8005746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005840:	e02d      	b.n	800589e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 f8ce 	bl	80059e4 <I2C_IsAcknowledgeFailed>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e02d      	b.n	80058ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005858:	d021      	beq.n	800589e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800585a:	f7fc fcd1 	bl	8002200 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	429a      	cmp	r2, r3
 8005868:	d302      	bcc.n	8005870 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d116      	bne.n	800589e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2220      	movs	r2, #32
 800587a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	f043 0220 	orr.w	r2, r3, #32
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e007      	b.n	80058ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a8:	2b80      	cmp	r3, #128	; 0x80
 80058aa:	d1ca      	bne.n	8005842 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	60f8      	str	r0, [r7, #12]
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058c2:	e02d      	b.n	8005920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 f88d 	bl	80059e4 <I2C_IsAcknowledgeFailed>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e02d      	b.n	8005930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058da:	d021      	beq.n	8005920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058dc:	f7fc fc90 	bl	8002200 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d302      	bcc.n	80058f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d116      	bne.n	8005920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590c:	f043 0220 	orr.w	r2, r3, #32
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e007      	b.n	8005930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b04      	cmp	r3, #4
 800592c:	d1ca      	bne.n	80058c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005944:	e042      	b.n	80059cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	f003 0310 	and.w	r3, r3, #16
 8005950:	2b10      	cmp	r3, #16
 8005952:	d119      	bne.n	8005988 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0210 	mvn.w	r2, #16
 800595c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2220      	movs	r2, #32
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e029      	b.n	80059dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005988:	f7fc fc3a 	bl	8002200 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	429a      	cmp	r2, r3
 8005996:	d302      	bcc.n	800599e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d116      	bne.n	80059cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	f043 0220 	orr.w	r2, r3, #32
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e007      	b.n	80059dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d6:	2b40      	cmp	r3, #64	; 0x40
 80059d8:	d1b5      	bne.n	8005946 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059fa:	d11b      	bne.n	8005a34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	f043 0204 	orr.w	r2, r3, #4
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e000      	b.n	8005a36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
	...

08005a44 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b088      	sub	sp, #32
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e128      	b.n	8005ca8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d109      	bne.n	8005a76 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a90      	ldr	r2, [pc, #576]	; (8005cb0 <HAL_I2S_Init+0x26c>)
 8005a6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7fc f815 	bl	8001aa0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6812      	ldr	r2, [r2, #0]
 8005a88:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005a8c:	f023 030f 	bic.w	r3, r3, #15
 8005a90:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2202      	movs	r2, #2
 8005a98:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d060      	beq.n	8005b64 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d102      	bne.n	8005ab0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005aaa:	2310      	movs	r3, #16
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	e001      	b.n	8005ab4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005ab0:	2320      	movs	r3, #32
 8005ab2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	d802      	bhi.n	8005ac2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005ac2:	2001      	movs	r0, #1
 8005ac4:	f001 fe14 	bl	80076f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005ac8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad2:	d125      	bne.n	8005b20 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d010      	beq.n	8005afe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	461a      	mov	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af8:	3305      	adds	r3, #5
 8005afa:	613b      	str	r3, [r7, #16]
 8005afc:	e01f      	b.n	8005b3e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b08:	4613      	mov	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	461a      	mov	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1a:	3305      	adds	r3, #5
 8005b1c:	613b      	str	r3, [r7, #16]
 8005b1e:	e00e      	b.n	8005b3e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b28:	4613      	mov	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	461a      	mov	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3a:	3305      	adds	r3, #5
 8005b3c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	4a5c      	ldr	r2, [pc, #368]	; (8005cb4 <HAL_I2S_Init+0x270>)
 8005b42:	fba2 2303 	umull	r2, r3, r2, r3
 8005b46:	08db      	lsrs	r3, r3, #3
 8005b48:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	085b      	lsrs	r3, r3, #1
 8005b5a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	021b      	lsls	r3, r3, #8
 8005b60:	61bb      	str	r3, [r7, #24]
 8005b62:	e003      	b.n	8005b6c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005b64:	2302      	movs	r3, #2
 8005b66:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d902      	bls.n	8005b78 <HAL_I2S_Init+0x134>
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	2bff      	cmp	r3, #255	; 0xff
 8005b76:	d907      	bls.n	8005b88 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7c:	f043 0210 	orr.w	r2, r3, #16
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e08f      	b.n	8005ca8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691a      	ldr	r2, [r3, #16]
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	ea42 0103 	orr.w	r1, r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005ba6:	f023 030f 	bic.w	r3, r3, #15
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6851      	ldr	r1, [r2, #4]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6892      	ldr	r2, [r2, #8]
 8005bb2:	4311      	orrs	r1, r2
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	68d2      	ldr	r2, [r2, #12]
 8005bb8:	4311      	orrs	r1, r2
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6992      	ldr	r2, [r2, #24]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bca:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d161      	bne.n	8005c98 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a38      	ldr	r2, [pc, #224]	; (8005cb8 <HAL_I2S_Init+0x274>)
 8005bd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a37      	ldr	r2, [pc, #220]	; (8005cbc <HAL_I2S_Init+0x278>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d101      	bne.n	8005be8 <HAL_I2S_Init+0x1a4>
 8005be4:	4b36      	ldr	r3, [pc, #216]	; (8005cc0 <HAL_I2S_Init+0x27c>)
 8005be6:	e001      	b.n	8005bec <HAL_I2S_Init+0x1a8>
 8005be8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6812      	ldr	r2, [r2, #0]
 8005bf2:	4932      	ldr	r1, [pc, #200]	; (8005cbc <HAL_I2S_Init+0x278>)
 8005bf4:	428a      	cmp	r2, r1
 8005bf6:	d101      	bne.n	8005bfc <HAL_I2S_Init+0x1b8>
 8005bf8:	4a31      	ldr	r2, [pc, #196]	; (8005cc0 <HAL_I2S_Init+0x27c>)
 8005bfa:	e001      	b.n	8005c00 <HAL_I2S_Init+0x1bc>
 8005bfc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005c00:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005c04:	f023 030f 	bic.w	r3, r3, #15
 8005c08:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a2b      	ldr	r2, [pc, #172]	; (8005cbc <HAL_I2S_Init+0x278>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d101      	bne.n	8005c18 <HAL_I2S_Init+0x1d4>
 8005c14:	4b2a      	ldr	r3, [pc, #168]	; (8005cc0 <HAL_I2S_Init+0x27c>)
 8005c16:	e001      	b.n	8005c1c <HAL_I2S_Init+0x1d8>
 8005c18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a25      	ldr	r2, [pc, #148]	; (8005cbc <HAL_I2S_Init+0x278>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d101      	bne.n	8005c2e <HAL_I2S_Init+0x1ea>
 8005c2a:	4b25      	ldr	r3, [pc, #148]	; (8005cc0 <HAL_I2S_Init+0x27c>)
 8005c2c:	e001      	b.n	8005c32 <HAL_I2S_Init+0x1ee>
 8005c2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c3e:	d003      	beq.n	8005c48 <HAL_I2S_Init+0x204>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d103      	bne.n	8005c50 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c4c:	613b      	str	r3, [r7, #16]
 8005c4e:	e001      	b.n	8005c54 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005c50:	2300      	movs	r3, #0
 8005c52:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c72:	4313      	orrs	r3, r2
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	897b      	ldrh	r3, [r7, #10]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c80:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a0d      	ldr	r2, [pc, #52]	; (8005cbc <HAL_I2S_Init+0x278>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d101      	bne.n	8005c90 <HAL_I2S_Init+0x24c>
 8005c8c:	4b0c      	ldr	r3, [pc, #48]	; (8005cc0 <HAL_I2S_Init+0x27c>)
 8005c8e:	e001      	b.n	8005c94 <HAL_I2S_Init+0x250>
 8005c90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c94:	897a      	ldrh	r2, [r7, #10]
 8005c96:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3720      	adds	r7, #32
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	08006549 	.word	0x08006549
 8005cb4:	cccccccd 	.word	0xcccccccd
 8005cb8:	080066d1 	.word	0x080066d1
 8005cbc:	40003800 	.word	0x40003800
 8005cc0:	40003400 	.word	0x40003400

08005cc4 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <HAL_I2S_Transmit_DMA+0x1a>
 8005cd8:	88fb      	ldrh	r3, [r7, #6]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e08e      	b.n	8005e00 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d101      	bne.n	8005cf2 <HAL_I2S_Transmit_DMA+0x2e>
 8005cee:	2302      	movs	r3, #2
 8005cf0:	e086      	b.n	8005e00 <HAL_I2S_Transmit_DMA+0x13c>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d005      	beq.n	8005d12 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005d0e:	2302      	movs	r3, #2
 8005d10:	e076      	b.n	8005e00 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2203      	movs	r2, #3
 8005d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d002      	beq.n	8005d3e <HAL_I2S_Transmit_DMA+0x7a>
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2b05      	cmp	r3, #5
 8005d3c:	d10a      	bne.n	8005d54 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005d3e:	88fb      	ldrh	r3, [r7, #6]
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005d48:	88fb      	ldrh	r3, [r7, #6]
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d52:	e005      	b.n	8005d60 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	88fa      	ldrh	r2, [r7, #6]
 8005d58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	88fa      	ldrh	r2, [r7, #6]
 8005d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	4a28      	ldr	r2, [pc, #160]	; (8005e08 <HAL_I2S_Transmit_DMA+0x144>)
 8005d66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6c:	4a27      	ldr	r2, [pc, #156]	; (8005e0c <HAL_I2S_Transmit_DMA+0x148>)
 8005d6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d74:	4a26      	ldr	r2, [pc, #152]	; (8005e10 <HAL_I2S_Transmit_DMA+0x14c>)
 8005d76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005d80:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005d88:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d8e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005d90:	f7fc fc84 	bl	800269c <HAL_DMA_Start_IT>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00f      	beq.n	8005dba <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9e:	f043 0208 	orr.w	r2, r3, #8
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e022      	b.n	8005e00 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d107      	bne.n	8005dd8 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	69da      	ldr	r2, [r3, #28]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dd6:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d107      	bne.n	8005df6 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f042 0202 	orr.w	r2, r2, #2
 8005df4:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3718      	adds	r7, #24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	08006427 	.word	0x08006427
 8005e0c:	080063e5 	.word	0x080063e5
 8005e10:	08006443 	.word	0x08006443

08005e14 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_I2S_DMAPause+0x18>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e04a      	b.n	8005ec2 <HAL_I2S_DMAPause+0xae>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d108      	bne.n	8005e52 <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0202 	bic.w	r2, r2, #2
 8005e4e:	605a      	str	r2, [r3, #4]
 8005e50:	e032      	b.n	8005eb8 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d108      	bne.n	8005e70 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0201 	bic.w	r2, r2, #1
 8005e6c:	605a      	str	r2, [r3, #4]
 8005e6e:	e023      	b.n	8005eb8 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b05      	cmp	r3, #5
 8005e7a:	d11d      	bne.n	8005eb8 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0203 	bic.w	r2, r2, #3
 8005e8a:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a0f      	ldr	r2, [pc, #60]	; (8005ed0 <HAL_I2S_DMAPause+0xbc>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d101      	bne.n	8005e9a <HAL_I2S_DMAPause+0x86>
 8005e96:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <HAL_I2S_DMAPause+0xc0>)
 8005e98:	e001      	b.n	8005e9e <HAL_I2S_DMAPause+0x8a>
 8005e9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	490a      	ldr	r1, [pc, #40]	; (8005ed0 <HAL_I2S_DMAPause+0xbc>)
 8005ea6:	428b      	cmp	r3, r1
 8005ea8:	d101      	bne.n	8005eae <HAL_I2S_DMAPause+0x9a>
 8005eaa:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <HAL_I2S_DMAPause+0xc0>)
 8005eac:	e001      	b.n	8005eb2 <HAL_I2S_DMAPause+0x9e>
 8005eae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005eb2:	f022 0203 	bic.w	r2, r2, #3
 8005eb6:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	40003800 	.word	0x40003800
 8005ed4:	40003400 	.word	0x40003400

08005ed8 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d101      	bne.n	8005ef0 <HAL_I2S_DMAResume+0x18>
 8005eec:	2302      	movs	r3, #2
 8005eee:	e07d      	b.n	8005fec <HAL_I2S_DMAResume+0x114>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	d108      	bne.n	8005f16 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0202 	orr.w	r2, r2, #2
 8005f12:	605a      	str	r2, [r3, #4]
 8005f14:	e056      	b.n	8005fc4 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d108      	bne.n	8005f34 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f042 0201 	orr.w	r2, r2, #1
 8005f30:	605a      	str	r2, [r3, #4]
 8005f32:	e047      	b.n	8005fc4 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b05      	cmp	r3, #5
 8005f3e:	d141      	bne.n	8005fc4 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0203 	orr.w	r2, r2, #3
 8005f4e:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a28      	ldr	r2, [pc, #160]	; (8005ff8 <HAL_I2S_DMAResume+0x120>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d101      	bne.n	8005f5e <HAL_I2S_DMAResume+0x86>
 8005f5a:	4b28      	ldr	r3, [pc, #160]	; (8005ffc <HAL_I2S_DMAResume+0x124>)
 8005f5c:	e001      	b.n	8005f62 <HAL_I2S_DMAResume+0x8a>
 8005f5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4923      	ldr	r1, [pc, #140]	; (8005ff8 <HAL_I2S_DMAResume+0x120>)
 8005f6a:	428b      	cmp	r3, r1
 8005f6c:	d101      	bne.n	8005f72 <HAL_I2S_DMAResume+0x9a>
 8005f6e:	4b23      	ldr	r3, [pc, #140]	; (8005ffc <HAL_I2S_DMAResume+0x124>)
 8005f70:	e001      	b.n	8005f76 <HAL_I2S_DMAResume+0x9e>
 8005f72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f76:	f042 0203 	orr.w	r2, r2, #3
 8005f7a:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a1d      	ldr	r2, [pc, #116]	; (8005ff8 <HAL_I2S_DMAResume+0x120>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d101      	bne.n	8005f8a <HAL_I2S_DMAResume+0xb2>
 8005f86:	4b1d      	ldr	r3, [pc, #116]	; (8005ffc <HAL_I2S_DMAResume+0x124>)
 8005f88:	e001      	b.n	8005f8e <HAL_I2S_DMAResume+0xb6>
 8005f8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d115      	bne.n	8005fc4 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a16      	ldr	r2, [pc, #88]	; (8005ff8 <HAL_I2S_DMAResume+0x120>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d101      	bne.n	8005fa6 <HAL_I2S_DMAResume+0xce>
 8005fa2:	4b16      	ldr	r3, [pc, #88]	; (8005ffc <HAL_I2S_DMAResume+0x124>)
 8005fa4:	e001      	b.n	8005faa <HAL_I2S_DMAResume+0xd2>
 8005fa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005faa:	69da      	ldr	r2, [r3, #28]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4911      	ldr	r1, [pc, #68]	; (8005ff8 <HAL_I2S_DMAResume+0x120>)
 8005fb2:	428b      	cmp	r3, r1
 8005fb4:	d101      	bne.n	8005fba <HAL_I2S_DMAResume+0xe2>
 8005fb6:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <HAL_I2S_DMAResume+0x124>)
 8005fb8:	e001      	b.n	8005fbe <HAL_I2S_DMAResume+0xe6>
 8005fba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fc2:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d107      	bne.n	8005fe2 <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69da      	ldr	r2, [r3, #28]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fe0:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	40003800 	.word	0x40003800
 8005ffc:	40003400 	.word	0x40003400

08006000 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006014:	d004      	beq.n	8006020 <HAL_I2S_DMAStop+0x20>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	f040 80d1 	bne.w	80061c2 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00f      	beq.n	8006048 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	4618      	mov	r0, r3
 800602e:	f7fc fb8d 	bl	800274c <HAL_DMA_Abort>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d007      	beq.n	8006048 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603c:	f043 0208 	orr.w	r2, r3, #8
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006048:	2364      	movs	r3, #100	; 0x64
 800604a:	2201      	movs	r2, #1
 800604c:	2102      	movs	r1, #2
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fb04 	bl	800665c <I2S_WaitFlagStateUntilTimeout>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00b      	beq.n	8006072 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605e:	f043 0201 	orr.w	r2, r3, #1
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006072:	2364      	movs	r3, #100	; 0x64
 8006074:	2200      	movs	r2, #0
 8006076:	2180      	movs	r1, #128	; 0x80
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 faef 	bl	800665c <I2S_WaitFlagStateUntilTimeout>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00b      	beq.n	800609c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006088:	f043 0201 	orr.w	r2, r3, #1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	69da      	ldr	r2, [r3, #28]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060aa:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80060ac:	2300      	movs	r3, #0
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	617b      	str	r3, [r7, #20]
 80060b8:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0202 	bic.w	r2, r2, #2
 80060c8:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b05      	cmp	r3, #5
 80060d4:	f040 8165 	bne.w	80063a2 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00f      	beq.n	8006100 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fc fb31 	bl	800274c <HAL_DMA_Abort>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d007      	beq.n	8006100 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f4:	f043 0208 	orr.w	r2, r3, #8
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a8a      	ldr	r2, [pc, #552]	; (8006330 <HAL_I2S_DMAStop+0x330>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d101      	bne.n	800610e <HAL_I2S_DMAStop+0x10e>
 800610a:	4b8a      	ldr	r3, [pc, #552]	; (8006334 <HAL_I2S_DMAStop+0x334>)
 800610c:	e001      	b.n	8006112 <HAL_I2S_DMAStop+0x112>
 800610e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006112:	69da      	ldr	r2, [r3, #28]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4985      	ldr	r1, [pc, #532]	; (8006330 <HAL_I2S_DMAStop+0x330>)
 800611a:	428b      	cmp	r3, r1
 800611c:	d101      	bne.n	8006122 <HAL_I2S_DMAStop+0x122>
 800611e:	4b85      	ldr	r3, [pc, #532]	; (8006334 <HAL_I2S_DMAStop+0x334>)
 8006120:	e001      	b.n	8006126 <HAL_I2S_DMAStop+0x126>
 8006122:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800612a:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 800612c:	2300      	movs	r3, #0
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a7e      	ldr	r2, [pc, #504]	; (8006330 <HAL_I2S_DMAStop+0x330>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d101      	bne.n	800613e <HAL_I2S_DMAStop+0x13e>
 800613a:	4b7e      	ldr	r3, [pc, #504]	; (8006334 <HAL_I2S_DMAStop+0x334>)
 800613c:	e001      	b.n	8006142 <HAL_I2S_DMAStop+0x142>
 800613e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	613b      	str	r3, [r7, #16]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a79      	ldr	r2, [pc, #484]	; (8006330 <HAL_I2S_DMAStop+0x330>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d101      	bne.n	8006154 <HAL_I2S_DMAStop+0x154>
 8006150:	4b78      	ldr	r3, [pc, #480]	; (8006334 <HAL_I2S_DMAStop+0x334>)
 8006152:	e001      	b.n	8006158 <HAL_I2S_DMAStop+0x158>
 8006154:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	613b      	str	r3, [r7, #16]
 800615c:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a73      	ldr	r2, [pc, #460]	; (8006330 <HAL_I2S_DMAStop+0x330>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d101      	bne.n	800616c <HAL_I2S_DMAStop+0x16c>
 8006168:	4b72      	ldr	r3, [pc, #456]	; (8006334 <HAL_I2S_DMAStop+0x334>)
 800616a:	e001      	b.n	8006170 <HAL_I2S_DMAStop+0x170>
 800616c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	496e      	ldr	r1, [pc, #440]	; (8006330 <HAL_I2S_DMAStop+0x330>)
 8006178:	428b      	cmp	r3, r1
 800617a:	d101      	bne.n	8006180 <HAL_I2S_DMAStop+0x180>
 800617c:	4b6d      	ldr	r3, [pc, #436]	; (8006334 <HAL_I2S_DMAStop+0x334>)
 800617e:	e001      	b.n	8006184 <HAL_I2S_DMAStop+0x184>
 8006180:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006184:	f022 0201 	bic.w	r2, r2, #1
 8006188:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10c      	bne.n	80061ac <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006196:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80061aa:	e0fa      	b.n	80063a2 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a5f      	ldr	r2, [pc, #380]	; (8006330 <HAL_I2S_DMAStop+0x330>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d101      	bne.n	80061ba <HAL_I2S_DMAStop+0x1ba>
 80061b6:	4b5f      	ldr	r3, [pc, #380]	; (8006334 <HAL_I2S_DMAStop+0x334>)
 80061b8:	e001      	b.n	80061be <HAL_I2S_DMAStop+0x1be>
 80061ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061be:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80061c0:	e0ef      	b.n	80063a2 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ca:	d005      	beq.n	80061d8 <HAL_I2S_DMAStop+0x1d8>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061d4:	f040 80e5 	bne.w	80063a2 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00f      	beq.n	8006200 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7fc fab1 	bl	800274c <HAL_DMA_Abort>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d007      	beq.n	8006200 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f4:	f043 0208 	orr.w	r2, r3, #8
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b05      	cmp	r3, #5
 800620a:	f040 809a 	bne.w	8006342 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00f      	beq.n	8006236 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	4618      	mov	r0, r3
 800621c:	f7fc fa96 	bl	800274c <HAL_DMA_Abort>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d007      	beq.n	8006236 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622a:	f043 0208 	orr.w	r2, r3, #8
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8006236:	f7fb ffe3 	bl	8002200 <HAL_GetTick>
 800623a:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800623c:	e012      	b.n	8006264 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800623e:	f7fb ffdf 	bl	8002200 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	2b64      	cmp	r3, #100	; 0x64
 800624a:	d90b      	bls.n	8006264 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006250:	f043 0201 	orr.w	r2, r3, #1
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a31      	ldr	r2, [pc, #196]	; (8006330 <HAL_I2S_DMAStop+0x330>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d101      	bne.n	8006272 <HAL_I2S_DMAStop+0x272>
 800626e:	4b31      	ldr	r3, [pc, #196]	; (8006334 <HAL_I2S_DMAStop+0x334>)
 8006270:	e001      	b.n	8006276 <HAL_I2S_DMAStop+0x276>
 8006272:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b02      	cmp	r3, #2
 800627e:	d1de      	bne.n	800623e <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006280:	e012      	b.n	80062a8 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006282:	f7fb ffbd 	bl	8002200 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	2b64      	cmp	r3, #100	; 0x64
 800628e:	d90b      	bls.n	80062a8 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006294:	f043 0201 	orr.w	r2, r3, #1
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a20      	ldr	r2, [pc, #128]	; (8006330 <HAL_I2S_DMAStop+0x330>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d101      	bne.n	80062b6 <HAL_I2S_DMAStop+0x2b6>
 80062b2:	4b20      	ldr	r3, [pc, #128]	; (8006334 <HAL_I2S_DMAStop+0x334>)
 80062b4:	e001      	b.n	80062ba <HAL_I2S_DMAStop+0x2ba>
 80062b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c0:	2b80      	cmp	r3, #128	; 0x80
 80062c2:	d0de      	beq.n	8006282 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a19      	ldr	r2, [pc, #100]	; (8006330 <HAL_I2S_DMAStop+0x330>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d101      	bne.n	80062d2 <HAL_I2S_DMAStop+0x2d2>
 80062ce:	4b19      	ldr	r3, [pc, #100]	; (8006334 <HAL_I2S_DMAStop+0x334>)
 80062d0:	e001      	b.n	80062d6 <HAL_I2S_DMAStop+0x2d6>
 80062d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062d6:	69da      	ldr	r2, [r3, #28]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4914      	ldr	r1, [pc, #80]	; (8006330 <HAL_I2S_DMAStop+0x330>)
 80062de:	428b      	cmp	r3, r1
 80062e0:	d101      	bne.n	80062e6 <HAL_I2S_DMAStop+0x2e6>
 80062e2:	4b14      	ldr	r3, [pc, #80]	; (8006334 <HAL_I2S_DMAStop+0x334>)
 80062e4:	e001      	b.n	80062ea <HAL_I2S_DMAStop+0x2ea>
 80062e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ee:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80062f0:	2300      	movs	r3, #0
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a0d      	ldr	r2, [pc, #52]	; (8006330 <HAL_I2S_DMAStop+0x330>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d101      	bne.n	8006302 <HAL_I2S_DMAStop+0x302>
 80062fe:	4b0d      	ldr	r3, [pc, #52]	; (8006334 <HAL_I2S_DMAStop+0x334>)
 8006300:	e001      	b.n	8006306 <HAL_I2S_DMAStop+0x306>
 8006302:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a07      	ldr	r2, [pc, #28]	; (8006330 <HAL_I2S_DMAStop+0x330>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d101      	bne.n	800631a <HAL_I2S_DMAStop+0x31a>
 8006316:	4b07      	ldr	r3, [pc, #28]	; (8006334 <HAL_I2S_DMAStop+0x334>)
 8006318:	e001      	b.n	800631e <HAL_I2S_DMAStop+0x31e>
 800631a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4902      	ldr	r1, [pc, #8]	; (8006330 <HAL_I2S_DMAStop+0x330>)
 8006326:	428b      	cmp	r3, r1
 8006328:	d106      	bne.n	8006338 <HAL_I2S_DMAStop+0x338>
 800632a:	4b02      	ldr	r3, [pc, #8]	; (8006334 <HAL_I2S_DMAStop+0x334>)
 800632c:	e006      	b.n	800633c <HAL_I2S_DMAStop+0x33c>
 800632e:	bf00      	nop
 8006330:	40003800 	.word	0x40003800
 8006334:	40003400 	.word	0x40003400
 8006338:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800633c:	f022 0202 	bic.w	r2, r2, #2
 8006340:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69da      	ldr	r2, [r3, #28]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006350:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006352:	2300      	movs	r3, #0
 8006354:	60bb      	str	r3, [r7, #8]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	60bb      	str	r3, [r7, #8]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	60bb      	str	r3, [r7, #8]
 8006366:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0201 	bic.w	r2, r2, #1
 8006376:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006380:	d10c      	bne.n	800639c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006386:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	77fb      	strb	r3, [r7, #31]
 800639a:	e002      	b.n	80063a2 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 80063aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3720      	adds	r7, #32
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063d6:	b2db      	uxtb	r3, r3
}
 80063d8:	4618      	mov	r0, r3
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10e      	bne.n	8006418 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0202 	bic.w	r2, r2, #2
 8006408:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f7fa f93f 	bl	800069c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800641e:	bf00      	nop
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b084      	sub	sp, #16
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006432:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f7fa f943 	bl	80006c0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800643a:	bf00      	nop
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0203 	bic.w	r2, r2, #3
 800645e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006478:	f043 0208 	orr.w	r2, r3, #8
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f7fa fa8d 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006486:	bf00      	nop
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	881a      	ldrh	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	1c9a      	adds	r2, r3, #2
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064be:	b29b      	uxth	r3, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10e      	bne.n	80064e2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064d2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7fa f8dd 	bl	800069c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80064e2:	bf00      	nop
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b082      	sub	sp, #8
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68da      	ldr	r2, [r3, #12]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	b292      	uxth	r2, r2
 80064fe:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006504:	1c9a      	adds	r2, r3, #2
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800650e:	b29b      	uxth	r3, r3
 8006510:	3b01      	subs	r3, #1
 8006512:	b29a      	uxth	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800651c:	b29b      	uxth	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10e      	bne.n	8006540 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006530:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff ff3a 	bl	80063b4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006540:	bf00      	nop
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b04      	cmp	r3, #4
 8006562:	d13a      	bne.n	80065da <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b01      	cmp	r3, #1
 800656c:	d109      	bne.n	8006582 <I2S_IRQHandler+0x3a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006578:	2b40      	cmp	r3, #64	; 0x40
 800657a:	d102      	bne.n	8006582 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7ff ffb4 	bl	80064ea <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006588:	2b40      	cmp	r3, #64	; 0x40
 800658a:	d126      	bne.n	80065da <I2S_IRQHandler+0x92>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b20      	cmp	r3, #32
 8006598:	d11f      	bne.n	80065da <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065a8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80065aa:	2300      	movs	r3, #0
 80065ac:	613b      	str	r3, [r7, #16]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	613b      	str	r3, [r7, #16]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	613b      	str	r3, [r7, #16]
 80065be:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065cc:	f043 0202 	orr.w	r2, r3, #2
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7fa f9e3 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d136      	bne.n	8006654 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d109      	bne.n	8006604 <I2S_IRQHandler+0xbc>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fa:	2b80      	cmp	r3, #128	; 0x80
 80065fc:	d102      	bne.n	8006604 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7ff ff45 	bl	800648e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f003 0308 	and.w	r3, r3, #8
 800660a:	2b08      	cmp	r3, #8
 800660c:	d122      	bne.n	8006654 <I2S_IRQHandler+0x10c>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f003 0320 	and.w	r3, r3, #32
 8006618:	2b20      	cmp	r3, #32
 800661a:	d11b      	bne.n	8006654 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800662a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800662c:	2300      	movs	r3, #0
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006646:	f043 0204 	orr.w	r2, r3, #4
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fa f9a6 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006654:	bf00      	nop
 8006656:	3718      	adds	r7, #24
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	603b      	str	r3, [r7, #0]
 8006668:	4613      	mov	r3, r2
 800666a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800666c:	f7fb fdc8 	bl	8002200 <HAL_GetTick>
 8006670:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006672:	e018      	b.n	80066a6 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667a:	d014      	beq.n	80066a6 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800667c:	f7fb fdc0 	bl	8002200 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	429a      	cmp	r2, r3
 800668a:	d902      	bls.n	8006692 <I2S_WaitFlagStateUntilTimeout+0x36>
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d109      	bne.n	80066a6 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e00f      	b.n	80066c6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	4013      	ands	r3, r2
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	bf0c      	ite	eq
 80066b6:	2301      	moveq	r3, #1
 80066b8:	2300      	movne	r3, #0
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	79fb      	ldrb	r3, [r7, #7]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d1d7      	bne.n	8006674 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a92      	ldr	r2, [pc, #584]	; (8006930 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d101      	bne.n	80066ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80066ea:	4b92      	ldr	r3, [pc, #584]	; (8006934 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80066ec:	e001      	b.n	80066f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80066ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a8b      	ldr	r2, [pc, #556]	; (8006930 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d101      	bne.n	800670c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006708:	4b8a      	ldr	r3, [pc, #552]	; (8006934 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800670a:	e001      	b.n	8006710 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800670c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800671c:	d004      	beq.n	8006728 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	f040 8099 	bne.w	800685a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b02      	cmp	r3, #2
 8006730:	d107      	bne.n	8006742 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f925 	bl	800698c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b01      	cmp	r3, #1
 800674a:	d107      	bne.n	800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f9c8 	bl	8006aec <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006762:	2b40      	cmp	r3, #64	; 0x40
 8006764:	d13a      	bne.n	80067dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f003 0320 	and.w	r3, r3, #32
 800676c:	2b00      	cmp	r3, #0
 800676e:	d035      	beq.n	80067dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a6e      	ldr	r2, [pc, #440]	; (8006930 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d101      	bne.n	800677e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800677a:	4b6e      	ldr	r3, [pc, #440]	; (8006934 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800677c:	e001      	b.n	8006782 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800677e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4969      	ldr	r1, [pc, #420]	; (8006930 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800678a:	428b      	cmp	r3, r1
 800678c:	d101      	bne.n	8006792 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800678e:	4b69      	ldr	r3, [pc, #420]	; (8006934 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006790:	e001      	b.n	8006796 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006792:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006796:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800679a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067aa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80067ac:	2300      	movs	r3, #0
 80067ae:	60fb      	str	r3, [r7, #12]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ce:	f043 0202 	orr.w	r2, r3, #2
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7fa f8e2 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	f003 0308 	and.w	r3, r3, #8
 80067e2:	2b08      	cmp	r3, #8
 80067e4:	f040 80c3 	bne.w	800696e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f000 80bd 	beq.w	800696e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006802:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a49      	ldr	r2, [pc, #292]	; (8006930 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d101      	bne.n	8006812 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800680e:	4b49      	ldr	r3, [pc, #292]	; (8006934 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006810:	e001      	b.n	8006816 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006812:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4944      	ldr	r1, [pc, #272]	; (8006930 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800681e:	428b      	cmp	r3, r1
 8006820:	d101      	bne.n	8006826 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006822:	4b44      	ldr	r3, [pc, #272]	; (8006934 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006824:	e001      	b.n	800682a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006826:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800682a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800682e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006830:	2300      	movs	r3, #0
 8006832:	60bb      	str	r3, [r7, #8]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	60bb      	str	r3, [r7, #8]
 800683c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684a:	f043 0204 	orr.w	r2, r3, #4
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7fa f8a4 	bl	80009a0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006858:	e089      	b.n	800696e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b02      	cmp	r3, #2
 8006862:	d107      	bne.n	8006874 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f8be 	bl	80069f0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b01      	cmp	r3, #1
 800687c:	d107      	bne.n	800688e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f8fd 	bl	8006a88 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006894:	2b40      	cmp	r3, #64	; 0x40
 8006896:	d12f      	bne.n	80068f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d02a      	beq.n	80068f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068b0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a1e      	ldr	r2, [pc, #120]	; (8006930 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d101      	bne.n	80068c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80068bc:	4b1d      	ldr	r3, [pc, #116]	; (8006934 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068be:	e001      	b.n	80068c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80068c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4919      	ldr	r1, [pc, #100]	; (8006930 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068cc:	428b      	cmp	r3, r1
 80068ce:	d101      	bne.n	80068d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80068d0:	4b18      	ldr	r3, [pc, #96]	; (8006934 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068d2:	e001      	b.n	80068d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80068d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80068dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ea:	f043 0202 	orr.w	r2, r3, #2
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7fa f854 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	f003 0308 	and.w	r3, r3, #8
 80068fe:	2b08      	cmp	r3, #8
 8006900:	d136      	bne.n	8006970 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f003 0320 	and.w	r3, r3, #32
 8006908:	2b00      	cmp	r3, #0
 800690a:	d031      	beq.n	8006970 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a07      	ldr	r2, [pc, #28]	; (8006930 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d101      	bne.n	800691a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006916:	4b07      	ldr	r3, [pc, #28]	; (8006934 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006918:	e001      	b.n	800691e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800691a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4902      	ldr	r1, [pc, #8]	; (8006930 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006926:	428b      	cmp	r3, r1
 8006928:	d106      	bne.n	8006938 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800692a:	4b02      	ldr	r3, [pc, #8]	; (8006934 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800692c:	e006      	b.n	800693c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800692e:	bf00      	nop
 8006930:	40003800 	.word	0x40003800
 8006934:	40003400 	.word	0x40003400
 8006938:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800693c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006940:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006950:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695e:	f043 0204 	orr.w	r2, r3, #4
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7fa f81a 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800696c:	e000      	b.n	8006970 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800696e:	bf00      	nop
}
 8006970:	bf00      	nop
 8006972:	3720      	adds	r7, #32
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	1c99      	adds	r1, r3, #2
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6251      	str	r1, [r2, #36]	; 0x24
 800699e:	881a      	ldrh	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	3b01      	subs	r3, #1
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d113      	bne.n	80069e6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d106      	bne.n	80069e6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7ff ffc9 	bl	8006978 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80069e6:	bf00      	nop
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fc:	1c99      	adds	r1, r3, #2
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6251      	str	r1, [r2, #36]	; 0x24
 8006a02:	8819      	ldrh	r1, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a1d      	ldr	r2, [pc, #116]	; (8006a80 <I2SEx_TxISR_I2SExt+0x90>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d101      	bne.n	8006a12 <I2SEx_TxISR_I2SExt+0x22>
 8006a0e:	4b1d      	ldr	r3, [pc, #116]	; (8006a84 <I2SEx_TxISR_I2SExt+0x94>)
 8006a10:	e001      	b.n	8006a16 <I2SEx_TxISR_I2SExt+0x26>
 8006a12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a16:	460a      	mov	r2, r1
 8006a18:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	3b01      	subs	r3, #1
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d121      	bne.n	8006a76 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a12      	ldr	r2, [pc, #72]	; (8006a80 <I2SEx_TxISR_I2SExt+0x90>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d101      	bne.n	8006a40 <I2SEx_TxISR_I2SExt+0x50>
 8006a3c:	4b11      	ldr	r3, [pc, #68]	; (8006a84 <I2SEx_TxISR_I2SExt+0x94>)
 8006a3e:	e001      	b.n	8006a44 <I2SEx_TxISR_I2SExt+0x54>
 8006a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	490d      	ldr	r1, [pc, #52]	; (8006a80 <I2SEx_TxISR_I2SExt+0x90>)
 8006a4c:	428b      	cmp	r3, r1
 8006a4e:	d101      	bne.n	8006a54 <I2SEx_TxISR_I2SExt+0x64>
 8006a50:	4b0c      	ldr	r3, [pc, #48]	; (8006a84 <I2SEx_TxISR_I2SExt+0x94>)
 8006a52:	e001      	b.n	8006a58 <I2SEx_TxISR_I2SExt+0x68>
 8006a54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a5c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d106      	bne.n	8006a76 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff ff81 	bl	8006978 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a76:	bf00      	nop
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	40003800 	.word	0x40003800
 8006a84:	40003400 	.word	0x40003400

08006a88 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68d8      	ldr	r0, [r3, #12]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9a:	1c99      	adds	r1, r3, #2
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006aa0:	b282      	uxth	r2, r0
 8006aa2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d113      	bne.n	8006ae4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006aca:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d106      	bne.n	8006ae4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff ff4a 	bl	8006978 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006ae4:	bf00      	nop
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a20      	ldr	r2, [pc, #128]	; (8006b7c <I2SEx_RxISR_I2SExt+0x90>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d101      	bne.n	8006b02 <I2SEx_RxISR_I2SExt+0x16>
 8006afe:	4b20      	ldr	r3, [pc, #128]	; (8006b80 <I2SEx_RxISR_I2SExt+0x94>)
 8006b00:	e001      	b.n	8006b06 <I2SEx_RxISR_I2SExt+0x1a>
 8006b02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b06:	68d8      	ldr	r0, [r3, #12]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0c:	1c99      	adds	r1, r3, #2
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006b12:	b282      	uxth	r2, r0
 8006b14:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d121      	bne.n	8006b72 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a12      	ldr	r2, [pc, #72]	; (8006b7c <I2SEx_RxISR_I2SExt+0x90>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d101      	bne.n	8006b3c <I2SEx_RxISR_I2SExt+0x50>
 8006b38:	4b11      	ldr	r3, [pc, #68]	; (8006b80 <I2SEx_RxISR_I2SExt+0x94>)
 8006b3a:	e001      	b.n	8006b40 <I2SEx_RxISR_I2SExt+0x54>
 8006b3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	490d      	ldr	r1, [pc, #52]	; (8006b7c <I2SEx_RxISR_I2SExt+0x90>)
 8006b48:	428b      	cmp	r3, r1
 8006b4a:	d101      	bne.n	8006b50 <I2SEx_RxISR_I2SExt+0x64>
 8006b4c:	4b0c      	ldr	r3, [pc, #48]	; (8006b80 <I2SEx_RxISR_I2SExt+0x94>)
 8006b4e:	e001      	b.n	8006b54 <I2SEx_RxISR_I2SExt+0x68>
 8006b50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b58:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d106      	bne.n	8006b72 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7ff ff03 	bl	8006978 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b72:	bf00      	nop
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	40003800 	.word	0x40003800
 8006b80:	40003400 	.word	0x40003400

08006b84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e267      	b.n	8007066 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d075      	beq.n	8006c8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ba2:	4b88      	ldr	r3, [pc, #544]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 030c 	and.w	r3, r3, #12
 8006baa:	2b04      	cmp	r3, #4
 8006bac:	d00c      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bae:	4b85      	ldr	r3, [pc, #532]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bb6:	2b08      	cmp	r3, #8
 8006bb8:	d112      	bne.n	8006be0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bba:	4b82      	ldr	r3, [pc, #520]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bc6:	d10b      	bne.n	8006be0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bc8:	4b7e      	ldr	r3, [pc, #504]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d05b      	beq.n	8006c8c <HAL_RCC_OscConfig+0x108>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d157      	bne.n	8006c8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e242      	b.n	8007066 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006be8:	d106      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x74>
 8006bea:	4b76      	ldr	r3, [pc, #472]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a75      	ldr	r2, [pc, #468]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	e01d      	b.n	8006c34 <HAL_RCC_OscConfig+0xb0>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c00:	d10c      	bne.n	8006c1c <HAL_RCC_OscConfig+0x98>
 8006c02:	4b70      	ldr	r3, [pc, #448]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a6f      	ldr	r2, [pc, #444]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c0c:	6013      	str	r3, [r2, #0]
 8006c0e:	4b6d      	ldr	r3, [pc, #436]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a6c      	ldr	r2, [pc, #432]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c18:	6013      	str	r3, [r2, #0]
 8006c1a:	e00b      	b.n	8006c34 <HAL_RCC_OscConfig+0xb0>
 8006c1c:	4b69      	ldr	r3, [pc, #420]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a68      	ldr	r2, [pc, #416]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c26:	6013      	str	r3, [r2, #0]
 8006c28:	4b66      	ldr	r3, [pc, #408]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a65      	ldr	r2, [pc, #404]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d013      	beq.n	8006c64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c3c:	f7fb fae0 	bl	8002200 <HAL_GetTick>
 8006c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c42:	e008      	b.n	8006c56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c44:	f7fb fadc 	bl	8002200 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b64      	cmp	r3, #100	; 0x64
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e207      	b.n	8007066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c56:	4b5b      	ldr	r3, [pc, #364]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0f0      	beq.n	8006c44 <HAL_RCC_OscConfig+0xc0>
 8006c62:	e014      	b.n	8006c8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c64:	f7fb facc 	bl	8002200 <HAL_GetTick>
 8006c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c6a:	e008      	b.n	8006c7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c6c:	f7fb fac8 	bl	8002200 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	2b64      	cmp	r3, #100	; 0x64
 8006c78:	d901      	bls.n	8006c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e1f3      	b.n	8007066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c7e:	4b51      	ldr	r3, [pc, #324]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1f0      	bne.n	8006c6c <HAL_RCC_OscConfig+0xe8>
 8006c8a:	e000      	b.n	8006c8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d063      	beq.n	8006d62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c9a:	4b4a      	ldr	r3, [pc, #296]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 030c 	and.w	r3, r3, #12
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00b      	beq.n	8006cbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ca6:	4b47      	ldr	r3, [pc, #284]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006cae:	2b08      	cmp	r3, #8
 8006cb0:	d11c      	bne.n	8006cec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cb2:	4b44      	ldr	r3, [pc, #272]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d116      	bne.n	8006cec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cbe:	4b41      	ldr	r3, [pc, #260]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x152>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d001      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e1c7      	b.n	8007066 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cd6:	4b3b      	ldr	r3, [pc, #236]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	4937      	ldr	r1, [pc, #220]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cea:	e03a      	b.n	8006d62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d020      	beq.n	8006d36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cf4:	4b34      	ldr	r3, [pc, #208]	; (8006dc8 <HAL_RCC_OscConfig+0x244>)
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cfa:	f7fb fa81 	bl	8002200 <HAL_GetTick>
 8006cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d00:	e008      	b.n	8006d14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d02:	f7fb fa7d 	bl	8002200 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d901      	bls.n	8006d14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e1a8      	b.n	8007066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d14:	4b2b      	ldr	r3, [pc, #172]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d0f0      	beq.n	8006d02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d20:	4b28      	ldr	r3, [pc, #160]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	00db      	lsls	r3, r3, #3
 8006d2e:	4925      	ldr	r1, [pc, #148]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	600b      	str	r3, [r1, #0]
 8006d34:	e015      	b.n	8006d62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d36:	4b24      	ldr	r3, [pc, #144]	; (8006dc8 <HAL_RCC_OscConfig+0x244>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d3c:	f7fb fa60 	bl	8002200 <HAL_GetTick>
 8006d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d42:	e008      	b.n	8006d56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d44:	f7fb fa5c 	bl	8002200 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e187      	b.n	8007066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d56:	4b1b      	ldr	r3, [pc, #108]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1f0      	bne.n	8006d44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0308 	and.w	r3, r3, #8
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d036      	beq.n	8006ddc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d016      	beq.n	8006da4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d76:	4b15      	ldr	r3, [pc, #84]	; (8006dcc <HAL_RCC_OscConfig+0x248>)
 8006d78:	2201      	movs	r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d7c:	f7fb fa40 	bl	8002200 <HAL_GetTick>
 8006d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d82:	e008      	b.n	8006d96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d84:	f7fb fa3c 	bl	8002200 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d901      	bls.n	8006d96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e167      	b.n	8007066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d96:	4b0b      	ldr	r3, [pc, #44]	; (8006dc4 <HAL_RCC_OscConfig+0x240>)
 8006d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d0f0      	beq.n	8006d84 <HAL_RCC_OscConfig+0x200>
 8006da2:	e01b      	b.n	8006ddc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006da4:	4b09      	ldr	r3, [pc, #36]	; (8006dcc <HAL_RCC_OscConfig+0x248>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006daa:	f7fb fa29 	bl	8002200 <HAL_GetTick>
 8006dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006db0:	e00e      	b.n	8006dd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006db2:	f7fb fa25 	bl	8002200 <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d907      	bls.n	8006dd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e150      	b.n	8007066 <HAL_RCC_OscConfig+0x4e2>
 8006dc4:	40023800 	.word	0x40023800
 8006dc8:	42470000 	.word	0x42470000
 8006dcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dd0:	4b88      	ldr	r3, [pc, #544]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1ea      	bne.n	8006db2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 8097 	beq.w	8006f18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dea:	2300      	movs	r3, #0
 8006dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dee:	4b81      	ldr	r3, [pc, #516]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10f      	bne.n	8006e1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60bb      	str	r3, [r7, #8]
 8006dfe:	4b7d      	ldr	r3, [pc, #500]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e02:	4a7c      	ldr	r2, [pc, #496]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e08:	6413      	str	r3, [r2, #64]	; 0x40
 8006e0a:	4b7a      	ldr	r3, [pc, #488]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e12:	60bb      	str	r3, [r7, #8]
 8006e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e16:	2301      	movs	r3, #1
 8006e18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e1a:	4b77      	ldr	r3, [pc, #476]	; (8006ff8 <HAL_RCC_OscConfig+0x474>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d118      	bne.n	8006e58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e26:	4b74      	ldr	r3, [pc, #464]	; (8006ff8 <HAL_RCC_OscConfig+0x474>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a73      	ldr	r2, [pc, #460]	; (8006ff8 <HAL_RCC_OscConfig+0x474>)
 8006e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e32:	f7fb f9e5 	bl	8002200 <HAL_GetTick>
 8006e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e38:	e008      	b.n	8006e4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e3a:	f7fb f9e1 	bl	8002200 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e10c      	b.n	8007066 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e4c:	4b6a      	ldr	r3, [pc, #424]	; (8006ff8 <HAL_RCC_OscConfig+0x474>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d0f0      	beq.n	8006e3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d106      	bne.n	8006e6e <HAL_RCC_OscConfig+0x2ea>
 8006e60:	4b64      	ldr	r3, [pc, #400]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e64:	4a63      	ldr	r2, [pc, #396]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006e66:	f043 0301 	orr.w	r3, r3, #1
 8006e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e6c:	e01c      	b.n	8006ea8 <HAL_RCC_OscConfig+0x324>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	2b05      	cmp	r3, #5
 8006e74:	d10c      	bne.n	8006e90 <HAL_RCC_OscConfig+0x30c>
 8006e76:	4b5f      	ldr	r3, [pc, #380]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7a:	4a5e      	ldr	r2, [pc, #376]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006e7c:	f043 0304 	orr.w	r3, r3, #4
 8006e80:	6713      	str	r3, [r2, #112]	; 0x70
 8006e82:	4b5c      	ldr	r3, [pc, #368]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e86:	4a5b      	ldr	r2, [pc, #364]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006e88:	f043 0301 	orr.w	r3, r3, #1
 8006e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e8e:	e00b      	b.n	8006ea8 <HAL_RCC_OscConfig+0x324>
 8006e90:	4b58      	ldr	r3, [pc, #352]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e94:	4a57      	ldr	r2, [pc, #348]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006e96:	f023 0301 	bic.w	r3, r3, #1
 8006e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e9c:	4b55      	ldr	r3, [pc, #340]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea0:	4a54      	ldr	r2, [pc, #336]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006ea2:	f023 0304 	bic.w	r3, r3, #4
 8006ea6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d015      	beq.n	8006edc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eb0:	f7fb f9a6 	bl	8002200 <HAL_GetTick>
 8006eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eb6:	e00a      	b.n	8006ece <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eb8:	f7fb f9a2 	bl	8002200 <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d901      	bls.n	8006ece <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e0cb      	b.n	8007066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ece:	4b49      	ldr	r3, [pc, #292]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0ee      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x334>
 8006eda:	e014      	b.n	8006f06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006edc:	f7fb f990 	bl	8002200 <HAL_GetTick>
 8006ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ee2:	e00a      	b.n	8006efa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ee4:	f7fb f98c 	bl	8002200 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e0b5      	b.n	8007066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006efa:	4b3e      	ldr	r3, [pc, #248]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1ee      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f06:	7dfb      	ldrb	r3, [r7, #23]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d105      	bne.n	8006f18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f0c:	4b39      	ldr	r3, [pc, #228]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f10:	4a38      	ldr	r2, [pc, #224]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 80a1 	beq.w	8007064 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f22:	4b34      	ldr	r3, [pc, #208]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f003 030c 	and.w	r3, r3, #12
 8006f2a:	2b08      	cmp	r3, #8
 8006f2c:	d05c      	beq.n	8006fe8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d141      	bne.n	8006fba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f36:	4b31      	ldr	r3, [pc, #196]	; (8006ffc <HAL_RCC_OscConfig+0x478>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f3c:	f7fb f960 	bl	8002200 <HAL_GetTick>
 8006f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f42:	e008      	b.n	8006f56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f44:	f7fb f95c 	bl	8002200 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d901      	bls.n	8006f56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e087      	b.n	8007066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f56:	4b27      	ldr	r3, [pc, #156]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1f0      	bne.n	8006f44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	69da      	ldr	r2, [r3, #28]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f70:	019b      	lsls	r3, r3, #6
 8006f72:	431a      	orrs	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f78:	085b      	lsrs	r3, r3, #1
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	041b      	lsls	r3, r3, #16
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f84:	061b      	lsls	r3, r3, #24
 8006f86:	491b      	ldr	r1, [pc, #108]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f8c:	4b1b      	ldr	r3, [pc, #108]	; (8006ffc <HAL_RCC_OscConfig+0x478>)
 8006f8e:	2201      	movs	r2, #1
 8006f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f92:	f7fb f935 	bl	8002200 <HAL_GetTick>
 8006f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f98:	e008      	b.n	8006fac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f9a:	f7fb f931 	bl	8002200 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d901      	bls.n	8006fac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e05c      	b.n	8007066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fac:	4b11      	ldr	r3, [pc, #68]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0f0      	beq.n	8006f9a <HAL_RCC_OscConfig+0x416>
 8006fb8:	e054      	b.n	8007064 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fba:	4b10      	ldr	r3, [pc, #64]	; (8006ffc <HAL_RCC_OscConfig+0x478>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fc0:	f7fb f91e 	bl	8002200 <HAL_GetTick>
 8006fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fc6:	e008      	b.n	8006fda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fc8:	f7fb f91a 	bl	8002200 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d901      	bls.n	8006fda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e045      	b.n	8007066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fda:	4b06      	ldr	r3, [pc, #24]	; (8006ff4 <HAL_RCC_OscConfig+0x470>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1f0      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x444>
 8006fe6:	e03d      	b.n	8007064 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d107      	bne.n	8007000 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e038      	b.n	8007066 <HAL_RCC_OscConfig+0x4e2>
 8006ff4:	40023800 	.word	0x40023800
 8006ff8:	40007000 	.word	0x40007000
 8006ffc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007000:	4b1b      	ldr	r3, [pc, #108]	; (8007070 <HAL_RCC_OscConfig+0x4ec>)
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d028      	beq.n	8007060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007018:	429a      	cmp	r2, r3
 800701a:	d121      	bne.n	8007060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007026:	429a      	cmp	r2, r3
 8007028:	d11a      	bne.n	8007060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007030:	4013      	ands	r3, r2
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007036:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007038:	4293      	cmp	r3, r2
 800703a:	d111      	bne.n	8007060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007046:	085b      	lsrs	r3, r3, #1
 8007048:	3b01      	subs	r3, #1
 800704a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800704c:	429a      	cmp	r2, r3
 800704e:	d107      	bne.n	8007060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800705c:	429a      	cmp	r2, r3
 800705e:	d001      	beq.n	8007064 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e000      	b.n	8007066 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3718      	adds	r7, #24
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	40023800 	.word	0x40023800

08007074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e0cc      	b.n	8007222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007088:	4b68      	ldr	r3, [pc, #416]	; (800722c <HAL_RCC_ClockConfig+0x1b8>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0307 	and.w	r3, r3, #7
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	429a      	cmp	r2, r3
 8007094:	d90c      	bls.n	80070b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007096:	4b65      	ldr	r3, [pc, #404]	; (800722c <HAL_RCC_ClockConfig+0x1b8>)
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800709e:	4b63      	ldr	r3, [pc, #396]	; (800722c <HAL_RCC_ClockConfig+0x1b8>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d001      	beq.n	80070b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e0b8      	b.n	8007222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d020      	beq.n	80070fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070c8:	4b59      	ldr	r3, [pc, #356]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	4a58      	ldr	r2, [pc, #352]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 80070ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0308 	and.w	r3, r3, #8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d005      	beq.n	80070ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070e0:	4b53      	ldr	r3, [pc, #332]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	4a52      	ldr	r2, [pc, #328]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 80070e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070ec:	4b50      	ldr	r3, [pc, #320]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	494d      	ldr	r1, [pc, #308]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	d044      	beq.n	8007194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d107      	bne.n	8007122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007112:	4b47      	ldr	r3, [pc, #284]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d119      	bne.n	8007152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e07f      	b.n	8007222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	2b02      	cmp	r3, #2
 8007128:	d003      	beq.n	8007132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800712e:	2b03      	cmp	r3, #3
 8007130:	d107      	bne.n	8007142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007132:	4b3f      	ldr	r3, [pc, #252]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d109      	bne.n	8007152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e06f      	b.n	8007222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007142:	4b3b      	ldr	r3, [pc, #236]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e067      	b.n	8007222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007152:	4b37      	ldr	r3, [pc, #220]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f023 0203 	bic.w	r2, r3, #3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	4934      	ldr	r1, [pc, #208]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 8007160:	4313      	orrs	r3, r2
 8007162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007164:	f7fb f84c 	bl	8002200 <HAL_GetTick>
 8007168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800716a:	e00a      	b.n	8007182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800716c:	f7fb f848 	bl	8002200 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	f241 3288 	movw	r2, #5000	; 0x1388
 800717a:	4293      	cmp	r3, r2
 800717c:	d901      	bls.n	8007182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e04f      	b.n	8007222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007182:	4b2b      	ldr	r3, [pc, #172]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f003 020c 	and.w	r2, r3, #12
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	429a      	cmp	r2, r3
 8007192:	d1eb      	bne.n	800716c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007194:	4b25      	ldr	r3, [pc, #148]	; (800722c <HAL_RCC_ClockConfig+0x1b8>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0307 	and.w	r3, r3, #7
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d20c      	bcs.n	80071bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071a2:	4b22      	ldr	r3, [pc, #136]	; (800722c <HAL_RCC_ClockConfig+0x1b8>)
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	b2d2      	uxtb	r2, r2
 80071a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071aa:	4b20      	ldr	r3, [pc, #128]	; (800722c <HAL_RCC_ClockConfig+0x1b8>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0307 	and.w	r3, r3, #7
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d001      	beq.n	80071bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e032      	b.n	8007222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d008      	beq.n	80071da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071c8:	4b19      	ldr	r3, [pc, #100]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	4916      	ldr	r1, [pc, #88]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0308 	and.w	r3, r3, #8
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d009      	beq.n	80071fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071e6:	4b12      	ldr	r3, [pc, #72]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	00db      	lsls	r3, r3, #3
 80071f4:	490e      	ldr	r1, [pc, #56]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071fa:	f000 f821 	bl	8007240 <HAL_RCC_GetSysClockFreq>
 80071fe:	4602      	mov	r2, r0
 8007200:	4b0b      	ldr	r3, [pc, #44]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	091b      	lsrs	r3, r3, #4
 8007206:	f003 030f 	and.w	r3, r3, #15
 800720a:	490a      	ldr	r1, [pc, #40]	; (8007234 <HAL_RCC_ClockConfig+0x1c0>)
 800720c:	5ccb      	ldrb	r3, [r1, r3]
 800720e:	fa22 f303 	lsr.w	r3, r2, r3
 8007212:	4a09      	ldr	r2, [pc, #36]	; (8007238 <HAL_RCC_ClockConfig+0x1c4>)
 8007214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007216:	4b09      	ldr	r3, [pc, #36]	; (800723c <HAL_RCC_ClockConfig+0x1c8>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f7fa ffac 	bl	8002178 <HAL_InitTick>

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	40023c00 	.word	0x40023c00
 8007230:	40023800 	.word	0x40023800
 8007234:	0800f9e4 	.word	0x0800f9e4
 8007238:	20000038 	.word	0x20000038
 800723c:	20000040 	.word	0x20000040

08007240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007244:	b094      	sub	sp, #80	; 0x50
 8007246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007248:	2300      	movs	r3, #0
 800724a:	647b      	str	r3, [r7, #68]	; 0x44
 800724c:	2300      	movs	r3, #0
 800724e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007250:	2300      	movs	r3, #0
 8007252:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007258:	4b79      	ldr	r3, [pc, #484]	; (8007440 <HAL_RCC_GetSysClockFreq+0x200>)
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f003 030c 	and.w	r3, r3, #12
 8007260:	2b08      	cmp	r3, #8
 8007262:	d00d      	beq.n	8007280 <HAL_RCC_GetSysClockFreq+0x40>
 8007264:	2b08      	cmp	r3, #8
 8007266:	f200 80e1 	bhi.w	800742c <HAL_RCC_GetSysClockFreq+0x1ec>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <HAL_RCC_GetSysClockFreq+0x34>
 800726e:	2b04      	cmp	r3, #4
 8007270:	d003      	beq.n	800727a <HAL_RCC_GetSysClockFreq+0x3a>
 8007272:	e0db      	b.n	800742c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007274:	4b73      	ldr	r3, [pc, #460]	; (8007444 <HAL_RCC_GetSysClockFreq+0x204>)
 8007276:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007278:	e0db      	b.n	8007432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800727a:	4b73      	ldr	r3, [pc, #460]	; (8007448 <HAL_RCC_GetSysClockFreq+0x208>)
 800727c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800727e:	e0d8      	b.n	8007432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007280:	4b6f      	ldr	r3, [pc, #444]	; (8007440 <HAL_RCC_GetSysClockFreq+0x200>)
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007288:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800728a:	4b6d      	ldr	r3, [pc, #436]	; (8007440 <HAL_RCC_GetSysClockFreq+0x200>)
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d063      	beq.n	800735e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007296:	4b6a      	ldr	r3, [pc, #424]	; (8007440 <HAL_RCC_GetSysClockFreq+0x200>)
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	099b      	lsrs	r3, r3, #6
 800729c:	2200      	movs	r2, #0
 800729e:	63bb      	str	r3, [r7, #56]	; 0x38
 80072a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80072a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a8:	633b      	str	r3, [r7, #48]	; 0x30
 80072aa:	2300      	movs	r3, #0
 80072ac:	637b      	str	r3, [r7, #52]	; 0x34
 80072ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80072b2:	4622      	mov	r2, r4
 80072b4:	462b      	mov	r3, r5
 80072b6:	f04f 0000 	mov.w	r0, #0
 80072ba:	f04f 0100 	mov.w	r1, #0
 80072be:	0159      	lsls	r1, r3, #5
 80072c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072c4:	0150      	lsls	r0, r2, #5
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	4621      	mov	r1, r4
 80072cc:	1a51      	subs	r1, r2, r1
 80072ce:	6139      	str	r1, [r7, #16]
 80072d0:	4629      	mov	r1, r5
 80072d2:	eb63 0301 	sbc.w	r3, r3, r1
 80072d6:	617b      	str	r3, [r7, #20]
 80072d8:	f04f 0200 	mov.w	r2, #0
 80072dc:	f04f 0300 	mov.w	r3, #0
 80072e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072e4:	4659      	mov	r1, fp
 80072e6:	018b      	lsls	r3, r1, #6
 80072e8:	4651      	mov	r1, sl
 80072ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80072ee:	4651      	mov	r1, sl
 80072f0:	018a      	lsls	r2, r1, #6
 80072f2:	4651      	mov	r1, sl
 80072f4:	ebb2 0801 	subs.w	r8, r2, r1
 80072f8:	4659      	mov	r1, fp
 80072fa:	eb63 0901 	sbc.w	r9, r3, r1
 80072fe:	f04f 0200 	mov.w	r2, #0
 8007302:	f04f 0300 	mov.w	r3, #0
 8007306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800730a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800730e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007312:	4690      	mov	r8, r2
 8007314:	4699      	mov	r9, r3
 8007316:	4623      	mov	r3, r4
 8007318:	eb18 0303 	adds.w	r3, r8, r3
 800731c:	60bb      	str	r3, [r7, #8]
 800731e:	462b      	mov	r3, r5
 8007320:	eb49 0303 	adc.w	r3, r9, r3
 8007324:	60fb      	str	r3, [r7, #12]
 8007326:	f04f 0200 	mov.w	r2, #0
 800732a:	f04f 0300 	mov.w	r3, #0
 800732e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007332:	4629      	mov	r1, r5
 8007334:	024b      	lsls	r3, r1, #9
 8007336:	4621      	mov	r1, r4
 8007338:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800733c:	4621      	mov	r1, r4
 800733e:	024a      	lsls	r2, r1, #9
 8007340:	4610      	mov	r0, r2
 8007342:	4619      	mov	r1, r3
 8007344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007346:	2200      	movs	r2, #0
 8007348:	62bb      	str	r3, [r7, #40]	; 0x28
 800734a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800734c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007350:	f7f8 ff42 	bl	80001d8 <__aeabi_uldivmod>
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	4613      	mov	r3, r2
 800735a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800735c:	e058      	b.n	8007410 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800735e:	4b38      	ldr	r3, [pc, #224]	; (8007440 <HAL_RCC_GetSysClockFreq+0x200>)
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	099b      	lsrs	r3, r3, #6
 8007364:	2200      	movs	r2, #0
 8007366:	4618      	mov	r0, r3
 8007368:	4611      	mov	r1, r2
 800736a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800736e:	623b      	str	r3, [r7, #32]
 8007370:	2300      	movs	r3, #0
 8007372:	627b      	str	r3, [r7, #36]	; 0x24
 8007374:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007378:	4642      	mov	r2, r8
 800737a:	464b      	mov	r3, r9
 800737c:	f04f 0000 	mov.w	r0, #0
 8007380:	f04f 0100 	mov.w	r1, #0
 8007384:	0159      	lsls	r1, r3, #5
 8007386:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800738a:	0150      	lsls	r0, r2, #5
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	4641      	mov	r1, r8
 8007392:	ebb2 0a01 	subs.w	sl, r2, r1
 8007396:	4649      	mov	r1, r9
 8007398:	eb63 0b01 	sbc.w	fp, r3, r1
 800739c:	f04f 0200 	mov.w	r2, #0
 80073a0:	f04f 0300 	mov.w	r3, #0
 80073a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80073a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80073ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80073b0:	ebb2 040a 	subs.w	r4, r2, sl
 80073b4:	eb63 050b 	sbc.w	r5, r3, fp
 80073b8:	f04f 0200 	mov.w	r2, #0
 80073bc:	f04f 0300 	mov.w	r3, #0
 80073c0:	00eb      	lsls	r3, r5, #3
 80073c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073c6:	00e2      	lsls	r2, r4, #3
 80073c8:	4614      	mov	r4, r2
 80073ca:	461d      	mov	r5, r3
 80073cc:	4643      	mov	r3, r8
 80073ce:	18e3      	adds	r3, r4, r3
 80073d0:	603b      	str	r3, [r7, #0]
 80073d2:	464b      	mov	r3, r9
 80073d4:	eb45 0303 	adc.w	r3, r5, r3
 80073d8:	607b      	str	r3, [r7, #4]
 80073da:	f04f 0200 	mov.w	r2, #0
 80073de:	f04f 0300 	mov.w	r3, #0
 80073e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073e6:	4629      	mov	r1, r5
 80073e8:	028b      	lsls	r3, r1, #10
 80073ea:	4621      	mov	r1, r4
 80073ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073f0:	4621      	mov	r1, r4
 80073f2:	028a      	lsls	r2, r1, #10
 80073f4:	4610      	mov	r0, r2
 80073f6:	4619      	mov	r1, r3
 80073f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073fa:	2200      	movs	r2, #0
 80073fc:	61bb      	str	r3, [r7, #24]
 80073fe:	61fa      	str	r2, [r7, #28]
 8007400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007404:	f7f8 fee8 	bl	80001d8 <__aeabi_uldivmod>
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	4613      	mov	r3, r2
 800740e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007410:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <HAL_RCC_GetSysClockFreq+0x200>)
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	0c1b      	lsrs	r3, r3, #16
 8007416:	f003 0303 	and.w	r3, r3, #3
 800741a:	3301      	adds	r3, #1
 800741c:	005b      	lsls	r3, r3, #1
 800741e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007420:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007424:	fbb2 f3f3 	udiv	r3, r2, r3
 8007428:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800742a:	e002      	b.n	8007432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800742c:	4b05      	ldr	r3, [pc, #20]	; (8007444 <HAL_RCC_GetSysClockFreq+0x204>)
 800742e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007434:	4618      	mov	r0, r3
 8007436:	3750      	adds	r7, #80	; 0x50
 8007438:	46bd      	mov	sp, r7
 800743a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800743e:	bf00      	nop
 8007440:	40023800 	.word	0x40023800
 8007444:	00f42400 	.word	0x00f42400
 8007448:	007a1200 	.word	0x007a1200

0800744c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800744c:	b480      	push	{r7}
 800744e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007450:	4b03      	ldr	r3, [pc, #12]	; (8007460 <HAL_RCC_GetHCLKFreq+0x14>)
 8007452:	681b      	ldr	r3, [r3, #0]
}
 8007454:	4618      	mov	r0, r3
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	20000038 	.word	0x20000038

08007464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007468:	f7ff fff0 	bl	800744c <HAL_RCC_GetHCLKFreq>
 800746c:	4602      	mov	r2, r0
 800746e:	4b05      	ldr	r3, [pc, #20]	; (8007484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	0a9b      	lsrs	r3, r3, #10
 8007474:	f003 0307 	and.w	r3, r3, #7
 8007478:	4903      	ldr	r1, [pc, #12]	; (8007488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800747a:	5ccb      	ldrb	r3, [r1, r3]
 800747c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007480:	4618      	mov	r0, r3
 8007482:	bd80      	pop	{r7, pc}
 8007484:	40023800 	.word	0x40023800
 8007488:	0800f9f4 	.word	0x0800f9f4

0800748c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0301 	and.w	r3, r3, #1
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d105      	bne.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d038      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80074b4:	4b68      	ldr	r3, [pc, #416]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074ba:	f7fa fea1 	bl	8002200 <HAL_GetTick>
 80074be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80074c0:	e008      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80074c2:	f7fa fe9d 	bl	8002200 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d901      	bls.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e0bd      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80074d4:	4b61      	ldr	r3, [pc, #388]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1f0      	bne.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	019b      	lsls	r3, r3, #6
 80074ea:	431a      	orrs	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	071b      	lsls	r3, r3, #28
 80074f2:	495a      	ldr	r1, [pc, #360]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80074fa:	4b57      	ldr	r3, [pc, #348]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80074fc:	2201      	movs	r2, #1
 80074fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007500:	f7fa fe7e 	bl	8002200 <HAL_GetTick>
 8007504:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007506:	e008      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007508:	f7fa fe7a 	bl	8002200 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	2b02      	cmp	r3, #2
 8007514:	d901      	bls.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e09a      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800751a:	4b50      	ldr	r3, [pc, #320]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d0f0      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 8083 	beq.w	800763a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007534:	2300      	movs	r3, #0
 8007536:	60fb      	str	r3, [r7, #12]
 8007538:	4b48      	ldr	r3, [pc, #288]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800753a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753c:	4a47      	ldr	r2, [pc, #284]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800753e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007542:	6413      	str	r3, [r2, #64]	; 0x40
 8007544:	4b45      	ldr	r3, [pc, #276]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800754c:	60fb      	str	r3, [r7, #12]
 800754e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007550:	4b43      	ldr	r3, [pc, #268]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a42      	ldr	r2, [pc, #264]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800755a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800755c:	f7fa fe50 	bl	8002200 <HAL_GetTick>
 8007560:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007562:	e008      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007564:	f7fa fe4c 	bl	8002200 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b02      	cmp	r3, #2
 8007570:	d901      	bls.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e06c      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007576:	4b3a      	ldr	r3, [pc, #232]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757e:	2b00      	cmp	r3, #0
 8007580:	d0f0      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007582:	4b36      	ldr	r3, [pc, #216]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800758a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d02f      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	429a      	cmp	r2, r3
 800759e:	d028      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075a0:	4b2e      	ldr	r3, [pc, #184]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80075aa:	4b2e      	ldr	r3, [pc, #184]	; (8007664 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80075ac:	2201      	movs	r2, #1
 80075ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80075b0:	4b2c      	ldr	r3, [pc, #176]	; (8007664 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80075b6:	4a29      	ldr	r2, [pc, #164]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80075bc:	4b27      	ldr	r3, [pc, #156]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d114      	bne.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80075c8:	f7fa fe1a 	bl	8002200 <HAL_GetTick>
 80075cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075ce:	e00a      	b.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075d0:	f7fa fe16 	bl	8002200 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	f241 3288 	movw	r2, #5000	; 0x1388
 80075de:	4293      	cmp	r3, r2
 80075e0:	d901      	bls.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e034      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075e6:	4b1d      	ldr	r3, [pc, #116]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d0ee      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075fe:	d10d      	bne.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8007600:	4b16      	ldr	r3, [pc, #88]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007614:	4911      	ldr	r1, [pc, #68]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007616:	4313      	orrs	r3, r2
 8007618:	608b      	str	r3, [r1, #8]
 800761a:	e005      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800761c:	4b0f      	ldr	r3, [pc, #60]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	4a0e      	ldr	r2, [pc, #56]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007622:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007626:	6093      	str	r3, [r2, #8]
 8007628:	4b0c      	ldr	r3, [pc, #48]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800762a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007634:	4909      	ldr	r1, [pc, #36]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007636:	4313      	orrs	r3, r2
 8007638:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0308 	and.w	r3, r3, #8
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	7d1a      	ldrb	r2, [r3, #20]
 800764a:	4b07      	ldr	r3, [pc, #28]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800764c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3718      	adds	r7, #24
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	42470068 	.word	0x42470068
 800765c:	40023800 	.word	0x40023800
 8007660:	40007000 	.word	0x40007000
 8007664:	42470e40 	.word	0x42470e40
 8007668:	424711e0 	.word	0x424711e0

0800766c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2203      	movs	r2, #3
 8007678:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800767a:	4b1c      	ldr	r3, [pc, #112]	; (80076ec <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800767c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007680:	099b      	lsrs	r3, r3, #6
 8007682:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800768a:	4b18      	ldr	r3, [pc, #96]	; (80076ec <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800768c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007690:	0f1b      	lsrs	r3, r3, #28
 8007692:	f003 0207 	and.w	r2, r3, #7
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 800769a:	4b14      	ldr	r3, [pc, #80]	; (80076ec <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800769c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80076a8:	4b10      	ldr	r3, [pc, #64]	; (80076ec <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80076b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80076b2:	4b0e      	ldr	r3, [pc, #56]	; (80076ec <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80076b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	431a      	orrs	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 80076c2:	4b0a      	ldr	r3, [pc, #40]	; (80076ec <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80076c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d103      	bne.n	80076d8 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80076d6:	e002      	b.n	80076de <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	751a      	strb	r2, [r3, #20]
}
 80076de:	bf00      	nop
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	40023800 	.word	0x40023800

080076f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b087      	sub	sp, #28
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80076f8:	2300      	movs	r3, #0
 80076fa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007700:	2300      	movs	r3, #0
 8007702:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d140      	bne.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800770e:	4b24      	ldr	r3, [pc, #144]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007716:	60fb      	str	r3, [r7, #12]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d005      	beq.n	800772a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d131      	bne.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007724:	4b1f      	ldr	r3, [pc, #124]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007726:	617b      	str	r3, [r7, #20]
          break;
 8007728:	e031      	b.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800772a:	4b1d      	ldr	r3, [pc, #116]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007736:	d109      	bne.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007738:	4b19      	ldr	r3, [pc, #100]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800773a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800773e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007742:	4a19      	ldr	r2, [pc, #100]	; (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007744:	fbb2 f3f3 	udiv	r3, r2, r3
 8007748:	613b      	str	r3, [r7, #16]
 800774a:	e008      	b.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800774c:	4b14      	ldr	r3, [pc, #80]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800774e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007752:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007756:	4a15      	ldr	r2, [pc, #84]	; (80077ac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007758:	fbb2 f3f3 	udiv	r3, r2, r3
 800775c:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800775e:	4b10      	ldr	r3, [pc, #64]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007764:	099b      	lsrs	r3, r3, #6
 8007766:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	fb02 f303 	mul.w	r3, r2, r3
 8007770:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007772:	4b0b      	ldr	r3, [pc, #44]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007778:	0f1b      	lsrs	r3, r3, #28
 800777a:	f003 0307 	and.w	r3, r3, #7
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	fbb2 f3f3 	udiv	r3, r2, r3
 8007784:	617b      	str	r3, [r7, #20]
          break;
 8007786:	e002      	b.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	617b      	str	r3, [r7, #20]
          break;
 800778c:	bf00      	nop
        }
      }
      break;
 800778e:	bf00      	nop
    }
  }
  return frequency;
 8007790:	697b      	ldr	r3, [r7, #20]
}
 8007792:	4618      	mov	r0, r3
 8007794:	371c      	adds	r7, #28
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	40023800 	.word	0x40023800
 80077a4:	00bb8000 	.word	0x00bb8000
 80077a8:	007a1200 	.word	0x007a1200
 80077ac:	00f42400 	.word	0x00f42400

080077b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077b0:	b084      	sub	sp, #16
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b084      	sub	sp, #16
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	f107 001c 	add.w	r0, r7, #28
 80077be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d122      	bne.n	800780e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80077dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d105      	bne.n	8007802 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f9c0 	bl	8007b88 <USB_CoreReset>
 8007808:	4603      	mov	r3, r0
 800780a:	73fb      	strb	r3, [r7, #15]
 800780c:	e01a      	b.n	8007844 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f9b4 	bl	8007b88 <USB_CoreReset>
 8007820:	4603      	mov	r3, r0
 8007822:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007826:	2b00      	cmp	r3, #0
 8007828:	d106      	bne.n	8007838 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	639a      	str	r2, [r3, #56]	; 0x38
 8007836:	e005      	b.n	8007844 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007846:	2b01      	cmp	r3, #1
 8007848:	d10b      	bne.n	8007862 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f043 0206 	orr.w	r2, r3, #6
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f043 0220 	orr.w	r2, r3, #32
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800786e:	b004      	add	sp, #16
 8007870:	4770      	bx	lr

08007872 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f043 0201 	orr.w	r2, r3, #1
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f023 0201 	bic.w	r2, r3, #1
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b084      	sub	sp, #16
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	460b      	mov	r3, r1
 80078c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80078d2:	78fb      	ldrb	r3, [r7, #3]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d115      	bne.n	8007904 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078e4:	2001      	movs	r0, #1
 80078e6:	f7fa fc97 	bl	8002218 <HAL_Delay>
      ms++;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3301      	adds	r3, #1
 80078ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f93a 	bl	8007b6a <USB_GetMode>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d01e      	beq.n	800793a <USB_SetCurrentMode+0x84>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2b31      	cmp	r3, #49	; 0x31
 8007900:	d9f0      	bls.n	80078e4 <USB_SetCurrentMode+0x2e>
 8007902:	e01a      	b.n	800793a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007904:	78fb      	ldrb	r3, [r7, #3]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d115      	bne.n	8007936 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007916:	2001      	movs	r0, #1
 8007918:	f7fa fc7e 	bl	8002218 <HAL_Delay>
      ms++;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3301      	adds	r3, #1
 8007920:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f921 	bl	8007b6a <USB_GetMode>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d005      	beq.n	800793a <USB_SetCurrentMode+0x84>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2b31      	cmp	r3, #49	; 0x31
 8007932:	d9f0      	bls.n	8007916 <USB_SetCurrentMode+0x60>
 8007934:	e001      	b.n	800793a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e005      	b.n	8007946 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2b32      	cmp	r3, #50	; 0x32
 800793e:	d101      	bne.n	8007944 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e000      	b.n	8007946 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
	...

08007950 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3301      	adds	r3, #1
 8007962:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	4a13      	ldr	r2, [pc, #76]	; (80079b4 <USB_FlushTxFifo+0x64>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d901      	bls.n	8007970 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e01b      	b.n	80079a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	daf2      	bge.n	800795e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007978:	2300      	movs	r3, #0
 800797a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	019b      	lsls	r3, r3, #6
 8007980:	f043 0220 	orr.w	r2, r3, #32
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	3301      	adds	r3, #1
 800798c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	4a08      	ldr	r2, [pc, #32]	; (80079b4 <USB_FlushTxFifo+0x64>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d901      	bls.n	800799a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e006      	b.n	80079a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	f003 0320 	and.w	r3, r3, #32
 80079a2:	2b20      	cmp	r3, #32
 80079a4:	d0f0      	beq.n	8007988 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3714      	adds	r7, #20
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr
 80079b4:	00030d40 	.word	0x00030d40

080079b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	3301      	adds	r3, #1
 80079c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	4a11      	ldr	r2, [pc, #68]	; (8007a14 <USB_FlushRxFifo+0x5c>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d901      	bls.n	80079d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e018      	b.n	8007a08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	daf2      	bge.n	80079c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80079de:	2300      	movs	r3, #0
 80079e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2210      	movs	r2, #16
 80079e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	3301      	adds	r3, #1
 80079ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	4a08      	ldr	r2, [pc, #32]	; (8007a14 <USB_FlushRxFifo+0x5c>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d901      	bls.n	80079fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e006      	b.n	8007a08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	f003 0310 	and.w	r3, r3, #16
 8007a02:	2b10      	cmp	r3, #16
 8007a04:	d0f0      	beq.n	80079e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	00030d40 	.word	0x00030d40

08007a18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b089      	sub	sp, #36	; 0x24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	4611      	mov	r1, r2
 8007a24:	461a      	mov	r2, r3
 8007a26:	460b      	mov	r3, r1
 8007a28:	71fb      	strb	r3, [r7, #7]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007a36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d123      	bne.n	8007a86 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a3e:	88bb      	ldrh	r3, [r7, #4]
 8007a40:	3303      	adds	r3, #3
 8007a42:	089b      	lsrs	r3, r3, #2
 8007a44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a46:	2300      	movs	r3, #0
 8007a48:	61bb      	str	r3, [r7, #24]
 8007a4a:	e018      	b.n	8007a7e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a4c:	79fb      	ldrb	r3, [r7, #7]
 8007a4e:	031a      	lsls	r2, r3, #12
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a58:	461a      	mov	r2, r3
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	3301      	adds	r3, #1
 8007a64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	3301      	adds	r3, #1
 8007a76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	61bb      	str	r3, [r7, #24]
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d3e2      	bcc.n	8007a4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3724      	adds	r7, #36	; 0x24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b08b      	sub	sp, #44	; 0x2c
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007aaa:	88fb      	ldrh	r3, [r7, #6]
 8007aac:	089b      	lsrs	r3, r3, #2
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007ab2:	88fb      	ldrh	r3, [r7, #6]
 8007ab4:	f003 0303 	and.w	r3, r3, #3
 8007ab8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007aba:	2300      	movs	r3, #0
 8007abc:	623b      	str	r3, [r7, #32]
 8007abe:	e014      	b.n	8007aea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	601a      	str	r2, [r3, #0]
    pDest++;
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	3301      	adds	r3, #1
 8007ad0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	3301      	adds	r3, #1
 8007adc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	623b      	str	r3, [r7, #32]
 8007aea:	6a3a      	ldr	r2, [r7, #32]
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d3e6      	bcc.n	8007ac0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007af2:	8bfb      	ldrh	r3, [r7, #30]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d01e      	beq.n	8007b36 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b02:	461a      	mov	r2, r3
 8007b04:	f107 0310 	add.w	r3, r7, #16
 8007b08:	6812      	ldr	r2, [r2, #0]
 8007b0a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	fa22 f303 	lsr.w	r3, r2, r3
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	701a      	strb	r2, [r3, #0]
      i++;
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	3301      	adds	r3, #1
 8007b22:	623b      	str	r3, [r7, #32]
      pDest++;
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	3301      	adds	r3, #1
 8007b28:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007b2a:	8bfb      	ldrh	r3, [r7, #30]
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007b30:	8bfb      	ldrh	r3, [r7, #30]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1ea      	bne.n	8007b0c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	372c      	adds	r7, #44	; 0x2c
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	4013      	ands	r3, r2
 8007b5a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b083      	sub	sp, #12
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	695b      	ldr	r3, [r3, #20]
 8007b76:	f003 0301 	and.w	r3, r3, #1
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	370c      	adds	r7, #12
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
	...

08007b88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3301      	adds	r3, #1
 8007b98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	4a13      	ldr	r2, [pc, #76]	; (8007bec <USB_CoreReset+0x64>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d901      	bls.n	8007ba6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e01b      	b.n	8007bde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	daf2      	bge.n	8007b94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f043 0201 	orr.w	r2, r3, #1
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4a09      	ldr	r2, [pc, #36]	; (8007bec <USB_CoreReset+0x64>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d901      	bls.n	8007bd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e006      	b.n	8007bde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	f003 0301 	and.w	r3, r3, #1
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d0f0      	beq.n	8007bbe <USB_CoreReset+0x36>

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	00030d40 	.word	0x00030d40

08007bf0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b086      	sub	sp, #24
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007bfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c10:	461a      	mov	r2, r3
 8007c12:	2300      	movs	r3, #0
 8007c14:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c26:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c32:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d018      	beq.n	8007c78 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d10a      	bne.n	8007c62 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c5a:	f043 0304 	orr.w	r3, r3, #4
 8007c5e:	6013      	str	r3, [r2, #0]
 8007c60:	e014      	b.n	8007c8c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c70:	f023 0304 	bic.w	r3, r3, #4
 8007c74:	6013      	str	r3, [r2, #0]
 8007c76:	e009      	b.n	8007c8c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c86:	f023 0304 	bic.w	r3, r3, #4
 8007c8a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c8c:	2110      	movs	r1, #16
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7ff fe5e 	bl	8007950 <USB_FlushTxFifo>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d001      	beq.n	8007c9e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7ff fe8a 	bl	80079b8 <USB_FlushRxFifo>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d001      	beq.n	8007cae <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007cae:	2300      	movs	r3, #0
 8007cb0:	613b      	str	r3, [r7, #16]
 8007cb2:	e015      	b.n	8007ce0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	613b      	str	r3, [r7, #16]
 8007ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d3e5      	bcc.n	8007cb4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00b      	beq.n	8007d1a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d08:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a13      	ldr	r2, [pc, #76]	; (8007d5c <USB_HostInit+0x16c>)
 8007d0e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a13      	ldr	r2, [pc, #76]	; (8007d60 <USB_HostInit+0x170>)
 8007d14:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007d18:	e009      	b.n	8007d2e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2280      	movs	r2, #128	; 0x80
 8007d1e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a10      	ldr	r2, [pc, #64]	; (8007d64 <USB_HostInit+0x174>)
 8007d24:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a0f      	ldr	r2, [pc, #60]	; (8007d68 <USB_HostInit+0x178>)
 8007d2a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d105      	bne.n	8007d40 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	f043 0210 	orr.w	r2, r3, #16
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	699a      	ldr	r2, [r3, #24]
 8007d44:	4b09      	ldr	r3, [pc, #36]	; (8007d6c <USB_HostInit+0x17c>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3718      	adds	r7, #24
 8007d52:	46bd      	mov	sp, r7
 8007d54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d58:	b004      	add	sp, #16
 8007d5a:	4770      	bx	lr
 8007d5c:	01000200 	.word	0x01000200
 8007d60:	00e00300 	.word	0x00e00300
 8007d64:	00600080 	.word	0x00600080
 8007d68:	004000e0 	.word	0x004000e0
 8007d6c:	a3200008 	.word	0xa3200008

08007d70 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d8e:	f023 0303 	bic.w	r3, r3, #3
 8007d92:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	78fb      	ldrb	r3, [r7, #3]
 8007d9e:	f003 0303 	and.w	r3, r3, #3
 8007da2:	68f9      	ldr	r1, [r7, #12]
 8007da4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007da8:	4313      	orrs	r3, r2
 8007daa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007dac:	78fb      	ldrb	r3, [r7, #3]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d107      	bne.n	8007dc2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007db8:	461a      	mov	r2, r3
 8007dba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007dbe:	6053      	str	r3, [r2, #4]
 8007dc0:	e009      	b.n	8007dd6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007dc2:	78fb      	ldrb	r3, [r7, #3]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d106      	bne.n	8007dd6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dce:	461a      	mov	r2, r3
 8007dd0:	f241 7370 	movw	r3, #6000	; 0x1770
 8007dd4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007e04:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e12:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007e14:	2064      	movs	r0, #100	; 0x64
 8007e16:	f7fa f9ff 	bl	8002218 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e26:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007e28:	200a      	movs	r0, #10
 8007e2a:	f7fa f9f5 	bl	8002218 <HAL_Delay>

  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007e5c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d109      	bne.n	8007e7c <USB_DriveVbus+0x44>
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d106      	bne.n	8007e7c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e7a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e86:	d109      	bne.n	8007e9c <USB_DriveVbus+0x64>
 8007e88:	78fb      	ldrb	r3, [r7, #3]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d106      	bne.n	8007e9c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e9a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b085      	sub	sp, #20
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	0c5b      	lsrs	r3, r3, #17
 8007ec8:	f003 0303 	and.w	r3, r3, #3
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	b29b      	uxth	r3, r3
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
	...

08007efc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b088      	sub	sp, #32
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	4608      	mov	r0, r1
 8007f06:	4611      	mov	r1, r2
 8007f08:	461a      	mov	r2, r3
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	70fb      	strb	r3, [r7, #3]
 8007f0e:	460b      	mov	r3, r1
 8007f10:	70bb      	strb	r3, [r7, #2]
 8007f12:	4613      	mov	r3, r2
 8007f14:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007f1e:	78fb      	ldrb	r3, [r7, #3]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f30:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007f32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d87e      	bhi.n	8008038 <USB_HC_Init+0x13c>
 8007f3a:	a201      	add	r2, pc, #4	; (adr r2, 8007f40 <USB_HC_Init+0x44>)
 8007f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f40:	08007f51 	.word	0x08007f51
 8007f44:	08007ffb 	.word	0x08007ffb
 8007f48:	08007f51 	.word	0x08007f51
 8007f4c:	08007fbd 	.word	0x08007fbd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	015a      	lsls	r2, r3, #5
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	4413      	add	r3, r2
 8007f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	f240 439d 	movw	r3, #1181	; 0x49d
 8007f62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007f64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	da10      	bge.n	8007f8e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007f6c:	78fb      	ldrb	r3, [r7, #3]
 8007f6e:	015a      	lsls	r2, r3, #5
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	4413      	add	r3, r2
 8007f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	78fa      	ldrb	r2, [r7, #3]
 8007f7c:	0151      	lsls	r1, r2, #5
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	440a      	add	r2, r1
 8007f82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f8a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007f8c:	e057      	b.n	800803e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d051      	beq.n	800803e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007f9a:	78fb      	ldrb	r3, [r7, #3]
 8007f9c:	015a      	lsls	r2, r3, #5
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	78fa      	ldrb	r2, [r7, #3]
 8007faa:	0151      	lsls	r1, r2, #5
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	440a      	add	r2, r1
 8007fb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fb4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007fb8:	60d3      	str	r3, [r2, #12]
      break;
 8007fba:	e040      	b.n	800803e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc8:	461a      	mov	r2, r3
 8007fca:	f240 639d 	movw	r3, #1693	; 0x69d
 8007fce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007fd0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	da34      	bge.n	8008042 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007fd8:	78fb      	ldrb	r3, [r7, #3]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	78fa      	ldrb	r2, [r7, #3]
 8007fe8:	0151      	lsls	r1, r2, #5
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	440a      	add	r2, r1
 8007fee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ff6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007ff8:	e023      	b.n	8008042 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ffa:	78fb      	ldrb	r3, [r7, #3]
 8007ffc:	015a      	lsls	r2, r3, #5
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	4413      	add	r3, r2
 8008002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008006:	461a      	mov	r2, r3
 8008008:	f240 2325 	movw	r3, #549	; 0x225
 800800c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800800e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008012:	2b00      	cmp	r3, #0
 8008014:	da17      	bge.n	8008046 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008016:	78fb      	ldrb	r3, [r7, #3]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	4413      	add	r3, r2
 800801e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	78fa      	ldrb	r2, [r7, #3]
 8008026:	0151      	lsls	r1, r2, #5
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	440a      	add	r2, r1
 800802c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008030:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008034:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008036:	e006      	b.n	8008046 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	77fb      	strb	r3, [r7, #31]
      break;
 800803c:	e004      	b.n	8008048 <USB_HC_Init+0x14c>
      break;
 800803e:	bf00      	nop
 8008040:	e002      	b.n	8008048 <USB_HC_Init+0x14c>
      break;
 8008042:	bf00      	nop
 8008044:	e000      	b.n	8008048 <USB_HC_Init+0x14c>
      break;
 8008046:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008048:	78fb      	ldrb	r3, [r7, #3]
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	4413      	add	r3, r2
 8008050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	78fa      	ldrb	r2, [r7, #3]
 8008058:	0151      	lsls	r1, r2, #5
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	440a      	add	r2, r1
 800805e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008062:	f043 0302 	orr.w	r3, r3, #2
 8008066:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800806e:	699a      	ldr	r2, [r3, #24]
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	f003 030f 	and.w	r3, r3, #15
 8008076:	2101      	movs	r1, #1
 8008078:	fa01 f303 	lsl.w	r3, r1, r3
 800807c:	6939      	ldr	r1, [r7, #16]
 800807e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008082:	4313      	orrs	r3, r2
 8008084:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008092:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008096:	2b00      	cmp	r3, #0
 8008098:	da03      	bge.n	80080a2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800809a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800809e:	61bb      	str	r3, [r7, #24]
 80080a0:	e001      	b.n	80080a6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80080a2:	2300      	movs	r3, #0
 80080a4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7ff feff 	bl	8007eaa <USB_GetHostSpeed>
 80080ac:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80080ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d106      	bne.n	80080c4 <USB_HC_Init+0x1c8>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d003      	beq.n	80080c4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80080bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80080c0:	617b      	str	r3, [r7, #20]
 80080c2:	e001      	b.n	80080c8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80080c4:	2300      	movs	r3, #0
 80080c6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80080c8:	787b      	ldrb	r3, [r7, #1]
 80080ca:	059b      	lsls	r3, r3, #22
 80080cc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80080d0:	78bb      	ldrb	r3, [r7, #2]
 80080d2:	02db      	lsls	r3, r3, #11
 80080d4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80080d8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80080da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80080de:	049b      	lsls	r3, r3, #18
 80080e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80080e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80080e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80080e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80080ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80080f2:	78fb      	ldrb	r3, [r7, #3]
 80080f4:	0159      	lsls	r1, r3, #5
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	440b      	add	r3, r1
 80080fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080fe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008104:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008106:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800810a:	2b03      	cmp	r3, #3
 800810c:	d003      	beq.n	8008116 <USB_HC_Init+0x21a>
 800810e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008112:	2b01      	cmp	r3, #1
 8008114:	d10f      	bne.n	8008136 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008116:	78fb      	ldrb	r3, [r7, #3]
 8008118:	015a      	lsls	r2, r3, #5
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	4413      	add	r3, r2
 800811e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	78fa      	ldrb	r2, [r7, #3]
 8008126:	0151      	lsls	r1, r2, #5
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	440a      	add	r2, r1
 800812c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008130:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008134:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008136:	7ffb      	ldrb	r3, [r7, #31]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3720      	adds	r7, #32
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b08c      	sub	sp, #48	; 0x30
 8008144:	af02      	add	r7, sp, #8
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	4613      	mov	r3, r2
 800814c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	785b      	ldrb	r3, [r3, #1]
 8008156:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008158:	f44f 7380 	mov.w	r3, #256	; 0x100
 800815c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008166:	2b00      	cmp	r3, #0
 8008168:	d02d      	beq.n	80081c6 <USB_HC_StartXfer+0x86>
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	791b      	ldrb	r3, [r3, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d129      	bne.n	80081c6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008172:	79fb      	ldrb	r3, [r7, #7]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d117      	bne.n	80081a8 <USB_HC_StartXfer+0x68>
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	79db      	ldrb	r3, [r3, #7]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d003      	beq.n	8008188 <USB_HC_StartXfer+0x48>
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	79db      	ldrb	r3, [r3, #7]
 8008184:	2b02      	cmp	r3, #2
 8008186:	d10f      	bne.n	80081a8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	4413      	add	r3, r2
 8008190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	69fa      	ldr	r2, [r7, #28]
 8008198:	0151      	lsls	r1, r2, #5
 800819a:	6a3a      	ldr	r2, [r7, #32]
 800819c:	440a      	add	r2, r1
 800819e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80081a8:	79fb      	ldrb	r3, [r7, #7]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10b      	bne.n	80081c6 <USB_HC_StartXfer+0x86>
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	795b      	ldrb	r3, [r3, #5]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d107      	bne.n	80081c6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	785b      	ldrb	r3, [r3, #1]
 80081ba:	4619      	mov	r1, r3
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f000 fa0f 	bl	80085e0 <USB_DoPing>
      return HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	e0f8      	b.n	80083b8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d018      	beq.n	8008200 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	8912      	ldrh	r2, [r2, #8]
 80081d6:	4413      	add	r3, r2
 80081d8:	3b01      	subs	r3, #1
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	8912      	ldrh	r2, [r2, #8]
 80081de:	fbb3 f3f2 	udiv	r3, r3, r2
 80081e2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80081e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80081e6:	8b7b      	ldrh	r3, [r7, #26]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d90b      	bls.n	8008204 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80081ec:	8b7b      	ldrh	r3, [r7, #26]
 80081ee:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80081f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	8912      	ldrh	r2, [r2, #8]
 80081f6:	fb03 f202 	mul.w	r2, r3, r2
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	611a      	str	r2, [r3, #16]
 80081fe:	e001      	b.n	8008204 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008200:	2301      	movs	r3, #1
 8008202:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	78db      	ldrb	r3, [r3, #3]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d007      	beq.n	800821c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800820c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	8912      	ldrh	r2, [r2, #8]
 8008212:	fb03 f202 	mul.w	r2, r3, r2
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	611a      	str	r2, [r3, #16]
 800821a:	e003      	b.n	8008224 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	695a      	ldr	r2, [r3, #20]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800822c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800822e:	04d9      	lsls	r1, r3, #19
 8008230:	4b63      	ldr	r3, [pc, #396]	; (80083c0 <USB_HC_StartXfer+0x280>)
 8008232:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008234:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	7a9b      	ldrb	r3, [r3, #10]
 800823a:	075b      	lsls	r3, r3, #29
 800823c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008240:	69f9      	ldr	r1, [r7, #28]
 8008242:	0148      	lsls	r0, r1, #5
 8008244:	6a39      	ldr	r1, [r7, #32]
 8008246:	4401      	add	r1, r0
 8008248:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800824c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800824e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d009      	beq.n	800826a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	68d9      	ldr	r1, [r3, #12]
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	015a      	lsls	r2, r3, #5
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	4413      	add	r3, r2
 8008262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008266:	460a      	mov	r2, r1
 8008268:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	2b00      	cmp	r3, #0
 8008278:	bf0c      	ite	eq
 800827a:	2301      	moveq	r3, #1
 800827c:	2300      	movne	r3, #0
 800827e:	b2db      	uxtb	r3, r3
 8008280:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	4413      	add	r3, r2
 800828a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	69fa      	ldr	r2, [r7, #28]
 8008292:	0151      	lsls	r1, r2, #5
 8008294:	6a3a      	ldr	r2, [r7, #32]
 8008296:	440a      	add	r2, r1
 8008298:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800829c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80082a0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	6a3b      	ldr	r3, [r7, #32]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	7e7b      	ldrb	r3, [r7, #25]
 80082b2:	075b      	lsls	r3, r3, #29
 80082b4:	69f9      	ldr	r1, [r7, #28]
 80082b6:	0148      	lsls	r0, r1, #5
 80082b8:	6a39      	ldr	r1, [r7, #32]
 80082ba:	4401      	add	r1, r0
 80082bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80082c0:	4313      	orrs	r3, r2
 80082c2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	6a3b      	ldr	r3, [r7, #32]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80082da:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	78db      	ldrb	r3, [r3, #3]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d004      	beq.n	80082ee <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ea:	613b      	str	r3, [r7, #16]
 80082ec:	e003      	b.n	80082f6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80082f4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082fc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	015a      	lsls	r2, r3, #5
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	4413      	add	r3, r2
 8008306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800830a:	461a      	mov	r2, r3
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008310:	79fb      	ldrb	r3, [r7, #7]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d001      	beq.n	800831a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	e04e      	b.n	80083b8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	78db      	ldrb	r3, [r3, #3]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d149      	bne.n	80083b6 <USB_HC_StartXfer+0x276>
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d045      	beq.n	80083b6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	79db      	ldrb	r3, [r3, #7]
 800832e:	2b03      	cmp	r3, #3
 8008330:	d830      	bhi.n	8008394 <USB_HC_StartXfer+0x254>
 8008332:	a201      	add	r2, pc, #4	; (adr r2, 8008338 <USB_HC_StartXfer+0x1f8>)
 8008334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008338:	08008349 	.word	0x08008349
 800833c:	0800836d 	.word	0x0800836d
 8008340:	08008349 	.word	0x08008349
 8008344:	0800836d 	.word	0x0800836d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	3303      	adds	r3, #3
 800834e:	089b      	lsrs	r3, r3, #2
 8008350:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008352:	8afa      	ldrh	r2, [r7, #22]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008358:	b29b      	uxth	r3, r3
 800835a:	429a      	cmp	r2, r3
 800835c:	d91c      	bls.n	8008398 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	f043 0220 	orr.w	r2, r3, #32
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	619a      	str	r2, [r3, #24]
        }
        break;
 800836a:	e015      	b.n	8008398 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	3303      	adds	r3, #3
 8008372:	089b      	lsrs	r3, r3, #2
 8008374:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008376:	8afa      	ldrh	r2, [r7, #22]
 8008378:	6a3b      	ldr	r3, [r7, #32]
 800837a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	b29b      	uxth	r3, r3
 8008382:	429a      	cmp	r2, r3
 8008384:	d90a      	bls.n	800839c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	619a      	str	r2, [r3, #24]
        }
        break;
 8008392:	e003      	b.n	800839c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008394:	bf00      	nop
 8008396:	e002      	b.n	800839e <USB_HC_StartXfer+0x25e>
        break;
 8008398:	bf00      	nop
 800839a:	e000      	b.n	800839e <USB_HC_StartXfer+0x25e>
        break;
 800839c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	68d9      	ldr	r1, [r3, #12]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	785a      	ldrb	r2, [r3, #1]
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	2000      	movs	r0, #0
 80083ae:	9000      	str	r0, [sp, #0]
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f7ff fb31 	bl	8007a18 <USB_WritePacket>
  }

  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3728      	adds	r7, #40	; 0x28
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	1ff80000 	.word	0x1ff80000

080083c4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	b29b      	uxth	r3, r3
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3714      	adds	r7, #20
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b089      	sub	sp, #36	; 0x24
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	460b      	mov	r3, r1
 80083f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80083f6:	78fb      	ldrb	r3, [r7, #3]
 80083f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80083fa:	2300      	movs	r3, #0
 80083fc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	015a      	lsls	r2, r3, #5
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	4413      	add	r3, r2
 8008406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	0c9b      	lsrs	r3, r3, #18
 800840e:	f003 0303 	and.w	r3, r3, #3
 8008412:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	4413      	add	r3, r2
 800841c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	0fdb      	lsrs	r3, r3, #31
 8008424:	f003 0301 	and.w	r3, r3, #1
 8008428:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	f003 0320 	and.w	r3, r3, #32
 8008432:	2b20      	cmp	r3, #32
 8008434:	d104      	bne.n	8008440 <USB_HC_Halt+0x5a>
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	e0c8      	b.n	80085d2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d002      	beq.n	800844c <USB_HC_Halt+0x66>
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	2b02      	cmp	r3, #2
 800844a:	d163      	bne.n	8008514 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	4413      	add	r3, r2
 8008454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	69ba      	ldr	r2, [r7, #24]
 800845c:	0151      	lsls	r1, r2, #5
 800845e:	69fa      	ldr	r2, [r7, #28]
 8008460:	440a      	add	r2, r1
 8008462:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008466:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800846a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f003 0320 	and.w	r3, r3, #32
 8008474:	2b00      	cmp	r3, #0
 8008476:	f040 80ab 	bne.w	80085d0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d133      	bne.n	80084ee <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	015a      	lsls	r2, r3, #5
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	4413      	add	r3, r2
 800848e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	0151      	lsls	r1, r2, #5
 8008498:	69fa      	ldr	r2, [r7, #28]
 800849a:	440a      	add	r2, r1
 800849c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084a4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	0151      	lsls	r1, r2, #5
 80084b8:	69fa      	ldr	r2, [r7, #28]
 80084ba:	440a      	add	r2, r1
 80084bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084c4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	3301      	adds	r3, #1
 80084ca:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084d2:	d81d      	bhi.n	8008510 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084ea:	d0ec      	beq.n	80084c6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80084ec:	e070      	b.n	80085d0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	015a      	lsls	r2, r3, #5
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	0151      	lsls	r1, r2, #5
 8008500:	69fa      	ldr	r2, [r7, #28]
 8008502:	440a      	add	r2, r1
 8008504:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008508:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800850c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800850e:	e05f      	b.n	80085d0 <USB_HC_Halt+0x1ea>
            break;
 8008510:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008512:	e05d      	b.n	80085d0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	015a      	lsls	r2, r3, #5
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	4413      	add	r3, r2
 800851c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	69ba      	ldr	r2, [r7, #24]
 8008524:	0151      	lsls	r1, r2, #5
 8008526:	69fa      	ldr	r2, [r7, #28]
 8008528:	440a      	add	r2, r1
 800852a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800852e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008532:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008540:	2b00      	cmp	r3, #0
 8008542:	d133      	bne.n	80085ac <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	4413      	add	r3, r2
 800854c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	69ba      	ldr	r2, [r7, #24]
 8008554:	0151      	lsls	r1, r2, #5
 8008556:	69fa      	ldr	r2, [r7, #28]
 8008558:	440a      	add	r2, r1
 800855a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800855e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008562:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	4413      	add	r3, r2
 800856c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	0151      	lsls	r1, r2, #5
 8008576:	69fa      	ldr	r2, [r7, #28]
 8008578:	440a      	add	r2, r1
 800857a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800857e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008582:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	3301      	adds	r3, #1
 8008588:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008590:	d81d      	bhi.n	80085ce <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	015a      	lsls	r2, r3, #5
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	4413      	add	r3, r2
 800859a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085a8:	d0ec      	beq.n	8008584 <USB_HC_Halt+0x19e>
 80085aa:	e011      	b.n	80085d0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	015a      	lsls	r2, r3, #5
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	4413      	add	r3, r2
 80085b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	69ba      	ldr	r2, [r7, #24]
 80085bc:	0151      	lsls	r1, r2, #5
 80085be:	69fa      	ldr	r2, [r7, #28]
 80085c0:	440a      	add	r2, r1
 80085c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085ca:	6013      	str	r3, [r2, #0]
 80085cc:	e000      	b.n	80085d0 <USB_HC_Halt+0x1ea>
          break;
 80085ce:	bf00      	nop
    }
  }

  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3724      	adds	r7, #36	; 0x24
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
	...

080085e0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80085f0:	78fb      	ldrb	r3, [r7, #3]
 80085f2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80085f4:	2301      	movs	r3, #1
 80085f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	04da      	lsls	r2, r3, #19
 80085fc:	4b15      	ldr	r3, [pc, #84]	; (8008654 <USB_DoPing+0x74>)
 80085fe:	4013      	ands	r3, r2
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	0151      	lsls	r1, r2, #5
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	440a      	add	r2, r1
 8008608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800860c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008610:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	015a      	lsls	r2, r3, #5
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	4413      	add	r3, r2
 800861a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008628:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008630:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	015a      	lsls	r2, r3, #5
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	4413      	add	r3, r2
 800863a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800863e:	461a      	mov	r2, r3
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	371c      	adds	r7, #28
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	1ff80000 	.word	0x1ff80000

08008658 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b088      	sub	sp, #32
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008660:	2300      	movs	r3, #0
 8008662:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008668:	2300      	movs	r3, #0
 800866a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7ff f911 	bl	8007894 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008672:	2110      	movs	r1, #16
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7ff f96b 	bl	8007950 <USB_FlushTxFifo>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d001      	beq.n	8008684 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7ff f997 	bl	80079b8 <USB_FlushRxFifo>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008694:	2300      	movs	r3, #0
 8008696:	61bb      	str	r3, [r7, #24]
 8008698:	e01f      	b.n	80086da <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	015a      	lsls	r2, r3, #5
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	4413      	add	r3, r2
 80086a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086c0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	015a      	lsls	r2, r3, #5
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	4413      	add	r3, r2
 80086ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ce:	461a      	mov	r2, r3
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	3301      	adds	r3, #1
 80086d8:	61bb      	str	r3, [r7, #24]
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	2b0f      	cmp	r3, #15
 80086de:	d9dc      	bls.n	800869a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80086e0:	2300      	movs	r3, #0
 80086e2:	61bb      	str	r3, [r7, #24]
 80086e4:	e034      	b.n	8008750 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	015a      	lsls	r2, r3, #5
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	4413      	add	r3, r2
 80086ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086fc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008704:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800870c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	015a      	lsls	r2, r3, #5
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	4413      	add	r3, r2
 8008716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800871a:	461a      	mov	r2, r3
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	3301      	adds	r3, #1
 8008724:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800872c:	d80c      	bhi.n	8008748 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	015a      	lsls	r2, r3, #5
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	4413      	add	r3, r2
 8008736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008744:	d0ec      	beq.n	8008720 <USB_StopHost+0xc8>
 8008746:	e000      	b.n	800874a <USB_StopHost+0xf2>
        break;
 8008748:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	3301      	adds	r3, #1
 800874e:	61bb      	str	r3, [r7, #24]
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	2b0f      	cmp	r3, #15
 8008754:	d9c7      	bls.n	80086e6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800875c:	461a      	mov	r2, r3
 800875e:	f04f 33ff 	mov.w	r3, #4294967295
 8008762:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f04f 32ff 	mov.w	r2, #4294967295
 800876a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7ff f880 	bl	8007872 <USB_EnableGlobalInt>

  return ret;
 8008772:	7ffb      	ldrb	r3, [r7, #31]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3720      	adds	r7, #32
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008780:	4904      	ldr	r1, [pc, #16]	; (8008794 <MX_FATFS_Init+0x18>)
 8008782:	4805      	ldr	r0, [pc, #20]	; (8008798 <MX_FATFS_Init+0x1c>)
 8008784:	f006 fb36 	bl	800edf4 <FATFS_LinkDriver>
 8008788:	4603      	mov	r3, r0
 800878a:	461a      	mov	r2, r3
 800878c:	4b03      	ldr	r3, [pc, #12]	; (800879c <MX_FATFS_Init+0x20>)
 800878e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008790:	bf00      	nop
 8008792:	bd80      	pop	{r7, pc}
 8008794:	20001980 	.word	0x20001980
 8008798:	0800fa04 	.word	0x0800fa04
 800879c:	2000197c 	.word	0x2000197c

080087a0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80087a0:	b480      	push	{r7}
 80087a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80087a4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	4603      	mov	r3, r0
 80087b8:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80087d6:	79fb      	ldrb	r3, [r7, #7]
 80087d8:	4619      	mov	r1, r3
 80087da:	4808      	ldr	r0, [pc, #32]	; (80087fc <USBH_status+0x34>)
 80087dc:	f000 fe32 	bl	8009444 <USBH_MSC_UnitIsReady>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <USBH_status+0x24>
  {
    res = RES_OK;
 80087e6:	2300      	movs	r3, #0
 80087e8:	73fb      	strb	r3, [r7, #15]
 80087ea:	e001      	b.n	80087f0 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	20001dec 	.word	0x20001dec

08008800 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b094      	sub	sp, #80	; 0x50
 8008804:	af02      	add	r7, sp, #8
 8008806:	60b9      	str	r1, [r7, #8]
 8008808:	607a      	str	r2, [r7, #4]
 800880a:	603b      	str	r3, [r7, #0]
 800880c:	4603      	mov	r3, r0
 800880e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8008816:	7bf9      	ldrb	r1, [r7, #15]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	4813      	ldr	r0, [pc, #76]	; (8008870 <USBH_read+0x70>)
 8008822:	f000 fe59 	bl	80094d8 <USBH_MSC_Read>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d103      	bne.n	8008834 <USBH_read+0x34>
  {
    res = RES_OK;
 800882c:	2300      	movs	r3, #0
 800882e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008832:	e017      	b.n	8008864 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008834:	f107 0210 	add.w	r2, r7, #16
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	4619      	mov	r1, r3
 800883c:	480c      	ldr	r0, [pc, #48]	; (8008870 <USBH_read+0x70>)
 800883e:	f000 fe27 	bl	8009490 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008842:	7f7b      	ldrb	r3, [r7, #29]
 8008844:	2b3a      	cmp	r3, #58	; 0x3a
 8008846:	d005      	beq.n	8008854 <USBH_read+0x54>
 8008848:	2b3a      	cmp	r3, #58	; 0x3a
 800884a:	dc07      	bgt.n	800885c <USBH_read+0x5c>
 800884c:	2b04      	cmp	r3, #4
 800884e:	d001      	beq.n	8008854 <USBH_read+0x54>
 8008850:	2b28      	cmp	r3, #40	; 0x28
 8008852:	d103      	bne.n	800885c <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008854:	2303      	movs	r3, #3
 8008856:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800885a:	e003      	b.n	8008864 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008862:	bf00      	nop
    }
  }

  return res;
 8008864:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008868:	4618      	mov	r0, r3
 800886a:	3748      	adds	r7, #72	; 0x48
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	20001dec 	.word	0x20001dec

08008874 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b094      	sub	sp, #80	; 0x50
 8008878:	af02      	add	r7, sp, #8
 800887a:	60b9      	str	r1, [r7, #8]
 800887c:	607a      	str	r2, [r7, #4]
 800887e:	603b      	str	r3, [r7, #0]
 8008880:	4603      	mov	r3, r0
 8008882:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800888a:	7bf9      	ldrb	r1, [r7, #15]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	4817      	ldr	r0, [pc, #92]	; (80088f4 <USBH_write+0x80>)
 8008896:	f000 fe88 	bl	80095aa <USBH_MSC_Write>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d103      	bne.n	80088a8 <USBH_write+0x34>
  {
    res = RES_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80088a6:	e01f      	b.n	80088e8 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80088a8:	f107 0210 	add.w	r2, r7, #16
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
 80088ae:	4619      	mov	r1, r3
 80088b0:	4810      	ldr	r0, [pc, #64]	; (80088f4 <USBH_write+0x80>)
 80088b2:	f000 fded 	bl	8009490 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80088b6:	7f7b      	ldrb	r3, [r7, #29]
 80088b8:	2b3a      	cmp	r3, #58	; 0x3a
 80088ba:	d00d      	beq.n	80088d8 <USBH_write+0x64>
 80088bc:	2b3a      	cmp	r3, #58	; 0x3a
 80088be:	dc0f      	bgt.n	80088e0 <USBH_write+0x6c>
 80088c0:	2b28      	cmp	r3, #40	; 0x28
 80088c2:	d009      	beq.n	80088d8 <USBH_write+0x64>
 80088c4:	2b28      	cmp	r3, #40	; 0x28
 80088c6:	dc0b      	bgt.n	80088e0 <USBH_write+0x6c>
 80088c8:	2b04      	cmp	r3, #4
 80088ca:	d005      	beq.n	80088d8 <USBH_write+0x64>
 80088cc:	2b27      	cmp	r3, #39	; 0x27
 80088ce:	d107      	bne.n	80088e0 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80088d0:	2302      	movs	r3, #2
 80088d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80088d6:	e007      	b.n	80088e8 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80088d8:	2303      	movs	r3, #3
 80088da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80088de:	e003      	b.n	80088e8 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80088e6:	bf00      	nop
    }
  }

  return res;
 80088e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3748      	adds	r7, #72	; 0x48
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	20001dec 	.word	0x20001dec

080088f8 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b090      	sub	sp, #64	; 0x40
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	4603      	mov	r3, r0
 8008900:	603a      	str	r2, [r7, #0]
 8008902:	71fb      	strb	r3, [r7, #7]
 8008904:	460b      	mov	r3, r1
 8008906:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800890e:	79bb      	ldrb	r3, [r7, #6]
 8008910:	2b03      	cmp	r3, #3
 8008912:	d852      	bhi.n	80089ba <USBH_ioctl+0xc2>
 8008914:	a201      	add	r2, pc, #4	; (adr r2, 800891c <USBH_ioctl+0x24>)
 8008916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891a:	bf00      	nop
 800891c:	0800892d 	.word	0x0800892d
 8008920:	08008935 	.word	0x08008935
 8008924:	0800895f 	.word	0x0800895f
 8008928:	0800898b 	.word	0x0800898b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008932:	e045      	b.n	80089c0 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008934:	f107 0208 	add.w	r2, r7, #8
 8008938:	79fb      	ldrb	r3, [r7, #7]
 800893a:	4619      	mov	r1, r3
 800893c:	4823      	ldr	r0, [pc, #140]	; (80089cc <USBH_ioctl+0xd4>)
 800893e:	f000 fda7 	bl	8009490 <USBH_MSC_GetLUNInfo>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d106      	bne.n	8008956 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800894e:	2300      	movs	r3, #0
 8008950:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008954:	e034      	b.n	80089c0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800895c:	e030      	b.n	80089c0 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800895e:	f107 0208 	add.w	r2, r7, #8
 8008962:	79fb      	ldrb	r3, [r7, #7]
 8008964:	4619      	mov	r1, r3
 8008966:	4819      	ldr	r0, [pc, #100]	; (80089cc <USBH_ioctl+0xd4>)
 8008968:	f000 fd92 	bl	8009490 <USBH_MSC_GetLUNInfo>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d107      	bne.n	8008982 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008972:	8a3b      	ldrh	r3, [r7, #16]
 8008974:	461a      	mov	r2, r3
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008980:	e01e      	b.n	80089c0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008988:	e01a      	b.n	80089c0 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800898a:	f107 0208 	add.w	r2, r7, #8
 800898e:	79fb      	ldrb	r3, [r7, #7]
 8008990:	4619      	mov	r1, r3
 8008992:	480e      	ldr	r0, [pc, #56]	; (80089cc <USBH_ioctl+0xd4>)
 8008994:	f000 fd7c 	bl	8009490 <USBH_MSC_GetLUNInfo>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d109      	bne.n	80089b2 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800899e:	8a3b      	ldrh	r3, [r7, #16]
 80089a0:	0a5b      	lsrs	r3, r3, #9
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	461a      	mov	r2, r3
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80089b0:	e006      	b.n	80089c0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80089b8:	e002      	b.n	80089c0 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80089ba:	2304      	movs	r3, #4
 80089bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80089c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3740      	adds	r7, #64	; 0x40
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	20001dec 	.word	0x20001dec

080089d0 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80089d0:	b590      	push	{r4, r7, lr}
 80089d2:	b089      	sub	sp, #36	; 0x24
 80089d4:	af04      	add	r7, sp, #16
 80089d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089de:	7919      	ldrb	r1, [r3, #4]
 80089e0:	2350      	movs	r3, #80	; 0x50
 80089e2:	2206      	movs	r2, #6
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f001 fc6b 	bl	800a2c0 <USBH_FindInterface>
 80089ea:	4603      	mov	r3, r0
 80089ec:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80089ee:	7bfb      	ldrb	r3, [r7, #15]
 80089f0:	2bff      	cmp	r3, #255	; 0xff
 80089f2:	d002      	beq.n	80089fa <USBH_MSC_InterfaceInit+0x2a>
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d901      	bls.n	80089fe <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80089fa:	2302      	movs	r3, #2
 80089fc:	e106      	b.n	8008c0c <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f001 fc40 	bl	800a288 <USBH_SelectInterface>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d001      	beq.n	8008a16 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008a12:	2302      	movs	r3, #2
 8008a14:	e0fa      	b.n	8008c0c <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008a1c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008a20:	f006 fdf6 	bl	800f610 <malloc>
 8008a24:	4603      	mov	r3, r0
 8008a26:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a2e:	69db      	ldr	r3, [r3, #28]
 8008a30:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d101      	bne.n	8008a3c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008a38:	2302      	movs	r3, #2
 8008a3a:	e0e7      	b.n	8008c0c <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008a3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a40:	2100      	movs	r1, #0
 8008a42:	68b8      	ldr	r0, [r7, #8]
 8008a44:	f006 fea0 	bl	800f788 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	211a      	movs	r1, #26
 8008a4e:	fb01 f303 	mul.w	r3, r1, r3
 8008a52:	4413      	add	r3, r2
 8008a54:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	b25b      	sxtb	r3, r3
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	da16      	bge.n	8008a8e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	211a      	movs	r1, #26
 8008a66:	fb01 f303 	mul.w	r3, r1, r3
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008a70:	781a      	ldrb	r2, [r3, #0]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	211a      	movs	r1, #26
 8008a7c:	fb01 f303 	mul.w	r3, r1, r3
 8008a80:	4413      	add	r3, r2
 8008a82:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008a86:	881a      	ldrh	r2, [r3, #0]
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	815a      	strh	r2, [r3, #10]
 8008a8c:	e015      	b.n	8008aba <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008a8e:	7bfb      	ldrb	r3, [r7, #15]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	211a      	movs	r1, #26
 8008a94:	fb01 f303 	mul.w	r3, r1, r3
 8008a98:	4413      	add	r3, r2
 8008a9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008a9e:	781a      	ldrb	r2, [r3, #0]
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	211a      	movs	r1, #26
 8008aaa:	fb01 f303 	mul.w	r3, r1, r3
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008ab4:	881a      	ldrh	r2, [r3, #0]
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008aba:	7bfb      	ldrb	r3, [r7, #15]
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	211a      	movs	r1, #26
 8008ac0:	fb01 f303 	mul.w	r3, r1, r3
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	b25b      	sxtb	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	da16      	bge.n	8008b00 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	211a      	movs	r1, #26
 8008ad8:	fb01 f303 	mul.w	r3, r1, r3
 8008adc:	4413      	add	r3, r2
 8008ade:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008ae2:	781a      	ldrb	r2, [r3, #0]
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	211a      	movs	r1, #26
 8008aee:	fb01 f303 	mul.w	r3, r1, r3
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008af8:	881a      	ldrh	r2, [r3, #0]
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	815a      	strh	r2, [r3, #10]
 8008afe:	e015      	b.n	8008b2c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008b00:	7bfb      	ldrb	r3, [r7, #15]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	211a      	movs	r1, #26
 8008b06:	fb01 f303 	mul.w	r3, r1, r3
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b10:	781a      	ldrb	r2, [r3, #0]
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	211a      	movs	r1, #26
 8008b1c:	fb01 f303 	mul.w	r3, r1, r3
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008b26:	881a      	ldrh	r2, [r3, #0]
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2200      	movs	r2, #0
 8008b36:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	799b      	ldrb	r3, [r3, #6]
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f002 fed8 	bl	800b8fa <USBH_AllocPipe>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	79db      	ldrb	r3, [r3, #7]
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f002 fece 	bl	800b8fa <USBH_AllocPipe>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	461a      	mov	r2, r3
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fdc4 	bl	80096f4 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	799b      	ldrb	r3, [r3, #6]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d01e      	beq.n	8008bb2 <USBH_MSC_InterfaceInit+0x1e2>
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	891b      	ldrh	r3, [r3, #8]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d01a      	beq.n	8008bb2 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	7959      	ldrb	r1, [r3, #5]
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	7998      	ldrb	r0, [r3, #6]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	8912      	ldrh	r2, [r2, #8]
 8008b94:	9202      	str	r2, [sp, #8]
 8008b96:	2202      	movs	r2, #2
 8008b98:	9201      	str	r2, [sp, #4]
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	4623      	mov	r3, r4
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f002 fe7b 	bl	800b89c <USBH_OpenPipe>
 8008ba6:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	79db      	ldrb	r3, [r3, #7]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d02c      	beq.n	8008c0a <USBH_MSC_InterfaceInit+0x23a>
 8008bb0:	e001      	b.n	8008bb6 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e02a      	b.n	8008c0c <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	895b      	ldrh	r3, [r3, #10]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d025      	beq.n	8008c0a <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	7919      	ldrb	r1, [r3, #4]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	79d8      	ldrb	r0, [r3, #7]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	8952      	ldrh	r2, [r2, #10]
 8008bd6:	9202      	str	r2, [sp, #8]
 8008bd8:	2202      	movs	r2, #2
 8008bda:	9201      	str	r2, [sp, #4]
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	4623      	mov	r3, r4
 8008be0:	4602      	mov	r2, r0
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f002 fe5a 	bl	800b89c <USBH_OpenPipe>
 8008be8:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	791b      	ldrb	r3, [r3, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f006 fc58 	bl	800f4a8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	795b      	ldrb	r3, [r3, #5]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f006 fc51 	bl	800f4a8 <USBH_LL_SetToggle>

  return USBH_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	e000      	b.n	8008c0c <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8008c0a:	2303      	movs	r3, #3
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd90      	pop	{r4, r7, pc}

08008c14 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c22:	69db      	ldr	r3, [r3, #28]
 8008c24:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	795b      	ldrb	r3, [r3, #5]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00e      	beq.n	8008c4c <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	795b      	ldrb	r3, [r3, #5]
 8008c32:	4619      	mov	r1, r3
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f002 fe50 	bl	800b8da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	795b      	ldrb	r3, [r3, #5]
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f002 fe7b 	bl	800b93c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	791b      	ldrb	r3, [r3, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00e      	beq.n	8008c72 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	791b      	ldrb	r3, [r3, #4]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f002 fe3d 	bl	800b8da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	791b      	ldrb	r3, [r3, #4]
 8008c64:	4619      	mov	r1, r3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f002 fe68 	bl	800b93c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00b      	beq.n	8008c96 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f006 fcca 	bl	800f620 <free>
    phost->pActiveClass->pData = 0U;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c92:	2200      	movs	r2, #0
 8008c94:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	7b9b      	ldrb	r3, [r3, #14]
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d041      	beq.n	8008d42 <USBH_MSC_ClassRequest+0xa2>
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	dc4b      	bgt.n	8008d5a <USBH_MSC_ClassRequest+0xba>
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d001      	beq.n	8008cca <USBH_MSC_ClassRequest+0x2a>
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d147      	bne.n	8008d5a <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	4619      	mov	r1, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fcf1 	bl	80096b6 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
 8008cda:	2b03      	cmp	r3, #3
 8008cdc:	d104      	bne.n	8008ce8 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d137      	bne.n	8008d5e <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d804      	bhi.n	8008d00 <USBH_MSC_ClassRequest+0x60>
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	e000      	b.n	8008d02 <USBH_MSC_ClassRequest+0x62>
 8008d00:	2202      	movs	r2, #2
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008d06:	2300      	movs	r3, #0
 8008d08:	73bb      	strb	r3, [r7, #14]
 8008d0a:	e014      	b.n	8008d36 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008d0c:	7bbb      	ldrb	r3, [r7, #14]
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	2134      	movs	r1, #52	; 0x34
 8008d12:	fb01 f303 	mul.w	r3, r1, r3
 8008d16:	4413      	add	r3, r2
 8008d18:	3392      	adds	r3, #146	; 0x92
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008d1e:	7bbb      	ldrb	r3, [r7, #14]
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	2134      	movs	r1, #52	; 0x34
 8008d24:	fb01 f303 	mul.w	r3, r1, r3
 8008d28:	4413      	add	r3, r2
 8008d2a:	33c1      	adds	r3, #193	; 0xc1
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008d30:	7bbb      	ldrb	r3, [r7, #14]
 8008d32:	3301      	adds	r3, #1
 8008d34:	73bb      	strb	r3, [r7, #14]
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	7bba      	ldrb	r2, [r7, #14]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d3e5      	bcc.n	8008d0c <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008d40:	e00d      	b.n	8008d5e <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008d42:	2100      	movs	r1, #0
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f002 f888 	bl	800ae5a <USBH_ClrFeature>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d108      	bne.n	8008d62 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	7bda      	ldrb	r2, [r3, #15]
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008d58:	e003      	b.n	8008d62 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8008d5a:	bf00      	nop
 8008d5c:	e002      	b.n	8008d64 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008d5e:	bf00      	nop
 8008d60:	e000      	b.n	8008d64 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008d62:	bf00      	nop
  }

  return status;
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d7e:	69db      	ldr	r3, [r3, #28]
 8008d80:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008d82:	2301      	movs	r3, #1
 8008d84:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008d86:	2301      	movs	r3, #1
 8008d88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	7b1b      	ldrb	r3, [r3, #12]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <USBH_MSC_Process+0x2e>
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	f000 8271 	beq.w	800927e <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008d9c:	e272      	b.n	8009284 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	429a      	cmp	r2, r3
 8008dac:	f080 824f 	bcs.w	800924e <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008db6:	4619      	mov	r1, r3
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	2334      	movs	r3, #52	; 0x34
 8008dbc:	fb01 f303 	mul.w	r3, r1, r3
 8008dc0:	4413      	add	r3, r2
 8008dc2:	3391      	adds	r3, #145	; 0x91
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008dce:	4619      	mov	r1, r3
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	2334      	movs	r3, #52	; 0x34
 8008dd4:	fb01 f303 	mul.w	r3, r1, r3
 8008dd8:	4413      	add	r3, r2
 8008dda:	3390      	adds	r3, #144	; 0x90
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	2b08      	cmp	r3, #8
 8008de0:	f200 8243 	bhi.w	800926a <USBH_MSC_Process+0x4fa>
 8008de4:	a201      	add	r2, pc, #4	; (adr r2, 8008dec <USBH_MSC_Process+0x7c>)
 8008de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dea:	bf00      	nop
 8008dec:	08008e11 	.word	0x08008e11
 8008df0:	0800926b 	.word	0x0800926b
 8008df4:	08008ed9 	.word	0x08008ed9
 8008df8:	0800905d 	.word	0x0800905d
 8008dfc:	08008e37 	.word	0x08008e37
 8008e00:	08009129 	.word	0x08009129
 8008e04:	0800926b 	.word	0x0800926b
 8008e08:	0800926b 	.word	0x0800926b
 8008e0c:	0800923d 	.word	0x0800923d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e16:	4619      	mov	r1, r3
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	2334      	movs	r3, #52	; 0x34
 8008e1c:	fb01 f303 	mul.w	r3, r1, r3
 8008e20:	4413      	add	r3, r2
 8008e22:	3390      	adds	r3, #144	; 0x90
 8008e24:	2204      	movs	r2, #4
 8008e26:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008e34:	e222      	b.n	800927c <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e3c:	b2d9      	uxtb	r1, r3
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e44:	461a      	mov	r2, r3
 8008e46:	2334      	movs	r3, #52	; 0x34
 8008e48:	fb02 f303 	mul.w	r3, r2, r3
 8008e4c:	3398      	adds	r3, #152	; 0x98
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	4413      	add	r3, r2
 8008e52:	3307      	adds	r3, #7
 8008e54:	461a      	mov	r2, r3
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 ff6a 	bl	8009d30 <USBH_MSC_SCSI_Inquiry>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10b      	bne.n	8008e7e <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	2334      	movs	r3, #52	; 0x34
 8008e72:	fb01 f303 	mul.w	r3, r1, r3
 8008e76:	4413      	add	r3, r2
 8008e78:	3390      	adds	r3, #144	; 0x90
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	d10c      	bne.n	8008e9e <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	693a      	ldr	r2, [r7, #16]
 8008e8e:	2334      	movs	r3, #52	; 0x34
 8008e90:	fb01 f303 	mul.w	r3, r1, r3
 8008e94:	4413      	add	r3, r2
 8008e96:	3390      	adds	r3, #144	; 0x90
 8008e98:	2205      	movs	r2, #5
 8008e9a:	701a      	strb	r2, [r3, #0]
            break;
 8008e9c:	e1e7      	b.n	800926e <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008e9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ea0:	2b04      	cmp	r3, #4
 8008ea2:	f040 81e4 	bne.w	800926e <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eac:	4619      	mov	r1, r3
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	2334      	movs	r3, #52	; 0x34
 8008eb2:	fb01 f303 	mul.w	r3, r1, r3
 8008eb6:	4413      	add	r3, r2
 8008eb8:	3390      	adds	r3, #144	; 0x90
 8008eba:	2201      	movs	r2, #1
 8008ebc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	2334      	movs	r3, #52	; 0x34
 8008eca:	fb01 f303 	mul.w	r3, r1, r3
 8008ece:	4413      	add	r3, r2
 8008ed0:	3391      	adds	r3, #145	; 0x91
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	701a      	strb	r2, [r3, #0]
            break;
 8008ed6:	e1ca      	b.n	800926e <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 fe66 	bl	8009bb4 <USBH_MSC_SCSI_TestUnitReady>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008eec:	7bbb      	ldrb	r3, [r7, #14]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d149      	bne.n	8008f86 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ef8:	4619      	mov	r1, r3
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	2334      	movs	r3, #52	; 0x34
 8008efe:	fb01 f303 	mul.w	r3, r1, r3
 8008f02:	4413      	add	r3, r2
 8008f04:	3392      	adds	r3, #146	; 0x92
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00c      	beq.n	8008f26 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f12:	4619      	mov	r1, r3
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	2334      	movs	r3, #52	; 0x34
 8008f18:	fb01 f303 	mul.w	r3, r1, r3
 8008f1c:	4413      	add	r3, r2
 8008f1e:	33c1      	adds	r3, #193	; 0xc1
 8008f20:	2201      	movs	r2, #1
 8008f22:	701a      	strb	r2, [r3, #0]
 8008f24:	e00b      	b.n	8008f3e <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	693a      	ldr	r2, [r7, #16]
 8008f30:	2334      	movs	r3, #52	; 0x34
 8008f32:	fb01 f303 	mul.w	r3, r1, r3
 8008f36:	4413      	add	r3, r2
 8008f38:	33c1      	adds	r3, #193	; 0xc1
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f44:	4619      	mov	r1, r3
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	2334      	movs	r3, #52	; 0x34
 8008f4a:	fb01 f303 	mul.w	r3, r1, r3
 8008f4e:	4413      	add	r3, r2
 8008f50:	3390      	adds	r3, #144	; 0x90
 8008f52:	2203      	movs	r2, #3
 8008f54:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	693a      	ldr	r2, [r7, #16]
 8008f60:	2334      	movs	r3, #52	; 0x34
 8008f62:	fb01 f303 	mul.w	r3, r1, r3
 8008f66:	4413      	add	r3, r2
 8008f68:	3391      	adds	r3, #145	; 0x91
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f74:	4619      	mov	r1, r3
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	2334      	movs	r3, #52	; 0x34
 8008f7a:	fb01 f303 	mul.w	r3, r1, r3
 8008f7e:	4413      	add	r3, r2
 8008f80:	3392      	adds	r3, #146	; 0x92
 8008f82:	2200      	movs	r2, #0
 8008f84:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8008f86:	7bbb      	ldrb	r3, [r7, #14]
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d14a      	bne.n	8009022 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f92:	4619      	mov	r1, r3
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	2334      	movs	r3, #52	; 0x34
 8008f98:	fb01 f303 	mul.w	r3, r1, r3
 8008f9c:	4413      	add	r3, r2
 8008f9e:	3392      	adds	r3, #146	; 0x92
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d00c      	beq.n	8008fc0 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fac:	4619      	mov	r1, r3
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	2334      	movs	r3, #52	; 0x34
 8008fb2:	fb01 f303 	mul.w	r3, r1, r3
 8008fb6:	4413      	add	r3, r2
 8008fb8:	33c1      	adds	r3, #193	; 0xc1
 8008fba:	2201      	movs	r2, #1
 8008fbc:	701a      	strb	r2, [r3, #0]
 8008fbe:	e00b      	b.n	8008fd8 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	2334      	movs	r3, #52	; 0x34
 8008fcc:	fb01 f303 	mul.w	r3, r1, r3
 8008fd0:	4413      	add	r3, r2
 8008fd2:	33c1      	adds	r3, #193	; 0xc1
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fde:	4619      	mov	r1, r3
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	2334      	movs	r3, #52	; 0x34
 8008fe4:	fb01 f303 	mul.w	r3, r1, r3
 8008fe8:	4413      	add	r3, r2
 8008fea:	3390      	adds	r3, #144	; 0x90
 8008fec:	2205      	movs	r2, #5
 8008fee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	2334      	movs	r3, #52	; 0x34
 8008ffc:	fb01 f303 	mul.w	r3, r1, r3
 8009000:	4413      	add	r3, r2
 8009002:	3391      	adds	r3, #145	; 0x91
 8009004:	2201      	movs	r2, #1
 8009006:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800900e:	4619      	mov	r1, r3
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	2334      	movs	r3, #52	; 0x34
 8009014:	fb01 f303 	mul.w	r3, r1, r3
 8009018:	4413      	add	r3, r2
 800901a:	3392      	adds	r3, #146	; 0x92
 800901c:	2202      	movs	r2, #2
 800901e:	701a      	strb	r2, [r3, #0]
            break;
 8009020:	e127      	b.n	8009272 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009022:	7bbb      	ldrb	r3, [r7, #14]
 8009024:	2b04      	cmp	r3, #4
 8009026:	f040 8124 	bne.w	8009272 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009030:	4619      	mov	r1, r3
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	2334      	movs	r3, #52	; 0x34
 8009036:	fb01 f303 	mul.w	r3, r1, r3
 800903a:	4413      	add	r3, r2
 800903c:	3390      	adds	r3, #144	; 0x90
 800903e:	2201      	movs	r2, #1
 8009040:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009048:	4619      	mov	r1, r3
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	2334      	movs	r3, #52	; 0x34
 800904e:	fb01 f303 	mul.w	r3, r1, r3
 8009052:	4413      	add	r3, r2
 8009054:	3391      	adds	r3, #145	; 0x91
 8009056:	2202      	movs	r2, #2
 8009058:	701a      	strb	r2, [r3, #0]
            break;
 800905a:	e10a      	b.n	8009272 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009062:	b2d9      	uxtb	r1, r3
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800906a:	461a      	mov	r2, r3
 800906c:	2334      	movs	r3, #52	; 0x34
 800906e:	fb02 f303 	mul.w	r3, r2, r3
 8009072:	3390      	adds	r3, #144	; 0x90
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	4413      	add	r3, r2
 8009078:	3304      	adds	r3, #4
 800907a:	461a      	mov	r2, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 fddc 	bl	8009c3a <USBH_MSC_SCSI_ReadCapacity>
 8009082:	4603      	mov	r3, r0
 8009084:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009086:	7bfb      	ldrb	r3, [r7, #15]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d120      	bne.n	80090ce <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009092:	4619      	mov	r1, r3
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	2334      	movs	r3, #52	; 0x34
 8009098:	fb01 f303 	mul.w	r3, r1, r3
 800909c:	4413      	add	r3, r2
 800909e:	3390      	adds	r3, #144	; 0x90
 80090a0:	2201      	movs	r2, #1
 80090a2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090aa:	4619      	mov	r1, r3
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	2334      	movs	r3, #52	; 0x34
 80090b0:	fb01 f303 	mul.w	r3, r1, r3
 80090b4:	4413      	add	r3, r2
 80090b6:	3391      	adds	r3, #145	; 0x91
 80090b8:	2200      	movs	r2, #0
 80090ba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090c2:	3301      	adds	r3, #1
 80090c4:	b29a      	uxth	r2, r3
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80090cc:	e0d3      	b.n	8009276 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80090ce:	7bfb      	ldrb	r3, [r7, #15]
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d10c      	bne.n	80090ee <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090da:	4619      	mov	r1, r3
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	2334      	movs	r3, #52	; 0x34
 80090e0:	fb01 f303 	mul.w	r3, r1, r3
 80090e4:	4413      	add	r3, r2
 80090e6:	3390      	adds	r3, #144	; 0x90
 80090e8:	2205      	movs	r2, #5
 80090ea:	701a      	strb	r2, [r3, #0]
            break;
 80090ec:	e0c3      	b.n	8009276 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
 80090f0:	2b04      	cmp	r3, #4
 80090f2:	f040 80c0 	bne.w	8009276 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090fc:	4619      	mov	r1, r3
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	2334      	movs	r3, #52	; 0x34
 8009102:	fb01 f303 	mul.w	r3, r1, r3
 8009106:	4413      	add	r3, r2
 8009108:	3390      	adds	r3, #144	; 0x90
 800910a:	2201      	movs	r2, #1
 800910c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009114:	4619      	mov	r1, r3
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	2334      	movs	r3, #52	; 0x34
 800911a:	fb01 f303 	mul.w	r3, r1, r3
 800911e:	4413      	add	r3, r2
 8009120:	3391      	adds	r3, #145	; 0x91
 8009122:	2202      	movs	r2, #2
 8009124:	701a      	strb	r2, [r3, #0]
            break;
 8009126:	e0a6      	b.n	8009276 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800912e:	b2d9      	uxtb	r1, r3
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009136:	461a      	mov	r2, r3
 8009138:	2334      	movs	r3, #52	; 0x34
 800913a:	fb02 f303 	mul.w	r3, r2, r3
 800913e:	3398      	adds	r3, #152	; 0x98
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	4413      	add	r3, r2
 8009144:	3304      	adds	r3, #4
 8009146:	461a      	mov	r2, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 fe96 	bl	8009e7a <USBH_MSC_SCSI_RequestSense>
 800914e:	4603      	mov	r3, r0
 8009150:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d145      	bne.n	80091e4 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800915e:	4619      	mov	r1, r3
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	2334      	movs	r3, #52	; 0x34
 8009164:	fb01 f303 	mul.w	r3, r1, r3
 8009168:	4413      	add	r3, r2
 800916a:	339c      	adds	r3, #156	; 0x9c
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	2b06      	cmp	r3, #6
 8009170:	d00c      	beq.n	800918c <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009178:	4619      	mov	r1, r3
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	2334      	movs	r3, #52	; 0x34
 800917e:	fb01 f303 	mul.w	r3, r1, r3
 8009182:	4413      	add	r3, r2
 8009184:	339c      	adds	r3, #156	; 0x9c
 8009186:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009188:	2b02      	cmp	r3, #2
 800918a:	d117      	bne.n	80091bc <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	f242 720f 	movw	r2, #9999	; 0x270f
 800919e:	4293      	cmp	r3, r2
 80091a0:	d80c      	bhi.n	80091bc <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091a8:	4619      	mov	r1, r3
 80091aa:	693a      	ldr	r2, [r7, #16]
 80091ac:	2334      	movs	r3, #52	; 0x34
 80091ae:	fb01 f303 	mul.w	r3, r1, r3
 80091b2:	4413      	add	r3, r2
 80091b4:	3390      	adds	r3, #144	; 0x90
 80091b6:	2202      	movs	r2, #2
 80091b8:	701a      	strb	r2, [r3, #0]
                  break;
 80091ba:	e05f      	b.n	800927c <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091c2:	4619      	mov	r1, r3
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	2334      	movs	r3, #52	; 0x34
 80091c8:	fb01 f303 	mul.w	r3, r1, r3
 80091cc:	4413      	add	r3, r2
 80091ce:	3390      	adds	r3, #144	; 0x90
 80091d0:	2201      	movs	r2, #1
 80091d2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091da:	3301      	adds	r3, #1
 80091dc:	b29a      	uxth	r2, r3
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d10c      	bne.n	8009204 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091f0:	4619      	mov	r1, r3
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	2334      	movs	r3, #52	; 0x34
 80091f6:	fb01 f303 	mul.w	r3, r1, r3
 80091fa:	4413      	add	r3, r2
 80091fc:	3390      	adds	r3, #144	; 0x90
 80091fe:	2208      	movs	r2, #8
 8009200:	701a      	strb	r2, [r3, #0]
            break;
 8009202:	e03a      	b.n	800927a <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009204:	7bfb      	ldrb	r3, [r7, #15]
 8009206:	2b04      	cmp	r3, #4
 8009208:	d137      	bne.n	800927a <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009210:	4619      	mov	r1, r3
 8009212:	693a      	ldr	r2, [r7, #16]
 8009214:	2334      	movs	r3, #52	; 0x34
 8009216:	fb01 f303 	mul.w	r3, r1, r3
 800921a:	4413      	add	r3, r2
 800921c:	3390      	adds	r3, #144	; 0x90
 800921e:	2201      	movs	r2, #1
 8009220:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009228:	4619      	mov	r1, r3
 800922a:	693a      	ldr	r2, [r7, #16]
 800922c:	2334      	movs	r3, #52	; 0x34
 800922e:	fb01 f303 	mul.w	r3, r1, r3
 8009232:	4413      	add	r3, r2
 8009234:	3391      	adds	r3, #145	; 0x91
 8009236:	2202      	movs	r2, #2
 8009238:	701a      	strb	r2, [r3, #0]
            break;
 800923a:	e01e      	b.n	800927a <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009242:	3301      	adds	r3, #1
 8009244:	b29a      	uxth	r2, r3
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800924c:	e016      	b.n	800927c <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	2200      	movs	r2, #0
 8009252:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	2201      	movs	r2, #1
 800925a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009262:	2102      	movs	r1, #2
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	4798      	blx	r3
      break;
 8009268:	e00c      	b.n	8009284 <USBH_MSC_Process+0x514>
            break;
 800926a:	bf00      	nop
 800926c:	e00a      	b.n	8009284 <USBH_MSC_Process+0x514>
            break;
 800926e:	bf00      	nop
 8009270:	e008      	b.n	8009284 <USBH_MSC_Process+0x514>
            break;
 8009272:	bf00      	nop
 8009274:	e006      	b.n	8009284 <USBH_MSC_Process+0x514>
            break;
 8009276:	bf00      	nop
 8009278:	e004      	b.n	8009284 <USBH_MSC_Process+0x514>
            break;
 800927a:	bf00      	nop
      break;
 800927c:	e002      	b.n	8009284 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	75fb      	strb	r3, [r7, #23]
      break;
 8009282:	bf00      	nop
  }
  return error;
 8009284:	7dfb      	ldrb	r3, [r7, #23]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3718      	adds	r7, #24
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop

08009290 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	370c      	adds	r7, #12
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr

080092a6 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b088      	sub	sp, #32
 80092aa:	af02      	add	r7, sp, #8
 80092ac:	6078      	str	r0, [r7, #4]
 80092ae:	460b      	mov	r3, r1
 80092b0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092b8:	69db      	ldr	r3, [r3, #28]
 80092ba:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80092bc:	2301      	movs	r3, #1
 80092be:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80092c0:	2301      	movs	r3, #1
 80092c2:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80092c4:	78fb      	ldrb	r3, [r7, #3]
 80092c6:	693a      	ldr	r2, [r7, #16]
 80092c8:	2134      	movs	r1, #52	; 0x34
 80092ca:	fb01 f303 	mul.w	r3, r1, r3
 80092ce:	4413      	add	r3, r2
 80092d0:	3390      	adds	r3, #144	; 0x90
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	2b07      	cmp	r3, #7
 80092d6:	d03c      	beq.n	8009352 <USBH_MSC_RdWrProcess+0xac>
 80092d8:	2b07      	cmp	r3, #7
 80092da:	f300 80a7 	bgt.w	800942c <USBH_MSC_RdWrProcess+0x186>
 80092de:	2b05      	cmp	r3, #5
 80092e0:	d06c      	beq.n	80093bc <USBH_MSC_RdWrProcess+0x116>
 80092e2:	2b06      	cmp	r3, #6
 80092e4:	f040 80a2 	bne.w	800942c <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80092e8:	78f9      	ldrb	r1, [r7, #3]
 80092ea:	2300      	movs	r3, #0
 80092ec:	9300      	str	r3, [sp, #0]
 80092ee:	2300      	movs	r3, #0
 80092f0:	2200      	movs	r2, #0
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fea5 	bl	800a042 <USBH_MSC_SCSI_Read>
 80092f8:	4603      	mov	r3, r0
 80092fa:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80092fc:	7bfb      	ldrb	r3, [r7, #15]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10b      	bne.n	800931a <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009302:	78fb      	ldrb	r3, [r7, #3]
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	2134      	movs	r1, #52	; 0x34
 8009308:	fb01 f303 	mul.w	r3, r1, r3
 800930c:	4413      	add	r3, r2
 800930e:	3390      	adds	r3, #144	; 0x90
 8009310:	2201      	movs	r2, #1
 8009312:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009318:	e08a      	b.n	8009430 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800931a:	7bfb      	ldrb	r3, [r7, #15]
 800931c:	2b02      	cmp	r3, #2
 800931e:	d109      	bne.n	8009334 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009320:	78fb      	ldrb	r3, [r7, #3]
 8009322:	693a      	ldr	r2, [r7, #16]
 8009324:	2134      	movs	r1, #52	; 0x34
 8009326:	fb01 f303 	mul.w	r3, r1, r3
 800932a:	4413      	add	r3, r2
 800932c:	3390      	adds	r3, #144	; 0x90
 800932e:	2205      	movs	r2, #5
 8009330:	701a      	strb	r2, [r3, #0]
      break;
 8009332:	e07d      	b.n	8009430 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009334:	7bfb      	ldrb	r3, [r7, #15]
 8009336:	2b04      	cmp	r3, #4
 8009338:	d17a      	bne.n	8009430 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800933a:	78fb      	ldrb	r3, [r7, #3]
 800933c:	693a      	ldr	r2, [r7, #16]
 800933e:	2134      	movs	r1, #52	; 0x34
 8009340:	fb01 f303 	mul.w	r3, r1, r3
 8009344:	4413      	add	r3, r2
 8009346:	3390      	adds	r3, #144	; 0x90
 8009348:	2208      	movs	r2, #8
 800934a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800934c:	2302      	movs	r3, #2
 800934e:	75fb      	strb	r3, [r7, #23]
      break;
 8009350:	e06e      	b.n	8009430 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009352:	78f9      	ldrb	r1, [r7, #3]
 8009354:	2300      	movs	r3, #0
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	2300      	movs	r3, #0
 800935a:	2200      	movs	r2, #0
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fe05 	bl	8009f6c <USBH_MSC_SCSI_Write>
 8009362:	4603      	mov	r3, r0
 8009364:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009366:	7bfb      	ldrb	r3, [r7, #15]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10b      	bne.n	8009384 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800936c:	78fb      	ldrb	r3, [r7, #3]
 800936e:	693a      	ldr	r2, [r7, #16]
 8009370:	2134      	movs	r1, #52	; 0x34
 8009372:	fb01 f303 	mul.w	r3, r1, r3
 8009376:	4413      	add	r3, r2
 8009378:	3390      	adds	r3, #144	; 0x90
 800937a:	2201      	movs	r2, #1
 800937c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009382:	e057      	b.n	8009434 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009384:	7bfb      	ldrb	r3, [r7, #15]
 8009386:	2b02      	cmp	r3, #2
 8009388:	d109      	bne.n	800939e <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800938a:	78fb      	ldrb	r3, [r7, #3]
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	2134      	movs	r1, #52	; 0x34
 8009390:	fb01 f303 	mul.w	r3, r1, r3
 8009394:	4413      	add	r3, r2
 8009396:	3390      	adds	r3, #144	; 0x90
 8009398:	2205      	movs	r2, #5
 800939a:	701a      	strb	r2, [r3, #0]
      break;
 800939c:	e04a      	b.n	8009434 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800939e:	7bfb      	ldrb	r3, [r7, #15]
 80093a0:	2b04      	cmp	r3, #4
 80093a2:	d147      	bne.n	8009434 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80093a4:	78fb      	ldrb	r3, [r7, #3]
 80093a6:	693a      	ldr	r2, [r7, #16]
 80093a8:	2134      	movs	r1, #52	; 0x34
 80093aa:	fb01 f303 	mul.w	r3, r1, r3
 80093ae:	4413      	add	r3, r2
 80093b0:	3390      	adds	r3, #144	; 0x90
 80093b2:	2208      	movs	r2, #8
 80093b4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80093b6:	2302      	movs	r3, #2
 80093b8:	75fb      	strb	r3, [r7, #23]
      break;
 80093ba:	e03b      	b.n	8009434 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80093bc:	78fb      	ldrb	r3, [r7, #3]
 80093be:	2234      	movs	r2, #52	; 0x34
 80093c0:	fb02 f303 	mul.w	r3, r2, r3
 80093c4:	3398      	adds	r3, #152	; 0x98
 80093c6:	693a      	ldr	r2, [r7, #16]
 80093c8:	4413      	add	r3, r2
 80093ca:	1d1a      	adds	r2, r3, #4
 80093cc:	78fb      	ldrb	r3, [r7, #3]
 80093ce:	4619      	mov	r1, r3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fd52 	bl	8009e7a <USBH_MSC_SCSI_RequestSense>
 80093d6:	4603      	mov	r3, r0
 80093d8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80093da:	7bfb      	ldrb	r3, [r7, #15]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d113      	bne.n	8009408 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80093e0:	78fb      	ldrb	r3, [r7, #3]
 80093e2:	693a      	ldr	r2, [r7, #16]
 80093e4:	2134      	movs	r1, #52	; 0x34
 80093e6:	fb01 f303 	mul.w	r3, r1, r3
 80093ea:	4413      	add	r3, r2
 80093ec:	3390      	adds	r3, #144	; 0x90
 80093ee:	2201      	movs	r2, #1
 80093f0:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80093f2:	78fb      	ldrb	r3, [r7, #3]
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	2134      	movs	r1, #52	; 0x34
 80093f8:	fb01 f303 	mul.w	r3, r1, r3
 80093fc:	4413      	add	r3, r2
 80093fe:	3391      	adds	r3, #145	; 0x91
 8009400:	2202      	movs	r2, #2
 8009402:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009404:	2302      	movs	r3, #2
 8009406:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8009408:	7bfb      	ldrb	r3, [r7, #15]
 800940a:	2b02      	cmp	r3, #2
 800940c:	d014      	beq.n	8009438 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800940e:	7bfb      	ldrb	r3, [r7, #15]
 8009410:	2b04      	cmp	r3, #4
 8009412:	d111      	bne.n	8009438 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009414:	78fb      	ldrb	r3, [r7, #3]
 8009416:	693a      	ldr	r2, [r7, #16]
 8009418:	2134      	movs	r1, #52	; 0x34
 800941a:	fb01 f303 	mul.w	r3, r1, r3
 800941e:	4413      	add	r3, r2
 8009420:	3390      	adds	r3, #144	; 0x90
 8009422:	2208      	movs	r2, #8
 8009424:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009426:	2302      	movs	r3, #2
 8009428:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800942a:	e005      	b.n	8009438 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800942c:	bf00      	nop
 800942e:	e004      	b.n	800943a <USBH_MSC_RdWrProcess+0x194>
      break;
 8009430:	bf00      	nop
 8009432:	e002      	b.n	800943a <USBH_MSC_RdWrProcess+0x194>
      break;
 8009434:	bf00      	nop
 8009436:	e000      	b.n	800943a <USBH_MSC_RdWrProcess+0x194>
      break;
 8009438:	bf00      	nop

  }
  return error;
 800943a:	7dfb      	ldrb	r3, [r7, #23]
}
 800943c:	4618      	mov	r0, r3
 800943e:	3718      	adds	r7, #24
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	460b      	mov	r3, r1
 800944e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009456:	69db      	ldr	r3, [r3, #28]
 8009458:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	b2db      	uxtb	r3, r3
 8009460:	2b0b      	cmp	r3, #11
 8009462:	d10c      	bne.n	800947e <USBH_MSC_UnitIsReady+0x3a>
 8009464:	78fb      	ldrb	r3, [r7, #3]
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	2134      	movs	r1, #52	; 0x34
 800946a:	fb01 f303 	mul.w	r3, r1, r3
 800946e:	4413      	add	r3, r2
 8009470:	3391      	adds	r3, #145	; 0x91
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d102      	bne.n	800947e <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009478:	2301      	movs	r3, #1
 800947a:	73fb      	strb	r3, [r7, #15]
 800947c:	e001      	b.n	8009482 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800947e:	2300      	movs	r3, #0
 8009480:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009482:	7bfb      	ldrb	r3, [r7, #15]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	460b      	mov	r3, r1
 800949a:	607a      	str	r2, [r7, #4]
 800949c:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094a4:	69db      	ldr	r3, [r3, #28]
 80094a6:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2b0b      	cmp	r3, #11
 80094b0:	d10d      	bne.n	80094ce <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80094b2:	7afb      	ldrb	r3, [r7, #11]
 80094b4:	2234      	movs	r2, #52	; 0x34
 80094b6:	fb02 f303 	mul.w	r3, r2, r3
 80094ba:	3390      	adds	r3, #144	; 0x90
 80094bc:	697a      	ldr	r2, [r7, #20]
 80094be:	4413      	add	r3, r2
 80094c0:	2234      	movs	r2, #52	; 0x34
 80094c2:	4619      	mov	r1, r3
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f006 f9cd 	bl	800f864 <memcpy>
    return USBH_OK;
 80094ca:	2300      	movs	r3, #0
 80094cc:	e000      	b.n	80094d0 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80094ce:	2302      	movs	r3, #2
  }
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3718      	adds	r7, #24
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b088      	sub	sp, #32
 80094dc:	af02      	add	r7, sp, #8
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	607a      	str	r2, [r7, #4]
 80094e2:	603b      	str	r3, [r7, #0]
 80094e4:	460b      	mov	r3, r1
 80094e6:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094ee:	69db      	ldr	r3, [r3, #28]
 80094f0:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00e      	beq.n	800951c <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009504:	2b0b      	cmp	r3, #11
 8009506:	d109      	bne.n	800951c <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009508:	7afb      	ldrb	r3, [r7, #11]
 800950a:	697a      	ldr	r2, [r7, #20]
 800950c:	2134      	movs	r1, #52	; 0x34
 800950e:	fb01 f303 	mul.w	r3, r1, r3
 8009512:	4413      	add	r3, r2
 8009514:	3390      	adds	r3, #144	; 0x90
 8009516:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009518:	2b01      	cmp	r3, #1
 800951a:	d001      	beq.n	8009520 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800951c:	2302      	movs	r3, #2
 800951e:	e040      	b.n	80095a2 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	2206      	movs	r2, #6
 8009524:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009526:	7afb      	ldrb	r3, [r7, #11]
 8009528:	697a      	ldr	r2, [r7, #20]
 800952a:	2134      	movs	r1, #52	; 0x34
 800952c:	fb01 f303 	mul.w	r3, r1, r3
 8009530:	4413      	add	r3, r2
 8009532:	3390      	adds	r3, #144	; 0x90
 8009534:	2206      	movs	r2, #6
 8009536:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009538:	7afb      	ldrb	r3, [r7, #11]
 800953a:	b29a      	uxth	r2, r3
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009542:	7af9      	ldrb	r1, [r7, #11]
 8009544:	6a3b      	ldr	r3, [r7, #32]
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 fd78 	bl	800a042 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009558:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800955a:	e016      	b.n	800958a <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	1ad2      	subs	r2, r2, r3
 8009566:	6a3b      	ldr	r3, [r7, #32]
 8009568:	f242 7110 	movw	r1, #10000	; 0x2710
 800956c:	fb01 f303 	mul.w	r3, r1, r3
 8009570:	429a      	cmp	r2, r3
 8009572:	d805      	bhi.n	8009580 <USBH_MSC_Read+0xa8>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800957a:	b2db      	uxtb	r3, r3
 800957c:	2b00      	cmp	r3, #0
 800957e:	d104      	bne.n	800958a <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	2201      	movs	r2, #1
 8009584:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009586:	2302      	movs	r3, #2
 8009588:	e00b      	b.n	80095a2 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800958a:	7afb      	ldrb	r3, [r7, #11]
 800958c:	4619      	mov	r1, r3
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f7ff fe89 	bl	80092a6 <USBH_MSC_RdWrProcess>
 8009594:	4603      	mov	r3, r0
 8009596:	2b01      	cmp	r3, #1
 8009598:	d0e0      	beq.n	800955c <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	2201      	movs	r2, #1
 800959e:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3718      	adds	r7, #24
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b088      	sub	sp, #32
 80095ae:	af02      	add	r7, sp, #8
 80095b0:	60f8      	str	r0, [r7, #12]
 80095b2:	607a      	str	r2, [r7, #4]
 80095b4:	603b      	str	r3, [r7, #0]
 80095b6:	460b      	mov	r3, r1
 80095b8:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095c0:	69db      	ldr	r3, [r3, #28]
 80095c2:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00e      	beq.n	80095ee <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80095d6:	2b0b      	cmp	r3, #11
 80095d8:	d109      	bne.n	80095ee <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80095da:	7afb      	ldrb	r3, [r7, #11]
 80095dc:	697a      	ldr	r2, [r7, #20]
 80095de:	2134      	movs	r1, #52	; 0x34
 80095e0:	fb01 f303 	mul.w	r3, r1, r3
 80095e4:	4413      	add	r3, r2
 80095e6:	3390      	adds	r3, #144	; 0x90
 80095e8:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d001      	beq.n	80095f2 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80095ee:	2302      	movs	r3, #2
 80095f0:	e040      	b.n	8009674 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	2207      	movs	r2, #7
 80095f6:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80095f8:	7afb      	ldrb	r3, [r7, #11]
 80095fa:	697a      	ldr	r2, [r7, #20]
 80095fc:	2134      	movs	r1, #52	; 0x34
 80095fe:	fb01 f303 	mul.w	r3, r1, r3
 8009602:	4413      	add	r3, r2
 8009604:	3390      	adds	r3, #144	; 0x90
 8009606:	2207      	movs	r2, #7
 8009608:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800960a:	7afb      	ldrb	r3, [r7, #11]
 800960c:	b29a      	uxth	r2, r3
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009614:	7af9      	ldrb	r1, [r7, #11]
 8009616:	6a3b      	ldr	r3, [r7, #32]
 8009618:	9300      	str	r3, [sp, #0]
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f000 fca4 	bl	8009f6c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800962a:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800962c:	e016      	b.n	800965c <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	1ad2      	subs	r2, r2, r3
 8009638:	6a3b      	ldr	r3, [r7, #32]
 800963a:	f242 7110 	movw	r1, #10000	; 0x2710
 800963e:	fb01 f303 	mul.w	r3, r1, r3
 8009642:	429a      	cmp	r2, r3
 8009644:	d805      	bhi.n	8009652 <USBH_MSC_Write+0xa8>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d104      	bne.n	800965c <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	2201      	movs	r2, #1
 8009656:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009658:	2302      	movs	r3, #2
 800965a:	e00b      	b.n	8009674 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800965c:	7afb      	ldrb	r3, [r7, #11]
 800965e:	4619      	mov	r1, r3
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f7ff fe20 	bl	80092a6 <USBH_MSC_RdWrProcess>
 8009666:	4603      	mov	r3, r0
 8009668:	2b01      	cmp	r3, #1
 800966a:	d0e0      	beq.n	800962e <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	2201      	movs	r2, #1
 8009670:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3718      	adds	r7, #24
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2221      	movs	r2, #33	; 0x21
 8009688:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	22ff      	movs	r2, #255	; 0xff
 800968e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80096a2:	2200      	movs	r2, #0
 80096a4:	2100      	movs	r1, #0
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f001 fea6 	bl	800b3f8 <USBH_CtlReq>
 80096ac:	4603      	mov	r3, r0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b082      	sub	sp, #8
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	22a1      	movs	r2, #161	; 0xa1
 80096c4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	22fe      	movs	r2, #254	; 0xfe
 80096ca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80096de:	2201      	movs	r2, #1
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f001 fe88 	bl	800b3f8 <USBH_CtlReq>
 80096e8:	4603      	mov	r3, r0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
	...

080096f4 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009702:	69db      	ldr	r3, [r3, #28]
 8009704:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	4a09      	ldr	r2, [pc, #36]	; (8009730 <USBH_MSC_BOT_Init+0x3c>)
 800970a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	4a09      	ldr	r2, [pc, #36]	; (8009734 <USBH_MSC_BOT_Init+0x40>)
 8009710:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2201      	movs	r2, #1
 8009716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3714      	adds	r7, #20
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr
 8009730:	43425355 	.word	0x43425355
 8009734:	20304050 	.word	0x20304050

08009738 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b088      	sub	sp, #32
 800973c:	af02      	add	r7, sp, #8
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	460b      	mov	r3, r1
 8009742:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009744:	2301      	movs	r3, #1
 8009746:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009748:	2301      	movs	r3, #1
 800974a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800974c:	2301      	movs	r3, #1
 800974e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009750:	2300      	movs	r3, #0
 8009752:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800975a:	69db      	ldr	r3, [r3, #28]
 800975c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800975e:	2300      	movs	r3, #0
 8009760:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009768:	3b01      	subs	r3, #1
 800976a:	2b0a      	cmp	r3, #10
 800976c:	f200 819e 	bhi.w	8009aac <USBH_MSC_BOT_Process+0x374>
 8009770:	a201      	add	r2, pc, #4	; (adr r2, 8009778 <USBH_MSC_BOT_Process+0x40>)
 8009772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009776:	bf00      	nop
 8009778:	080097a5 	.word	0x080097a5
 800977c:	080097cd 	.word	0x080097cd
 8009780:	08009837 	.word	0x08009837
 8009784:	08009855 	.word	0x08009855
 8009788:	080098d9 	.word	0x080098d9
 800978c:	080098fb 	.word	0x080098fb
 8009790:	08009993 	.word	0x08009993
 8009794:	080099af 	.word	0x080099af
 8009798:	08009a01 	.word	0x08009a01
 800979c:	08009a31 	.word	0x08009a31
 80097a0:	08009a93 	.word	0x08009a93
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	78fa      	ldrb	r2, [r7, #3]
 80097a8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	2202      	movs	r2, #2
 80097b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	795b      	ldrb	r3, [r3, #5]
 80097be:	2201      	movs	r2, #1
 80097c0:	9200      	str	r2, [sp, #0]
 80097c2:	221f      	movs	r2, #31
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f002 f826 	bl	800b816 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80097ca:	e17e      	b.n	8009aca <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	795b      	ldrb	r3, [r3, #5]
 80097d0:	4619      	mov	r1, r3
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f005 fe3e 	bl	800f454 <USBH_LL_GetURBState>
 80097d8:	4603      	mov	r3, r0
 80097da:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80097dc:	7d3b      	ldrb	r3, [r7, #20]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d118      	bne.n	8009814 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00f      	beq.n	800980a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80097f0:	b25b      	sxtb	r3, r3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	da04      	bge.n	8009800 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	2203      	movs	r2, #3
 80097fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80097fe:	e157      	b.n	8009ab0 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	2205      	movs	r2, #5
 8009804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009808:	e152      	b.n	8009ab0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	2207      	movs	r2, #7
 800980e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009812:	e14d      	b.n	8009ab0 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009814:	7d3b      	ldrb	r3, [r7, #20]
 8009816:	2b02      	cmp	r3, #2
 8009818:	d104      	bne.n	8009824 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009822:	e145      	b.n	8009ab0 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009824:	7d3b      	ldrb	r3, [r7, #20]
 8009826:	2b05      	cmp	r3, #5
 8009828:	f040 8142 	bne.w	8009ab0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	220a      	movs	r2, #10
 8009830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009834:	e13c      	b.n	8009ab0 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	895a      	ldrh	r2, [r3, #10]
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	791b      	ldrb	r3, [r3, #4]
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f002 f80b 	bl	800b860 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	2204      	movs	r2, #4
 800984e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009852:	e13a      	b.n	8009aca <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	791b      	ldrb	r3, [r3, #4]
 8009858:	4619      	mov	r1, r3
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f005 fdfa 	bl	800f454 <USBH_LL_GetURBState>
 8009860:	4603      	mov	r3, r0
 8009862:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009864:	7d3b      	ldrb	r3, [r7, #20]
 8009866:	2b01      	cmp	r3, #1
 8009868:	d12d      	bne.n	80098c6 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800986e:	693a      	ldr	r2, [r7, #16]
 8009870:	8952      	ldrh	r2, [r2, #10]
 8009872:	4293      	cmp	r3, r2
 8009874:	d910      	bls.n	8009898 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	8952      	ldrh	r2, [r2, #10]
 8009880:	441a      	add	r2, r3
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	8952      	ldrh	r2, [r2, #10]
 8009890:	1a9a      	subs	r2, r3, r2
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	65da      	str	r2, [r3, #92]	; 0x5c
 8009896:	e002      	b.n	800989e <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	2200      	movs	r2, #0
 800989c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00a      	beq.n	80098bc <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	895a      	ldrh	r2, [r3, #10]
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	791b      	ldrb	r3, [r3, #4]
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f001 ffd3 	bl	800b860 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80098ba:	e0fb      	b.n	8009ab4 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	2207      	movs	r2, #7
 80098c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80098c4:	e0f6      	b.n	8009ab4 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 80098c6:	7d3b      	ldrb	r3, [r7, #20]
 80098c8:	2b05      	cmp	r3, #5
 80098ca:	f040 80f3 	bne.w	8009ab4 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	2209      	movs	r2, #9
 80098d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80098d6:	e0ed      	b.n	8009ab4 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	891a      	ldrh	r2, [r3, #8]
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	795b      	ldrb	r3, [r3, #5]
 80098e6:	2001      	movs	r0, #1
 80098e8:	9000      	str	r0, [sp, #0]
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f001 ff93 	bl	800b816 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	2206      	movs	r2, #6
 80098f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80098f8:	e0e7      	b.n	8009aca <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	795b      	ldrb	r3, [r3, #5]
 80098fe:	4619      	mov	r1, r3
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f005 fda7 	bl	800f454 <USBH_LL_GetURBState>
 8009906:	4603      	mov	r3, r0
 8009908:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800990a:	7d3b      	ldrb	r3, [r7, #20]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d12f      	bne.n	8009970 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009914:	693a      	ldr	r2, [r7, #16]
 8009916:	8912      	ldrh	r2, [r2, #8]
 8009918:	4293      	cmp	r3, r2
 800991a:	d910      	bls.n	800993e <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	8912      	ldrh	r2, [r2, #8]
 8009926:	441a      	add	r2, r3
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009932:	693a      	ldr	r2, [r7, #16]
 8009934:	8912      	ldrh	r2, [r2, #8]
 8009936:	1a9a      	subs	r2, r3, r2
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	65da      	str	r2, [r3, #92]	; 0x5c
 800993c:	e002      	b.n	8009944 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	2200      	movs	r2, #0
 8009942:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00c      	beq.n	8009966 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	891a      	ldrh	r2, [r3, #8]
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	795b      	ldrb	r3, [r3, #5]
 800995a:	2001      	movs	r0, #1
 800995c:	9000      	str	r0, [sp, #0]
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f001 ff59 	bl	800b816 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009964:	e0a8      	b.n	8009ab8 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	2207      	movs	r2, #7
 800996a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800996e:	e0a3      	b.n	8009ab8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009970:	7d3b      	ldrb	r3, [r7, #20]
 8009972:	2b02      	cmp	r3, #2
 8009974:	d104      	bne.n	8009980 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	2205      	movs	r2, #5
 800997a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800997e:	e09b      	b.n	8009ab8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009980:	7d3b      	ldrb	r3, [r7, #20]
 8009982:	2b05      	cmp	r3, #5
 8009984:	f040 8098 	bne.w	8009ab8 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	220a      	movs	r2, #10
 800998c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009990:	e092      	b.n	8009ab8 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	791b      	ldrb	r3, [r3, #4]
 800999c:	220d      	movs	r2, #13
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f001 ff5e 	bl	800b860 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	2208      	movs	r2, #8
 80099a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80099ac:	e08d      	b.n	8009aca <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	791b      	ldrb	r3, [r3, #4]
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f005 fd4d 	bl	800f454 <USBH_LL_GetURBState>
 80099ba:	4603      	mov	r3, r0
 80099bc:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80099be:	7d3b      	ldrb	r3, [r7, #20]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d115      	bne.n	80099f0 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 f8a9 	bl	8009b2c <USBH_MSC_DecodeCSW>
 80099da:	4603      	mov	r3, r0
 80099dc:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80099de:	7d7b      	ldrb	r3, [r7, #21]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d102      	bne.n	80099ea <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80099e8:	e068      	b.n	8009abc <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 80099ea:	2302      	movs	r3, #2
 80099ec:	75fb      	strb	r3, [r7, #23]
      break;
 80099ee:	e065      	b.n	8009abc <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 80099f0:	7d3b      	ldrb	r3, [r7, #20]
 80099f2:	2b05      	cmp	r3, #5
 80099f4:	d162      	bne.n	8009abc <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	2209      	movs	r2, #9
 80099fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80099fe:	e05d      	b.n	8009abc <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009a00:	78fb      	ldrb	r3, [r7, #3]
 8009a02:	2200      	movs	r2, #0
 8009a04:	4619      	mov	r1, r3
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f864 	bl	8009ad4 <USBH_MSC_BOT_Abort>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009a10:	7dbb      	ldrb	r3, [r7, #22]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d104      	bne.n	8009a20 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	2207      	movs	r2, #7
 8009a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009a1e:	e04f      	b.n	8009ac0 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009a20:	7dbb      	ldrb	r3, [r7, #22]
 8009a22:	2b04      	cmp	r3, #4
 8009a24:	d14c      	bne.n	8009ac0 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	220b      	movs	r2, #11
 8009a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a2e:	e047      	b.n	8009ac0 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009a30:	78fb      	ldrb	r3, [r7, #3]
 8009a32:	2201      	movs	r2, #1
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f84c 	bl	8009ad4 <USBH_MSC_BOT_Abort>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009a40:	7dbb      	ldrb	r3, [r7, #22]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d11d      	bne.n	8009a82 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	795b      	ldrb	r3, [r3, #5]
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f005 fd5b 	bl	800f508 <USBH_LL_GetToggle>
 8009a52:	4603      	mov	r3, r0
 8009a54:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	7959      	ldrb	r1, [r3, #5]
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
 8009a5c:	f1c3 0301 	rsb	r3, r3, #1
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	461a      	mov	r2, r3
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f005 fd1f 	bl	800f4a8 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	791b      	ldrb	r3, [r3, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	4619      	mov	r1, r3
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f005 fd18 	bl	800f4a8 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	2209      	movs	r2, #9
 8009a7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009a80:	e020      	b.n	8009ac4 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8009a82:	7dbb      	ldrb	r3, [r7, #22]
 8009a84:	2b04      	cmp	r3, #4
 8009a86:	d11d      	bne.n	8009ac4 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	220b      	movs	r2, #11
 8009a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a90:	e018      	b.n	8009ac4 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7ff fdf2 	bl	800967c <USBH_MSC_BOT_REQ_Reset>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009a9c:	7dfb      	ldrb	r3, [r7, #23]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d112      	bne.n	8009ac8 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009aaa:	e00d      	b.n	8009ac8 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009aac:	bf00      	nop
 8009aae:	e00c      	b.n	8009aca <USBH_MSC_BOT_Process+0x392>
      break;
 8009ab0:	bf00      	nop
 8009ab2:	e00a      	b.n	8009aca <USBH_MSC_BOT_Process+0x392>
      break;
 8009ab4:	bf00      	nop
 8009ab6:	e008      	b.n	8009aca <USBH_MSC_BOT_Process+0x392>
      break;
 8009ab8:	bf00      	nop
 8009aba:	e006      	b.n	8009aca <USBH_MSC_BOT_Process+0x392>
      break;
 8009abc:	bf00      	nop
 8009abe:	e004      	b.n	8009aca <USBH_MSC_BOT_Process+0x392>
      break;
 8009ac0:	bf00      	nop
 8009ac2:	e002      	b.n	8009aca <USBH_MSC_BOT_Process+0x392>
      break;
 8009ac4:	bf00      	nop
 8009ac6:	e000      	b.n	8009aca <USBH_MSC_BOT_Process+0x392>
      break;
 8009ac8:	bf00      	nop
  }
  return status;
 8009aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3718      	adds	r7, #24
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	460b      	mov	r3, r1
 8009ade:	70fb      	strb	r3, [r7, #3]
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009aee:	69db      	ldr	r3, [r3, #28]
 8009af0:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009af2:	78bb      	ldrb	r3, [r7, #2]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d002      	beq.n	8009afe <USBH_MSC_BOT_Abort+0x2a>
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d009      	beq.n	8009b10 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009afc:	e011      	b.n	8009b22 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	79db      	ldrb	r3, [r3, #7]
 8009b02:	4619      	mov	r1, r3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f001 f9a8 	bl	800ae5a <USBH_ClrFeature>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8009b0e:	e008      	b.n	8009b22 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	799b      	ldrb	r3, [r3, #6]
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f001 f99f 	bl	800ae5a <USBH_ClrFeature>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b20:	bf00      	nop
  }
  return status;
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b3a:	69db      	ldr	r3, [r3, #28]
 8009b3c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	791b      	ldrb	r3, [r3, #4]
 8009b46:	4619      	mov	r1, r3
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f005 fbf1 	bl	800f330 <USBH_LL_GetLastXferSize>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b0d      	cmp	r3, #13
 8009b52:	d002      	beq.n	8009b5a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009b54:	2302      	movs	r3, #2
 8009b56:	73fb      	strb	r3, [r7, #15]
 8009b58:	e024      	b.n	8009ba4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b5e:	4a14      	ldr	r2, [pc, #80]	; (8009bb0 <USBH_MSC_DecodeCSW+0x84>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d11d      	bne.n	8009ba0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d119      	bne.n	8009ba4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d102      	bne.n	8009b80 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	73fb      	strb	r3, [r7, #15]
 8009b7e:	e011      	b.n	8009ba4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d102      	bne.n	8009b90 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	73fb      	strb	r3, [r7, #15]
 8009b8e:	e009      	b.n	8009ba4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d104      	bne.n	8009ba4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	73fb      	strb	r3, [r7, #15]
 8009b9e:	e001      	b.n	8009ba4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009ba0:	2302      	movs	r3, #2
 8009ba2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	53425355 	.word	0x53425355

08009bb4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bca:	69db      	ldr	r3, [r3, #28]
 8009bcc:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d002      	beq.n	8009bde <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d021      	beq.n	8009c20 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009bdc:	e028      	b.n	8009c30 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	2200      	movs	r2, #0
 8009be2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	220a      	movs	r2, #10
 8009bf0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	3363      	adds	r3, #99	; 0x63
 8009bf8:	2210      	movs	r2, #16
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f005 fdc3 	bl	800f788 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	2202      	movs	r2, #2
 8009c16:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8009c1e:	e007      	b.n	8009c30 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009c20:	78fb      	ldrb	r3, [r7, #3]
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7ff fd87 	bl	8009738 <USBH_MSC_BOT_Process>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009c2e:	bf00      	nop
  }

  return error;
 8009c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b086      	sub	sp, #24
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	60f8      	str	r0, [r7, #12]
 8009c42:	460b      	mov	r3, r1
 8009c44:	607a      	str	r2, [r7, #4]
 8009c46:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c52:	69db      	ldr	r3, [r3, #28]
 8009c54:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d002      	beq.n	8009c66 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d027      	beq.n	8009cb4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009c64:	e05f      	b.n	8009d26 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	2208      	movs	r2, #8
 8009c6a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	2280      	movs	r2, #128	; 0x80
 8009c70:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	220a      	movs	r2, #10
 8009c78:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	3363      	adds	r3, #99	; 0x63
 8009c80:	2210      	movs	r2, #16
 8009c82:	2100      	movs	r1, #0
 8009c84:	4618      	mov	r0, r3
 8009c86:	f005 fd7f 	bl	800f788 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	2225      	movs	r2, #37	; 0x25
 8009c8e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	2202      	movs	r2, #2
 8009c9e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	f103 0210 	add.w	r2, r3, #16
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8009cb2:	e038      	b.n	8009d26 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009cb4:	7afb      	ldrb	r3, [r7, #11]
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f7ff fd3d 	bl	8009738 <USBH_MSC_BOT_Process>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009cc2:	7dfb      	ldrb	r3, [r7, #23]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d12d      	bne.n	8009d24 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cce:	3303      	adds	r3, #3
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cda:	3302      	adds	r3, #2
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	021b      	lsls	r3, r3, #8
 8009ce0:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ce8:	3301      	adds	r3, #1
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009cee:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	061b      	lsls	r3, r3, #24
 8009cfa:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d06:	3307      	adds	r3, #7
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d12:	3306      	adds	r3, #6
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	021b      	lsls	r3, r3, #8
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	809a      	strh	r2, [r3, #4]
      break;
 8009d24:	bf00      	nop
  }

  return error;
 8009d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3718      	adds	r7, #24
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	607a      	str	r2, [r7, #4]
 8009d3c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009d3e:	2302      	movs	r3, #2
 8009d40:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d48:	69db      	ldr	r3, [r3, #28]
 8009d4a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d002      	beq.n	8009d5c <USBH_MSC_SCSI_Inquiry+0x2c>
 8009d56:	2b02      	cmp	r3, #2
 8009d58:	d03d      	beq.n	8009dd6 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009d5a:	e089      	b.n	8009e70 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	2224      	movs	r2, #36	; 0x24
 8009d60:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	2280      	movs	r2, #128	; 0x80
 8009d66:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	220a      	movs	r2, #10
 8009d6e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	3363      	adds	r3, #99	; 0x63
 8009d76:	220a      	movs	r2, #10
 8009d78:	2100      	movs	r1, #0
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f005 fd04 	bl	800f788 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	2212      	movs	r2, #18
 8009d84:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009d88:	7afb      	ldrb	r3, [r7, #11]
 8009d8a:	015b      	lsls	r3, r3, #5
 8009d8c:	b2da      	uxtb	r2, r3
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	2224      	movs	r2, #36	; 0x24
 8009da8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	2201      	movs	r2, #1
 8009db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	2202      	movs	r2, #2
 8009dc0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	f103 0210 	add.w	r2, r3, #16
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8009dd4:	e04c      	b.n	8009e70 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009dd6:	7afb      	ldrb	r3, [r7, #11]
 8009dd8:	4619      	mov	r1, r3
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f7ff fcac 	bl	8009738 <USBH_MSC_BOT_Process>
 8009de0:	4603      	mov	r3, r0
 8009de2:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009de4:	7dfb      	ldrb	r3, [r7, #23]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d141      	bne.n	8009e6e <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009dea:	2222      	movs	r2, #34	; 0x22
 8009dec:	2100      	movs	r1, #0
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f005 fcca 	bl	800f788 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	f003 031f 	and.w	r3, r3, #31
 8009e00:	b2da      	uxtb	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	095b      	lsrs	r3, r3, #5
 8009e10:	b2da      	uxtb	r2, r3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	b25b      	sxtb	r3, r3
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	da03      	bge.n	8009e2e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	709a      	strb	r2, [r3, #2]
 8009e2c:	e002      	b.n	8009e34 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	1cd8      	adds	r0, r3, #3
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e3e:	3308      	adds	r3, #8
 8009e40:	2208      	movs	r2, #8
 8009e42:	4619      	mov	r1, r3
 8009e44:	f005 fd0e 	bl	800f864 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f103 000c 	add.w	r0, r3, #12
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e54:	3310      	adds	r3, #16
 8009e56:	2210      	movs	r2, #16
 8009e58:	4619      	mov	r1, r3
 8009e5a:	f005 fd03 	bl	800f864 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	331d      	adds	r3, #29
 8009e62:	693a      	ldr	r2, [r7, #16]
 8009e64:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8009e68:	3220      	adds	r2, #32
 8009e6a:	6812      	ldr	r2, [r2, #0]
 8009e6c:	601a      	str	r2, [r3, #0]
      break;
 8009e6e:	bf00      	nop
  }

  return error;
 8009e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b086      	sub	sp, #24
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	60f8      	str	r0, [r7, #12]
 8009e82:	460b      	mov	r3, r1
 8009e84:	607a      	str	r2, [r7, #4]
 8009e86:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009e88:	2302      	movs	r3, #2
 8009e8a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e92:	69db      	ldr	r3, [r3, #28]
 8009e94:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d002      	beq.n	8009ea6 <USBH_MSC_SCSI_RequestSense+0x2c>
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	d03d      	beq.n	8009f20 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009ea4:	e05d      	b.n	8009f62 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	220e      	movs	r2, #14
 8009eaa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	2280      	movs	r2, #128	; 0x80
 8009eb0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	220a      	movs	r2, #10
 8009eb8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	3363      	adds	r3, #99	; 0x63
 8009ec0:	2210      	movs	r2, #16
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f005 fc5f 	bl	800f788 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	2203      	movs	r2, #3
 8009ece:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009ed2:	7afb      	ldrb	r3, [r7, #11]
 8009ed4:	015b      	lsls	r3, r3, #5
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	220e      	movs	r2, #14
 8009ef2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	2201      	movs	r2, #1
 8009f02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	2202      	movs	r2, #2
 8009f0a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	f103 0210 	add.w	r2, r3, #16
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f1e:	e020      	b.n	8009f62 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009f20:	7afb      	ldrb	r3, [r7, #11]
 8009f22:	4619      	mov	r1, r3
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f7ff fc07 	bl	8009738 <USBH_MSC_BOT_Process>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009f2e:	7dfb      	ldrb	r3, [r7, #23]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d115      	bne.n	8009f60 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f3a:	3302      	adds	r3, #2
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	f003 030f 	and.w	r3, r3, #15
 8009f42:	b2da      	uxtb	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f4e:	7b1a      	ldrb	r2, [r3, #12]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f5a:	7b5a      	ldrb	r2, [r3, #13]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	709a      	strb	r2, [r3, #2]
      break;
 8009f60:	bf00      	nop
  }

  return error;
 8009f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3718      	adds	r7, #24
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b086      	sub	sp, #24
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	607a      	str	r2, [r7, #4]
 8009f76:	603b      	str	r3, [r7, #0]
 8009f78:	460b      	mov	r3, r1
 8009f7a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009f7c:	2302      	movs	r3, #2
 8009f7e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f86:	69db      	ldr	r3, [r3, #28]
 8009f88:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d002      	beq.n	8009f9a <USBH_MSC_SCSI_Write+0x2e>
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d047      	beq.n	800a028 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009f98:	e04e      	b.n	800a038 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	6a3b      	ldr	r3, [r7, #32]
 8009fa4:	fb03 f202 	mul.w	r2, r3, r2
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	220a      	movs	r2, #10
 8009fb8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	3363      	adds	r3, #99	; 0x63
 8009fc0:	2210      	movs	r2, #16
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f005 fbdf 	bl	800f788 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	222a      	movs	r2, #42	; 0x2a
 8009fce:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009fd2:	79fa      	ldrb	r2, [r7, #7]
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009fda:	79ba      	ldrb	r2, [r7, #6]
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009fe2:	797a      	ldrb	r2, [r7, #5]
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009fea:	1d3b      	adds	r3, r7, #4
 8009fec:	781a      	ldrb	r2, [r3, #0]
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009ff4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009ffe:	f107 0320 	add.w	r3, r7, #32
 800a002:	781a      	ldrb	r2, [r3, #0]
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	2202      	movs	r2, #2
 800a016:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	683a      	ldr	r2, [r7, #0]
 800a01e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a022:	2301      	movs	r3, #1
 800a024:	75fb      	strb	r3, [r7, #23]
      break;
 800a026:	e007      	b.n	800a038 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a028:	7afb      	ldrb	r3, [r7, #11]
 800a02a:	4619      	mov	r1, r3
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f7ff fb83 	bl	8009738 <USBH_MSC_BOT_Process>
 800a032:	4603      	mov	r3, r0
 800a034:	75fb      	strb	r3, [r7, #23]
      break;
 800a036:	bf00      	nop
  }

  return error;
 800a038:	7dfb      	ldrb	r3, [r7, #23]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3718      	adds	r7, #24
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b086      	sub	sp, #24
 800a046:	af00      	add	r7, sp, #0
 800a048:	60f8      	str	r0, [r7, #12]
 800a04a:	607a      	str	r2, [r7, #4]
 800a04c:	603b      	str	r3, [r7, #0]
 800a04e:	460b      	mov	r3, r1
 800a050:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a052:	2302      	movs	r3, #2
 800a054:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a05c:	69db      	ldr	r3, [r3, #28]
 800a05e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a066:	2b01      	cmp	r3, #1
 800a068:	d002      	beq.n	800a070 <USBH_MSC_SCSI_Read+0x2e>
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d047      	beq.n	800a0fe <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a06e:	e04e      	b.n	800a10e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a076:	461a      	mov	r2, r3
 800a078:	6a3b      	ldr	r3, [r7, #32]
 800a07a:	fb03 f202 	mul.w	r2, r3, r2
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	2280      	movs	r2, #128	; 0x80
 800a086:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	220a      	movs	r2, #10
 800a08e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	3363      	adds	r3, #99	; 0x63
 800a096:	2210      	movs	r2, #16
 800a098:	2100      	movs	r1, #0
 800a09a:	4618      	mov	r0, r3
 800a09c:	f005 fb74 	bl	800f788 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	2228      	movs	r2, #40	; 0x28
 800a0a4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a0a8:	79fa      	ldrb	r2, [r7, #7]
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a0b0:	79ba      	ldrb	r2, [r7, #6]
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a0b8:	797a      	ldrb	r2, [r7, #5]
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a0c0:	1d3b      	adds	r3, r7, #4
 800a0c2:	781a      	ldrb	r2, [r3, #0]
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a0ca:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a0d4:	f107 0320 	add.w	r3, r7, #32
 800a0d8:	781a      	ldrb	r2, [r3, #0]
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	683a      	ldr	r2, [r7, #0]
 800a0f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a0fc:	e007      	b.n	800a10e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a0fe:	7afb      	ldrb	r3, [r7, #11]
 800a100:	4619      	mov	r1, r3
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f7ff fb18 	bl	8009738 <USBH_MSC_BOT_Process>
 800a108:	4603      	mov	r3, r0
 800a10a:	75fb      	strb	r3, [r7, #23]
      break;
 800a10c:	bf00      	nop
  }

  return error;
 800a10e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a110:	4618      	mov	r0, r3
 800a112:	3718      	adds	r7, #24
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	4613      	mov	r3, r2
 800a124:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d101      	bne.n	800a130 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a12c:	2302      	movs	r3, #2
 800a12e:	e029      	b.n	800a184 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	79fa      	ldrb	r2, [r7, #7]
 800a134:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f000 f81f 	bl	800a18c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2200      	movs	r2, #0
 800a152:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2200      	movs	r2, #0
 800a15a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d003      	beq.n	800a17c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f005 f823 	bl	800f1c8 <USBH_LL_Init>

  return USBH_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a194:	2300      	movs	r3, #0
 800a196:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a198:	2300      	movs	r3, #0
 800a19a:	60fb      	str	r3, [r7, #12]
 800a19c:	e009      	b.n	800a1b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	33e0      	adds	r3, #224	; 0xe0
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	4413      	add	r3, r2
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	60fb      	str	r3, [r7, #12]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2b0f      	cmp	r3, #15
 800a1b6:	d9f2      	bls.n	800a19e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	60fb      	str	r3, [r7, #12]
 800a1bc:	e009      	b.n	800a1d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	60fb      	str	r3, [r7, #12]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1d8:	d3f1      	bcc.n	800a1be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2240      	movs	r2, #64	; 0x40
 800a1fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2201      	movs	r2, #1
 800a212:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3714      	adds	r7, #20
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a234:	b480      	push	{r7}
 800a236:	b085      	sub	sp, #20
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a23e:	2300      	movs	r3, #0
 800a240:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d016      	beq.n	800a276 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10e      	bne.n	800a270 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a258:	1c59      	adds	r1, r3, #1
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	33de      	adds	r3, #222	; 0xde
 800a264:	6839      	ldr	r1, [r7, #0]
 800a266:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a26a:	2300      	movs	r3, #0
 800a26c:	73fb      	strb	r3, [r7, #15]
 800a26e:	e004      	b.n	800a27a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a270:	2302      	movs	r3, #2
 800a272:	73fb      	strb	r3, [r7, #15]
 800a274:	e001      	b.n	800a27a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a276:	2302      	movs	r3, #2
 800a278:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a27a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3714      	adds	r7, #20
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a288:	b480      	push	{r7}
 800a28a:	b085      	sub	sp, #20
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	460b      	mov	r3, r1
 800a292:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a294:	2300      	movs	r3, #0
 800a296:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a29e:	78fa      	ldrb	r2, [r7, #3]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d204      	bcs.n	800a2ae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	78fa      	ldrb	r2, [r7, #3]
 800a2a8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a2ac:	e001      	b.n	800a2b2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b087      	sub	sp, #28
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	4608      	mov	r0, r1
 800a2ca:	4611      	mov	r1, r2
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	70fb      	strb	r3, [r7, #3]
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	70bb      	strb	r3, [r7, #2]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a2e8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a2ea:	e025      	b.n	800a338 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a2ec:	7dfb      	ldrb	r3, [r7, #23]
 800a2ee:	221a      	movs	r2, #26
 800a2f0:	fb02 f303 	mul.w	r3, r2, r3
 800a2f4:	3308      	adds	r3, #8
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	3302      	adds	r3, #2
 800a2fc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	795b      	ldrb	r3, [r3, #5]
 800a302:	78fa      	ldrb	r2, [r7, #3]
 800a304:	429a      	cmp	r2, r3
 800a306:	d002      	beq.n	800a30e <USBH_FindInterface+0x4e>
 800a308:	78fb      	ldrb	r3, [r7, #3]
 800a30a:	2bff      	cmp	r3, #255	; 0xff
 800a30c:	d111      	bne.n	800a332 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a312:	78ba      	ldrb	r2, [r7, #2]
 800a314:	429a      	cmp	r2, r3
 800a316:	d002      	beq.n	800a31e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a318:	78bb      	ldrb	r3, [r7, #2]
 800a31a:	2bff      	cmp	r3, #255	; 0xff
 800a31c:	d109      	bne.n	800a332 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a322:	787a      	ldrb	r2, [r7, #1]
 800a324:	429a      	cmp	r2, r3
 800a326:	d002      	beq.n	800a32e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a328:	787b      	ldrb	r3, [r7, #1]
 800a32a:	2bff      	cmp	r3, #255	; 0xff
 800a32c:	d101      	bne.n	800a332 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a32e:	7dfb      	ldrb	r3, [r7, #23]
 800a330:	e006      	b.n	800a340 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a332:	7dfb      	ldrb	r3, [r7, #23]
 800a334:	3301      	adds	r3, #1
 800a336:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a338:	7dfb      	ldrb	r3, [r7, #23]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d9d6      	bls.n	800a2ec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a33e:	23ff      	movs	r3, #255	; 0xff
}
 800a340:	4618      	mov	r0, r3
 800a342:	371c      	adds	r7, #28
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f004 ff73 	bl	800f240 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a35a:	2101      	movs	r1, #1
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f005 f88c 	bl	800f47a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b088      	sub	sp, #32
 800a370:	af04      	add	r7, sp, #16
 800a372:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a374:	2302      	movs	r3, #2
 800a376:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a378:	2300      	movs	r3, #0
 800a37a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a382:	b2db      	uxtb	r3, r3
 800a384:	2b01      	cmp	r3, #1
 800a386:	d102      	bne.n	800a38e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2203      	movs	r2, #3
 800a38c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	b2db      	uxtb	r3, r3
 800a394:	2b0b      	cmp	r3, #11
 800a396:	f200 81be 	bhi.w	800a716 <USBH_Process+0x3aa>
 800a39a:	a201      	add	r2, pc, #4	; (adr r2, 800a3a0 <USBH_Process+0x34>)
 800a39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a0:	0800a3d1 	.word	0x0800a3d1
 800a3a4:	0800a403 	.word	0x0800a403
 800a3a8:	0800a46b 	.word	0x0800a46b
 800a3ac:	0800a6b1 	.word	0x0800a6b1
 800a3b0:	0800a717 	.word	0x0800a717
 800a3b4:	0800a50f 	.word	0x0800a50f
 800a3b8:	0800a657 	.word	0x0800a657
 800a3bc:	0800a545 	.word	0x0800a545
 800a3c0:	0800a565 	.word	0x0800a565
 800a3c4:	0800a585 	.word	0x0800a585
 800a3c8:	0800a5c9 	.word	0x0800a5c9
 800a3cc:	0800a699 	.word	0x0800a699
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 819e 	beq.w	800a71a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a3e4:	20c8      	movs	r0, #200	; 0xc8
 800a3e6:	f005 f8bf 	bl	800f568 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f004 ff85 	bl	800f2fa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a400:	e18b      	b.n	800a71a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d107      	bne.n	800a41c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2202      	movs	r2, #2
 800a418:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a41a:	e18d      	b.n	800a738 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a422:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a426:	d914      	bls.n	800a452 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a42e:	3301      	adds	r3, #1
 800a430:	b2da      	uxtb	r2, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a43e:	2b03      	cmp	r3, #3
 800a440:	d903      	bls.n	800a44a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	220d      	movs	r2, #13
 800a446:	701a      	strb	r2, [r3, #0]
      break;
 800a448:	e176      	b.n	800a738 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	701a      	strb	r2, [r3, #0]
      break;
 800a450:	e172      	b.n	800a738 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a458:	f103 020a 	add.w	r2, r3, #10
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a462:	200a      	movs	r0, #10
 800a464:	f005 f880 	bl	800f568 <USBH_Delay>
      break;
 800a468:	e166      	b.n	800a738 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a470:	2b00      	cmp	r3, #0
 800a472:	d005      	beq.n	800a480 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a47a:	2104      	movs	r1, #4
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a480:	2064      	movs	r0, #100	; 0x64
 800a482:	f005 f871 	bl	800f568 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f004 ff10 	bl	800f2ac <USBH_LL_GetSpeed>
 800a48c:	4603      	mov	r3, r0
 800a48e:	461a      	mov	r2, r3
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2205      	movs	r2, #5
 800a49a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a49c:	2100      	movs	r1, #0
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f001 fa2b 	bl	800b8fa <USBH_AllocPipe>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a4ac:	2180      	movs	r1, #128	; 0x80
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f001 fa23 	bl	800b8fa <USBH_AllocPipe>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	7919      	ldrb	r1, [r3, #4]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a4d0:	b292      	uxth	r2, r2
 800a4d2:	9202      	str	r2, [sp, #8]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	9201      	str	r2, [sp, #4]
 800a4d8:	9300      	str	r3, [sp, #0]
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2280      	movs	r2, #128	; 0x80
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f001 f9dc 	bl	800b89c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	7959      	ldrb	r1, [r3, #5]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a4f8:	b292      	uxth	r2, r2
 800a4fa:	9202      	str	r2, [sp, #8]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	9201      	str	r2, [sp, #4]
 800a500:	9300      	str	r3, [sp, #0]
 800a502:	4603      	mov	r3, r0
 800a504:	2200      	movs	r2, #0
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f001 f9c8 	bl	800b89c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a50c:	e114      	b.n	800a738 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f918 	bl	800a744 <USBH_HandleEnum>
 800a514:	4603      	mov	r3, r0
 800a516:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a518:	7bbb      	ldrb	r3, [r7, #14]
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f040 80fe 	bne.w	800a71e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a530:	2b01      	cmp	r3, #1
 800a532:	d103      	bne.n	800a53c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2208      	movs	r2, #8
 800a538:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a53a:	e0f0      	b.n	800a71e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2207      	movs	r2, #7
 800a540:	701a      	strb	r2, [r3, #0]
      break;
 800a542:	e0ec      	b.n	800a71e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f000 80e9 	beq.w	800a722 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a556:	2101      	movs	r1, #1
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2208      	movs	r2, #8
 800a560:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a562:	e0de      	b.n	800a722 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	4619      	mov	r1, r3
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 fc2c 	bl	800adcc <USBH_SetCfg>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	f040 80d5 	bne.w	800a726 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2209      	movs	r2, #9
 800a580:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a582:	e0d0      	b.n	800a726 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a58a:	f003 0320 	and.w	r3, r3, #32
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d016      	beq.n	800a5c0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a592:	2101      	movs	r1, #1
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 fc3c 	bl	800ae12 <USBH_SetFeature>
 800a59a:	4603      	mov	r3, r0
 800a59c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a59e:	7bbb      	ldrb	r3, [r7, #14]
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d103      	bne.n	800a5ae <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	220a      	movs	r2, #10
 800a5aa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a5ac:	e0bd      	b.n	800a72a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800a5ae:	7bbb      	ldrb	r3, [r7, #14]
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	2b03      	cmp	r3, #3
 800a5b4:	f040 80b9 	bne.w	800a72a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	220a      	movs	r2, #10
 800a5bc:	701a      	strb	r2, [r3, #0]
      break;
 800a5be:	e0b4      	b.n	800a72a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	220a      	movs	r2, #10
 800a5c4:	701a      	strb	r2, [r3, #0]
      break;
 800a5c6:	e0b0      	b.n	800a72a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f000 80ad 	beq.w	800a72e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a5dc:	2300      	movs	r3, #0
 800a5de:	73fb      	strb	r3, [r7, #15]
 800a5e0:	e016      	b.n	800a610 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a5e2:	7bfa      	ldrb	r2, [r7, #15]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	32de      	adds	r2, #222	; 0xde
 800a5e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ec:	791a      	ldrb	r2, [r3, #4]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d108      	bne.n	800a60a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a5f8:	7bfa      	ldrb	r2, [r7, #15]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	32de      	adds	r2, #222	; 0xde
 800a5fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a608:	e005      	b.n	800a616 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a60a:	7bfb      	ldrb	r3, [r7, #15]
 800a60c:	3301      	adds	r3, #1
 800a60e:	73fb      	strb	r3, [r7, #15]
 800a610:	7bfb      	ldrb	r3, [r7, #15]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d0e5      	beq.n	800a5e2 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d016      	beq.n	800a64e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	4798      	blx	r3
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d109      	bne.n	800a646 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2206      	movs	r2, #6
 800a636:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a63e:	2103      	movs	r1, #3
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a644:	e073      	b.n	800a72e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	220d      	movs	r2, #13
 800a64a:	701a      	strb	r2, [r3, #0]
      break;
 800a64c:	e06f      	b.n	800a72e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	220d      	movs	r2, #13
 800a652:	701a      	strb	r2, [r3, #0]
      break;
 800a654:	e06b      	b.n	800a72e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d017      	beq.n	800a690 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	4798      	blx	r3
 800a66c:	4603      	mov	r3, r0
 800a66e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a670:	7bbb      	ldrb	r3, [r7, #14]
 800a672:	b2db      	uxtb	r3, r3
 800a674:	2b00      	cmp	r3, #0
 800a676:	d103      	bne.n	800a680 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	220b      	movs	r2, #11
 800a67c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a67e:	e058      	b.n	800a732 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800a680:	7bbb      	ldrb	r3, [r7, #14]
 800a682:	b2db      	uxtb	r3, r3
 800a684:	2b02      	cmp	r3, #2
 800a686:	d154      	bne.n	800a732 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	220d      	movs	r2, #13
 800a68c:	701a      	strb	r2, [r3, #0]
      break;
 800a68e:	e050      	b.n	800a732 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	220d      	movs	r2, #13
 800a694:	701a      	strb	r2, [r3, #0]
      break;
 800a696:	e04c      	b.n	800a732 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d049      	beq.n	800a736 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6a8:	695b      	ldr	r3, [r3, #20]
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	4798      	blx	r3
      }
      break;
 800a6ae:	e042      	b.n	800a736 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f7ff fd67 	bl	800a18c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d009      	beq.n	800a6dc <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d005      	beq.n	800a6f2 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6ec:	2105      	movs	r1, #5
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d107      	bne.n	800a70e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f7ff fe20 	bl	800a34c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a70c:	e014      	b.n	800a738 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f004 fd96 	bl	800f240 <USBH_LL_Start>
      break;
 800a714:	e010      	b.n	800a738 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800a716:	bf00      	nop
 800a718:	e00e      	b.n	800a738 <USBH_Process+0x3cc>
      break;
 800a71a:	bf00      	nop
 800a71c:	e00c      	b.n	800a738 <USBH_Process+0x3cc>
      break;
 800a71e:	bf00      	nop
 800a720:	e00a      	b.n	800a738 <USBH_Process+0x3cc>
    break;
 800a722:	bf00      	nop
 800a724:	e008      	b.n	800a738 <USBH_Process+0x3cc>
      break;
 800a726:	bf00      	nop
 800a728:	e006      	b.n	800a738 <USBH_Process+0x3cc>
      break;
 800a72a:	bf00      	nop
 800a72c:	e004      	b.n	800a738 <USBH_Process+0x3cc>
      break;
 800a72e:	bf00      	nop
 800a730:	e002      	b.n	800a738 <USBH_Process+0x3cc>
      break;
 800a732:	bf00      	nop
 800a734:	e000      	b.n	800a738 <USBH_Process+0x3cc>
      break;
 800a736:	bf00      	nop
  }
  return USBH_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop

0800a744 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b088      	sub	sp, #32
 800a748:	af04      	add	r7, sp, #16
 800a74a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a74c:	2301      	movs	r3, #1
 800a74e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a750:	2301      	movs	r3, #1
 800a752:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	785b      	ldrb	r3, [r3, #1]
 800a758:	2b07      	cmp	r3, #7
 800a75a:	f200 81c1 	bhi.w	800aae0 <USBH_HandleEnum+0x39c>
 800a75e:	a201      	add	r2, pc, #4	; (adr r2, 800a764 <USBH_HandleEnum+0x20>)
 800a760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a764:	0800a785 	.word	0x0800a785
 800a768:	0800a843 	.word	0x0800a843
 800a76c:	0800a8ad 	.word	0x0800a8ad
 800a770:	0800a93b 	.word	0x0800a93b
 800a774:	0800a9a5 	.word	0x0800a9a5
 800a778:	0800aa15 	.word	0x0800aa15
 800a77c:	0800aa5b 	.word	0x0800aa5b
 800a780:	0800aaa1 	.word	0x0800aaa1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a784:	2108      	movs	r1, #8
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 fa50 	bl	800ac2c <USBH_Get_DevDesc>
 800a78c:	4603      	mov	r3, r0
 800a78e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a790:	7bbb      	ldrb	r3, [r7, #14]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d130      	bne.n	800a7f8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	7919      	ldrb	r1, [r3, #4]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a7ba:	b292      	uxth	r2, r2
 800a7bc:	9202      	str	r2, [sp, #8]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	9201      	str	r2, [sp, #4]
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2280      	movs	r2, #128	; 0x80
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f001 f867 	bl	800b89c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	7959      	ldrb	r1, [r3, #5]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a7e2:	b292      	uxth	r2, r2
 800a7e4:	9202      	str	r2, [sp, #8]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	9201      	str	r2, [sp, #4]
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f001 f853 	bl	800b89c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a7f6:	e175      	b.n	800aae4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7f8:	7bbb      	ldrb	r3, [r7, #14]
 800a7fa:	2b03      	cmp	r3, #3
 800a7fc:	f040 8172 	bne.w	800aae4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a806:	3301      	adds	r3, #1
 800a808:	b2da      	uxtb	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a816:	2b03      	cmp	r3, #3
 800a818:	d903      	bls.n	800a822 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	220d      	movs	r2, #13
 800a81e:	701a      	strb	r2, [r3, #0]
      break;
 800a820:	e160      	b.n	800aae4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	795b      	ldrb	r3, [r3, #5]
 800a826:	4619      	mov	r1, r3
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f001 f887 	bl	800b93c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	791b      	ldrb	r3, [r3, #4]
 800a832:	4619      	mov	r1, r3
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f001 f881 	bl	800b93c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	701a      	strb	r2, [r3, #0]
      break;
 800a840:	e150      	b.n	800aae4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a842:	2112      	movs	r1, #18
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 f9f1 	bl	800ac2c <USBH_Get_DevDesc>
 800a84a:	4603      	mov	r3, r0
 800a84c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a84e:	7bbb      	ldrb	r3, [r7, #14]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d103      	bne.n	800a85c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2202      	movs	r2, #2
 800a858:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a85a:	e145      	b.n	800aae8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a85c:	7bbb      	ldrb	r3, [r7, #14]
 800a85e:	2b03      	cmp	r3, #3
 800a860:	f040 8142 	bne.w	800aae8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a86a:	3301      	adds	r3, #1
 800a86c:	b2da      	uxtb	r2, r3
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a87a:	2b03      	cmp	r3, #3
 800a87c:	d903      	bls.n	800a886 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	220d      	movs	r2, #13
 800a882:	701a      	strb	r2, [r3, #0]
      break;
 800a884:	e130      	b.n	800aae8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	795b      	ldrb	r3, [r3, #5]
 800a88a:	4619      	mov	r1, r3
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f001 f855 	bl	800b93c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	791b      	ldrb	r3, [r3, #4]
 800a896:	4619      	mov	r1, r3
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f001 f84f 	bl	800b93c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	701a      	strb	r2, [r3, #0]
      break;
 800a8aa:	e11d      	b.n	800aae8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a8ac:	2101      	movs	r1, #1
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 fa68 	bl	800ad84 <USBH_SetAddress>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a8b8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d132      	bne.n	800a924 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a8be:	2002      	movs	r0, #2
 800a8c0:	f004 fe52 	bl	800f568 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2203      	movs	r2, #3
 800a8d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	7919      	ldrb	r1, [r3, #4]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a8e6:	b292      	uxth	r2, r2
 800a8e8:	9202      	str	r2, [sp, #8]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	9201      	str	r2, [sp, #4]
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2280      	movs	r2, #128	; 0x80
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 ffd1 	bl	800b89c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	7959      	ldrb	r1, [r3, #5]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a90e:	b292      	uxth	r2, r2
 800a910:	9202      	str	r2, [sp, #8]
 800a912:	2200      	movs	r2, #0
 800a914:	9201      	str	r2, [sp, #4]
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	4603      	mov	r3, r0
 800a91a:	2200      	movs	r2, #0
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 ffbd 	bl	800b89c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a922:	e0e3      	b.n	800aaec <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a924:	7bbb      	ldrb	r3, [r7, #14]
 800a926:	2b03      	cmp	r3, #3
 800a928:	f040 80e0 	bne.w	800aaec <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	220d      	movs	r2, #13
 800a930:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	705a      	strb	r2, [r3, #1]
      break;
 800a938:	e0d8      	b.n	800aaec <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a93a:	2109      	movs	r1, #9
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 f99d 	bl	800ac7c <USBH_Get_CfgDesc>
 800a942:	4603      	mov	r3, r0
 800a944:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a946:	7bbb      	ldrb	r3, [r7, #14]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d103      	bne.n	800a954 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2204      	movs	r2, #4
 800a950:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a952:	e0cd      	b.n	800aaf0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a954:	7bbb      	ldrb	r3, [r7, #14]
 800a956:	2b03      	cmp	r3, #3
 800a958:	f040 80ca 	bne.w	800aaf0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a962:	3301      	adds	r3, #1
 800a964:	b2da      	uxtb	r2, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a972:	2b03      	cmp	r3, #3
 800a974:	d903      	bls.n	800a97e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	220d      	movs	r2, #13
 800a97a:	701a      	strb	r2, [r3, #0]
      break;
 800a97c:	e0b8      	b.n	800aaf0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	795b      	ldrb	r3, [r3, #5]
 800a982:	4619      	mov	r1, r3
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 ffd9 	bl	800b93c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	791b      	ldrb	r3, [r3, #4]
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 ffd3 	bl	800b93c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	701a      	strb	r2, [r3, #0]
      break;
 800a9a2:	e0a5      	b.n	800aaf0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 f965 	bl	800ac7c <USBH_Get_CfgDesc>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a9b6:	7bbb      	ldrb	r3, [r7, #14]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d103      	bne.n	800a9c4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2205      	movs	r2, #5
 800a9c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a9c2:	e097      	b.n	800aaf4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9c4:	7bbb      	ldrb	r3, [r7, #14]
 800a9c6:	2b03      	cmp	r3, #3
 800a9c8:	f040 8094 	bne.w	800aaf4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	b2da      	uxtb	r2, r3
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d903      	bls.n	800a9ee <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	220d      	movs	r2, #13
 800a9ea:	701a      	strb	r2, [r3, #0]
      break;
 800a9ec:	e082      	b.n	800aaf4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	795b      	ldrb	r3, [r3, #5]
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 ffa1 	bl	800b93c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	791b      	ldrb	r3, [r3, #4]
 800a9fe:	4619      	mov	r1, r3
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 ff9b 	bl	800b93c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	701a      	strb	r2, [r3, #0]
      break;
 800aa12:	e06f      	b.n	800aaf4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d019      	beq.n	800aa52 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aa2a:	23ff      	movs	r3, #255	; 0xff
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 f949 	bl	800acc4 <USBH_Get_StringDesc>
 800aa32:	4603      	mov	r3, r0
 800aa34:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aa36:	7bbb      	ldrb	r3, [r7, #14]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d103      	bne.n	800aa44 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2206      	movs	r2, #6
 800aa40:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800aa42:	e059      	b.n	800aaf8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa44:	7bbb      	ldrb	r3, [r7, #14]
 800aa46:	2b03      	cmp	r3, #3
 800aa48:	d156      	bne.n	800aaf8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2206      	movs	r2, #6
 800aa4e:	705a      	strb	r2, [r3, #1]
      break;
 800aa50:	e052      	b.n	800aaf8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2206      	movs	r2, #6
 800aa56:	705a      	strb	r2, [r3, #1]
      break;
 800aa58:	e04e      	b.n	800aaf8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d019      	beq.n	800aa98 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aa70:	23ff      	movs	r3, #255	; 0xff
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 f926 	bl	800acc4 <USBH_Get_StringDesc>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aa7c:	7bbb      	ldrb	r3, [r7, #14]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d103      	bne.n	800aa8a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2207      	movs	r2, #7
 800aa86:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800aa88:	e038      	b.n	800aafc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa8a:	7bbb      	ldrb	r3, [r7, #14]
 800aa8c:	2b03      	cmp	r3, #3
 800aa8e:	d135      	bne.n	800aafc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2207      	movs	r2, #7
 800aa94:	705a      	strb	r2, [r3, #1]
      break;
 800aa96:	e031      	b.n	800aafc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2207      	movs	r2, #7
 800aa9c:	705a      	strb	r2, [r3, #1]
      break;
 800aa9e:	e02d      	b.n	800aafc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d017      	beq.n	800aada <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800aab6:	23ff      	movs	r3, #255	; 0xff
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 f903 	bl	800acc4 <USBH_Get_StringDesc>
 800aabe:	4603      	mov	r3, r0
 800aac0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aac2:	7bbb      	ldrb	r3, [r7, #14]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d102      	bne.n	800aace <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800aac8:	2300      	movs	r3, #0
 800aaca:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800aacc:	e018      	b.n	800ab00 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aace:	7bbb      	ldrb	r3, [r7, #14]
 800aad0:	2b03      	cmp	r3, #3
 800aad2:	d115      	bne.n	800ab00 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800aad4:	2300      	movs	r3, #0
 800aad6:	73fb      	strb	r3, [r7, #15]
      break;
 800aad8:	e012      	b.n	800ab00 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800aada:	2300      	movs	r3, #0
 800aadc:	73fb      	strb	r3, [r7, #15]
      break;
 800aade:	e00f      	b.n	800ab00 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800aae0:	bf00      	nop
 800aae2:	e00e      	b.n	800ab02 <USBH_HandleEnum+0x3be>
      break;
 800aae4:	bf00      	nop
 800aae6:	e00c      	b.n	800ab02 <USBH_HandleEnum+0x3be>
      break;
 800aae8:	bf00      	nop
 800aaea:	e00a      	b.n	800ab02 <USBH_HandleEnum+0x3be>
      break;
 800aaec:	bf00      	nop
 800aaee:	e008      	b.n	800ab02 <USBH_HandleEnum+0x3be>
      break;
 800aaf0:	bf00      	nop
 800aaf2:	e006      	b.n	800ab02 <USBH_HandleEnum+0x3be>
      break;
 800aaf4:	bf00      	nop
 800aaf6:	e004      	b.n	800ab02 <USBH_HandleEnum+0x3be>
      break;
 800aaf8:	bf00      	nop
 800aafa:	e002      	b.n	800ab02 <USBH_HandleEnum+0x3be>
      break;
 800aafc:	bf00      	nop
 800aafe:	e000      	b.n	800ab02 <USBH_HandleEnum+0x3be>
      break;
 800ab00:	bf00      	nop
  }
  return Status;
 800ab02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	683a      	ldr	r2, [r7, #0]
 800ab1a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ab1e:	bf00      	nop
 800ab20:	370c      	adds	r7, #12
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b082      	sub	sp, #8
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ab38:	1c5a      	adds	r2, r3, #1
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 f804 	bl	800ab4e <USBH_HandleSof>
}
 800ab46:	bf00      	nop
 800ab48:	3708      	adds	r7, #8
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b082      	sub	sp, #8
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	2b0b      	cmp	r3, #11
 800ab5e:	d10a      	bne.n	800ab76 <USBH_HandleSof+0x28>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d005      	beq.n	800ab76 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab70:	699b      	ldr	r3, [r3, #24]
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	4798      	blx	r3
  }
}
 800ab76:	bf00      	nop
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ab7e:	b480      	push	{r7}
 800ab80:	b083      	sub	sp, #12
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800ab8e:	bf00      	nop
}
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b083      	sub	sp, #12
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800abaa:	bf00      	nop
}
 800abac:	370c      	adds	r7, #12
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr

0800abb6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800abb6:	b480      	push	{r7}
 800abb8:	b083      	sub	sp, #12
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2201      	movs	r2, #1
 800abc2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f004 fb36 	bl	800f276 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	791b      	ldrb	r3, [r3, #4]
 800ac0e:	4619      	mov	r1, r3
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 fe93 	bl	800b93c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	795b      	ldrb	r3, [r3, #5]
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 fe8d 	bl	800b93c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ac22:	2300      	movs	r3, #0
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3708      	adds	r7, #8
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af02      	add	r7, sp, #8
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	460b      	mov	r3, r1
 800ac36:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ac3e:	78fb      	ldrb	r3, [r7, #3]
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	4613      	mov	r3, r2
 800ac46:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 f864 	bl	800ad1a <USBH_GetDescriptor>
 800ac52:	4603      	mov	r3, r0
 800ac54:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800ac56:	7bfb      	ldrb	r3, [r7, #15]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d10a      	bne.n	800ac72 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ac68:	78fa      	ldrb	r2, [r7, #3]
 800ac6a:	b292      	uxth	r2, r2
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	f000 f919 	bl	800aea4 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ac72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3710      	adds	r7, #16
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b086      	sub	sp, #24
 800ac80:	af02      	add	r7, sp, #8
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	460b      	mov	r3, r1
 800ac86:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	331c      	adds	r3, #28
 800ac8c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ac8e:	887b      	ldrh	r3, [r7, #2]
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac98:	2100      	movs	r1, #0
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 f83d 	bl	800ad1a <USBH_GetDescriptor>
 800aca0:	4603      	mov	r3, r0
 800aca2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800aca4:	7bfb      	ldrb	r3, [r7, #15]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d107      	bne.n	800acba <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800acaa:	887b      	ldrh	r3, [r7, #2]
 800acac:	461a      	mov	r2, r3
 800acae:	68b9      	ldr	r1, [r7, #8]
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 f989 	bl	800afc8 <USBH_ParseCfgDesc>
 800acb6:	4603      	mov	r3, r0
 800acb8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800acba:	7bfb      	ldrb	r3, [r7, #15]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3710      	adds	r7, #16
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b088      	sub	sp, #32
 800acc8:	af02      	add	r7, sp, #8
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	607a      	str	r2, [r7, #4]
 800acce:	461a      	mov	r2, r3
 800acd0:	460b      	mov	r3, r1
 800acd2:	72fb      	strb	r3, [r7, #11]
 800acd4:	4613      	mov	r3, r2
 800acd6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800acd8:	7afb      	ldrb	r3, [r7, #11]
 800acda:	b29b      	uxth	r3, r3
 800acdc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ace0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ace8:	893b      	ldrh	r3, [r7, #8]
 800acea:	9300      	str	r3, [sp, #0]
 800acec:	460b      	mov	r3, r1
 800acee:	2100      	movs	r1, #0
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f000 f812 	bl	800ad1a <USBH_GetDescriptor>
 800acf6:	4603      	mov	r3, r0
 800acf8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800acfa:	7dfb      	ldrb	r3, [r7, #23]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d107      	bne.n	800ad10 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ad06:	893a      	ldrh	r2, [r7, #8]
 800ad08:	6879      	ldr	r1, [r7, #4]
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f000 fb26 	bl	800b35c <USBH_ParseStringDesc>
  }

  return status;
 800ad10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3718      	adds	r7, #24
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b084      	sub	sp, #16
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	60f8      	str	r0, [r7, #12]
 800ad22:	607b      	str	r3, [r7, #4]
 800ad24:	460b      	mov	r3, r1
 800ad26:	72fb      	strb	r3, [r7, #11]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	789b      	ldrb	r3, [r3, #2]
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d11c      	bne.n	800ad6e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ad34:	7afb      	ldrb	r3, [r7, #11]
 800ad36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ad3a:	b2da      	uxtb	r2, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2206      	movs	r2, #6
 800ad44:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	893a      	ldrh	r2, [r7, #8]
 800ad4a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ad4c:	893b      	ldrh	r3, [r7, #8]
 800ad4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ad52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad56:	d104      	bne.n	800ad62 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f240 4209 	movw	r2, #1033	; 0x409
 800ad5e:	829a      	strh	r2, [r3, #20]
 800ad60:	e002      	b.n	800ad68 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2200      	movs	r2, #0
 800ad66:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	8b3a      	ldrh	r2, [r7, #24]
 800ad6c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ad6e:	8b3b      	ldrh	r3, [r7, #24]
 800ad70:	461a      	mov	r2, r3
 800ad72:	6879      	ldr	r1, [r7, #4]
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	f000 fb3f 	bl	800b3f8 <USBH_CtlReq>
 800ad7a:	4603      	mov	r3, r0
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3710      	adds	r7, #16
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	789b      	ldrb	r3, [r3, #2]
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d10f      	bne.n	800adb8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2205      	movs	r2, #5
 800ada2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ada4:	78fb      	ldrb	r3, [r7, #3]
 800ada6:	b29a      	uxth	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800adb8:	2200      	movs	r2, #0
 800adba:	2100      	movs	r1, #0
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fb1b 	bl	800b3f8 <USBH_CtlReq>
 800adc2:	4603      	mov	r3, r0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3708      	adds	r7, #8
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	460b      	mov	r3, r1
 800add6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	789b      	ldrb	r3, [r3, #2]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d10e      	bne.n	800adfe <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2209      	movs	r2, #9
 800adea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	887a      	ldrh	r2, [r7, #2]
 800adf0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2200      	movs	r2, #0
 800adfc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800adfe:	2200      	movs	r2, #0
 800ae00:	2100      	movs	r1, #0
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 faf8 	bl	800b3f8 <USBH_CtlReq>
 800ae08:	4603      	mov	r3, r0
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3708      	adds	r7, #8
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b082      	sub	sp, #8
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	789b      	ldrb	r3, [r3, #2]
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d10f      	bne.n	800ae46 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2203      	movs	r2, #3
 800ae30:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ae32:	78fb      	ldrb	r3, [r7, #3]
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ae46:	2200      	movs	r2, #0
 800ae48:	2100      	movs	r1, #0
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 fad4 	bl	800b3f8 <USBH_CtlReq>
 800ae50:	4603      	mov	r3, r0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3708      	adds	r7, #8
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b082      	sub	sp, #8
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
 800ae62:	460b      	mov	r3, r1
 800ae64:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	789b      	ldrb	r3, [r3, #2]
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d10f      	bne.n	800ae8e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2202      	movs	r2, #2
 800ae72:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2201      	movs	r2, #1
 800ae78:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ae80:	78fb      	ldrb	r3, [r7, #3]
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800ae8e:	2200      	movs	r2, #0
 800ae90:	2100      	movs	r1, #0
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 fab0 	bl	800b3f8 <USBH_CtlReq>
 800ae98:	4603      	mov	r3, r0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
	...

0800aea4 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	4613      	mov	r3, r2
 800aeb0:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	781a      	ldrb	r2, [r3, #0]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	785a      	ldrb	r2, [r3, #1]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	3302      	adds	r3, #2
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	3303      	adds	r3, #3
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	021b      	lsls	r3, r3, #8
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	4313      	orrs	r3, r2
 800aed8:	b29a      	uxth	r2, r3
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	791a      	ldrb	r2, [r3, #4]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	795a      	ldrb	r2, [r3, #5]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	799a      	ldrb	r2, [r3, #6]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	79da      	ldrb	r2, [r3, #7]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	79db      	ldrb	r3, [r3, #7]
 800af02:	2b20      	cmp	r3, #32
 800af04:	dc0f      	bgt.n	800af26 <USBH_ParseDevDesc+0x82>
 800af06:	2b08      	cmp	r3, #8
 800af08:	db14      	blt.n	800af34 <USBH_ParseDevDesc+0x90>
 800af0a:	3b08      	subs	r3, #8
 800af0c:	4a2d      	ldr	r2, [pc, #180]	; (800afc4 <USBH_ParseDevDesc+0x120>)
 800af0e:	fa22 f303 	lsr.w	r3, r2, r3
 800af12:	f003 0301 	and.w	r3, r3, #1
 800af16:	2b00      	cmp	r3, #0
 800af18:	bf14      	ite	ne
 800af1a:	2301      	movne	r3, #1
 800af1c:	2300      	moveq	r3, #0
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	2b00      	cmp	r3, #0
 800af22:	d102      	bne.n	800af2a <USBH_ParseDevDesc+0x86>
 800af24:	e006      	b.n	800af34 <USBH_ParseDevDesc+0x90>
 800af26:	2b40      	cmp	r3, #64	; 0x40
 800af28:	d104      	bne.n	800af34 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	79da      	ldrb	r2, [r3, #7]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	71da      	strb	r2, [r3, #7]
      break;
 800af32:	e003      	b.n	800af3c <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2240      	movs	r2, #64	; 0x40
 800af38:	71da      	strb	r2, [r3, #7]
      break;
 800af3a:	bf00      	nop
  }

  if (length > 8U)
 800af3c:	88fb      	ldrh	r3, [r7, #6]
 800af3e:	2b08      	cmp	r3, #8
 800af40:	d939      	bls.n	800afb6 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	3308      	adds	r3, #8
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	b29a      	uxth	r2, r3
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	3309      	adds	r3, #9
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	b29b      	uxth	r3, r3
 800af52:	021b      	lsls	r3, r3, #8
 800af54:	b29b      	uxth	r3, r3
 800af56:	4313      	orrs	r3, r2
 800af58:	b29a      	uxth	r2, r3
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	330a      	adds	r3, #10
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	b29a      	uxth	r2, r3
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	330b      	adds	r3, #11
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	021b      	lsls	r3, r3, #8
 800af70:	b29b      	uxth	r3, r3
 800af72:	4313      	orrs	r3, r2
 800af74:	b29a      	uxth	r2, r3
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	330c      	adds	r3, #12
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	b29a      	uxth	r2, r3
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	330d      	adds	r3, #13
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	b29b      	uxth	r3, r3
 800af8a:	021b      	lsls	r3, r3, #8
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	4313      	orrs	r3, r2
 800af90:	b29a      	uxth	r2, r3
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	7b9a      	ldrb	r2, [r3, #14]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	7bda      	ldrb	r2, [r3, #15]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	7c1a      	ldrb	r2, [r3, #16]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	7c5a      	ldrb	r2, [r3, #17]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	745a      	strb	r2, [r3, #17]
  }
}
 800afb6:	bf00      	nop
 800afb8:	3714      	adds	r7, #20
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop
 800afc4:	01000101 	.word	0x01000101

0800afc8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b08c      	sub	sp, #48	; 0x30
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	4613      	mov	r3, r2
 800afd4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800afdc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800afde:	2300      	movs	r3, #0
 800afe0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800afe8:	2300      	movs	r3, #0
 800afea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800afee:	2300      	movs	r3, #0
 800aff0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	781a      	ldrb	r2, [r3, #0]
 800affc:	6a3b      	ldr	r3, [r7, #32]
 800affe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	785a      	ldrb	r2, [r3, #1]
 800b004:	6a3b      	ldr	r3, [r7, #32]
 800b006:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	3302      	adds	r3, #2
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	b29a      	uxth	r2, r3
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	3303      	adds	r3, #3
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	b29b      	uxth	r3, r3
 800b018:	021b      	lsls	r3, r3, #8
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	4313      	orrs	r3, r2
 800b01e:	b29b      	uxth	r3, r3
 800b020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b024:	bf28      	it	cs
 800b026:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b02a:	b29a      	uxth	r2, r3
 800b02c:	6a3b      	ldr	r3, [r7, #32]
 800b02e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	791a      	ldrb	r2, [r3, #4]
 800b034:	6a3b      	ldr	r3, [r7, #32]
 800b036:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	795a      	ldrb	r2, [r3, #5]
 800b03c:	6a3b      	ldr	r3, [r7, #32]
 800b03e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	799a      	ldrb	r2, [r3, #6]
 800b044:	6a3b      	ldr	r3, [r7, #32]
 800b046:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	79da      	ldrb	r2, [r3, #7]
 800b04c:	6a3b      	ldr	r3, [r7, #32]
 800b04e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	7a1a      	ldrb	r2, [r3, #8]
 800b054:	6a3b      	ldr	r3, [r7, #32]
 800b056:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b058:	6a3b      	ldr	r3, [r7, #32]
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	2b09      	cmp	r3, #9
 800b05e:	d002      	beq.n	800b066 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b060:	6a3b      	ldr	r3, [r7, #32]
 800b062:	2209      	movs	r2, #9
 800b064:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b066:	88fb      	ldrh	r3, [r7, #6]
 800b068:	2b09      	cmp	r3, #9
 800b06a:	f240 809d 	bls.w	800b1a8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800b06e:	2309      	movs	r3, #9
 800b070:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b072:	2300      	movs	r3, #0
 800b074:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b076:	e081      	b.n	800b17c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b078:	f107 0316 	add.w	r3, r7, #22
 800b07c:	4619      	mov	r1, r3
 800b07e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b080:	f000 f99f 	bl	800b3c2 <USBH_GetNextDesc>
 800b084:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b088:	785b      	ldrb	r3, [r3, #1]
 800b08a:	2b04      	cmp	r3, #4
 800b08c:	d176      	bne.n	800b17c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	2b09      	cmp	r3, #9
 800b094:	d002      	beq.n	800b09c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b098:	2209      	movs	r2, #9
 800b09a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b09c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0a0:	221a      	movs	r2, #26
 800b0a2:	fb02 f303 	mul.w	r3, r2, r3
 800b0a6:	3308      	adds	r3, #8
 800b0a8:	6a3a      	ldr	r2, [r7, #32]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	3302      	adds	r3, #2
 800b0ae:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b0b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0b2:	69f8      	ldr	r0, [r7, #28]
 800b0b4:	f000 f87e 	bl	800b1b4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b0c2:	e043      	b.n	800b14c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b0c4:	f107 0316 	add.w	r3, r7, #22
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0cc:	f000 f979 	bl	800b3c2 <USBH_GetNextDesc>
 800b0d0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d4:	785b      	ldrb	r3, [r3, #1]
 800b0d6:	2b05      	cmp	r3, #5
 800b0d8:	d138      	bne.n	800b14c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b0da:	69fb      	ldr	r3, [r7, #28]
 800b0dc:	795b      	ldrb	r3, [r3, #5]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d10f      	bne.n	800b102 <USBH_ParseCfgDesc+0x13a>
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	799b      	ldrb	r3, [r3, #6]
 800b0e6:	2b02      	cmp	r3, #2
 800b0e8:	d10b      	bne.n	800b102 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	79db      	ldrb	r3, [r3, #7]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d10f      	bne.n	800b112 <USBH_ParseCfgDesc+0x14a>
 800b0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	2b09      	cmp	r3, #9
 800b0f8:	d00b      	beq.n	800b112 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800b0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fc:	2209      	movs	r2, #9
 800b0fe:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b100:	e007      	b.n	800b112 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	2b07      	cmp	r3, #7
 800b108:	d004      	beq.n	800b114 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10c:	2207      	movs	r2, #7
 800b10e:	701a      	strb	r2, [r3, #0]
 800b110:	e000      	b.n	800b114 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b112:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b118:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b11c:	3201      	adds	r2, #1
 800b11e:	00d2      	lsls	r2, r2, #3
 800b120:	211a      	movs	r1, #26
 800b122:	fb01 f303 	mul.w	r3, r1, r3
 800b126:	4413      	add	r3, r2
 800b128:	3308      	adds	r3, #8
 800b12a:	6a3a      	ldr	r2, [r7, #32]
 800b12c:	4413      	add	r3, r2
 800b12e:	3304      	adds	r3, #4
 800b130:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b134:	69b9      	ldr	r1, [r7, #24]
 800b136:	68f8      	ldr	r0, [r7, #12]
 800b138:	f000 f86b 	bl	800b212 <USBH_ParseEPDesc>
 800b13c:	4603      	mov	r3, r0
 800b13e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800b142:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b146:	3301      	adds	r3, #1
 800b148:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	791b      	ldrb	r3, [r3, #4]
 800b150:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b154:	429a      	cmp	r2, r3
 800b156:	d204      	bcs.n	800b162 <USBH_ParseCfgDesc+0x19a>
 800b158:	6a3b      	ldr	r3, [r7, #32]
 800b15a:	885a      	ldrh	r2, [r3, #2]
 800b15c:	8afb      	ldrh	r3, [r7, #22]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d8b0      	bhi.n	800b0c4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	791b      	ldrb	r3, [r3, #4]
 800b166:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d201      	bcs.n	800b172 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800b16e:	2303      	movs	r3, #3
 800b170:	e01c      	b.n	800b1ac <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800b172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b176:	3301      	adds	r3, #1
 800b178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b17c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b180:	2b01      	cmp	r3, #1
 800b182:	d805      	bhi.n	800b190 <USBH_ParseCfgDesc+0x1c8>
 800b184:	6a3b      	ldr	r3, [r7, #32]
 800b186:	885a      	ldrh	r2, [r3, #2]
 800b188:	8afb      	ldrh	r3, [r7, #22]
 800b18a:	429a      	cmp	r2, r3
 800b18c:	f63f af74 	bhi.w	800b078 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b190:	6a3b      	ldr	r3, [r7, #32]
 800b192:	791b      	ldrb	r3, [r3, #4]
 800b194:	2b02      	cmp	r3, #2
 800b196:	bf28      	it	cs
 800b198:	2302      	movcs	r3, #2
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d201      	bcs.n	800b1a8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800b1a4:	2303      	movs	r3, #3
 800b1a6:	e001      	b.n	800b1ac <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800b1a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3730      	adds	r7, #48	; 0x30
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	781a      	ldrb	r2, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	785a      	ldrb	r2, [r3, #1]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	789a      	ldrb	r2, [r3, #2]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	78da      	ldrb	r2, [r3, #3]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	791a      	ldrb	r2, [r3, #4]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	795a      	ldrb	r2, [r3, #5]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	799a      	ldrb	r2, [r3, #6]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	79da      	ldrb	r2, [r3, #7]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	7a1a      	ldrb	r2, [r3, #8]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	721a      	strb	r2, [r3, #8]
}
 800b206:	bf00      	nop
 800b208:	370c      	adds	r7, #12
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr

0800b212 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b212:	b480      	push	{r7}
 800b214:	b087      	sub	sp, #28
 800b216:	af00      	add	r7, sp, #0
 800b218:	60f8      	str	r0, [r7, #12]
 800b21a:	60b9      	str	r1, [r7, #8]
 800b21c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b21e:	2300      	movs	r3, #0
 800b220:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	781a      	ldrb	r2, [r3, #0]
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	785a      	ldrb	r2, [r3, #1]
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	789a      	ldrb	r2, [r3, #2]
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	78da      	ldrb	r2, [r3, #3]
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	3304      	adds	r3, #4
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	b29a      	uxth	r2, r3
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	3305      	adds	r3, #5
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	b29b      	uxth	r3, r3
 800b252:	021b      	lsls	r3, r3, #8
 800b254:	b29b      	uxth	r3, r3
 800b256:	4313      	orrs	r3, r2
 800b258:	b29a      	uxth	r2, r3
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	799a      	ldrb	r2, [r3, #6]
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	889b      	ldrh	r3, [r3, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d102      	bne.n	800b274 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800b26e:	2303      	movs	r3, #3
 800b270:	75fb      	strb	r3, [r7, #23]
 800b272:	e033      	b.n	800b2dc <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	889b      	ldrh	r3, [r3, #4]
 800b278:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b27c:	f023 0307 	bic.w	r3, r3, #7
 800b280:	b29a      	uxth	r2, r3
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	889b      	ldrh	r3, [r3, #4]
 800b28a:	b21a      	sxth	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	3304      	adds	r3, #4
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	b299      	uxth	r1, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	3305      	adds	r3, #5
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	021b      	lsls	r3, r3, #8
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	430b      	orrs	r3, r1
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d110      	bne.n	800b2ce <USBH_ParseEPDesc+0xbc>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	3304      	adds	r3, #4
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	b299      	uxth	r1, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	3305      	adds	r3, #5
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	021b      	lsls	r3, r3, #8
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	430b      	orrs	r3, r1
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	b21b      	sxth	r3, r3
 800b2c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2ca:	b21b      	sxth	r3, r3
 800b2cc:	e001      	b.n	800b2d2 <USBH_ParseEPDesc+0xc0>
 800b2ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	b21b      	sxth	r3, r3
 800b2d6:	b29a      	uxth	r2, r3
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d116      	bne.n	800b314 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	78db      	ldrb	r3, [r3, #3]
 800b2ea:	f003 0303 	and.w	r3, r3, #3
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d005      	beq.n	800b2fe <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	78db      	ldrb	r3, [r3, #3]
 800b2f6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b2fa:	2b03      	cmp	r3, #3
 800b2fc:	d127      	bne.n	800b34e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	799b      	ldrb	r3, [r3, #6]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d003      	beq.n	800b30e <USBH_ParseEPDesc+0xfc>
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	799b      	ldrb	r3, [r3, #6]
 800b30a:	2b10      	cmp	r3, #16
 800b30c:	d91f      	bls.n	800b34e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b30e:	2303      	movs	r3, #3
 800b310:	75fb      	strb	r3, [r7, #23]
 800b312:	e01c      	b.n	800b34e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	78db      	ldrb	r3, [r3, #3]
 800b318:	f003 0303 	and.w	r3, r3, #3
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d10a      	bne.n	800b336 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	799b      	ldrb	r3, [r3, #6]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d003      	beq.n	800b330 <USBH_ParseEPDesc+0x11e>
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	799b      	ldrb	r3, [r3, #6]
 800b32c:	2b10      	cmp	r3, #16
 800b32e:	d90e      	bls.n	800b34e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b330:	2303      	movs	r3, #3
 800b332:	75fb      	strb	r3, [r7, #23]
 800b334:	e00b      	b.n	800b34e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	78db      	ldrb	r3, [r3, #3]
 800b33a:	f003 0303 	and.w	r3, r3, #3
 800b33e:	2b03      	cmp	r3, #3
 800b340:	d105      	bne.n	800b34e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	799b      	ldrb	r3, [r3, #6]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d101      	bne.n	800b34e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b34a:	2303      	movs	r3, #3
 800b34c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b34e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b350:	4618      	mov	r0, r3
 800b352:	371c      	adds	r7, #28
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b087      	sub	sp, #28
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	4613      	mov	r3, r2
 800b368:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	3301      	adds	r3, #1
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	2b03      	cmp	r3, #3
 800b372:	d120      	bne.n	800b3b6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	1e9a      	subs	r2, r3, #2
 800b37a:	88fb      	ldrh	r3, [r7, #6]
 800b37c:	4293      	cmp	r3, r2
 800b37e:	bf28      	it	cs
 800b380:	4613      	movcs	r3, r2
 800b382:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	3302      	adds	r3, #2
 800b388:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b38a:	2300      	movs	r3, #0
 800b38c:	82fb      	strh	r3, [r7, #22]
 800b38e:	e00b      	b.n	800b3a8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b390:	8afb      	ldrh	r3, [r7, #22]
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	4413      	add	r3, r2
 800b396:	781a      	ldrb	r2, [r3, #0]
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b3a2:	8afb      	ldrh	r3, [r7, #22]
 800b3a4:	3302      	adds	r3, #2
 800b3a6:	82fb      	strh	r3, [r7, #22]
 800b3a8:	8afa      	ldrh	r2, [r7, #22]
 800b3aa:	8abb      	ldrh	r3, [r7, #20]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d3ef      	bcc.n	800b390 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	701a      	strb	r2, [r3, #0]
  }
}
 800b3b6:	bf00      	nop
 800b3b8:	371c      	adds	r7, #28
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr

0800b3c2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b3c2:	b480      	push	{r7}
 800b3c4:	b085      	sub	sp, #20
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
 800b3ca:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	881a      	ldrh	r2, [r3, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	4413      	add	r3, r2
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3714      	adds	r7, #20
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b086      	sub	sp, #24
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	4613      	mov	r3, r2
 800b404:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b406:	2301      	movs	r3, #1
 800b408:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	789b      	ldrb	r3, [r3, #2]
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d002      	beq.n	800b418 <USBH_CtlReq+0x20>
 800b412:	2b02      	cmp	r3, #2
 800b414:	d00f      	beq.n	800b436 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b416:	e027      	b.n	800b468 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	68ba      	ldr	r2, [r7, #8]
 800b41c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	88fa      	ldrh	r2, [r7, #6]
 800b422:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2201      	movs	r2, #1
 800b428:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2202      	movs	r2, #2
 800b42e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b430:	2301      	movs	r3, #1
 800b432:	75fb      	strb	r3, [r7, #23]
      break;
 800b434:	e018      	b.n	800b468 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f000 f81c 	bl	800b474 <USBH_HandleControl>
 800b43c:	4603      	mov	r3, r0
 800b43e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b440:	7dfb      	ldrb	r3, [r7, #23]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d002      	beq.n	800b44c <USBH_CtlReq+0x54>
 800b446:	7dfb      	ldrb	r3, [r7, #23]
 800b448:	2b03      	cmp	r3, #3
 800b44a:	d106      	bne.n	800b45a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2201      	movs	r2, #1
 800b450:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2200      	movs	r2, #0
 800b456:	761a      	strb	r2, [r3, #24]
      break;
 800b458:	e005      	b.n	800b466 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b45a:	7dfb      	ldrb	r3, [r7, #23]
 800b45c:	2b02      	cmp	r3, #2
 800b45e:	d102      	bne.n	800b466 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2201      	movs	r2, #1
 800b464:	709a      	strb	r2, [r3, #2]
      break;
 800b466:	bf00      	nop
  }
  return status;
 800b468:	7dfb      	ldrb	r3, [r7, #23]
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3718      	adds	r7, #24
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
	...

0800b474 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b086      	sub	sp, #24
 800b478:	af02      	add	r7, sp, #8
 800b47a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b47c:	2301      	movs	r3, #1
 800b47e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b480:	2300      	movs	r3, #0
 800b482:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	7e1b      	ldrb	r3, [r3, #24]
 800b488:	3b01      	subs	r3, #1
 800b48a:	2b0a      	cmp	r3, #10
 800b48c:	f200 8156 	bhi.w	800b73c <USBH_HandleControl+0x2c8>
 800b490:	a201      	add	r2, pc, #4	; (adr r2, 800b498 <USBH_HandleControl+0x24>)
 800b492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b496:	bf00      	nop
 800b498:	0800b4c5 	.word	0x0800b4c5
 800b49c:	0800b4df 	.word	0x0800b4df
 800b4a0:	0800b549 	.word	0x0800b549
 800b4a4:	0800b56f 	.word	0x0800b56f
 800b4a8:	0800b5a7 	.word	0x0800b5a7
 800b4ac:	0800b5d1 	.word	0x0800b5d1
 800b4b0:	0800b623 	.word	0x0800b623
 800b4b4:	0800b645 	.word	0x0800b645
 800b4b8:	0800b681 	.word	0x0800b681
 800b4bc:	0800b6a7 	.word	0x0800b6a7
 800b4c0:	0800b6e5 	.word	0x0800b6e5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f103 0110 	add.w	r1, r3, #16
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	795b      	ldrb	r3, [r3, #5]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 f943 	bl	800b75c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2202      	movs	r2, #2
 800b4da:	761a      	strb	r2, [r3, #24]
      break;
 800b4dc:	e139      	b.n	800b752 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	795b      	ldrb	r3, [r3, #5]
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f003 ffb5 	bl	800f454 <USBH_LL_GetURBState>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b4ee:	7bbb      	ldrb	r3, [r7, #14]
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d11e      	bne.n	800b532 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	7c1b      	ldrb	r3, [r3, #16]
 800b4f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b4fc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	8adb      	ldrh	r3, [r3, #22]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00a      	beq.n	800b51c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b506:	7b7b      	ldrb	r3, [r7, #13]
 800b508:	2b80      	cmp	r3, #128	; 0x80
 800b50a:	d103      	bne.n	800b514 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2203      	movs	r2, #3
 800b510:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b512:	e115      	b.n	800b740 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2205      	movs	r2, #5
 800b518:	761a      	strb	r2, [r3, #24]
      break;
 800b51a:	e111      	b.n	800b740 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b51c:	7b7b      	ldrb	r3, [r7, #13]
 800b51e:	2b80      	cmp	r3, #128	; 0x80
 800b520:	d103      	bne.n	800b52a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2209      	movs	r2, #9
 800b526:	761a      	strb	r2, [r3, #24]
      break;
 800b528:	e10a      	b.n	800b740 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2207      	movs	r2, #7
 800b52e:	761a      	strb	r2, [r3, #24]
      break;
 800b530:	e106      	b.n	800b740 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b532:	7bbb      	ldrb	r3, [r7, #14]
 800b534:	2b04      	cmp	r3, #4
 800b536:	d003      	beq.n	800b540 <USBH_HandleControl+0xcc>
 800b538:	7bbb      	ldrb	r3, [r7, #14]
 800b53a:	2b02      	cmp	r3, #2
 800b53c:	f040 8100 	bne.w	800b740 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	220b      	movs	r2, #11
 800b544:	761a      	strb	r2, [r3, #24]
      break;
 800b546:	e0fb      	b.n	800b740 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b54e:	b29a      	uxth	r2, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6899      	ldr	r1, [r3, #8]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	899a      	ldrh	r2, [r3, #12]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	791b      	ldrb	r3, [r3, #4]
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 f93a 	bl	800b7da <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2204      	movs	r2, #4
 800b56a:	761a      	strb	r2, [r3, #24]
      break;
 800b56c:	e0f1      	b.n	800b752 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	791b      	ldrb	r3, [r3, #4]
 800b572:	4619      	mov	r1, r3
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f003 ff6d 	bl	800f454 <USBH_LL_GetURBState>
 800b57a:	4603      	mov	r3, r0
 800b57c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b57e:	7bbb      	ldrb	r3, [r7, #14]
 800b580:	2b01      	cmp	r3, #1
 800b582:	d102      	bne.n	800b58a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2209      	movs	r2, #9
 800b588:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b58a:	7bbb      	ldrb	r3, [r7, #14]
 800b58c:	2b05      	cmp	r3, #5
 800b58e:	d102      	bne.n	800b596 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b590:	2303      	movs	r3, #3
 800b592:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b594:	e0d6      	b.n	800b744 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b596:	7bbb      	ldrb	r3, [r7, #14]
 800b598:	2b04      	cmp	r3, #4
 800b59a:	f040 80d3 	bne.w	800b744 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	220b      	movs	r2, #11
 800b5a2:	761a      	strb	r2, [r3, #24]
      break;
 800b5a4:	e0ce      	b.n	800b744 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6899      	ldr	r1, [r3, #8]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	899a      	ldrh	r2, [r3, #12]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	795b      	ldrb	r3, [r3, #5]
 800b5b2:	2001      	movs	r0, #1
 800b5b4:	9000      	str	r0, [sp, #0]
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 f8ea 	bl	800b790 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b5c2:	b29a      	uxth	r2, r3
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2206      	movs	r2, #6
 800b5cc:	761a      	strb	r2, [r3, #24]
      break;
 800b5ce:	e0c0      	b.n	800b752 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	795b      	ldrb	r3, [r3, #5]
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f003 ff3c 	bl	800f454 <USBH_LL_GetURBState>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b5e0:	7bbb      	ldrb	r3, [r7, #14]
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d103      	bne.n	800b5ee <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2207      	movs	r2, #7
 800b5ea:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b5ec:	e0ac      	b.n	800b748 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b5ee:	7bbb      	ldrb	r3, [r7, #14]
 800b5f0:	2b05      	cmp	r3, #5
 800b5f2:	d105      	bne.n	800b600 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	220c      	movs	r2, #12
 800b5f8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b5fa:	2303      	movs	r3, #3
 800b5fc:	73fb      	strb	r3, [r7, #15]
      break;
 800b5fe:	e0a3      	b.n	800b748 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b600:	7bbb      	ldrb	r3, [r7, #14]
 800b602:	2b02      	cmp	r3, #2
 800b604:	d103      	bne.n	800b60e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2205      	movs	r2, #5
 800b60a:	761a      	strb	r2, [r3, #24]
      break;
 800b60c:	e09c      	b.n	800b748 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b60e:	7bbb      	ldrb	r3, [r7, #14]
 800b610:	2b04      	cmp	r3, #4
 800b612:	f040 8099 	bne.w	800b748 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	220b      	movs	r2, #11
 800b61a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b61c:	2302      	movs	r3, #2
 800b61e:	73fb      	strb	r3, [r7, #15]
      break;
 800b620:	e092      	b.n	800b748 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	791b      	ldrb	r3, [r3, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	2100      	movs	r1, #0
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 f8d5 	bl	800b7da <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b636:	b29a      	uxth	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2208      	movs	r2, #8
 800b640:	761a      	strb	r2, [r3, #24]

      break;
 800b642:	e086      	b.n	800b752 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	791b      	ldrb	r3, [r3, #4]
 800b648:	4619      	mov	r1, r3
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f003 ff02 	bl	800f454 <USBH_LL_GetURBState>
 800b650:	4603      	mov	r3, r0
 800b652:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b654:	7bbb      	ldrb	r3, [r7, #14]
 800b656:	2b01      	cmp	r3, #1
 800b658:	d105      	bne.n	800b666 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	220d      	movs	r2, #13
 800b65e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b660:	2300      	movs	r3, #0
 800b662:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b664:	e072      	b.n	800b74c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b666:	7bbb      	ldrb	r3, [r7, #14]
 800b668:	2b04      	cmp	r3, #4
 800b66a:	d103      	bne.n	800b674 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	220b      	movs	r2, #11
 800b670:	761a      	strb	r2, [r3, #24]
      break;
 800b672:	e06b      	b.n	800b74c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b674:	7bbb      	ldrb	r3, [r7, #14]
 800b676:	2b05      	cmp	r3, #5
 800b678:	d168      	bne.n	800b74c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b67a:	2303      	movs	r3, #3
 800b67c:	73fb      	strb	r3, [r7, #15]
      break;
 800b67e:	e065      	b.n	800b74c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	795b      	ldrb	r3, [r3, #5]
 800b684:	2201      	movs	r2, #1
 800b686:	9200      	str	r2, [sp, #0]
 800b688:	2200      	movs	r2, #0
 800b68a:	2100      	movs	r1, #0
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 f87f 	bl	800b790 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b698:	b29a      	uxth	r2, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	220a      	movs	r2, #10
 800b6a2:	761a      	strb	r2, [r3, #24]
      break;
 800b6a4:	e055      	b.n	800b752 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	795b      	ldrb	r3, [r3, #5]
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f003 fed1 	bl	800f454 <USBH_LL_GetURBState>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b6b6:	7bbb      	ldrb	r3, [r7, #14]
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d105      	bne.n	800b6c8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	220d      	movs	r2, #13
 800b6c4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b6c6:	e043      	b.n	800b750 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b6c8:	7bbb      	ldrb	r3, [r7, #14]
 800b6ca:	2b02      	cmp	r3, #2
 800b6cc:	d103      	bne.n	800b6d6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2209      	movs	r2, #9
 800b6d2:	761a      	strb	r2, [r3, #24]
      break;
 800b6d4:	e03c      	b.n	800b750 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b6d6:	7bbb      	ldrb	r3, [r7, #14]
 800b6d8:	2b04      	cmp	r3, #4
 800b6da:	d139      	bne.n	800b750 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	220b      	movs	r2, #11
 800b6e0:	761a      	strb	r2, [r3, #24]
      break;
 800b6e2:	e035      	b.n	800b750 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	7e5b      	ldrb	r3, [r3, #25]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	b2da      	uxtb	r2, r3
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	765a      	strb	r2, [r3, #25]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	7e5b      	ldrb	r3, [r3, #25]
 800b6f4:	2b02      	cmp	r3, #2
 800b6f6:	d806      	bhi.n	800b706 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2201      	movs	r2, #1
 800b702:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b704:	e025      	b.n	800b752 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b70c:	2106      	movs	r1, #6
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	795b      	ldrb	r3, [r3, #5]
 800b71c:	4619      	mov	r1, r3
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 f90c 	bl	800b93c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	791b      	ldrb	r3, [r3, #4]
 800b728:	4619      	mov	r1, r3
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f906 	bl	800b93c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b736:	2302      	movs	r3, #2
 800b738:	73fb      	strb	r3, [r7, #15]
      break;
 800b73a:	e00a      	b.n	800b752 <USBH_HandleControl+0x2de>

    default:
      break;
 800b73c:	bf00      	nop
 800b73e:	e008      	b.n	800b752 <USBH_HandleControl+0x2de>
      break;
 800b740:	bf00      	nop
 800b742:	e006      	b.n	800b752 <USBH_HandleControl+0x2de>
      break;
 800b744:	bf00      	nop
 800b746:	e004      	b.n	800b752 <USBH_HandleControl+0x2de>
      break;
 800b748:	bf00      	nop
 800b74a:	e002      	b.n	800b752 <USBH_HandleControl+0x2de>
      break;
 800b74c:	bf00      	nop
 800b74e:	e000      	b.n	800b752 <USBH_HandleControl+0x2de>
      break;
 800b750:	bf00      	nop
  }

  return status;
 800b752:	7bfb      	ldrb	r3, [r7, #15]
}
 800b754:	4618      	mov	r0, r3
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b088      	sub	sp, #32
 800b760:	af04      	add	r7, sp, #16
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	4613      	mov	r3, r2
 800b768:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b76a:	79f9      	ldrb	r1, [r7, #7]
 800b76c:	2300      	movs	r3, #0
 800b76e:	9303      	str	r3, [sp, #12]
 800b770:	2308      	movs	r3, #8
 800b772:	9302      	str	r3, [sp, #8]
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	9301      	str	r3, [sp, #4]
 800b778:	2300      	movs	r3, #0
 800b77a:	9300      	str	r3, [sp, #0]
 800b77c:	2300      	movs	r3, #0
 800b77e:	2200      	movs	r2, #0
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	f003 fe36 	bl	800f3f2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b786:	2300      	movs	r3, #0
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3710      	adds	r7, #16
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b088      	sub	sp, #32
 800b794:	af04      	add	r7, sp, #16
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	4611      	mov	r1, r2
 800b79c:	461a      	mov	r2, r3
 800b79e:	460b      	mov	r3, r1
 800b7a0:	80fb      	strh	r3, [r7, #6]
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d001      	beq.n	800b7b4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b7b4:	7979      	ldrb	r1, [r7, #5]
 800b7b6:	7e3b      	ldrb	r3, [r7, #24]
 800b7b8:	9303      	str	r3, [sp, #12]
 800b7ba:	88fb      	ldrh	r3, [r7, #6]
 800b7bc:	9302      	str	r3, [sp, #8]
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	9301      	str	r3, [sp, #4]
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	9300      	str	r3, [sp, #0]
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f003 fe11 	bl	800f3f2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3710      	adds	r7, #16
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}

0800b7da <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b088      	sub	sp, #32
 800b7de:	af04      	add	r7, sp, #16
 800b7e0:	60f8      	str	r0, [r7, #12]
 800b7e2:	60b9      	str	r1, [r7, #8]
 800b7e4:	4611      	mov	r1, r2
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	80fb      	strh	r3, [r7, #6]
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b7f0:	7979      	ldrb	r1, [r7, #5]
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	9303      	str	r3, [sp, #12]
 800b7f6:	88fb      	ldrh	r3, [r7, #6]
 800b7f8:	9302      	str	r3, [sp, #8]
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	9301      	str	r3, [sp, #4]
 800b7fe:	2301      	movs	r3, #1
 800b800:	9300      	str	r3, [sp, #0]
 800b802:	2300      	movs	r3, #0
 800b804:	2201      	movs	r2, #1
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f003 fdf3 	bl	800f3f2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b80c:	2300      	movs	r3, #0

}
 800b80e:	4618      	mov	r0, r3
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b088      	sub	sp, #32
 800b81a:	af04      	add	r7, sp, #16
 800b81c:	60f8      	str	r0, [r7, #12]
 800b81e:	60b9      	str	r1, [r7, #8]
 800b820:	4611      	mov	r1, r2
 800b822:	461a      	mov	r2, r3
 800b824:	460b      	mov	r3, r1
 800b826:	80fb      	strh	r3, [r7, #6]
 800b828:	4613      	mov	r3, r2
 800b82a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b832:	2b00      	cmp	r3, #0
 800b834:	d001      	beq.n	800b83a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b836:	2300      	movs	r3, #0
 800b838:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b83a:	7979      	ldrb	r1, [r7, #5]
 800b83c:	7e3b      	ldrb	r3, [r7, #24]
 800b83e:	9303      	str	r3, [sp, #12]
 800b840:	88fb      	ldrh	r3, [r7, #6]
 800b842:	9302      	str	r3, [sp, #8]
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	9301      	str	r3, [sp, #4]
 800b848:	2301      	movs	r3, #1
 800b84a:	9300      	str	r3, [sp, #0]
 800b84c:	2302      	movs	r3, #2
 800b84e:	2200      	movs	r2, #0
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	f003 fdce 	bl	800f3f2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b856:	2300      	movs	r3, #0
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b088      	sub	sp, #32
 800b864:	af04      	add	r7, sp, #16
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	4611      	mov	r1, r2
 800b86c:	461a      	mov	r2, r3
 800b86e:	460b      	mov	r3, r1
 800b870:	80fb      	strh	r3, [r7, #6]
 800b872:	4613      	mov	r3, r2
 800b874:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b876:	7979      	ldrb	r1, [r7, #5]
 800b878:	2300      	movs	r3, #0
 800b87a:	9303      	str	r3, [sp, #12]
 800b87c:	88fb      	ldrh	r3, [r7, #6]
 800b87e:	9302      	str	r3, [sp, #8]
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	9301      	str	r3, [sp, #4]
 800b884:	2301      	movs	r3, #1
 800b886:	9300      	str	r3, [sp, #0]
 800b888:	2302      	movs	r3, #2
 800b88a:	2201      	movs	r2, #1
 800b88c:	68f8      	ldr	r0, [r7, #12]
 800b88e:	f003 fdb0 	bl	800f3f2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b892:	2300      	movs	r3, #0
}
 800b894:	4618      	mov	r0, r3
 800b896:	3710      	adds	r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	af04      	add	r7, sp, #16
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	4608      	mov	r0, r1
 800b8a6:	4611      	mov	r1, r2
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	70fb      	strb	r3, [r7, #3]
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	70bb      	strb	r3, [r7, #2]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b8b6:	7878      	ldrb	r0, [r7, #1]
 800b8b8:	78ba      	ldrb	r2, [r7, #2]
 800b8ba:	78f9      	ldrb	r1, [r7, #3]
 800b8bc:	8b3b      	ldrh	r3, [r7, #24]
 800b8be:	9302      	str	r3, [sp, #8]
 800b8c0:	7d3b      	ldrb	r3, [r7, #20]
 800b8c2:	9301      	str	r3, [sp, #4]
 800b8c4:	7c3b      	ldrb	r3, [r7, #16]
 800b8c6:	9300      	str	r3, [sp, #0]
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f003 fd43 	bl	800f356 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b082      	sub	sp, #8
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b8e6:	78fb      	ldrb	r3, [r7, #3]
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f003 fd62 	bl	800f3b4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b8f0:	2300      	movs	r3, #0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}

0800b8fa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b084      	sub	sp, #16
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
 800b902:	460b      	mov	r3, r1
 800b904:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 f836 	bl	800b978 <USBH_GetFreePipe>
 800b90c:	4603      	mov	r3, r0
 800b90e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b910:	89fb      	ldrh	r3, [r7, #14]
 800b912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b916:	4293      	cmp	r3, r2
 800b918:	d00a      	beq.n	800b930 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b91a:	78fa      	ldrb	r2, [r7, #3]
 800b91c:	89fb      	ldrh	r3, [r7, #14]
 800b91e:	f003 030f 	and.w	r3, r3, #15
 800b922:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b926:	6879      	ldr	r1, [r7, #4]
 800b928:	33e0      	adds	r3, #224	; 0xe0
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	440b      	add	r3, r1
 800b92e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b930:	89fb      	ldrh	r3, [r7, #14]
 800b932:	b2db      	uxtb	r3, r3
}
 800b934:	4618      	mov	r0, r3
 800b936:	3710      	adds	r7, #16
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	460b      	mov	r3, r1
 800b946:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b948:	78fb      	ldrb	r3, [r7, #3]
 800b94a:	2b0f      	cmp	r3, #15
 800b94c:	d80d      	bhi.n	800b96a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b94e:	78fb      	ldrb	r3, [r7, #3]
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	33e0      	adds	r3, #224	; 0xe0
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	4413      	add	r3, r2
 800b958:	685a      	ldr	r2, [r3, #4]
 800b95a:	78fb      	ldrb	r3, [r7, #3]
 800b95c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b960:	6879      	ldr	r1, [r7, #4]
 800b962:	33e0      	adds	r3, #224	; 0xe0
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	440b      	add	r3, r1
 800b968:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	370c      	adds	r7, #12
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b978:	b480      	push	{r7}
 800b97a:	b085      	sub	sp, #20
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b980:	2300      	movs	r3, #0
 800b982:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b984:	2300      	movs	r3, #0
 800b986:	73fb      	strb	r3, [r7, #15]
 800b988:	e00f      	b.n	800b9aa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b98a:	7bfb      	ldrb	r3, [r7, #15]
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	33e0      	adds	r3, #224	; 0xe0
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	4413      	add	r3, r2
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d102      	bne.n	800b9a4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b99e:	7bfb      	ldrb	r3, [r7, #15]
 800b9a0:	b29b      	uxth	r3, r3
 800b9a2:	e007      	b.n	800b9b4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b9a4:	7bfb      	ldrb	r3, [r7, #15]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	73fb      	strb	r3, [r7, #15]
 800b9aa:	7bfb      	ldrb	r3, [r7, #15]
 800b9ac:	2b0f      	cmp	r3, #15
 800b9ae:	d9ec      	bls.n	800b98a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b9b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3714      	adds	r7, #20
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b9ca:	79fb      	ldrb	r3, [r7, #7]
 800b9cc:	4a08      	ldr	r2, [pc, #32]	; (800b9f0 <disk_status+0x30>)
 800b9ce:	009b      	lsls	r3, r3, #2
 800b9d0:	4413      	add	r3, r2
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	79fa      	ldrb	r2, [r7, #7]
 800b9d8:	4905      	ldr	r1, [pc, #20]	; (800b9f0 <disk_status+0x30>)
 800b9da:	440a      	add	r2, r1
 800b9dc:	7a12      	ldrb	r2, [r2, #8]
 800b9de:	4610      	mov	r0, r2
 800b9e0:	4798      	blx	r3
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b9e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	20001de0 	.word	0x20001de0

0800b9f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ba02:	79fb      	ldrb	r3, [r7, #7]
 800ba04:	4a0d      	ldr	r2, [pc, #52]	; (800ba3c <disk_initialize+0x48>)
 800ba06:	5cd3      	ldrb	r3, [r2, r3]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d111      	bne.n	800ba30 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ba0c:	79fb      	ldrb	r3, [r7, #7]
 800ba0e:	4a0b      	ldr	r2, [pc, #44]	; (800ba3c <disk_initialize+0x48>)
 800ba10:	2101      	movs	r1, #1
 800ba12:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ba14:	79fb      	ldrb	r3, [r7, #7]
 800ba16:	4a09      	ldr	r2, [pc, #36]	; (800ba3c <disk_initialize+0x48>)
 800ba18:	009b      	lsls	r3, r3, #2
 800ba1a:	4413      	add	r3, r2
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	79fa      	ldrb	r2, [r7, #7]
 800ba22:	4906      	ldr	r1, [pc, #24]	; (800ba3c <disk_initialize+0x48>)
 800ba24:	440a      	add	r2, r1
 800ba26:	7a12      	ldrb	r2, [r2, #8]
 800ba28:	4610      	mov	r0, r2
 800ba2a:	4798      	blx	r3
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ba30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	20001de0 	.word	0x20001de0

0800ba40 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ba40:	b590      	push	{r4, r7, lr}
 800ba42:	b087      	sub	sp, #28
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60b9      	str	r1, [r7, #8]
 800ba48:	607a      	str	r2, [r7, #4]
 800ba4a:	603b      	str	r3, [r7, #0]
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ba50:	7bfb      	ldrb	r3, [r7, #15]
 800ba52:	4a0a      	ldr	r2, [pc, #40]	; (800ba7c <disk_read+0x3c>)
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	4413      	add	r3, r2
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	689c      	ldr	r4, [r3, #8]
 800ba5c:	7bfb      	ldrb	r3, [r7, #15]
 800ba5e:	4a07      	ldr	r2, [pc, #28]	; (800ba7c <disk_read+0x3c>)
 800ba60:	4413      	add	r3, r2
 800ba62:	7a18      	ldrb	r0, [r3, #8]
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	68b9      	ldr	r1, [r7, #8]
 800ba6a:	47a0      	blx	r4
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	75fb      	strb	r3, [r7, #23]
  return res;
 800ba70:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	371c      	adds	r7, #28
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd90      	pop	{r4, r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	20001de0 	.word	0x20001de0

0800ba80 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ba80:	b590      	push	{r4, r7, lr}
 800ba82:	b087      	sub	sp, #28
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60b9      	str	r1, [r7, #8]
 800ba88:	607a      	str	r2, [r7, #4]
 800ba8a:	603b      	str	r3, [r7, #0]
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ba90:	7bfb      	ldrb	r3, [r7, #15]
 800ba92:	4a0a      	ldr	r2, [pc, #40]	; (800babc <disk_write+0x3c>)
 800ba94:	009b      	lsls	r3, r3, #2
 800ba96:	4413      	add	r3, r2
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	68dc      	ldr	r4, [r3, #12]
 800ba9c:	7bfb      	ldrb	r3, [r7, #15]
 800ba9e:	4a07      	ldr	r2, [pc, #28]	; (800babc <disk_write+0x3c>)
 800baa0:	4413      	add	r3, r2
 800baa2:	7a18      	ldrb	r0, [r3, #8]
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	68b9      	ldr	r1, [r7, #8]
 800baaa:	47a0      	blx	r4
 800baac:	4603      	mov	r3, r0
 800baae:	75fb      	strb	r3, [r7, #23]
  return res;
 800bab0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	371c      	adds	r7, #28
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd90      	pop	{r4, r7, pc}
 800baba:	bf00      	nop
 800babc:	20001de0 	.word	0x20001de0

0800bac0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	4603      	mov	r3, r0
 800bac8:	603a      	str	r2, [r7, #0]
 800baca:	71fb      	strb	r3, [r7, #7]
 800bacc:	460b      	mov	r3, r1
 800bace:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bad0:	79fb      	ldrb	r3, [r7, #7]
 800bad2:	4a09      	ldr	r2, [pc, #36]	; (800baf8 <disk_ioctl+0x38>)
 800bad4:	009b      	lsls	r3, r3, #2
 800bad6:	4413      	add	r3, r2
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	691b      	ldr	r3, [r3, #16]
 800badc:	79fa      	ldrb	r2, [r7, #7]
 800bade:	4906      	ldr	r1, [pc, #24]	; (800baf8 <disk_ioctl+0x38>)
 800bae0:	440a      	add	r2, r1
 800bae2:	7a10      	ldrb	r0, [r2, #8]
 800bae4:	79b9      	ldrb	r1, [r7, #6]
 800bae6:	683a      	ldr	r2, [r7, #0]
 800bae8:	4798      	blx	r3
 800baea:	4603      	mov	r3, r0
 800baec:	73fb      	strb	r3, [r7, #15]
  return res;
 800baee:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3710      	adds	r7, #16
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	20001de0 	.word	0x20001de0

0800bafc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bafc:	b480      	push	{r7}
 800bafe:	b085      	sub	sp, #20
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	3301      	adds	r3, #1
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bb0c:	89fb      	ldrh	r3, [r7, #14]
 800bb0e:	021b      	lsls	r3, r3, #8
 800bb10:	b21a      	sxth	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	b21b      	sxth	r3, r3
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	b21b      	sxth	r3, r3
 800bb1c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bb1e:	89fb      	ldrh	r3, [r7, #14]
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3714      	adds	r7, #20
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr

0800bb2c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	3303      	adds	r3, #3
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	021b      	lsls	r3, r3, #8
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	3202      	adds	r2, #2
 800bb44:	7812      	ldrb	r2, [r2, #0]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	021b      	lsls	r3, r3, #8
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	3201      	adds	r2, #1
 800bb52:	7812      	ldrb	r2, [r2, #0]
 800bb54:	4313      	orrs	r3, r2
 800bb56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	021b      	lsls	r3, r3, #8
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	7812      	ldrb	r2, [r2, #0]
 800bb60:	4313      	orrs	r3, r2
 800bb62:	60fb      	str	r3, [r7, #12]
	return rv;
 800bb64:	68fb      	ldr	r3, [r7, #12]
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3714      	adds	r7, #20
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr

0800bb72 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bb72:	b480      	push	{r7}
 800bb74:	b083      	sub	sp, #12
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	1c5a      	adds	r2, r3, #1
 800bb82:	607a      	str	r2, [r7, #4]
 800bb84:	887a      	ldrh	r2, [r7, #2]
 800bb86:	b2d2      	uxtb	r2, r2
 800bb88:	701a      	strb	r2, [r3, #0]
 800bb8a:	887b      	ldrh	r3, [r7, #2]
 800bb8c:	0a1b      	lsrs	r3, r3, #8
 800bb8e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	1c5a      	adds	r2, r3, #1
 800bb94:	607a      	str	r2, [r7, #4]
 800bb96:	887a      	ldrh	r2, [r7, #2]
 800bb98:	b2d2      	uxtb	r2, r2
 800bb9a:	701a      	strb	r2, [r3, #0]
}
 800bb9c:	bf00      	nop
 800bb9e:	370c      	adds	r7, #12
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr

0800bba8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	1c5a      	adds	r2, r3, #1
 800bbb6:	607a      	str	r2, [r7, #4]
 800bbb8:	683a      	ldr	r2, [r7, #0]
 800bbba:	b2d2      	uxtb	r2, r2
 800bbbc:	701a      	strb	r2, [r3, #0]
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	0a1b      	lsrs	r3, r3, #8
 800bbc2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	1c5a      	adds	r2, r3, #1
 800bbc8:	607a      	str	r2, [r7, #4]
 800bbca:	683a      	ldr	r2, [r7, #0]
 800bbcc:	b2d2      	uxtb	r2, r2
 800bbce:	701a      	strb	r2, [r3, #0]
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	0a1b      	lsrs	r3, r3, #8
 800bbd4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	1c5a      	adds	r2, r3, #1
 800bbda:	607a      	str	r2, [r7, #4]
 800bbdc:	683a      	ldr	r2, [r7, #0]
 800bbde:	b2d2      	uxtb	r2, r2
 800bbe0:	701a      	strb	r2, [r3, #0]
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	0a1b      	lsrs	r3, r3, #8
 800bbe6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	1c5a      	adds	r2, r3, #1
 800bbec:	607a      	str	r2, [r7, #4]
 800bbee:	683a      	ldr	r2, [r7, #0]
 800bbf0:	b2d2      	uxtb	r2, r2
 800bbf2:	701a      	strb	r2, [r3, #0]
}
 800bbf4:	bf00      	nop
 800bbf6:	370c      	adds	r7, #12
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bc00:	b480      	push	{r7}
 800bc02:	b087      	sub	sp, #28
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	60b9      	str	r1, [r7, #8]
 800bc0a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d00d      	beq.n	800bc36 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bc1a:	693a      	ldr	r2, [r7, #16]
 800bc1c:	1c53      	adds	r3, r2, #1
 800bc1e:	613b      	str	r3, [r7, #16]
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	1c59      	adds	r1, r3, #1
 800bc24:	6179      	str	r1, [r7, #20]
 800bc26:	7812      	ldrb	r2, [r2, #0]
 800bc28:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	3b01      	subs	r3, #1
 800bc2e:	607b      	str	r3, [r7, #4]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d1f1      	bne.n	800bc1a <mem_cpy+0x1a>
	}
}
 800bc36:	bf00      	nop
 800bc38:	371c      	adds	r7, #28
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr

0800bc42 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bc42:	b480      	push	{r7}
 800bc44:	b087      	sub	sp, #28
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	60f8      	str	r0, [r7, #12]
 800bc4a:	60b9      	str	r1, [r7, #8]
 800bc4c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	1c5a      	adds	r2, r3, #1
 800bc56:	617a      	str	r2, [r7, #20]
 800bc58:	68ba      	ldr	r2, [r7, #8]
 800bc5a:	b2d2      	uxtb	r2, r2
 800bc5c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	3b01      	subs	r3, #1
 800bc62:	607b      	str	r3, [r7, #4]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d1f3      	bne.n	800bc52 <mem_set+0x10>
}
 800bc6a:	bf00      	nop
 800bc6c:	bf00      	nop
 800bc6e:	371c      	adds	r7, #28
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bc78:	b480      	push	{r7}
 800bc7a:	b089      	sub	sp, #36	; 0x24
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	61fb      	str	r3, [r7, #28]
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	1c5a      	adds	r2, r3, #1
 800bc94:	61fa      	str	r2, [r7, #28]
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	4619      	mov	r1, r3
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	1c5a      	adds	r2, r3, #1
 800bc9e:	61ba      	str	r2, [r7, #24]
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	1acb      	subs	r3, r1, r3
 800bca4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	3b01      	subs	r3, #1
 800bcaa:	607b      	str	r3, [r7, #4]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d002      	beq.n	800bcb8 <mem_cmp+0x40>
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d0eb      	beq.n	800bc90 <mem_cmp+0x18>

	return r;
 800bcb8:	697b      	ldr	r3, [r7, #20]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3724      	adds	r7, #36	; 0x24
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr

0800bcc6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bcc6:	b480      	push	{r7}
 800bcc8:	b083      	sub	sp, #12
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
 800bcce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bcd0:	e002      	b.n	800bcd8 <chk_chr+0x12>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	607b      	str	r3, [r7, #4]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d005      	beq.n	800bcec <chk_chr+0x26>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	461a      	mov	r2, r3
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d1f2      	bne.n	800bcd2 <chk_chr+0xc>
	return *str;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	781b      	ldrb	r3, [r3, #0]
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b085      	sub	sp, #20
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bd06:	2300      	movs	r3, #0
 800bd08:	60bb      	str	r3, [r7, #8]
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	60fb      	str	r3, [r7, #12]
 800bd0e:	e029      	b.n	800bd64 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bd10:	4a27      	ldr	r2, [pc, #156]	; (800bdb0 <chk_lock+0xb4>)
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	011b      	lsls	r3, r3, #4
 800bd16:	4413      	add	r3, r2
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d01d      	beq.n	800bd5a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bd1e:	4a24      	ldr	r2, [pc, #144]	; (800bdb0 <chk_lock+0xb4>)
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	011b      	lsls	r3, r3, #4
 800bd24:	4413      	add	r3, r2
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d116      	bne.n	800bd5e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bd30:	4a1f      	ldr	r2, [pc, #124]	; (800bdb0 <chk_lock+0xb4>)
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	011b      	lsls	r3, r3, #4
 800bd36:	4413      	add	r3, r2
 800bd38:	3304      	adds	r3, #4
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d10c      	bne.n	800bd5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bd44:	4a1a      	ldr	r2, [pc, #104]	; (800bdb0 <chk_lock+0xb4>)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	011b      	lsls	r3, r3, #4
 800bd4a:	4413      	add	r3, r2
 800bd4c:	3308      	adds	r3, #8
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d102      	bne.n	800bd5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bd58:	e007      	b.n	800bd6a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	3301      	adds	r3, #1
 800bd62:	60fb      	str	r3, [r7, #12]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d9d2      	bls.n	800bd10 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2b02      	cmp	r3, #2
 800bd6e:	d109      	bne.n	800bd84 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d102      	bne.n	800bd7c <chk_lock+0x80>
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	2b02      	cmp	r3, #2
 800bd7a:	d101      	bne.n	800bd80 <chk_lock+0x84>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	e010      	b.n	800bda2 <chk_lock+0xa6>
 800bd80:	2312      	movs	r3, #18
 800bd82:	e00e      	b.n	800bda2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d108      	bne.n	800bd9c <chk_lock+0xa0>
 800bd8a:	4a09      	ldr	r2, [pc, #36]	; (800bdb0 <chk_lock+0xb4>)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	011b      	lsls	r3, r3, #4
 800bd90:	4413      	add	r3, r2
 800bd92:	330c      	adds	r3, #12
 800bd94:	881b      	ldrh	r3, [r3, #0]
 800bd96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd9a:	d101      	bne.n	800bda0 <chk_lock+0xa4>
 800bd9c:	2310      	movs	r3, #16
 800bd9e:	e000      	b.n	800bda2 <chk_lock+0xa6>
 800bda0:	2300      	movs	r3, #0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3714      	adds	r7, #20
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop
 800bdb0:	20001bc0 	.word	0x20001bc0

0800bdb4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	607b      	str	r3, [r7, #4]
 800bdbe:	e002      	b.n	800bdc6 <enq_lock+0x12>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	607b      	str	r3, [r7, #4]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d806      	bhi.n	800bdda <enq_lock+0x26>
 800bdcc:	4a09      	ldr	r2, [pc, #36]	; (800bdf4 <enq_lock+0x40>)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	011b      	lsls	r3, r3, #4
 800bdd2:	4413      	add	r3, r2
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d1f2      	bne.n	800bdc0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2b02      	cmp	r3, #2
 800bdde:	bf14      	ite	ne
 800bde0:	2301      	movne	r3, #1
 800bde2:	2300      	moveq	r3, #0
 800bde4:	b2db      	uxtb	r3, r3
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	370c      	adds	r7, #12
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	20001bc0 	.word	0x20001bc0

0800bdf8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800be02:	2300      	movs	r3, #0
 800be04:	60fb      	str	r3, [r7, #12]
 800be06:	e01f      	b.n	800be48 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800be08:	4a41      	ldr	r2, [pc, #260]	; (800bf10 <inc_lock+0x118>)
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	011b      	lsls	r3, r3, #4
 800be0e:	4413      	add	r3, r2
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	429a      	cmp	r2, r3
 800be18:	d113      	bne.n	800be42 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800be1a:	4a3d      	ldr	r2, [pc, #244]	; (800bf10 <inc_lock+0x118>)
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	011b      	lsls	r3, r3, #4
 800be20:	4413      	add	r3, r2
 800be22:	3304      	adds	r3, #4
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d109      	bne.n	800be42 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800be2e:	4a38      	ldr	r2, [pc, #224]	; (800bf10 <inc_lock+0x118>)
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	011b      	lsls	r3, r3, #4
 800be34:	4413      	add	r3, r2
 800be36:	3308      	adds	r3, #8
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800be3e:	429a      	cmp	r2, r3
 800be40:	d006      	beq.n	800be50 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	3301      	adds	r3, #1
 800be46:	60fb      	str	r3, [r7, #12]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d9dc      	bls.n	800be08 <inc_lock+0x10>
 800be4e:	e000      	b.n	800be52 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800be50:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2b02      	cmp	r3, #2
 800be56:	d132      	bne.n	800bebe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800be58:	2300      	movs	r3, #0
 800be5a:	60fb      	str	r3, [r7, #12]
 800be5c:	e002      	b.n	800be64 <inc_lock+0x6c>
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	3301      	adds	r3, #1
 800be62:	60fb      	str	r3, [r7, #12]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2b01      	cmp	r3, #1
 800be68:	d806      	bhi.n	800be78 <inc_lock+0x80>
 800be6a:	4a29      	ldr	r2, [pc, #164]	; (800bf10 <inc_lock+0x118>)
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	011b      	lsls	r3, r3, #4
 800be70:	4413      	add	r3, r2
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d1f2      	bne.n	800be5e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2b02      	cmp	r3, #2
 800be7c:	d101      	bne.n	800be82 <inc_lock+0x8a>
 800be7e:	2300      	movs	r3, #0
 800be80:	e040      	b.n	800bf04 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681a      	ldr	r2, [r3, #0]
 800be86:	4922      	ldr	r1, [pc, #136]	; (800bf10 <inc_lock+0x118>)
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	011b      	lsls	r3, r3, #4
 800be8c:	440b      	add	r3, r1
 800be8e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	689a      	ldr	r2, [r3, #8]
 800be94:	491e      	ldr	r1, [pc, #120]	; (800bf10 <inc_lock+0x118>)
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	011b      	lsls	r3, r3, #4
 800be9a:	440b      	add	r3, r1
 800be9c:	3304      	adds	r3, #4
 800be9e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	695a      	ldr	r2, [r3, #20]
 800bea4:	491a      	ldr	r1, [pc, #104]	; (800bf10 <inc_lock+0x118>)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	011b      	lsls	r3, r3, #4
 800beaa:	440b      	add	r3, r1
 800beac:	3308      	adds	r3, #8
 800beae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800beb0:	4a17      	ldr	r2, [pc, #92]	; (800bf10 <inc_lock+0x118>)
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	011b      	lsls	r3, r3, #4
 800beb6:	4413      	add	r3, r2
 800beb8:	330c      	adds	r3, #12
 800beba:	2200      	movs	r2, #0
 800bebc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d009      	beq.n	800bed8 <inc_lock+0xe0>
 800bec4:	4a12      	ldr	r2, [pc, #72]	; (800bf10 <inc_lock+0x118>)
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	011b      	lsls	r3, r3, #4
 800beca:	4413      	add	r3, r2
 800becc:	330c      	adds	r3, #12
 800bece:	881b      	ldrh	r3, [r3, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d001      	beq.n	800bed8 <inc_lock+0xe0>
 800bed4:	2300      	movs	r3, #0
 800bed6:	e015      	b.n	800bf04 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d108      	bne.n	800bef0 <inc_lock+0xf8>
 800bede:	4a0c      	ldr	r2, [pc, #48]	; (800bf10 <inc_lock+0x118>)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	011b      	lsls	r3, r3, #4
 800bee4:	4413      	add	r3, r2
 800bee6:	330c      	adds	r3, #12
 800bee8:	881b      	ldrh	r3, [r3, #0]
 800beea:	3301      	adds	r3, #1
 800beec:	b29a      	uxth	r2, r3
 800beee:	e001      	b.n	800bef4 <inc_lock+0xfc>
 800bef0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bef4:	4906      	ldr	r1, [pc, #24]	; (800bf10 <inc_lock+0x118>)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	011b      	lsls	r3, r3, #4
 800befa:	440b      	add	r3, r1
 800befc:	330c      	adds	r3, #12
 800befe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	3301      	adds	r3, #1
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3714      	adds	r7, #20
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr
 800bf10:	20001bc0 	.word	0x20001bc0

0800bf14 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b085      	sub	sp, #20
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	607b      	str	r3, [r7, #4]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d825      	bhi.n	800bf74 <dec_lock+0x60>
		n = Files[i].ctr;
 800bf28:	4a17      	ldr	r2, [pc, #92]	; (800bf88 <dec_lock+0x74>)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	011b      	lsls	r3, r3, #4
 800bf2e:	4413      	add	r3, r2
 800bf30:	330c      	adds	r3, #12
 800bf32:	881b      	ldrh	r3, [r3, #0]
 800bf34:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bf36:	89fb      	ldrh	r3, [r7, #14]
 800bf38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf3c:	d101      	bne.n	800bf42 <dec_lock+0x2e>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bf42:	89fb      	ldrh	r3, [r7, #14]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d002      	beq.n	800bf4e <dec_lock+0x3a>
 800bf48:	89fb      	ldrh	r3, [r7, #14]
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bf4e:	4a0e      	ldr	r2, [pc, #56]	; (800bf88 <dec_lock+0x74>)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	011b      	lsls	r3, r3, #4
 800bf54:	4413      	add	r3, r2
 800bf56:	330c      	adds	r3, #12
 800bf58:	89fa      	ldrh	r2, [r7, #14]
 800bf5a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bf5c:	89fb      	ldrh	r3, [r7, #14]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d105      	bne.n	800bf6e <dec_lock+0x5a>
 800bf62:	4a09      	ldr	r2, [pc, #36]	; (800bf88 <dec_lock+0x74>)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	011b      	lsls	r3, r3, #4
 800bf68:	4413      	add	r3, r2
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	737b      	strb	r3, [r7, #13]
 800bf72:	e001      	b.n	800bf78 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bf74:	2302      	movs	r3, #2
 800bf76:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bf78:	7b7b      	ldrb	r3, [r7, #13]
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3714      	adds	r7, #20
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr
 800bf86:	bf00      	nop
 800bf88:	20001bc0 	.word	0x20001bc0

0800bf8c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bf94:	2300      	movs	r3, #0
 800bf96:	60fb      	str	r3, [r7, #12]
 800bf98:	e010      	b.n	800bfbc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bf9a:	4a0d      	ldr	r2, [pc, #52]	; (800bfd0 <clear_lock+0x44>)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	011b      	lsls	r3, r3, #4
 800bfa0:	4413      	add	r3, r2
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d105      	bne.n	800bfb6 <clear_lock+0x2a>
 800bfaa:	4a09      	ldr	r2, [pc, #36]	; (800bfd0 <clear_lock+0x44>)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	011b      	lsls	r3, r3, #4
 800bfb0:	4413      	add	r3, r2
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	3301      	adds	r3, #1
 800bfba:	60fb      	str	r3, [r7, #12]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d9eb      	bls.n	800bf9a <clear_lock+0xe>
	}
}
 800bfc2:	bf00      	nop
 800bfc4:	bf00      	nop
 800bfc6:	3714      	adds	r7, #20
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr
 800bfd0:	20001bc0 	.word	0x20001bc0

0800bfd4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b086      	sub	sp, #24
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	78db      	ldrb	r3, [r3, #3]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d034      	beq.n	800c052 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	7858      	ldrb	r0, [r3, #1]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bff8:	2301      	movs	r3, #1
 800bffa:	697a      	ldr	r2, [r7, #20]
 800bffc:	f7ff fd40 	bl	800ba80 <disk_write>
 800c000:	4603      	mov	r3, r0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d002      	beq.n	800c00c <sync_window+0x38>
			res = FR_DISK_ERR;
 800c006:	2301      	movs	r3, #1
 800c008:	73fb      	strb	r3, [r7, #15]
 800c00a:	e022      	b.n	800c052 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c016:	697a      	ldr	r2, [r7, #20]
 800c018:	1ad2      	subs	r2, r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	69db      	ldr	r3, [r3, #28]
 800c01e:	429a      	cmp	r2, r3
 800c020:	d217      	bcs.n	800c052 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	789b      	ldrb	r3, [r3, #2]
 800c026:	613b      	str	r3, [r7, #16]
 800c028:	e010      	b.n	800c04c <sync_window+0x78>
					wsect += fs->fsize;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	69db      	ldr	r3, [r3, #28]
 800c02e:	697a      	ldr	r2, [r7, #20]
 800c030:	4413      	add	r3, r2
 800c032:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	7858      	ldrb	r0, [r3, #1]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c03e:	2301      	movs	r3, #1
 800c040:	697a      	ldr	r2, [r7, #20]
 800c042:	f7ff fd1d 	bl	800ba80 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	3b01      	subs	r3, #1
 800c04a:	613b      	str	r3, [r7, #16]
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d8eb      	bhi.n	800c02a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c052:	7bfb      	ldrb	r3, [r7, #15]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3718      	adds	r7, #24
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c066:	2300      	movs	r3, #0
 800c068:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c06e:	683a      	ldr	r2, [r7, #0]
 800c070:	429a      	cmp	r2, r3
 800c072:	d01b      	beq.n	800c0ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f7ff ffad 	bl	800bfd4 <sync_window>
 800c07a:	4603      	mov	r3, r0
 800c07c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c07e:	7bfb      	ldrb	r3, [r7, #15]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d113      	bne.n	800c0ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	7858      	ldrb	r0, [r3, #1]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c08e:	2301      	movs	r3, #1
 800c090:	683a      	ldr	r2, [r7, #0]
 800c092:	f7ff fcd5 	bl	800ba40 <disk_read>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d004      	beq.n	800c0a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c09c:	f04f 33ff 	mov.w	r3, #4294967295
 800c0a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	683a      	ldr	r2, [r7, #0]
 800c0aa:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3710      	adds	r7, #16
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
	...

0800c0b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f7ff ff87 	bl	800bfd4 <sync_window>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c0ca:	7bfb      	ldrb	r3, [r7, #15]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d158      	bne.n	800c182 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	2b03      	cmp	r3, #3
 800c0d6:	d148      	bne.n	800c16a <sync_fs+0xb2>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	791b      	ldrb	r3, [r3, #4]
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	d144      	bne.n	800c16a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	3334      	adds	r3, #52	; 0x34
 800c0e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c0e8:	2100      	movs	r1, #0
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7ff fda9 	bl	800bc42 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	3334      	adds	r3, #52	; 0x34
 800c0f4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c0f8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7ff fd38 	bl	800bb72 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	3334      	adds	r3, #52	; 0x34
 800c106:	4921      	ldr	r1, [pc, #132]	; (800c18c <sync_fs+0xd4>)
 800c108:	4618      	mov	r0, r3
 800c10a:	f7ff fd4d 	bl	800bba8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	3334      	adds	r3, #52	; 0x34
 800c112:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c116:	491e      	ldr	r1, [pc, #120]	; (800c190 <sync_fs+0xd8>)
 800c118:	4618      	mov	r0, r3
 800c11a:	f7ff fd45 	bl	800bba8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	3334      	adds	r3, #52	; 0x34
 800c122:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	695b      	ldr	r3, [r3, #20]
 800c12a:	4619      	mov	r1, r3
 800c12c:	4610      	mov	r0, r2
 800c12e:	f7ff fd3b 	bl	800bba8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	3334      	adds	r3, #52	; 0x34
 800c136:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	691b      	ldr	r3, [r3, #16]
 800c13e:	4619      	mov	r1, r3
 800c140:	4610      	mov	r0, r2
 800c142:	f7ff fd31 	bl	800bba8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6a1b      	ldr	r3, [r3, #32]
 800c14a:	1c5a      	adds	r2, r3, #1
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	7858      	ldrb	r0, [r3, #1]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c15e:	2301      	movs	r3, #1
 800c160:	f7ff fc8e 	bl	800ba80 <disk_write>
			fs->fsi_flag = 0;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2200      	movs	r2, #0
 800c168:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	785b      	ldrb	r3, [r3, #1]
 800c16e:	2200      	movs	r2, #0
 800c170:	2100      	movs	r1, #0
 800c172:	4618      	mov	r0, r3
 800c174:	f7ff fca4 	bl	800bac0 <disk_ioctl>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d001      	beq.n	800c182 <sync_fs+0xca>
 800c17e:	2301      	movs	r3, #1
 800c180:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c182:	7bfb      	ldrb	r3, [r7, #15]
}
 800c184:	4618      	mov	r0, r3
 800c186:	3710      	adds	r7, #16
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}
 800c18c:	41615252 	.word	0x41615252
 800c190:	61417272 	.word	0x61417272

0800c194 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	3b02      	subs	r3, #2
 800c1a2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	699b      	ldr	r3, [r3, #24]
 800c1a8:	3b02      	subs	r3, #2
 800c1aa:	683a      	ldr	r2, [r7, #0]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d301      	bcc.n	800c1b4 <clust2sect+0x20>
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	e008      	b.n	800c1c6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	895b      	ldrh	r3, [r3, #10]
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	fb03 f202 	mul.w	r2, r3, r2
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c4:	4413      	add	r3, r2
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	370c      	adds	r7, #12
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr

0800c1d2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b086      	sub	sp, #24
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
 800c1da:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d904      	bls.n	800c1f2 <get_fat+0x20>
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	699b      	ldr	r3, [r3, #24]
 800c1ec:	683a      	ldr	r2, [r7, #0]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d302      	bcc.n	800c1f8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	617b      	str	r3, [r7, #20]
 800c1f6:	e08f      	b.n	800c318 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c1fc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	2b03      	cmp	r3, #3
 800c204:	d062      	beq.n	800c2cc <get_fat+0xfa>
 800c206:	2b03      	cmp	r3, #3
 800c208:	dc7c      	bgt.n	800c304 <get_fat+0x132>
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	d002      	beq.n	800c214 <get_fat+0x42>
 800c20e:	2b02      	cmp	r3, #2
 800c210:	d042      	beq.n	800c298 <get_fat+0xc6>
 800c212:	e077      	b.n	800c304 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	60fb      	str	r3, [r7, #12]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	085b      	lsrs	r3, r3, #1
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	4413      	add	r3, r2
 800c220:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	0a5b      	lsrs	r3, r3, #9
 800c22a:	4413      	add	r3, r2
 800c22c:	4619      	mov	r1, r3
 800c22e:	6938      	ldr	r0, [r7, #16]
 800c230:	f7ff ff14 	bl	800c05c <move_window>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d167      	bne.n	800c30a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	1c5a      	adds	r2, r3, #1
 800c23e:	60fa      	str	r2, [r7, #12]
 800c240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c244:	693a      	ldr	r2, [r7, #16]
 800c246:	4413      	add	r3, r2
 800c248:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c24c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	0a5b      	lsrs	r3, r3, #9
 800c256:	4413      	add	r3, r2
 800c258:	4619      	mov	r1, r3
 800c25a:	6938      	ldr	r0, [r7, #16]
 800c25c:	f7ff fefe 	bl	800c05c <move_window>
 800c260:	4603      	mov	r3, r0
 800c262:	2b00      	cmp	r3, #0
 800c264:	d153      	bne.n	800c30e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c26c:	693a      	ldr	r2, [r7, #16]
 800c26e:	4413      	add	r3, r2
 800c270:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c274:	021b      	lsls	r3, r3, #8
 800c276:	461a      	mov	r2, r3
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	4313      	orrs	r3, r2
 800c27c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	f003 0301 	and.w	r3, r3, #1
 800c284:	2b00      	cmp	r3, #0
 800c286:	d002      	beq.n	800c28e <get_fat+0xbc>
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	091b      	lsrs	r3, r3, #4
 800c28c:	e002      	b.n	800c294 <get_fat+0xc2>
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c294:	617b      	str	r3, [r7, #20]
			break;
 800c296:	e03f      	b.n	800c318 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	0a1b      	lsrs	r3, r3, #8
 800c2a0:	4413      	add	r3, r2
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	6938      	ldr	r0, [r7, #16]
 800c2a6:	f7ff fed9 	bl	800c05c <move_window>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d130      	bne.n	800c312 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	005b      	lsls	r3, r3, #1
 800c2ba:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c2be:	4413      	add	r3, r2
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7ff fc1b 	bl	800bafc <ld_word>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	617b      	str	r3, [r7, #20]
			break;
 800c2ca:	e025      	b.n	800c318 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	09db      	lsrs	r3, r3, #7
 800c2d4:	4413      	add	r3, r2
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	6938      	ldr	r0, [r7, #16]
 800c2da:	f7ff febf 	bl	800c05c <move_window>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d118      	bne.n	800c316 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c2f2:	4413      	add	r3, r2
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7ff fc19 	bl	800bb2c <ld_dword>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c300:	617b      	str	r3, [r7, #20]
			break;
 800c302:	e009      	b.n	800c318 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c304:	2301      	movs	r3, #1
 800c306:	617b      	str	r3, [r7, #20]
 800c308:	e006      	b.n	800c318 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c30a:	bf00      	nop
 800c30c:	e004      	b.n	800c318 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c30e:	bf00      	nop
 800c310:	e002      	b.n	800c318 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c312:	bf00      	nop
 800c314:	e000      	b.n	800c318 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c316:	bf00      	nop
		}
	}

	return val;
 800c318:	697b      	ldr	r3, [r7, #20]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3718      	adds	r7, #24
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c322:	b590      	push	{r4, r7, lr}
 800c324:	b089      	sub	sp, #36	; 0x24
 800c326:	af00      	add	r7, sp, #0
 800c328:	60f8      	str	r0, [r7, #12]
 800c32a:	60b9      	str	r1, [r7, #8]
 800c32c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c32e:	2302      	movs	r3, #2
 800c330:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	2b01      	cmp	r3, #1
 800c336:	f240 80d9 	bls.w	800c4ec <put_fat+0x1ca>
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	699b      	ldr	r3, [r3, #24]
 800c33e:	68ba      	ldr	r2, [r7, #8]
 800c340:	429a      	cmp	r2, r3
 800c342:	f080 80d3 	bcs.w	800c4ec <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	2b03      	cmp	r3, #3
 800c34c:	f000 8096 	beq.w	800c47c <put_fat+0x15a>
 800c350:	2b03      	cmp	r3, #3
 800c352:	f300 80cb 	bgt.w	800c4ec <put_fat+0x1ca>
 800c356:	2b01      	cmp	r3, #1
 800c358:	d002      	beq.n	800c360 <put_fat+0x3e>
 800c35a:	2b02      	cmp	r3, #2
 800c35c:	d06e      	beq.n	800c43c <put_fat+0x11a>
 800c35e:	e0c5      	b.n	800c4ec <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	61bb      	str	r3, [r7, #24]
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	085b      	lsrs	r3, r3, #1
 800c368:	69ba      	ldr	r2, [r7, #24]
 800c36a:	4413      	add	r3, r2
 800c36c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	0a5b      	lsrs	r3, r3, #9
 800c376:	4413      	add	r3, r2
 800c378:	4619      	mov	r1, r3
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f7ff fe6e 	bl	800c05c <move_window>
 800c380:	4603      	mov	r3, r0
 800c382:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c384:	7ffb      	ldrb	r3, [r7, #31]
 800c386:	2b00      	cmp	r3, #0
 800c388:	f040 80a9 	bne.w	800c4de <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	1c59      	adds	r1, r3, #1
 800c396:	61b9      	str	r1, [r7, #24]
 800c398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c39c:	4413      	add	r3, r2
 800c39e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	f003 0301 	and.w	r3, r3, #1
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00d      	beq.n	800c3c6 <put_fat+0xa4>
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	b25b      	sxtb	r3, r3
 800c3b0:	f003 030f 	and.w	r3, r3, #15
 800c3b4:	b25a      	sxtb	r2, r3
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	011b      	lsls	r3, r3, #4
 800c3bc:	b25b      	sxtb	r3, r3
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	b25b      	sxtb	r3, r3
 800c3c2:	b2db      	uxtb	r3, r3
 800c3c4:	e001      	b.n	800c3ca <put_fat+0xa8>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	697a      	ldr	r2, [r7, #20]
 800c3cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3d8:	69bb      	ldr	r3, [r7, #24]
 800c3da:	0a5b      	lsrs	r3, r3, #9
 800c3dc:	4413      	add	r3, r2
 800c3de:	4619      	mov	r1, r3
 800c3e0:	68f8      	ldr	r0, [r7, #12]
 800c3e2:	f7ff fe3b 	bl	800c05c <move_window>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c3ea:	7ffb      	ldrb	r3, [r7, #31]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d178      	bne.n	800c4e2 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3fc:	4413      	add	r3, r2
 800c3fe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	f003 0301 	and.w	r3, r3, #1
 800c406:	2b00      	cmp	r3, #0
 800c408:	d003      	beq.n	800c412 <put_fat+0xf0>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	091b      	lsrs	r3, r3, #4
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	e00e      	b.n	800c430 <put_fat+0x10e>
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	b25b      	sxtb	r3, r3
 800c418:	f023 030f 	bic.w	r3, r3, #15
 800c41c:	b25a      	sxtb	r2, r3
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	0a1b      	lsrs	r3, r3, #8
 800c422:	b25b      	sxtb	r3, r3
 800c424:	f003 030f 	and.w	r3, r3, #15
 800c428:	b25b      	sxtb	r3, r3
 800c42a:	4313      	orrs	r3, r2
 800c42c:	b25b      	sxtb	r3, r3
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	697a      	ldr	r2, [r7, #20]
 800c432:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2201      	movs	r2, #1
 800c438:	70da      	strb	r2, [r3, #3]
			break;
 800c43a:	e057      	b.n	800c4ec <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	0a1b      	lsrs	r3, r3, #8
 800c444:	4413      	add	r3, r2
 800c446:	4619      	mov	r1, r3
 800c448:	68f8      	ldr	r0, [r7, #12]
 800c44a:	f7ff fe07 	bl	800c05c <move_window>
 800c44e:	4603      	mov	r3, r0
 800c450:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c452:	7ffb      	ldrb	r3, [r7, #31]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d146      	bne.n	800c4e6 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	005b      	lsls	r3, r3, #1
 800c462:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c466:	4413      	add	r3, r2
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	b292      	uxth	r2, r2
 800c46c:	4611      	mov	r1, r2
 800c46e:	4618      	mov	r0, r3
 800c470:	f7ff fb7f 	bl	800bb72 <st_word>
			fs->wflag = 1;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2201      	movs	r2, #1
 800c478:	70da      	strb	r2, [r3, #3]
			break;
 800c47a:	e037      	b.n	800c4ec <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	09db      	lsrs	r3, r3, #7
 800c484:	4413      	add	r3, r2
 800c486:	4619      	mov	r1, r3
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	f7ff fde7 	bl	800c05c <move_window>
 800c48e:	4603      	mov	r3, r0
 800c490:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c492:	7ffb      	ldrb	r3, [r7, #31]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d128      	bne.n	800c4ea <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	009b      	lsls	r3, r3, #2
 800c4a8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c4ac:	4413      	add	r3, r2
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7ff fb3c 	bl	800bb2c <ld_dword>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c4ba:	4323      	orrs	r3, r4
 800c4bc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c4cc:	4413      	add	r3, r2
 800c4ce:	6879      	ldr	r1, [r7, #4]
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7ff fb69 	bl	800bba8 <st_dword>
			fs->wflag = 1;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	70da      	strb	r2, [r3, #3]
			break;
 800c4dc:	e006      	b.n	800c4ec <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c4de:	bf00      	nop
 800c4e0:	e004      	b.n	800c4ec <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c4e2:	bf00      	nop
 800c4e4:	e002      	b.n	800c4ec <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c4e6:	bf00      	nop
 800c4e8:	e000      	b.n	800c4ec <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c4ea:	bf00      	nop
		}
	}
	return res;
 800c4ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3724      	adds	r7, #36	; 0x24
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd90      	pop	{r4, r7, pc}

0800c4f6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b088      	sub	sp, #32
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	60f8      	str	r0, [r7, #12]
 800c4fe:	60b9      	str	r1, [r7, #8]
 800c500:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c502:	2300      	movs	r3, #0
 800c504:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	2b01      	cmp	r3, #1
 800c510:	d904      	bls.n	800c51c <remove_chain+0x26>
 800c512:	69bb      	ldr	r3, [r7, #24]
 800c514:	699b      	ldr	r3, [r3, #24]
 800c516:	68ba      	ldr	r2, [r7, #8]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d301      	bcc.n	800c520 <remove_chain+0x2a>
 800c51c:	2302      	movs	r3, #2
 800c51e:	e04b      	b.n	800c5b8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00c      	beq.n	800c540 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c526:	f04f 32ff 	mov.w	r2, #4294967295
 800c52a:	6879      	ldr	r1, [r7, #4]
 800c52c:	69b8      	ldr	r0, [r7, #24]
 800c52e:	f7ff fef8 	bl	800c322 <put_fat>
 800c532:	4603      	mov	r3, r0
 800c534:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c536:	7ffb      	ldrb	r3, [r7, #31]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d001      	beq.n	800c540 <remove_chain+0x4a>
 800c53c:	7ffb      	ldrb	r3, [r7, #31]
 800c53e:	e03b      	b.n	800c5b8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c540:	68b9      	ldr	r1, [r7, #8]
 800c542:	68f8      	ldr	r0, [r7, #12]
 800c544:	f7ff fe45 	bl	800c1d2 <get_fat>
 800c548:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d031      	beq.n	800c5b4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	2b01      	cmp	r3, #1
 800c554:	d101      	bne.n	800c55a <remove_chain+0x64>
 800c556:	2302      	movs	r3, #2
 800c558:	e02e      	b.n	800c5b8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c560:	d101      	bne.n	800c566 <remove_chain+0x70>
 800c562:	2301      	movs	r3, #1
 800c564:	e028      	b.n	800c5b8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c566:	2200      	movs	r2, #0
 800c568:	68b9      	ldr	r1, [r7, #8]
 800c56a:	69b8      	ldr	r0, [r7, #24]
 800c56c:	f7ff fed9 	bl	800c322 <put_fat>
 800c570:	4603      	mov	r3, r0
 800c572:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c574:	7ffb      	ldrb	r3, [r7, #31]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d001      	beq.n	800c57e <remove_chain+0x88>
 800c57a:	7ffb      	ldrb	r3, [r7, #31]
 800c57c:	e01c      	b.n	800c5b8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	695a      	ldr	r2, [r3, #20]
 800c582:	69bb      	ldr	r3, [r7, #24]
 800c584:	699b      	ldr	r3, [r3, #24]
 800c586:	3b02      	subs	r3, #2
 800c588:	429a      	cmp	r2, r3
 800c58a:	d20b      	bcs.n	800c5a4 <remove_chain+0xae>
			fs->free_clst++;
 800c58c:	69bb      	ldr	r3, [r7, #24]
 800c58e:	695b      	ldr	r3, [r3, #20]
 800c590:	1c5a      	adds	r2, r3, #1
 800c592:	69bb      	ldr	r3, [r7, #24]
 800c594:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c596:	69bb      	ldr	r3, [r7, #24]
 800c598:	791b      	ldrb	r3, [r3, #4]
 800c59a:	f043 0301 	orr.w	r3, r3, #1
 800c59e:	b2da      	uxtb	r2, r3
 800c5a0:	69bb      	ldr	r3, [r7, #24]
 800c5a2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c5a8:	69bb      	ldr	r3, [r7, #24]
 800c5aa:	699b      	ldr	r3, [r3, #24]
 800c5ac:	68ba      	ldr	r2, [r7, #8]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d3c6      	bcc.n	800c540 <remove_chain+0x4a>
 800c5b2:	e000      	b.n	800c5b6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c5b4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3720      	adds	r7, #32
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b088      	sub	sp, #32
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d10d      	bne.n	800c5f2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	691b      	ldr	r3, [r3, #16]
 800c5da:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d004      	beq.n	800c5ec <create_chain+0x2c>
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	699b      	ldr	r3, [r3, #24]
 800c5e6:	69ba      	ldr	r2, [r7, #24]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d31b      	bcc.n	800c624 <create_chain+0x64>
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	61bb      	str	r3, [r7, #24]
 800c5f0:	e018      	b.n	800c624 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c5f2:	6839      	ldr	r1, [r7, #0]
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f7ff fdec 	bl	800c1d2 <get_fat>
 800c5fa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d801      	bhi.n	800c606 <create_chain+0x46>
 800c602:	2301      	movs	r3, #1
 800c604:	e070      	b.n	800c6e8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c60c:	d101      	bne.n	800c612 <create_chain+0x52>
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	e06a      	b.n	800c6e8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	699b      	ldr	r3, [r3, #24]
 800c616:	68fa      	ldr	r2, [r7, #12]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d201      	bcs.n	800c620 <create_chain+0x60>
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	e063      	b.n	800c6e8 <create_chain+0x128>
		scl = clst;
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c624:	69bb      	ldr	r3, [r7, #24]
 800c626:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	3301      	adds	r3, #1
 800c62c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	699b      	ldr	r3, [r3, #24]
 800c632:	69fa      	ldr	r2, [r7, #28]
 800c634:	429a      	cmp	r2, r3
 800c636:	d307      	bcc.n	800c648 <create_chain+0x88>
				ncl = 2;
 800c638:	2302      	movs	r3, #2
 800c63a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c63c:	69fa      	ldr	r2, [r7, #28]
 800c63e:	69bb      	ldr	r3, [r7, #24]
 800c640:	429a      	cmp	r2, r3
 800c642:	d901      	bls.n	800c648 <create_chain+0x88>
 800c644:	2300      	movs	r3, #0
 800c646:	e04f      	b.n	800c6e8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c648:	69f9      	ldr	r1, [r7, #28]
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f7ff fdc1 	bl	800c1d2 <get_fat>
 800c650:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d00e      	beq.n	800c676 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d003      	beq.n	800c666 <create_chain+0xa6>
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c664:	d101      	bne.n	800c66a <create_chain+0xaa>
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	e03e      	b.n	800c6e8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c66a:	69fa      	ldr	r2, [r7, #28]
 800c66c:	69bb      	ldr	r3, [r7, #24]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d1da      	bne.n	800c628 <create_chain+0x68>
 800c672:	2300      	movs	r3, #0
 800c674:	e038      	b.n	800c6e8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c676:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c678:	f04f 32ff 	mov.w	r2, #4294967295
 800c67c:	69f9      	ldr	r1, [r7, #28]
 800c67e:	6938      	ldr	r0, [r7, #16]
 800c680:	f7ff fe4f 	bl	800c322 <put_fat>
 800c684:	4603      	mov	r3, r0
 800c686:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c688:	7dfb      	ldrb	r3, [r7, #23]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d109      	bne.n	800c6a2 <create_chain+0xe2>
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d006      	beq.n	800c6a2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c694:	69fa      	ldr	r2, [r7, #28]
 800c696:	6839      	ldr	r1, [r7, #0]
 800c698:	6938      	ldr	r0, [r7, #16]
 800c69a:	f7ff fe42 	bl	800c322 <put_fat>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c6a2:	7dfb      	ldrb	r3, [r7, #23]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d116      	bne.n	800c6d6 <create_chain+0x116>
		fs->last_clst = ncl;
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	69fa      	ldr	r2, [r7, #28]
 800c6ac:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	695a      	ldr	r2, [r3, #20]
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	699b      	ldr	r3, [r3, #24]
 800c6b6:	3b02      	subs	r3, #2
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d804      	bhi.n	800c6c6 <create_chain+0x106>
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	695b      	ldr	r3, [r3, #20]
 800c6c0:	1e5a      	subs	r2, r3, #1
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	791b      	ldrb	r3, [r3, #4]
 800c6ca:	f043 0301 	orr.w	r3, r3, #1
 800c6ce:	b2da      	uxtb	r2, r3
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	711a      	strb	r2, [r3, #4]
 800c6d4:	e007      	b.n	800c6e6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c6d6:	7dfb      	ldrb	r3, [r7, #23]
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d102      	bne.n	800c6e2 <create_chain+0x122>
 800c6dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c6e0:	e000      	b.n	800c6e4 <create_chain+0x124>
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c6e6:	69fb      	ldr	r3, [r7, #28]
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3720      	adds	r7, #32
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}

0800c6f0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b087      	sub	sp, #28
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c704:	3304      	adds	r3, #4
 800c706:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	0a5b      	lsrs	r3, r3, #9
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	8952      	ldrh	r2, [r2, #10]
 800c710:	fbb3 f3f2 	udiv	r3, r3, r2
 800c714:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	1d1a      	adds	r2, r3, #4
 800c71a:	613a      	str	r2, [r7, #16]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d101      	bne.n	800c72a <clmt_clust+0x3a>
 800c726:	2300      	movs	r3, #0
 800c728:	e010      	b.n	800c74c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c72a:	697a      	ldr	r2, [r7, #20]
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d307      	bcc.n	800c742 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c732:	697a      	ldr	r2, [r7, #20]
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	1ad3      	subs	r3, r2, r3
 800c738:	617b      	str	r3, [r7, #20]
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	3304      	adds	r3, #4
 800c73e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c740:	e7e9      	b.n	800c716 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c742:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	4413      	add	r3, r2
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	371c      	adds	r7, #28
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b086      	sub	sp, #24
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c76e:	d204      	bcs.n	800c77a <dir_sdi+0x22>
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	f003 031f 	and.w	r3, r3, #31
 800c776:	2b00      	cmp	r3, #0
 800c778:	d001      	beq.n	800c77e <dir_sdi+0x26>
		return FR_INT_ERR;
 800c77a:	2302      	movs	r3, #2
 800c77c:	e063      	b.n	800c846 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	683a      	ldr	r2, [r7, #0]
 800c782:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	689b      	ldr	r3, [r3, #8]
 800c788:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d106      	bne.n	800c79e <dir_sdi+0x46>
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	2b02      	cmp	r3, #2
 800c796:	d902      	bls.n	800c79e <dir_sdi+0x46>
		clst = fs->dirbase;
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c79c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d10c      	bne.n	800c7be <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	095b      	lsrs	r3, r3, #5
 800c7a8:	693a      	ldr	r2, [r7, #16]
 800c7aa:	8912      	ldrh	r2, [r2, #8]
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d301      	bcc.n	800c7b4 <dir_sdi+0x5c>
 800c7b0:	2302      	movs	r3, #2
 800c7b2:	e048      	b.n	800c846 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	61da      	str	r2, [r3, #28]
 800c7bc:	e029      	b.n	800c812 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	895b      	ldrh	r3, [r3, #10]
 800c7c2:	025b      	lsls	r3, r3, #9
 800c7c4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c7c6:	e019      	b.n	800c7fc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6979      	ldr	r1, [r7, #20]
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f7ff fd00 	bl	800c1d2 <get_fat>
 800c7d2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7da:	d101      	bne.n	800c7e0 <dir_sdi+0x88>
 800c7dc:	2301      	movs	r3, #1
 800c7de:	e032      	b.n	800c846 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	2b01      	cmp	r3, #1
 800c7e4:	d904      	bls.n	800c7f0 <dir_sdi+0x98>
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	699b      	ldr	r3, [r3, #24]
 800c7ea:	697a      	ldr	r2, [r7, #20]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d301      	bcc.n	800c7f4 <dir_sdi+0x9c>
 800c7f0:	2302      	movs	r3, #2
 800c7f2:	e028      	b.n	800c846 <dir_sdi+0xee>
			ofs -= csz;
 800c7f4:	683a      	ldr	r2, [r7, #0]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	1ad3      	subs	r3, r2, r3
 800c7fa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c7fc:	683a      	ldr	r2, [r7, #0]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	429a      	cmp	r2, r3
 800c802:	d2e1      	bcs.n	800c7c8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c804:	6979      	ldr	r1, [r7, #20]
 800c806:	6938      	ldr	r0, [r7, #16]
 800c808:	f7ff fcc4 	bl	800c194 <clust2sect>
 800c80c:	4602      	mov	r2, r0
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	697a      	ldr	r2, [r7, #20]
 800c816:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	69db      	ldr	r3, [r3, #28]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d101      	bne.n	800c824 <dir_sdi+0xcc>
 800c820:	2302      	movs	r3, #2
 800c822:	e010      	b.n	800c846 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	69da      	ldr	r2, [r3, #28]
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	0a5b      	lsrs	r3, r3, #9
 800c82c:	441a      	add	r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c83e:	441a      	add	r2, r3
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c844:	2300      	movs	r3, #0
}
 800c846:	4618      	mov	r0, r3
 800c848:	3718      	adds	r7, #24
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}

0800c84e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c84e:	b580      	push	{r7, lr}
 800c850:	b086      	sub	sp, #24
 800c852:	af00      	add	r7, sp, #0
 800c854:	6078      	str	r0, [r7, #4]
 800c856:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	695b      	ldr	r3, [r3, #20]
 800c862:	3320      	adds	r3, #32
 800c864:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	69db      	ldr	r3, [r3, #28]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d003      	beq.n	800c876 <dir_next+0x28>
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c874:	d301      	bcc.n	800c87a <dir_next+0x2c>
 800c876:	2304      	movs	r3, #4
 800c878:	e0aa      	b.n	800c9d0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c880:	2b00      	cmp	r3, #0
 800c882:	f040 8098 	bne.w	800c9b6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	69db      	ldr	r3, [r3, #28]
 800c88a:	1c5a      	adds	r2, r3, #1
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	699b      	ldr	r3, [r3, #24]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d10b      	bne.n	800c8b0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	095b      	lsrs	r3, r3, #5
 800c89c:	68fa      	ldr	r2, [r7, #12]
 800c89e:	8912      	ldrh	r2, [r2, #8]
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	f0c0 8088 	bcc.w	800c9b6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	61da      	str	r2, [r3, #28]
 800c8ac:	2304      	movs	r3, #4
 800c8ae:	e08f      	b.n	800c9d0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	0a5b      	lsrs	r3, r3, #9
 800c8b4:	68fa      	ldr	r2, [r7, #12]
 800c8b6:	8952      	ldrh	r2, [r2, #10]
 800c8b8:	3a01      	subs	r2, #1
 800c8ba:	4013      	ands	r3, r2
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d17a      	bne.n	800c9b6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	699b      	ldr	r3, [r3, #24]
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	4610      	mov	r0, r2
 800c8ca:	f7ff fc82 	bl	800c1d2 <get_fat>
 800c8ce:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d801      	bhi.n	800c8da <dir_next+0x8c>
 800c8d6:	2302      	movs	r3, #2
 800c8d8:	e07a      	b.n	800c9d0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e0:	d101      	bne.n	800c8e6 <dir_next+0x98>
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e074      	b.n	800c9d0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	699b      	ldr	r3, [r3, #24]
 800c8ea:	697a      	ldr	r2, [r7, #20]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d358      	bcc.n	800c9a2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d104      	bne.n	800c900 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	61da      	str	r2, [r3, #28]
 800c8fc:	2304      	movs	r3, #4
 800c8fe:	e067      	b.n	800c9d0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c900:	687a      	ldr	r2, [r7, #4]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	699b      	ldr	r3, [r3, #24]
 800c906:	4619      	mov	r1, r3
 800c908:	4610      	mov	r0, r2
 800c90a:	f7ff fe59 	bl	800c5c0 <create_chain>
 800c90e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d101      	bne.n	800c91a <dir_next+0xcc>
 800c916:	2307      	movs	r3, #7
 800c918:	e05a      	b.n	800c9d0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d101      	bne.n	800c924 <dir_next+0xd6>
 800c920:	2302      	movs	r3, #2
 800c922:	e055      	b.n	800c9d0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c92a:	d101      	bne.n	800c930 <dir_next+0xe2>
 800c92c:	2301      	movs	r3, #1
 800c92e:	e04f      	b.n	800c9d0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c930:	68f8      	ldr	r0, [r7, #12]
 800c932:	f7ff fb4f 	bl	800bfd4 <sync_window>
 800c936:	4603      	mov	r3, r0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d001      	beq.n	800c940 <dir_next+0xf2>
 800c93c:	2301      	movs	r3, #1
 800c93e:	e047      	b.n	800c9d0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	3334      	adds	r3, #52	; 0x34
 800c944:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c948:	2100      	movs	r1, #0
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7ff f979 	bl	800bc42 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c950:	2300      	movs	r3, #0
 800c952:	613b      	str	r3, [r7, #16]
 800c954:	6979      	ldr	r1, [r7, #20]
 800c956:	68f8      	ldr	r0, [r7, #12]
 800c958:	f7ff fc1c 	bl	800c194 <clust2sect>
 800c95c:	4602      	mov	r2, r0
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	631a      	str	r2, [r3, #48]	; 0x30
 800c962:	e012      	b.n	800c98a <dir_next+0x13c>
						fs->wflag = 1;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2201      	movs	r2, #1
 800c968:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c96a:	68f8      	ldr	r0, [r7, #12]
 800c96c:	f7ff fb32 	bl	800bfd4 <sync_window>
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	d001      	beq.n	800c97a <dir_next+0x12c>
 800c976:	2301      	movs	r3, #1
 800c978:	e02a      	b.n	800c9d0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	3301      	adds	r3, #1
 800c97e:	613b      	str	r3, [r7, #16]
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c984:	1c5a      	adds	r2, r3, #1
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	631a      	str	r2, [r3, #48]	; 0x30
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	895b      	ldrh	r3, [r3, #10]
 800c98e:	461a      	mov	r2, r3
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	4293      	cmp	r3, r2
 800c994:	d3e6      	bcc.n	800c964 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	1ad2      	subs	r2, r2, r3
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	697a      	ldr	r2, [r7, #20]
 800c9a6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c9a8:	6979      	ldr	r1, [r7, #20]
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	f7ff fbf2 	bl	800c194 <clust2sect>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	68ba      	ldr	r2, [r7, #8]
 800c9ba:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9c8:	441a      	add	r2, r3
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c9ce:	2300      	movs	r3, #0
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3718      	adds	r7, #24
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b086      	sub	sp, #24
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f7ff feb4 	bl	800c758 <dir_sdi>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c9f4:	7dfb      	ldrb	r3, [r7, #23]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d12b      	bne.n	800ca52 <dir_alloc+0x7a>
		n = 0;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	69db      	ldr	r3, [r3, #28]
 800ca02:	4619      	mov	r1, r3
 800ca04:	68f8      	ldr	r0, [r7, #12]
 800ca06:	f7ff fb29 	bl	800c05c <move_window>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ca0e:	7dfb      	ldrb	r3, [r7, #23]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d11d      	bne.n	800ca50 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6a1b      	ldr	r3, [r3, #32]
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	2be5      	cmp	r3, #229	; 0xe5
 800ca1c:	d004      	beq.n	800ca28 <dir_alloc+0x50>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6a1b      	ldr	r3, [r3, #32]
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d107      	bne.n	800ca38 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	613b      	str	r3, [r7, #16]
 800ca2e:	693a      	ldr	r2, [r7, #16]
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d102      	bne.n	800ca3c <dir_alloc+0x64>
 800ca36:	e00c      	b.n	800ca52 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ca38:	2300      	movs	r3, #0
 800ca3a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ca3c:	2101      	movs	r1, #1
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f7ff ff05 	bl	800c84e <dir_next>
 800ca44:	4603      	mov	r3, r0
 800ca46:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ca48:	7dfb      	ldrb	r3, [r7, #23]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d0d7      	beq.n	800c9fe <dir_alloc+0x26>
 800ca4e:	e000      	b.n	800ca52 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ca50:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ca52:	7dfb      	ldrb	r3, [r7, #23]
 800ca54:	2b04      	cmp	r3, #4
 800ca56:	d101      	bne.n	800ca5c <dir_alloc+0x84>
 800ca58:	2307      	movs	r3, #7
 800ca5a:	75fb      	strb	r3, [r7, #23]
	return res;
 800ca5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3718      	adds	r7, #24
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}

0800ca66 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b084      	sub	sp, #16
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
 800ca6e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	331a      	adds	r3, #26
 800ca74:	4618      	mov	r0, r3
 800ca76:	f7ff f841 	bl	800bafc <ld_word>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	2b03      	cmp	r3, #3
 800ca84:	d109      	bne.n	800ca9a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	3314      	adds	r3, #20
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7ff f836 	bl	800bafc <ld_word>
 800ca90:	4603      	mov	r3, r0
 800ca92:	041b      	lsls	r3, r3, #16
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	4313      	orrs	r3, r2
 800ca98:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3710      	adds	r7, #16
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	331a      	adds	r3, #26
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	b292      	uxth	r2, r2
 800cab8:	4611      	mov	r1, r2
 800caba:	4618      	mov	r0, r3
 800cabc:	f7ff f859 	bl	800bb72 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	2b03      	cmp	r3, #3
 800cac6:	d109      	bne.n	800cadc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	f103 0214 	add.w	r2, r3, #20
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	0c1b      	lsrs	r3, r3, #16
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	4619      	mov	r1, r3
 800cad6:	4610      	mov	r0, r2
 800cad8:	f7ff f84b 	bl	800bb72 <st_word>
	}
}
 800cadc:	bf00      	nop
 800cade:	3710      	adds	r7, #16
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800cae4:	b590      	push	{r4, r7, lr}
 800cae6:	b087      	sub	sp, #28
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	331a      	adds	r3, #26
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7ff f802 	bl	800bafc <ld_word>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <cmp_lfn+0x1e>
 800cafe:	2300      	movs	r3, #0
 800cb00:	e059      	b.n	800cbb6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb0a:	1e5a      	subs	r2, r3, #1
 800cb0c:	4613      	mov	r3, r2
 800cb0e:	005b      	lsls	r3, r3, #1
 800cb10:	4413      	add	r3, r2
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	4413      	add	r3, r2
 800cb16:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cb18:	2301      	movs	r3, #1
 800cb1a:	81fb      	strh	r3, [r7, #14]
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	613b      	str	r3, [r7, #16]
 800cb20:	e033      	b.n	800cb8a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cb22:	4a27      	ldr	r2, [pc, #156]	; (800cbc0 <cmp_lfn+0xdc>)
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	4413      	add	r3, r2
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	4413      	add	r3, r2
 800cb30:	4618      	mov	r0, r3
 800cb32:	f7fe ffe3 	bl	800bafc <ld_word>
 800cb36:	4603      	mov	r3, r0
 800cb38:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cb3a:	89fb      	ldrh	r3, [r7, #14]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d01a      	beq.n	800cb76 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	2bfe      	cmp	r3, #254	; 0xfe
 800cb44:	d812      	bhi.n	800cb6c <cmp_lfn+0x88>
 800cb46:	89bb      	ldrh	r3, [r7, #12]
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f002 f99f 	bl	800ee8c <ff_wtoupper>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	461c      	mov	r4, r3
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	1c5a      	adds	r2, r3, #1
 800cb56:	617a      	str	r2, [r7, #20]
 800cb58:	005b      	lsls	r3, r3, #1
 800cb5a:	687a      	ldr	r2, [r7, #4]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	881b      	ldrh	r3, [r3, #0]
 800cb60:	4618      	mov	r0, r3
 800cb62:	f002 f993 	bl	800ee8c <ff_wtoupper>
 800cb66:	4603      	mov	r3, r0
 800cb68:	429c      	cmp	r4, r3
 800cb6a:	d001      	beq.n	800cb70 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	e022      	b.n	800cbb6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800cb70:	89bb      	ldrh	r3, [r7, #12]
 800cb72:	81fb      	strh	r3, [r7, #14]
 800cb74:	e006      	b.n	800cb84 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cb76:	89bb      	ldrh	r3, [r7, #12]
 800cb78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d001      	beq.n	800cb84 <cmp_lfn+0xa0>
 800cb80:	2300      	movs	r3, #0
 800cb82:	e018      	b.n	800cbb6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	3301      	adds	r3, #1
 800cb88:	613b      	str	r3, [r7, #16]
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	2b0c      	cmp	r3, #12
 800cb8e:	d9c8      	bls.n	800cb22 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d00b      	beq.n	800cbb4 <cmp_lfn+0xd0>
 800cb9c:	89fb      	ldrh	r3, [r7, #14]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d008      	beq.n	800cbb4 <cmp_lfn+0xd0>
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	005b      	lsls	r3, r3, #1
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	4413      	add	r3, r2
 800cbaa:	881b      	ldrh	r3, [r3, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d001      	beq.n	800cbb4 <cmp_lfn+0xd0>
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	e000      	b.n	800cbb6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800cbb4:	2301      	movs	r3, #1
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	371c      	adds	r7, #28
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd90      	pop	{r4, r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	0800fa98 	.word	0x0800fa98

0800cbc4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b086      	sub	sp, #24
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	331a      	adds	r3, #26
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7fe ff92 	bl	800bafc <ld_word>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d001      	beq.n	800cbe2 <pick_lfn+0x1e>
 800cbde:	2300      	movs	r3, #0
 800cbe0:	e04d      	b.n	800cc7e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbea:	1e5a      	subs	r2, r3, #1
 800cbec:	4613      	mov	r3, r2
 800cbee:	005b      	lsls	r3, r3, #1
 800cbf0:	4413      	add	r3, r2
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	4413      	add	r3, r2
 800cbf6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	81fb      	strh	r3, [r7, #14]
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	613b      	str	r3, [r7, #16]
 800cc00:	e028      	b.n	800cc54 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cc02:	4a21      	ldr	r2, [pc, #132]	; (800cc88 <pick_lfn+0xc4>)
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	4413      	add	r3, r2
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	4413      	add	r3, r2
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7fe ff73 	bl	800bafc <ld_word>
 800cc16:	4603      	mov	r3, r0
 800cc18:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cc1a:	89fb      	ldrh	r3, [r7, #14]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d00f      	beq.n	800cc40 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	2bfe      	cmp	r3, #254	; 0xfe
 800cc24:	d901      	bls.n	800cc2a <pick_lfn+0x66>
 800cc26:	2300      	movs	r3, #0
 800cc28:	e029      	b.n	800cc7e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800cc2a:	89bb      	ldrh	r3, [r7, #12]
 800cc2c:	81fb      	strh	r3, [r7, #14]
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	1c5a      	adds	r2, r3, #1
 800cc32:	617a      	str	r2, [r7, #20]
 800cc34:	005b      	lsls	r3, r3, #1
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	4413      	add	r3, r2
 800cc3a:	89fa      	ldrh	r2, [r7, #14]
 800cc3c:	801a      	strh	r2, [r3, #0]
 800cc3e:	e006      	b.n	800cc4e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cc40:	89bb      	ldrh	r3, [r7, #12]
 800cc42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d001      	beq.n	800cc4e <pick_lfn+0x8a>
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	e017      	b.n	800cc7e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	3301      	adds	r3, #1
 800cc52:	613b      	str	r3, [r7, #16]
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	2b0c      	cmp	r3, #12
 800cc58:	d9d3      	bls.n	800cc02 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00a      	beq.n	800cc7c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	2bfe      	cmp	r3, #254	; 0xfe
 800cc6a:	d901      	bls.n	800cc70 <pick_lfn+0xac>
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	e006      	b.n	800cc7e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	005b      	lsls	r3, r3, #1
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	4413      	add	r3, r2
 800cc78:	2200      	movs	r2, #0
 800cc7a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800cc7c:	2301      	movs	r3, #1
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3718      	adds	r7, #24
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	0800fa98 	.word	0x0800fa98

0800cc8c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b088      	sub	sp, #32
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	4611      	mov	r1, r2
 800cc98:	461a      	mov	r2, r3
 800cc9a:	460b      	mov	r3, r1
 800cc9c:	71fb      	strb	r3, [r7, #7]
 800cc9e:	4613      	mov	r3, r2
 800cca0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	330d      	adds	r3, #13
 800cca6:	79ba      	ldrb	r2, [r7, #6]
 800cca8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	330b      	adds	r3, #11
 800ccae:	220f      	movs	r2, #15
 800ccb0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	330c      	adds	r3, #12
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	331a      	adds	r3, #26
 800ccbe:	2100      	movs	r1, #0
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f7fe ff56 	bl	800bb72 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ccc6:	79fb      	ldrb	r3, [r7, #7]
 800ccc8:	1e5a      	subs	r2, r3, #1
 800ccca:	4613      	mov	r3, r2
 800cccc:	005b      	lsls	r3, r3, #1
 800ccce:	4413      	add	r3, r2
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	4413      	add	r3, r2
 800ccd4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	82fb      	strh	r3, [r7, #22]
 800ccda:	2300      	movs	r3, #0
 800ccdc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ccde:	8afb      	ldrh	r3, [r7, #22]
 800cce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d007      	beq.n	800ccf8 <put_lfn+0x6c>
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	1c5a      	adds	r2, r3, #1
 800ccec:	61fa      	str	r2, [r7, #28]
 800ccee:	005b      	lsls	r3, r3, #1
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	881b      	ldrh	r3, [r3, #0]
 800ccf6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ccf8:	4a17      	ldr	r2, [pc, #92]	; (800cd58 <put_lfn+0xcc>)
 800ccfa:	69bb      	ldr	r3, [r7, #24]
 800ccfc:	4413      	add	r3, r2
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	461a      	mov	r2, r3
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	4413      	add	r3, r2
 800cd06:	8afa      	ldrh	r2, [r7, #22]
 800cd08:	4611      	mov	r1, r2
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7fe ff31 	bl	800bb72 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800cd10:	8afb      	ldrh	r3, [r7, #22]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d102      	bne.n	800cd1c <put_lfn+0x90>
 800cd16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cd1a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800cd1c:	69bb      	ldr	r3, [r7, #24]
 800cd1e:	3301      	adds	r3, #1
 800cd20:	61bb      	str	r3, [r7, #24]
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	2b0c      	cmp	r3, #12
 800cd26:	d9da      	bls.n	800ccde <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800cd28:	8afb      	ldrh	r3, [r7, #22]
 800cd2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d006      	beq.n	800cd40 <put_lfn+0xb4>
 800cd32:	69fb      	ldr	r3, [r7, #28]
 800cd34:	005b      	lsls	r3, r3, #1
 800cd36:	68fa      	ldr	r2, [r7, #12]
 800cd38:	4413      	add	r3, r2
 800cd3a:	881b      	ldrh	r3, [r3, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d103      	bne.n	800cd48 <put_lfn+0xbc>
 800cd40:	79fb      	ldrb	r3, [r7, #7]
 800cd42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd46:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	79fa      	ldrb	r2, [r7, #7]
 800cd4c:	701a      	strb	r2, [r3, #0]
}
 800cd4e:	bf00      	nop
 800cd50:	3720      	adds	r7, #32
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	0800fa98 	.word	0x0800fa98

0800cd5c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b08c      	sub	sp, #48	; 0x30
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	607a      	str	r2, [r7, #4]
 800cd68:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800cd6a:	220b      	movs	r2, #11
 800cd6c:	68b9      	ldr	r1, [r7, #8]
 800cd6e:	68f8      	ldr	r0, [r7, #12]
 800cd70:	f7fe ff46 	bl	800bc00 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	2b05      	cmp	r3, #5
 800cd78:	d92b      	bls.n	800cdd2 <gen_numname+0x76>
		sr = seq;
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800cd7e:	e022      	b.n	800cdc6 <gen_numname+0x6a>
			wc = *lfn++;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	1c9a      	adds	r2, r3, #2
 800cd84:	607a      	str	r2, [r7, #4]
 800cd86:	881b      	ldrh	r3, [r3, #0]
 800cd88:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd8e:	e017      	b.n	800cdc0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	005a      	lsls	r2, r3, #1
 800cd94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd96:	f003 0301 	and.w	r3, r3, #1
 800cd9a:	4413      	add	r3, r2
 800cd9c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800cd9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cda0:	085b      	lsrs	r3, r3, #1
 800cda2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d005      	beq.n	800cdba <gen_numname+0x5e>
 800cdae:	69fb      	ldr	r3, [r7, #28]
 800cdb0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800cdb4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800cdb8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800cdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	62bb      	str	r3, [r7, #40]	; 0x28
 800cdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc2:	2b0f      	cmp	r3, #15
 800cdc4:	d9e4      	bls.n	800cd90 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	881b      	ldrh	r3, [r3, #0]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d1d8      	bne.n	800cd80 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800cdce:	69fb      	ldr	r3, [r7, #28]
 800cdd0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800cdd2:	2307      	movs	r3, #7
 800cdd4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	f003 030f 	and.w	r3, r3, #15
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	3330      	adds	r3, #48	; 0x30
 800cde2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800cde6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdea:	2b39      	cmp	r3, #57	; 0x39
 800cdec:	d904      	bls.n	800cdf8 <gen_numname+0x9c>
 800cdee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdf2:	3307      	adds	r3, #7
 800cdf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800cdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdfa:	1e5a      	subs	r2, r3, #1
 800cdfc:	62ba      	str	r2, [r7, #40]	; 0x28
 800cdfe:	3330      	adds	r3, #48	; 0x30
 800ce00:	443b      	add	r3, r7
 800ce02:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ce06:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	091b      	lsrs	r3, r3, #4
 800ce0e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d1df      	bne.n	800cdd6 <gen_numname+0x7a>
	ns[i] = '~';
 800ce16:	f107 0214 	add.w	r2, r7, #20
 800ce1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1c:	4413      	add	r3, r2
 800ce1e:	227e      	movs	r2, #126	; 0x7e
 800ce20:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ce22:	2300      	movs	r3, #0
 800ce24:	627b      	str	r3, [r7, #36]	; 0x24
 800ce26:	e002      	b.n	800ce2e <gen_numname+0xd2>
 800ce28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	627b      	str	r3, [r7, #36]	; 0x24
 800ce2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d205      	bcs.n	800ce42 <gen_numname+0xe6>
 800ce36:	68fa      	ldr	r2, [r7, #12]
 800ce38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3a:	4413      	add	r3, r2
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	2b20      	cmp	r3, #32
 800ce40:	d1f2      	bne.n	800ce28 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ce42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce44:	2b07      	cmp	r3, #7
 800ce46:	d807      	bhi.n	800ce58 <gen_numname+0xfc>
 800ce48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4a:	1c5a      	adds	r2, r3, #1
 800ce4c:	62ba      	str	r2, [r7, #40]	; 0x28
 800ce4e:	3330      	adds	r3, #48	; 0x30
 800ce50:	443b      	add	r3, r7
 800ce52:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ce56:	e000      	b.n	800ce5a <gen_numname+0xfe>
 800ce58:	2120      	movs	r1, #32
 800ce5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5c:	1c5a      	adds	r2, r3, #1
 800ce5e:	627a      	str	r2, [r7, #36]	; 0x24
 800ce60:	68fa      	ldr	r2, [r7, #12]
 800ce62:	4413      	add	r3, r2
 800ce64:	460a      	mov	r2, r1
 800ce66:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ce68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6a:	2b07      	cmp	r3, #7
 800ce6c:	d9e9      	bls.n	800ce42 <gen_numname+0xe6>
}
 800ce6e:	bf00      	nop
 800ce70:	bf00      	nop
 800ce72:	3730      	adds	r7, #48	; 0x30
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ce80:	2300      	movs	r3, #0
 800ce82:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ce84:	230b      	movs	r3, #11
 800ce86:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ce88:	7bfb      	ldrb	r3, [r7, #15]
 800ce8a:	b2da      	uxtb	r2, r3
 800ce8c:	0852      	lsrs	r2, r2, #1
 800ce8e:	01db      	lsls	r3, r3, #7
 800ce90:	4313      	orrs	r3, r2
 800ce92:	b2da      	uxtb	r2, r3
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	1c59      	adds	r1, r3, #1
 800ce98:	6079      	str	r1, [r7, #4]
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	3b01      	subs	r3, #1
 800cea4:	60bb      	str	r3, [r7, #8]
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d1ed      	bne.n	800ce88 <sum_sfn+0x10>
	return sum;
 800ceac:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3714      	adds	r7, #20
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb8:	4770      	bx	lr

0800ceba <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ceba:	b580      	push	{r7, lr}
 800cebc:	b086      	sub	sp, #24
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
 800cec2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800cec4:	2304      	movs	r3, #4
 800cec6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800cece:	23ff      	movs	r3, #255	; 0xff
 800ced0:	757b      	strb	r3, [r7, #21]
 800ced2:	23ff      	movs	r3, #255	; 0xff
 800ced4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800ced6:	e081      	b.n	800cfdc <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	69db      	ldr	r3, [r3, #28]
 800cedc:	4619      	mov	r1, r3
 800cede:	6938      	ldr	r0, [r7, #16]
 800cee0:	f7ff f8bc 	bl	800c05c <move_window>
 800cee4:	4603      	mov	r3, r0
 800cee6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cee8:	7dfb      	ldrb	r3, [r7, #23]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d17c      	bne.n	800cfe8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6a1b      	ldr	r3, [r3, #32]
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800cef6:	7dbb      	ldrb	r3, [r7, #22]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d102      	bne.n	800cf02 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800cefc:	2304      	movs	r3, #4
 800cefe:	75fb      	strb	r3, [r7, #23]
 800cf00:	e077      	b.n	800cff2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6a1b      	ldr	r3, [r3, #32]
 800cf06:	330b      	adds	r3, #11
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf0e:	73fb      	strb	r3, [r7, #15]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	7bfa      	ldrb	r2, [r7, #15]
 800cf14:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800cf16:	7dbb      	ldrb	r3, [r7, #22]
 800cf18:	2be5      	cmp	r3, #229	; 0xe5
 800cf1a:	d00e      	beq.n	800cf3a <dir_read+0x80>
 800cf1c:	7dbb      	ldrb	r3, [r7, #22]
 800cf1e:	2b2e      	cmp	r3, #46	; 0x2e
 800cf20:	d00b      	beq.n	800cf3a <dir_read+0x80>
 800cf22:	7bfb      	ldrb	r3, [r7, #15]
 800cf24:	f023 0320 	bic.w	r3, r3, #32
 800cf28:	2b08      	cmp	r3, #8
 800cf2a:	bf0c      	ite	eq
 800cf2c:	2301      	moveq	r3, #1
 800cf2e:	2300      	movne	r3, #0
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	461a      	mov	r2, r3
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d002      	beq.n	800cf40 <dir_read+0x86>
				ord = 0xFF;
 800cf3a:	23ff      	movs	r3, #255	; 0xff
 800cf3c:	757b      	strb	r3, [r7, #21]
 800cf3e:	e044      	b.n	800cfca <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800cf40:	7bfb      	ldrb	r3, [r7, #15]
 800cf42:	2b0f      	cmp	r3, #15
 800cf44:	d12f      	bne.n	800cfa6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800cf46:	7dbb      	ldrb	r3, [r7, #22]
 800cf48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d00d      	beq.n	800cf6c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6a1b      	ldr	r3, [r3, #32]
 800cf54:	7b5b      	ldrb	r3, [r3, #13]
 800cf56:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800cf58:	7dbb      	ldrb	r3, [r7, #22]
 800cf5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf5e:	75bb      	strb	r3, [r7, #22]
 800cf60:	7dbb      	ldrb	r3, [r7, #22]
 800cf62:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	695a      	ldr	r2, [r3, #20]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cf6c:	7dba      	ldrb	r2, [r7, #22]
 800cf6e:	7d7b      	ldrb	r3, [r7, #21]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d115      	bne.n	800cfa0 <dir_read+0xe6>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6a1b      	ldr	r3, [r3, #32]
 800cf78:	330d      	adds	r3, #13
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	7d3a      	ldrb	r2, [r7, #20]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d10e      	bne.n	800cfa0 <dir_read+0xe6>
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	68da      	ldr	r2, [r3, #12]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6a1b      	ldr	r3, [r3, #32]
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	4610      	mov	r0, r2
 800cf8e:	f7ff fe19 	bl	800cbc4 <pick_lfn>
 800cf92:	4603      	mov	r3, r0
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d003      	beq.n	800cfa0 <dir_read+0xe6>
 800cf98:	7d7b      	ldrb	r3, [r7, #21]
 800cf9a:	3b01      	subs	r3, #1
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	e000      	b.n	800cfa2 <dir_read+0xe8>
 800cfa0:	23ff      	movs	r3, #255	; 0xff
 800cfa2:	757b      	strb	r3, [r7, #21]
 800cfa4:	e011      	b.n	800cfca <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800cfa6:	7d7b      	ldrb	r3, [r7, #21]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d109      	bne.n	800cfc0 <dir_read+0x106>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6a1b      	ldr	r3, [r3, #32]
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7ff ff61 	bl	800ce78 <sum_sfn>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	461a      	mov	r2, r3
 800cfba:	7d3b      	ldrb	r3, [r7, #20]
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d015      	beq.n	800cfec <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f04f 32ff 	mov.w	r2, #4294967295
 800cfc6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800cfc8:	e010      	b.n	800cfec <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800cfca:	2100      	movs	r1, #0
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f7ff fc3e 	bl	800c84e <dir_next>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cfd6:	7dfb      	ldrb	r3, [r7, #23]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d109      	bne.n	800cff0 <dir_read+0x136>
	while (dp->sect) {
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	69db      	ldr	r3, [r3, #28]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	f47f af79 	bne.w	800ced8 <dir_read+0x1e>
 800cfe6:	e004      	b.n	800cff2 <dir_read+0x138>
		if (res != FR_OK) break;
 800cfe8:	bf00      	nop
 800cfea:	e002      	b.n	800cff2 <dir_read+0x138>
					break;
 800cfec:	bf00      	nop
 800cfee:	e000      	b.n	800cff2 <dir_read+0x138>
		if (res != FR_OK) break;
 800cff0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800cff2:	7dfb      	ldrb	r3, [r7, #23]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d002      	beq.n	800cffe <dir_read+0x144>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2200      	movs	r2, #0
 800cffc:	61da      	str	r2, [r3, #28]
	return res;
 800cffe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d000:	4618      	mov	r0, r3
 800d002:	3718      	adds	r7, #24
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b086      	sub	sp, #24
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d016:	2100      	movs	r1, #0
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f7ff fb9d 	bl	800c758 <dir_sdi>
 800d01e:	4603      	mov	r3, r0
 800d020:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d022:	7dfb      	ldrb	r3, [r7, #23]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d001      	beq.n	800d02c <dir_find+0x24>
 800d028:	7dfb      	ldrb	r3, [r7, #23]
 800d02a:	e0a9      	b.n	800d180 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d02c:	23ff      	movs	r3, #255	; 0xff
 800d02e:	753b      	strb	r3, [r7, #20]
 800d030:	7d3b      	ldrb	r3, [r7, #20]
 800d032:	757b      	strb	r3, [r7, #21]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f04f 32ff 	mov.w	r2, #4294967295
 800d03a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	69db      	ldr	r3, [r3, #28]
 800d040:	4619      	mov	r1, r3
 800d042:	6938      	ldr	r0, [r7, #16]
 800d044:	f7ff f80a 	bl	800c05c <move_window>
 800d048:	4603      	mov	r3, r0
 800d04a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d04c:	7dfb      	ldrb	r3, [r7, #23]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	f040 8090 	bne.w	800d174 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6a1b      	ldr	r3, [r3, #32]
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d05c:	7dbb      	ldrb	r3, [r7, #22]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d102      	bne.n	800d068 <dir_find+0x60>
 800d062:	2304      	movs	r3, #4
 800d064:	75fb      	strb	r3, [r7, #23]
 800d066:	e08a      	b.n	800d17e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6a1b      	ldr	r3, [r3, #32]
 800d06c:	330b      	adds	r3, #11
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d074:	73fb      	strb	r3, [r7, #15]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	7bfa      	ldrb	r2, [r7, #15]
 800d07a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d07c:	7dbb      	ldrb	r3, [r7, #22]
 800d07e:	2be5      	cmp	r3, #229	; 0xe5
 800d080:	d007      	beq.n	800d092 <dir_find+0x8a>
 800d082:	7bfb      	ldrb	r3, [r7, #15]
 800d084:	f003 0308 	and.w	r3, r3, #8
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d009      	beq.n	800d0a0 <dir_find+0x98>
 800d08c:	7bfb      	ldrb	r3, [r7, #15]
 800d08e:	2b0f      	cmp	r3, #15
 800d090:	d006      	beq.n	800d0a0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d092:	23ff      	movs	r3, #255	; 0xff
 800d094:	757b      	strb	r3, [r7, #21]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f04f 32ff 	mov.w	r2, #4294967295
 800d09c:	631a      	str	r2, [r3, #48]	; 0x30
 800d09e:	e05e      	b.n	800d15e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d0a0:	7bfb      	ldrb	r3, [r7, #15]
 800d0a2:	2b0f      	cmp	r3, #15
 800d0a4:	d136      	bne.n	800d114 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d0ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d154      	bne.n	800d15e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d0b4:	7dbb      	ldrb	r3, [r7, #22]
 800d0b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d00d      	beq.n	800d0da <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6a1b      	ldr	r3, [r3, #32]
 800d0c2:	7b5b      	ldrb	r3, [r3, #13]
 800d0c4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d0c6:	7dbb      	ldrb	r3, [r7, #22]
 800d0c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0cc:	75bb      	strb	r3, [r7, #22]
 800d0ce:	7dbb      	ldrb	r3, [r7, #22]
 800d0d0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	695a      	ldr	r2, [r3, #20]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d0da:	7dba      	ldrb	r2, [r7, #22]
 800d0dc:	7d7b      	ldrb	r3, [r7, #21]
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d115      	bne.n	800d10e <dir_find+0x106>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6a1b      	ldr	r3, [r3, #32]
 800d0e6:	330d      	adds	r3, #13
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	7d3a      	ldrb	r2, [r7, #20]
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d10e      	bne.n	800d10e <dir_find+0x106>
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	68da      	ldr	r2, [r3, #12]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6a1b      	ldr	r3, [r3, #32]
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	4610      	mov	r0, r2
 800d0fc:	f7ff fcf2 	bl	800cae4 <cmp_lfn>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d003      	beq.n	800d10e <dir_find+0x106>
 800d106:	7d7b      	ldrb	r3, [r7, #21]
 800d108:	3b01      	subs	r3, #1
 800d10a:	b2db      	uxtb	r3, r3
 800d10c:	e000      	b.n	800d110 <dir_find+0x108>
 800d10e:	23ff      	movs	r3, #255	; 0xff
 800d110:	757b      	strb	r3, [r7, #21]
 800d112:	e024      	b.n	800d15e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d114:	7d7b      	ldrb	r3, [r7, #21]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d109      	bne.n	800d12e <dir_find+0x126>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6a1b      	ldr	r3, [r3, #32]
 800d11e:	4618      	mov	r0, r3
 800d120:	f7ff feaa 	bl	800ce78 <sum_sfn>
 800d124:	4603      	mov	r3, r0
 800d126:	461a      	mov	r2, r3
 800d128:	7d3b      	ldrb	r3, [r7, #20]
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d024      	beq.n	800d178 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d134:	f003 0301 	and.w	r3, r3, #1
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d10a      	bne.n	800d152 <dir_find+0x14a>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6a18      	ldr	r0, [r3, #32]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	3324      	adds	r3, #36	; 0x24
 800d144:	220b      	movs	r2, #11
 800d146:	4619      	mov	r1, r3
 800d148:	f7fe fd96 	bl	800bc78 <mem_cmp>
 800d14c:	4603      	mov	r3, r0
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d014      	beq.n	800d17c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d152:	23ff      	movs	r3, #255	; 0xff
 800d154:	757b      	strb	r3, [r7, #21]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f04f 32ff 	mov.w	r2, #4294967295
 800d15c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d15e:	2100      	movs	r1, #0
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f7ff fb74 	bl	800c84e <dir_next>
 800d166:	4603      	mov	r3, r0
 800d168:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d16a:	7dfb      	ldrb	r3, [r7, #23]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	f43f af65 	beq.w	800d03c <dir_find+0x34>
 800d172:	e004      	b.n	800d17e <dir_find+0x176>
		if (res != FR_OK) break;
 800d174:	bf00      	nop
 800d176:	e002      	b.n	800d17e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d178:	bf00      	nop
 800d17a:	e000      	b.n	800d17e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d17c:	bf00      	nop

	return res;
 800d17e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d180:	4618      	mov	r0, r3
 800d182:	3718      	adds	r7, #24
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}

0800d188 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b08c      	sub	sp, #48	; 0x30
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d19c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d001      	beq.n	800d1a8 <dir_register+0x20>
 800d1a4:	2306      	movs	r3, #6
 800d1a6:	e0e0      	b.n	800d36a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	627b      	str	r3, [r7, #36]	; 0x24
 800d1ac:	e002      	b.n	800d1b4 <dir_register+0x2c>
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	627b      	str	r3, [r7, #36]	; 0x24
 800d1b4:	69fb      	ldr	r3, [r7, #28]
 800d1b6:	68da      	ldr	r2, [r3, #12]
 800d1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ba:	005b      	lsls	r3, r3, #1
 800d1bc:	4413      	add	r3, r2
 800d1be:	881b      	ldrh	r3, [r3, #0]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d1f4      	bne.n	800d1ae <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d1ca:	f107 030c 	add.w	r3, r7, #12
 800d1ce:	220c      	movs	r2, #12
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7fe fd15 	bl	800bc00 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d1d6:	7dfb      	ldrb	r3, [r7, #23]
 800d1d8:	f003 0301 	and.w	r3, r3, #1
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d032      	beq.n	800d246 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2240      	movs	r2, #64	; 0x40
 800d1e4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1ec:	e016      	b.n	800d21c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d1f4:	69fb      	ldr	r3, [r7, #28]
 800d1f6:	68da      	ldr	r2, [r3, #12]
 800d1f8:	f107 010c 	add.w	r1, r7, #12
 800d1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fe:	f7ff fdad 	bl	800cd5c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f7ff ff00 	bl	800d008 <dir_find>
 800d208:	4603      	mov	r3, r0
 800d20a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d20e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d212:	2b00      	cmp	r3, #0
 800d214:	d106      	bne.n	800d224 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d218:	3301      	adds	r3, #1
 800d21a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21e:	2b63      	cmp	r3, #99	; 0x63
 800d220:	d9e5      	bls.n	800d1ee <dir_register+0x66>
 800d222:	e000      	b.n	800d226 <dir_register+0x9e>
			if (res != FR_OK) break;
 800d224:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d228:	2b64      	cmp	r3, #100	; 0x64
 800d22a:	d101      	bne.n	800d230 <dir_register+0xa8>
 800d22c:	2307      	movs	r3, #7
 800d22e:	e09c      	b.n	800d36a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d230:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d234:	2b04      	cmp	r3, #4
 800d236:	d002      	beq.n	800d23e <dir_register+0xb6>
 800d238:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d23c:	e095      	b.n	800d36a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d23e:	7dfa      	ldrb	r2, [r7, #23]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d246:	7dfb      	ldrb	r3, [r7, #23]
 800d248:	f003 0302 	and.w	r3, r3, #2
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d007      	beq.n	800d260 <dir_register+0xd8>
 800d250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d252:	330c      	adds	r3, #12
 800d254:	4a47      	ldr	r2, [pc, #284]	; (800d374 <dir_register+0x1ec>)
 800d256:	fba2 2303 	umull	r2, r3, r2, r3
 800d25a:	089b      	lsrs	r3, r3, #2
 800d25c:	3301      	adds	r3, #1
 800d25e:	e000      	b.n	800d262 <dir_register+0xda>
 800d260:	2301      	movs	r3, #1
 800d262:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d264:	6a39      	ldr	r1, [r7, #32]
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f7ff fbb6 	bl	800c9d8 <dir_alloc>
 800d26c:	4603      	mov	r3, r0
 800d26e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d272:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d276:	2b00      	cmp	r3, #0
 800d278:	d148      	bne.n	800d30c <dir_register+0x184>
 800d27a:	6a3b      	ldr	r3, [r7, #32]
 800d27c:	3b01      	subs	r3, #1
 800d27e:	623b      	str	r3, [r7, #32]
 800d280:	6a3b      	ldr	r3, [r7, #32]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d042      	beq.n	800d30c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	695a      	ldr	r2, [r3, #20]
 800d28a:	6a3b      	ldr	r3, [r7, #32]
 800d28c:	015b      	lsls	r3, r3, #5
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	4619      	mov	r1, r3
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f7ff fa60 	bl	800c758 <dir_sdi>
 800d298:	4603      	mov	r3, r0
 800d29a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d29e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d132      	bne.n	800d30c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	3324      	adds	r3, #36	; 0x24
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7ff fde4 	bl	800ce78 <sum_sfn>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	69db      	ldr	r3, [r3, #28]
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	69f8      	ldr	r0, [r7, #28]
 800d2bc:	f7fe fece 	bl	800c05c <move_window>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d2c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d11d      	bne.n	800d30a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d2ce:	69fb      	ldr	r3, [r7, #28]
 800d2d0:	68d8      	ldr	r0, [r3, #12]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6a19      	ldr	r1, [r3, #32]
 800d2d6:	6a3b      	ldr	r3, [r7, #32]
 800d2d8:	b2da      	uxtb	r2, r3
 800d2da:	7efb      	ldrb	r3, [r7, #27]
 800d2dc:	f7ff fcd6 	bl	800cc8c <put_lfn>
				fs->wflag = 1;
 800d2e0:	69fb      	ldr	r3, [r7, #28]
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f7ff fab0 	bl	800c84e <dir_next>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d2f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d107      	bne.n	800d30c <dir_register+0x184>
 800d2fc:	6a3b      	ldr	r3, [r7, #32]
 800d2fe:	3b01      	subs	r3, #1
 800d300:	623b      	str	r3, [r7, #32]
 800d302:	6a3b      	ldr	r3, [r7, #32]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d1d5      	bne.n	800d2b4 <dir_register+0x12c>
 800d308:	e000      	b.n	800d30c <dir_register+0x184>
				if (res != FR_OK) break;
 800d30a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d30c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d310:	2b00      	cmp	r3, #0
 800d312:	d128      	bne.n	800d366 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	69db      	ldr	r3, [r3, #28]
 800d318:	4619      	mov	r1, r3
 800d31a:	69f8      	ldr	r0, [r7, #28]
 800d31c:	f7fe fe9e 	bl	800c05c <move_window>
 800d320:	4603      	mov	r3, r0
 800d322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d11b      	bne.n	800d366 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6a1b      	ldr	r3, [r3, #32]
 800d332:	2220      	movs	r2, #32
 800d334:	2100      	movs	r1, #0
 800d336:	4618      	mov	r0, r3
 800d338:	f7fe fc83 	bl	800bc42 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6a18      	ldr	r0, [r3, #32]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	3324      	adds	r3, #36	; 0x24
 800d344:	220b      	movs	r2, #11
 800d346:	4619      	mov	r1, r3
 800d348:	f7fe fc5a 	bl	800bc00 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6a1b      	ldr	r3, [r3, #32]
 800d356:	330c      	adds	r3, #12
 800d358:	f002 0218 	and.w	r2, r2, #24
 800d35c:	b2d2      	uxtb	r2, r2
 800d35e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d360:	69fb      	ldr	r3, [r7, #28]
 800d362:	2201      	movs	r2, #1
 800d364:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3730      	adds	r7, #48	; 0x30
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop
 800d374:	4ec4ec4f 	.word	0x4ec4ec4f

0800d378 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b088      	sub	sp, #32
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	2200      	movs	r2, #0
 800d38c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	69db      	ldr	r3, [r3, #28]
 800d392:	2b00      	cmp	r3, #0
 800d394:	f000 80c9 	beq.w	800d52a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3a0:	d032      	beq.n	800d408 <get_fileinfo+0x90>
			i = j = 0;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	61bb      	str	r3, [r7, #24]
 800d3a6:	69bb      	ldr	r3, [r7, #24]
 800d3a8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d3aa:	e01b      	b.n	800d3e4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800d3ac:	89fb      	ldrh	r3, [r7, #14]
 800d3ae:	2100      	movs	r1, #0
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f001 fd2f 	bl	800ee14 <ff_convert>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d3ba:	89fb      	ldrh	r3, [r7, #14]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d102      	bne.n	800d3c6 <get_fileinfo+0x4e>
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	61fb      	str	r3, [r7, #28]
 800d3c4:	e01a      	b.n	800d3fc <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	2bfe      	cmp	r3, #254	; 0xfe
 800d3ca:	d902      	bls.n	800d3d2 <get_fileinfo+0x5a>
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	61fb      	str	r3, [r7, #28]
 800d3d0:	e014      	b.n	800d3fc <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	1c5a      	adds	r2, r3, #1
 800d3d6:	61fa      	str	r2, [r7, #28]
 800d3d8:	89fa      	ldrh	r2, [r7, #14]
 800d3da:	b2d1      	uxtb	r1, r2
 800d3dc:	683a      	ldr	r2, [r7, #0]
 800d3de:	4413      	add	r3, r2
 800d3e0:	460a      	mov	r2, r1
 800d3e2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	68da      	ldr	r2, [r3, #12]
 800d3e8:	69bb      	ldr	r3, [r7, #24]
 800d3ea:	1c59      	adds	r1, r3, #1
 800d3ec:	61b9      	str	r1, [r7, #24]
 800d3ee:	005b      	lsls	r3, r3, #1
 800d3f0:	4413      	add	r3, r2
 800d3f2:	881b      	ldrh	r3, [r3, #0]
 800d3f4:	81fb      	strh	r3, [r7, #14]
 800d3f6:	89fb      	ldrh	r3, [r7, #14]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d1d7      	bne.n	800d3ac <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d3fc:	683a      	ldr	r2, [r7, #0]
 800d3fe:	69fb      	ldr	r3, [r7, #28]
 800d400:	4413      	add	r3, r2
 800d402:	3316      	adds	r3, #22
 800d404:	2200      	movs	r2, #0
 800d406:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800d408:	2300      	movs	r3, #0
 800d40a:	61bb      	str	r3, [r7, #24]
 800d40c:	69bb      	ldr	r3, [r7, #24]
 800d40e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d410:	683a      	ldr	r2, [r7, #0]
 800d412:	69fb      	ldr	r3, [r7, #28]
 800d414:	4413      	add	r3, r2
 800d416:	3316      	adds	r3, #22
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800d41c:	e04c      	b.n	800d4b8 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6a1a      	ldr	r2, [r3, #32]
 800d422:	69fb      	ldr	r3, [r7, #28]
 800d424:	1c59      	adds	r1, r3, #1
 800d426:	61f9      	str	r1, [r7, #28]
 800d428:	4413      	add	r3, r2
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d42e:	7dfb      	ldrb	r3, [r7, #23]
 800d430:	2b20      	cmp	r3, #32
 800d432:	d100      	bne.n	800d436 <get_fileinfo+0xbe>
 800d434:	e040      	b.n	800d4b8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d436:	7dfb      	ldrb	r3, [r7, #23]
 800d438:	2b05      	cmp	r3, #5
 800d43a:	d101      	bne.n	800d440 <get_fileinfo+0xc8>
 800d43c:	23e5      	movs	r3, #229	; 0xe5
 800d43e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	2b09      	cmp	r3, #9
 800d444:	d10f      	bne.n	800d466 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800d446:	89bb      	ldrh	r3, [r7, #12]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d105      	bne.n	800d458 <get_fileinfo+0xe0>
 800d44c:	683a      	ldr	r2, [r7, #0]
 800d44e:	69bb      	ldr	r3, [r7, #24]
 800d450:	4413      	add	r3, r2
 800d452:	3316      	adds	r3, #22
 800d454:	222e      	movs	r2, #46	; 0x2e
 800d456:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	1c5a      	adds	r2, r3, #1
 800d45c:	61ba      	str	r2, [r7, #24]
 800d45e:	683a      	ldr	r2, [r7, #0]
 800d460:	4413      	add	r3, r2
 800d462:	222e      	movs	r2, #46	; 0x2e
 800d464:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800d466:	683a      	ldr	r2, [r7, #0]
 800d468:	69bb      	ldr	r3, [r7, #24]
 800d46a:	4413      	add	r3, r2
 800d46c:	3309      	adds	r3, #9
 800d46e:	7dfa      	ldrb	r2, [r7, #23]
 800d470:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800d472:	89bb      	ldrh	r3, [r7, #12]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d11c      	bne.n	800d4b2 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d478:	7dfb      	ldrb	r3, [r7, #23]
 800d47a:	2b40      	cmp	r3, #64	; 0x40
 800d47c:	d913      	bls.n	800d4a6 <get_fileinfo+0x12e>
 800d47e:	7dfb      	ldrb	r3, [r7, #23]
 800d480:	2b5a      	cmp	r3, #90	; 0x5a
 800d482:	d810      	bhi.n	800d4a6 <get_fileinfo+0x12e>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6a1b      	ldr	r3, [r3, #32]
 800d488:	330c      	adds	r3, #12
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	461a      	mov	r2, r3
 800d48e:	69fb      	ldr	r3, [r7, #28]
 800d490:	2b08      	cmp	r3, #8
 800d492:	d901      	bls.n	800d498 <get_fileinfo+0x120>
 800d494:	2310      	movs	r3, #16
 800d496:	e000      	b.n	800d49a <get_fileinfo+0x122>
 800d498:	2308      	movs	r3, #8
 800d49a:	4013      	ands	r3, r2
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d002      	beq.n	800d4a6 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800d4a0:	7dfb      	ldrb	r3, [r7, #23]
 800d4a2:	3320      	adds	r3, #32
 800d4a4:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800d4a6:	683a      	ldr	r2, [r7, #0]
 800d4a8:	69bb      	ldr	r3, [r7, #24]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	3316      	adds	r3, #22
 800d4ae:	7dfa      	ldrb	r2, [r7, #23]
 800d4b0:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800d4b8:	69fb      	ldr	r3, [r7, #28]
 800d4ba:	2b0a      	cmp	r3, #10
 800d4bc:	d9af      	bls.n	800d41e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800d4be:	89bb      	ldrh	r3, [r7, #12]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d10d      	bne.n	800d4e0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800d4c4:	683a      	ldr	r2, [r7, #0]
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	4413      	add	r3, r2
 800d4ca:	3316      	adds	r3, #22
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6a1b      	ldr	r3, [r3, #32]
 800d4d4:	330c      	adds	r3, #12
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d101      	bne.n	800d4e0 <get_fileinfo+0x168>
 800d4dc:	2300      	movs	r3, #0
 800d4de:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800d4e0:	683a      	ldr	r2, [r7, #0]
 800d4e2:	69bb      	ldr	r3, [r7, #24]
 800d4e4:	4413      	add	r3, r2
 800d4e6:	3309      	adds	r3, #9
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6a1b      	ldr	r3, [r3, #32]
 800d4f0:	7ada      	ldrb	r2, [r3, #11]
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6a1b      	ldr	r3, [r3, #32]
 800d4fa:	331c      	adds	r3, #28
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7fe fb15 	bl	800bb2c <ld_dword>
 800d502:	4602      	mov	r2, r0
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6a1b      	ldr	r3, [r3, #32]
 800d50c:	3316      	adds	r3, #22
 800d50e:	4618      	mov	r0, r3
 800d510:	f7fe fb0c 	bl	800bb2c <ld_dword>
 800d514:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	b29a      	uxth	r2, r3
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	80da      	strh	r2, [r3, #6]
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	0c1b      	lsrs	r3, r3, #16
 800d522:	b29a      	uxth	r2, r3
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	809a      	strh	r2, [r3, #4]
 800d528:	e000      	b.n	800d52c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d52a:	bf00      	nop
}
 800d52c:	3720      	adds	r7, #32
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
	...

0800d534 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b08a      	sub	sp, #40	; 0x28
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	613b      	str	r3, [r7, #16]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	68db      	ldr	r3, [r3, #12]
 800d54a:	60fb      	str	r3, [r7, #12]
 800d54c:	2300      	movs	r3, #0
 800d54e:	617b      	str	r3, [r7, #20]
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d554:	69bb      	ldr	r3, [r7, #24]
 800d556:	1c5a      	adds	r2, r3, #1
 800d558:	61ba      	str	r2, [r7, #24]
 800d55a:	693a      	ldr	r2, [r7, #16]
 800d55c:	4413      	add	r3, r2
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d564:	2b1f      	cmp	r3, #31
 800d566:	d940      	bls.n	800d5ea <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d568:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d56a:	2b2f      	cmp	r3, #47	; 0x2f
 800d56c:	d006      	beq.n	800d57c <create_name+0x48>
 800d56e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d570:	2b5c      	cmp	r3, #92	; 0x5c
 800d572:	d110      	bne.n	800d596 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d574:	e002      	b.n	800d57c <create_name+0x48>
 800d576:	69bb      	ldr	r3, [r7, #24]
 800d578:	3301      	adds	r3, #1
 800d57a:	61bb      	str	r3, [r7, #24]
 800d57c:	693a      	ldr	r2, [r7, #16]
 800d57e:	69bb      	ldr	r3, [r7, #24]
 800d580:	4413      	add	r3, r2
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	2b2f      	cmp	r3, #47	; 0x2f
 800d586:	d0f6      	beq.n	800d576 <create_name+0x42>
 800d588:	693a      	ldr	r2, [r7, #16]
 800d58a:	69bb      	ldr	r3, [r7, #24]
 800d58c:	4413      	add	r3, r2
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	2b5c      	cmp	r3, #92	; 0x5c
 800d592:	d0f0      	beq.n	800d576 <create_name+0x42>
			break;
 800d594:	e02a      	b.n	800d5ec <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	2bfe      	cmp	r3, #254	; 0xfe
 800d59a:	d901      	bls.n	800d5a0 <create_name+0x6c>
 800d59c:	2306      	movs	r3, #6
 800d59e:	e17d      	b.n	800d89c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d5a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d5a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5a8:	2101      	movs	r1, #1
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f001 fc32 	bl	800ee14 <ff_convert>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d5b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d101      	bne.n	800d5be <create_name+0x8a>
 800d5ba:	2306      	movs	r3, #6
 800d5bc:	e16e      	b.n	800d89c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d5be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5c0:	2b7f      	cmp	r3, #127	; 0x7f
 800d5c2:	d809      	bhi.n	800d5d8 <create_name+0xa4>
 800d5c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	488d      	ldr	r0, [pc, #564]	; (800d800 <create_name+0x2cc>)
 800d5ca:	f7fe fb7c 	bl	800bcc6 <chk_chr>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d001      	beq.n	800d5d8 <create_name+0xa4>
 800d5d4:	2306      	movs	r3, #6
 800d5d6:	e161      	b.n	800d89c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	1c5a      	adds	r2, r3, #1
 800d5dc:	617a      	str	r2, [r7, #20]
 800d5de:	005b      	lsls	r3, r3, #1
 800d5e0:	68fa      	ldr	r2, [r7, #12]
 800d5e2:	4413      	add	r3, r2
 800d5e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d5e6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d5e8:	e7b4      	b.n	800d554 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d5ea:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d5ec:	693a      	ldr	r2, [r7, #16]
 800d5ee:	69bb      	ldr	r3, [r7, #24]
 800d5f0:	441a      	add	r2, r3
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d5f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5f8:	2b1f      	cmp	r3, #31
 800d5fa:	d801      	bhi.n	800d600 <create_name+0xcc>
 800d5fc:	2304      	movs	r3, #4
 800d5fe:	e000      	b.n	800d602 <create_name+0xce>
 800d600:	2300      	movs	r3, #0
 800d602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d606:	e011      	b.n	800d62c <create_name+0xf8>
		w = lfn[di - 1];
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d60e:	3b01      	subs	r3, #1
 800d610:	005b      	lsls	r3, r3, #1
 800d612:	68fa      	ldr	r2, [r7, #12]
 800d614:	4413      	add	r3, r2
 800d616:	881b      	ldrh	r3, [r3, #0]
 800d618:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d61a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d61c:	2b20      	cmp	r3, #32
 800d61e:	d002      	beq.n	800d626 <create_name+0xf2>
 800d620:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d622:	2b2e      	cmp	r3, #46	; 0x2e
 800d624:	d106      	bne.n	800d634 <create_name+0x100>
		di--;
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	3b01      	subs	r3, #1
 800d62a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d1ea      	bne.n	800d608 <create_name+0xd4>
 800d632:	e000      	b.n	800d636 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d634:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	005b      	lsls	r3, r3, #1
 800d63a:	68fa      	ldr	r2, [r7, #12]
 800d63c:	4413      	add	r3, r2
 800d63e:	2200      	movs	r2, #0
 800d640:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d101      	bne.n	800d64c <create_name+0x118>
 800d648:	2306      	movs	r3, #6
 800d64a:	e127      	b.n	800d89c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	3324      	adds	r3, #36	; 0x24
 800d650:	220b      	movs	r2, #11
 800d652:	2120      	movs	r1, #32
 800d654:	4618      	mov	r0, r3
 800d656:	f7fe faf4 	bl	800bc42 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d65a:	2300      	movs	r3, #0
 800d65c:	61bb      	str	r3, [r7, #24]
 800d65e:	e002      	b.n	800d666 <create_name+0x132>
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	3301      	adds	r3, #1
 800d664:	61bb      	str	r3, [r7, #24]
 800d666:	69bb      	ldr	r3, [r7, #24]
 800d668:	005b      	lsls	r3, r3, #1
 800d66a:	68fa      	ldr	r2, [r7, #12]
 800d66c:	4413      	add	r3, r2
 800d66e:	881b      	ldrh	r3, [r3, #0]
 800d670:	2b20      	cmp	r3, #32
 800d672:	d0f5      	beq.n	800d660 <create_name+0x12c>
 800d674:	69bb      	ldr	r3, [r7, #24]
 800d676:	005b      	lsls	r3, r3, #1
 800d678:	68fa      	ldr	r2, [r7, #12]
 800d67a:	4413      	add	r3, r2
 800d67c:	881b      	ldrh	r3, [r3, #0]
 800d67e:	2b2e      	cmp	r3, #46	; 0x2e
 800d680:	d0ee      	beq.n	800d660 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d682:	69bb      	ldr	r3, [r7, #24]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d009      	beq.n	800d69c <create_name+0x168>
 800d688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d68c:	f043 0303 	orr.w	r3, r3, #3
 800d690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d694:	e002      	b.n	800d69c <create_name+0x168>
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	3b01      	subs	r3, #1
 800d69a:	617b      	str	r3, [r7, #20]
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d009      	beq.n	800d6b6 <create_name+0x182>
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d6a8:	3b01      	subs	r3, #1
 800d6aa:	005b      	lsls	r3, r3, #1
 800d6ac:	68fa      	ldr	r2, [r7, #12]
 800d6ae:	4413      	add	r3, r2
 800d6b0:	881b      	ldrh	r3, [r3, #0]
 800d6b2:	2b2e      	cmp	r3, #46	; 0x2e
 800d6b4:	d1ef      	bne.n	800d696 <create_name+0x162>

	i = b = 0; ni = 8;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d6bc:	2300      	movs	r3, #0
 800d6be:	623b      	str	r3, [r7, #32]
 800d6c0:	2308      	movs	r3, #8
 800d6c2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d6c4:	69bb      	ldr	r3, [r7, #24]
 800d6c6:	1c5a      	adds	r2, r3, #1
 800d6c8:	61ba      	str	r2, [r7, #24]
 800d6ca:	005b      	lsls	r3, r3, #1
 800d6cc:	68fa      	ldr	r2, [r7, #12]
 800d6ce:	4413      	add	r3, r2
 800d6d0:	881b      	ldrh	r3, [r3, #0]
 800d6d2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d6d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	f000 8090 	beq.w	800d7fc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d6dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6de:	2b20      	cmp	r3, #32
 800d6e0:	d006      	beq.n	800d6f0 <create_name+0x1bc>
 800d6e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6e4:	2b2e      	cmp	r3, #46	; 0x2e
 800d6e6:	d10a      	bne.n	800d6fe <create_name+0x1ca>
 800d6e8:	69ba      	ldr	r2, [r7, #24]
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d006      	beq.n	800d6fe <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d6f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6f4:	f043 0303 	orr.w	r3, r3, #3
 800d6f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d6fc:	e07d      	b.n	800d7fa <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d6fe:	6a3a      	ldr	r2, [r7, #32]
 800d700:	69fb      	ldr	r3, [r7, #28]
 800d702:	429a      	cmp	r2, r3
 800d704:	d203      	bcs.n	800d70e <create_name+0x1da>
 800d706:	69ba      	ldr	r2, [r7, #24]
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d123      	bne.n	800d756 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d70e:	69fb      	ldr	r3, [r7, #28]
 800d710:	2b0b      	cmp	r3, #11
 800d712:	d106      	bne.n	800d722 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d718:	f043 0303 	orr.w	r3, r3, #3
 800d71c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d720:	e075      	b.n	800d80e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d722:	69ba      	ldr	r2, [r7, #24]
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	429a      	cmp	r2, r3
 800d728:	d005      	beq.n	800d736 <create_name+0x202>
 800d72a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d72e:	f043 0303 	orr.w	r3, r3, #3
 800d732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d736:	69ba      	ldr	r2, [r7, #24]
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d866      	bhi.n	800d80c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d73e:	697b      	ldr	r3, [r7, #20]
 800d740:	61bb      	str	r3, [r7, #24]
 800d742:	2308      	movs	r3, #8
 800d744:	623b      	str	r3, [r7, #32]
 800d746:	230b      	movs	r3, #11
 800d748:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d74a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d754:	e051      	b.n	800d7fa <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d756:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d758:	2b7f      	cmp	r3, #127	; 0x7f
 800d75a:	d914      	bls.n	800d786 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d75c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d75e:	2100      	movs	r1, #0
 800d760:	4618      	mov	r0, r3
 800d762:	f001 fb57 	bl	800ee14 <ff_convert>
 800d766:	4603      	mov	r3, r0
 800d768:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d76a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d004      	beq.n	800d77a <create_name+0x246>
 800d770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d772:	3b80      	subs	r3, #128	; 0x80
 800d774:	4a23      	ldr	r2, [pc, #140]	; (800d804 <create_name+0x2d0>)
 800d776:	5cd3      	ldrb	r3, [r2, r3]
 800d778:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d77a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d77e:	f043 0302 	orr.w	r3, r3, #2
 800d782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d786:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d007      	beq.n	800d79c <create_name+0x268>
 800d78c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d78e:	4619      	mov	r1, r3
 800d790:	481d      	ldr	r0, [pc, #116]	; (800d808 <create_name+0x2d4>)
 800d792:	f7fe fa98 	bl	800bcc6 <chk_chr>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d008      	beq.n	800d7ae <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d79c:	235f      	movs	r3, #95	; 0x5f
 800d79e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d7a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7a4:	f043 0303 	orr.w	r3, r3, #3
 800d7a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d7ac:	e01b      	b.n	800d7e6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d7ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7b0:	2b40      	cmp	r3, #64	; 0x40
 800d7b2:	d909      	bls.n	800d7c8 <create_name+0x294>
 800d7b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7b6:	2b5a      	cmp	r3, #90	; 0x5a
 800d7b8:	d806      	bhi.n	800d7c8 <create_name+0x294>
					b |= 2;
 800d7ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d7be:	f043 0302 	orr.w	r3, r3, #2
 800d7c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d7c6:	e00e      	b.n	800d7e6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d7c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7ca:	2b60      	cmp	r3, #96	; 0x60
 800d7cc:	d90b      	bls.n	800d7e6 <create_name+0x2b2>
 800d7ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7d0:	2b7a      	cmp	r3, #122	; 0x7a
 800d7d2:	d808      	bhi.n	800d7e6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d7d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d7d8:	f043 0301 	orr.w	r3, r3, #1
 800d7dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d7e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7e2:	3b20      	subs	r3, #32
 800d7e4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d7e6:	6a3b      	ldr	r3, [r7, #32]
 800d7e8:	1c5a      	adds	r2, r3, #1
 800d7ea:	623a      	str	r2, [r7, #32]
 800d7ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d7ee:	b2d1      	uxtb	r1, r2
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	4413      	add	r3, r2
 800d7f4:	460a      	mov	r2, r1
 800d7f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d7fa:	e763      	b.n	800d6c4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d7fc:	bf00      	nop
 800d7fe:	e006      	b.n	800d80e <create_name+0x2da>
 800d800:	0800f93c 	.word	0x0800f93c
 800d804:	0800fa18 	.word	0x0800fa18
 800d808:	0800f948 	.word	0x0800f948
			if (si > di) break;			/* No extension */
 800d80c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d814:	2be5      	cmp	r3, #229	; 0xe5
 800d816:	d103      	bne.n	800d820 <create_name+0x2ec>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2205      	movs	r2, #5
 800d81c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	2b08      	cmp	r3, #8
 800d824:	d104      	bne.n	800d830 <create_name+0x2fc>
 800d826:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d830:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d834:	f003 030c 	and.w	r3, r3, #12
 800d838:	2b0c      	cmp	r3, #12
 800d83a:	d005      	beq.n	800d848 <create_name+0x314>
 800d83c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d840:	f003 0303 	and.w	r3, r3, #3
 800d844:	2b03      	cmp	r3, #3
 800d846:	d105      	bne.n	800d854 <create_name+0x320>
 800d848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d84c:	f043 0302 	orr.w	r3, r3, #2
 800d850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d858:	f003 0302 	and.w	r3, r3, #2
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d117      	bne.n	800d890 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d860:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d864:	f003 0303 	and.w	r3, r3, #3
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d105      	bne.n	800d878 <create_name+0x344>
 800d86c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d870:	f043 0310 	orr.w	r3, r3, #16
 800d874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d878:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d87c:	f003 030c 	and.w	r3, r3, #12
 800d880:	2b04      	cmp	r3, #4
 800d882:	d105      	bne.n	800d890 <create_name+0x35c>
 800d884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d888:	f043 0308 	orr.w	r3, r3, #8
 800d88c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d896:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d89a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3728      	adds	r7, #40	; 0x28
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b086      	sub	sp, #24
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d8b8:	e002      	b.n	800d8c0 <follow_path+0x1c>
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	3301      	adds	r3, #1
 800d8be:	603b      	str	r3, [r7, #0]
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	781b      	ldrb	r3, [r3, #0]
 800d8c4:	2b2f      	cmp	r3, #47	; 0x2f
 800d8c6:	d0f8      	beq.n	800d8ba <follow_path+0x16>
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	2b5c      	cmp	r3, #92	; 0x5c
 800d8ce:	d0f4      	beq.n	800d8ba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	781b      	ldrb	r3, [r3, #0]
 800d8da:	2b1f      	cmp	r3, #31
 800d8dc:	d80a      	bhi.n	800d8f4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2280      	movs	r2, #128	; 0x80
 800d8e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d8e6:	2100      	movs	r1, #0
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f7fe ff35 	bl	800c758 <dir_sdi>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	75fb      	strb	r3, [r7, #23]
 800d8f2:	e043      	b.n	800d97c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d8f4:	463b      	mov	r3, r7
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f7ff fe1b 	bl	800d534 <create_name>
 800d8fe:	4603      	mov	r3, r0
 800d900:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d902:	7dfb      	ldrb	r3, [r7, #23]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d134      	bne.n	800d972 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f7ff fb7d 	bl	800d008 <dir_find>
 800d90e:	4603      	mov	r3, r0
 800d910:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d918:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d91a:	7dfb      	ldrb	r3, [r7, #23]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d00a      	beq.n	800d936 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d920:	7dfb      	ldrb	r3, [r7, #23]
 800d922:	2b04      	cmp	r3, #4
 800d924:	d127      	bne.n	800d976 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d926:	7afb      	ldrb	r3, [r7, #11]
 800d928:	f003 0304 	and.w	r3, r3, #4
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d122      	bne.n	800d976 <follow_path+0xd2>
 800d930:	2305      	movs	r3, #5
 800d932:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d934:	e01f      	b.n	800d976 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d936:	7afb      	ldrb	r3, [r7, #11]
 800d938:	f003 0304 	and.w	r3, r3, #4
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d11c      	bne.n	800d97a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	799b      	ldrb	r3, [r3, #6]
 800d944:	f003 0310 	and.w	r3, r3, #16
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d102      	bne.n	800d952 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d94c:	2305      	movs	r3, #5
 800d94e:	75fb      	strb	r3, [r7, #23]
 800d950:	e014      	b.n	800d97c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	695b      	ldr	r3, [r3, #20]
 800d95c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d960:	4413      	add	r3, r2
 800d962:	4619      	mov	r1, r3
 800d964:	68f8      	ldr	r0, [r7, #12]
 800d966:	f7ff f87e 	bl	800ca66 <ld_clust>
 800d96a:	4602      	mov	r2, r0
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d970:	e7c0      	b.n	800d8f4 <follow_path+0x50>
			if (res != FR_OK) break;
 800d972:	bf00      	nop
 800d974:	e002      	b.n	800d97c <follow_path+0xd8>
				break;
 800d976:	bf00      	nop
 800d978:	e000      	b.n	800d97c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d97a:	bf00      	nop
			}
		}
	}

	return res;
 800d97c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3718      	adds	r7, #24
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}

0800d986 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d986:	b480      	push	{r7}
 800d988:	b087      	sub	sp, #28
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d98e:	f04f 33ff 	mov.w	r3, #4294967295
 800d992:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d031      	beq.n	800da00 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	617b      	str	r3, [r7, #20]
 800d9a2:	e002      	b.n	800d9aa <get_ldnumber+0x24>
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	617b      	str	r3, [r7, #20]
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	2b1f      	cmp	r3, #31
 800d9b0:	d903      	bls.n	800d9ba <get_ldnumber+0x34>
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	2b3a      	cmp	r3, #58	; 0x3a
 800d9b8:	d1f4      	bne.n	800d9a4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	2b3a      	cmp	r3, #58	; 0x3a
 800d9c0:	d11c      	bne.n	800d9fc <get_ldnumber+0x76>
			tp = *path;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	1c5a      	adds	r2, r3, #1
 800d9cc:	60fa      	str	r2, [r7, #12]
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	3b30      	subs	r3, #48	; 0x30
 800d9d2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	2b09      	cmp	r3, #9
 800d9d8:	d80e      	bhi.n	800d9f8 <get_ldnumber+0x72>
 800d9da:	68fa      	ldr	r2, [r7, #12]
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d10a      	bne.n	800d9f8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d107      	bne.n	800d9f8 <get_ldnumber+0x72>
					vol = (int)i;
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	617b      	str	r3, [r7, #20]
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	697a      	ldr	r2, [r7, #20]
 800d9f6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	e002      	b.n	800da02 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800da00:	693b      	ldr	r3, [r7, #16]
}
 800da02:	4618      	mov	r0, r3
 800da04:	371c      	adds	r7, #28
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr
	...

0800da10 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b082      	sub	sp, #8
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2200      	movs	r2, #0
 800da1e:	70da      	strb	r2, [r3, #3]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f04f 32ff 	mov.w	r2, #4294967295
 800da26:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800da28:	6839      	ldr	r1, [r7, #0]
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f7fe fb16 	bl	800c05c <move_window>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	d001      	beq.n	800da3a <check_fs+0x2a>
 800da36:	2304      	movs	r3, #4
 800da38:	e038      	b.n	800daac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	3334      	adds	r3, #52	; 0x34
 800da3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800da42:	4618      	mov	r0, r3
 800da44:	f7fe f85a 	bl	800bafc <ld_word>
 800da48:	4603      	mov	r3, r0
 800da4a:	461a      	mov	r2, r3
 800da4c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800da50:	429a      	cmp	r2, r3
 800da52:	d001      	beq.n	800da58 <check_fs+0x48>
 800da54:	2303      	movs	r3, #3
 800da56:	e029      	b.n	800daac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da5e:	2be9      	cmp	r3, #233	; 0xe9
 800da60:	d009      	beq.n	800da76 <check_fs+0x66>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da68:	2beb      	cmp	r3, #235	; 0xeb
 800da6a:	d11e      	bne.n	800daaa <check_fs+0x9a>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800da72:	2b90      	cmp	r3, #144	; 0x90
 800da74:	d119      	bne.n	800daaa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	3334      	adds	r3, #52	; 0x34
 800da7a:	3336      	adds	r3, #54	; 0x36
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7fe f855 	bl	800bb2c <ld_dword>
 800da82:	4603      	mov	r3, r0
 800da84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800da88:	4a0a      	ldr	r2, [pc, #40]	; (800dab4 <check_fs+0xa4>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d101      	bne.n	800da92 <check_fs+0x82>
 800da8e:	2300      	movs	r3, #0
 800da90:	e00c      	b.n	800daac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	3334      	adds	r3, #52	; 0x34
 800da96:	3352      	adds	r3, #82	; 0x52
 800da98:	4618      	mov	r0, r3
 800da9a:	f7fe f847 	bl	800bb2c <ld_dword>
 800da9e:	4603      	mov	r3, r0
 800daa0:	4a05      	ldr	r2, [pc, #20]	; (800dab8 <check_fs+0xa8>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d101      	bne.n	800daaa <check_fs+0x9a>
 800daa6:	2300      	movs	r3, #0
 800daa8:	e000      	b.n	800daac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800daaa:	2302      	movs	r3, #2
}
 800daac:	4618      	mov	r0, r3
 800daae:	3708      	adds	r7, #8
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}
 800dab4:	00544146 	.word	0x00544146
 800dab8:	33544146 	.word	0x33544146

0800dabc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b096      	sub	sp, #88	; 0x58
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	60f8      	str	r0, [r7, #12]
 800dac4:	60b9      	str	r1, [r7, #8]
 800dac6:	4613      	mov	r3, r2
 800dac8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	2200      	movs	r2, #0
 800dace:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dad0:	68f8      	ldr	r0, [r7, #12]
 800dad2:	f7ff ff58 	bl	800d986 <get_ldnumber>
 800dad6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dada:	2b00      	cmp	r3, #0
 800dadc:	da01      	bge.n	800dae2 <find_volume+0x26>
 800dade:	230b      	movs	r3, #11
 800dae0:	e230      	b.n	800df44 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dae2:	4aa1      	ldr	r2, [pc, #644]	; (800dd68 <find_volume+0x2ac>)
 800dae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800daec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d101      	bne.n	800daf6 <find_volume+0x3a>
 800daf2:	230c      	movs	r3, #12
 800daf4:	e226      	b.n	800df44 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dafa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dafc:	79fb      	ldrb	r3, [r7, #7]
 800dafe:	f023 0301 	bic.w	r3, r3, #1
 800db02:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800db04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d01a      	beq.n	800db42 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800db0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db0e:	785b      	ldrb	r3, [r3, #1]
 800db10:	4618      	mov	r0, r3
 800db12:	f7fd ff55 	bl	800b9c0 <disk_status>
 800db16:	4603      	mov	r3, r0
 800db18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800db1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db20:	f003 0301 	and.w	r3, r3, #1
 800db24:	2b00      	cmp	r3, #0
 800db26:	d10c      	bne.n	800db42 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800db28:	79fb      	ldrb	r3, [r7, #7]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d007      	beq.n	800db3e <find_volume+0x82>
 800db2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db32:	f003 0304 	and.w	r3, r3, #4
 800db36:	2b00      	cmp	r3, #0
 800db38:	d001      	beq.n	800db3e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800db3a:	230a      	movs	r3, #10
 800db3c:	e202      	b.n	800df44 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800db3e:	2300      	movs	r3, #0
 800db40:	e200      	b.n	800df44 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800db42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db44:	2200      	movs	r2, #0
 800db46:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800db48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db4a:	b2da      	uxtb	r2, r3
 800db4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db4e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800db50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db52:	785b      	ldrb	r3, [r3, #1]
 800db54:	4618      	mov	r0, r3
 800db56:	f7fd ff4d 	bl	800b9f4 <disk_initialize>
 800db5a:	4603      	mov	r3, r0
 800db5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800db60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db64:	f003 0301 	and.w	r3, r3, #1
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d001      	beq.n	800db70 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800db6c:	2303      	movs	r3, #3
 800db6e:	e1e9      	b.n	800df44 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800db70:	79fb      	ldrb	r3, [r7, #7]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d007      	beq.n	800db86 <find_volume+0xca>
 800db76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db7a:	f003 0304 	and.w	r3, r3, #4
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d001      	beq.n	800db86 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800db82:	230a      	movs	r3, #10
 800db84:	e1de      	b.n	800df44 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800db86:	2300      	movs	r3, #0
 800db88:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800db8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800db8e:	f7ff ff3f 	bl	800da10 <check_fs>
 800db92:	4603      	mov	r3, r0
 800db94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800db98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db9c:	2b02      	cmp	r3, #2
 800db9e:	d149      	bne.n	800dc34 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dba0:	2300      	movs	r3, #0
 800dba2:	643b      	str	r3, [r7, #64]	; 0x40
 800dba4:	e01e      	b.n	800dbe4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dbac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbae:	011b      	lsls	r3, r3, #4
 800dbb0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800dbb4:	4413      	add	r3, r2
 800dbb6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbba:	3304      	adds	r3, #4
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d006      	beq.n	800dbd0 <find_volume+0x114>
 800dbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc4:	3308      	adds	r3, #8
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7fd ffb0 	bl	800bb2c <ld_dword>
 800dbcc:	4602      	mov	r2, r0
 800dbce:	e000      	b.n	800dbd2 <find_volume+0x116>
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbd4:	009b      	lsls	r3, r3, #2
 800dbd6:	3358      	adds	r3, #88	; 0x58
 800dbd8:	443b      	add	r3, r7
 800dbda:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dbde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	643b      	str	r3, [r7, #64]	; 0x40
 800dbe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbe6:	2b03      	cmp	r3, #3
 800dbe8:	d9dd      	bls.n	800dba6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dbea:	2300      	movs	r3, #0
 800dbec:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800dbee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d002      	beq.n	800dbfa <find_volume+0x13e>
 800dbf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbf6:	3b01      	subs	r3, #1
 800dbf8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dbfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbfc:	009b      	lsls	r3, r3, #2
 800dbfe:	3358      	adds	r3, #88	; 0x58
 800dc00:	443b      	add	r3, r7
 800dc02:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dc06:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dc08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d005      	beq.n	800dc1a <find_volume+0x15e>
 800dc0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dc12:	f7ff fefd 	bl	800da10 <check_fs>
 800dc16:	4603      	mov	r3, r0
 800dc18:	e000      	b.n	800dc1c <find_volume+0x160>
 800dc1a:	2303      	movs	r3, #3
 800dc1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dc20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d905      	bls.n	800dc34 <find_volume+0x178>
 800dc28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	643b      	str	r3, [r7, #64]	; 0x40
 800dc2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc30:	2b03      	cmp	r3, #3
 800dc32:	d9e2      	bls.n	800dbfa <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dc34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc38:	2b04      	cmp	r3, #4
 800dc3a:	d101      	bne.n	800dc40 <find_volume+0x184>
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	e181      	b.n	800df44 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dc40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc44:	2b01      	cmp	r3, #1
 800dc46:	d901      	bls.n	800dc4c <find_volume+0x190>
 800dc48:	230d      	movs	r3, #13
 800dc4a:	e17b      	b.n	800df44 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4e:	3334      	adds	r3, #52	; 0x34
 800dc50:	330b      	adds	r3, #11
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7fd ff52 	bl	800bafc <ld_word>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc5e:	d001      	beq.n	800dc64 <find_volume+0x1a8>
 800dc60:	230d      	movs	r3, #13
 800dc62:	e16f      	b.n	800df44 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc66:	3334      	adds	r3, #52	; 0x34
 800dc68:	3316      	adds	r3, #22
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7fd ff46 	bl	800bafc <ld_word>
 800dc70:	4603      	mov	r3, r0
 800dc72:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dc74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d106      	bne.n	800dc88 <find_volume+0x1cc>
 800dc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc7c:	3334      	adds	r3, #52	; 0x34
 800dc7e:	3324      	adds	r3, #36	; 0x24
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7fd ff53 	bl	800bb2c <ld_dword>
 800dc86:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800dc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc8c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc90:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800dc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc96:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc9a:	789b      	ldrb	r3, [r3, #2]
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	d005      	beq.n	800dcac <find_volume+0x1f0>
 800dca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca2:	789b      	ldrb	r3, [r3, #2]
 800dca4:	2b02      	cmp	r3, #2
 800dca6:	d001      	beq.n	800dcac <find_volume+0x1f0>
 800dca8:	230d      	movs	r3, #13
 800dcaa:	e14b      	b.n	800df44 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcae:	789b      	ldrb	r3, [r3, #2]
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcb4:	fb02 f303 	mul.w	r3, r2, r3
 800dcb8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800dcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcc0:	b29a      	uxth	r2, r3
 800dcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800dcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc8:	895b      	ldrh	r3, [r3, #10]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d008      	beq.n	800dce0 <find_volume+0x224>
 800dcce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd0:	895b      	ldrh	r3, [r3, #10]
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd6:	895b      	ldrh	r3, [r3, #10]
 800dcd8:	3b01      	subs	r3, #1
 800dcda:	4013      	ands	r3, r2
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d001      	beq.n	800dce4 <find_volume+0x228>
 800dce0:	230d      	movs	r3, #13
 800dce2:	e12f      	b.n	800df44 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce6:	3334      	adds	r3, #52	; 0x34
 800dce8:	3311      	adds	r3, #17
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7fd ff06 	bl	800bafc <ld_word>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dcf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcfa:	891b      	ldrh	r3, [r3, #8]
 800dcfc:	f003 030f 	and.w	r3, r3, #15
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d001      	beq.n	800dd0a <find_volume+0x24e>
 800dd06:	230d      	movs	r3, #13
 800dd08:	e11c      	b.n	800df44 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd0c:	3334      	adds	r3, #52	; 0x34
 800dd0e:	3313      	adds	r3, #19
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7fd fef3 	bl	800bafc <ld_word>
 800dd16:	4603      	mov	r3, r0
 800dd18:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800dd1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d106      	bne.n	800dd2e <find_volume+0x272>
 800dd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd22:	3334      	adds	r3, #52	; 0x34
 800dd24:	3320      	adds	r3, #32
 800dd26:	4618      	mov	r0, r3
 800dd28:	f7fd ff00 	bl	800bb2c <ld_dword>
 800dd2c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd30:	3334      	adds	r3, #52	; 0x34
 800dd32:	330e      	adds	r3, #14
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7fd fee1 	bl	800bafc <ld_word>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dd3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d101      	bne.n	800dd48 <find_volume+0x28c>
 800dd44:	230d      	movs	r3, #13
 800dd46:	e0fd      	b.n	800df44 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dd48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dd4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd4c:	4413      	add	r3, r2
 800dd4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd50:	8912      	ldrh	r2, [r2, #8]
 800dd52:	0912      	lsrs	r2, r2, #4
 800dd54:	b292      	uxth	r2, r2
 800dd56:	4413      	add	r3, r2
 800dd58:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800dd5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d204      	bcs.n	800dd6c <find_volume+0x2b0>
 800dd62:	230d      	movs	r3, #13
 800dd64:	e0ee      	b.n	800df44 <find_volume+0x488>
 800dd66:	bf00      	nop
 800dd68:	20001bb8 	.word	0x20001bb8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800dd6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd70:	1ad3      	subs	r3, r2, r3
 800dd72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd74:	8952      	ldrh	r2, [r2, #10]
 800dd76:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd7a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800dd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d101      	bne.n	800dd86 <find_volume+0x2ca>
 800dd82:	230d      	movs	r3, #13
 800dd84:	e0de      	b.n	800df44 <find_volume+0x488>
		fmt = FS_FAT32;
 800dd86:	2303      	movs	r3, #3
 800dd88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800dd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd8e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d802      	bhi.n	800dd9c <find_volume+0x2e0>
 800dd96:	2302      	movs	r3, #2
 800dd98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800dd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd9e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d802      	bhi.n	800ddac <find_volume+0x2f0>
 800dda6:	2301      	movs	r3, #1
 800dda8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ddac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddae:	1c9a      	adds	r2, r3, #2
 800ddb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ddb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ddb8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ddba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ddbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddbe:	441a      	add	r2, r3
 800ddc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddc2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ddc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ddc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc8:	441a      	add	r2, r3
 800ddca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddcc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ddce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ddd2:	2b03      	cmp	r3, #3
 800ddd4:	d11e      	bne.n	800de14 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ddd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd8:	3334      	adds	r3, #52	; 0x34
 800ddda:	332a      	adds	r3, #42	; 0x2a
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7fd fe8d 	bl	800bafc <ld_word>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d001      	beq.n	800ddec <find_volume+0x330>
 800dde8:	230d      	movs	r3, #13
 800ddea:	e0ab      	b.n	800df44 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ddec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddee:	891b      	ldrh	r3, [r3, #8]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d001      	beq.n	800ddf8 <find_volume+0x33c>
 800ddf4:	230d      	movs	r3, #13
 800ddf6:	e0a5      	b.n	800df44 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ddf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddfa:	3334      	adds	r3, #52	; 0x34
 800ddfc:	332c      	adds	r3, #44	; 0x2c
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7fd fe94 	bl	800bb2c <ld_dword>
 800de04:	4602      	mov	r2, r0
 800de06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de08:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800de0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de0c:	699b      	ldr	r3, [r3, #24]
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	647b      	str	r3, [r7, #68]	; 0x44
 800de12:	e01f      	b.n	800de54 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800de14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de16:	891b      	ldrh	r3, [r3, #8]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d101      	bne.n	800de20 <find_volume+0x364>
 800de1c:	230d      	movs	r3, #13
 800de1e:	e091      	b.n	800df44 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800de20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de26:	441a      	add	r2, r3
 800de28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800de2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de30:	2b02      	cmp	r3, #2
 800de32:	d103      	bne.n	800de3c <find_volume+0x380>
 800de34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de36:	699b      	ldr	r3, [r3, #24]
 800de38:	005b      	lsls	r3, r3, #1
 800de3a:	e00a      	b.n	800de52 <find_volume+0x396>
 800de3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de3e:	699a      	ldr	r2, [r3, #24]
 800de40:	4613      	mov	r3, r2
 800de42:	005b      	lsls	r3, r3, #1
 800de44:	4413      	add	r3, r2
 800de46:	085a      	lsrs	r2, r3, #1
 800de48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de4a:	699b      	ldr	r3, [r3, #24]
 800de4c:	f003 0301 	and.w	r3, r3, #1
 800de50:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800de52:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800de54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de56:	69da      	ldr	r2, [r3, #28]
 800de58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de5a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800de5e:	0a5b      	lsrs	r3, r3, #9
 800de60:	429a      	cmp	r2, r3
 800de62:	d201      	bcs.n	800de68 <find_volume+0x3ac>
 800de64:	230d      	movs	r3, #13
 800de66:	e06d      	b.n	800df44 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800de68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de6a:	f04f 32ff 	mov.w	r2, #4294967295
 800de6e:	615a      	str	r2, [r3, #20]
 800de70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de72:	695a      	ldr	r2, [r3, #20]
 800de74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de76:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800de78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de7a:	2280      	movs	r2, #128	; 0x80
 800de7c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800de7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de82:	2b03      	cmp	r3, #3
 800de84:	d149      	bne.n	800df1a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800de86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de88:	3334      	adds	r3, #52	; 0x34
 800de8a:	3330      	adds	r3, #48	; 0x30
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7fd fe35 	bl	800bafc <ld_word>
 800de92:	4603      	mov	r3, r0
 800de94:	2b01      	cmp	r3, #1
 800de96:	d140      	bne.n	800df1a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800de98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de9a:	3301      	adds	r3, #1
 800de9c:	4619      	mov	r1, r3
 800de9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dea0:	f7fe f8dc 	bl	800c05c <move_window>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d137      	bne.n	800df1a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800deaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deac:	2200      	movs	r2, #0
 800deae:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800deb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb2:	3334      	adds	r3, #52	; 0x34
 800deb4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800deb8:	4618      	mov	r0, r3
 800deba:	f7fd fe1f 	bl	800bafc <ld_word>
 800debe:	4603      	mov	r3, r0
 800dec0:	461a      	mov	r2, r3
 800dec2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d127      	bne.n	800df1a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800deca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800decc:	3334      	adds	r3, #52	; 0x34
 800dece:	4618      	mov	r0, r3
 800ded0:	f7fd fe2c 	bl	800bb2c <ld_dword>
 800ded4:	4603      	mov	r3, r0
 800ded6:	4a1d      	ldr	r2, [pc, #116]	; (800df4c <find_volume+0x490>)
 800ded8:	4293      	cmp	r3, r2
 800deda:	d11e      	bne.n	800df1a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dede:	3334      	adds	r3, #52	; 0x34
 800dee0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7fd fe21 	bl	800bb2c <ld_dword>
 800deea:	4603      	mov	r3, r0
 800deec:	4a18      	ldr	r2, [pc, #96]	; (800df50 <find_volume+0x494>)
 800deee:	4293      	cmp	r3, r2
 800def0:	d113      	bne.n	800df1a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800def2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def4:	3334      	adds	r3, #52	; 0x34
 800def6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800defa:	4618      	mov	r0, r3
 800defc:	f7fd fe16 	bl	800bb2c <ld_dword>
 800df00:	4602      	mov	r2, r0
 800df02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df04:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800df06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df08:	3334      	adds	r3, #52	; 0x34
 800df0a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800df0e:	4618      	mov	r0, r3
 800df10:	f7fd fe0c 	bl	800bb2c <ld_dword>
 800df14:	4602      	mov	r2, r0
 800df16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df18:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800df1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df1c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800df20:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800df22:	4b0c      	ldr	r3, [pc, #48]	; (800df54 <find_volume+0x498>)
 800df24:	881b      	ldrh	r3, [r3, #0]
 800df26:	3301      	adds	r3, #1
 800df28:	b29a      	uxth	r2, r3
 800df2a:	4b0a      	ldr	r3, [pc, #40]	; (800df54 <find_volume+0x498>)
 800df2c:	801a      	strh	r2, [r3, #0]
 800df2e:	4b09      	ldr	r3, [pc, #36]	; (800df54 <find_volume+0x498>)
 800df30:	881a      	ldrh	r2, [r3, #0]
 800df32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df34:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800df36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df38:	4a07      	ldr	r2, [pc, #28]	; (800df58 <find_volume+0x49c>)
 800df3a:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800df3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800df3e:	f7fe f825 	bl	800bf8c <clear_lock>
#endif
	return FR_OK;
 800df42:	2300      	movs	r3, #0
}
 800df44:	4618      	mov	r0, r3
 800df46:	3758      	adds	r7, #88	; 0x58
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}
 800df4c:	41615252 	.word	0x41615252
 800df50:	61417272 	.word	0x61417272
 800df54:	20001bbc 	.word	0x20001bbc
 800df58:	20001be0 	.word	0x20001be0

0800df5c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b084      	sub	sp, #16
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800df66:	2309      	movs	r3, #9
 800df68:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d01c      	beq.n	800dfaa <validate+0x4e>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d018      	beq.n	800dfaa <validate+0x4e>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d013      	beq.n	800dfaa <validate+0x4e>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	889a      	ldrh	r2, [r3, #4]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	88db      	ldrh	r3, [r3, #6]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d10c      	bne.n	800dfaa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	785b      	ldrb	r3, [r3, #1]
 800df96:	4618      	mov	r0, r3
 800df98:	f7fd fd12 	bl	800b9c0 <disk_status>
 800df9c:	4603      	mov	r3, r0
 800df9e:	f003 0301 	and.w	r3, r3, #1
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d101      	bne.n	800dfaa <validate+0x4e>
			res = FR_OK;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dfaa:	7bfb      	ldrb	r3, [r7, #15]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d102      	bne.n	800dfb6 <validate+0x5a>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	e000      	b.n	800dfb8 <validate+0x5c>
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	683a      	ldr	r2, [r7, #0]
 800dfba:	6013      	str	r3, [r2, #0]
	return res;
 800dfbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3710      	adds	r7, #16
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
	...

0800dfc8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b088      	sub	sp, #32
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	4613      	mov	r3, r2
 800dfd4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800dfda:	f107 0310 	add.w	r3, r7, #16
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7ff fcd1 	bl	800d986 <get_ldnumber>
 800dfe4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800dfe6:	69fb      	ldr	r3, [r7, #28]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	da01      	bge.n	800dff0 <f_mount+0x28>
 800dfec:	230b      	movs	r3, #11
 800dfee:	e02b      	b.n	800e048 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dff0:	4a17      	ldr	r2, [pc, #92]	; (800e050 <f_mount+0x88>)
 800dff2:	69fb      	ldr	r3, [r7, #28]
 800dff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dff8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800dffa:	69bb      	ldr	r3, [r7, #24]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d005      	beq.n	800e00c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e000:	69b8      	ldr	r0, [r7, #24]
 800e002:	f7fd ffc3 	bl	800bf8c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e006:	69bb      	ldr	r3, [r7, #24]
 800e008:	2200      	movs	r2, #0
 800e00a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d002      	beq.n	800e018 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2200      	movs	r2, #0
 800e016:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e018:	68fa      	ldr	r2, [r7, #12]
 800e01a:	490d      	ldr	r1, [pc, #52]	; (800e050 <f_mount+0x88>)
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d002      	beq.n	800e02e <f_mount+0x66>
 800e028:	79fb      	ldrb	r3, [r7, #7]
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	d001      	beq.n	800e032 <f_mount+0x6a>
 800e02e:	2300      	movs	r3, #0
 800e030:	e00a      	b.n	800e048 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e032:	f107 010c 	add.w	r1, r7, #12
 800e036:	f107 0308 	add.w	r3, r7, #8
 800e03a:	2200      	movs	r2, #0
 800e03c:	4618      	mov	r0, r3
 800e03e:	f7ff fd3d 	bl	800dabc <find_volume>
 800e042:	4603      	mov	r3, r0
 800e044:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e046:	7dfb      	ldrb	r3, [r7, #23]
}
 800e048:	4618      	mov	r0, r3
 800e04a:	3720      	adds	r7, #32
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}
 800e050:	20001bb8 	.word	0x20001bb8

0800e054 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b09a      	sub	sp, #104	; 0x68
 800e058:	af00      	add	r7, sp, #0
 800e05a:	60f8      	str	r0, [r7, #12]
 800e05c:	60b9      	str	r1, [r7, #8]
 800e05e:	4613      	mov	r3, r2
 800e060:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d101      	bne.n	800e06c <f_open+0x18>
 800e068:	2309      	movs	r3, #9
 800e06a:	e1ad      	b.n	800e3c8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e06c:	79fb      	ldrb	r3, [r7, #7]
 800e06e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e072:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e074:	79fa      	ldrb	r2, [r7, #7]
 800e076:	f107 0114 	add.w	r1, r7, #20
 800e07a:	f107 0308 	add.w	r3, r7, #8
 800e07e:	4618      	mov	r0, r3
 800e080:	f7ff fd1c 	bl	800dabc <find_volume>
 800e084:	4603      	mov	r3, r0
 800e086:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e08a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e08e:	2b00      	cmp	r3, #0
 800e090:	f040 8191 	bne.w	800e3b6 <f_open+0x362>
		dj.obj.fs = fs;
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e098:	68ba      	ldr	r2, [r7, #8]
 800e09a:	f107 0318 	add.w	r3, r7, #24
 800e09e:	4611      	mov	r1, r2
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7ff fbff 	bl	800d8a4 <follow_path>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e0ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d11a      	bne.n	800e0ea <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e0b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e0b8:	b25b      	sxtb	r3, r3
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	da03      	bge.n	800e0c6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e0be:	2306      	movs	r3, #6
 800e0c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e0c4:	e011      	b.n	800e0ea <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e0c6:	79fb      	ldrb	r3, [r7, #7]
 800e0c8:	f023 0301 	bic.w	r3, r3, #1
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	bf14      	ite	ne
 800e0d0:	2301      	movne	r3, #1
 800e0d2:	2300      	moveq	r3, #0
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	f107 0318 	add.w	r3, r7, #24
 800e0dc:	4611      	mov	r1, r2
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f7fd fe0c 	bl	800bcfc <chk_lock>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e0ea:	79fb      	ldrb	r3, [r7, #7]
 800e0ec:	f003 031c 	and.w	r3, r3, #28
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d07f      	beq.n	800e1f4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e0f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d017      	beq.n	800e12c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e0fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e100:	2b04      	cmp	r3, #4
 800e102:	d10e      	bne.n	800e122 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e104:	f7fd fe56 	bl	800bdb4 <enq_lock>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d006      	beq.n	800e11c <f_open+0xc8>
 800e10e:	f107 0318 	add.w	r3, r7, #24
 800e112:	4618      	mov	r0, r3
 800e114:	f7ff f838 	bl	800d188 <dir_register>
 800e118:	4603      	mov	r3, r0
 800e11a:	e000      	b.n	800e11e <f_open+0xca>
 800e11c:	2312      	movs	r3, #18
 800e11e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e122:	79fb      	ldrb	r3, [r7, #7]
 800e124:	f043 0308 	orr.w	r3, r3, #8
 800e128:	71fb      	strb	r3, [r7, #7]
 800e12a:	e010      	b.n	800e14e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e12c:	7fbb      	ldrb	r3, [r7, #30]
 800e12e:	f003 0311 	and.w	r3, r3, #17
 800e132:	2b00      	cmp	r3, #0
 800e134:	d003      	beq.n	800e13e <f_open+0xea>
					res = FR_DENIED;
 800e136:	2307      	movs	r3, #7
 800e138:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e13c:	e007      	b.n	800e14e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e13e:	79fb      	ldrb	r3, [r7, #7]
 800e140:	f003 0304 	and.w	r3, r3, #4
 800e144:	2b00      	cmp	r3, #0
 800e146:	d002      	beq.n	800e14e <f_open+0xfa>
 800e148:	2308      	movs	r3, #8
 800e14a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e14e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e152:	2b00      	cmp	r3, #0
 800e154:	d168      	bne.n	800e228 <f_open+0x1d4>
 800e156:	79fb      	ldrb	r3, [r7, #7]
 800e158:	f003 0308 	and.w	r3, r3, #8
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d063      	beq.n	800e228 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e160:	f7fa fb1e 	bl	80087a0 <get_fattime>
 800e164:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e168:	330e      	adds	r3, #14
 800e16a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e16c:	4618      	mov	r0, r3
 800e16e:	f7fd fd1b 	bl	800bba8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e174:	3316      	adds	r3, #22
 800e176:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e178:	4618      	mov	r0, r3
 800e17a:	f7fd fd15 	bl	800bba8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e180:	330b      	adds	r3, #11
 800e182:	2220      	movs	r2, #32
 800e184:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e18a:	4611      	mov	r1, r2
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7fe fc6a 	bl	800ca66 <ld_clust>
 800e192:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e198:	2200      	movs	r2, #0
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7fe fc82 	bl	800caa4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a2:	331c      	adds	r3, #28
 800e1a4:	2100      	movs	r1, #0
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7fd fcfe 	bl	800bba8 <st_dword>
					fs->wflag = 1;
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e1b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d037      	beq.n	800e228 <f_open+0x1d4>
						dw = fs->winsect;
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1bc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e1be:	f107 0318 	add.w	r3, r7, #24
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fe f995 	bl	800c4f6 <remove_chain>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e1d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d126      	bne.n	800e228 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fd ff3c 	bl	800c05c <move_window>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e1ee:	3a01      	subs	r2, #1
 800e1f0:	611a      	str	r2, [r3, #16]
 800e1f2:	e019      	b.n	800e228 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e1f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d115      	bne.n	800e228 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e1fc:	7fbb      	ldrb	r3, [r7, #30]
 800e1fe:	f003 0310 	and.w	r3, r3, #16
 800e202:	2b00      	cmp	r3, #0
 800e204:	d003      	beq.n	800e20e <f_open+0x1ba>
					res = FR_NO_FILE;
 800e206:	2304      	movs	r3, #4
 800e208:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e20c:	e00c      	b.n	800e228 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e20e:	79fb      	ldrb	r3, [r7, #7]
 800e210:	f003 0302 	and.w	r3, r3, #2
 800e214:	2b00      	cmp	r3, #0
 800e216:	d007      	beq.n	800e228 <f_open+0x1d4>
 800e218:	7fbb      	ldrb	r3, [r7, #30]
 800e21a:	f003 0301 	and.w	r3, r3, #1
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d002      	beq.n	800e228 <f_open+0x1d4>
						res = FR_DENIED;
 800e222:	2307      	movs	r3, #7
 800e224:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e228:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d128      	bne.n	800e282 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e230:	79fb      	ldrb	r3, [r7, #7]
 800e232:	f003 0308 	and.w	r3, r3, #8
 800e236:	2b00      	cmp	r3, #0
 800e238:	d003      	beq.n	800e242 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e23a:	79fb      	ldrb	r3, [r7, #7]
 800e23c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e240:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e24a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e250:	79fb      	ldrb	r3, [r7, #7]
 800e252:	f023 0301 	bic.w	r3, r3, #1
 800e256:	2b00      	cmp	r3, #0
 800e258:	bf14      	ite	ne
 800e25a:	2301      	movne	r3, #1
 800e25c:	2300      	moveq	r3, #0
 800e25e:	b2db      	uxtb	r3, r3
 800e260:	461a      	mov	r2, r3
 800e262:	f107 0318 	add.w	r3, r7, #24
 800e266:	4611      	mov	r1, r2
 800e268:	4618      	mov	r0, r3
 800e26a:	f7fd fdc5 	bl	800bdf8 <inc_lock>
 800e26e:	4602      	mov	r2, r0
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	691b      	ldr	r3, [r3, #16]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d102      	bne.n	800e282 <f_open+0x22e>
 800e27c:	2302      	movs	r3, #2
 800e27e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e282:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e286:	2b00      	cmp	r3, #0
 800e288:	f040 8095 	bne.w	800e3b6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e290:	4611      	mov	r1, r2
 800e292:	4618      	mov	r0, r3
 800e294:	f7fe fbe7 	bl	800ca66 <ld_clust>
 800e298:	4602      	mov	r2, r0
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a0:	331c      	adds	r3, #28
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7fd fc42 	bl	800bb2c <ld_dword>
 800e2a8:	4602      	mov	r2, r0
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e2b4:	697a      	ldr	r2, [r7, #20]
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	88da      	ldrh	r2, [r3, #6]
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	79fa      	ldrb	r2, [r7, #7]
 800e2c6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	3330      	adds	r3, #48	; 0x30
 800e2de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e2e2:	2100      	movs	r1, #0
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f7fd fcac 	bl	800bc42 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e2ea:	79fb      	ldrb	r3, [r7, #7]
 800e2ec:	f003 0320 	and.w	r3, r3, #32
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d060      	beq.n	800e3b6 <f_open+0x362>
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d05c      	beq.n	800e3b6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	68da      	ldr	r2, [r3, #12]
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	895b      	ldrh	r3, [r3, #10]
 800e308:	025b      	lsls	r3, r3, #9
 800e30a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	689b      	ldr	r3, [r3, #8]
 800e310:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	68db      	ldr	r3, [r3, #12]
 800e316:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e318:	e016      	b.n	800e348 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e31e:	4618      	mov	r0, r3
 800e320:	f7fd ff57 	bl	800c1d2 <get_fat>
 800e324:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e328:	2b01      	cmp	r3, #1
 800e32a:	d802      	bhi.n	800e332 <f_open+0x2de>
 800e32c:	2302      	movs	r3, #2
 800e32e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e338:	d102      	bne.n	800e340 <f_open+0x2ec>
 800e33a:	2301      	movs	r3, #1
 800e33c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e340:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e344:	1ad3      	subs	r3, r2, r3
 800e346:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e348:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d103      	bne.n	800e358 <f_open+0x304>
 800e350:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e354:	429a      	cmp	r2, r3
 800e356:	d8e0      	bhi.n	800e31a <f_open+0x2c6>
				}
				fp->clust = clst;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e35c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e35e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e362:	2b00      	cmp	r3, #0
 800e364:	d127      	bne.n	800e3b6 <f_open+0x362>
 800e366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d022      	beq.n	800e3b6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e374:	4618      	mov	r0, r3
 800e376:	f7fd ff0d 	bl	800c194 <clust2sect>
 800e37a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e37c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d103      	bne.n	800e38a <f_open+0x336>
						res = FR_INT_ERR;
 800e382:	2302      	movs	r3, #2
 800e384:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e388:	e015      	b.n	800e3b6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e38a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e38c:	0a5a      	lsrs	r2, r3, #9
 800e38e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e390:	441a      	add	r2, r3
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	7858      	ldrb	r0, [r3, #1]
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	6a1a      	ldr	r2, [r3, #32]
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	f7fd fb4b 	bl	800ba40 <disk_read>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d002      	beq.n	800e3b6 <f_open+0x362>
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e3b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d002      	beq.n	800e3c4 <f_open+0x370>
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e3c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3768      	adds	r7, #104	; 0x68
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b08e      	sub	sp, #56	; 0x38
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	60b9      	str	r1, [r7, #8]
 800e3da:	607a      	str	r2, [r7, #4]
 800e3dc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f107 0214 	add.w	r2, r7, #20
 800e3ee:	4611      	mov	r1, r2
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7ff fdb3 	bl	800df5c <validate>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e3fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e400:	2b00      	cmp	r3, #0
 800e402:	d107      	bne.n	800e414 <f_read+0x44>
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	7d5b      	ldrb	r3, [r3, #21]
 800e408:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e40c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e410:	2b00      	cmp	r3, #0
 800e412:	d002      	beq.n	800e41a <f_read+0x4a>
 800e414:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e418:	e115      	b.n	800e646 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	7d1b      	ldrb	r3, [r3, #20]
 800e41e:	f003 0301 	and.w	r3, r3, #1
 800e422:	2b00      	cmp	r3, #0
 800e424:	d101      	bne.n	800e42a <f_read+0x5a>
 800e426:	2307      	movs	r3, #7
 800e428:	e10d      	b.n	800e646 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	68da      	ldr	r2, [r3, #12]
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	699b      	ldr	r3, [r3, #24]
 800e432:	1ad3      	subs	r3, r2, r3
 800e434:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e436:	687a      	ldr	r2, [r7, #4]
 800e438:	6a3b      	ldr	r3, [r7, #32]
 800e43a:	429a      	cmp	r2, r3
 800e43c:	f240 80fe 	bls.w	800e63c <f_read+0x26c>
 800e440:	6a3b      	ldr	r3, [r7, #32]
 800e442:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e444:	e0fa      	b.n	800e63c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	699b      	ldr	r3, [r3, #24]
 800e44a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e44e:	2b00      	cmp	r3, #0
 800e450:	f040 80c6 	bne.w	800e5e0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	699b      	ldr	r3, [r3, #24]
 800e458:	0a5b      	lsrs	r3, r3, #9
 800e45a:	697a      	ldr	r2, [r7, #20]
 800e45c:	8952      	ldrh	r2, [r2, #10]
 800e45e:	3a01      	subs	r2, #1
 800e460:	4013      	ands	r3, r2
 800e462:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e464:	69fb      	ldr	r3, [r7, #28]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d12f      	bne.n	800e4ca <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	699b      	ldr	r3, [r3, #24]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d103      	bne.n	800e47a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	689b      	ldr	r3, [r3, #8]
 800e476:	633b      	str	r3, [r7, #48]	; 0x30
 800e478:	e013      	b.n	800e4a2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d007      	beq.n	800e492 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	699b      	ldr	r3, [r3, #24]
 800e486:	4619      	mov	r1, r3
 800e488:	68f8      	ldr	r0, [r7, #12]
 800e48a:	f7fe f931 	bl	800c6f0 <clmt_clust>
 800e48e:	6338      	str	r0, [r7, #48]	; 0x30
 800e490:	e007      	b.n	800e4a2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e492:	68fa      	ldr	r2, [r7, #12]
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	69db      	ldr	r3, [r3, #28]
 800e498:	4619      	mov	r1, r3
 800e49a:	4610      	mov	r0, r2
 800e49c:	f7fd fe99 	bl	800c1d2 <get_fat>
 800e4a0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d804      	bhi.n	800e4b2 <f_read+0xe2>
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	2202      	movs	r2, #2
 800e4ac:	755a      	strb	r2, [r3, #21]
 800e4ae:	2302      	movs	r3, #2
 800e4b0:	e0c9      	b.n	800e646 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4b8:	d104      	bne.n	800e4c4 <f_read+0xf4>
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2201      	movs	r2, #1
 800e4be:	755a      	strb	r2, [r3, #21]
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	e0c0      	b.n	800e646 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4c8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e4ca:	697a      	ldr	r2, [r7, #20]
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	69db      	ldr	r3, [r3, #28]
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	4610      	mov	r0, r2
 800e4d4:	f7fd fe5e 	bl	800c194 <clust2sect>
 800e4d8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e4da:	69bb      	ldr	r3, [r7, #24]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d104      	bne.n	800e4ea <f_read+0x11a>
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2202      	movs	r2, #2
 800e4e4:	755a      	strb	r2, [r3, #21]
 800e4e6:	2302      	movs	r3, #2
 800e4e8:	e0ad      	b.n	800e646 <f_read+0x276>
			sect += csect;
 800e4ea:	69ba      	ldr	r2, [r7, #24]
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	4413      	add	r3, r2
 800e4f0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	0a5b      	lsrs	r3, r3, #9
 800e4f6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d039      	beq.n	800e572 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e4fe:	69fa      	ldr	r2, [r7, #28]
 800e500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e502:	4413      	add	r3, r2
 800e504:	697a      	ldr	r2, [r7, #20]
 800e506:	8952      	ldrh	r2, [r2, #10]
 800e508:	4293      	cmp	r3, r2
 800e50a:	d905      	bls.n	800e518 <f_read+0x148>
					cc = fs->csize - csect;
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	895b      	ldrh	r3, [r3, #10]
 800e510:	461a      	mov	r2, r3
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	1ad3      	subs	r3, r2, r3
 800e516:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	7858      	ldrb	r0, [r3, #1]
 800e51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e51e:	69ba      	ldr	r2, [r7, #24]
 800e520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e522:	f7fd fa8d 	bl	800ba40 <disk_read>
 800e526:	4603      	mov	r3, r0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d004      	beq.n	800e536 <f_read+0x166>
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	2201      	movs	r2, #1
 800e530:	755a      	strb	r2, [r3, #21]
 800e532:	2301      	movs	r3, #1
 800e534:	e087      	b.n	800e646 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	7d1b      	ldrb	r3, [r3, #20]
 800e53a:	b25b      	sxtb	r3, r3
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	da14      	bge.n	800e56a <f_read+0x19a>
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	6a1a      	ldr	r2, [r3, #32]
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	1ad3      	subs	r3, r2, r3
 800e548:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d90d      	bls.n	800e56a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	6a1a      	ldr	r2, [r3, #32]
 800e552:	69bb      	ldr	r3, [r7, #24]
 800e554:	1ad3      	subs	r3, r2, r3
 800e556:	025b      	lsls	r3, r3, #9
 800e558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e55a:	18d0      	adds	r0, r2, r3
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	3330      	adds	r3, #48	; 0x30
 800e560:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e564:	4619      	mov	r1, r3
 800e566:	f7fd fb4b 	bl	800bc00 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56c:	025b      	lsls	r3, r3, #9
 800e56e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e570:	e050      	b.n	800e614 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	6a1b      	ldr	r3, [r3, #32]
 800e576:	69ba      	ldr	r2, [r7, #24]
 800e578:	429a      	cmp	r2, r3
 800e57a:	d02e      	beq.n	800e5da <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	7d1b      	ldrb	r3, [r3, #20]
 800e580:	b25b      	sxtb	r3, r3
 800e582:	2b00      	cmp	r3, #0
 800e584:	da18      	bge.n	800e5b8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	7858      	ldrb	r0, [r3, #1]
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	6a1a      	ldr	r2, [r3, #32]
 800e594:	2301      	movs	r3, #1
 800e596:	f7fd fa73 	bl	800ba80 <disk_write>
 800e59a:	4603      	mov	r3, r0
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d004      	beq.n	800e5aa <f_read+0x1da>
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	755a      	strb	r2, [r3, #21]
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e04d      	b.n	800e646 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	7d1b      	ldrb	r3, [r3, #20]
 800e5ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5b2:	b2da      	uxtb	r2, r3
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	7858      	ldrb	r0, [r3, #1]
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	69ba      	ldr	r2, [r7, #24]
 800e5c6:	f7fd fa3b 	bl	800ba40 <disk_read>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d004      	beq.n	800e5da <f_read+0x20a>
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	755a      	strb	r2, [r3, #21]
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	e035      	b.n	800e646 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	69ba      	ldr	r2, [r7, #24]
 800e5de:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	699b      	ldr	r3, [r3, #24]
 800e5e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5e8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e5ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e5ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d901      	bls.n	800e5fa <f_read+0x22a>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	699b      	ldr	r3, [r3, #24]
 800e604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e608:	4413      	add	r3, r2
 800e60a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e60c:	4619      	mov	r1, r3
 800e60e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e610:	f7fd faf6 	bl	800bc00 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e618:	4413      	add	r3, r2
 800e61a:	627b      	str	r3, [r7, #36]	; 0x24
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	699a      	ldr	r2, [r3, #24]
 800e620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e622:	441a      	add	r2, r3
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	619a      	str	r2, [r3, #24]
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e62e:	441a      	add	r2, r3
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	601a      	str	r2, [r3, #0]
 800e634:	687a      	ldr	r2, [r7, #4]
 800e636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e638:	1ad3      	subs	r3, r2, r3
 800e63a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	f47f af01 	bne.w	800e446 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e644:	2300      	movs	r3, #0
}
 800e646:	4618      	mov	r0, r3
 800e648:	3738      	adds	r7, #56	; 0x38
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}

0800e64e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e64e:	b580      	push	{r7, lr}
 800e650:	b086      	sub	sp, #24
 800e652:	af00      	add	r7, sp, #0
 800e654:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f107 0208 	add.w	r2, r7, #8
 800e65c:	4611      	mov	r1, r2
 800e65e:	4618      	mov	r0, r3
 800e660:	f7ff fc7c 	bl	800df5c <validate>
 800e664:	4603      	mov	r3, r0
 800e666:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e668:	7dfb      	ldrb	r3, [r7, #23]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d168      	bne.n	800e740 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	7d1b      	ldrb	r3, [r3, #20]
 800e672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e676:	2b00      	cmp	r3, #0
 800e678:	d062      	beq.n	800e740 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	7d1b      	ldrb	r3, [r3, #20]
 800e67e:	b25b      	sxtb	r3, r3
 800e680:	2b00      	cmp	r3, #0
 800e682:	da15      	bge.n	800e6b0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	7858      	ldrb	r0, [r3, #1]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6a1a      	ldr	r2, [r3, #32]
 800e692:	2301      	movs	r3, #1
 800e694:	f7fd f9f4 	bl	800ba80 <disk_write>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d001      	beq.n	800e6a2 <f_sync+0x54>
 800e69e:	2301      	movs	r3, #1
 800e6a0:	e04f      	b.n	800e742 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	7d1b      	ldrb	r3, [r3, #20]
 800e6a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6aa:	b2da      	uxtb	r2, r3
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e6b0:	f7fa f876 	bl	80087a0 <get_fattime>
 800e6b4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e6b6:	68ba      	ldr	r2, [r7, #8]
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6bc:	4619      	mov	r1, r3
 800e6be:	4610      	mov	r0, r2
 800e6c0:	f7fd fccc 	bl	800c05c <move_window>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e6c8:	7dfb      	ldrb	r3, [r7, #23]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d138      	bne.n	800e740 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6d2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	330b      	adds	r3, #11
 800e6d8:	781a      	ldrb	r2, [r3, #0]
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	330b      	adds	r3, #11
 800e6de:	f042 0220 	orr.w	r2, r2, #32
 800e6e2:	b2d2      	uxtb	r2, r2
 800e6e4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6818      	ldr	r0, [r3, #0]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	689b      	ldr	r3, [r3, #8]
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	68f9      	ldr	r1, [r7, #12]
 800e6f2:	f7fe f9d7 	bl	800caa4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	f103 021c 	add.w	r2, r3, #28
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	68db      	ldr	r3, [r3, #12]
 800e700:	4619      	mov	r1, r3
 800e702:	4610      	mov	r0, r2
 800e704:	f7fd fa50 	bl	800bba8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	3316      	adds	r3, #22
 800e70c:	6939      	ldr	r1, [r7, #16]
 800e70e:	4618      	mov	r0, r3
 800e710:	f7fd fa4a 	bl	800bba8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	3312      	adds	r3, #18
 800e718:	2100      	movs	r1, #0
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7fd fa29 	bl	800bb72 <st_word>
					fs->wflag = 1;
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	2201      	movs	r2, #1
 800e724:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	4618      	mov	r0, r3
 800e72a:	f7fd fcc5 	bl	800c0b8 <sync_fs>
 800e72e:	4603      	mov	r3, r0
 800e730:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	7d1b      	ldrb	r3, [r3, #20]
 800e736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e73a:	b2da      	uxtb	r2, r3
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e740:	7dfb      	ldrb	r3, [r7, #23]
}
 800e742:	4618      	mov	r0, r3
 800e744:	3718      	adds	r7, #24
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}

0800e74a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e74a:	b580      	push	{r7, lr}
 800e74c:	b084      	sub	sp, #16
 800e74e:	af00      	add	r7, sp, #0
 800e750:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f7ff ff7b 	bl	800e64e <f_sync>
 800e758:	4603      	mov	r3, r0
 800e75a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e75c:	7bfb      	ldrb	r3, [r7, #15]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d118      	bne.n	800e794 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f107 0208 	add.w	r2, r7, #8
 800e768:	4611      	mov	r1, r2
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7ff fbf6 	bl	800df5c <validate>
 800e770:	4603      	mov	r3, r0
 800e772:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e774:	7bfb      	ldrb	r3, [r7, #15]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d10c      	bne.n	800e794 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	691b      	ldr	r3, [r3, #16]
 800e77e:	4618      	mov	r0, r3
 800e780:	f7fd fbc8 	bl	800bf14 <dec_lock>
 800e784:	4603      	mov	r3, r0
 800e786:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e788:	7bfb      	ldrb	r3, [r7, #15]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d102      	bne.n	800e794 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2200      	movs	r2, #0
 800e792:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e794:	7bfb      	ldrb	r3, [r7, #15]
}
 800e796:	4618      	mov	r0, r3
 800e798:	3710      	adds	r7, #16
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}

0800e79e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e79e:	b580      	push	{r7, lr}
 800e7a0:	b090      	sub	sp, #64	; 0x40
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
 800e7a6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f107 0208 	add.w	r2, r7, #8
 800e7ae:	4611      	mov	r1, r2
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7ff fbd3 	bl	800df5c <validate>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e7bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d103      	bne.n	800e7cc <f_lseek+0x2e>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	7d5b      	ldrb	r3, [r3, #21]
 800e7c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e7cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d002      	beq.n	800e7da <f_lseek+0x3c>
 800e7d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e7d8:	e1e6      	b.n	800eba8 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	f000 80d1 	beq.w	800e986 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ea:	d15a      	bne.n	800e8a2 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7f0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f4:	1d1a      	adds	r2, r3, #4
 800e7f6:	627a      	str	r2, [r7, #36]	; 0x24
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	617b      	str	r3, [r7, #20]
 800e7fc:	2302      	movs	r3, #2
 800e7fe:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	689b      	ldr	r3, [r3, #8]
 800e804:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800e806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d03a      	beq.n	800e882 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80e:	613b      	str	r3, [r7, #16]
 800e810:	2300      	movs	r3, #0
 800e812:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e816:	3302      	adds	r3, #2
 800e818:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800e81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e81c:	60fb      	str	r3, [r7, #12]
 800e81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e820:	3301      	adds	r3, #1
 800e822:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e828:	4618      	mov	r0, r3
 800e82a:	f7fd fcd2 	bl	800c1d2 <get_fat>
 800e82e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e832:	2b01      	cmp	r3, #1
 800e834:	d804      	bhi.n	800e840 <f_lseek+0xa2>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2202      	movs	r2, #2
 800e83a:	755a      	strb	r2, [r3, #21]
 800e83c:	2302      	movs	r3, #2
 800e83e:	e1b3      	b.n	800eba8 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e842:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e846:	d104      	bne.n	800e852 <f_lseek+0xb4>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2201      	movs	r2, #1
 800e84c:	755a      	strb	r2, [r3, #21]
 800e84e:	2301      	movs	r3, #1
 800e850:	e1aa      	b.n	800eba8 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	3301      	adds	r3, #1
 800e856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e858:	429a      	cmp	r2, r3
 800e85a:	d0de      	beq.n	800e81a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e85c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	429a      	cmp	r2, r3
 800e862:	d809      	bhi.n	800e878 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e866:	1d1a      	adds	r2, r3, #4
 800e868:	627a      	str	r2, [r7, #36]	; 0x24
 800e86a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e86c:	601a      	str	r2, [r3, #0]
 800e86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e870:	1d1a      	adds	r2, r3, #4
 800e872:	627a      	str	r2, [r7, #36]	; 0x24
 800e874:	693a      	ldr	r2, [r7, #16]
 800e876:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	699b      	ldr	r3, [r3, #24]
 800e87c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e87e:	429a      	cmp	r2, r3
 800e880:	d3c4      	bcc.n	800e80c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e888:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e88a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	429a      	cmp	r2, r3
 800e890:	d803      	bhi.n	800e89a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e894:	2200      	movs	r2, #0
 800e896:	601a      	str	r2, [r3, #0]
 800e898:	e184      	b.n	800eba4 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e89a:	2311      	movs	r3, #17
 800e89c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e8a0:	e180      	b.n	800eba4 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	683a      	ldr	r2, [r7, #0]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d902      	bls.n	800e8b2 <f_lseek+0x114>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	68db      	ldr	r3, [r3, #12]
 800e8b0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	683a      	ldr	r2, [r7, #0]
 800e8b6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	f000 8172 	beq.w	800eba4 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	3b01      	subs	r3, #1
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f7fd ff12 	bl	800c6f0 <clmt_clust>
 800e8cc:	4602      	mov	r2, r0
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e8d2:	68ba      	ldr	r2, [r7, #8]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	69db      	ldr	r3, [r3, #28]
 800e8d8:	4619      	mov	r1, r3
 800e8da:	4610      	mov	r0, r2
 800e8dc:	f7fd fc5a 	bl	800c194 <clust2sect>
 800e8e0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e8e2:	69bb      	ldr	r3, [r7, #24]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d104      	bne.n	800e8f2 <f_lseek+0x154>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2202      	movs	r2, #2
 800e8ec:	755a      	strb	r2, [r3, #21]
 800e8ee:	2302      	movs	r3, #2
 800e8f0:	e15a      	b.n	800eba8 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	3b01      	subs	r3, #1
 800e8f6:	0a5b      	lsrs	r3, r3, #9
 800e8f8:	68ba      	ldr	r2, [r7, #8]
 800e8fa:	8952      	ldrh	r2, [r2, #10]
 800e8fc:	3a01      	subs	r2, #1
 800e8fe:	4013      	ands	r3, r2
 800e900:	69ba      	ldr	r2, [r7, #24]
 800e902:	4413      	add	r3, r2
 800e904:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	699b      	ldr	r3, [r3, #24]
 800e90a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e90e:	2b00      	cmp	r3, #0
 800e910:	f000 8148 	beq.w	800eba4 <f_lseek+0x406>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6a1b      	ldr	r3, [r3, #32]
 800e918:	69ba      	ldr	r2, [r7, #24]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	f000 8142 	beq.w	800eba4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	7d1b      	ldrb	r3, [r3, #20]
 800e924:	b25b      	sxtb	r3, r3
 800e926:	2b00      	cmp	r3, #0
 800e928:	da18      	bge.n	800e95c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	7858      	ldrb	r0, [r3, #1]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6a1a      	ldr	r2, [r3, #32]
 800e938:	2301      	movs	r3, #1
 800e93a:	f7fd f8a1 	bl	800ba80 <disk_write>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	d004      	beq.n	800e94e <f_lseek+0x1b0>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2201      	movs	r2, #1
 800e948:	755a      	strb	r2, [r3, #21]
 800e94a:	2301      	movs	r3, #1
 800e94c:	e12c      	b.n	800eba8 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	7d1b      	ldrb	r3, [r3, #20]
 800e952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e956:	b2da      	uxtb	r2, r3
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	7858      	ldrb	r0, [r3, #1]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e966:	2301      	movs	r3, #1
 800e968:	69ba      	ldr	r2, [r7, #24]
 800e96a:	f7fd f869 	bl	800ba40 <disk_read>
 800e96e:	4603      	mov	r3, r0
 800e970:	2b00      	cmp	r3, #0
 800e972:	d004      	beq.n	800e97e <f_lseek+0x1e0>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2201      	movs	r2, #1
 800e978:	755a      	strb	r2, [r3, #21]
 800e97a:	2301      	movs	r3, #1
 800e97c:	e114      	b.n	800eba8 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	69ba      	ldr	r2, [r7, #24]
 800e982:	621a      	str	r2, [r3, #32]
 800e984:	e10e      	b.n	800eba4 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	68db      	ldr	r3, [r3, #12]
 800e98a:	683a      	ldr	r2, [r7, #0]
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d908      	bls.n	800e9a2 <f_lseek+0x204>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	7d1b      	ldrb	r3, [r3, #20]
 800e994:	f003 0302 	and.w	r3, r3, #2
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d102      	bne.n	800e9a2 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	68db      	ldr	r3, [r3, #12]
 800e9a0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	699b      	ldr	r3, [r3, #24]
 800e9a6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	637b      	str	r3, [r7, #52]	; 0x34
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9b0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	f000 80a7 	beq.w	800eb08 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	895b      	ldrh	r3, [r3, #10]
 800e9be:	025b      	lsls	r3, r3, #9
 800e9c0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e9c2:	6a3b      	ldr	r3, [r7, #32]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d01b      	beq.n	800ea00 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	1e5a      	subs	r2, r3, #1
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	fbb2 f2f3 	udiv	r2, r2, r3
 800e9d2:	6a3b      	ldr	r3, [r7, #32]
 800e9d4:	1e59      	subs	r1, r3, #1
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d30f      	bcc.n	800ea00 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e9e0:	6a3b      	ldr	r3, [r7, #32]
 800e9e2:	1e5a      	subs	r2, r3, #1
 800e9e4:	69fb      	ldr	r3, [r7, #28]
 800e9e6:	425b      	negs	r3, r3
 800e9e8:	401a      	ands	r2, r3
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	699b      	ldr	r3, [r3, #24]
 800e9f2:	683a      	ldr	r2, [r7, #0]
 800e9f4:	1ad3      	subs	r3, r2, r3
 800e9f6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	69db      	ldr	r3, [r3, #28]
 800e9fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e9fe:	e022      	b.n	800ea46 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	689b      	ldr	r3, [r3, #8]
 800ea04:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ea06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d119      	bne.n	800ea40 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2100      	movs	r1, #0
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7fd fdd5 	bl	800c5c0 <create_chain>
 800ea16:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ea18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea1a:	2b01      	cmp	r3, #1
 800ea1c:	d104      	bne.n	800ea28 <f_lseek+0x28a>
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2202      	movs	r2, #2
 800ea22:	755a      	strb	r2, [r3, #21]
 800ea24:	2302      	movs	r3, #2
 800ea26:	e0bf      	b.n	800eba8 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ea28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea2e:	d104      	bne.n	800ea3a <f_lseek+0x29c>
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2201      	movs	r2, #1
 800ea34:	755a      	strb	r2, [r3, #21]
 800ea36:	2301      	movs	r3, #1
 800ea38:	e0b6      	b.n	800eba8 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea3e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea44:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ea46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d05d      	beq.n	800eb08 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800ea4c:	e03a      	b.n	800eac4 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800ea4e:	683a      	ldr	r2, [r7, #0]
 800ea50:	69fb      	ldr	r3, [r7, #28]
 800ea52:	1ad3      	subs	r3, r2, r3
 800ea54:	603b      	str	r3, [r7, #0]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	699a      	ldr	r2, [r3, #24]
 800ea5a:	69fb      	ldr	r3, [r7, #28]
 800ea5c:	441a      	add	r2, r3
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	7d1b      	ldrb	r3, [r3, #20]
 800ea66:	f003 0302 	and.w	r3, r3, #2
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d00b      	beq.n	800ea86 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7fd fda4 	bl	800c5c0 <create_chain>
 800ea78:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ea7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d108      	bne.n	800ea92 <f_lseek+0x2f4>
							ofs = 0; break;
 800ea80:	2300      	movs	r3, #0
 800ea82:	603b      	str	r3, [r7, #0]
 800ea84:	e022      	b.n	800eacc <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7fd fba1 	bl	800c1d2 <get_fat>
 800ea90:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ea92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea98:	d104      	bne.n	800eaa4 <f_lseek+0x306>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	755a      	strb	r2, [r3, #21]
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	e081      	b.n	800eba8 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800eaa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa6:	2b01      	cmp	r3, #1
 800eaa8:	d904      	bls.n	800eab4 <f_lseek+0x316>
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	699b      	ldr	r3, [r3, #24]
 800eaae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eab0:	429a      	cmp	r2, r3
 800eab2:	d304      	bcc.n	800eabe <f_lseek+0x320>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2202      	movs	r2, #2
 800eab8:	755a      	strb	r2, [r3, #21]
 800eaba:	2302      	movs	r3, #2
 800eabc:	e074      	b.n	800eba8 <f_lseek+0x40a>
					fp->clust = clst;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eac2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800eac4:	683a      	ldr	r2, [r7, #0]
 800eac6:	69fb      	ldr	r3, [r7, #28]
 800eac8:	429a      	cmp	r2, r3
 800eaca:	d8c0      	bhi.n	800ea4e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	699a      	ldr	r2, [r3, #24]
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	441a      	add	r2, r3
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d012      	beq.n	800eb08 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7fd fb54 	bl	800c194 <clust2sect>
 800eaec:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800eaee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d104      	bne.n	800eafe <f_lseek+0x360>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2202      	movs	r2, #2
 800eaf8:	755a      	strb	r2, [r3, #21]
 800eafa:	2302      	movs	r3, #2
 800eafc:	e054      	b.n	800eba8 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	0a5b      	lsrs	r3, r3, #9
 800eb02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb04:	4413      	add	r3, r2
 800eb06:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	699a      	ldr	r2, [r3, #24]
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	68db      	ldr	r3, [r3, #12]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d90a      	bls.n	800eb2a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	699a      	ldr	r2, [r3, #24]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	7d1b      	ldrb	r3, [r3, #20]
 800eb20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb24:	b2da      	uxtb	r2, r3
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	699b      	ldr	r3, [r3, #24]
 800eb2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d036      	beq.n	800eba4 <f_lseek+0x406>
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6a1b      	ldr	r3, [r3, #32]
 800eb3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	d031      	beq.n	800eba4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	7d1b      	ldrb	r3, [r3, #20]
 800eb44:	b25b      	sxtb	r3, r3
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	da18      	bge.n	800eb7c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	7858      	ldrb	r0, [r3, #1]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6a1a      	ldr	r2, [r3, #32]
 800eb58:	2301      	movs	r3, #1
 800eb5a:	f7fc ff91 	bl	800ba80 <disk_write>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d004      	beq.n	800eb6e <f_lseek+0x3d0>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2201      	movs	r2, #1
 800eb68:	755a      	strb	r2, [r3, #21]
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	e01c      	b.n	800eba8 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	7d1b      	ldrb	r3, [r3, #20]
 800eb72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb76:	b2da      	uxtb	r2, r3
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	7858      	ldrb	r0, [r3, #1]
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb86:	2301      	movs	r3, #1
 800eb88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb8a:	f7fc ff59 	bl	800ba40 <disk_read>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d004      	beq.n	800eb9e <f_lseek+0x400>
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2201      	movs	r2, #1
 800eb98:	755a      	strb	r2, [r3, #21]
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	e004      	b.n	800eba8 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eba2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800eba4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3740      	adds	r7, #64	; 0x40
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b086      	sub	sp, #24
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d101      	bne.n	800ebc4 <f_opendir+0x14>
 800ebc0:	2309      	movs	r3, #9
 800ebc2:	e064      	b.n	800ec8e <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800ebc8:	f107 010c 	add.w	r1, r7, #12
 800ebcc:	463b      	mov	r3, r7
 800ebce:	2200      	movs	r2, #0
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f7fe ff73 	bl	800dabc <find_volume>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ebda:	7dfb      	ldrb	r3, [r7, #23]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d14f      	bne.n	800ec80 <f_opendir+0xd0>
		obj->fs = fs;
 800ebe0:	68fa      	ldr	r2, [r7, #12]
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	4619      	mov	r1, r3
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f7fe fe5a 	bl	800d8a4 <follow_path>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800ebf4:	7dfb      	ldrb	r3, [r7, #23]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d13d      	bne.n	800ec76 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ec00:	b25b      	sxtb	r3, r3
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	db12      	blt.n	800ec2c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	799b      	ldrb	r3, [r3, #6]
 800ec0a:	f003 0310 	and.w	r3, r3, #16
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d00a      	beq.n	800ec28 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800ec12:	68fa      	ldr	r2, [r7, #12]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6a1b      	ldr	r3, [r3, #32]
 800ec18:	4619      	mov	r1, r3
 800ec1a:	4610      	mov	r0, r2
 800ec1c:	f7fd ff23 	bl	800ca66 <ld_clust>
 800ec20:	4602      	mov	r2, r0
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	609a      	str	r2, [r3, #8]
 800ec26:	e001      	b.n	800ec2c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800ec28:	2305      	movs	r3, #5
 800ec2a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800ec2c:	7dfb      	ldrb	r3, [r7, #23]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d121      	bne.n	800ec76 <f_opendir+0xc6>
				obj->id = fs->id;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	88da      	ldrh	r2, [r3, #6]
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ec3a:	2100      	movs	r1, #0
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f7fd fd8b 	bl	800c758 <dir_sdi>
 800ec42:	4603      	mov	r3, r0
 800ec44:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800ec46:	7dfb      	ldrb	r3, [r7, #23]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d114      	bne.n	800ec76 <f_opendir+0xc6>
					if (obj->sclust) {
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	689b      	ldr	r3, [r3, #8]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d00d      	beq.n	800ec70 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800ec54:	2100      	movs	r1, #0
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f7fd f8ce 	bl	800bdf8 <inc_lock>
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800ec62:	693b      	ldr	r3, [r7, #16]
 800ec64:	691b      	ldr	r3, [r3, #16]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d105      	bne.n	800ec76 <f_opendir+0xc6>
 800ec6a:	2312      	movs	r3, #18
 800ec6c:	75fb      	strb	r3, [r7, #23]
 800ec6e:	e002      	b.n	800ec76 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	2200      	movs	r2, #0
 800ec74:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800ec76:	7dfb      	ldrb	r3, [r7, #23]
 800ec78:	2b04      	cmp	r3, #4
 800ec7a:	d101      	bne.n	800ec80 <f_opendir+0xd0>
 800ec7c:	2305      	movs	r3, #5
 800ec7e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ec80:	7dfb      	ldrb	r3, [r7, #23]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d002      	beq.n	800ec8c <f_opendir+0xdc>
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ec8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3718      	adds	r7, #24
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}

0800ec96 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800ec96:	b580      	push	{r7, lr}
 800ec98:	b084      	sub	sp, #16
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f107 0208 	add.w	r2, r7, #8
 800eca4:	4611      	mov	r1, r2
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7ff f958 	bl	800df5c <validate>
 800ecac:	4603      	mov	r3, r0
 800ecae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ecb0:	7bfb      	ldrb	r3, [r7, #15]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d110      	bne.n	800ecd8 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	691b      	ldr	r3, [r3, #16]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d006      	beq.n	800eccc <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	691b      	ldr	r3, [r3, #16]
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7fd f926 	bl	800bf14 <dec_lock>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800eccc:	7bfb      	ldrb	r3, [r7, #15]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d102      	bne.n	800ecd8 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800ecd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3710      	adds	r7, #16
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}

0800ece2 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ece2:	b580      	push	{r7, lr}
 800ece4:	b084      	sub	sp, #16
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	6078      	str	r0, [r7, #4]
 800ecea:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f107 0208 	add.w	r2, r7, #8
 800ecf2:	4611      	mov	r1, r2
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f7ff f931 	bl	800df5c <validate>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ecfe:	7bfb      	ldrb	r3, [r7, #15]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d126      	bne.n	800ed52 <f_readdir+0x70>
		if (!fno) {
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d106      	bne.n	800ed18 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800ed0a:	2100      	movs	r1, #0
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f7fd fd23 	bl	800c758 <dir_sdi>
 800ed12:	4603      	mov	r3, r0
 800ed14:	73fb      	strb	r3, [r7, #15]
 800ed16:	e01c      	b.n	800ed52 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800ed18:	2100      	movs	r1, #0
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f7fe f8cd 	bl	800ceba <dir_read>
 800ed20:	4603      	mov	r3, r0
 800ed22:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800ed24:	7bfb      	ldrb	r3, [r7, #15]
 800ed26:	2b04      	cmp	r3, #4
 800ed28:	d101      	bne.n	800ed2e <f_readdir+0x4c>
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800ed2e:	7bfb      	ldrb	r3, [r7, #15]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d10e      	bne.n	800ed52 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800ed34:	6839      	ldr	r1, [r7, #0]
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f7fe fb1e 	bl	800d378 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800ed3c:	2100      	movs	r1, #0
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f7fd fd85 	bl	800c84e <dir_next>
 800ed44:	4603      	mov	r3, r0
 800ed46:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ed48:	7bfb      	ldrb	r3, [r7, #15]
 800ed4a:	2b04      	cmp	r3, #4
 800ed4c:	d101      	bne.n	800ed52 <f_readdir+0x70>
 800ed4e:	2300      	movs	r3, #0
 800ed50:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ed52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	3710      	adds	r7, #16
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b087      	sub	sp, #28
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	60f8      	str	r0, [r7, #12]
 800ed64:	60b9      	str	r1, [r7, #8]
 800ed66:	4613      	mov	r3, r2
 800ed68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ed72:	4b1f      	ldr	r3, [pc, #124]	; (800edf0 <FATFS_LinkDriverEx+0x94>)
 800ed74:	7a5b      	ldrb	r3, [r3, #9]
 800ed76:	b2db      	uxtb	r3, r3
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d131      	bne.n	800ede0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ed7c:	4b1c      	ldr	r3, [pc, #112]	; (800edf0 <FATFS_LinkDriverEx+0x94>)
 800ed7e:	7a5b      	ldrb	r3, [r3, #9]
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	461a      	mov	r2, r3
 800ed84:	4b1a      	ldr	r3, [pc, #104]	; (800edf0 <FATFS_LinkDriverEx+0x94>)
 800ed86:	2100      	movs	r1, #0
 800ed88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ed8a:	4b19      	ldr	r3, [pc, #100]	; (800edf0 <FATFS_LinkDriverEx+0x94>)
 800ed8c:	7a5b      	ldrb	r3, [r3, #9]
 800ed8e:	b2db      	uxtb	r3, r3
 800ed90:	4a17      	ldr	r2, [pc, #92]	; (800edf0 <FATFS_LinkDriverEx+0x94>)
 800ed92:	009b      	lsls	r3, r3, #2
 800ed94:	4413      	add	r3, r2
 800ed96:	68fa      	ldr	r2, [r7, #12]
 800ed98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ed9a:	4b15      	ldr	r3, [pc, #84]	; (800edf0 <FATFS_LinkDriverEx+0x94>)
 800ed9c:	7a5b      	ldrb	r3, [r3, #9]
 800ed9e:	b2db      	uxtb	r3, r3
 800eda0:	461a      	mov	r2, r3
 800eda2:	4b13      	ldr	r3, [pc, #76]	; (800edf0 <FATFS_LinkDriverEx+0x94>)
 800eda4:	4413      	add	r3, r2
 800eda6:	79fa      	ldrb	r2, [r7, #7]
 800eda8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800edaa:	4b11      	ldr	r3, [pc, #68]	; (800edf0 <FATFS_LinkDriverEx+0x94>)
 800edac:	7a5b      	ldrb	r3, [r3, #9]
 800edae:	b2db      	uxtb	r3, r3
 800edb0:	1c5a      	adds	r2, r3, #1
 800edb2:	b2d1      	uxtb	r1, r2
 800edb4:	4a0e      	ldr	r2, [pc, #56]	; (800edf0 <FATFS_LinkDriverEx+0x94>)
 800edb6:	7251      	strb	r1, [r2, #9]
 800edb8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800edba:	7dbb      	ldrb	r3, [r7, #22]
 800edbc:	3330      	adds	r3, #48	; 0x30
 800edbe:	b2da      	uxtb	r2, r3
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	3301      	adds	r3, #1
 800edc8:	223a      	movs	r2, #58	; 0x3a
 800edca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	3302      	adds	r3, #2
 800edd0:	222f      	movs	r2, #47	; 0x2f
 800edd2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	3303      	adds	r3, #3
 800edd8:	2200      	movs	r2, #0
 800edda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800eddc:	2300      	movs	r3, #0
 800edde:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ede0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	371c      	adds	r7, #28
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr
 800edee:	bf00      	nop
 800edf0:	20001de0 	.word	0x20001de0

0800edf4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b082      	sub	sp, #8
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
 800edfc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800edfe:	2200      	movs	r2, #0
 800ee00:	6839      	ldr	r1, [r7, #0]
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f7ff ffaa 	bl	800ed5c <FATFS_LinkDriverEx>
 800ee08:	4603      	mov	r3, r0
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3708      	adds	r7, #8
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
	...

0800ee14 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b085      	sub	sp, #20
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	6039      	str	r1, [r7, #0]
 800ee1e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ee20:	88fb      	ldrh	r3, [r7, #6]
 800ee22:	2b7f      	cmp	r3, #127	; 0x7f
 800ee24:	d802      	bhi.n	800ee2c <ff_convert+0x18>
		c = chr;
 800ee26:	88fb      	ldrh	r3, [r7, #6]
 800ee28:	81fb      	strh	r3, [r7, #14]
 800ee2a:	e025      	b.n	800ee78 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d00b      	beq.n	800ee4a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ee32:	88fb      	ldrh	r3, [r7, #6]
 800ee34:	2bff      	cmp	r3, #255	; 0xff
 800ee36:	d805      	bhi.n	800ee44 <ff_convert+0x30>
 800ee38:	88fb      	ldrh	r3, [r7, #6]
 800ee3a:	3b80      	subs	r3, #128	; 0x80
 800ee3c:	4a12      	ldr	r2, [pc, #72]	; (800ee88 <ff_convert+0x74>)
 800ee3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee42:	e000      	b.n	800ee46 <ff_convert+0x32>
 800ee44:	2300      	movs	r3, #0
 800ee46:	81fb      	strh	r3, [r7, #14]
 800ee48:	e016      	b.n	800ee78 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	81fb      	strh	r3, [r7, #14]
 800ee4e:	e009      	b.n	800ee64 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ee50:	89fb      	ldrh	r3, [r7, #14]
 800ee52:	4a0d      	ldr	r2, [pc, #52]	; (800ee88 <ff_convert+0x74>)
 800ee54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee58:	88fa      	ldrh	r2, [r7, #6]
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d006      	beq.n	800ee6c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ee5e:	89fb      	ldrh	r3, [r7, #14]
 800ee60:	3301      	adds	r3, #1
 800ee62:	81fb      	strh	r3, [r7, #14]
 800ee64:	89fb      	ldrh	r3, [r7, #14]
 800ee66:	2b7f      	cmp	r3, #127	; 0x7f
 800ee68:	d9f2      	bls.n	800ee50 <ff_convert+0x3c>
 800ee6a:	e000      	b.n	800ee6e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ee6c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ee6e:	89fb      	ldrh	r3, [r7, #14]
 800ee70:	3380      	adds	r3, #128	; 0x80
 800ee72:	b29b      	uxth	r3, r3
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ee78:	89fb      	ldrh	r3, [r7, #14]
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3714      	adds	r7, #20
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop
 800ee88:	0800faa8 	.word	0x0800faa8

0800ee8c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b087      	sub	sp, #28
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	4603      	mov	r3, r0
 800ee94:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ee96:	88fb      	ldrh	r3, [r7, #6]
 800ee98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee9c:	d201      	bcs.n	800eea2 <ff_wtoupper+0x16>
 800ee9e:	4b3e      	ldr	r3, [pc, #248]	; (800ef98 <ff_wtoupper+0x10c>)
 800eea0:	e000      	b.n	800eea4 <ff_wtoupper+0x18>
 800eea2:	4b3e      	ldr	r3, [pc, #248]	; (800ef9c <ff_wtoupper+0x110>)
 800eea4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	1c9a      	adds	r2, r3, #2
 800eeaa:	617a      	str	r2, [r7, #20]
 800eeac:	881b      	ldrh	r3, [r3, #0]
 800eeae:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800eeb0:	8a7b      	ldrh	r3, [r7, #18]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d068      	beq.n	800ef88 <ff_wtoupper+0xfc>
 800eeb6:	88fa      	ldrh	r2, [r7, #6]
 800eeb8:	8a7b      	ldrh	r3, [r7, #18]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d364      	bcc.n	800ef88 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	1c9a      	adds	r2, r3, #2
 800eec2:	617a      	str	r2, [r7, #20]
 800eec4:	881b      	ldrh	r3, [r3, #0]
 800eec6:	823b      	strh	r3, [r7, #16]
 800eec8:	8a3b      	ldrh	r3, [r7, #16]
 800eeca:	0a1b      	lsrs	r3, r3, #8
 800eecc:	81fb      	strh	r3, [r7, #14]
 800eece:	8a3b      	ldrh	r3, [r7, #16]
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800eed4:	88fa      	ldrh	r2, [r7, #6]
 800eed6:	8a79      	ldrh	r1, [r7, #18]
 800eed8:	8a3b      	ldrh	r3, [r7, #16]
 800eeda:	440b      	add	r3, r1
 800eedc:	429a      	cmp	r2, r3
 800eede:	da49      	bge.n	800ef74 <ff_wtoupper+0xe8>
			switch (cmd) {
 800eee0:	89fb      	ldrh	r3, [r7, #14]
 800eee2:	2b08      	cmp	r3, #8
 800eee4:	d84f      	bhi.n	800ef86 <ff_wtoupper+0xfa>
 800eee6:	a201      	add	r2, pc, #4	; (adr r2, 800eeec <ff_wtoupper+0x60>)
 800eee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeec:	0800ef11 	.word	0x0800ef11
 800eef0:	0800ef23 	.word	0x0800ef23
 800eef4:	0800ef39 	.word	0x0800ef39
 800eef8:	0800ef41 	.word	0x0800ef41
 800eefc:	0800ef49 	.word	0x0800ef49
 800ef00:	0800ef51 	.word	0x0800ef51
 800ef04:	0800ef59 	.word	0x0800ef59
 800ef08:	0800ef61 	.word	0x0800ef61
 800ef0c:	0800ef69 	.word	0x0800ef69
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ef10:	88fa      	ldrh	r2, [r7, #6]
 800ef12:	8a7b      	ldrh	r3, [r7, #18]
 800ef14:	1ad3      	subs	r3, r2, r3
 800ef16:	005b      	lsls	r3, r3, #1
 800ef18:	697a      	ldr	r2, [r7, #20]
 800ef1a:	4413      	add	r3, r2
 800ef1c:	881b      	ldrh	r3, [r3, #0]
 800ef1e:	80fb      	strh	r3, [r7, #6]
 800ef20:	e027      	b.n	800ef72 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ef22:	88fa      	ldrh	r2, [r7, #6]
 800ef24:	8a7b      	ldrh	r3, [r7, #18]
 800ef26:	1ad3      	subs	r3, r2, r3
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	f003 0301 	and.w	r3, r3, #1
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	88fa      	ldrh	r2, [r7, #6]
 800ef32:	1ad3      	subs	r3, r2, r3
 800ef34:	80fb      	strh	r3, [r7, #6]
 800ef36:	e01c      	b.n	800ef72 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ef38:	88fb      	ldrh	r3, [r7, #6]
 800ef3a:	3b10      	subs	r3, #16
 800ef3c:	80fb      	strh	r3, [r7, #6]
 800ef3e:	e018      	b.n	800ef72 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ef40:	88fb      	ldrh	r3, [r7, #6]
 800ef42:	3b20      	subs	r3, #32
 800ef44:	80fb      	strh	r3, [r7, #6]
 800ef46:	e014      	b.n	800ef72 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ef48:	88fb      	ldrh	r3, [r7, #6]
 800ef4a:	3b30      	subs	r3, #48	; 0x30
 800ef4c:	80fb      	strh	r3, [r7, #6]
 800ef4e:	e010      	b.n	800ef72 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ef50:	88fb      	ldrh	r3, [r7, #6]
 800ef52:	3b1a      	subs	r3, #26
 800ef54:	80fb      	strh	r3, [r7, #6]
 800ef56:	e00c      	b.n	800ef72 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ef58:	88fb      	ldrh	r3, [r7, #6]
 800ef5a:	3308      	adds	r3, #8
 800ef5c:	80fb      	strh	r3, [r7, #6]
 800ef5e:	e008      	b.n	800ef72 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ef60:	88fb      	ldrh	r3, [r7, #6]
 800ef62:	3b50      	subs	r3, #80	; 0x50
 800ef64:	80fb      	strh	r3, [r7, #6]
 800ef66:	e004      	b.n	800ef72 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ef68:	88fb      	ldrh	r3, [r7, #6]
 800ef6a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ef6e:	80fb      	strh	r3, [r7, #6]
 800ef70:	bf00      	nop
			}
			break;
 800ef72:	e008      	b.n	800ef86 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ef74:	89fb      	ldrh	r3, [r7, #14]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d195      	bne.n	800eea6 <ff_wtoupper+0x1a>
 800ef7a:	8a3b      	ldrh	r3, [r7, #16]
 800ef7c:	005b      	lsls	r3, r3, #1
 800ef7e:	697a      	ldr	r2, [r7, #20]
 800ef80:	4413      	add	r3, r2
 800ef82:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ef84:	e78f      	b.n	800eea6 <ff_wtoupper+0x1a>
			break;
 800ef86:	bf00      	nop
	}

	return chr;
 800ef88:	88fb      	ldrh	r3, [r7, #6]
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	371c      	adds	r7, #28
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef94:	4770      	bx	lr
 800ef96:	bf00      	nop
 800ef98:	0800fba8 	.word	0x0800fba8
 800ef9c:	0800fd9c 	.word	0x0800fd9c

0800efa0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800efa4:	2201      	movs	r2, #1
 800efa6:	490e      	ldr	r1, [pc, #56]	; (800efe0 <MX_USB_HOST_Init+0x40>)
 800efa8:	480e      	ldr	r0, [pc, #56]	; (800efe4 <MX_USB_HOST_Init+0x44>)
 800efaa:	f7fb f8b5 	bl	800a118 <USBH_Init>
 800efae:	4603      	mov	r3, r0
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d001      	beq.n	800efb8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800efb4:	f7f2 fc7e 	bl	80018b4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800efb8:	490b      	ldr	r1, [pc, #44]	; (800efe8 <MX_USB_HOST_Init+0x48>)
 800efba:	480a      	ldr	r0, [pc, #40]	; (800efe4 <MX_USB_HOST_Init+0x44>)
 800efbc:	f7fb f93a 	bl	800a234 <USBH_RegisterClass>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d001      	beq.n	800efca <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800efc6:	f7f2 fc75 	bl	80018b4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800efca:	4806      	ldr	r0, [pc, #24]	; (800efe4 <MX_USB_HOST_Init+0x44>)
 800efcc:	f7fb f9be 	bl	800a34c <USBH_Start>
 800efd0:	4603      	mov	r3, r0
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d001      	beq.n	800efda <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800efd6:	f7f2 fc6d 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800efda:	bf00      	nop
 800efdc:	bd80      	pop	{r7, pc}
 800efde:	bf00      	nop
 800efe0:	0800f001 	.word	0x0800f001
 800efe4:	20001dec 	.word	0x20001dec
 800efe8:	20000048 	.word	0x20000048

0800efec <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800eff0:	4802      	ldr	r0, [pc, #8]	; (800effc <MX_USB_HOST_Process+0x10>)
 800eff2:	f7fb f9bb 	bl	800a36c <USBH_Process>
}
 800eff6:	bf00      	nop
 800eff8:	bd80      	pop	{r7, pc}
 800effa:	bf00      	nop
 800effc:	20001dec 	.word	0x20001dec

0800f000 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f000:	b480      	push	{r7}
 800f002:	b083      	sub	sp, #12
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	460b      	mov	r3, r1
 800f00a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f00c:	78fb      	ldrb	r3, [r7, #3]
 800f00e:	3b01      	subs	r3, #1
 800f010:	2b04      	cmp	r3, #4
 800f012:	d819      	bhi.n	800f048 <USBH_UserProcess+0x48>
 800f014:	a201      	add	r2, pc, #4	; (adr r2, 800f01c <USBH_UserProcess+0x1c>)
 800f016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f01a:	bf00      	nop
 800f01c:	0800f049 	.word	0x0800f049
 800f020:	0800f039 	.word	0x0800f039
 800f024:	0800f049 	.word	0x0800f049
 800f028:	0800f041 	.word	0x0800f041
 800f02c:	0800f031 	.word	0x0800f031
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f030:	4b09      	ldr	r3, [pc, #36]	; (800f058 <USBH_UserProcess+0x58>)
 800f032:	2203      	movs	r2, #3
 800f034:	701a      	strb	r2, [r3, #0]
  break;
 800f036:	e008      	b.n	800f04a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f038:	4b07      	ldr	r3, [pc, #28]	; (800f058 <USBH_UserProcess+0x58>)
 800f03a:	2202      	movs	r2, #2
 800f03c:	701a      	strb	r2, [r3, #0]
  break;
 800f03e:	e004      	b.n	800f04a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f040:	4b05      	ldr	r3, [pc, #20]	; (800f058 <USBH_UserProcess+0x58>)
 800f042:	2201      	movs	r2, #1
 800f044:	701a      	strb	r2, [r3, #0]
  break;
 800f046:	e000      	b.n	800f04a <USBH_UserProcess+0x4a>

  default:
  break;
 800f048:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f04a:	bf00      	nop
 800f04c:	370c      	adds	r7, #12
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr
 800f056:	bf00      	nop
 800f058:	200021c4 	.word	0x200021c4

0800f05c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b08a      	sub	sp, #40	; 0x28
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f064:	f107 0314 	add.w	r3, r7, #20
 800f068:	2200      	movs	r2, #0
 800f06a:	601a      	str	r2, [r3, #0]
 800f06c:	605a      	str	r2, [r3, #4]
 800f06e:	609a      	str	r2, [r3, #8]
 800f070:	60da      	str	r2, [r3, #12]
 800f072:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f07c:	d147      	bne.n	800f10e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f07e:	2300      	movs	r3, #0
 800f080:	613b      	str	r3, [r7, #16]
 800f082:	4b25      	ldr	r3, [pc, #148]	; (800f118 <HAL_HCD_MspInit+0xbc>)
 800f084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f086:	4a24      	ldr	r2, [pc, #144]	; (800f118 <HAL_HCD_MspInit+0xbc>)
 800f088:	f043 0301 	orr.w	r3, r3, #1
 800f08c:	6313      	str	r3, [r2, #48]	; 0x30
 800f08e:	4b22      	ldr	r3, [pc, #136]	; (800f118 <HAL_HCD_MspInit+0xbc>)
 800f090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f092:	f003 0301 	and.w	r3, r3, #1
 800f096:	613b      	str	r3, [r7, #16]
 800f098:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f09a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f09e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f0a8:	f107 0314 	add.w	r3, r7, #20
 800f0ac:	4619      	mov	r1, r3
 800f0ae:	481b      	ldr	r0, [pc, #108]	; (800f11c <HAL_HCD_MspInit+0xc0>)
 800f0b0:	f7f3 fe26 	bl	8002d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f0b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f0b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f0ba:	2302      	movs	r3, #2
 800f0bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f0c2:	2303      	movs	r3, #3
 800f0c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f0c6:	230a      	movs	r3, #10
 800f0c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f0ca:	f107 0314 	add.w	r3, r7, #20
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	4812      	ldr	r0, [pc, #72]	; (800f11c <HAL_HCD_MspInit+0xc0>)
 800f0d2:	f7f3 fe15 	bl	8002d00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f0d6:	4b10      	ldr	r3, [pc, #64]	; (800f118 <HAL_HCD_MspInit+0xbc>)
 800f0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0da:	4a0f      	ldr	r2, [pc, #60]	; (800f118 <HAL_HCD_MspInit+0xbc>)
 800f0dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0e0:	6353      	str	r3, [r2, #52]	; 0x34
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	60fb      	str	r3, [r7, #12]
 800f0e6:	4b0c      	ldr	r3, [pc, #48]	; (800f118 <HAL_HCD_MspInit+0xbc>)
 800f0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0ea:	4a0b      	ldr	r2, [pc, #44]	; (800f118 <HAL_HCD_MspInit+0xbc>)
 800f0ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f0f0:	6453      	str	r3, [r2, #68]	; 0x44
 800f0f2:	4b09      	ldr	r3, [pc, #36]	; (800f118 <HAL_HCD_MspInit+0xbc>)
 800f0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f0fa:	60fb      	str	r3, [r7, #12]
 800f0fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f0fe:	2200      	movs	r2, #0
 800f100:	2100      	movs	r1, #0
 800f102:	2043      	movs	r0, #67	; 0x43
 800f104:	f7f3 f987 	bl	8002416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f108:	2043      	movs	r0, #67	; 0x43
 800f10a:	f7f3 f9a0 	bl	800244e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f10e:	bf00      	nop
 800f110:	3728      	adds	r7, #40	; 0x28
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	40023800 	.word	0x40023800
 800f11c:	40020000 	.word	0x40020000

0800f120 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b082      	sub	sp, #8
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f12e:	4618      	mov	r0, r3
 800f130:	f7fb fcfb 	bl	800ab2a <USBH_LL_IncTimer>
}
 800f134:	bf00      	nop
 800f136:	3708      	adds	r7, #8
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}

0800f13c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b082      	sub	sp, #8
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7fb fd33 	bl	800abb6 <USBH_LL_Connect>
}
 800f150:	bf00      	nop
 800f152:	3708      	adds	r7, #8
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b082      	sub	sp, #8
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f166:	4618      	mov	r0, r3
 800f168:	f7fb fd3c 	bl	800abe4 <USBH_LL_Disconnect>
}
 800f16c:	bf00      	nop
 800f16e:	3708      	adds	r7, #8
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}

0800f174 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f174:	b480      	push	{r7}
 800f176:	b083      	sub	sp, #12
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	460b      	mov	r3, r1
 800f17e:	70fb      	strb	r3, [r7, #3]
 800f180:	4613      	mov	r3, r2
 800f182:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f184:	bf00      	nop
 800f186:	370c      	adds	r7, #12
 800f188:	46bd      	mov	sp, r7
 800f18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18e:	4770      	bx	lr

0800f190 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7fb fced 	bl	800ab7e <USBH_LL_PortEnabled>
}
 800f1a4:	bf00      	nop
 800f1a6:	3708      	adds	r7, #8
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b082      	sub	sp, #8
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7fb fced 	bl	800ab9a <USBH_LL_PortDisabled>
}
 800f1c0:	bf00      	nop
 800f1c2:	3708      	adds	r7, #8
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f1d6:	2b01      	cmp	r3, #1
 800f1d8:	d12a      	bne.n	800f230 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f1da:	4a18      	ldr	r2, [pc, #96]	; (800f23c <USBH_LL_Init+0x74>)
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	4a15      	ldr	r2, [pc, #84]	; (800f23c <USBH_LL_Init+0x74>)
 800f1e6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f1ea:	4b14      	ldr	r3, [pc, #80]	; (800f23c <USBH_LL_Init+0x74>)
 800f1ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f1f0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f1f2:	4b12      	ldr	r3, [pc, #72]	; (800f23c <USBH_LL_Init+0x74>)
 800f1f4:	2208      	movs	r2, #8
 800f1f6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f1f8:	4b10      	ldr	r3, [pc, #64]	; (800f23c <USBH_LL_Init+0x74>)
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f1fe:	4b0f      	ldr	r3, [pc, #60]	; (800f23c <USBH_LL_Init+0x74>)
 800f200:	2200      	movs	r2, #0
 800f202:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f204:	4b0d      	ldr	r3, [pc, #52]	; (800f23c <USBH_LL_Init+0x74>)
 800f206:	2202      	movs	r2, #2
 800f208:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f20a:	4b0c      	ldr	r3, [pc, #48]	; (800f23c <USBH_LL_Init+0x74>)
 800f20c:	2200      	movs	r2, #0
 800f20e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f210:	480a      	ldr	r0, [pc, #40]	; (800f23c <USBH_LL_Init+0x74>)
 800f212:	f7f4 f80f 	bl	8003234 <HAL_HCD_Init>
 800f216:	4603      	mov	r3, r0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d001      	beq.n	800f220 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f21c:	f7f2 fb4a 	bl	80018b4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f220:	4806      	ldr	r0, [pc, #24]	; (800f23c <USBH_LL_Init+0x74>)
 800f222:	f7f4 fbf2 	bl	8003a0a <HAL_HCD_GetCurrentFrame>
 800f226:	4603      	mov	r3, r0
 800f228:	4619      	mov	r1, r3
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f7fb fc6e 	bl	800ab0c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f230:	2300      	movs	r3, #0
}
 800f232:	4618      	mov	r0, r3
 800f234:	3708      	adds	r7, #8
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}
 800f23a:	bf00      	nop
 800f23c:	200021c8 	.word	0x200021c8

0800f240 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b084      	sub	sp, #16
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f248:	2300      	movs	r3, #0
 800f24a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f24c:	2300      	movs	r3, #0
 800f24e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f256:	4618      	mov	r0, r3
 800f258:	f7f4 fb61 	bl	800391e <HAL_HCD_Start>
 800f25c:	4603      	mov	r3, r0
 800f25e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f260:	7bfb      	ldrb	r3, [r7, #15]
 800f262:	4618      	mov	r0, r3
 800f264:	f000 f98c 	bl	800f580 <USBH_Get_USB_Status>
 800f268:	4603      	mov	r3, r0
 800f26a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f26c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3710      	adds	r7, #16
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}

0800f276 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f276:	b580      	push	{r7, lr}
 800f278:	b084      	sub	sp, #16
 800f27a:	af00      	add	r7, sp, #0
 800f27c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f27e:	2300      	movs	r3, #0
 800f280:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f282:	2300      	movs	r3, #0
 800f284:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7f4 fb69 	bl	8003964 <HAL_HCD_Stop>
 800f292:	4603      	mov	r3, r0
 800f294:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f296:	7bfb      	ldrb	r3, [r7, #15]
 800f298:	4618      	mov	r0, r3
 800f29a:	f000 f971 	bl	800f580 <USBH_Get_USB_Status>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f2a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3710      	adds	r7, #16
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b084      	sub	sp, #16
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7f4 fbb1 	bl	8003a26 <HAL_HCD_GetCurrentSpeed>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	2b02      	cmp	r3, #2
 800f2c8:	d00c      	beq.n	800f2e4 <USBH_LL_GetSpeed+0x38>
 800f2ca:	2b02      	cmp	r3, #2
 800f2cc:	d80d      	bhi.n	800f2ea <USBH_LL_GetSpeed+0x3e>
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d002      	beq.n	800f2d8 <USBH_LL_GetSpeed+0x2c>
 800f2d2:	2b01      	cmp	r3, #1
 800f2d4:	d003      	beq.n	800f2de <USBH_LL_GetSpeed+0x32>
 800f2d6:	e008      	b.n	800f2ea <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f2d8:	2300      	movs	r3, #0
 800f2da:	73fb      	strb	r3, [r7, #15]
    break;
 800f2dc:	e008      	b.n	800f2f0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f2de:	2301      	movs	r3, #1
 800f2e0:	73fb      	strb	r3, [r7, #15]
    break;
 800f2e2:	e005      	b.n	800f2f0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f2e4:	2302      	movs	r3, #2
 800f2e6:	73fb      	strb	r3, [r7, #15]
    break;
 800f2e8:	e002      	b.n	800f2f0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	73fb      	strb	r3, [r7, #15]
    break;
 800f2ee:	bf00      	nop
  }
  return  speed;
 800f2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3710      	adds	r7, #16
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}

0800f2fa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f2fa:	b580      	push	{r7, lr}
 800f2fc:	b084      	sub	sp, #16
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f302:	2300      	movs	r3, #0
 800f304:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f306:	2300      	movs	r3, #0
 800f308:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f310:	4618      	mov	r0, r3
 800f312:	f7f4 fb44 	bl	800399e <HAL_HCD_ResetPort>
 800f316:	4603      	mov	r3, r0
 800f318:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f31a:	7bfb      	ldrb	r3, [r7, #15]
 800f31c:	4618      	mov	r0, r3
 800f31e:	f000 f92f 	bl	800f580 <USBH_Get_USB_Status>
 800f322:	4603      	mov	r3, r0
 800f324:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f326:	7bbb      	ldrb	r3, [r7, #14]
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3710      	adds	r7, #16
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b082      	sub	sp, #8
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	460b      	mov	r3, r1
 800f33a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f342:	78fa      	ldrb	r2, [r7, #3]
 800f344:	4611      	mov	r1, r2
 800f346:	4618      	mov	r0, r3
 800f348:	f7f4 fb4b 	bl	80039e2 <HAL_HCD_HC_GetXferCount>
 800f34c:	4603      	mov	r3, r0
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3708      	adds	r7, #8
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}

0800f356 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f356:	b590      	push	{r4, r7, lr}
 800f358:	b089      	sub	sp, #36	; 0x24
 800f35a:	af04      	add	r7, sp, #16
 800f35c:	6078      	str	r0, [r7, #4]
 800f35e:	4608      	mov	r0, r1
 800f360:	4611      	mov	r1, r2
 800f362:	461a      	mov	r2, r3
 800f364:	4603      	mov	r3, r0
 800f366:	70fb      	strb	r3, [r7, #3]
 800f368:	460b      	mov	r3, r1
 800f36a:	70bb      	strb	r3, [r7, #2]
 800f36c:	4613      	mov	r3, r2
 800f36e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f370:	2300      	movs	r3, #0
 800f372:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f374:	2300      	movs	r3, #0
 800f376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f37e:	787c      	ldrb	r4, [r7, #1]
 800f380:	78ba      	ldrb	r2, [r7, #2]
 800f382:	78f9      	ldrb	r1, [r7, #3]
 800f384:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f386:	9302      	str	r3, [sp, #8]
 800f388:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f38c:	9301      	str	r3, [sp, #4]
 800f38e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f392:	9300      	str	r3, [sp, #0]
 800f394:	4623      	mov	r3, r4
 800f396:	f7f3 ffaf 	bl	80032f8 <HAL_HCD_HC_Init>
 800f39a:	4603      	mov	r3, r0
 800f39c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f39e:	7bfb      	ldrb	r3, [r7, #15]
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f000 f8ed 	bl	800f580 <USBH_Get_USB_Status>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f3aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3714      	adds	r7, #20
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd90      	pop	{r4, r7, pc}

0800f3b4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b084      	sub	sp, #16
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
 800f3bc:	460b      	mov	r3, r1
 800f3be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f3ce:	78fa      	ldrb	r2, [r7, #3]
 800f3d0:	4611      	mov	r1, r2
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f7f4 f81f 	bl	8003416 <HAL_HCD_HC_Halt>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f3dc:	7bfb      	ldrb	r3, [r7, #15]
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f000 f8ce 	bl	800f580 <USBH_Get_USB_Status>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f3e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3710      	adds	r7, #16
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}

0800f3f2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f3f2:	b590      	push	{r4, r7, lr}
 800f3f4:	b089      	sub	sp, #36	; 0x24
 800f3f6:	af04      	add	r7, sp, #16
 800f3f8:	6078      	str	r0, [r7, #4]
 800f3fa:	4608      	mov	r0, r1
 800f3fc:	4611      	mov	r1, r2
 800f3fe:	461a      	mov	r2, r3
 800f400:	4603      	mov	r3, r0
 800f402:	70fb      	strb	r3, [r7, #3]
 800f404:	460b      	mov	r3, r1
 800f406:	70bb      	strb	r3, [r7, #2]
 800f408:	4613      	mov	r3, r2
 800f40a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f40c:	2300      	movs	r3, #0
 800f40e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f410:	2300      	movs	r3, #0
 800f412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f41a:	787c      	ldrb	r4, [r7, #1]
 800f41c:	78ba      	ldrb	r2, [r7, #2]
 800f41e:	78f9      	ldrb	r1, [r7, #3]
 800f420:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f424:	9303      	str	r3, [sp, #12]
 800f426:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f428:	9302      	str	r3, [sp, #8]
 800f42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42c:	9301      	str	r3, [sp, #4]
 800f42e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f432:	9300      	str	r3, [sp, #0]
 800f434:	4623      	mov	r3, r4
 800f436:	f7f4 f811 	bl	800345c <HAL_HCD_HC_SubmitRequest>
 800f43a:	4603      	mov	r3, r0
 800f43c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f43e:	7bfb      	ldrb	r3, [r7, #15]
 800f440:	4618      	mov	r0, r3
 800f442:	f000 f89d 	bl	800f580 <USBH_Get_USB_Status>
 800f446:	4603      	mov	r3, r0
 800f448:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f44a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3714      	adds	r7, #20
 800f450:	46bd      	mov	sp, r7
 800f452:	bd90      	pop	{r4, r7, pc}

0800f454 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	460b      	mov	r3, r1
 800f45e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f466:	78fa      	ldrb	r2, [r7, #3]
 800f468:	4611      	mov	r1, r2
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7f4 faa5 	bl	80039ba <HAL_HCD_HC_GetURBState>
 800f470:	4603      	mov	r3, r0
}
 800f472:	4618      	mov	r0, r3
 800f474:	3708      	adds	r7, #8
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}

0800f47a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f47a:	b580      	push	{r7, lr}
 800f47c:	b082      	sub	sp, #8
 800f47e:	af00      	add	r7, sp, #0
 800f480:	6078      	str	r0, [r7, #4]
 800f482:	460b      	mov	r3, r1
 800f484:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d103      	bne.n	800f498 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f490:	78fb      	ldrb	r3, [r7, #3]
 800f492:	4618      	mov	r0, r3
 800f494:	f000 f8a0 	bl	800f5d8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f498:	20c8      	movs	r0, #200	; 0xc8
 800f49a:	f7f2 febd 	bl	8002218 <HAL_Delay>
  return USBH_OK;
 800f49e:	2300      	movs	r3, #0
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3708      	adds	r7, #8
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b085      	sub	sp, #20
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
 800f4b0:	460b      	mov	r3, r1
 800f4b2:	70fb      	strb	r3, [r7, #3]
 800f4b4:	4613      	mov	r3, r2
 800f4b6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f4be:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f4c0:	78fb      	ldrb	r3, [r7, #3]
 800f4c2:	68fa      	ldr	r2, [r7, #12]
 800f4c4:	212c      	movs	r1, #44	; 0x2c
 800f4c6:	fb01 f303 	mul.w	r3, r1, r3
 800f4ca:	4413      	add	r3, r2
 800f4cc:	333b      	adds	r3, #59	; 0x3b
 800f4ce:	781b      	ldrb	r3, [r3, #0]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d009      	beq.n	800f4e8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f4d4:	78fb      	ldrb	r3, [r7, #3]
 800f4d6:	68fa      	ldr	r2, [r7, #12]
 800f4d8:	212c      	movs	r1, #44	; 0x2c
 800f4da:	fb01 f303 	mul.w	r3, r1, r3
 800f4de:	4413      	add	r3, r2
 800f4e0:	3354      	adds	r3, #84	; 0x54
 800f4e2:	78ba      	ldrb	r2, [r7, #2]
 800f4e4:	701a      	strb	r2, [r3, #0]
 800f4e6:	e008      	b.n	800f4fa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f4e8:	78fb      	ldrb	r3, [r7, #3]
 800f4ea:	68fa      	ldr	r2, [r7, #12]
 800f4ec:	212c      	movs	r1, #44	; 0x2c
 800f4ee:	fb01 f303 	mul.w	r3, r1, r3
 800f4f2:	4413      	add	r3, r2
 800f4f4:	3355      	adds	r3, #85	; 0x55
 800f4f6:	78ba      	ldrb	r2, [r7, #2]
 800f4f8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f4fa:	2300      	movs	r3, #0
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3714      	adds	r7, #20
 800f500:	46bd      	mov	sp, r7
 800f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f506:	4770      	bx	lr

0800f508 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f508:	b480      	push	{r7}
 800f50a:	b085      	sub	sp, #20
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	460b      	mov	r3, r1
 800f512:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800f514:	2300      	movs	r3, #0
 800f516:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f51e:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800f520:	78fb      	ldrb	r3, [r7, #3]
 800f522:	68ba      	ldr	r2, [r7, #8]
 800f524:	212c      	movs	r1, #44	; 0x2c
 800f526:	fb01 f303 	mul.w	r3, r1, r3
 800f52a:	4413      	add	r3, r2
 800f52c:	333b      	adds	r3, #59	; 0x3b
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d009      	beq.n	800f548 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800f534:	78fb      	ldrb	r3, [r7, #3]
 800f536:	68ba      	ldr	r2, [r7, #8]
 800f538:	212c      	movs	r1, #44	; 0x2c
 800f53a:	fb01 f303 	mul.w	r3, r1, r3
 800f53e:	4413      	add	r3, r2
 800f540:	3354      	adds	r3, #84	; 0x54
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	73fb      	strb	r3, [r7, #15]
 800f546:	e008      	b.n	800f55a <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800f548:	78fb      	ldrb	r3, [r7, #3]
 800f54a:	68ba      	ldr	r2, [r7, #8]
 800f54c:	212c      	movs	r1, #44	; 0x2c
 800f54e:	fb01 f303 	mul.w	r3, r1, r3
 800f552:	4413      	add	r3, r2
 800f554:	3355      	adds	r3, #85	; 0x55
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800f55a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	3714      	adds	r7, #20
 800f560:	46bd      	mov	sp, r7
 800f562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f566:	4770      	bx	lr

0800f568 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f7f2 fe51 	bl	8002218 <HAL_Delay>
}
 800f576:	bf00      	nop
 800f578:	3708      	adds	r7, #8
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
	...

0800f580 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f580:	b480      	push	{r7}
 800f582:	b085      	sub	sp, #20
 800f584:	af00      	add	r7, sp, #0
 800f586:	4603      	mov	r3, r0
 800f588:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f58a:	2300      	movs	r3, #0
 800f58c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f58e:	79fb      	ldrb	r3, [r7, #7]
 800f590:	2b03      	cmp	r3, #3
 800f592:	d817      	bhi.n	800f5c4 <USBH_Get_USB_Status+0x44>
 800f594:	a201      	add	r2, pc, #4	; (adr r2, 800f59c <USBH_Get_USB_Status+0x1c>)
 800f596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f59a:	bf00      	nop
 800f59c:	0800f5ad 	.word	0x0800f5ad
 800f5a0:	0800f5b3 	.word	0x0800f5b3
 800f5a4:	0800f5b9 	.word	0x0800f5b9
 800f5a8:	0800f5bf 	.word	0x0800f5bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	73fb      	strb	r3, [r7, #15]
    break;
 800f5b0:	e00b      	b.n	800f5ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f5b2:	2302      	movs	r3, #2
 800f5b4:	73fb      	strb	r3, [r7, #15]
    break;
 800f5b6:	e008      	b.n	800f5ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	73fb      	strb	r3, [r7, #15]
    break;
 800f5bc:	e005      	b.n	800f5ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f5be:	2302      	movs	r3, #2
 800f5c0:	73fb      	strb	r3, [r7, #15]
    break;
 800f5c2:	e002      	b.n	800f5ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f5c4:	2302      	movs	r3, #2
 800f5c6:	73fb      	strb	r3, [r7, #15]
    break;
 800f5c8:	bf00      	nop
  }
  return usb_status;
 800f5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3714      	adds	r7, #20
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d6:	4770      	bx	lr

0800f5d8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b084      	sub	sp, #16
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	4603      	mov	r3, r0
 800f5e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f5e2:	79fb      	ldrb	r3, [r7, #7]
 800f5e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f5e6:	79fb      	ldrb	r3, [r7, #7]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d102      	bne.n	800f5f2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	73fb      	strb	r3, [r7, #15]
 800f5f0:	e001      	b.n	800f5f6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f5f6:	7bfb      	ldrb	r3, [r7, #15]
 800f5f8:	461a      	mov	r2, r3
 800f5fa:	2101      	movs	r1, #1
 800f5fc:	4803      	ldr	r0, [pc, #12]	; (800f60c <MX_DriverVbusFS+0x34>)
 800f5fe:	f7f3 fde7 	bl	80031d0 <HAL_GPIO_WritePin>
}
 800f602:	bf00      	nop
 800f604:	3710      	adds	r7, #16
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop
 800f60c:	40020800 	.word	0x40020800

0800f610 <malloc>:
 800f610:	4b02      	ldr	r3, [pc, #8]	; (800f61c <malloc+0xc>)
 800f612:	4601      	mov	r1, r0
 800f614:	6818      	ldr	r0, [r3, #0]
 800f616:	f000 b82b 	b.w	800f670 <_malloc_r>
 800f61a:	bf00      	nop
 800f61c:	200000b4 	.word	0x200000b4

0800f620 <free>:
 800f620:	4b02      	ldr	r3, [pc, #8]	; (800f62c <free+0xc>)
 800f622:	4601      	mov	r1, r0
 800f624:	6818      	ldr	r0, [r3, #0]
 800f626:	f000 b92b 	b.w	800f880 <_free_r>
 800f62a:	bf00      	nop
 800f62c:	200000b4 	.word	0x200000b4

0800f630 <sbrk_aligned>:
 800f630:	b570      	push	{r4, r5, r6, lr}
 800f632:	4e0e      	ldr	r6, [pc, #56]	; (800f66c <sbrk_aligned+0x3c>)
 800f634:	460c      	mov	r4, r1
 800f636:	6831      	ldr	r1, [r6, #0]
 800f638:	4605      	mov	r5, r0
 800f63a:	b911      	cbnz	r1, 800f642 <sbrk_aligned+0x12>
 800f63c:	f000 f8d6 	bl	800f7ec <_sbrk_r>
 800f640:	6030      	str	r0, [r6, #0]
 800f642:	4621      	mov	r1, r4
 800f644:	4628      	mov	r0, r5
 800f646:	f000 f8d1 	bl	800f7ec <_sbrk_r>
 800f64a:	1c43      	adds	r3, r0, #1
 800f64c:	d00a      	beq.n	800f664 <sbrk_aligned+0x34>
 800f64e:	1cc4      	adds	r4, r0, #3
 800f650:	f024 0403 	bic.w	r4, r4, #3
 800f654:	42a0      	cmp	r0, r4
 800f656:	d007      	beq.n	800f668 <sbrk_aligned+0x38>
 800f658:	1a21      	subs	r1, r4, r0
 800f65a:	4628      	mov	r0, r5
 800f65c:	f000 f8c6 	bl	800f7ec <_sbrk_r>
 800f660:	3001      	adds	r0, #1
 800f662:	d101      	bne.n	800f668 <sbrk_aligned+0x38>
 800f664:	f04f 34ff 	mov.w	r4, #4294967295
 800f668:	4620      	mov	r0, r4
 800f66a:	bd70      	pop	{r4, r5, r6, pc}
 800f66c:	200024d0 	.word	0x200024d0

0800f670 <_malloc_r>:
 800f670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f674:	1ccd      	adds	r5, r1, #3
 800f676:	f025 0503 	bic.w	r5, r5, #3
 800f67a:	3508      	adds	r5, #8
 800f67c:	2d0c      	cmp	r5, #12
 800f67e:	bf38      	it	cc
 800f680:	250c      	movcc	r5, #12
 800f682:	2d00      	cmp	r5, #0
 800f684:	4607      	mov	r7, r0
 800f686:	db01      	blt.n	800f68c <_malloc_r+0x1c>
 800f688:	42a9      	cmp	r1, r5
 800f68a:	d905      	bls.n	800f698 <_malloc_r+0x28>
 800f68c:	230c      	movs	r3, #12
 800f68e:	603b      	str	r3, [r7, #0]
 800f690:	2600      	movs	r6, #0
 800f692:	4630      	mov	r0, r6
 800f694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f698:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f76c <_malloc_r+0xfc>
 800f69c:	f000 f868 	bl	800f770 <__malloc_lock>
 800f6a0:	f8d8 3000 	ldr.w	r3, [r8]
 800f6a4:	461c      	mov	r4, r3
 800f6a6:	bb5c      	cbnz	r4, 800f700 <_malloc_r+0x90>
 800f6a8:	4629      	mov	r1, r5
 800f6aa:	4638      	mov	r0, r7
 800f6ac:	f7ff ffc0 	bl	800f630 <sbrk_aligned>
 800f6b0:	1c43      	adds	r3, r0, #1
 800f6b2:	4604      	mov	r4, r0
 800f6b4:	d155      	bne.n	800f762 <_malloc_r+0xf2>
 800f6b6:	f8d8 4000 	ldr.w	r4, [r8]
 800f6ba:	4626      	mov	r6, r4
 800f6bc:	2e00      	cmp	r6, #0
 800f6be:	d145      	bne.n	800f74c <_malloc_r+0xdc>
 800f6c0:	2c00      	cmp	r4, #0
 800f6c2:	d048      	beq.n	800f756 <_malloc_r+0xe6>
 800f6c4:	6823      	ldr	r3, [r4, #0]
 800f6c6:	4631      	mov	r1, r6
 800f6c8:	4638      	mov	r0, r7
 800f6ca:	eb04 0903 	add.w	r9, r4, r3
 800f6ce:	f000 f88d 	bl	800f7ec <_sbrk_r>
 800f6d2:	4581      	cmp	r9, r0
 800f6d4:	d13f      	bne.n	800f756 <_malloc_r+0xe6>
 800f6d6:	6821      	ldr	r1, [r4, #0]
 800f6d8:	1a6d      	subs	r5, r5, r1
 800f6da:	4629      	mov	r1, r5
 800f6dc:	4638      	mov	r0, r7
 800f6de:	f7ff ffa7 	bl	800f630 <sbrk_aligned>
 800f6e2:	3001      	adds	r0, #1
 800f6e4:	d037      	beq.n	800f756 <_malloc_r+0xe6>
 800f6e6:	6823      	ldr	r3, [r4, #0]
 800f6e8:	442b      	add	r3, r5
 800f6ea:	6023      	str	r3, [r4, #0]
 800f6ec:	f8d8 3000 	ldr.w	r3, [r8]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d038      	beq.n	800f766 <_malloc_r+0xf6>
 800f6f4:	685a      	ldr	r2, [r3, #4]
 800f6f6:	42a2      	cmp	r2, r4
 800f6f8:	d12b      	bne.n	800f752 <_malloc_r+0xe2>
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	605a      	str	r2, [r3, #4]
 800f6fe:	e00f      	b.n	800f720 <_malloc_r+0xb0>
 800f700:	6822      	ldr	r2, [r4, #0]
 800f702:	1b52      	subs	r2, r2, r5
 800f704:	d41f      	bmi.n	800f746 <_malloc_r+0xd6>
 800f706:	2a0b      	cmp	r2, #11
 800f708:	d917      	bls.n	800f73a <_malloc_r+0xca>
 800f70a:	1961      	adds	r1, r4, r5
 800f70c:	42a3      	cmp	r3, r4
 800f70e:	6025      	str	r5, [r4, #0]
 800f710:	bf18      	it	ne
 800f712:	6059      	strne	r1, [r3, #4]
 800f714:	6863      	ldr	r3, [r4, #4]
 800f716:	bf08      	it	eq
 800f718:	f8c8 1000 	streq.w	r1, [r8]
 800f71c:	5162      	str	r2, [r4, r5]
 800f71e:	604b      	str	r3, [r1, #4]
 800f720:	4638      	mov	r0, r7
 800f722:	f104 060b 	add.w	r6, r4, #11
 800f726:	f000 f829 	bl	800f77c <__malloc_unlock>
 800f72a:	f026 0607 	bic.w	r6, r6, #7
 800f72e:	1d23      	adds	r3, r4, #4
 800f730:	1af2      	subs	r2, r6, r3
 800f732:	d0ae      	beq.n	800f692 <_malloc_r+0x22>
 800f734:	1b9b      	subs	r3, r3, r6
 800f736:	50a3      	str	r3, [r4, r2]
 800f738:	e7ab      	b.n	800f692 <_malloc_r+0x22>
 800f73a:	42a3      	cmp	r3, r4
 800f73c:	6862      	ldr	r2, [r4, #4]
 800f73e:	d1dd      	bne.n	800f6fc <_malloc_r+0x8c>
 800f740:	f8c8 2000 	str.w	r2, [r8]
 800f744:	e7ec      	b.n	800f720 <_malloc_r+0xb0>
 800f746:	4623      	mov	r3, r4
 800f748:	6864      	ldr	r4, [r4, #4]
 800f74a:	e7ac      	b.n	800f6a6 <_malloc_r+0x36>
 800f74c:	4634      	mov	r4, r6
 800f74e:	6876      	ldr	r6, [r6, #4]
 800f750:	e7b4      	b.n	800f6bc <_malloc_r+0x4c>
 800f752:	4613      	mov	r3, r2
 800f754:	e7cc      	b.n	800f6f0 <_malloc_r+0x80>
 800f756:	230c      	movs	r3, #12
 800f758:	603b      	str	r3, [r7, #0]
 800f75a:	4638      	mov	r0, r7
 800f75c:	f000 f80e 	bl	800f77c <__malloc_unlock>
 800f760:	e797      	b.n	800f692 <_malloc_r+0x22>
 800f762:	6025      	str	r5, [r4, #0]
 800f764:	e7dc      	b.n	800f720 <_malloc_r+0xb0>
 800f766:	605b      	str	r3, [r3, #4]
 800f768:	deff      	udf	#255	; 0xff
 800f76a:	bf00      	nop
 800f76c:	200024cc 	.word	0x200024cc

0800f770 <__malloc_lock>:
 800f770:	4801      	ldr	r0, [pc, #4]	; (800f778 <__malloc_lock+0x8>)
 800f772:	f000 b875 	b.w	800f860 <__retarget_lock_acquire_recursive>
 800f776:	bf00      	nop
 800f778:	20002610 	.word	0x20002610

0800f77c <__malloc_unlock>:
 800f77c:	4801      	ldr	r0, [pc, #4]	; (800f784 <__malloc_unlock+0x8>)
 800f77e:	f000 b870 	b.w	800f862 <__retarget_lock_release_recursive>
 800f782:	bf00      	nop
 800f784:	20002610 	.word	0x20002610

0800f788 <memset>:
 800f788:	4402      	add	r2, r0
 800f78a:	4603      	mov	r3, r0
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d100      	bne.n	800f792 <memset+0xa>
 800f790:	4770      	bx	lr
 800f792:	f803 1b01 	strb.w	r1, [r3], #1
 800f796:	e7f9      	b.n	800f78c <memset+0x4>

0800f798 <strncpy>:
 800f798:	b510      	push	{r4, lr}
 800f79a:	3901      	subs	r1, #1
 800f79c:	4603      	mov	r3, r0
 800f79e:	b132      	cbz	r2, 800f7ae <strncpy+0x16>
 800f7a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f7a4:	f803 4b01 	strb.w	r4, [r3], #1
 800f7a8:	3a01      	subs	r2, #1
 800f7aa:	2c00      	cmp	r4, #0
 800f7ac:	d1f7      	bne.n	800f79e <strncpy+0x6>
 800f7ae:	441a      	add	r2, r3
 800f7b0:	2100      	movs	r1, #0
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	d100      	bne.n	800f7b8 <strncpy+0x20>
 800f7b6:	bd10      	pop	{r4, pc}
 800f7b8:	f803 1b01 	strb.w	r1, [r3], #1
 800f7bc:	e7f9      	b.n	800f7b2 <strncpy+0x1a>

0800f7be <strstr>:
 800f7be:	780a      	ldrb	r2, [r1, #0]
 800f7c0:	b570      	push	{r4, r5, r6, lr}
 800f7c2:	b96a      	cbnz	r2, 800f7e0 <strstr+0x22>
 800f7c4:	bd70      	pop	{r4, r5, r6, pc}
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d109      	bne.n	800f7de <strstr+0x20>
 800f7ca:	460c      	mov	r4, r1
 800f7cc:	4605      	mov	r5, r0
 800f7ce:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d0f6      	beq.n	800f7c4 <strstr+0x6>
 800f7d6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f7da:	429e      	cmp	r6, r3
 800f7dc:	d0f7      	beq.n	800f7ce <strstr+0x10>
 800f7de:	3001      	adds	r0, #1
 800f7e0:	7803      	ldrb	r3, [r0, #0]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d1ef      	bne.n	800f7c6 <strstr+0x8>
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	e7ec      	b.n	800f7c4 <strstr+0x6>
	...

0800f7ec <_sbrk_r>:
 800f7ec:	b538      	push	{r3, r4, r5, lr}
 800f7ee:	4d06      	ldr	r5, [pc, #24]	; (800f808 <_sbrk_r+0x1c>)
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	4604      	mov	r4, r0
 800f7f4:	4608      	mov	r0, r1
 800f7f6:	602b      	str	r3, [r5, #0]
 800f7f8:	f7f2 fa68 	bl	8001ccc <_sbrk>
 800f7fc:	1c43      	adds	r3, r0, #1
 800f7fe:	d102      	bne.n	800f806 <_sbrk_r+0x1a>
 800f800:	682b      	ldr	r3, [r5, #0]
 800f802:	b103      	cbz	r3, 800f806 <_sbrk_r+0x1a>
 800f804:	6023      	str	r3, [r4, #0]
 800f806:	bd38      	pop	{r3, r4, r5, pc}
 800f808:	2000260c 	.word	0x2000260c

0800f80c <__errno>:
 800f80c:	4b01      	ldr	r3, [pc, #4]	; (800f814 <__errno+0x8>)
 800f80e:	6818      	ldr	r0, [r3, #0]
 800f810:	4770      	bx	lr
 800f812:	bf00      	nop
 800f814:	200000b4 	.word	0x200000b4

0800f818 <__libc_init_array>:
 800f818:	b570      	push	{r4, r5, r6, lr}
 800f81a:	4d0d      	ldr	r5, [pc, #52]	; (800f850 <__libc_init_array+0x38>)
 800f81c:	4c0d      	ldr	r4, [pc, #52]	; (800f854 <__libc_init_array+0x3c>)
 800f81e:	1b64      	subs	r4, r4, r5
 800f820:	10a4      	asrs	r4, r4, #2
 800f822:	2600      	movs	r6, #0
 800f824:	42a6      	cmp	r6, r4
 800f826:	d109      	bne.n	800f83c <__libc_init_array+0x24>
 800f828:	4d0b      	ldr	r5, [pc, #44]	; (800f858 <__libc_init_array+0x40>)
 800f82a:	4c0c      	ldr	r4, [pc, #48]	; (800f85c <__libc_init_array+0x44>)
 800f82c:	f000 f874 	bl	800f918 <_init>
 800f830:	1b64      	subs	r4, r4, r5
 800f832:	10a4      	asrs	r4, r4, #2
 800f834:	2600      	movs	r6, #0
 800f836:	42a6      	cmp	r6, r4
 800f838:	d105      	bne.n	800f846 <__libc_init_array+0x2e>
 800f83a:	bd70      	pop	{r4, r5, r6, pc}
 800f83c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f840:	4798      	blx	r3
 800f842:	3601      	adds	r6, #1
 800f844:	e7ee      	b.n	800f824 <__libc_init_array+0xc>
 800f846:	f855 3b04 	ldr.w	r3, [r5], #4
 800f84a:	4798      	blx	r3
 800f84c:	3601      	adds	r6, #1
 800f84e:	e7f2      	b.n	800f836 <__libc_init_array+0x1e>
 800f850:	0800fe60 	.word	0x0800fe60
 800f854:	0800fe60 	.word	0x0800fe60
 800f858:	0800fe60 	.word	0x0800fe60
 800f85c:	0800fe64 	.word	0x0800fe64

0800f860 <__retarget_lock_acquire_recursive>:
 800f860:	4770      	bx	lr

0800f862 <__retarget_lock_release_recursive>:
 800f862:	4770      	bx	lr

0800f864 <memcpy>:
 800f864:	440a      	add	r2, r1
 800f866:	4291      	cmp	r1, r2
 800f868:	f100 33ff 	add.w	r3, r0, #4294967295
 800f86c:	d100      	bne.n	800f870 <memcpy+0xc>
 800f86e:	4770      	bx	lr
 800f870:	b510      	push	{r4, lr}
 800f872:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f876:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f87a:	4291      	cmp	r1, r2
 800f87c:	d1f9      	bne.n	800f872 <memcpy+0xe>
 800f87e:	bd10      	pop	{r4, pc}

0800f880 <_free_r>:
 800f880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f882:	2900      	cmp	r1, #0
 800f884:	d044      	beq.n	800f910 <_free_r+0x90>
 800f886:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f88a:	9001      	str	r0, [sp, #4]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	f1a1 0404 	sub.w	r4, r1, #4
 800f892:	bfb8      	it	lt
 800f894:	18e4      	addlt	r4, r4, r3
 800f896:	f7ff ff6b 	bl	800f770 <__malloc_lock>
 800f89a:	4a1e      	ldr	r2, [pc, #120]	; (800f914 <_free_r+0x94>)
 800f89c:	9801      	ldr	r0, [sp, #4]
 800f89e:	6813      	ldr	r3, [r2, #0]
 800f8a0:	b933      	cbnz	r3, 800f8b0 <_free_r+0x30>
 800f8a2:	6063      	str	r3, [r4, #4]
 800f8a4:	6014      	str	r4, [r2, #0]
 800f8a6:	b003      	add	sp, #12
 800f8a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f8ac:	f7ff bf66 	b.w	800f77c <__malloc_unlock>
 800f8b0:	42a3      	cmp	r3, r4
 800f8b2:	d908      	bls.n	800f8c6 <_free_r+0x46>
 800f8b4:	6825      	ldr	r5, [r4, #0]
 800f8b6:	1961      	adds	r1, r4, r5
 800f8b8:	428b      	cmp	r3, r1
 800f8ba:	bf01      	itttt	eq
 800f8bc:	6819      	ldreq	r1, [r3, #0]
 800f8be:	685b      	ldreq	r3, [r3, #4]
 800f8c0:	1949      	addeq	r1, r1, r5
 800f8c2:	6021      	streq	r1, [r4, #0]
 800f8c4:	e7ed      	b.n	800f8a2 <_free_r+0x22>
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	685b      	ldr	r3, [r3, #4]
 800f8ca:	b10b      	cbz	r3, 800f8d0 <_free_r+0x50>
 800f8cc:	42a3      	cmp	r3, r4
 800f8ce:	d9fa      	bls.n	800f8c6 <_free_r+0x46>
 800f8d0:	6811      	ldr	r1, [r2, #0]
 800f8d2:	1855      	adds	r5, r2, r1
 800f8d4:	42a5      	cmp	r5, r4
 800f8d6:	d10b      	bne.n	800f8f0 <_free_r+0x70>
 800f8d8:	6824      	ldr	r4, [r4, #0]
 800f8da:	4421      	add	r1, r4
 800f8dc:	1854      	adds	r4, r2, r1
 800f8de:	42a3      	cmp	r3, r4
 800f8e0:	6011      	str	r1, [r2, #0]
 800f8e2:	d1e0      	bne.n	800f8a6 <_free_r+0x26>
 800f8e4:	681c      	ldr	r4, [r3, #0]
 800f8e6:	685b      	ldr	r3, [r3, #4]
 800f8e8:	6053      	str	r3, [r2, #4]
 800f8ea:	440c      	add	r4, r1
 800f8ec:	6014      	str	r4, [r2, #0]
 800f8ee:	e7da      	b.n	800f8a6 <_free_r+0x26>
 800f8f0:	d902      	bls.n	800f8f8 <_free_r+0x78>
 800f8f2:	230c      	movs	r3, #12
 800f8f4:	6003      	str	r3, [r0, #0]
 800f8f6:	e7d6      	b.n	800f8a6 <_free_r+0x26>
 800f8f8:	6825      	ldr	r5, [r4, #0]
 800f8fa:	1961      	adds	r1, r4, r5
 800f8fc:	428b      	cmp	r3, r1
 800f8fe:	bf04      	itt	eq
 800f900:	6819      	ldreq	r1, [r3, #0]
 800f902:	685b      	ldreq	r3, [r3, #4]
 800f904:	6063      	str	r3, [r4, #4]
 800f906:	bf04      	itt	eq
 800f908:	1949      	addeq	r1, r1, r5
 800f90a:	6021      	streq	r1, [r4, #0]
 800f90c:	6054      	str	r4, [r2, #4]
 800f90e:	e7ca      	b.n	800f8a6 <_free_r+0x26>
 800f910:	b003      	add	sp, #12
 800f912:	bd30      	pop	{r4, r5, pc}
 800f914:	200024cc 	.word	0x200024cc

0800f918 <_init>:
 800f918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f91a:	bf00      	nop
 800f91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f91e:	bc08      	pop	{r3}
 800f920:	469e      	mov	lr, r3
 800f922:	4770      	bx	lr

0800f924 <_fini>:
 800f924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f926:	bf00      	nop
 800f928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f92a:	bc08      	pop	{r3}
 800f92c:	469e      	mov	lr, r3
 800f92e:	4770      	bx	lr
