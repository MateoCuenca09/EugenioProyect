
EugenioProyect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102b0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08010448  08010448  00011448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010970  08010970  000120e8  2**0
                  CONTENTS
  4 .ARM          00000008  08010970  08010970  00011970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010978  08010978  000120e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010978  08010978  00011978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801097c  0801097c  0001197c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08010980  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025bc  200000e8  08010a68  000120e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200026a4  08010a68  000126a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000120e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022d54  00000000  00000000  00012118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000061d3  00000000  00000000  00034e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  0003b040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012a0  00000000  00000000  0003c8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db9c  00000000  00000000  0003db68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029620  00000000  00000000  0005b704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092451  00000000  00000000  00084d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117175  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000653c  00000000  00000000  001171b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0011d6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000e8 	.word	0x200000e8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08010430 	.word	0x08010430

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000ec 	.word	0x200000ec
 80001d4:	08010430 	.word	0x08010430

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	603a      	str	r2, [r7, #0]
 800050e:	80fb      	strh	r3, [r7, #6]
 8000510:	460b      	mov	r3, r1
 8000512:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 8000514:	2300      	movs	r3, #0
 8000516:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8000518:	2200      	movs	r2, #0
 800051a:	6839      	ldr	r1, [r7, #0]
 800051c:	481c      	ldr	r0, [pc, #112]	@ (8000590 <AUDIO_OUT_Init+0x8c>)
 800051e:	f000 f90f 	bl	8000740 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 8000522:	4b1b      	ldr	r3, [pc, #108]	@ (8000590 <AUDIO_OUT_Init+0x8c>)
 8000524:	4a1b      	ldr	r2, [pc, #108]	@ (8000594 <AUDIO_OUT_Init+0x90>)
 8000526:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 8000528:	4819      	ldr	r0, [pc, #100]	@ (8000590 <AUDIO_OUT_Init+0x8c>)
 800052a:	f006 f839 	bl	80065a0 <HAL_I2S_GetState>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d103      	bne.n	800053c <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8000534:	2100      	movs	r1, #0
 8000536:	4816      	ldr	r0, [pc, #88]	@ (8000590 <AUDIO_OUT_Init+0x8c>)
 8000538:	f000 f960 	bl	80007fc <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 800053c:	6838      	ldr	r0, [r7, #0]
 800053e:	f000 fa25 	bl	800098c <I2S3_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 8000548:	2301      	movs	r3, #1
 800054a:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d10e      	bne.n	8000570 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8000552:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <AUDIO_OUT_Init+0x94>)
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	2094      	movs	r0, #148	@ 0x94
 8000558:	4798      	blx	r3
 800055a:	4603      	mov	r3, r0
 800055c:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8000560:	2be0      	cmp	r3, #224	@ 0xe0
 8000562:	d103      	bne.n	800056c <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 8000564:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <AUDIO_OUT_Init+0x98>)
 8000566:	4a0c      	ldr	r2, [pc, #48]	@ (8000598 <AUDIO_OUT_Init+0x94>)
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	e001      	b.n	8000570 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 800056c:	2301      	movs	r3, #1
 800056e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d107      	bne.n	8000586 <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8000576:	4b09      	ldr	r3, [pc, #36]	@ (800059c <AUDIO_OUT_Init+0x98>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	681c      	ldr	r4, [r3, #0]
 800057c:	797a      	ldrb	r2, [r7, #5]
 800057e:	88f9      	ldrh	r1, [r7, #6]
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	2094      	movs	r0, #148	@ 0x94
 8000584:	47a0      	blx	r4
  }
  
  return ret;
 8000586:	7bfb      	ldrb	r3, [r7, #15]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3714      	adds	r7, #20
 800058c:	46bd      	mov	sp, r7
 800058e:	bd90      	pop	{r4, r7, pc}
 8000590:	20000108 	.word	0x20000108
 8000594:	40003c00 	.word	0x40003c00
 8000598:	20000004 	.word	0x20000004
 800059c:	20000104 	.word	0x20000104

080005a0 <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 80005aa:	4b10      	ldr	r3, [pc, #64]	@ (80005ec <AUDIO_OUT_Play+0x4c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	b292      	uxth	r2, r2
 80005b4:	6879      	ldr	r1, [r7, #4]
 80005b6:	2094      	movs	r0, #148	@ 0x94
 80005b8:	4798      	blx	r3
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 80005c0:	2301      	movs	r3, #1
 80005c2:	e00f      	b.n	80005e4 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80005ca:	d203      	bcs.n	80005d4 <AUDIO_OUT_Play+0x34>
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	085b      	lsrs	r3, r3, #1
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	e001      	b.n	80005d8 <AUDIO_OUT_Play+0x38>
 80005d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005d8:	461a      	mov	r2, r3
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	4804      	ldr	r0, [pc, #16]	@ (80005f0 <AUDIO_OUT_Play+0x50>)
 80005de:	f005 fc5d 	bl	8005e9c <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005e2:	2300      	movs	r3, #0
  }
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000104 	.word	0x20000104
 80005f0:	20000108 	.word	0x20000108

080005f4 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 80005f8:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <AUDIO_OUT_Pause+0x24>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	691b      	ldr	r3, [r3, #16]
 80005fe:	2094      	movs	r0, #148	@ 0x94
 8000600:	4798      	blx	r3
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 8000608:	2301      	movs	r3, #1
 800060a:	e003      	b.n	8000614 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 800060c:	4803      	ldr	r0, [pc, #12]	@ (800061c <AUDIO_OUT_Pause+0x28>)
 800060e:	f005 fced 	bl	8005fec <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000612:	2300      	movs	r3, #0
  }
}
 8000614:	4618      	mov	r0, r3
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000104 	.word	0x20000104
 800061c:	20000108 	.word	0x20000108

08000620 <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8000624:	4b07      	ldr	r3, [pc, #28]	@ (8000644 <AUDIO_OUT_Resume+0x24>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	2094      	movs	r0, #148	@ 0x94
 800062c:	4798      	blx	r3
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 8000634:	2301      	movs	r3, #1
 8000636:	e003      	b.n	8000640 <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 8000638:	4803      	ldr	r0, [pc, #12]	@ (8000648 <AUDIO_OUT_Resume+0x28>)
 800063a:	f005 fd39 	bl	80060b0 <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800063e:	2300      	movs	r3, #0
  }
}
 8000640:	4618      	mov	r0, r3
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000104 	.word	0x20000104
 8000648:	20000108 	.word	0x20000108

0800064c <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8000654:	480e      	ldr	r0, [pc, #56]	@ (8000690 <AUDIO_OUT_Stop+0x44>)
 8000656:	f005 fdbf 	bl	80061d8 <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <AUDIO_OUT_Stop+0x48>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	6879      	ldr	r1, [r7, #4]
 8000662:	2094      	movs	r0, #148	@ 0x94
 8000664:	4798      	blx	r3
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 800066c:	2301      	movs	r3, #1
 800066e:	e00b      	b.n	8000688 <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d107      	bne.n	8000686 <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(2);
 8000676:	2002      	movs	r0, #2
 8000678:	f001 fe98 	bl	80023ac <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	2110      	movs	r1, #16
 8000680:	4805      	ldr	r0, [pc, #20]	@ (8000698 <AUDIO_OUT_Stop+0x4c>)
 8000682:	f002 fe91 	bl	80033a8 <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000686:	2300      	movs	r3, #0
  }
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000108 	.word	0x20000108
 8000694:	20000104 	.word	0x20000104
 8000698:	40020c00 	.word	0x40020c00

0800069c <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 80006a6:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <AUDIO_OUT_SetVolume+0x2c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	6a1b      	ldr	r3, [r3, #32]
 80006ac:	79fa      	ldrb	r2, [r7, #7]
 80006ae:	4611      	mov	r1, r2
 80006b0:	2094      	movs	r0, #148	@ 0x94
 80006b2:	4798      	blx	r3
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e000      	b.n	80006c0 <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80006be:	2300      	movs	r3, #0
  }
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000104 	.word	0x20000104

080006cc <AUDIO_OUT_SetMute>:
  * @param  Cmd: could be AUDIO_MUTE_ON to mute sound or AUDIO_MUTE_OFF to 
  *         unmute the codec and restore previous volume level.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetMute(uint32_t Cmd)
{ 
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* Call the Codec Mute function */
  if(pAudioDrv->SetMute(AUDIO_I2C_ADDRESS, AUDIO_MUTE_ON) != 0)
 80006d4:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <AUDIO_OUT_SetMute+0x28>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006da:	2101      	movs	r1, #1
 80006dc:	2094      	movs	r0, #148	@ 0x94
 80006de:	4798      	blx	r3
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <AUDIO_OUT_SetMute+0x1e>
  {
    return AUDIO_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e000      	b.n	80006ec <AUDIO_OUT_SetMute+0x20>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80006ea:	2300      	movs	r3, #0
  }
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000104 	.word	0x20000104

080006f8 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a04      	ldr	r2, [pc, #16]	@ (8000718 <HAL_I2S_TxCpltCallback+0x20>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d101      	bne.n	800070e <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 800070a:	f001 fd8b 	bl	8002224 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40003c00 	.word	0x40003c00

0800071c <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a04      	ldr	r2, [pc, #16]	@ (800073c <HAL_I2S_TxHalfCpltCallback+0x20>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d101      	bne.n	8000732 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 800072e:	f001 fd8d 	bl	800224c <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40003c00 	.word	0x40003c00

08000740 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 8000740:	b580      	push	{r7, lr}
 8000742:	b08c      	sub	sp, #48	@ 0x30
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 800074c:	2300      	movs	r3, #0
 800074e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000752:	23ff      	movs	r3, #255	@ 0xff
 8000754:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  
  for(index = 0; index < 8; index++)
 8000758:	2300      	movs	r3, #0
 800075a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800075e:	e010      	b.n	8000782 <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 8000760:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000764:	4a22      	ldr	r2, [pc, #136]	@ (80007f0 <AUDIO_OUT_ClockConfig+0xb0>)
 8000766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	429a      	cmp	r2, r3
 800076e:	d103      	bne.n	8000778 <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 8000770:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000774:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  for(index = 0; index < 8; index++)
 8000778:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800077c:	3301      	adds	r3, #1
 800077e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000782:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000786:	2b07      	cmp	r3, #7
 8000788:	d9ea      	bls.n	8000760 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	4618      	mov	r0, r3
 8000790:	f007 f858 	bl	8007844 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000794:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	2b00      	cmp	r3, #0
 800079e:	d115      	bne.n	80007cc <AUDIO_OUT_ClockConfig+0x8c>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007a0:	2301      	movs	r3, #1
 80007a2:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 80007a4:	2308      	movs	r3, #8
 80007a6:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80007a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80007ac:	4a11      	ldr	r2, [pc, #68]	@ (80007f4 <AUDIO_OUT_ClockConfig+0xb4>)
 80007ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b2:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80007b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80007b8:	4a0f      	ldr	r2, [pc, #60]	@ (80007f8 <AUDIO_OUT_ClockConfig+0xb8>)
 80007ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007be:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4618      	mov	r0, r3
 80007c6:	f006 ff4d 	bl	8007664 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 80007ca:	e00d      	b.n	80007e8 <AUDIO_OUT_ClockConfig+0xa8>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007cc:	2301      	movs	r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 80007d0:	2308      	movs	r3, #8
 80007d2:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80007d4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80007d8:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80007da:	2303      	movs	r3, #3
 80007dc:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4618      	mov	r0, r3
 80007e4:	f006 ff3e 	bl	8007664 <HAL_RCCEx_PeriphCLKConfig>
}
 80007e8:	bf00      	nop
 80007ea:	3730      	adds	r7, #48	@ 0x30
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	0801049c 	.word	0x0801049c
 80007f4:	080104bc 	.word	0x080104bc
 80007f8:	080104dc 	.word	0x080104dc

080007fc <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	@ 0x30
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
 800080a:	4b56      	ldr	r3, [pc, #344]	@ (8000964 <AUDIO_OUT_MspInit+0x168>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080e:	4a55      	ldr	r2, [pc, #340]	@ (8000964 <AUDIO_OUT_MspInit+0x168>)
 8000810:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000814:	6413      	str	r3, [r2, #64]	@ 0x40
 8000816:	4b53      	ldr	r3, [pc, #332]	@ (8000964 <AUDIO_OUT_MspInit+0x168>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	4b4f      	ldr	r3, [pc, #316]	@ (8000964 <AUDIO_OUT_MspInit+0x168>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a4e      	ldr	r2, [pc, #312]	@ (8000964 <AUDIO_OUT_MspInit+0x168>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b4c      	ldr	r3, [pc, #304]	@ (8000964 <AUDIO_OUT_MspInit+0x168>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b48      	ldr	r3, [pc, #288]	@ (8000964 <AUDIO_OUT_MspInit+0x168>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a47      	ldr	r2, [pc, #284]	@ (8000964 <AUDIO_OUT_MspInit+0x168>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b45      	ldr	r3, [pc, #276]	@ (8000964 <AUDIO_OUT_MspInit+0x168>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 800085a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8000868:	2302      	movs	r3, #2
 800086a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 800086c:	2306      	movs	r3, #6
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	483c      	ldr	r0, [pc, #240]	@ (8000968 <AUDIO_OUT_MspInit+0x16c>)
 8000878:	f002 fb2e 	bl	8002ed8 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 800087c:	2310      	movs	r3, #16
 800087e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4839      	ldr	r0, [pc, #228]	@ (800096c <AUDIO_OUT_MspInit+0x170>)
 8000888:	f002 fb26 	bl	8002ed8 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	4b34      	ldr	r3, [pc, #208]	@ (8000964 <AUDIO_OUT_MspInit+0x168>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000894:	4a33      	ldr	r2, [pc, #204]	@ (8000964 <AUDIO_OUT_MspInit+0x168>)
 8000896:	f043 0304 	orr.w	r3, r3, #4
 800089a:	6313      	str	r3, [r2, #48]	@ 0x30
 800089c:	4b31      	ldr	r3, [pc, #196]	@ (8000964 <AUDIO_OUT_MspInit+0x168>)
 800089e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a0:	f003 0304 	and.w	r3, r3, #4
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 80008a8:	2380      	movs	r3, #128	@ 0x80
 80008aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	482d      	ldr	r0, [pc, #180]	@ (8000968 <AUDIO_OUT_MspInit+0x16c>)
 80008b4:	f002 fb10 	bl	8002ed8 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	4b29      	ldr	r3, [pc, #164]	@ (8000964 <AUDIO_OUT_MspInit+0x168>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c0:	4a28      	ldr	r2, [pc, #160]	@ (8000964 <AUDIO_OUT_MspInit+0x168>)
 80008c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c8:	4b26      	ldr	r3, [pc, #152]	@ (8000964 <AUDIO_OUT_MspInit+0x168>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a25      	ldr	r2, [pc, #148]	@ (8000970 <AUDIO_OUT_MspInit+0x174>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d136      	bne.n	800094c <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 80008de:	4b25      	ldr	r3, [pc, #148]	@ (8000974 <AUDIO_OUT_MspInit+0x178>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80008e4:	4b23      	ldr	r3, [pc, #140]	@ (8000974 <AUDIO_OUT_MspInit+0x178>)
 80008e6:	2240      	movs	r2, #64	@ 0x40
 80008e8:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80008ea:	4b22      	ldr	r3, [pc, #136]	@ (8000974 <AUDIO_OUT_MspInit+0x178>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 80008f0:	4b20      	ldr	r3, [pc, #128]	@ (8000974 <AUDIO_OUT_MspInit+0x178>)
 80008f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008f6:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 80008f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000974 <AUDIO_OUT_MspInit+0x178>)
 80008fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008fe:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8000900:	4b1c      	ldr	r3, [pc, #112]	@ (8000974 <AUDIO_OUT_MspInit+0x178>)
 8000902:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000906:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8000908:	4b1a      	ldr	r3, [pc, #104]	@ (8000974 <AUDIO_OUT_MspInit+0x178>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 800090e:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <AUDIO_OUT_MspInit+0x178>)
 8000910:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000914:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8000916:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <AUDIO_OUT_MspInit+0x178>)
 8000918:	2204      	movs	r2, #4
 800091a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800091c:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <AUDIO_OUT_MspInit+0x178>)
 800091e:	2203      	movs	r2, #3
 8000920:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000922:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <AUDIO_OUT_MspInit+0x178>)
 8000924:	2200      	movs	r2, #0
 8000926:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <AUDIO_OUT_MspInit+0x178>)
 800092a:	2200      	movs	r2, #0
 800092c:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 800092e:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <AUDIO_OUT_MspInit+0x178>)
 8000930:	4a11      	ldr	r2, [pc, #68]	@ (8000978 <AUDIO_OUT_MspInit+0x17c>)
 8000932:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a0f      	ldr	r2, [pc, #60]	@ (8000974 <AUDIO_OUT_MspInit+0x178>)
 8000938:	639a      	str	r2, [r3, #56]	@ 0x38
 800093a:	4a0e      	ldr	r2, [pc, #56]	@ (8000974 <AUDIO_OUT_MspInit+0x178>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 8000940:	480c      	ldr	r0, [pc, #48]	@ (8000974 <AUDIO_OUT_MspInit+0x178>)
 8000942:	f001 ff17 	bl	8002774 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 8000946:	480b      	ldr	r0, [pc, #44]	@ (8000974 <AUDIO_OUT_MspInit+0x178>)
 8000948:	f001 fe66 	bl	8002618 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	210e      	movs	r1, #14
 8000950:	202f      	movs	r0, #47	@ 0x2f
 8000952:	f001 fe2a 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 8000956:	202f      	movs	r0, #47	@ 0x2f
 8000958:	f001 fe43 	bl	80025e2 <HAL_NVIC_EnableIRQ>
}
 800095c:	bf00      	nop
 800095e:	3730      	adds	r7, #48	@ 0x30
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40020800 	.word	0x40020800
 800096c:	40020000 	.word	0x40020000
 8000970:	40003c00 	.word	0x40003c00
 8000974:	20000150 	.word	0x20000150
 8000978:	400260b8 	.word	0x400260b8

0800097c <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8000994:	4b17      	ldr	r3, [pc, #92]	@ (80009f4 <I2S3_Init+0x68>)
 8000996:	4a18      	ldr	r2, [pc, #96]	@ (80009f8 <I2S3_Init+0x6c>)
 8000998:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 800099a:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <I2S3_Init+0x68>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	69da      	ldr	r2, [r3, #28]
 80009a0:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <I2S3_Init+0x68>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80009a8:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 80009aa:	4a12      	ldr	r2, [pc, #72]	@ (80009f4 <I2S3_Init+0x68>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 80009b0:	4b10      	ldr	r3, [pc, #64]	@ (80009f4 <I2S3_Init+0x68>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 80009b6:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <I2S3_Init+0x68>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 80009bc:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <I2S3_Init+0x68>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 80009c2:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <I2S3_Init+0x68>)
 80009c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009c8:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <I2S3_Init+0x68>)
 80009cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009d0:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 80009d2:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <I2S3_Init+0x68>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 80009d8:	4806      	ldr	r0, [pc, #24]	@ (80009f4 <I2S3_Init+0x68>)
 80009da:	f005 f91f 	bl	8005c1c <HAL_I2S_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e000      	b.n	80009ea <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 80009e8:	2300      	movs	r3, #0
  }
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000108 	.word	0x20000108
 80009f8:	40003c00 	.word	0x40003c00

080009fc <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <HAL_I2S_ErrorCallback+0x20>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 8000a0e:	f7ff ffb5 	bl	800097c <AUDIO_OUT_Error_CallBack>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40003c00 	.word	0x40003c00

08000a20 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000a24:	4814      	ldr	r0, [pc, #80]	@ (8000a78 <I2Cx_Init+0x58>)
 8000a26:	f004 fd8f 	bl	8005548 <HAL_I2C_GetState>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d121      	bne.n	8000a74 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 8000a30:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <I2Cx_Init+0x58>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <I2Cx_Init+0x5c>)
 8000a34:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8000a36:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <I2Cx_Init+0x58>)
 8000a38:	2243      	movs	r2, #67	@ 0x43
 8000a3a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <I2Cx_Init+0x58>)
 8000a3e:	4a10      	ldr	r2, [pc, #64]	@ (8000a80 <I2Cx_Init+0x60>)
 8000a40:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a42:	4b0d      	ldr	r3, [pc, #52]	@ (8000a78 <I2Cx_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a48:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <I2Cx_Init+0x58>)
 8000a4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a4e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8000a50:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <I2Cx_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8000a56:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <I2Cx_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <I2Cx_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000a62:	4b05      	ldr	r3, [pc, #20]	@ (8000a78 <I2Cx_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000a68:	4803      	ldr	r0, [pc, #12]	@ (8000a78 <I2Cx_Init+0x58>)
 8000a6a:	f000 f86b 	bl	8000b44 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000a6e:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <I2Cx_Init+0x58>)
 8000a70:	f004 f8d6 	bl	8004c20 <HAL_I2C_Init>
  }
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200001b0 	.word	0x200001b0
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	000186a0 	.word	0x000186a0

08000a84 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af04      	add	r7, sp, #16
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	717b      	strb	r3, [r7, #5]
 8000a92:	4613      	mov	r3, r2
 8000a94:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000a9a:	797b      	ldrb	r3, [r7, #5]
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <I2Cx_WriteData+0x48>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	88f9      	ldrh	r1, [r7, #6]
 8000aa4:	9302      	str	r3, [sp, #8]
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	9301      	str	r3, [sp, #4]
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	2301      	movs	r3, #1
 8000ab0:	4807      	ldr	r0, [pc, #28]	@ (8000ad0 <I2Cx_WriteData+0x4c>)
 8000ab2:	f004 fa29 	bl	8004f08 <HAL_I2C_Mem_Write>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000ac0:	f000 f834 	bl	8000b2c <I2Cx_Error>
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	200001b0 	.word	0x200001b0

08000ad4 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af04      	add	r7, sp, #16
 8000ada:	4603      	mov	r3, r0
 8000adc:	460a      	mov	r2, r1
 8000ade:	80fb      	strh	r3, [r7, #6]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000aec:	797b      	ldrb	r3, [r7, #5]
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <I2Cx_ReadData+0x50>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	88f9      	ldrh	r1, [r7, #6]
 8000af6:	9302      	str	r3, [sp, #8]
 8000af8:	2301      	movs	r3, #1
 8000afa:	9301      	str	r3, [sp, #4]
 8000afc:	f107 030e 	add.w	r3, r7, #14
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2301      	movs	r3, #1
 8000b04:	4808      	ldr	r0, [pc, #32]	@ (8000b28 <I2Cx_ReadData+0x54>)
 8000b06:	f004 faf9 	bl	80050fc <HAL_I2C_Mem_Read>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000b14:	f000 f80a 	bl	8000b2c <I2Cx_Error>
  }
  return value;
 8000b18:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000000 	.word	0x20000000
 8000b28:	200001b0 	.word	0x200001b0

08000b2c <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000b30:	4803      	ldr	r0, [pc, #12]	@ (8000b40 <I2Cx_Error+0x14>)
 8000b32:	f004 f9b9 	bl	8004ea8 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000b36:	f7ff ff73 	bl	8000a20 <I2Cx_Init>
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200001b0 	.word	0x200001b0

08000b44 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	4b25      	ldr	r3, [pc, #148]	@ (8000be8 <I2Cx_MspInit+0xa4>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b54:	4a24      	ldr	r2, [pc, #144]	@ (8000be8 <I2Cx_MspInit+0xa4>)
 8000b56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <I2Cx_MspInit+0xa4>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000be8 <I2Cx_MspInit+0xa4>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b70:	4a1d      	ldr	r2, [pc, #116]	@ (8000be8 <I2Cx_MspInit+0xa4>)
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b78:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <I2Cx_MspInit+0xa4>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7c:	f003 0302 	and.w	r3, r3, #2
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000b84:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000b8a:	2312      	movs	r3, #18
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000b92:	2302      	movs	r3, #2
 8000b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000b96:	2304      	movs	r3, #4
 8000b98:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4812      	ldr	r0, [pc, #72]	@ (8000bec <I2Cx_MspInit+0xa8>)
 8000ba2:	f002 f999 	bl	8002ed8 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000ba6:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <I2Cx_MspInit+0xa4>)
 8000ba8:	6a1b      	ldr	r3, [r3, #32]
 8000baa:	4a0f      	ldr	r2, [pc, #60]	@ (8000be8 <I2Cx_MspInit+0xa4>)
 8000bac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bb0:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000be8 <I2Cx_MspInit+0xa4>)
 8000bb4:	6a1b      	ldr	r3, [r3, #32]
 8000bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8000be8 <I2Cx_MspInit+0xa4>)
 8000bb8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000bbc:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	210f      	movs	r1, #15
 8000bc2:	201f      	movs	r0, #31
 8000bc4:	f001 fcf1 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000bc8:	201f      	movs	r0, #31
 8000bca:	f001 fd0a 	bl	80025e2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	210f      	movs	r1, #15
 8000bd2:	2020      	movs	r0, #32
 8000bd4:	f001 fce9 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000bd8:	2020      	movs	r0, #32
 8000bda:	f001 fd02 	bl	80025e2 <HAL_NVIC_EnableIRQ>
}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	@ 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020400 	.word	0x40020400

08000bf0 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b17      	ldr	r3, [pc, #92]	@ (8000c58 <AUDIO_IO_Init+0x68>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a16      	ldr	r2, [pc, #88]	@ (8000c58 <AUDIO_IO_Init+0x68>)
 8000c00:	f043 0308 	orr.w	r3, r3, #8
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b14      	ldr	r3, [pc, #80]	@ (8000c58 <AUDIO_IO_Init+0x68>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0308 	and.w	r3, r3, #8
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000c12:	2310      	movs	r3, #16
 8000c14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	4619      	mov	r1, r3
 8000c26:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <AUDIO_IO_Init+0x6c>)
 8000c28:	f002 f956 	bl	8002ed8 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000c2c:	f7ff fef8 	bl	8000a20 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000c30:	2200      	movs	r2, #0
 8000c32:	2110      	movs	r1, #16
 8000c34:	4809      	ldr	r0, [pc, #36]	@ (8000c5c <AUDIO_IO_Init+0x6c>)
 8000c36:	f002 fbb7 	bl	80033a8 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000c3a:	2005      	movs	r0, #5
 8000c3c:	f001 fbb6 	bl	80023ac <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000c40:	2201      	movs	r2, #1
 8000c42:	2110      	movs	r1, #16
 8000c44:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <AUDIO_IO_Init+0x6c>)
 8000c46:	f002 fbaf 	bl	80033a8 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000c4a:	2005      	movs	r0, #5
 8000c4c:	f001 fbae 	bl	80023ac <HAL_Delay>
}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020c00 	.word	0x40020c00

08000c60 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	71fb      	strb	r3, [r7, #7]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	71bb      	strb	r3, [r7, #6]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	797a      	ldrb	r2, [r7, #5]
 8000c86:	79b9      	ldrb	r1, [r7, #6]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fefb 	bl	8000a84 <I2Cx_WriteData>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	460a      	mov	r2, r1
 8000ca0:	71fb      	strb	r3, [r7, #7]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	79ba      	ldrb	r2, [r7, #6]
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff10 	bl	8000ad4 <I2Cx_ReadData>
 8000cb4:	4603      	mov	r3, r0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <AUDIO_StorageParse>:

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b0d6      	sub	sp, #344	@ 0x158
 8000cc4:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USBHPath);
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	4946      	ldr	r1, [pc, #280]	@ (8000de8 <AUDIO_StorageParse+0x128>)
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f00e fcf9 	bl	800f6c8 <f_opendir>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
  FileList.ptr = 0;
 8000cdc:	4b43      	ldr	r3, [pc, #268]	@ (8000dec <AUDIO_StorageParse+0x12c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8

  if(res == FR_OK)
 8000ce4:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d16c      	bne.n	8000dc6 <AUDIO_StorageParse+0x106>
  {
    while(Appli_state == APPLICATION_READY)
 8000cec:	e067      	b.n	8000dbe <AUDIO_StorageParse+0xfe>
    {
      res = f_readdir(&dir, &fno);
 8000cee:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f00e fd7f 	bl	800f7fa <f_readdir>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
      if(res != FR_OK || fno.fname[0] == 0)
 8000d02:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d15d      	bne.n	8000dc6 <AUDIO_StorageParse+0x106>
 8000d0a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000d0e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000d12:	7d9b      	ldrb	r3, [r3, #22]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d056      	beq.n	8000dc6 <AUDIO_StorageParse+0x106>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000d18:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000d1c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000d20:	7d9b      	ldrb	r3, [r3, #22]
 8000d22:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d24:	d04a      	beq.n	8000dbc <AUDIO_StorageParse+0xfc>
      {
        continue;
      }

      fn = fno.fname;
 8000d26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d2a:	3316      	adds	r3, #22
 8000d2c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000d30:	4b2e      	ldr	r3, [pc, #184]	@ (8000dec <AUDIO_StorageParse+0x12c>)
 8000d32:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000d36:	2b17      	cmp	r3, #23
 8000d38:	d841      	bhi.n	8000dbe <AUDIO_StorageParse+0xfe>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000d3a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000d3e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000d42:	7a1b      	ldrb	r3, [r3, #8]
 8000d44:	f003 0310 	and.w	r3, r3, #16
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d138      	bne.n	8000dbe <AUDIO_StorageParse+0xfe>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000d4c:	4928      	ldr	r1, [pc, #160]	@ (8000df0 <AUDIO_StorageParse+0x130>)
 8000d4e:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8000d52:	f00f fac2 	bl	80102da <strstr>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d107      	bne.n	8000d6c <AUDIO_StorageParse+0xac>
 8000d5c:	4925      	ldr	r1, [pc, #148]	@ (8000df4 <AUDIO_StorageParse+0x134>)
 8000d5e:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8000d62:	f00f faba 	bl	80102da <strstr>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d028      	beq.n	8000dbe <AUDIO_StorageParse+0xfe>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <AUDIO_StorageParse+0x12c>)
 8000d6e:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000d72:	461a      	mov	r2, r3
 8000d74:	4613      	mov	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4413      	add	r3, r2
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8000dec <AUDIO_StorageParse+0x12c>)
 8000d80:	4413      	add	r3, r2
 8000d82:	3301      	adds	r3, #1
 8000d84:	2228      	movs	r2, #40	@ 0x28
 8000d86:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f00f fa92 	bl	80102b4 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000d90:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <AUDIO_StorageParse+0x12c>)
 8000d92:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000d96:	461a      	mov	r2, r3
 8000d98:	4914      	ldr	r1, [pc, #80]	@ (8000dec <AUDIO_StorageParse+0x12c>)
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	4413      	add	r3, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <AUDIO_StorageParse+0x12c>)
 8000dac:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000db0:	3301      	adds	r3, #1
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <AUDIO_StorageParse+0x12c>)
 8000db6:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8
 8000dba:	e000      	b.n	8000dbe <AUDIO_StorageParse+0xfe>
        continue;
 8000dbc:	bf00      	nop
    while(Appli_state == APPLICATION_READY)
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <AUDIO_StorageParse+0x138>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d093      	beq.n	8000cee <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000dc6:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <AUDIO_StorageParse+0x12c>)
 8000dc8:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	@ 0x3d8
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <AUDIO_StorageParse+0x13c>)
 8000dce:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f00e fceb 	bl	800f7ae <f_closedir>
  return res;
 8000dd8:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20001a10 	.word	0x20001a10
 8000dec:	200013d0 	.word	0x200013d0
 8000df0:	08010448 	.word	0x08010448
 8000df4:	0801044c 	.word	0x0801044c
 8000df8:	20002254 	.word	0x20002254
 8000dfc:	20000206 	.word	0x20000206

08000e00 <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK) return NumObs;
 8000e04:	f7ff ff5c 	bl	8000cc0 <AUDIO_StorageParse>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d102      	bne.n	8000e14 <AUDIO_GetWavObjectNumber+0x14>
 8000e0e:	4b03      	ldr	r3, [pc, #12]	@ (8000e1c <AUDIO_GetWavObjectNumber+0x1c>)
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	e000      	b.n	8000e16 <AUDIO_GetWavObjectNumber+0x16>
	else
	{
		while (1);
 8000e14:	e7fe      	b.n	8000e14 <AUDIO_GetWavObjectNumber+0x14>
	}
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000206 	.word	0x20000206

08000e20 <Mount_USB>:

void Mount_USB (void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000e24:	2201      	movs	r2, #1
 8000e26:	4905      	ldr	r1, [pc, #20]	@ (8000e3c <Mount_USB+0x1c>)
 8000e28:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <Mount_USB+0x20>)
 8000e2a:	f00d fe5d 	bl	800eae8 <f_mount>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b04      	ldr	r3, [pc, #16]	@ (8000e44 <Mount_USB+0x24>)
 8000e34:	701a      	strb	r2, [r3, #0]
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20001a10 	.word	0x20001a10
 8000e40:	20001a14 	.word	0x20001a14
 8000e44:	20000204 	.word	0x20000204

08000e48 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	4603      	mov	r3, r0
 8000e52:	81fb      	strh	r3, [r7, #14]
 8000e54:	460b      	mov	r3, r1
 8000e56:	81bb      	strh	r3, [r7, #12]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000e60:	f7ff fec6 	bl	8000bf0 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000e64:	89fb      	ldrh	r3, [r7, #14]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2102      	movs	r1, #2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 fb01 	bl	8001474 <CODEC_IO_Write>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	4413      	add	r3, r2
 8000e7a:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000e7c:	89bb      	ldrh	r3, [r7, #12]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d81b      	bhi.n	8000ebc <cs43l22_Init+0x74>
 8000e84:	a201      	add	r2, pc, #4	@ (adr r2, 8000e8c <cs43l22_Init+0x44>)
 8000e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8a:	bf00      	nop
 8000e8c:	08000e9d 	.word	0x08000e9d
 8000e90:	08000ea5 	.word	0x08000ea5
 8000e94:	08000ead 	.word	0x08000ead
 8000e98:	08000eb5 	.word	0x08000eb5
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000e9c:	4b5b      	ldr	r3, [pc, #364]	@ (800100c <cs43l22_Init+0x1c4>)
 8000e9e:	22fa      	movs	r2, #250	@ 0xfa
 8000ea0:	701a      	strb	r2, [r3, #0]
    break;
 8000ea2:	e00f      	b.n	8000ec4 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000ea4:	4b59      	ldr	r3, [pc, #356]	@ (800100c <cs43l22_Init+0x1c4>)
 8000ea6:	22af      	movs	r2, #175	@ 0xaf
 8000ea8:	701a      	strb	r2, [r3, #0]
    break;
 8000eaa:	e00b      	b.n	8000ec4 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000eac:	4b57      	ldr	r3, [pc, #348]	@ (800100c <cs43l22_Init+0x1c4>)
 8000eae:	22aa      	movs	r2, #170	@ 0xaa
 8000eb0:	701a      	strb	r2, [r3, #0]
    break;
 8000eb2:	e007      	b.n	8000ec4 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000eb4:	4b55      	ldr	r3, [pc, #340]	@ (800100c <cs43l22_Init+0x1c4>)
 8000eb6:	2205      	movs	r2, #5
 8000eb8:	701a      	strb	r2, [r3, #0]
    break;    
 8000eba:	e003      	b.n	8000ec4 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000ebc:	4b53      	ldr	r3, [pc, #332]	@ (800100c <cs43l22_Init+0x1c4>)
 8000ebe:	2205      	movs	r2, #5
 8000ec0:	701a      	strb	r2, [r3, #0]
    break;    
 8000ec2:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000ec4:	89fb      	ldrh	r3, [r7, #14]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	4a50      	ldr	r2, [pc, #320]	@ (800100c <cs43l22_Init+0x1c4>)
 8000eca:	7812      	ldrb	r2, [r2, #0]
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	2104      	movs	r1, #4
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 facf 	bl	8001474 <CODEC_IO_Write>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	4413      	add	r3, r2
 8000ede:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000ee0:	89fb      	ldrh	r3, [r7, #14]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2281      	movs	r2, #129	@ 0x81
 8000ee6:	2105      	movs	r1, #5
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fac3 	bl	8001474 <CODEC_IO_Write>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000ef8:	89fb      	ldrh	r3, [r7, #14]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2204      	movs	r2, #4
 8000efe:	2106      	movs	r1, #6
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 fab7 	bl	8001474 <CODEC_IO_Write>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000f10:	7afa      	ldrb	r2, [r7, #11]
 8000f12:	89fb      	ldrh	r3, [r7, #14]
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f964 	bl	80011e4 <cs43l22_SetVolume>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	4413      	add	r3, r2
 8000f22:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000f24:	89bb      	ldrh	r3, [r7, #12]
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d023      	beq.n	8000f72 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000f2a:	89fb      	ldrh	r3, [r7, #14]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2206      	movs	r2, #6
 8000f30:	210f      	movs	r1, #15
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 fa9e 	bl	8001474 <CODEC_IO_Write>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	4413      	add	r3, r2
 8000f40:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000f42:	89fb      	ldrh	r3, [r7, #14]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2200      	movs	r2, #0
 8000f48:	2124      	movs	r1, #36	@ 0x24
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fa92 	bl	8001474 <CODEC_IO_Write>
 8000f50:	4603      	mov	r3, r0
 8000f52:	461a      	mov	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	4413      	add	r3, r2
 8000f58:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000f5a:	89fb      	ldrh	r3, [r7, #14]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2125      	movs	r1, #37	@ 0x25
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 fa86 	bl	8001474 <CODEC_IO_Write>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	4413      	add	r3, r2
 8000f70:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000f72:	89fb      	ldrh	r3, [r7, #14]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2200      	movs	r2, #0
 8000f78:	210a      	movs	r1, #10
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fa7a 	bl	8001474 <CODEC_IO_Write>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	4413      	add	r3, r2
 8000f88:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000f8a:	89fb      	ldrh	r3, [r7, #14]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2204      	movs	r2, #4
 8000f90:	210e      	movs	r1, #14
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fa6e 	bl	8001474 <CODEC_IO_Write>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000fa2:	89fb      	ldrh	r3, [r7, #14]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2127      	movs	r1, #39	@ 0x27
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fa62 	bl	8001474 <CODEC_IO_Write>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	220f      	movs	r2, #15
 8000fc0:	211f      	movs	r1, #31
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fa56 	bl	8001474 <CODEC_IO_Write>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	4413      	add	r3, r2
 8000fd0:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000fd2:	89fb      	ldrh	r3, [r7, #14]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	220a      	movs	r2, #10
 8000fd8:	211a      	movs	r1, #26
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fa4a 	bl	8001474 <CODEC_IO_Write>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000fea:	89fb      	ldrh	r3, [r7, #14]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	220a      	movs	r2, #10
 8000ff0:	211b      	movs	r1, #27
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fa3e 	bl	8001474 <CODEC_IO_Write>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	4413      	add	r3, r2
 8001000:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8001002:	697b      	ldr	r3, [r7, #20]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000208 	.word	0x20000208

08001010 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8001014:	f7ff fe24 	bl	8000c60 <AUDIO_IO_DeInit>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8001026:	f7ff fde3 	bl	8000bf0 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2101      	movs	r1, #1
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fe30 	bl	8000c96 <AUDIO_IO_Read>
 8001036:	4603      	mov	r3, r0
 8001038:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	f023 0307 	bic.w	r3, r3, #7
 8001040:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8001042:	7bfb      	ldrb	r3, [r7, #15]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	80fb      	strh	r3, [r7, #6]
 8001058:	4613      	mov	r3, r2
 800105a:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8001060:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <cs43l22_Play+0x70>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d123      	bne.n	80010b0 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2206      	movs	r2, #6
 800106e:	210e      	movs	r1, #14
 8001070:	4618      	mov	r0, r3
 8001072:	f000 f9ff 	bl	8001474 <CODEC_IO_Write>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4413      	add	r3, r2
 800107e:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f919 	bl	80012bc <cs43l22_SetMute>
 800108a:	4602      	mov	r2, r0
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	229e      	movs	r2, #158	@ 0x9e
 8001098:	2102      	movs	r1, #2
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f9ea 	bl	8001474 <CODEC_IO_Write>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 80010aa:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <cs43l22_Play+0x70>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 80010b0:	68fb      	ldr	r3, [r7, #12]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000034 	.word	0x20000034

080010c0 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	2101      	movs	r1, #1
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f8f2 	bl	80012bc <cs43l22_SetMute>
 80010d8:	4602      	mov	r2, r0
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4413      	add	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2201      	movs	r2, #1
 80010e6:	2102      	movs	r1, #2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 f9c3 	bl	8001474 <CODEC_IO_Write>
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4413      	add	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]
 
  return counter;
 80010f8:	68fb      	ldr	r3, [r7, #12]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f8ce 	bl	80012bc <cs43l22_SetMute>
 8001120:	4602      	mov	r2, r0
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4413      	add	r3, r2
 8001126:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	e002      	b.n	8001134 <cs43l22_Resume+0x30>
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	3301      	adds	r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2bfe      	cmp	r3, #254	@ 0xfe
 8001138:	d9f9      	bls.n	800112e <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	4a0e      	ldr	r2, [pc, #56]	@ (8001178 <cs43l22_Resume+0x74>)
 8001140:	7812      	ldrb	r2, [r2, #0]
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	2104      	movs	r1, #4
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f994 	bl	8001474 <CODEC_IO_Write>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	229e      	movs	r2, #158	@ 0x9e
 800115c:	2102      	movs	r1, #2
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f988 	bl	8001474 <CODEC_IO_Write>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800116e:	68fb      	ldr	r3, [r7, #12]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000208 	.word	0x20000208

0800117c <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	2101      	movs	r1, #1
 8001190:	4618      	mov	r0, r3
 8001192:	f000 f893 	bl	80012bc <cs43l22_SetMute>
 8001196:	4602      	mov	r2, r0
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2204      	movs	r2, #4
 80011a4:	210e      	movs	r1, #14
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f964 	bl	8001474 <CODEC_IO_Write>
 80011ac:	4603      	mov	r3, r0
 80011ae:	461a      	mov	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	229f      	movs	r2, #159	@ 0x9f
 80011bc:	2102      	movs	r1, #2
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f958 	bl	8001474 <CODEC_IO_Write>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 80011ce:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <cs43l22_Stop+0x64>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
  return counter;    
 80011d4:	68fb      	ldr	r3, [r7, #12]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000034 	.word	0x20000034

080011e4 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	460a      	mov	r2, r1
 80011ee:	80fb      	strh	r3, [r7, #6]
 80011f0:	4613      	mov	r3, r2
 80011f2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80011f8:	797b      	ldrb	r3, [r7, #5]
 80011fa:	2b64      	cmp	r3, #100	@ 0x64
 80011fc:	d80b      	bhi.n	8001216 <cs43l22_SetVolume+0x32>
 80011fe:	797a      	ldrb	r2, [r7, #5]
 8001200:	4613      	mov	r3, r2
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	1a9b      	subs	r3, r3, r2
 8001206:	4a25      	ldr	r2, [pc, #148]	@ (800129c <cs43l22_SetVolume+0xb8>)
 8001208:	fb82 1203 	smull	r1, r2, r2, r3
 800120c:	1152      	asrs	r2, r2, #5
 800120e:	17db      	asrs	r3, r3, #31
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	e000      	b.n	8001218 <cs43l22_SetVolume+0x34>
 8001216:	23ff      	movs	r3, #255	@ 0xff
 8001218:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 800121a:	7afb      	ldrb	r3, [r7, #11]
 800121c:	2be6      	cmp	r3, #230	@ 0xe6
 800121e:	d91c      	bls.n	800125a <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	b2d8      	uxtb	r0, r3
 8001224:	7afb      	ldrb	r3, [r7, #11]
 8001226:	3319      	adds	r3, #25
 8001228:	b2db      	uxtb	r3, r3
 800122a:	461a      	mov	r2, r3
 800122c:	2120      	movs	r1, #32
 800122e:	f000 f921 	bl	8001474 <CODEC_IO_Write>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4413      	add	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	b2d8      	uxtb	r0, r3
 8001240:	7afb      	ldrb	r3, [r7, #11]
 8001242:	3319      	adds	r3, #25
 8001244:	b2db      	uxtb	r3, r3
 8001246:	461a      	mov	r2, r3
 8001248:	2121      	movs	r1, #33	@ 0x21
 800124a:	f000 f913 	bl	8001474 <CODEC_IO_Write>
 800124e:	4603      	mov	r3, r0
 8001250:	461a      	mov	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4413      	add	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	e01b      	b.n	8001292 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	b2d8      	uxtb	r0, r3
 800125e:	7afb      	ldrb	r3, [r7, #11]
 8001260:	3319      	adds	r3, #25
 8001262:	b2db      	uxtb	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	2120      	movs	r1, #32
 8001268:	f000 f904 	bl	8001474 <CODEC_IO_Write>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	b2d8      	uxtb	r0, r3
 800127a:	7afb      	ldrb	r3, [r7, #11]
 800127c:	3319      	adds	r3, #25
 800127e:	b2db      	uxtb	r3, r3
 8001280:	461a      	mov	r2, r3
 8001282:	2121      	movs	r1, #33	@ 0x21
 8001284:	f000 f8f6 	bl	8001474 <CODEC_IO_Write>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4413      	add	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8001292:	68fb      	ldr	r3, [r7, #12]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	51eb851f 	.word	0x51eb851f

080012a0 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	80fb      	strh	r3, [r7, #6]
  return 0;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d124      	bne.n	800131c <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	22ff      	movs	r2, #255	@ 0xff
 80012d8:	2104      	movs	r1, #4
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f8ca 	bl	8001474 <CODEC_IO_Write>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2201      	movs	r2, #1
 80012f0:	2122      	movs	r1, #34	@ 0x22
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f8be 	bl	8001474 <CODEC_IO_Write>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2201      	movs	r2, #1
 8001308:	2123      	movs	r1, #35	@ 0x23
 800130a:	4618      	mov	r0, r3
 800130c:	f000 f8b2 	bl	8001474 <CODEC_IO_Write>
 8001310:	4603      	mov	r3, r0
 8001312:	461a      	mov	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4413      	add	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	e025      	b.n	8001368 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2200      	movs	r2, #0
 8001322:	2122      	movs	r1, #34	@ 0x22
 8001324:	4618      	mov	r0, r3
 8001326:	f000 f8a5 	bl	8001474 <CODEC_IO_Write>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2200      	movs	r2, #0
 800133a:	2123      	movs	r1, #35	@ 0x23
 800133c:	4618      	mov	r0, r3
 800133e:	f000 f899 	bl	8001474 <CODEC_IO_Write>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4413      	add	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	4a08      	ldr	r2, [pc, #32]	@ (8001374 <cs43l22_SetMute+0xb8>)
 8001352:	7812      	ldrb	r2, [r2, #0]
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	2104      	movs	r1, #4
 8001358:	4618      	mov	r0, r3
 800135a:	f000 f88b 	bl	8001474 <CODEC_IO_Write>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4413      	add	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001368:	68fb      	ldr	r3, [r7, #12]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000208 	.word	0x20000208

08001378 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	460a      	mov	r2, r1
 8001382:	80fb      	strh	r3, [r7, #6]
 8001384:	4613      	mov	r3, r2
 8001386:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 800138c:	797b      	ldrb	r3, [r7, #5]
 800138e:	3b01      	subs	r3, #1
 8001390:	2b03      	cmp	r3, #3
 8001392:	d84b      	bhi.n	800142c <cs43l22_SetOutputMode+0xb4>
 8001394:	a201      	add	r2, pc, #4	@ (adr r2, 800139c <cs43l22_SetOutputMode+0x24>)
 8001396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139a:	bf00      	nop
 800139c:	080013ad 	.word	0x080013ad
 80013a0:	080013cd 	.word	0x080013cd
 80013a4:	080013ed 	.word	0x080013ed
 80013a8:	0800140d 	.word	0x0800140d
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	22fa      	movs	r2, #250	@ 0xfa
 80013b2:	2104      	movs	r1, #4
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 f85d 	bl	8001474 <CODEC_IO_Write>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4413      	add	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 80013c4:	4b24      	ldr	r3, [pc, #144]	@ (8001458 <cs43l22_SetOutputMode+0xe0>)
 80013c6:	22fa      	movs	r2, #250	@ 0xfa
 80013c8:	701a      	strb	r2, [r3, #0]
      break;
 80013ca:	e03f      	b.n	800144c <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	22af      	movs	r2, #175	@ 0xaf
 80013d2:	2104      	movs	r1, #4
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 f84d 	bl	8001474 <CODEC_IO_Write>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4413      	add	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 80013e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <cs43l22_SetOutputMode+0xe0>)
 80013e6:	22af      	movs	r2, #175	@ 0xaf
 80013e8:	701a      	strb	r2, [r3, #0]
      break;
 80013ea:	e02f      	b.n	800144c <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	22aa      	movs	r2, #170	@ 0xaa
 80013f2:	2104      	movs	r1, #4
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 f83d 	bl	8001474 <CODEC_IO_Write>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461a      	mov	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4413      	add	r3, r2
 8001402:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001404:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <cs43l22_SetOutputMode+0xe0>)
 8001406:	22aa      	movs	r2, #170	@ 0xaa
 8001408:	701a      	strb	r2, [r3, #0]
      break;
 800140a:	e01f      	b.n	800144c <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2205      	movs	r2, #5
 8001412:	2104      	movs	r1, #4
 8001414:	4618      	mov	r0, r3
 8001416:	f000 f82d 	bl	8001474 <CODEC_IO_Write>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4413      	add	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001424:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <cs43l22_SetOutputMode+0xe0>)
 8001426:	2205      	movs	r2, #5
 8001428:	701a      	strb	r2, [r3, #0]
      break;    
 800142a:	e00f      	b.n	800144c <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2205      	movs	r2, #5
 8001432:	2104      	movs	r1, #4
 8001434:	4618      	mov	r0, r3
 8001436:	f000 f81d 	bl	8001474 <CODEC_IO_Write>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4413      	add	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001444:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <cs43l22_SetOutputMode+0xe0>)
 8001446:	2205      	movs	r2, #5
 8001448:	701a      	strb	r2, [r3, #0]
      break;
 800144a:	bf00      	nop
  }  
  return counter;
 800144c:	68fb      	ldr	r3, [r7, #12]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000208 	.word	0x20000208

0800145c <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
 800147e:	460b      	mov	r3, r1
 8001480:	71bb      	strb	r3, [r7, #6]
 8001482:	4613      	mov	r3, r2
 8001484:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 800148a:	797a      	ldrb	r2, [r7, #5]
 800148c:	79b9      	ldrb	r1, [r7, #6]
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fbec 	bl	8000c6e <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	b2db      	uxtb	r3, r3
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <MX_DMA_Init+0x78>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a1a      	ldr	r2, [pc, #104]	@ (800151c <MX_DMA_Init+0x78>)
 80014b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b18      	ldr	r3, [pc, #96]	@ (800151c <MX_DMA_Init+0x78>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	4b14      	ldr	r3, [pc, #80]	@ (800151c <MX_DMA_Init+0x78>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a13      	ldr	r2, [pc, #76]	@ (800151c <MX_DMA_Init+0x78>)
 80014d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b11      	ldr	r3, [pc, #68]	@ (800151c <MX_DMA_Init+0x78>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	2010      	movs	r0, #16
 80014e8:	f001 f85f 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80014ec:	2010      	movs	r0, #16
 80014ee:	f001 f878 	bl	80025e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	203a      	movs	r0, #58	@ 0x3a
 80014f8:	f001 f857 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80014fc:	203a      	movs	r0, #58	@ 0x3a
 80014fe:	f001 f870 	bl	80025e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	2046      	movs	r0, #70	@ 0x46
 8001508:	f001 f84f 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800150c:	2046      	movs	r0, #70	@ 0x46
 800150e:	f001 f868 	bl	80025e2 <HAL_NVIC_EnableIRQ>

}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800

08001520 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	@ 0x28
 8001524:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b59      	ldr	r3, [pc, #356]	@ (80016a0 <MX_GPIO_Init+0x180>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	4a58      	ldr	r2, [pc, #352]	@ (80016a0 <MX_GPIO_Init+0x180>)
 8001540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001544:	6313      	str	r3, [r2, #48]	@ 0x30
 8001546:	4b56      	ldr	r3, [pc, #344]	@ (80016a0 <MX_GPIO_Init+0x180>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b52      	ldr	r3, [pc, #328]	@ (80016a0 <MX_GPIO_Init+0x180>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	4a51      	ldr	r2, [pc, #324]	@ (80016a0 <MX_GPIO_Init+0x180>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	6313      	str	r3, [r2, #48]	@ 0x30
 8001562:	4b4f      	ldr	r3, [pc, #316]	@ (80016a0 <MX_GPIO_Init+0x180>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b4b      	ldr	r3, [pc, #300]	@ (80016a0 <MX_GPIO_Init+0x180>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a4a      	ldr	r2, [pc, #296]	@ (80016a0 <MX_GPIO_Init+0x180>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4b48      	ldr	r3, [pc, #288]	@ (80016a0 <MX_GPIO_Init+0x180>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b44      	ldr	r3, [pc, #272]	@ (80016a0 <MX_GPIO_Init+0x180>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a43      	ldr	r2, [pc, #268]	@ (80016a0 <MX_GPIO_Init+0x180>)
 8001594:	f043 0308 	orr.w	r3, r3, #8
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b41      	ldr	r3, [pc, #260]	@ (80016a0 <MX_GPIO_Init+0x180>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4b3d      	ldr	r3, [pc, #244]	@ (80016a0 <MX_GPIO_Init+0x180>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a3c      	ldr	r2, [pc, #240]	@ (80016a0 <MX_GPIO_Init+0x180>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b3a      	ldr	r3, [pc, #232]	@ (80016a0 <MX_GPIO_Init+0x180>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|PC1_Pin|PC3_Pin, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	210b      	movs	r1, #11
 80015c6:	4837      	ldr	r0, [pc, #220]	@ (80016a4 <MX_GPIO_Init+0x184>)
 80015c8:	f001 feee 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA1_Pin|PA3_Pin|PA5_Pin|PA7_Pin, GPIO_PIN_SET);
 80015cc:	2201      	movs	r2, #1
 80015ce:	21aa      	movs	r1, #170	@ 0xaa
 80015d0:	4835      	ldr	r0, [pc, #212]	@ (80016a8 <MX_GPIO_Init+0x188>)
 80015d2:	f001 fee9 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PC1_Pin|PC3_Pin;
 80015d6:	230b      	movs	r3, #11
 80015d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015da:	2301      	movs	r3, #1
 80015dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	482d      	ldr	r0, [pc, #180]	@ (80016a4 <MX_GPIO_Init+0x184>)
 80015ee:	f001 fc73 	bl	8002ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015f2:	2301      	movs	r3, #1
 80015f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	4619      	mov	r1, r3
 8001606:	4828      	ldr	r0, [pc, #160]	@ (80016a8 <MX_GPIO_Init+0x188>)
 8001608:	f001 fc66 	bl	8002ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PA1_Pin|PA3_Pin|PA5_Pin|PA7_Pin;
 800160c:	23aa      	movs	r3, #170	@ 0xaa
 800160e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001610:	2301      	movs	r3, #1
 8001612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	4821      	ldr	r0, [pc, #132]	@ (80016a8 <MX_GPIO_Init+0x188>)
 8001624:	f001 fc58 	bl	8002ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PD9_Pin|PD11_Pin|PD13_Pin|PD15_Pin;
 8001628:	f44f 432a 	mov.w	r3, #43520	@ 0xaa00
 800162c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800162e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001634:	2301      	movs	r3, #1
 8001636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	481b      	ldr	r0, [pc, #108]	@ (80016ac <MX_GPIO_Init+0x18c>)
 8001640:	f001 fc4a 	bl	8002ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001644:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164a:	2312      	movs	r3, #18
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800164e:	2301      	movs	r3, #1
 8001650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001656:	2304      	movs	r3, #4
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	4813      	ldr	r0, [pc, #76]	@ (80016b0 <MX_GPIO_Init+0x190>)
 8001662:	f001 fc39 	bl	8002ed8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2100      	movs	r1, #0
 800166a:	2006      	movs	r0, #6
 800166c:	f000 ff9d 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001670:	2006      	movs	r0, #6
 8001672:	f000 ffb6 	bl	80025e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	2017      	movs	r0, #23
 800167c:	f000 ff95 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001680:	2017      	movs	r0, #23
 8001682:	f000 ffae 	bl	80025e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	2028      	movs	r0, #40	@ 0x28
 800168c:	f000 ff8d 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001690:	2028      	movs	r0, #40	@ 0x28
 8001692:	f000 ffa6 	bl	80025e2 <HAL_NVIC_EnableIRQ>

}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	@ 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020800 	.word	0x40020800
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020c00 	.word	0x40020c00
 80016b0:	40020400 	.word	0x40020400

080016b4 <HAL_I2C_MspInit>:
  /* USER CODE END I2C3_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	@ 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a29      	ldr	r2, [pc, #164]	@ (8001778 <HAL_I2C_MspInit+0xc4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d14b      	bne.n	800176e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	4b28      	ldr	r3, [pc, #160]	@ (800177c <HAL_I2C_MspInit+0xc8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a27      	ldr	r2, [pc, #156]	@ (800177c <HAL_I2C_MspInit+0xc8>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b25      	ldr	r3, [pc, #148]	@ (800177c <HAL_I2C_MspInit+0xc8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b21      	ldr	r3, [pc, #132]	@ (800177c <HAL_I2C_MspInit+0xc8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	4a20      	ldr	r2, [pc, #128]	@ (800177c <HAL_I2C_MspInit+0xc8>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	@ 0x30
 8001702:	4b1e      	ldr	r3, [pc, #120]	@ (800177c <HAL_I2C_MspInit+0xc8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800170e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001714:	2312      	movs	r3, #18
 8001716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001720:	2304      	movs	r3, #4
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	4815      	ldr	r0, [pc, #84]	@ (8001780 <HAL_I2C_MspInit+0xcc>)
 800172c:	f001 fbd4 	bl	8002ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001730:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001736:	2312      	movs	r3, #18
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001742:	2304      	movs	r3, #4
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	480d      	ldr	r0, [pc, #52]	@ (8001784 <HAL_I2C_MspInit+0xd0>)
 800174e:	f001 fbc3 	bl	8002ed8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	4b09      	ldr	r3, [pc, #36]	@ (800177c <HAL_I2C_MspInit+0xc8>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	4a08      	ldr	r2, [pc, #32]	@ (800177c <HAL_I2C_MspInit+0xc8>)
 800175c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001760:	6413      	str	r3, [r2, #64]	@ 0x40
 8001762:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_I2C_MspInit+0xc8>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	@ 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40005c00 	.word	0x40005c00
 800177c:	40023800 	.word	0x40023800
 8001780:	40020800 	.word	0x40020800
 8001784:	40020000 	.word	0x40020000

08001788 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0b      	ldr	r2, [pc, #44]	@ (80017c4 <HAL_I2C_MspDeInit+0x3c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d10f      	bne.n	80017ba <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800179a:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <HAL_I2C_MspDeInit+0x40>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <HAL_I2C_MspDeInit+0x40>)
 80017a0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80017a4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80017a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017aa:	4808      	ldr	r0, [pc, #32]	@ (80017cc <HAL_I2C_MspDeInit+0x44>)
 80017ac:	f001 fd18 	bl	80031e0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80017b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017b4:	4806      	ldr	r0, [pc, #24]	@ (80017d0 <HAL_I2C_MspDeInit+0x48>)
 80017b6:	f001 fd13 	bl	80031e0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40005c00 	.word	0x40005c00
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020800 	.word	0x40020800
 80017d0:	40020000 	.word	0x40020000

080017d4 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80017d8:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <MX_I2S3_Init+0x54>)
 80017da:	4a14      	ldr	r2, [pc, #80]	@ (800182c <MX_I2S3_Init+0x58>)
 80017dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80017de:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <MX_I2S3_Init+0x54>)
 80017e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017e4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <MX_I2S3_Init+0x54>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80017ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <MX_I2S3_Init+0x54>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80017f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <MX_I2S3_Init+0x54>)
 80017f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017f8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <MX_I2S3_Init+0x54>)
 80017fc:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001800:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <MX_I2S3_Init+0x54>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001808:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <MX_I2S3_Init+0x54>)
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800180e:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <MX_I2S3_Init+0x54>)
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001814:	4804      	ldr	r0, [pc, #16]	@ (8001828 <MX_I2S3_Init+0x54>)
 8001816:	f004 fa01 	bl	8005c1c <HAL_I2S_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001820:	f000 fa3c 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	2000020c 	.word	0x2000020c
 800182c:	40003c00 	.word	0x40003c00

08001830 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b090      	sub	sp, #64	@ 0x40
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
 8001858:	615a      	str	r2, [r3, #20]
  if(i2sHandle->Instance==SPI3)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a4f      	ldr	r2, [pc, #316]	@ (800199c <HAL_I2S_MspInit+0x16c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	f040 8097 	bne.w	8001994 <HAL_I2S_MspInit+0x164>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001866:	2301      	movs	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800186a:	23c8      	movs	r3, #200	@ 0xc8
 800186c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800186e:	2305      	movs	r3, #5
 8001870:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001872:	2302      	movs	r3, #2
 8001874:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4618      	mov	r0, r3
 800187c:	f005 fef2 	bl	8007664 <HAL_RCCEx_PeriphCLKConfig>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8001886:	f000 fa09 	bl	8001c9c <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	4b44      	ldr	r3, [pc, #272]	@ (80019a0 <HAL_I2S_MspInit+0x170>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	4a43      	ldr	r2, [pc, #268]	@ (80019a0 <HAL_I2S_MspInit+0x170>)
 8001894:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001898:	6413      	str	r3, [r2, #64]	@ 0x40
 800189a:	4b41      	ldr	r3, [pc, #260]	@ (80019a0 <HAL_I2S_MspInit+0x170>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b3d      	ldr	r3, [pc, #244]	@ (80019a0 <HAL_I2S_MspInit+0x170>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	4a3c      	ldr	r2, [pc, #240]	@ (80019a0 <HAL_I2S_MspInit+0x170>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b6:	4b3a      	ldr	r3, [pc, #232]	@ (80019a0 <HAL_I2S_MspInit+0x170>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	4b36      	ldr	r3, [pc, #216]	@ (80019a0 <HAL_I2S_MspInit+0x170>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	4a35      	ldr	r2, [pc, #212]	@ (80019a0 <HAL_I2S_MspInit+0x170>)
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d2:	4b33      	ldr	r3, [pc, #204]	@ (80019a0 <HAL_I2S_MspInit+0x170>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018de:	2310      	movs	r3, #16
 80018e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018ee:	2306      	movs	r3, #6
 80018f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018f6:	4619      	mov	r1, r3
 80018f8:	482a      	ldr	r0, [pc, #168]	@ (80019a4 <HAL_I2S_MspInit+0x174>)
 80018fa:	f001 faed 	bl	8002ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80018fe:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001902:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001910:	2306      	movs	r3, #6
 8001912:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001914:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001918:	4619      	mov	r1, r3
 800191a:	4823      	ldr	r0, [pc, #140]	@ (80019a8 <HAL_I2S_MspInit+0x178>)
 800191c:	f001 fadc 	bl	8002ed8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001920:	4b22      	ldr	r3, [pc, #136]	@ (80019ac <HAL_I2S_MspInit+0x17c>)
 8001922:	4a23      	ldr	r2, [pc, #140]	@ (80019b0 <HAL_I2S_MspInit+0x180>)
 8001924:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001926:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <HAL_I2S_MspInit+0x17c>)
 8001928:	2200      	movs	r2, #0
 800192a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800192c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <HAL_I2S_MspInit+0x17c>)
 800192e:	2240      	movs	r2, #64	@ 0x40
 8001930:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001932:	4b1e      	ldr	r3, [pc, #120]	@ (80019ac <HAL_I2S_MspInit+0x17c>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001938:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <HAL_I2S_MspInit+0x17c>)
 800193a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800193e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001940:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <HAL_I2S_MspInit+0x17c>)
 8001942:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001946:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001948:	4b18      	ldr	r3, [pc, #96]	@ (80019ac <HAL_I2S_MspInit+0x17c>)
 800194a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800194e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001950:	4b16      	ldr	r3, [pc, #88]	@ (80019ac <HAL_I2S_MspInit+0x17c>)
 8001952:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001956:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001958:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <HAL_I2S_MspInit+0x17c>)
 800195a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800195e:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001960:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <HAL_I2S_MspInit+0x17c>)
 8001962:	2204      	movs	r2, #4
 8001964:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001966:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <HAL_I2S_MspInit+0x17c>)
 8001968:	2203      	movs	r2, #3
 800196a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800196c:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <HAL_I2S_MspInit+0x17c>)
 800196e:	2200      	movs	r2, #0
 8001970:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001972:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <HAL_I2S_MspInit+0x17c>)
 8001974:	2200      	movs	r2, #0
 8001976:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001978:	480c      	ldr	r0, [pc, #48]	@ (80019ac <HAL_I2S_MspInit+0x17c>)
 800197a:	f000 fe4d 	bl	8002618 <HAL_DMA_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HAL_I2S_MspInit+0x158>
    {
      Error_Handler();
 8001984:	f000 f98a 	bl	8001c9c <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a08      	ldr	r2, [pc, #32]	@ (80019ac <HAL_I2S_MspInit+0x17c>)
 800198c:	639a      	str	r2, [r3, #56]	@ 0x38
 800198e:	4a07      	ldr	r2, [pc, #28]	@ (80019ac <HAL_I2S_MspInit+0x17c>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001994:	bf00      	nop
 8001996:	3740      	adds	r7, #64	@ 0x40
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40003c00 	.word	0x40003c00
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020000 	.word	0x40020000
 80019a8:	40020800 	.word	0x40020800
 80019ac:	20000254 	.word	0x20000254
 80019b0:	40026088 	.word	0x40026088

080019b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019b8:	f000 fc86 	bl	80022c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019bc:	f000 f8b8 	bl	8001b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c0:	f7ff fdae 	bl	8001520 <MX_GPIO_Init>
  MX_DMA_Init();
 80019c4:	f7ff fd6e 	bl	80014a4 <MX_DMA_Init>
  MX_I2S3_Init();
 80019c8:	f7ff ff04 	bl	80017d4 <MX_I2S3_Init>
  MX_FATFS_Init();
 80019cc:	f007 fc78 	bl	80092c0 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 80019d0:	f00e f872 	bl	800fab8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80019d4:	f00e f896 	bl	800fb04 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

   	    if (Appli_state == APPLICATION_READY)
 80019d8:	4b4c      	ldr	r3, [pc, #304]	@ (8001b0c <main+0x158>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d1f9      	bne.n	80019d4 <main+0x20>
   	    {
   	    	Mount_USB();
 80019e0:	f7ff fa1e 	bl	8000e20 <Mount_USB>
   	    	AUDIO_PLAYER_Start(idx);
 80019e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001b10 <main+0x15c>)
 80019e6:	f993 3000 	ldrsb.w	r3, [r3]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fa9b 	bl	8001f28 <AUDIO_PLAYER_Start>
   	    	//display_cancion(idx);
   	    	Activar_Parlante(idS);
 80019f2:	4b48      	ldr	r3, [pc, #288]	@ (8001b14 <main+0x160>)
 80019f4:	f993 3000 	ldrsb.w	r3, [r3]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 f954 	bl	8001ca8 <Activar_Parlante>
   	    	while (1)
   	    	{
   	    		AUDIO_PLAYER_Process(FALSE);
 8001a00:	2000      	movs	r0, #0
 8001a02:	f000 faf1 	bl	8001fe8 <AUDIO_PLAYER_Process>

   	    		if (next_song)
 8001a06:	4b44      	ldr	r3, [pc, #272]	@ (8001b18 <main+0x164>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d01c      	beq.n	8001a48 <main+0x94>
   	    		{
   	    			HAL_Delay(20);
 8001a0e:	2014      	movs	r0, #20
 8001a10:	f000 fccc 	bl	80023ac <HAL_Delay>
   	    			//AudioState = AUDIO_STATE_PAUSE;
   	    			idx = idx + 1;
 8001a14:	4b3e      	ldr	r3, [pc, #248]	@ (8001b10 <main+0x15c>)
 8001a16:	f993 3000 	ldrsb.w	r3, [r3]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	b25a      	sxtb	r2, r3
 8001a22:	4b3b      	ldr	r3, [pc, #236]	@ (8001b10 <main+0x15c>)
 8001a24:	701a      	strb	r2, [r3, #0]
   	    			/* Control de indice */
   	    			if(idx>(cantidad_wavs-1))
 8001a26:	4b3d      	ldr	r3, [pc, #244]	@ (8001b1c <main+0x168>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b38      	ldr	r3, [pc, #224]	@ (8001b10 <main+0x15c>)
 8001a2e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	dc02      	bgt.n	8001a3c <main+0x88>
   	    			{
   	    				idx = 0;
 8001a36:	4b36      	ldr	r3, [pc, #216]	@ (8001b10 <main+0x15c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
   	    			}
   	    			next_song = false;
 8001a3c:	4b36      	ldr	r3, [pc, #216]	@ (8001b18 <main+0x164>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
   	    			//display_cancion(idx);
   	    			AudioState = AUDIO_STATE_NEXT;
 8001a42:	4b37      	ldr	r3, [pc, #220]	@ (8001b20 <main+0x16c>)
 8001a44:	2205      	movs	r2, #5
 8001a46:	701a      	strb	r2, [r3, #0]
      	    	};

   	    		if (next_speaker)
 8001a48:	4b36      	ldr	r3, [pc, #216]	@ (8001b24 <main+0x170>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d01d      	beq.n	8001a8c <main+0xd8>
   	    		{
   	    			idS = idS + 1;
 8001a50:	4b30      	ldr	r3, [pc, #192]	@ (8001b14 <main+0x160>)
 8001a52:	f993 3000 	ldrsb.w	r3, [r3]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	3301      	adds	r3, #1
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	b25a      	sxtb	r2, r3
 8001a5e:	4b2d      	ldr	r3, [pc, #180]	@ (8001b14 <main+0x160>)
 8001a60:	701a      	strb	r2, [r3, #0]
   	    			/* Control de indice */
   	    			if(idS>NUM_PARLANTES - 1)
 8001a62:	4b2c      	ldr	r3, [pc, #176]	@ (8001b14 <main+0x160>)
 8001a64:	f993 3000 	ldrsb.w	r3, [r3]
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	dd02      	ble.n	8001a72 <main+0xbe>
   	    			{
   	    				idS = 0;
 8001a6c:	4b29      	ldr	r3, [pc, #164]	@ (8001b14 <main+0x160>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
   	    			}
   	    			Activar_Parlante(idS);
 8001a72:	4b28      	ldr	r3, [pc, #160]	@ (8001b14 <main+0x160>)
 8001a74:	f993 3000 	ldrsb.w	r3, [r3]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f914 	bl	8001ca8 <Activar_Parlante>
   	    			next_speaker = false;
 8001a80:	4b28      	ldr	r3, [pc, #160]	@ (8001b24 <main+0x170>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
   	    			//display_cancion(idx);
   	    			AudioState = AUDIO_STATE_PLAY;
 8001a86:	4b26      	ldr	r3, [pc, #152]	@ (8001b20 <main+0x16c>)
 8001a88:	2203      	movs	r2, #3
 8001a8a:	701a      	strb	r2, [r3, #0]
   	    		}

   	    		if (prev_song)
 8001a8c:	4b26      	ldr	r3, [pc, #152]	@ (8001b28 <main+0x174>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d01a      	beq.n	8001aca <main+0x116>
   	    		{
   	    			idx = idx - 1;
 8001a94:	4b1e      	ldr	r3, [pc, #120]	@ (8001b10 <main+0x15c>)
 8001a96:	f993 3000 	ldrsb.w	r3, [r3]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	b25a      	sxtb	r2, r3
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b10 <main+0x15c>)
 8001aa4:	701a      	strb	r2, [r3, #0]
   	    			/* Control de indice */
   	    			if(idx<0)
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b10 <main+0x15c>)
 8001aa8:	f993 3000 	ldrsb.w	r3, [r3]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	da06      	bge.n	8001abe <main+0x10a>
   	    			{
   	    				idx = cantidad_wavs-1;
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b1c <main+0x168>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	b25a      	sxtb	r2, r3
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <main+0x15c>)
 8001abc:	701a      	strb	r2, [r3, #0]
   	    			}
   	    			AudioState = AUDIO_STATE_PREVIOUS;
 8001abe:	4b18      	ldr	r3, [pc, #96]	@ (8001b20 <main+0x16c>)
 8001ac0:	2206      	movs	r2, #6
 8001ac2:	701a      	strb	r2, [r3, #0]
   	    			prev_song = false;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <main+0x174>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
   	    			//display_cancion(idx);
   	    		};

   	    		if (prev_speaker)
 8001aca:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <main+0x178>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d096      	beq.n	8001a00 <main+0x4c>

   	    		{
   	    			idS = idS - 1;
 8001ad2:	4b10      	ldr	r3, [pc, #64]	@ (8001b14 <main+0x160>)
 8001ad4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	3b01      	subs	r3, #1
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	b25a      	sxtb	r2, r3
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <main+0x160>)
 8001ae2:	701a      	strb	r2, [r3, #0]
   	    			/* Control de indice */
   	    			if(idS<0)
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <main+0x160>)
 8001ae6:	f993 3000 	ldrsb.w	r3, [r3]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	da02      	bge.n	8001af4 <main+0x140>
   	    			{
   	    				idS = NUM_PARLANTES - 1;
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <main+0x160>)
 8001af0:	2205      	movs	r2, #5
 8001af2:	701a      	strb	r2, [r3, #0]
   	    			}
   	    			Activar_Parlante(idS);
 8001af4:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <main+0x160>)
 8001af6:	f993 3000 	ldrsb.w	r3, [r3]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 f8d3 	bl	8001ca8 <Activar_Parlante>
   	    			prev_speaker = false;
 8001b02:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <main+0x178>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
   	    		AUDIO_PLAYER_Process(FALSE);
 8001b08:	e77a      	b.n	8001a00 <main+0x4c>
 8001b0a:	bf00      	nop
 8001b0c:	20002254 	.word	0x20002254
 8001b10:	200002ba 	.word	0x200002ba
 8001b14:	200002bb 	.word	0x200002bb
 8001b18:	200002b6 	.word	0x200002b6
 8001b1c:	20000035 	.word	0x20000035
 8001b20:	200013cc 	.word	0x200013cc
 8001b24:	200002b8 	.word	0x200002b8
 8001b28:	200002b7 	.word	0x200002b7
 8001b2c:	200002b9 	.word	0x200002b9

08001b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b094      	sub	sp, #80	@ 0x50
 8001b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b36:	f107 0320 	add.w	r3, r7, #32
 8001b3a:	2230      	movs	r2, #48	@ 0x30
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f00e fbb0 	bl	80102a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b54:	2300      	movs	r3, #0
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	4b27      	ldr	r3, [pc, #156]	@ (8001bf8 <SystemClock_Config+0xc8>)
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	4a26      	ldr	r2, [pc, #152]	@ (8001bf8 <SystemClock_Config+0xc8>)
 8001b5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b62:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b64:	4b24      	ldr	r3, [pc, #144]	@ (8001bf8 <SystemClock_Config+0xc8>)
 8001b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b70:	2300      	movs	r3, #0
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	4b21      	ldr	r3, [pc, #132]	@ (8001bfc <SystemClock_Config+0xcc>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a20      	ldr	r2, [pc, #128]	@ (8001bfc <SystemClock_Config+0xcc>)
 8001b7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b1e      	ldr	r3, [pc, #120]	@ (8001bfc <SystemClock_Config+0xcc>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b96:	2302      	movs	r3, #2
 8001b98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001ba4:	23c0      	movs	r3, #192	@ 0xc0
 8001ba6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ba8:	2304      	movs	r3, #4
 8001baa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001bac:	2308      	movs	r3, #8
 8001bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb0:	f107 0320 	add.w	r3, r7, #32
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f005 f8d1 	bl	8006d5c <HAL_RCC_OscConfig>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bc0:	f000 f86c 	bl	8001c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc4:	230f      	movs	r3, #15
 8001bc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bd0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001bd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001bda:	f107 030c 	add.w	r3, r7, #12
 8001bde:	2103      	movs	r1, #3
 8001be0:	4618      	mov	r0, r3
 8001be2:	f005 fb33 	bl	800724c <HAL_RCC_ClockConfig>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001bec:	f000 f856 	bl	8001c9c <Error_Handler>
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	3750      	adds	r7, #80	@ 0x50
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40007000 	.word	0x40007000

08001c00 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)  // Cambiá esto si usás otro UART
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a07      	ldr	r2, [pc, #28]	@ (8001c2c <HAL_UART_RxCpltCallback+0x2c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d107      	bne.n	8001c22 <HAL_UART_RxCpltCallback+0x22>
    {
        uart_cmd_received = true;
 8001c12:	4b07      	ldr	r3, [pc, #28]	@ (8001c30 <HAL_UART_RxCpltCallback+0x30>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]

        // Reinicia la recepción para recibir el próximo byte
        HAL_UART_Receive_IT(&huart1, &uart_rx_byte, 1);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	4906      	ldr	r1, [pc, #24]	@ (8001c34 <HAL_UART_RxCpltCallback+0x34>)
 8001c1c:	4806      	ldr	r0, [pc, #24]	@ (8001c38 <HAL_UART_RxCpltCallback+0x38>)
 8001c1e:	f005 feb3 	bl	8007988 <HAL_UART_Receive_IT>
    }
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40011000 	.word	0x40011000
 8001c30:	200002b5 	.word	0x200002b5
 8001c34:	200002b4 	.word	0x200002b4
 8001c38:	200002c0 	.word	0x200002c0

08001c3c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == PD15_Pin)
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c4c:	d102      	bne.n	8001c54 <HAL_GPIO_EXTI_Callback+0x18>
	{
		next_song = true;
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c8c <HAL_GPIO_EXTI_Callback+0x50>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == PD13_Pin)
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c5a:	d102      	bne.n	8001c62 <HAL_GPIO_EXTI_Callback+0x26>
	{
		next_speaker = true;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <HAL_GPIO_EXTI_Callback+0x54>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == PD11_Pin)
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c68:	d102      	bne.n	8001c70 <HAL_GPIO_EXTI_Callback+0x34>
	{
		prev_speaker = true;
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <HAL_GPIO_EXTI_Callback+0x58>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == PD9_Pin)
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c76:	d102      	bne.n	8001c7e <HAL_GPIO_EXTI_Callback+0x42>
	{
		prev_song = true;
 8001c78:	4b07      	ldr	r3, [pc, #28]	@ (8001c98 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]
	}
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	200002b6 	.word	0x200002b6
 8001c90:	200002b8 	.word	0x200002b8
 8001c94:	200002b9 	.word	0x200002b9
 8001c98:	200002b7 	.word	0x200002b7

08001c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca0:	b672      	cpsid	i
}
 8001ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <Error_Handler+0x8>

08001ca8 <Activar_Parlante>:
};


void Parlantes_Init(void) {}

void Activar_Parlante(uint8_t numero) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < NUM_PARLANTES; i++) {
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	e021      	b.n	8001cfc <Activar_Parlante+0x54>
        if (i == (numero)) {
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d10d      	bne.n	8001cdc <Activar_Parlante+0x34>
            HAL_GPIO_WritePin(parlantes[i].puerto, parlantes[i].pin, GPIO_PIN_RESET);
 8001cc0:	4a12      	ldr	r2, [pc, #72]	@ (8001d0c <Activar_Parlante+0x64>)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001cc8:	4a10      	ldr	r2, [pc, #64]	@ (8001d0c <Activar_Parlante+0x64>)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4413      	add	r3, r2
 8001cd0:	889b      	ldrh	r3, [r3, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f001 fb67 	bl	80033a8 <HAL_GPIO_WritePin>
 8001cda:	e00c      	b.n	8001cf6 <Activar_Parlante+0x4e>
        } else {
            HAL_GPIO_WritePin(parlantes[i].puerto, parlantes[i].pin, GPIO_PIN_SET);
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8001d0c <Activar_Parlante+0x64>)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001ce4:	4a09      	ldr	r2, [pc, #36]	@ (8001d0c <Activar_Parlante+0x64>)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4413      	add	r3, r2
 8001cec:	889b      	ldrh	r3, [r3, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f001 fb59 	bl	80033a8 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_PARLANTES; i++) {
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	ddda      	ble.n	8001cb8 <Activar_Parlante+0x10>
        }
    }
}
 8001d02:	bf00      	nop
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000038 	.word	0x20000038

08001d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <HAL_MspInit+0x4c>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d5c <HAL_MspInit+0x4c>)
 8001d20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d26:	4b0d      	ldr	r3, [pc, #52]	@ (8001d5c <HAL_MspInit+0x4c>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	603b      	str	r3, [r7, #0]
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <HAL_MspInit+0x4c>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	4a08      	ldr	r2, [pc, #32]	@ (8001d5c <HAL_MspInit+0x4c>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d42:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <HAL_MspInit+0x4c>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d4e:	2007      	movs	r0, #7
 8001d50:	f000 fc20 	bl	8002594 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800

08001d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <NMI_Handler+0x4>

08001d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <HardFault_Handler+0x4>

08001d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <MemManage_Handler+0x4>

08001d78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <BusFault_Handler+0x4>

08001d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <UsageFault_Handler+0x4>

08001d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db6:	f000 fad9 	bl	800236c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f001 fb0a 	bl	80033dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001dd0:	4802      	ldr	r0, [pc, #8]	@ (8001ddc <DMA1_Stream5_IRQHandler+0x10>)
 8001dd2:	f000 fe17 	bl	8002a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000254 	.word	0x20000254

08001de0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PD9_Pin);
 8001de4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001de8:	f001 faf8 	bl	80033dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001df4:	4802      	ldr	r0, [pc, #8]	@ (8001e00 <USART1_IRQHandler+0x10>)
 8001df6:	f005 fdf7 	bl	80079e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200002c0 	.word	0x200002c0

08001e04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PD11_Pin);
 8001e08:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001e0c:	f001 fae6 	bl	80033dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PD13_Pin);
 8001e10:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e14:	f001 fae2 	bl	80033dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PD15_Pin);
 8001e18:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001e1c:	f001 fade 	bl	80033dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e28:	4802      	ldr	r0, [pc, #8]	@ (8001e34 <DMA2_Stream2_IRQHandler+0x10>)
 8001e2a:	f000 fdeb 	bl	8002a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000304 	.word	0x20000304

08001e38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001e3c:	4802      	ldr	r0, [pc, #8]	@ (8001e48 <OTG_FS_IRQHandler+0x10>)
 8001e3e:	f001 fd4f 	bl	80038e0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20002258 	.word	0x20002258

08001e4c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e50:	4802      	ldr	r0, [pc, #8]	@ (8001e5c <DMA2_Stream7_IRQHandler+0x10>)
 8001e52:	f000 fdd7 	bl	8002a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000364 	.word	0x20000364

08001e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e68:	4a14      	ldr	r2, [pc, #80]	@ (8001ebc <_sbrk+0x5c>)
 8001e6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <_sbrk+0x60>)
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e74:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <_sbrk+0x64>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d102      	bne.n	8001e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <_sbrk+0x64>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	@ (8001ec8 <_sbrk+0x68>)
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e82:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d207      	bcs.n	8001ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e90:	f00e fa4a 	bl	8010328 <__errno>
 8001e94:	4603      	mov	r3, r0
 8001e96:	220c      	movs	r2, #12
 8001e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9e:	e009      	b.n	8001eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea0:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ea6:	4b07      	ldr	r3, [pc, #28]	@ (8001ec4 <_sbrk+0x64>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	4a05      	ldr	r2, [pc, #20]	@ (8001ec4 <_sbrk+0x64>)
 8001eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20020000 	.word	0x20020000
 8001ec0:	00000400 	.word	0x00000400
 8001ec4:	200002bc 	.word	0x200002bc
 8001ec8:	200026a8 	.word	0x200026a8

08001ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ed0:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <SystemInit+0x28>)
 8001ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ed6:	4a07      	ldr	r2, [pc, #28]	@ (8001ef4 <SystemInit+0x28>)
 8001ed8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001edc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ee0:	4b04      	ldr	r3, [pc, #16]	@ (8001ef4 <SystemInit+0x28>)
 8001ee2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ee6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 8001f00:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <PlayerInit+0x2c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	2003      	movs	r0, #3
 8001f0c:	f7fe fafa 	bl	8000504 <AUDIO_OUT_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <PlayerInit+0x22>
	{
		return 1;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <PlayerInit+0x24>
	}
	else
	{
		return 0;
 8001f1a:	2300      	movs	r3, #0
	}
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	2000006c 	.word	0x2000006c

08001f28 <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
	UINT bytesread;

  f_close(&WavFile);
 8001f32:	4828      	ldr	r0, [pc, #160]	@ (8001fd4 <AUDIO_PLAYER_Start+0xac>)
 8001f34:	f00d f995 	bl	800f262 <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8001f38:	f7fe ff62 	bl	8000e00 <AUDIO_GetWavObjectNumber>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	461a      	mov	r2, r3
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d93f      	bls.n	8001fc8 <AUDIO_PLAYER_Start+0xa0>
  {

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 8001f48:	79fa      	ldrb	r2, [r7, #7]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4413      	add	r3, r2
 8001f54:	4a20      	ldr	r2, [pc, #128]	@ (8001fd8 <AUDIO_PLAYER_Start+0xb0>)
 8001f56:	4413      	add	r3, r2
 8001f58:	3301      	adds	r3, #1
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	481d      	ldr	r0, [pc, #116]	@ (8001fd4 <AUDIO_PLAYER_Start+0xac>)
 8001f60:	f00c fe08 	bl	800eb74 <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	222c      	movs	r2, #44	@ 0x2c
 8001f6a:	491c      	ldr	r1, [pc, #112]	@ (8001fdc <AUDIO_PLAYER_Start+0xb4>)
 8001f6c:	4819      	ldr	r0, [pc, #100]	@ (8001fd4 <AUDIO_PLAYER_Start+0xac>)
 8001f6e:	f00c ffbb 	bl	800eee8 <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 8001f72:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <AUDIO_PLAYER_Start+0xb4>)
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ffbe 	bl	8001ef8 <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8001f7c:	4b18      	ldr	r3, [pc, #96]	@ (8001fe0 <AUDIO_PLAYER_Start+0xb8>)
 8001f7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 44);
 8001f86:	212c      	movs	r1, #44	@ 0x2c
 8001f88:	4812      	ldr	r0, [pc, #72]	@ (8001fd4 <AUDIO_PLAYER_Start+0xac>)
 8001f8a:	f00d f994 	bl	800f2b6 <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f96:	4912      	ldr	r1, [pc, #72]	@ (8001fe0 <AUDIO_PLAYER_Start+0xb8>)
 8001f98:	480e      	ldr	r0, [pc, #56]	@ (8001fd4 <AUDIO_PLAYER_Start+0xac>)
 8001f9a:	f00c ffa5 	bl	800eee8 <f_read>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d111      	bne.n	8001fc8 <AUDIO_PLAYER_Start+0xa0>
    {
      AudioState = AUDIO_STATE_PLAY;
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <AUDIO_PLAYER_Start+0xbc>)
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00b      	beq.n	8001fc8 <AUDIO_PLAYER_Start+0xa0>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8001fb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fb4:	480a      	ldr	r0, [pc, #40]	@ (8001fe0 <AUDIO_PLAYER_Start+0xb8>)
 8001fb6:	f7fe faf3 	bl	80005a0 <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4a08      	ldr	r2, [pc, #32]	@ (8001fe0 <AUDIO_PLAYER_Start+0xb8>)
 8001fbe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fc2:	6053      	str	r3, [r2, #4]
          return AUDIO_ERROR_NONE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e000      	b.n	8001fca <AUDIO_PLAYER_Start+0xa2>
        }
      }
  }
  return AUDIO_ERROR_IO;
 8001fc8:	2301      	movs	r3, #1
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200017d8 	.word	0x200017d8
 8001fd8:	200013d0 	.word	0x200013d0
 8001fdc:	200017ac 	.word	0x200017ac
 8001fe0:	200003c4 	.word	0x200003c4
 8001fe4:	200013cc 	.word	0x200013cc

08001fe8 <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	75fb      	strb	r3, [r7, #23]
  
  switch(AudioState)
 8001ff6:	4b84      	ldr	r3, [pc, #528]	@ (8002208 <AUDIO_PLAYER_Process+0x220>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	3b03      	subs	r3, #3
 8001ffc:	2b0a      	cmp	r3, #10
 8001ffe:	f200 80fb 	bhi.w	80021f8 <AUDIO_PLAYER_Process+0x210>
 8002002:	a201      	add	r2, pc, #4	@ (adr r2, 8002008 <AUDIO_PLAYER_Process+0x20>)
 8002004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002008:	08002035 	.word	0x08002035
 800200c:	080021f9 	.word	0x080021f9
 8002010:	080020fb 	.word	0x080020fb
 8002014:	08002153 	.word	0x08002153
 8002018:	080021f9 	.word	0x080021f9
 800201c:	080021f9 	.word	0x080021f9
 8002020:	080020e9 	.word	0x080020e9
 8002024:	08002195 	.word	0x08002195
 8002028:	080021a1 	.word	0x080021a1
 800202c:	080021ad 	.word	0x080021ad
 8002030:	080021d3 	.word	0x080021d3
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8002034:	4b75      	ldr	r3, [pc, #468]	@ (800220c <AUDIO_PLAYER_Process+0x224>)
 8002036:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	4b74      	ldr	r3, [pc, #464]	@ (8002210 <AUDIO_PLAYER_Process+0x228>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	429a      	cmp	r2, r3
 8002042:	d305      	bcc.n	8002050 <AUDIO_PLAYER_Process+0x68>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002044:	2002      	movs	r0, #2
 8002046:	f7fe fb01 	bl	800064c <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 800204a:	4b6f      	ldr	r3, [pc, #444]	@ (8002208 <AUDIO_PLAYER_Process+0x220>)
 800204c:	2205      	movs	r2, #5
 800204e:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8002050:	4b6e      	ldr	r3, [pc, #440]	@ (800220c <AUDIO_PLAYER_Process+0x224>)
 8002052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d11e      	bne.n	800209a <AUDIO_PLAYER_Process+0xb2>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 800205c:	f107 030c 	add.w	r3, r7, #12
 8002060:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002064:	4969      	ldr	r1, [pc, #420]	@ (800220c <AUDIO_PLAYER_Process+0x224>)
 8002066:	486b      	ldr	r0, [pc, #428]	@ (8002214 <AUDIO_PLAYER_Process+0x22c>)
 8002068:	f00c ff3e 	bl	800eee8 <f_read>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d004      	beq.n	800207c <AUDIO_PLAYER_Process+0x94>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002072:	2002      	movs	r0, #2
 8002074:	f7fe faea 	bl	800064c <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8002078:	2301      	movs	r3, #1
 800207a:	e0c1      	b.n	8002200 <AUDIO_PLAYER_Process+0x218>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 800207c:	4b63      	ldr	r3, [pc, #396]	@ (800220c <AUDIO_PLAYER_Process+0x224>)
 800207e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8002086:	4b61      	ldr	r3, [pc, #388]	@ (800220c <AUDIO_PLAYER_Process+0x224>)
 8002088:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4413      	add	r3, r2
 8002092:	4a5e      	ldr	r2, [pc, #376]	@ (800220c <AUDIO_PLAYER_Process+0x224>)
 8002094:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002098:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 800209a:	4b5c      	ldr	r3, [pc, #368]	@ (800220c <AUDIO_PLAYER_Process+0x224>)
 800209c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	f040 80aa 	bne.w	80021fc <AUDIO_PLAYER_Process+0x214>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020b0:	4959      	ldr	r1, [pc, #356]	@ (8002218 <AUDIO_PLAYER_Process+0x230>)
 80020b2:	4858      	ldr	r0, [pc, #352]	@ (8002214 <AUDIO_PLAYER_Process+0x22c>)
 80020b4:	f00c ff18 	bl	800eee8 <f_read>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d004      	beq.n	80020c8 <AUDIO_PLAYER_Process+0xe0>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80020be:	2002      	movs	r0, #2
 80020c0:	f7fe fac4 	bl	800064c <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 80020c4:	2301      	movs	r3, #1
 80020c6:	e09b      	b.n	8002200 <AUDIO_PLAYER_Process+0x218>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 80020c8:	4b50      	ldr	r3, [pc, #320]	@ (800220c <AUDIO_PLAYER_Process+0x224>)
 80020ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 80020d2:	4b4e      	ldr	r3, [pc, #312]	@ (800220c <AUDIO_PLAYER_Process+0x224>)
 80020d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4413      	add	r3, r2
 80020de:	4a4b      	ldr	r2, [pc, #300]	@ (800220c <AUDIO_PLAYER_Process+0x224>)
 80020e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020e4:	6053      	str	r3, [r2, #4]
    }
    break;
 80020e6:	e089      	b.n	80021fc <AUDIO_PLAYER_Process+0x214>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80020e8:	2002      	movs	r0, #2
 80020ea:	f7fe faaf 	bl	800064c <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 80020ee:	4b46      	ldr	r3, [pc, #280]	@ (8002208 <AUDIO_PLAYER_Process+0x220>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 80020f4:	2301      	movs	r3, #1
 80020f6:	75fb      	strb	r3, [r7, #23]
    break;
 80020f8:	e081      	b.n	80021fe <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_NEXT:
	uint32_t Cmd =0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
	AUDIO_OUT_SetMute(Cmd);
 80020fe:	6938      	ldr	r0, [r7, #16]
 8002100:	f7fe fae4 	bl	80006cc <AUDIO_OUT_SetMute>
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 8002104:	4b45      	ldr	r3, [pc, #276]	@ (800221c <AUDIO_PLAYER_Process+0x234>)
 8002106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800210a:	b29b      	uxth	r3, r3
 800210c:	3301      	adds	r3, #1
 800210e:	b29b      	uxth	r3, r3
 8002110:	b21a      	sxth	r2, r3
 8002112:	4b42      	ldr	r3, [pc, #264]	@ (800221c <AUDIO_PLAYER_Process+0x234>)
 8002114:	801a      	strh	r2, [r3, #0]
 8002116:	4b41      	ldr	r3, [pc, #260]	@ (800221c <AUDIO_PLAYER_Process+0x234>)
 8002118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800211c:	461c      	mov	r4, r3
 800211e:	f7fe fe6f 	bl	8000e00 <AUDIO_GetWavObjectNumber>
 8002122:	4603      	mov	r3, r0
 8002124:	429c      	cmp	r4, r3
 8002126:	db09      	blt.n	800213c <AUDIO_PLAYER_Process+0x154>
    {
    	if (isLoop)
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <AUDIO_PLAYER_Process+0x14e>
    	{
    		FilePos = 0;
 800212e:	4b3b      	ldr	r3, [pc, #236]	@ (800221c <AUDIO_PLAYER_Process+0x234>)
 8002130:	2200      	movs	r2, #0
 8002132:	801a      	strh	r2, [r3, #0]
 8002134:	e002      	b.n	800213c <AUDIO_PLAYER_Process+0x154>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 8002136:	4b34      	ldr	r3, [pc, #208]	@ (8002208 <AUDIO_PLAYER_Process+0x220>)
 8002138:	2209      	movs	r2, #9
 800213a:	701a      	strb	r2, [r3, #0]
    	}
    }

    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800213c:	2002      	movs	r0, #2
 800213e:	f7fe fa85 	bl	800064c <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8002142:	4b36      	ldr	r3, [pc, #216]	@ (800221c <AUDIO_PLAYER_Process+0x234>)
 8002144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff feec 	bl	8001f28 <AUDIO_PLAYER_Start>
    break;    
 8002150:	e055      	b.n	80021fe <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8002152:	4b32      	ldr	r3, [pc, #200]	@ (800221c <AUDIO_PLAYER_Process+0x234>)
 8002154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002158:	b29b      	uxth	r3, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	b29b      	uxth	r3, r3
 800215e:	b21a      	sxth	r2, r3
 8002160:	4b2e      	ldr	r3, [pc, #184]	@ (800221c <AUDIO_PLAYER_Process+0x234>)
 8002162:	801a      	strh	r2, [r3, #0]
 8002164:	4b2d      	ldr	r3, [pc, #180]	@ (800221c <AUDIO_PLAYER_Process+0x234>)
 8002166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800216a:	2b00      	cmp	r3, #0
 800216c:	da07      	bge.n	800217e <AUDIO_PLAYER_Process+0x196>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 800216e:	f7fe fe47 	bl	8000e00 <AUDIO_GetWavObjectNumber>
 8002172:	4603      	mov	r3, r0
 8002174:	3b01      	subs	r3, #1
 8002176:	b29b      	uxth	r3, r3
 8002178:	b21a      	sxth	r2, r3
 800217a:	4b28      	ldr	r3, [pc, #160]	@ (800221c <AUDIO_PLAYER_Process+0x234>)
 800217c:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_HW);
 800217e:	2001      	movs	r0, #1
 8002180:	f7fe fa64 	bl	800064c <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8002184:	4b25      	ldr	r3, [pc, #148]	@ (800221c <AUDIO_PLAYER_Process+0x234>)
 8002186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fecb 	bl	8001f28 <AUDIO_PLAYER_Start>
    break;   
 8002192:	e034      	b.n	80021fe <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 8002194:	f7fe fa2e 	bl	80005f4 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8002198:	4b1b      	ldr	r3, [pc, #108]	@ (8002208 <AUDIO_PLAYER_Process+0x220>)
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
    break;
 800219e:	e02e      	b.n	80021fe <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 80021a0:	f7fe fa3e 	bl	8000620 <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 80021a4:	4b18      	ldr	r3, [pc, #96]	@ (8002208 <AUDIO_PLAYER_Process+0x220>)
 80021a6:	2203      	movs	r2, #3
 80021a8:	701a      	strb	r2, [r3, #0]
    break;
 80021aa:	e028      	b.n	80021fe <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 80021ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002220 <AUDIO_PLAYER_Process+0x238>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b5a      	cmp	r3, #90	@ 0x5a
 80021b2:	d804      	bhi.n	80021be <AUDIO_PLAYER_Process+0x1d6>
    {
      uwVolume += 10;
 80021b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002220 <AUDIO_PLAYER_Process+0x238>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	330a      	adds	r3, #10
 80021ba:	4a19      	ldr	r2, [pc, #100]	@ (8002220 <AUDIO_PLAYER_Process+0x238>)
 80021bc:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 80021be:	4b18      	ldr	r3, [pc, #96]	@ (8002220 <AUDIO_PLAYER_Process+0x238>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe fa69 	bl	800069c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 80021ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002208 <AUDIO_PLAYER_Process+0x220>)
 80021cc:	2203      	movs	r2, #3
 80021ce:	701a      	strb	r2, [r3, #0]
    break;
 80021d0:	e015      	b.n	80021fe <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 80021d2:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <AUDIO_PLAYER_Process+0x238>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b09      	cmp	r3, #9
 80021d8:	d904      	bls.n	80021e4 <AUDIO_PLAYER_Process+0x1fc>
    {
      uwVolume -= 10;
 80021da:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <AUDIO_PLAYER_Process+0x238>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3b0a      	subs	r3, #10
 80021e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002220 <AUDIO_PLAYER_Process+0x238>)
 80021e2:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 80021e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002220 <AUDIO_PLAYER_Process+0x238>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fa56 	bl	800069c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <AUDIO_PLAYER_Process+0x220>)
 80021f2:	2203      	movs	r2, #3
 80021f4:	701a      	strb	r2, [r3, #0]
    break;
 80021f6:	e002      	b.n	80021fe <AUDIO_PLAYER_Process+0x216>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 80021f8:	bf00      	nop
 80021fa:	e000      	b.n	80021fe <AUDIO_PLAYER_Process+0x216>
    break;
 80021fc:	bf00      	nop
  }
  return audio_error;
 80021fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002200:	4618      	mov	r0, r3
 8002202:	371c      	adds	r7, #28
 8002204:	46bd      	mov	sp, r7
 8002206:	bd90      	pop	{r4, r7, pc}
 8002208:	200013cc 	.word	0x200013cc
 800220c:	200003c4 	.word	0x200003c4
 8002210:	200017ac 	.word	0x200017ac
 8002214:	200017d8 	.word	0x200017d8
 8002218:	20000bc4 	.word	0x20000bc4
 800221c:	200013ce 	.word	0x200013ce
 8002220:	2000006c 	.word	0x2000006c

08002224 <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002228:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b03      	cmp	r3, #3
 800222e:	d104      	bne.n	800223a <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 8002230:	4b05      	ldr	r3, [pc, #20]	@ (8002248 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8002232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002236:	2202      	movs	r2, #2
 8002238:	701a      	strb	r2, [r3, #0]
  }
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	200013cc 	.word	0x200013cc
 8002248:	200003c4 	.word	0x200003c4

0800224c <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002250:	4b06      	ldr	r3, [pc, #24]	@ (800226c <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b03      	cmp	r3, #3
 8002256:	d104      	bne.n	8002262 <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8002258:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 800225a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]
  }
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	200013cc 	.word	0x200013cc
 8002270:	200003c4 	.word	0x200003c4

08002274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002274:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002278:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800227a:	e003      	b.n	8002284 <LoopCopyDataInit>

0800227c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800227c:	4b0c      	ldr	r3, [pc, #48]	@ (80022b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800227e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002280:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002282:	3104      	adds	r1, #4

08002284 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002284:	480b      	ldr	r0, [pc, #44]	@ (80022b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002286:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002288:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800228a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800228c:	d3f6      	bcc.n	800227c <CopyDataInit>
  ldr  r2, =_sbss
 800228e:	4a0b      	ldr	r2, [pc, #44]	@ (80022bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002290:	e002      	b.n	8002298 <LoopFillZerobss>

08002292 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002292:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002294:	f842 3b04 	str.w	r3, [r2], #4

08002298 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002298:	4b09      	ldr	r3, [pc, #36]	@ (80022c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800229a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800229c:	d3f9      	bcc.n	8002292 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800229e:	f7ff fe15 	bl	8001ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022a2:	f00e f847 	bl	8010334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022a6:	f7ff fb85 	bl	80019b4 <main>
  bx  lr    
 80022aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80022b0:	08010980 	.word	0x08010980
  ldr  r0, =_sdata
 80022b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022b8:	200000e8 	.word	0x200000e8
  ldr  r2, =_sbss
 80022bc:	200000e8 	.word	0x200000e8
  ldr  r3, = _ebss
 80022c0:	200026a4 	.word	0x200026a4

080022c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c4:	e7fe      	b.n	80022c4 <ADC_IRQHandler>
	...

080022c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002308 <HAL_Init+0x40>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002308 <HAL_Init+0x40>)
 80022d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002308 <HAL_Init+0x40>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002308 <HAL_Init+0x40>)
 80022de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e4:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <HAL_Init+0x40>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a07      	ldr	r2, [pc, #28]	@ (8002308 <HAL_Init+0x40>)
 80022ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f0:	2003      	movs	r0, #3
 80022f2:	f000 f94f 	bl	8002594 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022f6:	2000      	movs	r0, #0
 80022f8:	f000 f808 	bl	800230c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022fc:	f7ff fd08 	bl	8001d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023c00 	.word	0x40023c00

0800230c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002314:	4b12      	ldr	r3, [pc, #72]	@ (8002360 <HAL_InitTick+0x54>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b12      	ldr	r3, [pc, #72]	@ (8002364 <HAL_InitTick+0x58>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4619      	mov	r1, r3
 800231e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002322:	fbb3 f3f1 	udiv	r3, r3, r1
 8002326:	fbb2 f3f3 	udiv	r3, r2, r3
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f967 	bl	80025fe <HAL_SYSTICK_Config>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e00e      	b.n	8002358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b0f      	cmp	r3, #15
 800233e:	d80a      	bhi.n	8002356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002340:	2200      	movs	r2, #0
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	f04f 30ff 	mov.w	r0, #4294967295
 8002348:	f000 f92f 	bl	80025aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800234c:	4a06      	ldr	r2, [pc, #24]	@ (8002368 <HAL_InitTick+0x5c>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	e000      	b.n	8002358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000068 	.word	0x20000068
 8002364:	20000074 	.word	0x20000074
 8002368:	20000070 	.word	0x20000070

0800236c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002370:	4b06      	ldr	r3, [pc, #24]	@ (800238c <HAL_IncTick+0x20>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_IncTick+0x24>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4413      	add	r3, r2
 800237c:	4a04      	ldr	r2, [pc, #16]	@ (8002390 <HAL_IncTick+0x24>)
 800237e:	6013      	str	r3, [r2, #0]
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000074 	.word	0x20000074
 8002390:	20001a08 	.word	0x20001a08

08002394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return uwTick;
 8002398:	4b03      	ldr	r3, [pc, #12]	@ (80023a8 <HAL_GetTick+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20001a08 	.word	0x20001a08

080023ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff ffee 	bl	8002394 <HAL_GetTick>
 80023b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d005      	beq.n	80023d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023c6:	4b0a      	ldr	r3, [pc, #40]	@ (80023f0 <HAL_Delay+0x44>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4413      	add	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023d2:	bf00      	nop
 80023d4:	f7ff ffde 	bl	8002394 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d8f7      	bhi.n	80023d4 <HAL_Delay+0x28>
  {
  }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000074 	.word	0x20000074

080023f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002404:	4b0c      	ldr	r3, [pc, #48]	@ (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002410:	4013      	ands	r3, r2
 8002412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800241c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002426:	4a04      	ldr	r2, [pc, #16]	@ (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	60d3      	str	r3, [r2, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002440:	4b04      	ldr	r3, [pc, #16]	@ (8002454 <__NVIC_GetPriorityGrouping+0x18>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	f003 0307 	and.w	r3, r3, #7
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	2b00      	cmp	r3, #0
 8002468:	db0b      	blt.n	8002482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	4907      	ldr	r1, [pc, #28]	@ (8002490 <__NVIC_EnableIRQ+0x38>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	2001      	movs	r0, #1
 800247a:	fa00 f202 	lsl.w	r2, r0, r2
 800247e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000e100 	.word	0xe000e100

08002494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	6039      	str	r1, [r7, #0]
 800249e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	db0a      	blt.n	80024be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	490c      	ldr	r1, [pc, #48]	@ (80024e0 <__NVIC_SetPriority+0x4c>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	0112      	lsls	r2, r2, #4
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	440b      	add	r3, r1
 80024b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024bc:	e00a      	b.n	80024d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4908      	ldr	r1, [pc, #32]	@ (80024e4 <__NVIC_SetPriority+0x50>)
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	3b04      	subs	r3, #4
 80024cc:	0112      	lsls	r2, r2, #4
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	440b      	add	r3, r1
 80024d2:	761a      	strb	r2, [r3, #24]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000e100 	.word	0xe000e100
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	@ 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f1c3 0307 	rsb	r3, r3, #7
 8002502:	2b04      	cmp	r3, #4
 8002504:	bf28      	it	cs
 8002506:	2304      	movcs	r3, #4
 8002508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3304      	adds	r3, #4
 800250e:	2b06      	cmp	r3, #6
 8002510:	d902      	bls.n	8002518 <NVIC_EncodePriority+0x30>
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3b03      	subs	r3, #3
 8002516:	e000      	b.n	800251a <NVIC_EncodePriority+0x32>
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800251c:	f04f 32ff 	mov.w	r2, #4294967295
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	401a      	ands	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002530:	f04f 31ff 	mov.w	r1, #4294967295
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	43d9      	mvns	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	4313      	orrs	r3, r2
         );
}
 8002542:	4618      	mov	r0, r3
 8002544:	3724      	adds	r7, #36	@ 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002560:	d301      	bcc.n	8002566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002562:	2301      	movs	r3, #1
 8002564:	e00f      	b.n	8002586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002566:	4a0a      	ldr	r2, [pc, #40]	@ (8002590 <SysTick_Config+0x40>)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800256e:	210f      	movs	r1, #15
 8002570:	f04f 30ff 	mov.w	r0, #4294967295
 8002574:	f7ff ff8e 	bl	8002494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002578:	4b05      	ldr	r3, [pc, #20]	@ (8002590 <SysTick_Config+0x40>)
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800257e:	4b04      	ldr	r3, [pc, #16]	@ (8002590 <SysTick_Config+0x40>)
 8002580:	2207      	movs	r2, #7
 8002582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	e000e010 	.word	0xe000e010

08002594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff ff29 	bl	80023f4 <__NVIC_SetPriorityGrouping>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b086      	sub	sp, #24
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025bc:	f7ff ff3e 	bl	800243c <__NVIC_GetPriorityGrouping>
 80025c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	f7ff ff8e 	bl	80024e8 <NVIC_EncodePriority>
 80025cc:	4602      	mov	r2, r0
 80025ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff5d 	bl	8002494 <__NVIC_SetPriority>
}
 80025da:	bf00      	nop
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff31 	bl	8002458 <__NVIC_EnableIRQ>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ffa2 	bl	8002550 <SysTick_Config>
 800260c:	4603      	mov	r3, r0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002624:	f7ff feb6 	bl	8002394 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e099      	b.n	8002768 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0201 	bic.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002654:	e00f      	b.n	8002676 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002656:	f7ff fe9d 	bl	8002394 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b05      	cmp	r3, #5
 8002662:	d908      	bls.n	8002676 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2220      	movs	r2, #32
 8002668:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2203      	movs	r2, #3
 800266e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e078      	b.n	8002768 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1e8      	bne.n	8002656 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4b38      	ldr	r3, [pc, #224]	@ (8002770 <HAL_DMA_Init+0x158>)
 8002690:	4013      	ands	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d107      	bne.n	80026e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d8:	4313      	orrs	r3, r2
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f023 0307 	bic.w	r3, r3, #7
 80026f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4313      	orrs	r3, r2
 8002700:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	2b04      	cmp	r3, #4
 8002708:	d117      	bne.n	800273a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00e      	beq.n	800273a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fb5f 	bl	8002de0 <DMA_CheckFifoParam>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2240      	movs	r2, #64	@ 0x40
 800272c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002736:	2301      	movs	r3, #1
 8002738:	e016      	b.n	8002768 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 fb16 	bl	8002d74 <DMA_CalcBaseAndBitshift>
 8002748:	4603      	mov	r3, r0
 800274a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002750:	223f      	movs	r2, #63	@ 0x3f
 8002752:	409a      	lsls	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	f010803f 	.word	0xf010803f

08002774 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e050      	b.n	8002828 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d101      	bne.n	8002796 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002792:	2302      	movs	r3, #2
 8002794:	e048      	b.n	8002828 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0201 	bic.w	r2, r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2200      	movs	r2, #0
 80027b4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2200      	movs	r2, #0
 80027c4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2221      	movs	r2, #33	@ 0x21
 80027d4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 facc 	bl	8002d74 <DMA_CalcBaseAndBitshift>
 80027dc:	4603      	mov	r3, r0
 80027de:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002808:	223f      	movs	r2, #63	@ 0x3f
 800280a:	409a      	lsls	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002846:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_DMA_Start_IT+0x26>
 8002852:	2302      	movs	r3, #2
 8002854:	e040      	b.n	80028d8 <HAL_DMA_Start_IT+0xa8>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b01      	cmp	r3, #1
 8002868:	d12f      	bne.n	80028ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2202      	movs	r2, #2
 800286e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 fa4a 	bl	8002d18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002888:	223f      	movs	r2, #63	@ 0x3f
 800288a:	409a      	lsls	r2, r3
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0216 	orr.w	r2, r2, #22
 800289e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d007      	beq.n	80028b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0208 	orr.w	r2, r2, #8
 80028b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e005      	b.n	80028d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028d2:	2302      	movs	r3, #2
 80028d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028ee:	f7ff fd51 	bl	8002394 <HAL_GetTick>
 80028f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d008      	beq.n	8002912 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2280      	movs	r2, #128	@ 0x80
 8002904:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e052      	b.n	80029b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0216 	bic.w	r2, r2, #22
 8002920:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002930:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d103      	bne.n	8002942 <HAL_DMA_Abort+0x62>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0208 	bic.w	r2, r2, #8
 8002950:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0201 	bic.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002962:	e013      	b.n	800298c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002964:	f7ff fd16 	bl	8002394 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b05      	cmp	r3, #5
 8002970:	d90c      	bls.n	800298c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2220      	movs	r2, #32
 8002976:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2203      	movs	r2, #3
 800297c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e015      	b.n	80029b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1e4      	bne.n	8002964 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299e:	223f      	movs	r2, #63	@ 0x3f
 80029a0:	409a      	lsls	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d004      	beq.n	80029de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2280      	movs	r2, #128	@ 0x80
 80029d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e00c      	b.n	80029f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2205      	movs	r2, #5
 80029e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0201 	bic.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a10:	4b8e      	ldr	r3, [pc, #568]	@ (8002c4c <HAL_DMA_IRQHandler+0x248>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a8e      	ldr	r2, [pc, #568]	@ (8002c50 <HAL_DMA_IRQHandler+0x24c>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	0a9b      	lsrs	r3, r3, #10
 8002a1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2e:	2208      	movs	r2, #8
 8002a30:	409a      	lsls	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01a      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d013      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0204 	bic.w	r2, r2, #4
 8002a56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a68:	f043 0201 	orr.w	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a74:	2201      	movs	r2, #1
 8002a76:	409a      	lsls	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d012      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00b      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a92:	2201      	movs	r2, #1
 8002a94:	409a      	lsls	r2, r3
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9e:	f043 0202 	orr.w	r2, r3, #2
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aaa:	2204      	movs	r2, #4
 8002aac:	409a      	lsls	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d012      	beq.n	8002adc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00b      	beq.n	8002adc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac8:	2204      	movs	r2, #4
 8002aca:	409a      	lsls	r2, r3
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad4:	f043 0204 	orr.w	r2, r3, #4
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae0:	2210      	movs	r2, #16
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d043      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d03c      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afe:	2210      	movs	r2, #16
 8002b00:	409a      	lsls	r2, r3
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d018      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d108      	bne.n	8002b34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d024      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	4798      	blx	r3
 8002b32:	e01f      	b.n	8002b74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01b      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	4798      	blx	r3
 8002b44:	e016      	b.n	8002b74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0208 	bic.w	r2, r2, #8
 8002b62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b78:	2220      	movs	r2, #32
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 808f 	beq.w	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 8087 	beq.w	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b05      	cmp	r3, #5
 8002bac:	d136      	bne.n	8002c1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0216 	bic.w	r2, r2, #22
 8002bbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d103      	bne.n	8002bde <HAL_DMA_IRQHandler+0x1da>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0208 	bic.w	r2, r2, #8
 8002bec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf2:	223f      	movs	r2, #63	@ 0x3f
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d07e      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	4798      	blx	r3
        }
        return;
 8002c1a:	e079      	b.n	8002d10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d01d      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10d      	bne.n	8002c54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d031      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	4798      	blx	r3
 8002c48:	e02c      	b.n	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
 8002c4a:	bf00      	nop
 8002c4c:	20000068 	.word	0x20000068
 8002c50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d023      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	4798      	blx	r3
 8002c64:	e01e      	b.n	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10f      	bne.n	8002c94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0210 	bic.w	r2, r2, #16
 8002c82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d032      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d022      	beq.n	8002cfe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2205      	movs	r2, #5
 8002cbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d307      	bcc.n	8002cec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f2      	bne.n	8002cd0 <HAL_DMA_IRQHandler+0x2cc>
 8002cea:	e000      	b.n	8002cee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002cec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
 8002d0e:	e000      	b.n	8002d12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d10:	bf00      	nop
    }
  }
}
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b40      	cmp	r3, #64	@ 0x40
 8002d44:	d108      	bne.n	8002d58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d56:	e007      	b.n	8002d68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	60da      	str	r2, [r3, #12]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	3b10      	subs	r3, #16
 8002d84:	4a14      	ldr	r2, [pc, #80]	@ (8002dd8 <DMA_CalcBaseAndBitshift+0x64>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	091b      	lsrs	r3, r3, #4
 8002d8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d8e:	4a13      	ldr	r2, [pc, #76]	@ (8002ddc <DMA_CalcBaseAndBitshift+0x68>)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4413      	add	r3, r2
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d909      	bls.n	8002db6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002daa:	f023 0303 	bic.w	r3, r3, #3
 8002dae:	1d1a      	adds	r2, r3, #4
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002db4:	e007      	b.n	8002dc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dbe:	f023 0303 	bic.w	r3, r3, #3
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	aaaaaaab 	.word	0xaaaaaaab
 8002ddc:	08010514 	.word	0x08010514

08002de0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d11f      	bne.n	8002e3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d856      	bhi.n	8002eae <DMA_CheckFifoParam+0xce>
 8002e00:	a201      	add	r2, pc, #4	@ (adr r2, 8002e08 <DMA_CheckFifoParam+0x28>)
 8002e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e06:	bf00      	nop
 8002e08:	08002e19 	.word	0x08002e19
 8002e0c:	08002e2b 	.word	0x08002e2b
 8002e10:	08002e19 	.word	0x08002e19
 8002e14:	08002eaf 	.word	0x08002eaf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d046      	beq.n	8002eb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e28:	e043      	b.n	8002eb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e32:	d140      	bne.n	8002eb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e38:	e03d      	b.n	8002eb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e42:	d121      	bne.n	8002e88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	d837      	bhi.n	8002eba <DMA_CheckFifoParam+0xda>
 8002e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e50 <DMA_CheckFifoParam+0x70>)
 8002e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e50:	08002e61 	.word	0x08002e61
 8002e54:	08002e67 	.word	0x08002e67
 8002e58:	08002e61 	.word	0x08002e61
 8002e5c:	08002e79 	.word	0x08002e79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
      break;
 8002e64:	e030      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d025      	beq.n	8002ebe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e76:	e022      	b.n	8002ebe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e80:	d11f      	bne.n	8002ec2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e86:	e01c      	b.n	8002ec2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d903      	bls.n	8002e96 <DMA_CheckFifoParam+0xb6>
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d003      	beq.n	8002e9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e94:	e018      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9a:	e015      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00e      	beq.n	8002ec6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8002eac:	e00b      	b.n	8002ec6 <DMA_CheckFifoParam+0xe6>
      break;
 8002eae:	bf00      	nop
 8002eb0:	e00a      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8002eb2:	bf00      	nop
 8002eb4:	e008      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8002eb6:	bf00      	nop
 8002eb8:	e006      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8002eba:	bf00      	nop
 8002ebc:	e004      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ebe:	bf00      	nop
 8002ec0:	e002      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ec2:	bf00      	nop
 8002ec4:	e000      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ec6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop

08002ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b089      	sub	sp, #36	@ 0x24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	e159      	b.n	80031a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	f040 8148 	bne.w	80031a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d005      	beq.n	8002f2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d130      	bne.n	8002f8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	2203      	movs	r2, #3
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f60:	2201      	movs	r2, #1
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 0201 	and.w	r2, r3, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d017      	beq.n	8002fc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d123      	bne.n	800301c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	08da      	lsrs	r2, r3, #3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3208      	adds	r2, #8
 8002fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	220f      	movs	r2, #15
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	08da      	lsrs	r2, r3, #3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3208      	adds	r2, #8
 8003016:	69b9      	ldr	r1, [r7, #24]
 8003018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	2203      	movs	r2, #3
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 0203 	and.w	r2, r3, #3
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80a2 	beq.w	80031a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	4b57      	ldr	r3, [pc, #348]	@ (80031c0 <HAL_GPIO_Init+0x2e8>)
 8003064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003066:	4a56      	ldr	r2, [pc, #344]	@ (80031c0 <HAL_GPIO_Init+0x2e8>)
 8003068:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800306c:	6453      	str	r3, [r2, #68]	@ 0x44
 800306e:	4b54      	ldr	r3, [pc, #336]	@ (80031c0 <HAL_GPIO_Init+0x2e8>)
 8003070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800307a:	4a52      	ldr	r2, [pc, #328]	@ (80031c4 <HAL_GPIO_Init+0x2ec>)
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	089b      	lsrs	r3, r3, #2
 8003080:	3302      	adds	r3, #2
 8003082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	220f      	movs	r2, #15
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4013      	ands	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a49      	ldr	r2, [pc, #292]	@ (80031c8 <HAL_GPIO_Init+0x2f0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d019      	beq.n	80030da <HAL_GPIO_Init+0x202>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a48      	ldr	r2, [pc, #288]	@ (80031cc <HAL_GPIO_Init+0x2f4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_GPIO_Init+0x1fe>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a47      	ldr	r2, [pc, #284]	@ (80031d0 <HAL_GPIO_Init+0x2f8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00d      	beq.n	80030d2 <HAL_GPIO_Init+0x1fa>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a46      	ldr	r2, [pc, #280]	@ (80031d4 <HAL_GPIO_Init+0x2fc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d007      	beq.n	80030ce <HAL_GPIO_Init+0x1f6>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a45      	ldr	r2, [pc, #276]	@ (80031d8 <HAL_GPIO_Init+0x300>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <HAL_GPIO_Init+0x1f2>
 80030c6:	2304      	movs	r3, #4
 80030c8:	e008      	b.n	80030dc <HAL_GPIO_Init+0x204>
 80030ca:	2307      	movs	r3, #7
 80030cc:	e006      	b.n	80030dc <HAL_GPIO_Init+0x204>
 80030ce:	2303      	movs	r3, #3
 80030d0:	e004      	b.n	80030dc <HAL_GPIO_Init+0x204>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e002      	b.n	80030dc <HAL_GPIO_Init+0x204>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_GPIO_Init+0x204>
 80030da:	2300      	movs	r3, #0
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	f002 0203 	and.w	r2, r2, #3
 80030e2:	0092      	lsls	r2, r2, #2
 80030e4:	4093      	lsls	r3, r2
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030ec:	4935      	ldr	r1, [pc, #212]	@ (80031c4 <HAL_GPIO_Init+0x2ec>)
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	089b      	lsrs	r3, r3, #2
 80030f2:	3302      	adds	r3, #2
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030fa:	4b38      	ldr	r3, [pc, #224]	@ (80031dc <HAL_GPIO_Init+0x304>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	43db      	mvns	r3, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800311e:	4a2f      	ldr	r2, [pc, #188]	@ (80031dc <HAL_GPIO_Init+0x304>)
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003124:	4b2d      	ldr	r3, [pc, #180]	@ (80031dc <HAL_GPIO_Init+0x304>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003148:	4a24      	ldr	r2, [pc, #144]	@ (80031dc <HAL_GPIO_Init+0x304>)
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800314e:	4b23      	ldr	r3, [pc, #140]	@ (80031dc <HAL_GPIO_Init+0x304>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	43db      	mvns	r3, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4013      	ands	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003172:	4a1a      	ldr	r2, [pc, #104]	@ (80031dc <HAL_GPIO_Init+0x304>)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003178:	4b18      	ldr	r3, [pc, #96]	@ (80031dc <HAL_GPIO_Init+0x304>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800319c:	4a0f      	ldr	r2, [pc, #60]	@ (80031dc <HAL_GPIO_Init+0x304>)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3301      	adds	r3, #1
 80031a6:	61fb      	str	r3, [r7, #28]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	2b0f      	cmp	r3, #15
 80031ac:	f67f aea2 	bls.w	8002ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
 80031b4:	3724      	adds	r7, #36	@ 0x24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40013800 	.word	0x40013800
 80031c8:	40020000 	.word	0x40020000
 80031cc:	40020400 	.word	0x40020400
 80031d0:	40020800 	.word	0x40020800
 80031d4:	40020c00 	.word	0x40020c00
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40013c00 	.word	0x40013c00

080031e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	e0bb      	b.n	8003374 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031fc:	2201      	movs	r2, #1
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4013      	ands	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	429a      	cmp	r2, r3
 8003214:	f040 80ab 	bne.w	800336e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003218:	4a5c      	ldr	r2, [pc, #368]	@ (800338c <HAL_GPIO_DeInit+0x1ac>)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	089b      	lsrs	r3, r3, #2
 800321e:	3302      	adds	r3, #2
 8003220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003224:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	220f      	movs	r2, #15
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	4013      	ands	r3, r2
 8003238:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a54      	ldr	r2, [pc, #336]	@ (8003390 <HAL_GPIO_DeInit+0x1b0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d019      	beq.n	8003276 <HAL_GPIO_DeInit+0x96>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a53      	ldr	r2, [pc, #332]	@ (8003394 <HAL_GPIO_DeInit+0x1b4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d013      	beq.n	8003272 <HAL_GPIO_DeInit+0x92>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a52      	ldr	r2, [pc, #328]	@ (8003398 <HAL_GPIO_DeInit+0x1b8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00d      	beq.n	800326e <HAL_GPIO_DeInit+0x8e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a51      	ldr	r2, [pc, #324]	@ (800339c <HAL_GPIO_DeInit+0x1bc>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d007      	beq.n	800326a <HAL_GPIO_DeInit+0x8a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a50      	ldr	r2, [pc, #320]	@ (80033a0 <HAL_GPIO_DeInit+0x1c0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d101      	bne.n	8003266 <HAL_GPIO_DeInit+0x86>
 8003262:	2304      	movs	r3, #4
 8003264:	e008      	b.n	8003278 <HAL_GPIO_DeInit+0x98>
 8003266:	2307      	movs	r3, #7
 8003268:	e006      	b.n	8003278 <HAL_GPIO_DeInit+0x98>
 800326a:	2303      	movs	r3, #3
 800326c:	e004      	b.n	8003278 <HAL_GPIO_DeInit+0x98>
 800326e:	2302      	movs	r3, #2
 8003270:	e002      	b.n	8003278 <HAL_GPIO_DeInit+0x98>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <HAL_GPIO_DeInit+0x98>
 8003276:	2300      	movs	r3, #0
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	f002 0203 	and.w	r2, r2, #3
 800327e:	0092      	lsls	r2, r2, #2
 8003280:	4093      	lsls	r3, r2
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	429a      	cmp	r2, r3
 8003286:	d132      	bne.n	80032ee <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003288:	4b46      	ldr	r3, [pc, #280]	@ (80033a4 <HAL_GPIO_DeInit+0x1c4>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	43db      	mvns	r3, r3
 8003290:	4944      	ldr	r1, [pc, #272]	@ (80033a4 <HAL_GPIO_DeInit+0x1c4>)
 8003292:	4013      	ands	r3, r2
 8003294:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003296:	4b43      	ldr	r3, [pc, #268]	@ (80033a4 <HAL_GPIO_DeInit+0x1c4>)
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	43db      	mvns	r3, r3
 800329e:	4941      	ldr	r1, [pc, #260]	@ (80033a4 <HAL_GPIO_DeInit+0x1c4>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80032a4:	4b3f      	ldr	r3, [pc, #252]	@ (80033a4 <HAL_GPIO_DeInit+0x1c4>)
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	493d      	ldr	r1, [pc, #244]	@ (80033a4 <HAL_GPIO_DeInit+0x1c4>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80032b2:	4b3c      	ldr	r3, [pc, #240]	@ (80033a4 <HAL_GPIO_DeInit+0x1c4>)
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	43db      	mvns	r3, r3
 80032ba:	493a      	ldr	r1, [pc, #232]	@ (80033a4 <HAL_GPIO_DeInit+0x1c4>)
 80032bc:	4013      	ands	r3, r2
 80032be:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	220f      	movs	r2, #15
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80032d0:	4a2e      	ldr	r2, [pc, #184]	@ (800338c <HAL_GPIO_DeInit+0x1ac>)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	089b      	lsrs	r3, r3, #2
 80032d6:	3302      	adds	r3, #2
 80032d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	43da      	mvns	r2, r3
 80032e0:	482a      	ldr	r0, [pc, #168]	@ (800338c <HAL_GPIO_DeInit+0x1ac>)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	089b      	lsrs	r3, r3, #2
 80032e6:	400a      	ands	r2, r1
 80032e8:	3302      	adds	r3, #2
 80032ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	2103      	movs	r1, #3
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	401a      	ands	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	08da      	lsrs	r2, r3, #3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3208      	adds	r2, #8
 800330c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	220f      	movs	r2, #15
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	08d2      	lsrs	r2, r2, #3
 8003324:	4019      	ands	r1, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3208      	adds	r2, #8
 800332a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	2103      	movs	r1, #3
 8003338:	fa01 f303 	lsl.w	r3, r1, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	401a      	ands	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	2101      	movs	r1, #1
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	fa01 f303 	lsl.w	r3, r1, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	401a      	ands	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	2103      	movs	r1, #3
 8003362:	fa01 f303 	lsl.w	r3, r1, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	401a      	ands	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	3301      	adds	r3, #1
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2b0f      	cmp	r3, #15
 8003378:	f67f af40 	bls.w	80031fc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800337c:	bf00      	nop
 800337e:	bf00      	nop
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40013800 	.word	0x40013800
 8003390:	40020000 	.word	0x40020000
 8003394:	40020400 	.word	0x40020400
 8003398:	40020800 	.word	0x40020800
 800339c:	40020c00 	.word	0x40020c00
 80033a0:	40021000 	.word	0x40021000
 80033a4:	40013c00 	.word	0x40013c00

080033a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	807b      	strh	r3, [r7, #2]
 80033b4:	4613      	mov	r3, r2
 80033b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033b8:	787b      	ldrb	r3, [r7, #1]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033be:	887a      	ldrh	r2, [r7, #2]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033c4:	e003      	b.n	80033ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033c6:	887b      	ldrh	r3, [r7, #2]
 80033c8:	041a      	lsls	r2, r3, #16
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	619a      	str	r2, [r3, #24]
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033e6:	4b08      	ldr	r3, [pc, #32]	@ (8003408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d006      	beq.n	8003400 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033f2:	4a05      	ldr	r2, [pc, #20]	@ (8003408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033f4:	88fb      	ldrh	r3, [r7, #6]
 80033f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe fc1e 	bl	8001c3c <HAL_GPIO_EXTI_Callback>
  }
}
 8003400:	bf00      	nop
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40013c00 	.word	0x40013c00

0800340c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800340c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800340e:	b08f      	sub	sp, #60	@ 0x3c
 8003410:	af0a      	add	r7, sp, #40	@ 0x28
 8003412:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e054      	b.n	80034c8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 32f9 	ldrb.w	r3, [r3, #761]	@ 0x2f9
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d106      	bne.n	800343e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f00c fb9b 	bl	800fb74 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2203      	movs	r2, #3
 8003442:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800344a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d102      	bne.n	8003458 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f004 ffbb 	bl	80083d8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	687e      	ldr	r6, [r7, #4]
 800346a:	466d      	mov	r5, sp
 800346c:	f106 0410 	add.w	r4, r6, #16
 8003470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003478:	e894 0003 	ldmia.w	r4, {r0, r1}
 800347c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003480:	1d33      	adds	r3, r6, #4
 8003482:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003484:	6838      	ldr	r0, [r7, #0]
 8003486:	f004 ff35 	bl	80082f4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2101      	movs	r1, #1
 8003490:	4618      	mov	r0, r3
 8003492:	f004 ffb2 	bl	80083fa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	687e      	ldr	r6, [r7, #4]
 800349e:	466d      	mov	r5, sp
 80034a0:	f106 0410 	add.w	r4, r6, #16
 80034a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80034b4:	1d33      	adds	r3, r6, #4
 80034b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034b8:	6838      	ldr	r0, [r7, #0]
 80034ba:	f005 f93b 	bl	8008734 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034d0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80034d0:	b590      	push	{r4, r7, lr}
 80034d2:	b089      	sub	sp, #36	@ 0x24
 80034d4:	af04      	add	r7, sp, #16
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	4608      	mov	r0, r1
 80034da:	4611      	mov	r1, r2
 80034dc:	461a      	mov	r2, r3
 80034de:	4603      	mov	r3, r0
 80034e0:	70fb      	strb	r3, [r7, #3]
 80034e2:	460b      	mov	r3, r1
 80034e4:	70bb      	strb	r3, [r7, #2]
 80034e6:	4613      	mov	r3, r2
 80034e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_HCD_HC_Init+0x28>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e076      	b.n	80035e6 <HAL_HCD_HC_Init+0x116>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	212c      	movs	r1, #44	@ 0x2c
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	4413      	add	r3, r2
 800350c:	333d      	adds	r3, #61	@ 0x3d
 800350e:	2200      	movs	r2, #0
 8003510:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	212c      	movs	r1, #44	@ 0x2c
 8003518:	fb01 f303 	mul.w	r3, r1, r3
 800351c:	4413      	add	r3, r2
 800351e:	3338      	adds	r3, #56	@ 0x38
 8003520:	787a      	ldrb	r2, [r7, #1]
 8003522:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	212c      	movs	r1, #44	@ 0x2c
 800352a:	fb01 f303 	mul.w	r3, r1, r3
 800352e:	4413      	add	r3, r2
 8003530:	3340      	adds	r3, #64	@ 0x40
 8003532:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003534:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	212c      	movs	r1, #44	@ 0x2c
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	4413      	add	r3, r2
 8003542:	3339      	adds	r3, #57	@ 0x39
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	212c      	movs	r1, #44	@ 0x2c
 800354e:	fb01 f303 	mul.w	r3, r1, r3
 8003552:	4413      	add	r3, r2
 8003554:	333f      	adds	r3, #63	@ 0x3f
 8003556:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800355a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	78ba      	ldrb	r2, [r7, #2]
 8003560:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003564:	b2d0      	uxtb	r0, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	212c      	movs	r1, #44	@ 0x2c
 800356a:	fb01 f303 	mul.w	r3, r1, r3
 800356e:	4413      	add	r3, r2
 8003570:	333a      	adds	r3, #58	@ 0x3a
 8003572:	4602      	mov	r2, r0
 8003574:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003576:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800357a:	2b00      	cmp	r3, #0
 800357c:	da09      	bge.n	8003592 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800357e:	78fb      	ldrb	r3, [r7, #3]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	212c      	movs	r1, #44	@ 0x2c
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	4413      	add	r3, r2
 800358a:	333b      	adds	r3, #59	@ 0x3b
 800358c:	2201      	movs	r2, #1
 800358e:	701a      	strb	r2, [r3, #0]
 8003590:	e008      	b.n	80035a4 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	212c      	movs	r1, #44	@ 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	333b      	adds	r3, #59	@ 0x3b
 80035a0:	2200      	movs	r2, #0
 80035a2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	212c      	movs	r1, #44	@ 0x2c
 80035aa:	fb01 f303 	mul.w	r3, r1, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	333c      	adds	r3, #60	@ 0x3c
 80035b2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80035b6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6818      	ldr	r0, [r3, #0]
 80035bc:	787c      	ldrb	r4, [r7, #1]
 80035be:	78ba      	ldrb	r2, [r7, #2]
 80035c0:	78f9      	ldrb	r1, [r7, #3]
 80035c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80035c4:	9302      	str	r3, [sp, #8]
 80035c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80035ca:	9301      	str	r3, [sp, #4]
 80035cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	4623      	mov	r3, r4
 80035d4:	f005 fa34 	bl	8008a40 <USB_HC_Init>
 80035d8:	4603      	mov	r3, r0
 80035da:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd90      	pop	{r4, r7, pc}

080035ee <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	460b      	mov	r3, r1
 80035f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_HCD_HC_Halt+0x1e>
 8003608:	2302      	movs	r3, #2
 800360a:	e00f      	b.n	800362c <HAL_HCD_HC_Halt+0x3e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f005 fc84 	bl	8008f2a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 800362a:	7bfb      	ldrb	r3, [r7, #15]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	4608      	mov	r0, r1
 800363e:	4611      	mov	r1, r2
 8003640:	461a      	mov	r2, r3
 8003642:	4603      	mov	r3, r0
 8003644:	70fb      	strb	r3, [r7, #3]
 8003646:	460b      	mov	r3, r1
 8003648:	70bb      	strb	r3, [r7, #2]
 800364a:	4613      	mov	r3, r2
 800364c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800364e:	78fb      	ldrb	r3, [r7, #3]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	212c      	movs	r1, #44	@ 0x2c
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	4413      	add	r3, r2
 800365a:	333b      	adds	r3, #59	@ 0x3b
 800365c:	78ba      	ldrb	r2, [r7, #2]
 800365e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	212c      	movs	r1, #44	@ 0x2c
 8003666:	fb01 f303 	mul.w	r3, r1, r3
 800366a:	4413      	add	r3, r2
 800366c:	333f      	adds	r3, #63	@ 0x3f
 800366e:	787a      	ldrb	r2, [r7, #1]
 8003670:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003672:	7c3b      	ldrb	r3, [r7, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d112      	bne.n	800369e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	212c      	movs	r1, #44	@ 0x2c
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	4413      	add	r3, r2
 8003684:	3342      	adds	r3, #66	@ 0x42
 8003686:	2203      	movs	r2, #3
 8003688:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800368a:	78fb      	ldrb	r3, [r7, #3]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	212c      	movs	r1, #44	@ 0x2c
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	4413      	add	r3, r2
 8003696:	333d      	adds	r3, #61	@ 0x3d
 8003698:	7f3a      	ldrb	r2, [r7, #28]
 800369a:	701a      	strb	r2, [r3, #0]
 800369c:	e008      	b.n	80036b0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800369e:	78fb      	ldrb	r3, [r7, #3]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	212c      	movs	r1, #44	@ 0x2c
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	3342      	adds	r3, #66	@ 0x42
 80036ac:	2202      	movs	r2, #2
 80036ae:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80036b0:	787b      	ldrb	r3, [r7, #1]
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	f200 80c6 	bhi.w	8003844 <HAL_HCD_HC_SubmitRequest+0x210>
 80036b8:	a201      	add	r2, pc, #4	@ (adr r2, 80036c0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80036ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036be:	bf00      	nop
 80036c0:	080036d1 	.word	0x080036d1
 80036c4:	08003831 	.word	0x08003831
 80036c8:	08003735 	.word	0x08003735
 80036cc:	080037b3 	.word	0x080037b3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80036d0:	7c3b      	ldrb	r3, [r7, #16]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	f040 80b8 	bne.w	8003848 <HAL_HCD_HC_SubmitRequest+0x214>
 80036d8:	78bb      	ldrb	r3, [r7, #2]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f040 80b4 	bne.w	8003848 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80036e0:	8b3b      	ldrh	r3, [r7, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d108      	bne.n	80036f8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	212c      	movs	r1, #44	@ 0x2c
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	4413      	add	r3, r2
 80036f2:	3355      	adds	r3, #85	@ 0x55
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	212c      	movs	r1, #44	@ 0x2c
 80036fe:	fb01 f303 	mul.w	r3, r1, r3
 8003702:	4413      	add	r3, r2
 8003704:	3355      	adds	r3, #85	@ 0x55
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d109      	bne.n	8003720 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	212c      	movs	r1, #44	@ 0x2c
 8003712:	fb01 f303 	mul.w	r3, r1, r3
 8003716:	4413      	add	r3, r2
 8003718:	3342      	adds	r3, #66	@ 0x42
 800371a:	2200      	movs	r2, #0
 800371c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800371e:	e093      	b.n	8003848 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	212c      	movs	r1, #44	@ 0x2c
 8003726:	fb01 f303 	mul.w	r3, r1, r3
 800372a:	4413      	add	r3, r2
 800372c:	3342      	adds	r3, #66	@ 0x42
 800372e:	2202      	movs	r2, #2
 8003730:	701a      	strb	r2, [r3, #0]
      break;
 8003732:	e089      	b.n	8003848 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003734:	78bb      	ldrb	r3, [r7, #2]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d11d      	bne.n	8003776 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	212c      	movs	r1, #44	@ 0x2c
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	4413      	add	r3, r2
 8003746:	3355      	adds	r3, #85	@ 0x55
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800374e:	78fb      	ldrb	r3, [r7, #3]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	212c      	movs	r1, #44	@ 0x2c
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	4413      	add	r3, r2
 800375a:	3342      	adds	r3, #66	@ 0x42
 800375c:	2200      	movs	r2, #0
 800375e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003760:	e073      	b.n	800384a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	212c      	movs	r1, #44	@ 0x2c
 8003768:	fb01 f303 	mul.w	r3, r1, r3
 800376c:	4413      	add	r3, r2
 800376e:	3342      	adds	r3, #66	@ 0x42
 8003770:	2202      	movs	r2, #2
 8003772:	701a      	strb	r2, [r3, #0]
      break;
 8003774:	e069      	b.n	800384a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003776:	78fb      	ldrb	r3, [r7, #3]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	212c      	movs	r1, #44	@ 0x2c
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	4413      	add	r3, r2
 8003782:	3354      	adds	r3, #84	@ 0x54
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800378a:	78fb      	ldrb	r3, [r7, #3]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	212c      	movs	r1, #44	@ 0x2c
 8003790:	fb01 f303 	mul.w	r3, r1, r3
 8003794:	4413      	add	r3, r2
 8003796:	3342      	adds	r3, #66	@ 0x42
 8003798:	2200      	movs	r2, #0
 800379a:	701a      	strb	r2, [r3, #0]
      break;
 800379c:	e055      	b.n	800384a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800379e:	78fb      	ldrb	r3, [r7, #3]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	212c      	movs	r1, #44	@ 0x2c
 80037a4:	fb01 f303 	mul.w	r3, r1, r3
 80037a8:	4413      	add	r3, r2
 80037aa:	3342      	adds	r3, #66	@ 0x42
 80037ac:	2202      	movs	r2, #2
 80037ae:	701a      	strb	r2, [r3, #0]
      break;
 80037b0:	e04b      	b.n	800384a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80037b2:	78bb      	ldrb	r3, [r7, #2]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d11d      	bne.n	80037f4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	212c      	movs	r1, #44	@ 0x2c
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	4413      	add	r3, r2
 80037c4:	3355      	adds	r3, #85	@ 0x55
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d109      	bne.n	80037e0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	212c      	movs	r1, #44	@ 0x2c
 80037d2:	fb01 f303 	mul.w	r3, r1, r3
 80037d6:	4413      	add	r3, r2
 80037d8:	3342      	adds	r3, #66	@ 0x42
 80037da:	2200      	movs	r2, #0
 80037dc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80037de:	e034      	b.n	800384a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	212c      	movs	r1, #44	@ 0x2c
 80037e6:	fb01 f303 	mul.w	r3, r1, r3
 80037ea:	4413      	add	r3, r2
 80037ec:	3342      	adds	r3, #66	@ 0x42
 80037ee:	2202      	movs	r2, #2
 80037f0:	701a      	strb	r2, [r3, #0]
      break;
 80037f2:	e02a      	b.n	800384a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	212c      	movs	r1, #44	@ 0x2c
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	4413      	add	r3, r2
 8003800:	3354      	adds	r3, #84	@ 0x54
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d109      	bne.n	800381c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	212c      	movs	r1, #44	@ 0x2c
 800380e:	fb01 f303 	mul.w	r3, r1, r3
 8003812:	4413      	add	r3, r2
 8003814:	3342      	adds	r3, #66	@ 0x42
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]
      break;
 800381a:	e016      	b.n	800384a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	212c      	movs	r1, #44	@ 0x2c
 8003822:	fb01 f303 	mul.w	r3, r1, r3
 8003826:	4413      	add	r3, r2
 8003828:	3342      	adds	r3, #66	@ 0x42
 800382a:	2202      	movs	r2, #2
 800382c:	701a      	strb	r2, [r3, #0]
      break;
 800382e:	e00c      	b.n	800384a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	212c      	movs	r1, #44	@ 0x2c
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	4413      	add	r3, r2
 800383c:	3342      	adds	r3, #66	@ 0x42
 800383e:	2200      	movs	r2, #0
 8003840:	701a      	strb	r2, [r3, #0]
      break;
 8003842:	e002      	b.n	800384a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003844:	bf00      	nop
 8003846:	e000      	b.n	800384a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003848:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800384a:	78fb      	ldrb	r3, [r7, #3]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	212c      	movs	r1, #44	@ 0x2c
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	4413      	add	r3, r2
 8003856:	3344      	adds	r3, #68	@ 0x44
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	8b3a      	ldrh	r2, [r7, #24]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	202c      	movs	r0, #44	@ 0x2c
 8003864:	fb00 f303 	mul.w	r3, r0, r3
 8003868:	440b      	add	r3, r1
 800386a:	334c      	adds	r3, #76	@ 0x4c
 800386c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	212c      	movs	r1, #44	@ 0x2c
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	4413      	add	r3, r2
 800387a:	3360      	adds	r3, #96	@ 0x60
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	212c      	movs	r1, #44	@ 0x2c
 8003886:	fb01 f303 	mul.w	r3, r1, r3
 800388a:	4413      	add	r3, r2
 800388c:	3350      	adds	r3, #80	@ 0x50
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	212c      	movs	r1, #44	@ 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	3339      	adds	r3, #57	@ 0x39
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	212c      	movs	r1, #44	@ 0x2c
 80038aa:	fb01 f303 	mul.w	r3, r1, r3
 80038ae:	4413      	add	r3, r2
 80038b0:	3361      	adds	r3, #97	@ 0x61
 80038b2:	2200      	movs	r2, #0
 80038b4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	78fb      	ldrb	r3, [r7, #3]
 80038bc:	222c      	movs	r2, #44	@ 0x2c
 80038be:	fb02 f303 	mul.w	r3, r2, r3
 80038c2:	3338      	adds	r3, #56	@ 0x38
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	18d1      	adds	r1, r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	461a      	mov	r2, r3
 80038d0:	f005 f9d8 	bl	8008c84 <USB_HC_StartXfer>
 80038d4:	4603      	mov	r3, r0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop

080038e0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f004 fed9 	bl	80086ae <USB_GetMode>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b01      	cmp	r3, #1
 8003900:	f040 80f6 	bne.w	8003af0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f004 febd 	bl	8008688 <USB_ReadInterrupts>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80ec 	beq.w	8003aee <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f004 feb4 	bl	8008688 <USB_ReadInterrupts>
 8003920:	4603      	mov	r3, r0
 8003922:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003926:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800392a:	d104      	bne.n	8003936 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003934:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f004 fea4 	bl	8008688 <USB_ReadInterrupts>
 8003940:	4603      	mov	r3, r0
 8003942:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003946:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800394a:	d104      	bne.n	8003956 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003954:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f004 fe94 	bl	8008688 <USB_ReadInterrupts>
 8003960:	4603      	mov	r3, r0
 8003962:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003966:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800396a:	d104      	bne.n	8003976 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003974:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f004 fe84 	bl	8008688 <USB_ReadInterrupts>
 8003980:	4603      	mov	r3, r0
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b02      	cmp	r3, #2
 8003988:	d103      	bne.n	8003992 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2202      	movs	r2, #2
 8003990:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f004 fe76 	bl	8008688 <USB_ReadInterrupts>
 800399c:	4603      	mov	r3, r0
 800399e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039a6:	d11c      	bne.n	80039e2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80039b0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10f      	bne.n	80039e2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80039c2:	2110      	movs	r1, #16
 80039c4:	6938      	ldr	r0, [r7, #16]
 80039c6:	f004 fd65 	bl	8008494 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80039ca:	6938      	ldr	r0, [r7, #16]
 80039cc:	f004 fd96 	bl	80084fc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2101      	movs	r1, #1
 80039d6:	4618      	mov	r0, r3
 80039d8:	f004 ff6c 	bl	80088b4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f00c f947 	bl	800fc70 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f004 fe4e 	bl	8008688 <USB_ReadInterrupts>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039f6:	d102      	bne.n	80039fe <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f001 f89e 	bl	8004b3a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f004 fe40 	bl	8008688 <USB_ReadInterrupts>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d106      	bne.n	8003a20 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f00c f910 	bl	800fc38 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f004 fe2f 	bl	8008688 <USB_ReadInterrupts>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b10      	cmp	r3, #16
 8003a32:	d101      	bne.n	8003a38 <HAL_HCD_IRQHandler+0x158>
 8003a34:	2301      	movs	r3, #1
 8003a36:	e000      	b.n	8003a3a <HAL_HCD_IRQHandler+0x15a>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d012      	beq.n	8003a64 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699a      	ldr	r2, [r3, #24]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0210 	bic.w	r2, r2, #16
 8003a4c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 ffa1 	bl	8004996 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0210 	orr.w	r2, r2, #16
 8003a62:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f004 fe0d 	bl	8008688 <USB_ReadInterrupts>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a78:	d13a      	bne.n	8003af0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f005 fa42 	bl	8008f08 <USB_HC_ReadInterrupt>
 8003a84:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	e025      	b.n	8003ad8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d018      	beq.n	8003ad2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ab2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ab6:	d106      	bne.n	8003ac6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	4619      	mov	r1, r3
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f8ab 	bl	8003c1a <HCD_HC_IN_IRQHandler>
 8003ac4:	e005      	b.n	8003ad2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	4619      	mov	r1, r3
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fbf9 	bl	80042c4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d3d4      	bcc.n	8003a8c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003aea:	615a      	str	r2, [r3, #20]
 8003aec:	e000      	b.n	8003af0 <HAL_HCD_IRQHandler+0x210>
      return;
 8003aee:	bf00      	nop
    }
  }
}
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_HCD_Start+0x16>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e013      	b.n	8003b34 <HAL_HCD_Start+0x3e>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2101      	movs	r1, #1
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f004 ff2e 	bl	800897c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f004 fc46 	bl	80083b6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_HCD_Stop+0x16>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e00d      	b.n	8003b6e <HAL_HCD_Stop+0x32>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f005 fb1c 	bl	800919c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f004 fed0 	bl	8008928 <USB_ResetPort>
 8003b88:	4603      	mov	r3, r0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003b9e:	78fb      	ldrb	r3, [r7, #3]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	212c      	movs	r1, #44	@ 0x2c
 8003ba4:	fb01 f303 	mul.w	r3, r1, r3
 8003ba8:	4413      	add	r3, r2
 8003baa:	3360      	adds	r3, #96	@ 0x60
 8003bac:	781b      	ldrb	r3, [r3, #0]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	212c      	movs	r1, #44	@ 0x2c
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3350      	adds	r3, #80	@ 0x50
 8003bd4:	681b      	ldr	r3, [r3, #0]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f004 ff14 	bl	8008a1c <USB_GetCurrentFrame>
 8003bf4:	4603      	mov	r3, r0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b082      	sub	sp, #8
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f004 feef 	bl	80089ee <USB_GetHostSpeed>
 8003c10:	4603      	mov	r3, r0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b086      	sub	sp, #24
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	460b      	mov	r3, r1
 8003c24:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d11a      	bne.n	8003c80 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c56:	461a      	mov	r2, r3
 8003c58:	2304      	movs	r3, #4
 8003c5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	212c      	movs	r1, #44	@ 0x2c
 8003c62:	fb01 f303 	mul.w	r3, r1, r3
 8003c66:	4413      	add	r3, r2
 8003c68:	3361      	adds	r3, #97	@ 0x61
 8003c6a:	2206      	movs	r2, #6
 8003c6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	4611      	mov	r1, r2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f005 f956 	bl	8008f2a <USB_HC_Halt>
 8003c7e:	e0af      	b.n	8003de0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c96:	d11b      	bne.n	8003cd0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003caa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	212c      	movs	r1, #44	@ 0x2c
 8003cb2:	fb01 f303 	mul.w	r3, r1, r3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3361      	adds	r3, #97	@ 0x61
 8003cba:	2207      	movs	r2, #7
 8003cbc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f005 f92e 	bl	8008f2a <USB_HC_Halt>
 8003cce:	e087      	b.n	8003de0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d109      	bne.n	8003cfa <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	2320      	movs	r3, #32
 8003cf6:	6093      	str	r3, [r2, #8]
 8003cf8:	e072      	b.n	8003de0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d11a      	bne.n	8003d46 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	2308      	movs	r3, #8
 8003d20:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	212c      	movs	r1, #44	@ 0x2c
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	3361      	adds	r3, #97	@ 0x61
 8003d30:	2205      	movs	r2, #5
 8003d32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f005 f8f3 	bl	8008f2a <USB_HC_Halt>
 8003d44:	e04c      	b.n	8003de0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d5c:	d11b      	bne.n	8003d96 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d70:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	212c      	movs	r1, #44	@ 0x2c
 8003d78:	fb01 f303 	mul.w	r3, r1, r3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3361      	adds	r3, #97	@ 0x61
 8003d80:	2208      	movs	r2, #8
 8003d82:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f005 f8cb 	bl	8008f2a <USB_HC_Halt>
 8003d94:	e024      	b.n	8003de0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	015a      	lsls	r2, r3, #5
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da8:	2b80      	cmp	r3, #128	@ 0x80
 8003daa:	d119      	bne.n	8003de0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003db8:	461a      	mov	r2, r3
 8003dba:	2380      	movs	r3, #128	@ 0x80
 8003dbc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	212c      	movs	r1, #44	@ 0x2c
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	4413      	add	r3, r2
 8003dca:	3361      	adds	r3, #97	@ 0x61
 8003dcc:	2206      	movs	r2, #6
 8003dce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	4611      	mov	r1, r2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f005 f8a5 	bl	8008f2a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003df2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003df6:	d112      	bne.n	8003e1e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	4611      	mov	r1, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f005 f891 	bl	8008f2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e14:	461a      	mov	r2, r3
 8003e16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e1a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003e1c:	e24e      	b.n	80042bc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	f040 80df 	bne.w	8003ff4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d019      	beq.n	8003e72 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	212c      	movs	r1, #44	@ 0x2c
 8003e44:	fb01 f303 	mul.w	r3, r1, r3
 8003e48:	4413      	add	r3, r2
 8003e4a:	3348      	adds	r3, #72	@ 0x48
 8003e4c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	0159      	lsls	r1, r3, #5
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	440b      	add	r3, r1
 8003e56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003e60:	1ad2      	subs	r2, r2, r3
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	202c      	movs	r0, #44	@ 0x2c
 8003e68:	fb00 f303 	mul.w	r3, r0, r3
 8003e6c:	440b      	add	r3, r1
 8003e6e:	3350      	adds	r3, #80	@ 0x50
 8003e70:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	212c      	movs	r1, #44	@ 0x2c
 8003e78:	fb01 f303 	mul.w	r3, r1, r3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	3361      	adds	r3, #97	@ 0x61
 8003e80:	2201      	movs	r2, #1
 8003e82:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	212c      	movs	r1, #44	@ 0x2c
 8003e8a:	fb01 f303 	mul.w	r3, r1, r3
 8003e8e:	4413      	add	r3, r2
 8003e90:	335c      	adds	r3, #92	@ 0x5c
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	212c      	movs	r1, #44	@ 0x2c
 8003eae:	fb01 f303 	mul.w	r3, r1, r3
 8003eb2:	4413      	add	r3, r2
 8003eb4:	333f      	adds	r3, #63	@ 0x3f
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d009      	beq.n	8003ed0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	212c      	movs	r1, #44	@ 0x2c
 8003ec2:	fb01 f303 	mul.w	r3, r1, r3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	333f      	adds	r3, #63	@ 0x3f
 8003eca:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d111      	bne.n	8003ef4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	4611      	mov	r1, r2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f005 f825 	bl	8008f2a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eec:	461a      	mov	r2, r3
 8003eee:	2310      	movs	r3, #16
 8003ef0:	6093      	str	r3, [r2, #8]
 8003ef2:	e03a      	b.n	8003f6a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	212c      	movs	r1, #44	@ 0x2c
 8003efa:	fb01 f303 	mul.w	r3, r1, r3
 8003efe:	4413      	add	r3, r2
 8003f00:	333f      	adds	r3, #63	@ 0x3f
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d009      	beq.n	8003f1c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	212c      	movs	r1, #44	@ 0x2c
 8003f0e:	fb01 f303 	mul.w	r3, r1, r3
 8003f12:	4413      	add	r3, r2
 8003f14:	333f      	adds	r3, #63	@ 0x3f
 8003f16:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d126      	bne.n	8003f6a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	0151      	lsls	r1, r2, #5
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	440a      	add	r2, r1
 8003f32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f36:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003f3a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	212c      	movs	r1, #44	@ 0x2c
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	3360      	adds	r3, #96	@ 0x60
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	b2d9      	uxtb	r1, r3
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	202c      	movs	r0, #44	@ 0x2c
 8003f58:	fb00 f303 	mul.w	r3, r0, r3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	3360      	adds	r3, #96	@ 0x60
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f00b fe91 	bl	800fc8c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d12b      	bne.n	8003fca <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	212c      	movs	r1, #44	@ 0x2c
 8003f78:	fb01 f303 	mul.w	r3, r1, r3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3348      	adds	r3, #72	@ 0x48
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	202c      	movs	r0, #44	@ 0x2c
 8003f88:	fb00 f202 	mul.w	r2, r0, r2
 8003f8c:	440a      	add	r2, r1
 8003f8e:	3240      	adds	r2, #64	@ 0x40
 8003f90:	8812      	ldrh	r2, [r2, #0]
 8003f92:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 818e 	beq.w	80042bc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	212c      	movs	r1, #44	@ 0x2c
 8003fa6:	fb01 f303 	mul.w	r3, r1, r3
 8003faa:	4413      	add	r3, r2
 8003fac:	3354      	adds	r3, #84	@ 0x54
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	f083 0301 	eor.w	r3, r3, #1
 8003fb4:	b2d8      	uxtb	r0, r3
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	212c      	movs	r1, #44	@ 0x2c
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3354      	adds	r3, #84	@ 0x54
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	701a      	strb	r2, [r3, #0]
}
 8003fc8:	e178      	b.n	80042bc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	212c      	movs	r1, #44	@ 0x2c
 8003fd0:	fb01 f303 	mul.w	r3, r1, r3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	3354      	adds	r3, #84	@ 0x54
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	f083 0301 	eor.w	r3, r3, #1
 8003fde:	b2d8      	uxtb	r0, r3
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	212c      	movs	r1, #44	@ 0x2c
 8003fe6:	fb01 f303 	mul.w	r3, r1, r3
 8003fea:	4413      	add	r3, r2
 8003fec:	3354      	adds	r3, #84	@ 0x54
 8003fee:	4602      	mov	r2, r0
 8003ff0:	701a      	strb	r2, [r3, #0]
}
 8003ff2:	e163      	b.n	80042bc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b02      	cmp	r3, #2
 8004008:	f040 80f6 	bne.w	80041f8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	212c      	movs	r1, #44	@ 0x2c
 8004012:	fb01 f303 	mul.w	r3, r1, r3
 8004016:	4413      	add	r3, r2
 8004018:	3361      	adds	r3, #97	@ 0x61
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d109      	bne.n	8004034 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	212c      	movs	r1, #44	@ 0x2c
 8004026:	fb01 f303 	mul.w	r3, r1, r3
 800402a:	4413      	add	r3, r2
 800402c:	3360      	adds	r3, #96	@ 0x60
 800402e:	2201      	movs	r2, #1
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	e0c9      	b.n	80041c8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	212c      	movs	r1, #44	@ 0x2c
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	4413      	add	r3, r2
 8004040:	3361      	adds	r3, #97	@ 0x61
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b05      	cmp	r3, #5
 8004046:	d109      	bne.n	800405c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	212c      	movs	r1, #44	@ 0x2c
 800404e:	fb01 f303 	mul.w	r3, r1, r3
 8004052:	4413      	add	r3, r2
 8004054:	3360      	adds	r3, #96	@ 0x60
 8004056:	2205      	movs	r2, #5
 8004058:	701a      	strb	r2, [r3, #0]
 800405a:	e0b5      	b.n	80041c8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	212c      	movs	r1, #44	@ 0x2c
 8004062:	fb01 f303 	mul.w	r3, r1, r3
 8004066:	4413      	add	r3, r2
 8004068:	3361      	adds	r3, #97	@ 0x61
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b06      	cmp	r3, #6
 800406e:	d009      	beq.n	8004084 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	212c      	movs	r1, #44	@ 0x2c
 8004076:	fb01 f303 	mul.w	r3, r1, r3
 800407a:	4413      	add	r3, r2
 800407c:	3361      	adds	r3, #97	@ 0x61
 800407e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004080:	2b08      	cmp	r3, #8
 8004082:	d150      	bne.n	8004126 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	212c      	movs	r1, #44	@ 0x2c
 800408a:	fb01 f303 	mul.w	r3, r1, r3
 800408e:	4413      	add	r3, r2
 8004090:	335c      	adds	r3, #92	@ 0x5c
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	202c      	movs	r0, #44	@ 0x2c
 800409c:	fb00 f303 	mul.w	r3, r0, r3
 80040a0:	440b      	add	r3, r1
 80040a2:	335c      	adds	r3, #92	@ 0x5c
 80040a4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	212c      	movs	r1, #44	@ 0x2c
 80040ac:	fb01 f303 	mul.w	r3, r1, r3
 80040b0:	4413      	add	r3, r2
 80040b2:	335c      	adds	r3, #92	@ 0x5c
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d912      	bls.n	80040e0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	212c      	movs	r1, #44	@ 0x2c
 80040c0:	fb01 f303 	mul.w	r3, r1, r3
 80040c4:	4413      	add	r3, r2
 80040c6:	335c      	adds	r3, #92	@ 0x5c
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	212c      	movs	r1, #44	@ 0x2c
 80040d2:	fb01 f303 	mul.w	r3, r1, r3
 80040d6:	4413      	add	r3, r2
 80040d8:	3360      	adds	r3, #96	@ 0x60
 80040da:	2204      	movs	r2, #4
 80040dc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040de:	e073      	b.n	80041c8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	212c      	movs	r1, #44	@ 0x2c
 80040e6:	fb01 f303 	mul.w	r3, r1, r3
 80040ea:	4413      	add	r3, r2
 80040ec:	3360      	adds	r3, #96	@ 0x60
 80040ee:	2202      	movs	r2, #2
 80040f0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004108:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004110:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4413      	add	r3, r2
 800411a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800411e:	461a      	mov	r2, r3
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004124:	e050      	b.n	80041c8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	212c      	movs	r1, #44	@ 0x2c
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	4413      	add	r3, r2
 8004132:	3361      	adds	r3, #97	@ 0x61
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b03      	cmp	r3, #3
 8004138:	d122      	bne.n	8004180 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	212c      	movs	r1, #44	@ 0x2c
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	4413      	add	r3, r2
 8004146:	3360      	adds	r3, #96	@ 0x60
 8004148:	2202      	movs	r2, #2
 800414a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	4413      	add	r3, r2
 8004154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004162:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800416a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4413      	add	r3, r2
 8004174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004178:	461a      	mov	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	e023      	b.n	80041c8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	212c      	movs	r1, #44	@ 0x2c
 8004186:	fb01 f303 	mul.w	r3, r1, r3
 800418a:	4413      	add	r3, r2
 800418c:	3361      	adds	r3, #97	@ 0x61
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b07      	cmp	r3, #7
 8004192:	d119      	bne.n	80041c8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	212c      	movs	r1, #44	@ 0x2c
 800419a:	fb01 f303 	mul.w	r3, r1, r3
 800419e:	4413      	add	r3, r2
 80041a0:	335c      	adds	r3, #92	@ 0x5c
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	202c      	movs	r0, #44	@ 0x2c
 80041ac:	fb00 f303 	mul.w	r3, r0, r3
 80041b0:	440b      	add	r3, r1
 80041b2:	335c      	adds	r3, #92	@ 0x5c
 80041b4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	212c      	movs	r1, #44	@ 0x2c
 80041bc:	fb01 f303 	mul.w	r3, r1, r3
 80041c0:	4413      	add	r3, r2
 80041c2:	3360      	adds	r3, #96	@ 0x60
 80041c4:	2204      	movs	r2, #4
 80041c6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041d4:	461a      	mov	r2, r3
 80041d6:	2302      	movs	r3, #2
 80041d8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	b2d9      	uxtb	r1, r3
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	202c      	movs	r0, #44	@ 0x2c
 80041e4:	fb00 f303 	mul.w	r3, r0, r3
 80041e8:	4413      	add	r3, r2
 80041ea:	3360      	adds	r3, #96	@ 0x60
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f00b fd4b 	bl	800fc8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80041f6:	e061      	b.n	80042bc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 0310 	and.w	r3, r3, #16
 800420a:	2b10      	cmp	r3, #16
 800420c:	d156      	bne.n	80042bc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	212c      	movs	r1, #44	@ 0x2c
 8004214:	fb01 f303 	mul.w	r3, r1, r3
 8004218:	4413      	add	r3, r2
 800421a:	333f      	adds	r3, #63	@ 0x3f
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b03      	cmp	r3, #3
 8004220:	d111      	bne.n	8004246 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	212c      	movs	r1, #44	@ 0x2c
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	4413      	add	r3, r2
 800422e:	335c      	adds	r3, #92	@ 0x5c
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	4611      	mov	r1, r2
 800423e:	4618      	mov	r0, r3
 8004240:	f004 fe73 	bl	8008f2a <USB_HC_Halt>
 8004244:	e031      	b.n	80042aa <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	212c      	movs	r1, #44	@ 0x2c
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	4413      	add	r3, r2
 8004252:	333f      	adds	r3, #63	@ 0x3f
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d009      	beq.n	800426e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	212c      	movs	r1, #44	@ 0x2c
 8004260:	fb01 f303 	mul.w	r3, r1, r3
 8004264:	4413      	add	r3, r2
 8004266:	333f      	adds	r3, #63	@ 0x3f
 8004268:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800426a:	2b02      	cmp	r3, #2
 800426c:	d11d      	bne.n	80042aa <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	212c      	movs	r1, #44	@ 0x2c
 8004274:	fb01 f303 	mul.w	r3, r1, r3
 8004278:	4413      	add	r3, r2
 800427a:	335c      	adds	r3, #92	@ 0x5c
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d110      	bne.n	80042aa <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	212c      	movs	r1, #44	@ 0x2c
 800428e:	fb01 f303 	mul.w	r3, r1, r3
 8004292:	4413      	add	r3, r2
 8004294:	3361      	adds	r3, #97	@ 0x61
 8004296:	2203      	movs	r2, #3
 8004298:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f004 fe40 	bl	8008f2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042b6:	461a      	mov	r2, r3
 80042b8:	2310      	movs	r3, #16
 80042ba:	6093      	str	r3, [r2, #8]
}
 80042bc:	bf00      	nop
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80042da:	78fb      	ldrb	r3, [r7, #3]
 80042dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	d11a      	bne.n	800432a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004300:	461a      	mov	r2, r3
 8004302:	2304      	movs	r3, #4
 8004304:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	212c      	movs	r1, #44	@ 0x2c
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	4413      	add	r3, r2
 8004312:	3361      	adds	r3, #97	@ 0x61
 8004314:	2206      	movs	r2, #6
 8004316:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	4611      	mov	r1, r2
 8004322:	4618      	mov	r0, r3
 8004324:	f004 fe01 	bl	8008f2a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004328:	e331      	b.n	800498e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	4413      	add	r3, r2
 8004332:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	2b20      	cmp	r3, #32
 800433e:	d12e      	bne.n	800439e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	4413      	add	r3, r2
 8004348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800434c:	461a      	mov	r2, r3
 800434e:	2320      	movs	r3, #32
 8004350:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	212c      	movs	r1, #44	@ 0x2c
 8004358:	fb01 f303 	mul.w	r3, r1, r3
 800435c:	4413      	add	r3, r2
 800435e:	333d      	adds	r3, #61	@ 0x3d
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b01      	cmp	r3, #1
 8004364:	f040 8313 	bne.w	800498e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	212c      	movs	r1, #44	@ 0x2c
 800436e:	fb01 f303 	mul.w	r3, r1, r3
 8004372:	4413      	add	r3, r2
 8004374:	333d      	adds	r3, #61	@ 0x3d
 8004376:	2200      	movs	r2, #0
 8004378:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	212c      	movs	r1, #44	@ 0x2c
 8004380:	fb01 f303 	mul.w	r3, r1, r3
 8004384:	4413      	add	r3, r2
 8004386:	3360      	adds	r3, #96	@ 0x60
 8004388:	2202      	movs	r2, #2
 800438a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	4611      	mov	r1, r2
 8004396:	4618      	mov	r0, r3
 8004398:	f004 fdc7 	bl	8008f2a <USB_HC_Halt>
}
 800439c:	e2f7      	b.n	800498e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043b4:	d112      	bne.n	80043dc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043c2:	461a      	mov	r2, r3
 80043c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043c8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	4611      	mov	r1, r2
 80043d4:	4618      	mov	r0, r3
 80043d6:	f004 fda8 	bl	8008f2a <USB_HC_Halt>
}
 80043da:	e2d8      	b.n	800498e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d140      	bne.n	8004474 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	212c      	movs	r1, #44	@ 0x2c
 80043f8:	fb01 f303 	mul.w	r3, r1, r3
 80043fc:	4413      	add	r3, r2
 80043fe:	335c      	adds	r3, #92	@ 0x5c
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	4413      	add	r3, r2
 800440c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004416:	2b40      	cmp	r3, #64	@ 0x40
 8004418:	d111      	bne.n	800443e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	212c      	movs	r1, #44	@ 0x2c
 8004420:	fb01 f303 	mul.w	r3, r1, r3
 8004424:	4413      	add	r3, r2
 8004426:	333d      	adds	r3, #61	@ 0x3d
 8004428:	2201      	movs	r2, #1
 800442a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	4413      	add	r3, r2
 8004434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004438:	461a      	mov	r2, r3
 800443a:	2340      	movs	r3, #64	@ 0x40
 800443c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	4413      	add	r3, r2
 8004446:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800444a:	461a      	mov	r2, r3
 800444c:	2301      	movs	r3, #1
 800444e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	212c      	movs	r1, #44	@ 0x2c
 8004456:	fb01 f303 	mul.w	r3, r1, r3
 800445a:	4413      	add	r3, r2
 800445c:	3361      	adds	r3, #97	@ 0x61
 800445e:	2201      	movs	r2, #1
 8004460:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	4611      	mov	r1, r2
 800446c:	4618      	mov	r0, r3
 800446e:	f004 fd5c 	bl	8008f2a <USB_HC_Halt>
}
 8004472:	e28c      	b.n	800498e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	4413      	add	r3, r2
 800447c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004486:	2b40      	cmp	r3, #64	@ 0x40
 8004488:	d12c      	bne.n	80044e4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	212c      	movs	r1, #44	@ 0x2c
 8004490:	fb01 f303 	mul.w	r3, r1, r3
 8004494:	4413      	add	r3, r2
 8004496:	3361      	adds	r3, #97	@ 0x61
 8004498:	2204      	movs	r2, #4
 800449a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	212c      	movs	r1, #44	@ 0x2c
 80044a2:	fb01 f303 	mul.w	r3, r1, r3
 80044a6:	4413      	add	r3, r2
 80044a8:	333d      	adds	r3, #61	@ 0x3d
 80044aa:	2201      	movs	r2, #1
 80044ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	212c      	movs	r1, #44	@ 0x2c
 80044b4:	fb01 f303 	mul.w	r3, r1, r3
 80044b8:	4413      	add	r3, r2
 80044ba:	335c      	adds	r3, #92	@ 0x5c
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	4611      	mov	r1, r2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f004 fd2d 	bl	8008f2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044dc:	461a      	mov	r2, r3
 80044de:	2340      	movs	r3, #64	@ 0x40
 80044e0:	6093      	str	r3, [r2, #8]
}
 80044e2:	e254      	b.n	800498e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d11a      	bne.n	8004530 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	4413      	add	r3, r2
 8004502:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004506:	461a      	mov	r2, r3
 8004508:	2308      	movs	r3, #8
 800450a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	212c      	movs	r1, #44	@ 0x2c
 8004512:	fb01 f303 	mul.w	r3, r1, r3
 8004516:	4413      	add	r3, r2
 8004518:	3361      	adds	r3, #97	@ 0x61
 800451a:	2205      	movs	r2, #5
 800451c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	b2d2      	uxtb	r2, r2
 8004526:	4611      	mov	r1, r2
 8004528:	4618      	mov	r0, r3
 800452a:	f004 fcfe 	bl	8008f2a <USB_HC_Halt>
}
 800452e:	e22e      	b.n	800498e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	4413      	add	r3, r2
 8004538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b10      	cmp	r3, #16
 8004544:	d140      	bne.n	80045c8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	212c      	movs	r1, #44	@ 0x2c
 800454c:	fb01 f303 	mul.w	r3, r1, r3
 8004550:	4413      	add	r3, r2
 8004552:	335c      	adds	r3, #92	@ 0x5c
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	212c      	movs	r1, #44	@ 0x2c
 800455e:	fb01 f303 	mul.w	r3, r1, r3
 8004562:	4413      	add	r3, r2
 8004564:	3361      	adds	r3, #97	@ 0x61
 8004566:	2203      	movs	r2, #3
 8004568:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	212c      	movs	r1, #44	@ 0x2c
 8004570:	fb01 f303 	mul.w	r3, r1, r3
 8004574:	4413      	add	r3, r2
 8004576:	333d      	adds	r3, #61	@ 0x3d
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d112      	bne.n	80045a4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	212c      	movs	r1, #44	@ 0x2c
 8004584:	fb01 f303 	mul.w	r3, r1, r3
 8004588:	4413      	add	r3, r2
 800458a:	333c      	adds	r3, #60	@ 0x3c
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d108      	bne.n	80045a4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	212c      	movs	r1, #44	@ 0x2c
 8004598:	fb01 f303 	mul.w	r3, r1, r3
 800459c:	4413      	add	r3, r2
 800459e:	333d      	adds	r3, #61	@ 0x3d
 80045a0:	2201      	movs	r2, #1
 80045a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	4611      	mov	r1, r2
 80045ae:	4618      	mov	r0, r3
 80045b0:	f004 fcbb 	bl	8008f2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045c0:	461a      	mov	r2, r3
 80045c2:	2310      	movs	r3, #16
 80045c4:	6093      	str	r3, [r2, #8]
}
 80045c6:	e1e2      	b.n	800498e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045da:	2b80      	cmp	r3, #128	@ 0x80
 80045dc:	d164      	bne.n	80046a8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d111      	bne.n	800460a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	212c      	movs	r1, #44	@ 0x2c
 80045ec:	fb01 f303 	mul.w	r3, r1, r3
 80045f0:	4413      	add	r3, r2
 80045f2:	3361      	adds	r3, #97	@ 0x61
 80045f4:	2206      	movs	r2, #6
 80045f6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	4611      	mov	r1, r2
 8004602:	4618      	mov	r0, r3
 8004604:	f004 fc91 	bl	8008f2a <USB_HC_Halt>
 8004608:	e044      	b.n	8004694 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	212c      	movs	r1, #44	@ 0x2c
 8004610:	fb01 f303 	mul.w	r3, r1, r3
 8004614:	4413      	add	r3, r2
 8004616:	335c      	adds	r3, #92	@ 0x5c
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	202c      	movs	r0, #44	@ 0x2c
 8004622:	fb00 f303 	mul.w	r3, r0, r3
 8004626:	440b      	add	r3, r1
 8004628:	335c      	adds	r3, #92	@ 0x5c
 800462a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	212c      	movs	r1, #44	@ 0x2c
 8004632:	fb01 f303 	mul.w	r3, r1, r3
 8004636:	4413      	add	r3, r2
 8004638:	335c      	adds	r3, #92	@ 0x5c
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d920      	bls.n	8004682 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	212c      	movs	r1, #44	@ 0x2c
 8004646:	fb01 f303 	mul.w	r3, r1, r3
 800464a:	4413      	add	r3, r2
 800464c:	335c      	adds	r3, #92	@ 0x5c
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	212c      	movs	r1, #44	@ 0x2c
 8004658:	fb01 f303 	mul.w	r3, r1, r3
 800465c:	4413      	add	r3, r2
 800465e:	3360      	adds	r3, #96	@ 0x60
 8004660:	2204      	movs	r2, #4
 8004662:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	b2d9      	uxtb	r1, r3
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	202c      	movs	r0, #44	@ 0x2c
 800466e:	fb00 f303 	mul.w	r3, r0, r3
 8004672:	4413      	add	r3, r2
 8004674:	3360      	adds	r3, #96	@ 0x60
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f00b fb06 	bl	800fc8c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004680:	e008      	b.n	8004694 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	212c      	movs	r1, #44	@ 0x2c
 8004688:	fb01 f303 	mul.w	r3, r1, r3
 800468c:	4413      	add	r3, r2
 800468e:	3360      	adds	r3, #96	@ 0x60
 8004690:	2202      	movs	r2, #2
 8004692:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	4413      	add	r3, r2
 800469c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046a0:	461a      	mov	r2, r3
 80046a2:	2380      	movs	r3, #128	@ 0x80
 80046a4:	6093      	str	r3, [r2, #8]
}
 80046a6:	e172      	b.n	800498e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046be:	d11b      	bne.n	80046f8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	212c      	movs	r1, #44	@ 0x2c
 80046c6:	fb01 f303 	mul.w	r3, r1, r3
 80046ca:	4413      	add	r3, r2
 80046cc:	3361      	adds	r3, #97	@ 0x61
 80046ce:	2208      	movs	r2, #8
 80046d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	4611      	mov	r1, r2
 80046dc:	4618      	mov	r0, r3
 80046de:	f004 fc24 	bl	8008f2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046ee:	461a      	mov	r2, r3
 80046f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046f4:	6093      	str	r3, [r2, #8]
}
 80046f6:	e14a      	b.n	800498e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b02      	cmp	r3, #2
 800470c:	f040 813f 	bne.w	800498e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	212c      	movs	r1, #44	@ 0x2c
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	4413      	add	r3, r2
 800471c:	3361      	adds	r3, #97	@ 0x61
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d17d      	bne.n	8004820 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	212c      	movs	r1, #44	@ 0x2c
 800472a:	fb01 f303 	mul.w	r3, r1, r3
 800472e:	4413      	add	r3, r2
 8004730:	3360      	adds	r3, #96	@ 0x60
 8004732:	2201      	movs	r2, #1
 8004734:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	212c      	movs	r1, #44	@ 0x2c
 800473c:	fb01 f303 	mul.w	r3, r1, r3
 8004740:	4413      	add	r3, r2
 8004742:	333f      	adds	r3, #63	@ 0x3f
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2b02      	cmp	r3, #2
 8004748:	d00a      	beq.n	8004760 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	212c      	movs	r1, #44	@ 0x2c
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	4413      	add	r3, r2
 8004756:	333f      	adds	r3, #63	@ 0x3f
 8004758:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800475a:	2b03      	cmp	r3, #3
 800475c:	f040 8100 	bne.w	8004960 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d113      	bne.n	8004790 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	212c      	movs	r1, #44	@ 0x2c
 800476e:	fb01 f303 	mul.w	r3, r1, r3
 8004772:	4413      	add	r3, r2
 8004774:	3355      	adds	r3, #85	@ 0x55
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	f083 0301 	eor.w	r3, r3, #1
 800477c:	b2d8      	uxtb	r0, r3
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	212c      	movs	r1, #44	@ 0x2c
 8004784:	fb01 f303 	mul.w	r3, r1, r3
 8004788:	4413      	add	r3, r2
 800478a:	3355      	adds	r3, #85	@ 0x55
 800478c:	4602      	mov	r2, r0
 800478e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	2b01      	cmp	r3, #1
 8004796:	f040 80e3 	bne.w	8004960 <HCD_HC_OUT_IRQHandler+0x69c>
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	212c      	movs	r1, #44	@ 0x2c
 80047a0:	fb01 f303 	mul.w	r3, r1, r3
 80047a4:	4413      	add	r3, r2
 80047a6:	334c      	adds	r3, #76	@ 0x4c
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 80d8 	beq.w	8004960 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	212c      	movs	r1, #44	@ 0x2c
 80047b6:	fb01 f303 	mul.w	r3, r1, r3
 80047ba:	4413      	add	r3, r2
 80047bc:	334c      	adds	r3, #76	@ 0x4c
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	202c      	movs	r0, #44	@ 0x2c
 80047c6:	fb00 f202 	mul.w	r2, r0, r2
 80047ca:	440a      	add	r2, r1
 80047cc:	3240      	adds	r2, #64	@ 0x40
 80047ce:	8812      	ldrh	r2, [r2, #0]
 80047d0:	4413      	add	r3, r2
 80047d2:	3b01      	subs	r3, #1
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	202c      	movs	r0, #44	@ 0x2c
 80047da:	fb00 f202 	mul.w	r2, r0, r2
 80047de:	440a      	add	r2, r1
 80047e0:	3240      	adds	r2, #64	@ 0x40
 80047e2:	8812      	ldrh	r2, [r2, #0]
 80047e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 80b5 	beq.w	8004960 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	212c      	movs	r1, #44	@ 0x2c
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	4413      	add	r3, r2
 8004802:	3355      	adds	r3, #85	@ 0x55
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	f083 0301 	eor.w	r3, r3, #1
 800480a:	b2d8      	uxtb	r0, r3
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	212c      	movs	r1, #44	@ 0x2c
 8004812:	fb01 f303 	mul.w	r3, r1, r3
 8004816:	4413      	add	r3, r2
 8004818:	3355      	adds	r3, #85	@ 0x55
 800481a:	4602      	mov	r2, r0
 800481c:	701a      	strb	r2, [r3, #0]
 800481e:	e09f      	b.n	8004960 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	212c      	movs	r1, #44	@ 0x2c
 8004826:	fb01 f303 	mul.w	r3, r1, r3
 800482a:	4413      	add	r3, r2
 800482c:	3361      	adds	r3, #97	@ 0x61
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d109      	bne.n	8004848 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	212c      	movs	r1, #44	@ 0x2c
 800483a:	fb01 f303 	mul.w	r3, r1, r3
 800483e:	4413      	add	r3, r2
 8004840:	3360      	adds	r3, #96	@ 0x60
 8004842:	2202      	movs	r2, #2
 8004844:	701a      	strb	r2, [r3, #0]
 8004846:	e08b      	b.n	8004960 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	212c      	movs	r1, #44	@ 0x2c
 800484e:	fb01 f303 	mul.w	r3, r1, r3
 8004852:	4413      	add	r3, r2
 8004854:	3361      	adds	r3, #97	@ 0x61
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b04      	cmp	r3, #4
 800485a:	d109      	bne.n	8004870 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	212c      	movs	r1, #44	@ 0x2c
 8004862:	fb01 f303 	mul.w	r3, r1, r3
 8004866:	4413      	add	r3, r2
 8004868:	3360      	adds	r3, #96	@ 0x60
 800486a:	2202      	movs	r2, #2
 800486c:	701a      	strb	r2, [r3, #0]
 800486e:	e077      	b.n	8004960 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	212c      	movs	r1, #44	@ 0x2c
 8004876:	fb01 f303 	mul.w	r3, r1, r3
 800487a:	4413      	add	r3, r2
 800487c:	3361      	adds	r3, #97	@ 0x61
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b05      	cmp	r3, #5
 8004882:	d109      	bne.n	8004898 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	212c      	movs	r1, #44	@ 0x2c
 800488a:	fb01 f303 	mul.w	r3, r1, r3
 800488e:	4413      	add	r3, r2
 8004890:	3360      	adds	r3, #96	@ 0x60
 8004892:	2205      	movs	r2, #5
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	e063      	b.n	8004960 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	212c      	movs	r1, #44	@ 0x2c
 800489e:	fb01 f303 	mul.w	r3, r1, r3
 80048a2:	4413      	add	r3, r2
 80048a4:	3361      	adds	r3, #97	@ 0x61
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b06      	cmp	r3, #6
 80048aa:	d009      	beq.n	80048c0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	212c      	movs	r1, #44	@ 0x2c
 80048b2:	fb01 f303 	mul.w	r3, r1, r3
 80048b6:	4413      	add	r3, r2
 80048b8:	3361      	adds	r3, #97	@ 0x61
 80048ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d14f      	bne.n	8004960 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	212c      	movs	r1, #44	@ 0x2c
 80048c6:	fb01 f303 	mul.w	r3, r1, r3
 80048ca:	4413      	add	r3, r2
 80048cc:	335c      	adds	r3, #92	@ 0x5c
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	202c      	movs	r0, #44	@ 0x2c
 80048d8:	fb00 f303 	mul.w	r3, r0, r3
 80048dc:	440b      	add	r3, r1
 80048de:	335c      	adds	r3, #92	@ 0x5c
 80048e0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	212c      	movs	r1, #44	@ 0x2c
 80048e8:	fb01 f303 	mul.w	r3, r1, r3
 80048ec:	4413      	add	r3, r2
 80048ee:	335c      	adds	r3, #92	@ 0x5c
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d912      	bls.n	800491c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	212c      	movs	r1, #44	@ 0x2c
 80048fc:	fb01 f303 	mul.w	r3, r1, r3
 8004900:	4413      	add	r3, r2
 8004902:	335c      	adds	r3, #92	@ 0x5c
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	212c      	movs	r1, #44	@ 0x2c
 800490e:	fb01 f303 	mul.w	r3, r1, r3
 8004912:	4413      	add	r3, r2
 8004914:	3360      	adds	r3, #96	@ 0x60
 8004916:	2204      	movs	r2, #4
 8004918:	701a      	strb	r2, [r3, #0]
 800491a:	e021      	b.n	8004960 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	212c      	movs	r1, #44	@ 0x2c
 8004922:	fb01 f303 	mul.w	r3, r1, r3
 8004926:	4413      	add	r3, r2
 8004928:	3360      	adds	r3, #96	@ 0x60
 800492a:	2202      	movs	r2, #2
 800492c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	4413      	add	r3, r2
 8004936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004944:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800494c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	4413      	add	r3, r2
 8004956:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800495a:	461a      	mov	r2, r3
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	4413      	add	r3, r2
 8004968:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800496c:	461a      	mov	r2, r3
 800496e:	2302      	movs	r3, #2
 8004970:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	b2d9      	uxtb	r1, r3
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	202c      	movs	r0, #44	@ 0x2c
 800497c:	fb00 f303 	mul.w	r3, r0, r3
 8004980:	4413      	add	r3, r2
 8004982:	3360      	adds	r3, #96	@ 0x60
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	461a      	mov	r2, r3
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f00b f97f 	bl	800fc8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800498e:	bf00      	nop
 8004990:	3720      	adds	r7, #32
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b08a      	sub	sp, #40	@ 0x28
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	0c5b      	lsrs	r3, r3, #17
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	091b      	lsrs	r3, r3, #4
 80049c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049ca:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d004      	beq.n	80049dc <HCD_RXQLVL_IRQHandler+0x46>
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b05      	cmp	r3, #5
 80049d6:	f000 80a9 	beq.w	8004b2c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80049da:	e0aa      	b.n	8004b32 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 80a6 	beq.w	8004b30 <HCD_RXQLVL_IRQHandler+0x19a>
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	212c      	movs	r1, #44	@ 0x2c
 80049ea:	fb01 f303 	mul.w	r3, r1, r3
 80049ee:	4413      	add	r3, r2
 80049f0:	3344      	adds	r3, #68	@ 0x44
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 809b 	beq.w	8004b30 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	212c      	movs	r1, #44	@ 0x2c
 8004a00:	fb01 f303 	mul.w	r3, r1, r3
 8004a04:	4413      	add	r3, r2
 8004a06:	3350      	adds	r3, #80	@ 0x50
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	441a      	add	r2, r3
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	202c      	movs	r0, #44	@ 0x2c
 8004a14:	fb00 f303 	mul.w	r3, r0, r3
 8004a18:	440b      	add	r3, r1
 8004a1a:	334c      	adds	r3, #76	@ 0x4c
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d87a      	bhi.n	8004b18 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6818      	ldr	r0, [r3, #0]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	212c      	movs	r1, #44	@ 0x2c
 8004a2c:	fb01 f303 	mul.w	r3, r1, r3
 8004a30:	4413      	add	r3, r2
 8004a32:	3344      	adds	r3, #68	@ 0x44
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	b292      	uxth	r2, r2
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	f003 fdcc 	bl	80085d8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	212c      	movs	r1, #44	@ 0x2c
 8004a46:	fb01 f303 	mul.w	r3, r1, r3
 8004a4a:	4413      	add	r3, r2
 8004a4c:	3344      	adds	r3, #68	@ 0x44
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	441a      	add	r2, r3
 8004a54:	6879      	ldr	r1, [r7, #4]
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	202c      	movs	r0, #44	@ 0x2c
 8004a5a:	fb00 f303 	mul.w	r3, r0, r3
 8004a5e:	440b      	add	r3, r1
 8004a60:	3344      	adds	r3, #68	@ 0x44
 8004a62:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	212c      	movs	r1, #44	@ 0x2c
 8004a6a:	fb01 f303 	mul.w	r3, r1, r3
 8004a6e:	4413      	add	r3, r2
 8004a70:	3350      	adds	r3, #80	@ 0x50
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	441a      	add	r2, r3
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	202c      	movs	r0, #44	@ 0x2c
 8004a7e:	fb00 f303 	mul.w	r3, r0, r3
 8004a82:	440b      	add	r3, r1
 8004a84:	3350      	adds	r3, #80	@ 0x50
 8004a86:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	0cdb      	lsrs	r3, r3, #19
 8004a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a9c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	212c      	movs	r1, #44	@ 0x2c
 8004aa4:	fb01 f303 	mul.w	r3, r1, r3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	3340      	adds	r3, #64	@ 0x40
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d13c      	bne.n	8004b30 <HCD_RXQLVL_IRQHandler+0x19a>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d039      	beq.n	8004b30 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ad2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ada:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ae8:	461a      	mov	r2, r3
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	212c      	movs	r1, #44	@ 0x2c
 8004af4:	fb01 f303 	mul.w	r3, r1, r3
 8004af8:	4413      	add	r3, r2
 8004afa:	3354      	adds	r3, #84	@ 0x54
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	f083 0301 	eor.w	r3, r3, #1
 8004b02:	b2d8      	uxtb	r0, r3
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	212c      	movs	r1, #44	@ 0x2c
 8004b0a:	fb01 f303 	mul.w	r3, r1, r3
 8004b0e:	4413      	add	r3, r2
 8004b10:	3354      	adds	r3, #84	@ 0x54
 8004b12:	4602      	mov	r2, r0
 8004b14:	701a      	strb	r2, [r3, #0]
      break;
 8004b16:	e00b      	b.n	8004b30 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	212c      	movs	r1, #44	@ 0x2c
 8004b1e:	fb01 f303 	mul.w	r3, r1, r3
 8004b22:	4413      	add	r3, r2
 8004b24:	3360      	adds	r3, #96	@ 0x60
 8004b26:	2204      	movs	r2, #4
 8004b28:	701a      	strb	r2, [r3, #0]
      break;
 8004b2a:	e001      	b.n	8004b30 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004b2c:	bf00      	nop
 8004b2e:	e000      	b.n	8004b32 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004b30:	bf00      	nop
  }
}
 8004b32:	bf00      	nop
 8004b34:	3728      	adds	r7, #40	@ 0x28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b086      	sub	sp, #24
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004b66:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d10b      	bne.n	8004b8a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d102      	bne.n	8004b82 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f00b f869 	bl	800fc54 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f043 0302 	orr.w	r3, r3, #2
 8004b88:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d132      	bne.n	8004bfa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f043 0308 	orr.w	r3, r3, #8
 8004b9a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d126      	bne.n	8004bf4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d113      	bne.n	8004bd6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004bb4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bb8:	d106      	bne.n	8004bc8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2102      	movs	r1, #2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f003 fe77 	bl	80088b4 <USB_InitFSLSPClkSel>
 8004bc6:	e011      	b.n	8004bec <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2101      	movs	r1, #1
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f003 fe70 	bl	80088b4 <USB_InitFSLSPClkSel>
 8004bd4:	e00a      	b.n	8004bec <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d106      	bne.n	8004bec <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004be4:	461a      	mov	r2, r3
 8004be6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004bea:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f00b f85b 	bl	800fca8 <HAL_HCD_PortEnabled_Callback>
 8004bf2:	e002      	b.n	8004bfa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f00b f865 	bl	800fcc4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d103      	bne.n	8004c0c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f043 0320 	orr.w	r3, r3, #32
 8004c0a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004c12:	461a      	mov	r2, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	6013      	str	r3, [r2, #0]
}
 8004c18:	bf00      	nop
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e12b      	b.n	8004e8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fc fd34 	bl	80016b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2224      	movs	r2, #36	@ 0x24
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0201 	bic.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c84:	f002 fcda 	bl	800763c <HAL_RCC_GetPCLK1Freq>
 8004c88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	4a81      	ldr	r2, [pc, #516]	@ (8004e94 <HAL_I2C_Init+0x274>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d807      	bhi.n	8004ca4 <HAL_I2C_Init+0x84>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4a80      	ldr	r2, [pc, #512]	@ (8004e98 <HAL_I2C_Init+0x278>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	bf94      	ite	ls
 8004c9c:	2301      	movls	r3, #1
 8004c9e:	2300      	movhi	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	e006      	b.n	8004cb2 <HAL_I2C_Init+0x92>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4a7d      	ldr	r2, [pc, #500]	@ (8004e9c <HAL_I2C_Init+0x27c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	bf94      	ite	ls
 8004cac:	2301      	movls	r3, #1
 8004cae:	2300      	movhi	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e0e7      	b.n	8004e8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4a78      	ldr	r2, [pc, #480]	@ (8004ea0 <HAL_I2C_Init+0x280>)
 8004cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc2:	0c9b      	lsrs	r3, r3, #18
 8004cc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	4a6a      	ldr	r2, [pc, #424]	@ (8004e94 <HAL_I2C_Init+0x274>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d802      	bhi.n	8004cf4 <HAL_I2C_Init+0xd4>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	e009      	b.n	8004d08 <HAL_I2C_Init+0xe8>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004cfa:	fb02 f303 	mul.w	r3, r2, r3
 8004cfe:	4a69      	ldr	r2, [pc, #420]	@ (8004ea4 <HAL_I2C_Init+0x284>)
 8004d00:	fba2 2303 	umull	r2, r3, r2, r3
 8004d04:	099b      	lsrs	r3, r3, #6
 8004d06:	3301      	adds	r3, #1
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6812      	ldr	r2, [r2, #0]
 8004d0c:	430b      	orrs	r3, r1
 8004d0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004d1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	495c      	ldr	r1, [pc, #368]	@ (8004e94 <HAL_I2C_Init+0x274>)
 8004d24:	428b      	cmp	r3, r1
 8004d26:	d819      	bhi.n	8004d5c <HAL_I2C_Init+0x13c>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	1e59      	subs	r1, r3, #1
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d36:	1c59      	adds	r1, r3, #1
 8004d38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004d3c:	400b      	ands	r3, r1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_I2C_Init+0x138>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	1e59      	subs	r1, r3, #1
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d50:	3301      	adds	r3, #1
 8004d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d56:	e051      	b.n	8004dfc <HAL_I2C_Init+0x1dc>
 8004d58:	2304      	movs	r3, #4
 8004d5a:	e04f      	b.n	8004dfc <HAL_I2C_Init+0x1dc>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d111      	bne.n	8004d88 <HAL_I2C_Init+0x168>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	1e58      	subs	r0, r3, #1
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6859      	ldr	r1, [r3, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	440b      	add	r3, r1
 8004d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d76:	3301      	adds	r3, #1
 8004d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bf0c      	ite	eq
 8004d80:	2301      	moveq	r3, #1
 8004d82:	2300      	movne	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	e012      	b.n	8004dae <HAL_I2C_Init+0x18e>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	1e58      	subs	r0, r3, #1
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6859      	ldr	r1, [r3, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	0099      	lsls	r1, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d9e:	3301      	adds	r3, #1
 8004da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bf0c      	ite	eq
 8004da8:	2301      	moveq	r3, #1
 8004daa:	2300      	movne	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_I2C_Init+0x196>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e022      	b.n	8004dfc <HAL_I2C_Init+0x1dc>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10e      	bne.n	8004ddc <HAL_I2C_Init+0x1bc>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	1e58      	subs	r0, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6859      	ldr	r1, [r3, #4]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	440b      	add	r3, r1
 8004dcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dda:	e00f      	b.n	8004dfc <HAL_I2C_Init+0x1dc>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	1e58      	subs	r0, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6859      	ldr	r1, [r3, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	0099      	lsls	r1, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004df2:	3301      	adds	r3, #1
 8004df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	6809      	ldr	r1, [r1, #0]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69da      	ldr	r2, [r3, #28]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004e2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6911      	ldr	r1, [r2, #16]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	68d2      	ldr	r2, [r2, #12]
 8004e36:	4311      	orrs	r1, r2
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695a      	ldr	r2, [r3, #20]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	000186a0 	.word	0x000186a0
 8004e98:	001e847f 	.word	0x001e847f
 8004e9c:	003d08ff 	.word	0x003d08ff
 8004ea0:	431bde83 	.word	0x431bde83
 8004ea4:	10624dd3 	.word	0x10624dd3

08004ea8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e021      	b.n	8004efe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2224      	movs	r2, #36	@ 0x24
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0201 	bic.w	r2, r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7fc fc58 	bl	8001788 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	4608      	mov	r0, r1
 8004f12:	4611      	mov	r1, r2
 8004f14:	461a      	mov	r2, r3
 8004f16:	4603      	mov	r3, r0
 8004f18:	817b      	strh	r3, [r7, #10]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	813b      	strh	r3, [r7, #8]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f22:	f7fd fa37 	bl	8002394 <HAL_GetTick>
 8004f26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b20      	cmp	r3, #32
 8004f32:	f040 80d9 	bne.w	80050e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	2319      	movs	r3, #25
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	496d      	ldr	r1, [pc, #436]	@ (80050f4 <HAL_I2C_Mem_Write+0x1ec>)
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 fc8d 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e0cc      	b.n	80050ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d101      	bne.n	8004f5e <HAL_I2C_Mem_Write+0x56>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e0c5      	b.n	80050ea <HAL_I2C_Mem_Write+0x1e2>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d007      	beq.n	8004f84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0201 	orr.w	r2, r2, #1
 8004f82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2221      	movs	r2, #33	@ 0x21
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2240      	movs	r2, #64	@ 0x40
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a3a      	ldr	r2, [r7, #32]
 8004fae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4a4d      	ldr	r2, [pc, #308]	@ (80050f8 <HAL_I2C_Mem_Write+0x1f0>)
 8004fc4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fc6:	88f8      	ldrh	r0, [r7, #6]
 8004fc8:	893a      	ldrh	r2, [r7, #8]
 8004fca:	8979      	ldrh	r1, [r7, #10]
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	9301      	str	r3, [sp, #4]
 8004fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 fac4 	bl	8005564 <I2C_RequestMemoryWrite>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d052      	beq.n	8005088 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e081      	b.n	80050ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 fd0e 	bl	8005a0c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00d      	beq.n	8005012 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d107      	bne.n	800500e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800500c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e06b      	b.n	80050ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005016:	781a      	ldrb	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b04      	cmp	r3, #4
 800504e:	d11b      	bne.n	8005088 <HAL_I2C_Mem_Write+0x180>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005054:	2b00      	cmp	r3, #0
 8005056:	d017      	beq.n	8005088 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505c:	781a      	ldrb	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005072:	3b01      	subs	r3, #1
 8005074:	b29a      	uxth	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1aa      	bne.n	8004fe6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 fcfa 	bl	8005a8e <I2C_WaitOnBTFFlagUntilTimeout>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00d      	beq.n	80050bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d107      	bne.n	80050b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e016      	b.n	80050ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	e000      	b.n	80050ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80050e8:	2302      	movs	r3, #2
  }
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	00100002 	.word	0x00100002
 80050f8:	ffff0000 	.word	0xffff0000

080050fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08c      	sub	sp, #48	@ 0x30
 8005100:	af02      	add	r7, sp, #8
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	4608      	mov	r0, r1
 8005106:	4611      	mov	r1, r2
 8005108:	461a      	mov	r2, r3
 800510a:	4603      	mov	r3, r0
 800510c:	817b      	strh	r3, [r7, #10]
 800510e:	460b      	mov	r3, r1
 8005110:	813b      	strh	r3, [r7, #8]
 8005112:	4613      	mov	r3, r2
 8005114:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005116:	f7fd f93d 	bl	8002394 <HAL_GetTick>
 800511a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b20      	cmp	r3, #32
 8005126:	f040 8208 	bne.w	800553a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	2319      	movs	r3, #25
 8005130:	2201      	movs	r2, #1
 8005132:	497b      	ldr	r1, [pc, #492]	@ (8005320 <HAL_I2C_Mem_Read+0x224>)
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 fb93 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005140:	2302      	movs	r3, #2
 8005142:	e1fb      	b.n	800553c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800514a:	2b01      	cmp	r3, #1
 800514c:	d101      	bne.n	8005152 <HAL_I2C_Mem_Read+0x56>
 800514e:	2302      	movs	r3, #2
 8005150:	e1f4      	b.n	800553c <HAL_I2C_Mem_Read+0x440>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b01      	cmp	r3, #1
 8005166:	d007      	beq.n	8005178 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005186:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2222      	movs	r2, #34	@ 0x22
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2240      	movs	r2, #64	@ 0x40
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80051a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4a5b      	ldr	r2, [pc, #364]	@ (8005324 <HAL_I2C_Mem_Read+0x228>)
 80051b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051ba:	88f8      	ldrh	r0, [r7, #6]
 80051bc:	893a      	ldrh	r2, [r7, #8]
 80051be:	8979      	ldrh	r1, [r7, #10]
 80051c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c2:	9301      	str	r3, [sp, #4]
 80051c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	4603      	mov	r3, r0
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f000 fa60 	bl	8005690 <I2C_RequestMemoryRead>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e1b0      	b.n	800553c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d113      	bne.n	800520a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051e2:	2300      	movs	r3, #0
 80051e4:	623b      	str	r3, [r7, #32]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	623b      	str	r3, [r7, #32]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	623b      	str	r3, [r7, #32]
 80051f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	e184      	b.n	8005514 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800520e:	2b01      	cmp	r3, #1
 8005210:	d11b      	bne.n	800524a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005220:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005222:	2300      	movs	r3, #0
 8005224:	61fb      	str	r3, [r7, #28]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	61fb      	str	r3, [r7, #28]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	61fb      	str	r3, [r7, #28]
 8005236:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	e164      	b.n	8005514 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800524e:	2b02      	cmp	r3, #2
 8005250:	d11b      	bne.n	800528a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005260:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005270:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005272:	2300      	movs	r3, #0
 8005274:	61bb      	str	r3, [r7, #24]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	61bb      	str	r3, [r7, #24]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	61bb      	str	r3, [r7, #24]
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	e144      	b.n	8005514 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800528a:	2300      	movs	r3, #0
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80052a0:	e138      	b.n	8005514 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	f200 80f1 	bhi.w	800548e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d123      	bne.n	80052fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 fc29 	bl	8005b10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e139      	b.n	800553c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691a      	ldr	r2, [r3, #16]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052fa:	e10b      	b.n	8005514 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005300:	2b02      	cmp	r3, #2
 8005302:	d14e      	bne.n	80053a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530a:	2200      	movs	r2, #0
 800530c:	4906      	ldr	r1, [pc, #24]	@ (8005328 <HAL_I2C_Mem_Read+0x22c>)
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 faa6 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d008      	beq.n	800532c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e10e      	b.n	800553c <HAL_I2C_Mem_Read+0x440>
 800531e:	bf00      	nop
 8005320:	00100002 	.word	0x00100002
 8005324:	ffff0000 	.word	0xffff0000
 8005328:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800533a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691a      	ldr	r2, [r3, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800538a:	3b01      	subs	r3, #1
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005396:	b29b      	uxth	r3, r3
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80053a0:	e0b8      	b.n	8005514 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a8:	2200      	movs	r2, #0
 80053aa:	4966      	ldr	r1, [pc, #408]	@ (8005544 <HAL_I2C_Mem_Read+0x448>)
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 fa57 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e0bf      	b.n	800553c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005404:	2200      	movs	r2, #0
 8005406:	494f      	ldr	r1, [pc, #316]	@ (8005544 <HAL_I2C_Mem_Read+0x448>)
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 fa29 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e091      	b.n	800553c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005426:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005444:	3b01      	subs	r3, #1
 8005446:	b29a      	uxth	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005450:	b29b      	uxth	r3, r3
 8005452:	3b01      	subs	r3, #1
 8005454:	b29a      	uxth	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691a      	ldr	r2, [r3, #16]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005482:	b29b      	uxth	r3, r3
 8005484:	3b01      	subs	r3, #1
 8005486:	b29a      	uxth	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800548c:	e042      	b.n	8005514 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800548e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005490:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 fb3c 	bl	8005b10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e04c      	b.n	800553c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	691a      	ldr	r2, [r3, #16]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b4:	1c5a      	adds	r2, r3, #1
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d118      	bne.n	8005514 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800550a:	b29b      	uxth	r3, r3
 800550c:	3b01      	subs	r3, #1
 800550e:	b29a      	uxth	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005518:	2b00      	cmp	r3, #0
 800551a:	f47f aec2 	bne.w	80052a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2220      	movs	r2, #32
 8005522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	e000      	b.n	800553c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800553a:	2302      	movs	r3, #2
  }
}
 800553c:	4618      	mov	r0, r3
 800553e:	3728      	adds	r7, #40	@ 0x28
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	00010004 	.word	0x00010004

08005548 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005556:	b2db      	uxtb	r3, r3
}
 8005558:	4618      	mov	r0, r3
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b088      	sub	sp, #32
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	4608      	mov	r0, r1
 800556e:	4611      	mov	r1, r2
 8005570:	461a      	mov	r2, r3
 8005572:	4603      	mov	r3, r0
 8005574:	817b      	strh	r3, [r7, #10]
 8005576:	460b      	mov	r3, r1
 8005578:	813b      	strh	r3, [r7, #8]
 800557a:	4613      	mov	r3, r2
 800557c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800558c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800558e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	2200      	movs	r2, #0
 8005596:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 f960 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00d      	beq.n	80055c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055b4:	d103      	bne.n	80055be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e05f      	b.n	8005682 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055c2:	897b      	ldrh	r3, [r7, #10]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80055d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	6a3a      	ldr	r2, [r7, #32]
 80055d6:	492d      	ldr	r1, [pc, #180]	@ (800568c <I2C_RequestMemoryWrite+0x128>)
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f998 	bl	800590e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e04c      	b.n	8005682 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055e8:	2300      	movs	r3, #0
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005600:	6a39      	ldr	r1, [r7, #32]
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 fa02 	bl	8005a0c <I2C_WaitOnTXEFlagUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00d      	beq.n	800562a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005612:	2b04      	cmp	r3, #4
 8005614:	d107      	bne.n	8005626 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005624:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e02b      	b.n	8005682 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800562a:	88fb      	ldrh	r3, [r7, #6]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d105      	bne.n	800563c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005630:	893b      	ldrh	r3, [r7, #8]
 8005632:	b2da      	uxtb	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	611a      	str	r2, [r3, #16]
 800563a:	e021      	b.n	8005680 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800563c:	893b      	ldrh	r3, [r7, #8]
 800563e:	0a1b      	lsrs	r3, r3, #8
 8005640:	b29b      	uxth	r3, r3
 8005642:	b2da      	uxtb	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800564a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800564c:	6a39      	ldr	r1, [r7, #32]
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 f9dc 	bl	8005a0c <I2C_WaitOnTXEFlagUntilTimeout>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00d      	beq.n	8005676 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565e:	2b04      	cmp	r3, #4
 8005660:	d107      	bne.n	8005672 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005670:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e005      	b.n	8005682 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005676:	893b      	ldrh	r3, [r7, #8]
 8005678:	b2da      	uxtb	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	00010002 	.word	0x00010002

08005690 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af02      	add	r7, sp, #8
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	4608      	mov	r0, r1
 800569a:	4611      	mov	r1, r2
 800569c:	461a      	mov	r2, r3
 800569e:	4603      	mov	r3, r0
 80056a0:	817b      	strh	r3, [r7, #10]
 80056a2:	460b      	mov	r3, r1
 80056a4:	813b      	strh	r3, [r7, #8]
 80056a6:	4613      	mov	r3, r2
 80056a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80056b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 f8c2 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00d      	beq.n	80056fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056f0:	d103      	bne.n	80056fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e0aa      	b.n	8005854 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056fe:	897b      	ldrh	r3, [r7, #10]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	461a      	mov	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800570c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800570e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005710:	6a3a      	ldr	r2, [r7, #32]
 8005712:	4952      	ldr	r1, [pc, #328]	@ (800585c <I2C_RequestMemoryRead+0x1cc>)
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f8fa 	bl	800590e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e097      	b.n	8005854 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005724:	2300      	movs	r3, #0
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800573a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800573c:	6a39      	ldr	r1, [r7, #32]
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 f964 	bl	8005a0c <I2C_WaitOnTXEFlagUntilTimeout>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00d      	beq.n	8005766 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574e:	2b04      	cmp	r3, #4
 8005750:	d107      	bne.n	8005762 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005760:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e076      	b.n	8005854 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005766:	88fb      	ldrh	r3, [r7, #6]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d105      	bne.n	8005778 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800576c:	893b      	ldrh	r3, [r7, #8]
 800576e:	b2da      	uxtb	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	611a      	str	r2, [r3, #16]
 8005776:	e021      	b.n	80057bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005778:	893b      	ldrh	r3, [r7, #8]
 800577a:	0a1b      	lsrs	r3, r3, #8
 800577c:	b29b      	uxth	r3, r3
 800577e:	b2da      	uxtb	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005788:	6a39      	ldr	r1, [r7, #32]
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 f93e 	bl	8005a0c <I2C_WaitOnTXEFlagUntilTimeout>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00d      	beq.n	80057b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579a:	2b04      	cmp	r3, #4
 800579c:	d107      	bne.n	80057ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e050      	b.n	8005854 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057b2:	893b      	ldrh	r3, [r7, #8]
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057be:	6a39      	ldr	r1, [r7, #32]
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f923 	bl	8005a0c <I2C_WaitOnTXEFlagUntilTimeout>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00d      	beq.n	80057e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d107      	bne.n	80057e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e035      	b.n	8005854 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	2200      	movs	r2, #0
 8005800:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 f82b 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00d      	beq.n	800582c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800581a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800581e:	d103      	bne.n	8005828 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005826:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e013      	b.n	8005854 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800582c:	897b      	ldrh	r3, [r7, #10]
 800582e:	b2db      	uxtb	r3, r3
 8005830:	f043 0301 	orr.w	r3, r3, #1
 8005834:	b2da      	uxtb	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800583c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583e:	6a3a      	ldr	r2, [r7, #32]
 8005840:	4906      	ldr	r1, [pc, #24]	@ (800585c <I2C_RequestMemoryRead+0x1cc>)
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 f863 	bl	800590e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e000      	b.n	8005854 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	00010002 	.word	0x00010002

08005860 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	603b      	str	r3, [r7, #0]
 800586c:	4613      	mov	r3, r2
 800586e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005870:	e025      	b.n	80058be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005878:	d021      	beq.n	80058be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587a:	f7fc fd8b 	bl	8002394 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d302      	bcc.n	8005890 <I2C_WaitOnFlagUntilTimeout+0x30>
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d116      	bne.n	80058be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2220      	movs	r2, #32
 800589a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	f043 0220 	orr.w	r2, r3, #32
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e023      	b.n	8005906 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	0c1b      	lsrs	r3, r3, #16
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d10d      	bne.n	80058e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	43da      	mvns	r2, r3
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	4013      	ands	r3, r2
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	bf0c      	ite	eq
 80058da:	2301      	moveq	r3, #1
 80058dc:	2300      	movne	r3, #0
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	461a      	mov	r2, r3
 80058e2:	e00c      	b.n	80058fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	43da      	mvns	r2, r3
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4013      	ands	r3, r2
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	bf0c      	ite	eq
 80058f6:	2301      	moveq	r3, #1
 80058f8:	2300      	movne	r3, #0
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	461a      	mov	r2, r3
 80058fe:	79fb      	ldrb	r3, [r7, #7]
 8005900:	429a      	cmp	r2, r3
 8005902:	d0b6      	beq.n	8005872 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	607a      	str	r2, [r7, #4]
 800591a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800591c:	e051      	b.n	80059c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800592c:	d123      	bne.n	8005976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800593c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005946:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2220      	movs	r2, #32
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005962:	f043 0204 	orr.w	r2, r3, #4
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e046      	b.n	8005a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597c:	d021      	beq.n	80059c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597e:	f7fc fd09 	bl	8002394 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	429a      	cmp	r2, r3
 800598c:	d302      	bcc.n	8005994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d116      	bne.n	80059c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2220      	movs	r2, #32
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ae:	f043 0220 	orr.w	r2, r3, #32
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e020      	b.n	8005a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	0c1b      	lsrs	r3, r3, #16
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d10c      	bne.n	80059e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	43da      	mvns	r2, r3
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	4013      	ands	r3, r2
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	bf14      	ite	ne
 80059de:	2301      	movne	r3, #1
 80059e0:	2300      	moveq	r3, #0
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	e00b      	b.n	80059fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	43da      	mvns	r2, r3
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	4013      	ands	r3, r2
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	bf14      	ite	ne
 80059f8:	2301      	movne	r3, #1
 80059fa:	2300      	moveq	r3, #0
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d18d      	bne.n	800591e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a18:	e02d      	b.n	8005a76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 f8ce 	bl	8005bbc <I2C_IsAcknowledgeFailed>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e02d      	b.n	8005a86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a30:	d021      	beq.n	8005a76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a32:	f7fc fcaf 	bl	8002394 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d302      	bcc.n	8005a48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d116      	bne.n	8005a76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a62:	f043 0220 	orr.w	r2, r3, #32
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e007      	b.n	8005a86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a80:	2b80      	cmp	r3, #128	@ 0x80
 8005a82:	d1ca      	bne.n	8005a1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b084      	sub	sp, #16
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a9a:	e02d      	b.n	8005af8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 f88d 	bl	8005bbc <I2C_IsAcknowledgeFailed>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e02d      	b.n	8005b08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab2:	d021      	beq.n	8005af8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab4:	f7fc fc6e 	bl	8002394 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d302      	bcc.n	8005aca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d116      	bne.n	8005af8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae4:	f043 0220 	orr.w	r2, r3, #32
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e007      	b.n	8005b08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	f003 0304 	and.w	r3, r3, #4
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	d1ca      	bne.n	8005a9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b1c:	e042      	b.n	8005ba4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	f003 0310 	and.w	r3, r3, #16
 8005b28:	2b10      	cmp	r3, #16
 8005b2a:	d119      	bne.n	8005b60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0210 	mvn.w	r2, #16
 8005b34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e029      	b.n	8005bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b60:	f7fc fc18 	bl	8002394 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d302      	bcc.n	8005b76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d116      	bne.n	8005ba4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b90:	f043 0220 	orr.w	r2, r3, #32
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e007      	b.n	8005bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bae:	2b40      	cmp	r3, #64	@ 0x40
 8005bb0:	d1b5      	bne.n	8005b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bd2:	d11b      	bne.n	8005c0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005bdc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf8:	f043 0204 	orr.w	r2, r3, #4
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e000      	b.n	8005c0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
	...

08005c1c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b088      	sub	sp, #32
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e128      	b.n	8005e80 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d109      	bne.n	8005c4e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a90      	ldr	r2, [pc, #576]	@ (8005e88 <HAL_I2S_Init+0x26c>)
 8005c46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7fb fdf1 	bl	8001830 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2202      	movs	r2, #2
 8005c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6812      	ldr	r2, [r2, #0]
 8005c60:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005c64:	f023 030f 	bic.w	r3, r3, #15
 8005c68:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d060      	beq.n	8005d3c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d102      	bne.n	8005c88 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005c82:	2310      	movs	r3, #16
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	e001      	b.n	8005c8c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005c88:	2320      	movs	r3, #32
 8005c8a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	2b20      	cmp	r3, #32
 8005c92:	d802      	bhi.n	8005c9a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005c9a:	2001      	movs	r0, #1
 8005c9c:	f001 fe14 	bl	80078c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005ca0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005caa:	d125      	bne.n	8005cf8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d010      	beq.n	8005cd6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd0:	3305      	adds	r3, #5
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	e01f      	b.n	8005d16 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	461a      	mov	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf2:	3305      	adds	r3, #5
 8005cf4:	613b      	str	r3, [r7, #16]
 8005cf6:	e00e      	b.n	8005d16 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d00:	4613      	mov	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	461a      	mov	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d12:	3305      	adds	r3, #5
 8005d14:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	4a5c      	ldr	r2, [pc, #368]	@ (8005e8c <HAL_I2S_Init+0x270>)
 8005d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1e:	08db      	lsrs	r3, r3, #3
 8005d20:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	085b      	lsrs	r3, r3, #1
 8005d32:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	021b      	lsls	r3, r3, #8
 8005d38:	61bb      	str	r3, [r7, #24]
 8005d3a:	e003      	b.n	8005d44 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d902      	bls.n	8005d50 <HAL_I2S_Init+0x134>
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	2bff      	cmp	r3, #255	@ 0xff
 8005d4e:	d907      	bls.n	8005d60 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d54:	f043 0210 	orr.w	r2, r3, #16
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e08f      	b.n	8005e80 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691a      	ldr	r2, [r3, #16]
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	ea42 0103 	orr.w	r1, r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69fa      	ldr	r2, [r7, #28]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005d7e:	f023 030f 	bic.w	r3, r3, #15
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6851      	ldr	r1, [r2, #4]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6892      	ldr	r2, [r2, #8]
 8005d8a:	4311      	orrs	r1, r2
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	68d2      	ldr	r2, [r2, #12]
 8005d90:	4311      	orrs	r1, r2
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	6992      	ldr	r2, [r2, #24]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005da2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d161      	bne.n	8005e70 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a38      	ldr	r2, [pc, #224]	@ (8005e90 <HAL_I2S_Init+0x274>)
 8005db0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a37      	ldr	r2, [pc, #220]	@ (8005e94 <HAL_I2S_Init+0x278>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d101      	bne.n	8005dc0 <HAL_I2S_Init+0x1a4>
 8005dbc:	4b36      	ldr	r3, [pc, #216]	@ (8005e98 <HAL_I2S_Init+0x27c>)
 8005dbe:	e001      	b.n	8005dc4 <HAL_I2S_Init+0x1a8>
 8005dc0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	4932      	ldr	r1, [pc, #200]	@ (8005e94 <HAL_I2S_Init+0x278>)
 8005dcc:	428a      	cmp	r2, r1
 8005dce:	d101      	bne.n	8005dd4 <HAL_I2S_Init+0x1b8>
 8005dd0:	4a31      	ldr	r2, [pc, #196]	@ (8005e98 <HAL_I2S_Init+0x27c>)
 8005dd2:	e001      	b.n	8005dd8 <HAL_I2S_Init+0x1bc>
 8005dd4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005dd8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005ddc:	f023 030f 	bic.w	r3, r3, #15
 8005de0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a2b      	ldr	r2, [pc, #172]	@ (8005e94 <HAL_I2S_Init+0x278>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d101      	bne.n	8005df0 <HAL_I2S_Init+0x1d4>
 8005dec:	4b2a      	ldr	r3, [pc, #168]	@ (8005e98 <HAL_I2S_Init+0x27c>)
 8005dee:	e001      	b.n	8005df4 <HAL_I2S_Init+0x1d8>
 8005df0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005df4:	2202      	movs	r2, #2
 8005df6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a25      	ldr	r2, [pc, #148]	@ (8005e94 <HAL_I2S_Init+0x278>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d101      	bne.n	8005e06 <HAL_I2S_Init+0x1ea>
 8005e02:	4b25      	ldr	r3, [pc, #148]	@ (8005e98 <HAL_I2S_Init+0x27c>)
 8005e04:	e001      	b.n	8005e0a <HAL_I2S_Init+0x1ee>
 8005e06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e16:	d003      	beq.n	8005e20 <HAL_I2S_Init+0x204>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d103      	bne.n	8005e28 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005e20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005e24:	613b      	str	r3, [r7, #16]
 8005e26:	e001      	b.n	8005e2c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005e36:	4313      	orrs	r3, r2
 8005e38:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005e40:	4313      	orrs	r3, r2
 8005e42:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	897b      	ldrh	r3, [r7, #10]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005e58:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a0d      	ldr	r2, [pc, #52]	@ (8005e94 <HAL_I2S_Init+0x278>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d101      	bne.n	8005e68 <HAL_I2S_Init+0x24c>
 8005e64:	4b0c      	ldr	r3, [pc, #48]	@ (8005e98 <HAL_I2S_Init+0x27c>)
 8005e66:	e001      	b.n	8005e6c <HAL_I2S_Init+0x250>
 8005e68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e6c:	897a      	ldrh	r2, [r7, #10]
 8005e6e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3720      	adds	r7, #32
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	08006721 	.word	0x08006721
 8005e8c:	cccccccd 	.word	0xcccccccd
 8005e90:	080068a9 	.word	0x080068a9
 8005e94:	40003800 	.word	0x40003800
 8005e98:	40003400 	.word	0x40003400

08005e9c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <HAL_I2S_Transmit_DMA+0x1a>
 8005eb0:	88fb      	ldrh	r3, [r7, #6]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e08e      	b.n	8005fd8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d101      	bne.n	8005eca <HAL_I2S_Transmit_DMA+0x2e>
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	e086      	b.n	8005fd8 <HAL_I2S_Transmit_DMA+0x13c>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d005      	beq.n	8005eea <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	e076      	b.n	8005fd8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2203      	movs	r2, #3
 8005eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2b03      	cmp	r3, #3
 8005f0e:	d002      	beq.n	8005f16 <HAL_I2S_Transmit_DMA+0x7a>
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2b05      	cmp	r3, #5
 8005f14:	d10a      	bne.n	8005f2c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005f16:	88fb      	ldrh	r3, [r7, #6]
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005f20:	88fb      	ldrh	r3, [r7, #6]
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f2a:	e005      	b.n	8005f38 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	88fa      	ldrh	r2, [r7, #6]
 8005f30:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	88fa      	ldrh	r2, [r7, #6]
 8005f36:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3c:	4a28      	ldr	r2, [pc, #160]	@ (8005fe0 <HAL_I2S_Transmit_DMA+0x144>)
 8005f3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f44:	4a27      	ldr	r2, [pc, #156]	@ (8005fe4 <HAL_I2S_Transmit_DMA+0x148>)
 8005f46:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4c:	4a26      	ldr	r2, [pc, #152]	@ (8005fe8 <HAL_I2S_Transmit_DMA+0x14c>)
 8005f4e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005f58:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005f60:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f66:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005f68:	f7fc fc62 	bl	8002830 <HAL_DMA_Start_IT>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00f      	beq.n	8005f92 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f76:	f043 0208 	orr.w	r2, r3, #8
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e022      	b.n	8005fd8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d107      	bne.n	8005fb0 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	69da      	ldr	r2, [r3, #28]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005fae:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d107      	bne.n	8005fce <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f042 0202 	orr.w	r2, r2, #2
 8005fcc:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	080065ff 	.word	0x080065ff
 8005fe4:	080065bd 	.word	0x080065bd
 8005fe8:	0800661b 	.word	0x0800661b

08005fec <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d101      	bne.n	8006004 <HAL_I2S_DMAPause+0x18>
 8006000:	2302      	movs	r3, #2
 8006002:	e04a      	b.n	800609a <HAL_I2S_DMAPause+0xae>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b03      	cmp	r3, #3
 8006016:	d108      	bne.n	800602a <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0202 	bic.w	r2, r2, #2
 8006026:	605a      	str	r2, [r3, #4]
 8006028:	e032      	b.n	8006090 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b04      	cmp	r3, #4
 8006034:	d108      	bne.n	8006048 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0201 	bic.w	r2, r2, #1
 8006044:	605a      	str	r2, [r3, #4]
 8006046:	e023      	b.n	8006090 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b05      	cmp	r3, #5
 8006052:	d11d      	bne.n	8006090 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0203 	bic.w	r2, r2, #3
 8006062:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a0f      	ldr	r2, [pc, #60]	@ (80060a8 <HAL_I2S_DMAPause+0xbc>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d101      	bne.n	8006072 <HAL_I2S_DMAPause+0x86>
 800606e:	4b0f      	ldr	r3, [pc, #60]	@ (80060ac <HAL_I2S_DMAPause+0xc0>)
 8006070:	e001      	b.n	8006076 <HAL_I2S_DMAPause+0x8a>
 8006072:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	490a      	ldr	r1, [pc, #40]	@ (80060a8 <HAL_I2S_DMAPause+0xbc>)
 800607e:	428b      	cmp	r3, r1
 8006080:	d101      	bne.n	8006086 <HAL_I2S_DMAPause+0x9a>
 8006082:	4b0a      	ldr	r3, [pc, #40]	@ (80060ac <HAL_I2S_DMAPause+0xc0>)
 8006084:	e001      	b.n	800608a <HAL_I2S_DMAPause+0x9e>
 8006086:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800608a:	f022 0203 	bic.w	r2, r2, #3
 800608e:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	40003800 	.word	0x40003800
 80060ac:	40003400 	.word	0x40003400

080060b0 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_I2S_DMAResume+0x18>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e07d      	b.n	80061c4 <HAL_I2S_DMAResume+0x114>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d108      	bne.n	80060ee <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0202 	orr.w	r2, r2, #2
 80060ea:	605a      	str	r2, [r3, #4]
 80060ec:	e056      	b.n	800619c <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	d108      	bne.n	800610c <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f042 0201 	orr.w	r2, r2, #1
 8006108:	605a      	str	r2, [r3, #4]
 800610a:	e047      	b.n	800619c <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b05      	cmp	r3, #5
 8006116:	d141      	bne.n	800619c <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0203 	orr.w	r2, r2, #3
 8006126:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a28      	ldr	r2, [pc, #160]	@ (80061d0 <HAL_I2S_DMAResume+0x120>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d101      	bne.n	8006136 <HAL_I2S_DMAResume+0x86>
 8006132:	4b28      	ldr	r3, [pc, #160]	@ (80061d4 <HAL_I2S_DMAResume+0x124>)
 8006134:	e001      	b.n	800613a <HAL_I2S_DMAResume+0x8a>
 8006136:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4923      	ldr	r1, [pc, #140]	@ (80061d0 <HAL_I2S_DMAResume+0x120>)
 8006142:	428b      	cmp	r3, r1
 8006144:	d101      	bne.n	800614a <HAL_I2S_DMAResume+0x9a>
 8006146:	4b23      	ldr	r3, [pc, #140]	@ (80061d4 <HAL_I2S_DMAResume+0x124>)
 8006148:	e001      	b.n	800614e <HAL_I2S_DMAResume+0x9e>
 800614a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800614e:	f042 0203 	orr.w	r2, r2, #3
 8006152:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a1d      	ldr	r2, [pc, #116]	@ (80061d0 <HAL_I2S_DMAResume+0x120>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d101      	bne.n	8006162 <HAL_I2S_DMAResume+0xb2>
 800615e:	4b1d      	ldr	r3, [pc, #116]	@ (80061d4 <HAL_I2S_DMAResume+0x124>)
 8006160:	e001      	b.n	8006166 <HAL_I2S_DMAResume+0xb6>
 8006162:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800616c:	2b00      	cmp	r3, #0
 800616e:	d115      	bne.n	800619c <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a16      	ldr	r2, [pc, #88]	@ (80061d0 <HAL_I2S_DMAResume+0x120>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d101      	bne.n	800617e <HAL_I2S_DMAResume+0xce>
 800617a:	4b16      	ldr	r3, [pc, #88]	@ (80061d4 <HAL_I2S_DMAResume+0x124>)
 800617c:	e001      	b.n	8006182 <HAL_I2S_DMAResume+0xd2>
 800617e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006182:	69da      	ldr	r2, [r3, #28]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4911      	ldr	r1, [pc, #68]	@ (80061d0 <HAL_I2S_DMAResume+0x120>)
 800618a:	428b      	cmp	r3, r1
 800618c:	d101      	bne.n	8006192 <HAL_I2S_DMAResume+0xe2>
 800618e:	4b11      	ldr	r3, [pc, #68]	@ (80061d4 <HAL_I2S_DMAResume+0x124>)
 8006190:	e001      	b.n	8006196 <HAL_I2S_DMAResume+0xe6>
 8006192:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006196:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800619a:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d107      	bne.n	80061ba <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69da      	ldr	r2, [r3, #28]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80061b8:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	40003800 	.word	0x40003800
 80061d4:	40003400 	.word	0x40003400

080061d8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061ec:	d004      	beq.n	80061f8 <HAL_I2S_DMAStop+0x20>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f040 80d1 	bne.w	800639a <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00f      	beq.n	8006220 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006204:	4618      	mov	r0, r3
 8006206:	f7fc fb6b 	bl	80028e0 <HAL_DMA_Abort>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d007      	beq.n	8006220 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006214:	f043 0208 	orr.w	r2, r3, #8
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006220:	2364      	movs	r3, #100	@ 0x64
 8006222:	2201      	movs	r2, #1
 8006224:	2102      	movs	r1, #2
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fb04 	bl	8006834 <I2S_WaitFlagStateUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00b      	beq.n	800624a <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006236:	f043 0201 	orr.w	r2, r3, #1
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800624a:	2364      	movs	r3, #100	@ 0x64
 800624c:	2200      	movs	r2, #0
 800624e:	2180      	movs	r1, #128	@ 0x80
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 faef 	bl	8006834 <I2S_WaitFlagStateUntilTimeout>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00b      	beq.n	8006274 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006260:	f043 0201 	orr.w	r2, r3, #1
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	69da      	ldr	r2, [r3, #28]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006282:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006284:	2300      	movs	r3, #0
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0202 	bic.w	r2, r2, #2
 80062a0:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b05      	cmp	r3, #5
 80062ac:	f040 8165 	bne.w	800657a <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00f      	beq.n	80062d8 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062bc:	4618      	mov	r0, r3
 80062be:	f7fc fb0f 	bl	80028e0 <HAL_DMA_Abort>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d007      	beq.n	80062d8 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062cc:	f043 0208 	orr.w	r2, r3, #8
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a8a      	ldr	r2, [pc, #552]	@ (8006508 <HAL_I2S_DMAStop+0x330>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d101      	bne.n	80062e6 <HAL_I2S_DMAStop+0x10e>
 80062e2:	4b8a      	ldr	r3, [pc, #552]	@ (800650c <HAL_I2S_DMAStop+0x334>)
 80062e4:	e001      	b.n	80062ea <HAL_I2S_DMAStop+0x112>
 80062e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062ea:	69da      	ldr	r2, [r3, #28]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4985      	ldr	r1, [pc, #532]	@ (8006508 <HAL_I2S_DMAStop+0x330>)
 80062f2:	428b      	cmp	r3, r1
 80062f4:	d101      	bne.n	80062fa <HAL_I2S_DMAStop+0x122>
 80062f6:	4b85      	ldr	r3, [pc, #532]	@ (800650c <HAL_I2S_DMAStop+0x334>)
 80062f8:	e001      	b.n	80062fe <HAL_I2S_DMAStop+0x126>
 80062fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006302:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8006304:	2300      	movs	r3, #0
 8006306:	613b      	str	r3, [r7, #16]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a7e      	ldr	r2, [pc, #504]	@ (8006508 <HAL_I2S_DMAStop+0x330>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d101      	bne.n	8006316 <HAL_I2S_DMAStop+0x13e>
 8006312:	4b7e      	ldr	r3, [pc, #504]	@ (800650c <HAL_I2S_DMAStop+0x334>)
 8006314:	e001      	b.n	800631a <HAL_I2S_DMAStop+0x142>
 8006316:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	613b      	str	r3, [r7, #16]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a79      	ldr	r2, [pc, #484]	@ (8006508 <HAL_I2S_DMAStop+0x330>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d101      	bne.n	800632c <HAL_I2S_DMAStop+0x154>
 8006328:	4b78      	ldr	r3, [pc, #480]	@ (800650c <HAL_I2S_DMAStop+0x334>)
 800632a:	e001      	b.n	8006330 <HAL_I2S_DMAStop+0x158>
 800632c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	613b      	str	r3, [r7, #16]
 8006334:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a73      	ldr	r2, [pc, #460]	@ (8006508 <HAL_I2S_DMAStop+0x330>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d101      	bne.n	8006344 <HAL_I2S_DMAStop+0x16c>
 8006340:	4b72      	ldr	r3, [pc, #456]	@ (800650c <HAL_I2S_DMAStop+0x334>)
 8006342:	e001      	b.n	8006348 <HAL_I2S_DMAStop+0x170>
 8006344:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	496e      	ldr	r1, [pc, #440]	@ (8006508 <HAL_I2S_DMAStop+0x330>)
 8006350:	428b      	cmp	r3, r1
 8006352:	d101      	bne.n	8006358 <HAL_I2S_DMAStop+0x180>
 8006354:	4b6d      	ldr	r3, [pc, #436]	@ (800650c <HAL_I2S_DMAStop+0x334>)
 8006356:	e001      	b.n	800635c <HAL_I2S_DMAStop+0x184>
 8006358:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800635c:	f022 0201 	bic.w	r2, r2, #1
 8006360:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10c      	bne.n	8006384 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800636e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006382:	e0fa      	b.n	800657a <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a5f      	ldr	r2, [pc, #380]	@ (8006508 <HAL_I2S_DMAStop+0x330>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d101      	bne.n	8006392 <HAL_I2S_DMAStop+0x1ba>
 800638e:	4b5f      	ldr	r3, [pc, #380]	@ (800650c <HAL_I2S_DMAStop+0x334>)
 8006390:	e001      	b.n	8006396 <HAL_I2S_DMAStop+0x1be>
 8006392:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006396:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006398:	e0ef      	b.n	800657a <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063a2:	d005      	beq.n	80063b0 <HAL_I2S_DMAStop+0x1d8>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ac:	f040 80e5 	bne.w	800657a <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00f      	beq.n	80063d8 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fc fa8f 	bl	80028e0 <HAL_DMA_Abort>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d007      	beq.n	80063d8 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063cc:	f043 0208 	orr.w	r2, r3, #8
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b05      	cmp	r3, #5
 80063e2:	f040 809a 	bne.w	800651a <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00f      	beq.n	800640e <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fc fa74 	bl	80028e0 <HAL_DMA_Abort>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d007      	beq.n	800640e <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006402:	f043 0208 	orr.w	r2, r3, #8
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 800640e:	f7fb ffc1 	bl	8002394 <HAL_GetTick>
 8006412:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006414:	e012      	b.n	800643c <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006416:	f7fb ffbd 	bl	8002394 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b64      	cmp	r3, #100	@ 0x64
 8006422:	d90b      	bls.n	800643c <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006428:	f043 0201 	orr.w	r2, r3, #1
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a31      	ldr	r2, [pc, #196]	@ (8006508 <HAL_I2S_DMAStop+0x330>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d101      	bne.n	800644a <HAL_I2S_DMAStop+0x272>
 8006446:	4b31      	ldr	r3, [pc, #196]	@ (800650c <HAL_I2S_DMAStop+0x334>)
 8006448:	e001      	b.n	800644e <HAL_I2S_DMAStop+0x276>
 800644a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b02      	cmp	r3, #2
 8006456:	d1de      	bne.n	8006416 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006458:	e012      	b.n	8006480 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800645a:	f7fb ff9b 	bl	8002394 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	2b64      	cmp	r3, #100	@ 0x64
 8006466:	d90b      	bls.n	8006480 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800646c:	f043 0201 	orr.w	r2, r3, #1
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a20      	ldr	r2, [pc, #128]	@ (8006508 <HAL_I2S_DMAStop+0x330>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d101      	bne.n	800648e <HAL_I2S_DMAStop+0x2b6>
 800648a:	4b20      	ldr	r3, [pc, #128]	@ (800650c <HAL_I2S_DMAStop+0x334>)
 800648c:	e001      	b.n	8006492 <HAL_I2S_DMAStop+0x2ba>
 800648e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006498:	2b80      	cmp	r3, #128	@ 0x80
 800649a:	d0de      	beq.n	800645a <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a19      	ldr	r2, [pc, #100]	@ (8006508 <HAL_I2S_DMAStop+0x330>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d101      	bne.n	80064aa <HAL_I2S_DMAStop+0x2d2>
 80064a6:	4b19      	ldr	r3, [pc, #100]	@ (800650c <HAL_I2S_DMAStop+0x334>)
 80064a8:	e001      	b.n	80064ae <HAL_I2S_DMAStop+0x2d6>
 80064aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064ae:	69da      	ldr	r2, [r3, #28]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4914      	ldr	r1, [pc, #80]	@ (8006508 <HAL_I2S_DMAStop+0x330>)
 80064b6:	428b      	cmp	r3, r1
 80064b8:	d101      	bne.n	80064be <HAL_I2S_DMAStop+0x2e6>
 80064ba:	4b14      	ldr	r3, [pc, #80]	@ (800650c <HAL_I2S_DMAStop+0x334>)
 80064bc:	e001      	b.n	80064c2 <HAL_I2S_DMAStop+0x2ea>
 80064be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064c6:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80064c8:	2300      	movs	r3, #0
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a0d      	ldr	r2, [pc, #52]	@ (8006508 <HAL_I2S_DMAStop+0x330>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d101      	bne.n	80064da <HAL_I2S_DMAStop+0x302>
 80064d6:	4b0d      	ldr	r3, [pc, #52]	@ (800650c <HAL_I2S_DMAStop+0x334>)
 80064d8:	e001      	b.n	80064de <HAL_I2S_DMAStop+0x306>
 80064da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a07      	ldr	r2, [pc, #28]	@ (8006508 <HAL_I2S_DMAStop+0x330>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d101      	bne.n	80064f2 <HAL_I2S_DMAStop+0x31a>
 80064ee:	4b07      	ldr	r3, [pc, #28]	@ (800650c <HAL_I2S_DMAStop+0x334>)
 80064f0:	e001      	b.n	80064f6 <HAL_I2S_DMAStop+0x31e>
 80064f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4902      	ldr	r1, [pc, #8]	@ (8006508 <HAL_I2S_DMAStop+0x330>)
 80064fe:	428b      	cmp	r3, r1
 8006500:	d106      	bne.n	8006510 <HAL_I2S_DMAStop+0x338>
 8006502:	4b02      	ldr	r3, [pc, #8]	@ (800650c <HAL_I2S_DMAStop+0x334>)
 8006504:	e006      	b.n	8006514 <HAL_I2S_DMAStop+0x33c>
 8006506:	bf00      	nop
 8006508:	40003800 	.word	0x40003800
 800650c:	40003400 	.word	0x40003400
 8006510:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006514:	f022 0202 	bic.w	r2, r2, #2
 8006518:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69da      	ldr	r2, [r3, #28]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006528:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800652a:	2300      	movs	r3, #0
 800652c:	60bb      	str	r3, [r7, #8]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	60bb      	str	r3, [r7, #8]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	60bb      	str	r3, [r7, #8]
 800653e:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0201 	bic.w	r2, r2, #1
 800654e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006558:	d10c      	bne.n	8006574 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800655e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	77fb      	strb	r3, [r7, #31]
 8006572:	e002      	b.n	800657a <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 8006582:	7ffb      	ldrb	r3, [r7, #31]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3720      	adds	r7, #32
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065ae:	b2db      	uxtb	r3, r3
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10e      	bne.n	80065f0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0202 	bic.w	r2, r2, #2
 80065e0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f7fa f881 	bl	80006f8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80065f6:	bf00      	nop
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800660a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f7fa f885 	bl	800071c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006612:	bf00      	nop
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b084      	sub	sp, #16
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006626:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 0203 	bic.w	r2, r2, #3
 8006636:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006650:	f043 0208 	orr.w	r2, r3, #8
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f7fa f9cf 	bl	80009fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800665e:	bf00      	nop
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b082      	sub	sp, #8
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006672:	881a      	ldrh	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667e:	1c9a      	adds	r2, r3, #2
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006688:	b29b      	uxth	r3, r3
 800668a:	3b01      	subs	r3, #1
 800668c:	b29a      	uxth	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006696:	b29b      	uxth	r3, r3
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10e      	bne.n	80066ba <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80066aa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7fa f81f 	bl	80006f8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80066ba:	bf00      	nop
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b082      	sub	sp, #8
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d4:	b292      	uxth	r2, r2
 80066d6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066dc:	1c9a      	adds	r2, r3, #2
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10e      	bne.n	8006718 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006708:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7ff ff3a 	bl	800658c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006718:	bf00      	nop
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b04      	cmp	r3, #4
 800673a:	d13a      	bne.n	80067b2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b01      	cmp	r3, #1
 8006744:	d109      	bne.n	800675a <I2S_IRQHandler+0x3a>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006750:	2b40      	cmp	r3, #64	@ 0x40
 8006752:	d102      	bne.n	800675a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7ff ffb4 	bl	80066c2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006760:	2b40      	cmp	r3, #64	@ 0x40
 8006762:	d126      	bne.n	80067b2 <I2S_IRQHandler+0x92>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f003 0320 	and.w	r3, r3, #32
 800676e:	2b20      	cmp	r3, #32
 8006770:	d11f      	bne.n	80067b2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006780:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006782:	2300      	movs	r3, #0
 8006784:	613b      	str	r3, [r7, #16]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	613b      	str	r3, [r7, #16]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	613b      	str	r3, [r7, #16]
 8006796:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a4:	f043 0202 	orr.w	r2, r3, #2
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7fa f925 	bl	80009fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	d136      	bne.n	800682c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d109      	bne.n	80067dc <I2S_IRQHandler+0xbc>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067d2:	2b80      	cmp	r3, #128	@ 0x80
 80067d4:	d102      	bne.n	80067dc <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7ff ff45 	bl	8006666 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f003 0308 	and.w	r3, r3, #8
 80067e2:	2b08      	cmp	r3, #8
 80067e4:	d122      	bne.n	800682c <I2S_IRQHandler+0x10c>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f003 0320 	and.w	r3, r3, #32
 80067f0:	2b20      	cmp	r3, #32
 80067f2:	d11b      	bne.n	800682c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006802:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006804:	2300      	movs	r3, #0
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800681e:	f043 0204 	orr.w	r2, r3, #4
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7fa f8e8 	bl	80009fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800682c:	bf00      	nop
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	603b      	str	r3, [r7, #0]
 8006840:	4613      	mov	r3, r2
 8006842:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006844:	f7fb fda6 	bl	8002394 <HAL_GetTick>
 8006848:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800684a:	e018      	b.n	800687e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006852:	d014      	beq.n	800687e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006854:	f7fb fd9e 	bl	8002394 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	429a      	cmp	r2, r3
 8006862:	d902      	bls.n	800686a <I2S_WaitFlagStateUntilTimeout+0x36>
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d109      	bne.n	800687e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e00f      	b.n	800689e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	4013      	ands	r3, r2
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	429a      	cmp	r2, r3
 800688c:	bf0c      	ite	eq
 800688e:	2301      	moveq	r3, #1
 8006890:	2300      	movne	r3, #0
 8006892:	b2db      	uxtb	r3, r3
 8006894:	461a      	mov	r2, r3
 8006896:	79fb      	ldrb	r3, [r7, #7]
 8006898:	429a      	cmp	r2, r3
 800689a:	d1d7      	bne.n	800684c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
	...

080068a8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a92      	ldr	r2, [pc, #584]	@ (8006b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d101      	bne.n	80068c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80068c2:	4b92      	ldr	r3, [pc, #584]	@ (8006b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068c4:	e001      	b.n	80068ca <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80068c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a8b      	ldr	r2, [pc, #556]	@ (8006b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d101      	bne.n	80068e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80068e0:	4b8a      	ldr	r3, [pc, #552]	@ (8006b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068e2:	e001      	b.n	80068e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80068e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068f4:	d004      	beq.n	8006900 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f040 8099 	bne.w	8006a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b02      	cmp	r3, #2
 8006908:	d107      	bne.n	800691a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f925 	bl	8006b64 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b01      	cmp	r3, #1
 8006922:	d107      	bne.n	8006934 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800692a:	2b00      	cmp	r3, #0
 800692c:	d002      	beq.n	8006934 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f9c8 	bl	8006cc4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800693a:	2b40      	cmp	r3, #64	@ 0x40
 800693c:	d13a      	bne.n	80069b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	f003 0320 	and.w	r3, r3, #32
 8006944:	2b00      	cmp	r3, #0
 8006946:	d035      	beq.n	80069b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a6e      	ldr	r2, [pc, #440]	@ (8006b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d101      	bne.n	8006956 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006952:	4b6e      	ldr	r3, [pc, #440]	@ (8006b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006954:	e001      	b.n	800695a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006956:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4969      	ldr	r1, [pc, #420]	@ (8006b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006962:	428b      	cmp	r3, r1
 8006964:	d101      	bne.n	800696a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006966:	4b69      	ldr	r3, [pc, #420]	@ (8006b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006968:	e001      	b.n	800696e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800696a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800696e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006972:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006982:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069a6:	f043 0202 	orr.w	r2, r3, #2
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fa f824 	bl	80009fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	f003 0308 	and.w	r3, r3, #8
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	f040 80c3 	bne.w	8006b46 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f003 0320 	and.w	r3, r3, #32
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 80bd 	beq.w	8006b46 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80069da:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a49      	ldr	r2, [pc, #292]	@ (8006b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d101      	bne.n	80069ea <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80069e6:	4b49      	ldr	r3, [pc, #292]	@ (8006b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80069e8:	e001      	b.n	80069ee <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80069ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4944      	ldr	r1, [pc, #272]	@ (8006b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80069f6:	428b      	cmp	r3, r1
 80069f8:	d101      	bne.n	80069fe <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80069fa:	4b44      	ldr	r3, [pc, #272]	@ (8006b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80069fc:	e001      	b.n	8006a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80069fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a02:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006a06:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60bb      	str	r3, [r7, #8]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	60bb      	str	r3, [r7, #8]
 8006a14:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a22:	f043 0204 	orr.w	r2, r3, #4
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7f9 ffe6 	bl	80009fc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a30:	e089      	b.n	8006b46 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d107      	bne.n	8006a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f8be 	bl	8006bc8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d107      	bne.n	8006a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f8fd 	bl	8006c60 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a6c:	2b40      	cmp	r3, #64	@ 0x40
 8006a6e:	d12f      	bne.n	8006ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f003 0320 	and.w	r3, r3, #32
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d02a      	beq.n	8006ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006a88:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d101      	bne.n	8006a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006a94:	4b1d      	ldr	r3, [pc, #116]	@ (8006b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006a96:	e001      	b.n	8006a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006a98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4919      	ldr	r1, [pc, #100]	@ (8006b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006aa4:	428b      	cmp	r3, r1
 8006aa6:	d101      	bne.n	8006aac <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006aa8:	4b18      	ldr	r3, [pc, #96]	@ (8006b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006aaa:	e001      	b.n	8006ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006aac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ab0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006ab4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ac2:	f043 0202 	orr.w	r2, r3, #2
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7f9 ff96 	bl	80009fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	f003 0308 	and.w	r3, r3, #8
 8006ad6:	2b08      	cmp	r3, #8
 8006ad8:	d136      	bne.n	8006b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f003 0320 	and.w	r3, r3, #32
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d031      	beq.n	8006b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a07      	ldr	r2, [pc, #28]	@ (8006b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d101      	bne.n	8006af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006aee:	4b07      	ldr	r3, [pc, #28]	@ (8006b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006af0:	e001      	b.n	8006af6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006af2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4902      	ldr	r1, [pc, #8]	@ (8006b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006afe:	428b      	cmp	r3, r1
 8006b00:	d106      	bne.n	8006b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006b02:	4b02      	ldr	r3, [pc, #8]	@ (8006b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006b04:	e006      	b.n	8006b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006b06:	bf00      	nop
 8006b08:	40003800 	.word	0x40003800
 8006b0c:	40003400 	.word	0x40003400
 8006b10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b14:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006b18:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006b28:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b36:	f043 0204 	orr.w	r2, r3, #4
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7f9 ff5c 	bl	80009fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b44:	e000      	b.n	8006b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006b46:	bf00      	nop
}
 8006b48:	bf00      	nop
 8006b4a:	3720      	adds	r7, #32
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b70:	1c99      	adds	r1, r3, #2
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	6251      	str	r1, [r2, #36]	@ 0x24
 8006b76:	881a      	ldrh	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d113      	bne.n	8006bbe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006ba4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d106      	bne.n	8006bbe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff ffc9 	bl	8006b50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006bbe:	bf00      	nop
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd4:	1c99      	adds	r1, r3, #2
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	6251      	str	r1, [r2, #36]	@ 0x24
 8006bda:	8819      	ldrh	r1, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a1d      	ldr	r2, [pc, #116]	@ (8006c58 <I2SEx_TxISR_I2SExt+0x90>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d101      	bne.n	8006bea <I2SEx_TxISR_I2SExt+0x22>
 8006be6:	4b1d      	ldr	r3, [pc, #116]	@ (8006c5c <I2SEx_TxISR_I2SExt+0x94>)
 8006be8:	e001      	b.n	8006bee <I2SEx_TxISR_I2SExt+0x26>
 8006bea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bee:	460a      	mov	r2, r1
 8006bf0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d121      	bne.n	8006c4e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a12      	ldr	r2, [pc, #72]	@ (8006c58 <I2SEx_TxISR_I2SExt+0x90>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d101      	bne.n	8006c18 <I2SEx_TxISR_I2SExt+0x50>
 8006c14:	4b11      	ldr	r3, [pc, #68]	@ (8006c5c <I2SEx_TxISR_I2SExt+0x94>)
 8006c16:	e001      	b.n	8006c1c <I2SEx_TxISR_I2SExt+0x54>
 8006c18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	490d      	ldr	r1, [pc, #52]	@ (8006c58 <I2SEx_TxISR_I2SExt+0x90>)
 8006c24:	428b      	cmp	r3, r1
 8006c26:	d101      	bne.n	8006c2c <I2SEx_TxISR_I2SExt+0x64>
 8006c28:	4b0c      	ldr	r3, [pc, #48]	@ (8006c5c <I2SEx_TxISR_I2SExt+0x94>)
 8006c2a:	e001      	b.n	8006c30 <I2SEx_TxISR_I2SExt+0x68>
 8006c2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c30:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006c34:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d106      	bne.n	8006c4e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff ff81 	bl	8006b50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c4e:	bf00      	nop
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	40003800 	.word	0x40003800
 8006c5c:	40003400 	.word	0x40003400

08006c60 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68d8      	ldr	r0, [r3, #12]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c72:	1c99      	adds	r1, r3, #2
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006c78:	b282      	uxth	r2, r0
 8006c7a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	3b01      	subs	r3, #1
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d113      	bne.n	8006cbc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006ca2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d106      	bne.n	8006cbc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff ff4a 	bl	8006b50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006cbc:	bf00      	nop
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a20      	ldr	r2, [pc, #128]	@ (8006d54 <I2SEx_RxISR_I2SExt+0x90>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d101      	bne.n	8006cda <I2SEx_RxISR_I2SExt+0x16>
 8006cd6:	4b20      	ldr	r3, [pc, #128]	@ (8006d58 <I2SEx_RxISR_I2SExt+0x94>)
 8006cd8:	e001      	b.n	8006cde <I2SEx_RxISR_I2SExt+0x1a>
 8006cda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006cde:	68d8      	ldr	r0, [r3, #12]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce4:	1c99      	adds	r1, r3, #2
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006cea:	b282      	uxth	r2, r0
 8006cec:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d121      	bne.n	8006d4a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a12      	ldr	r2, [pc, #72]	@ (8006d54 <I2SEx_RxISR_I2SExt+0x90>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d101      	bne.n	8006d14 <I2SEx_RxISR_I2SExt+0x50>
 8006d10:	4b11      	ldr	r3, [pc, #68]	@ (8006d58 <I2SEx_RxISR_I2SExt+0x94>)
 8006d12:	e001      	b.n	8006d18 <I2SEx_RxISR_I2SExt+0x54>
 8006d14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	490d      	ldr	r1, [pc, #52]	@ (8006d54 <I2SEx_RxISR_I2SExt+0x90>)
 8006d20:	428b      	cmp	r3, r1
 8006d22:	d101      	bne.n	8006d28 <I2SEx_RxISR_I2SExt+0x64>
 8006d24:	4b0c      	ldr	r3, [pc, #48]	@ (8006d58 <I2SEx_RxISR_I2SExt+0x94>)
 8006d26:	e001      	b.n	8006d2c <I2SEx_RxISR_I2SExt+0x68>
 8006d28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d2c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006d30:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d106      	bne.n	8006d4a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7ff ff03 	bl	8006b50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006d4a:	bf00      	nop
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	40003800 	.word	0x40003800
 8006d58:	40003400 	.word	0x40003400

08006d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d101      	bne.n	8006d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e267      	b.n	800723e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d075      	beq.n	8006e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d7a:	4b88      	ldr	r3, [pc, #544]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f003 030c 	and.w	r3, r3, #12
 8006d82:	2b04      	cmp	r3, #4
 8006d84:	d00c      	beq.n	8006da0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d86:	4b85      	ldr	r3, [pc, #532]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d8e:	2b08      	cmp	r3, #8
 8006d90:	d112      	bne.n	8006db8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d92:	4b82      	ldr	r3, [pc, #520]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d9e:	d10b      	bne.n	8006db8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006da0:	4b7e      	ldr	r3, [pc, #504]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d05b      	beq.n	8006e64 <HAL_RCC_OscConfig+0x108>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d157      	bne.n	8006e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e242      	b.n	800723e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dc0:	d106      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x74>
 8006dc2:	4b76      	ldr	r3, [pc, #472]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a75      	ldr	r2, [pc, #468]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	e01d      	b.n	8006e0c <HAL_RCC_OscConfig+0xb0>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006dd8:	d10c      	bne.n	8006df4 <HAL_RCC_OscConfig+0x98>
 8006dda:	4b70      	ldr	r3, [pc, #448]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a6f      	ldr	r2, [pc, #444]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006de0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006de4:	6013      	str	r3, [r2, #0]
 8006de6:	4b6d      	ldr	r3, [pc, #436]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a6c      	ldr	r2, [pc, #432]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	e00b      	b.n	8006e0c <HAL_RCC_OscConfig+0xb0>
 8006df4:	4b69      	ldr	r3, [pc, #420]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a68      	ldr	r2, [pc, #416]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006dfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	4b66      	ldr	r3, [pc, #408]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a65      	ldr	r2, [pc, #404]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006e06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d013      	beq.n	8006e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e14:	f7fb fabe 	bl	8002394 <HAL_GetTick>
 8006e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e1a:	e008      	b.n	8006e2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e1c:	f7fb faba 	bl	8002394 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b64      	cmp	r3, #100	@ 0x64
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e207      	b.n	800723e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e2e:	4b5b      	ldr	r3, [pc, #364]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0f0      	beq.n	8006e1c <HAL_RCC_OscConfig+0xc0>
 8006e3a:	e014      	b.n	8006e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e3c:	f7fb faaa 	bl	8002394 <HAL_GetTick>
 8006e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e42:	e008      	b.n	8006e56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e44:	f7fb faa6 	bl	8002394 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b64      	cmp	r3, #100	@ 0x64
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e1f3      	b.n	800723e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e56:	4b51      	ldr	r3, [pc, #324]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1f0      	bne.n	8006e44 <HAL_RCC_OscConfig+0xe8>
 8006e62:	e000      	b.n	8006e66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d063      	beq.n	8006f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e72:	4b4a      	ldr	r3, [pc, #296]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f003 030c 	and.w	r3, r3, #12
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00b      	beq.n	8006e96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e7e:	4b47      	ldr	r3, [pc, #284]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e86:	2b08      	cmp	r3, #8
 8006e88:	d11c      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e8a:	4b44      	ldr	r3, [pc, #272]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d116      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e96:	4b41      	ldr	r3, [pc, #260]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d005      	beq.n	8006eae <HAL_RCC_OscConfig+0x152>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d001      	beq.n	8006eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e1c7      	b.n	800723e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eae:	4b3b      	ldr	r3, [pc, #236]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	4937      	ldr	r1, [pc, #220]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ec2:	e03a      	b.n	8006f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d020      	beq.n	8006f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ecc:	4b34      	ldr	r3, [pc, #208]	@ (8006fa0 <HAL_RCC_OscConfig+0x244>)
 8006ece:	2201      	movs	r2, #1
 8006ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed2:	f7fb fa5f 	bl	8002394 <HAL_GetTick>
 8006ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ed8:	e008      	b.n	8006eec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006eda:	f7fb fa5b 	bl	8002394 <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d901      	bls.n	8006eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e1a8      	b.n	800723e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eec:	4b2b      	ldr	r3, [pc, #172]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d0f0      	beq.n	8006eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ef8:	4b28      	ldr	r3, [pc, #160]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	00db      	lsls	r3, r3, #3
 8006f06:	4925      	ldr	r1, [pc, #148]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	600b      	str	r3, [r1, #0]
 8006f0c:	e015      	b.n	8006f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f0e:	4b24      	ldr	r3, [pc, #144]	@ (8006fa0 <HAL_RCC_OscConfig+0x244>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f14:	f7fb fa3e 	bl	8002394 <HAL_GetTick>
 8006f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f1a:	e008      	b.n	8006f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f1c:	f7fb fa3a 	bl	8002394 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e187      	b.n	800723e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1f0      	bne.n	8006f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0308 	and.w	r3, r3, #8
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d036      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d016      	beq.n	8006f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f4e:	4b15      	ldr	r3, [pc, #84]	@ (8006fa4 <HAL_RCC_OscConfig+0x248>)
 8006f50:	2201      	movs	r2, #1
 8006f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f54:	f7fb fa1e 	bl	8002394 <HAL_GetTick>
 8006f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f5a:	e008      	b.n	8006f6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f5c:	f7fb fa1a 	bl	8002394 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e167      	b.n	800723e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f9c <HAL_RCC_OscConfig+0x240>)
 8006f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0f0      	beq.n	8006f5c <HAL_RCC_OscConfig+0x200>
 8006f7a:	e01b      	b.n	8006fb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f7c:	4b09      	ldr	r3, [pc, #36]	@ (8006fa4 <HAL_RCC_OscConfig+0x248>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f82:	f7fb fa07 	bl	8002394 <HAL_GetTick>
 8006f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f88:	e00e      	b.n	8006fa8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f8a:	f7fb fa03 	bl	8002394 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d907      	bls.n	8006fa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e150      	b.n	800723e <HAL_RCC_OscConfig+0x4e2>
 8006f9c:	40023800 	.word	0x40023800
 8006fa0:	42470000 	.word	0x42470000
 8006fa4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fa8:	4b88      	ldr	r3, [pc, #544]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 8006faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fac:	f003 0302 	and.w	r3, r3, #2
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1ea      	bne.n	8006f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0304 	and.w	r3, r3, #4
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 8097 	beq.w	80070f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fc6:	4b81      	ldr	r3, [pc, #516]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 8006fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10f      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60bb      	str	r3, [r7, #8]
 8006fd6:	4b7d      	ldr	r3, [pc, #500]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fda:	4a7c      	ldr	r2, [pc, #496]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 8006fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fe0:	6413      	str	r3, [r2, #64]	@ 0x40
 8006fe2:	4b7a      	ldr	r3, [pc, #488]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fea:	60bb      	str	r3, [r7, #8]
 8006fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ff2:	4b77      	ldr	r3, [pc, #476]	@ (80071d0 <HAL_RCC_OscConfig+0x474>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d118      	bne.n	8007030 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ffe:	4b74      	ldr	r3, [pc, #464]	@ (80071d0 <HAL_RCC_OscConfig+0x474>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a73      	ldr	r2, [pc, #460]	@ (80071d0 <HAL_RCC_OscConfig+0x474>)
 8007004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800700a:	f7fb f9c3 	bl	8002394 <HAL_GetTick>
 800700e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007010:	e008      	b.n	8007024 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007012:	f7fb f9bf 	bl	8002394 <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	2b02      	cmp	r3, #2
 800701e:	d901      	bls.n	8007024 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e10c      	b.n	800723e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007024:	4b6a      	ldr	r3, [pc, #424]	@ (80071d0 <HAL_RCC_OscConfig+0x474>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0f0      	beq.n	8007012 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d106      	bne.n	8007046 <HAL_RCC_OscConfig+0x2ea>
 8007038:	4b64      	ldr	r3, [pc, #400]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 800703a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800703c:	4a63      	ldr	r2, [pc, #396]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 800703e:	f043 0301 	orr.w	r3, r3, #1
 8007042:	6713      	str	r3, [r2, #112]	@ 0x70
 8007044:	e01c      	b.n	8007080 <HAL_RCC_OscConfig+0x324>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	2b05      	cmp	r3, #5
 800704c:	d10c      	bne.n	8007068 <HAL_RCC_OscConfig+0x30c>
 800704e:	4b5f      	ldr	r3, [pc, #380]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 8007050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007052:	4a5e      	ldr	r2, [pc, #376]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 8007054:	f043 0304 	orr.w	r3, r3, #4
 8007058:	6713      	str	r3, [r2, #112]	@ 0x70
 800705a:	4b5c      	ldr	r3, [pc, #368]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 800705c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800705e:	4a5b      	ldr	r2, [pc, #364]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 8007060:	f043 0301 	orr.w	r3, r3, #1
 8007064:	6713      	str	r3, [r2, #112]	@ 0x70
 8007066:	e00b      	b.n	8007080 <HAL_RCC_OscConfig+0x324>
 8007068:	4b58      	ldr	r3, [pc, #352]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 800706a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800706c:	4a57      	ldr	r2, [pc, #348]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 800706e:	f023 0301 	bic.w	r3, r3, #1
 8007072:	6713      	str	r3, [r2, #112]	@ 0x70
 8007074:	4b55      	ldr	r3, [pc, #340]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 8007076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007078:	4a54      	ldr	r2, [pc, #336]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 800707a:	f023 0304 	bic.w	r3, r3, #4
 800707e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d015      	beq.n	80070b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007088:	f7fb f984 	bl	8002394 <HAL_GetTick>
 800708c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800708e:	e00a      	b.n	80070a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007090:	f7fb f980 	bl	8002394 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800709e:	4293      	cmp	r3, r2
 80070a0:	d901      	bls.n	80070a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e0cb      	b.n	800723e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070a6:	4b49      	ldr	r3, [pc, #292]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 80070a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d0ee      	beq.n	8007090 <HAL_RCC_OscConfig+0x334>
 80070b2:	e014      	b.n	80070de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070b4:	f7fb f96e 	bl	8002394 <HAL_GetTick>
 80070b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070ba:	e00a      	b.n	80070d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070bc:	f7fb f96a 	bl	8002394 <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e0b5      	b.n	800723e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070d2:	4b3e      	ldr	r3, [pc, #248]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 80070d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1ee      	bne.n	80070bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070de:	7dfb      	ldrb	r3, [r7, #23]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d105      	bne.n	80070f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070e4:	4b39      	ldr	r3, [pc, #228]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 80070e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e8:	4a38      	ldr	r2, [pc, #224]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 80070ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 80a1 	beq.w	800723c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070fa:	4b34      	ldr	r3, [pc, #208]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f003 030c 	and.w	r3, r3, #12
 8007102:	2b08      	cmp	r3, #8
 8007104:	d05c      	beq.n	80071c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	2b02      	cmp	r3, #2
 800710c:	d141      	bne.n	8007192 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800710e:	4b31      	ldr	r3, [pc, #196]	@ (80071d4 <HAL_RCC_OscConfig+0x478>)
 8007110:	2200      	movs	r2, #0
 8007112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007114:	f7fb f93e 	bl	8002394 <HAL_GetTick>
 8007118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800711a:	e008      	b.n	800712e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800711c:	f7fb f93a 	bl	8002394 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	2b02      	cmp	r3, #2
 8007128:	d901      	bls.n	800712e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e087      	b.n	800723e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800712e:	4b27      	ldr	r3, [pc, #156]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1f0      	bne.n	800711c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	69da      	ldr	r2, [r3, #28]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	431a      	orrs	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007148:	019b      	lsls	r3, r3, #6
 800714a:	431a      	orrs	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007150:	085b      	lsrs	r3, r3, #1
 8007152:	3b01      	subs	r3, #1
 8007154:	041b      	lsls	r3, r3, #16
 8007156:	431a      	orrs	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800715c:	061b      	lsls	r3, r3, #24
 800715e:	491b      	ldr	r1, [pc, #108]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 8007160:	4313      	orrs	r3, r2
 8007162:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007164:	4b1b      	ldr	r3, [pc, #108]	@ (80071d4 <HAL_RCC_OscConfig+0x478>)
 8007166:	2201      	movs	r2, #1
 8007168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800716a:	f7fb f913 	bl	8002394 <HAL_GetTick>
 800716e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007170:	e008      	b.n	8007184 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007172:	f7fb f90f 	bl	8002394 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e05c      	b.n	800723e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007184:	4b11      	ldr	r3, [pc, #68]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0f0      	beq.n	8007172 <HAL_RCC_OscConfig+0x416>
 8007190:	e054      	b.n	800723c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007192:	4b10      	ldr	r3, [pc, #64]	@ (80071d4 <HAL_RCC_OscConfig+0x478>)
 8007194:	2200      	movs	r2, #0
 8007196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007198:	f7fb f8fc 	bl	8002394 <HAL_GetTick>
 800719c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800719e:	e008      	b.n	80071b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071a0:	f7fb f8f8 	bl	8002394 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d901      	bls.n	80071b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e045      	b.n	800723e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071b2:	4b06      	ldr	r3, [pc, #24]	@ (80071cc <HAL_RCC_OscConfig+0x470>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1f0      	bne.n	80071a0 <HAL_RCC_OscConfig+0x444>
 80071be:	e03d      	b.n	800723c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d107      	bne.n	80071d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e038      	b.n	800723e <HAL_RCC_OscConfig+0x4e2>
 80071cc:	40023800 	.word	0x40023800
 80071d0:	40007000 	.word	0x40007000
 80071d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071d8:	4b1b      	ldr	r3, [pc, #108]	@ (8007248 <HAL_RCC_OscConfig+0x4ec>)
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d028      	beq.n	8007238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d121      	bne.n	8007238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071fe:	429a      	cmp	r2, r3
 8007200:	d11a      	bne.n	8007238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007208:	4013      	ands	r3, r2
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800720e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007210:	4293      	cmp	r3, r2
 8007212:	d111      	bne.n	8007238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800721e:	085b      	lsrs	r3, r3, #1
 8007220:	3b01      	subs	r3, #1
 8007222:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007224:	429a      	cmp	r2, r3
 8007226:	d107      	bne.n	8007238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007232:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007234:	429a      	cmp	r2, r3
 8007236:	d001      	beq.n	800723c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e000      	b.n	800723e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	40023800 	.word	0x40023800

0800724c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e0cc      	b.n	80073fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007260:	4b68      	ldr	r3, [pc, #416]	@ (8007404 <HAL_RCC_ClockConfig+0x1b8>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0307 	and.w	r3, r3, #7
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	429a      	cmp	r2, r3
 800726c:	d90c      	bls.n	8007288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800726e:	4b65      	ldr	r3, [pc, #404]	@ (8007404 <HAL_RCC_ClockConfig+0x1b8>)
 8007270:	683a      	ldr	r2, [r7, #0]
 8007272:	b2d2      	uxtb	r2, r2
 8007274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007276:	4b63      	ldr	r3, [pc, #396]	@ (8007404 <HAL_RCC_ClockConfig+0x1b8>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0307 	and.w	r3, r3, #7
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	429a      	cmp	r2, r3
 8007282:	d001      	beq.n	8007288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e0b8      	b.n	80073fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b00      	cmp	r3, #0
 8007292:	d020      	beq.n	80072d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0304 	and.w	r3, r3, #4
 800729c:	2b00      	cmp	r3, #0
 800729e:	d005      	beq.n	80072ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072a0:	4b59      	ldr	r3, [pc, #356]	@ (8007408 <HAL_RCC_ClockConfig+0x1bc>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	4a58      	ldr	r2, [pc, #352]	@ (8007408 <HAL_RCC_ClockConfig+0x1bc>)
 80072a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80072aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0308 	and.w	r3, r3, #8
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d005      	beq.n	80072c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072b8:	4b53      	ldr	r3, [pc, #332]	@ (8007408 <HAL_RCC_ClockConfig+0x1bc>)
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	4a52      	ldr	r2, [pc, #328]	@ (8007408 <HAL_RCC_ClockConfig+0x1bc>)
 80072be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80072c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072c4:	4b50      	ldr	r3, [pc, #320]	@ (8007408 <HAL_RCC_ClockConfig+0x1bc>)
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	494d      	ldr	r1, [pc, #308]	@ (8007408 <HAL_RCC_ClockConfig+0x1bc>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d044      	beq.n	800736c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d107      	bne.n	80072fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072ea:	4b47      	ldr	r3, [pc, #284]	@ (8007408 <HAL_RCC_ClockConfig+0x1bc>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d119      	bne.n	800732a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e07f      	b.n	80073fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d003      	beq.n	800730a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007306:	2b03      	cmp	r3, #3
 8007308:	d107      	bne.n	800731a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800730a:	4b3f      	ldr	r3, [pc, #252]	@ (8007408 <HAL_RCC_ClockConfig+0x1bc>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d109      	bne.n	800732a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e06f      	b.n	80073fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800731a:	4b3b      	ldr	r3, [pc, #236]	@ (8007408 <HAL_RCC_ClockConfig+0x1bc>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 0302 	and.w	r3, r3, #2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e067      	b.n	80073fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800732a:	4b37      	ldr	r3, [pc, #220]	@ (8007408 <HAL_RCC_ClockConfig+0x1bc>)
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f023 0203 	bic.w	r2, r3, #3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	4934      	ldr	r1, [pc, #208]	@ (8007408 <HAL_RCC_ClockConfig+0x1bc>)
 8007338:	4313      	orrs	r3, r2
 800733a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800733c:	f7fb f82a 	bl	8002394 <HAL_GetTick>
 8007340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007342:	e00a      	b.n	800735a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007344:	f7fb f826 	bl	8002394 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007352:	4293      	cmp	r3, r2
 8007354:	d901      	bls.n	800735a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e04f      	b.n	80073fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800735a:	4b2b      	ldr	r3, [pc, #172]	@ (8007408 <HAL_RCC_ClockConfig+0x1bc>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f003 020c 	and.w	r2, r3, #12
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	429a      	cmp	r2, r3
 800736a:	d1eb      	bne.n	8007344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800736c:	4b25      	ldr	r3, [pc, #148]	@ (8007404 <HAL_RCC_ClockConfig+0x1b8>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	683a      	ldr	r2, [r7, #0]
 8007376:	429a      	cmp	r2, r3
 8007378:	d20c      	bcs.n	8007394 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800737a:	4b22      	ldr	r3, [pc, #136]	@ (8007404 <HAL_RCC_ClockConfig+0x1b8>)
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	b2d2      	uxtb	r2, r2
 8007380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007382:	4b20      	ldr	r3, [pc, #128]	@ (8007404 <HAL_RCC_ClockConfig+0x1b8>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	429a      	cmp	r2, r3
 800738e:	d001      	beq.n	8007394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e032      	b.n	80073fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0304 	and.w	r3, r3, #4
 800739c:	2b00      	cmp	r3, #0
 800739e:	d008      	beq.n	80073b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073a0:	4b19      	ldr	r3, [pc, #100]	@ (8007408 <HAL_RCC_ClockConfig+0x1bc>)
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	4916      	ldr	r1, [pc, #88]	@ (8007408 <HAL_RCC_ClockConfig+0x1bc>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0308 	and.w	r3, r3, #8
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d009      	beq.n	80073d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073be:	4b12      	ldr	r3, [pc, #72]	@ (8007408 <HAL_RCC_ClockConfig+0x1bc>)
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	490e      	ldr	r1, [pc, #56]	@ (8007408 <HAL_RCC_ClockConfig+0x1bc>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073d2:	f000 f821 	bl	8007418 <HAL_RCC_GetSysClockFreq>
 80073d6:	4602      	mov	r2, r0
 80073d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007408 <HAL_RCC_ClockConfig+0x1bc>)
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	091b      	lsrs	r3, r3, #4
 80073de:	f003 030f 	and.w	r3, r3, #15
 80073e2:	490a      	ldr	r1, [pc, #40]	@ (800740c <HAL_RCC_ClockConfig+0x1c0>)
 80073e4:	5ccb      	ldrb	r3, [r1, r3]
 80073e6:	fa22 f303 	lsr.w	r3, r2, r3
 80073ea:	4a09      	ldr	r2, [pc, #36]	@ (8007410 <HAL_RCC_ClockConfig+0x1c4>)
 80073ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80073ee:	4b09      	ldr	r3, [pc, #36]	@ (8007414 <HAL_RCC_ClockConfig+0x1c8>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fa ff8a 	bl	800230c <HAL_InitTick>

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	40023c00 	.word	0x40023c00
 8007408:	40023800 	.word	0x40023800
 800740c:	080104fc 	.word	0x080104fc
 8007410:	20000068 	.word	0x20000068
 8007414:	20000070 	.word	0x20000070

08007418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800741c:	b094      	sub	sp, #80	@ 0x50
 800741e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007420:	2300      	movs	r3, #0
 8007422:	647b      	str	r3, [r7, #68]	@ 0x44
 8007424:	2300      	movs	r3, #0
 8007426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007428:	2300      	movs	r3, #0
 800742a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007430:	4b79      	ldr	r3, [pc, #484]	@ (8007618 <HAL_RCC_GetSysClockFreq+0x200>)
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f003 030c 	and.w	r3, r3, #12
 8007438:	2b08      	cmp	r3, #8
 800743a:	d00d      	beq.n	8007458 <HAL_RCC_GetSysClockFreq+0x40>
 800743c:	2b08      	cmp	r3, #8
 800743e:	f200 80e1 	bhi.w	8007604 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007442:	2b00      	cmp	r3, #0
 8007444:	d002      	beq.n	800744c <HAL_RCC_GetSysClockFreq+0x34>
 8007446:	2b04      	cmp	r3, #4
 8007448:	d003      	beq.n	8007452 <HAL_RCC_GetSysClockFreq+0x3a>
 800744a:	e0db      	b.n	8007604 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800744c:	4b73      	ldr	r3, [pc, #460]	@ (800761c <HAL_RCC_GetSysClockFreq+0x204>)
 800744e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007450:	e0db      	b.n	800760a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007452:	4b73      	ldr	r3, [pc, #460]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x208>)
 8007454:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007456:	e0d8      	b.n	800760a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007458:	4b6f      	ldr	r3, [pc, #444]	@ (8007618 <HAL_RCC_GetSysClockFreq+0x200>)
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007460:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007462:	4b6d      	ldr	r3, [pc, #436]	@ (8007618 <HAL_RCC_GetSysClockFreq+0x200>)
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d063      	beq.n	8007536 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800746e:	4b6a      	ldr	r3, [pc, #424]	@ (8007618 <HAL_RCC_GetSysClockFreq+0x200>)
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	099b      	lsrs	r3, r3, #6
 8007474:	2200      	movs	r2, #0
 8007476:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007478:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800747a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007480:	633b      	str	r3, [r7, #48]	@ 0x30
 8007482:	2300      	movs	r3, #0
 8007484:	637b      	str	r3, [r7, #52]	@ 0x34
 8007486:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800748a:	4622      	mov	r2, r4
 800748c:	462b      	mov	r3, r5
 800748e:	f04f 0000 	mov.w	r0, #0
 8007492:	f04f 0100 	mov.w	r1, #0
 8007496:	0159      	lsls	r1, r3, #5
 8007498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800749c:	0150      	lsls	r0, r2, #5
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4621      	mov	r1, r4
 80074a4:	1a51      	subs	r1, r2, r1
 80074a6:	6139      	str	r1, [r7, #16]
 80074a8:	4629      	mov	r1, r5
 80074aa:	eb63 0301 	sbc.w	r3, r3, r1
 80074ae:	617b      	str	r3, [r7, #20]
 80074b0:	f04f 0200 	mov.w	r2, #0
 80074b4:	f04f 0300 	mov.w	r3, #0
 80074b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074bc:	4659      	mov	r1, fp
 80074be:	018b      	lsls	r3, r1, #6
 80074c0:	4651      	mov	r1, sl
 80074c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80074c6:	4651      	mov	r1, sl
 80074c8:	018a      	lsls	r2, r1, #6
 80074ca:	4651      	mov	r1, sl
 80074cc:	ebb2 0801 	subs.w	r8, r2, r1
 80074d0:	4659      	mov	r1, fp
 80074d2:	eb63 0901 	sbc.w	r9, r3, r1
 80074d6:	f04f 0200 	mov.w	r2, #0
 80074da:	f04f 0300 	mov.w	r3, #0
 80074de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074ea:	4690      	mov	r8, r2
 80074ec:	4699      	mov	r9, r3
 80074ee:	4623      	mov	r3, r4
 80074f0:	eb18 0303 	adds.w	r3, r8, r3
 80074f4:	60bb      	str	r3, [r7, #8]
 80074f6:	462b      	mov	r3, r5
 80074f8:	eb49 0303 	adc.w	r3, r9, r3
 80074fc:	60fb      	str	r3, [r7, #12]
 80074fe:	f04f 0200 	mov.w	r2, #0
 8007502:	f04f 0300 	mov.w	r3, #0
 8007506:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800750a:	4629      	mov	r1, r5
 800750c:	024b      	lsls	r3, r1, #9
 800750e:	4621      	mov	r1, r4
 8007510:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007514:	4621      	mov	r1, r4
 8007516:	024a      	lsls	r2, r1, #9
 8007518:	4610      	mov	r0, r2
 800751a:	4619      	mov	r1, r3
 800751c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800751e:	2200      	movs	r2, #0
 8007520:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007522:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007524:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007528:	f7f8 fe56 	bl	80001d8 <__aeabi_uldivmod>
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	4613      	mov	r3, r2
 8007532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007534:	e058      	b.n	80075e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007536:	4b38      	ldr	r3, [pc, #224]	@ (8007618 <HAL_RCC_GetSysClockFreq+0x200>)
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	099b      	lsrs	r3, r3, #6
 800753c:	2200      	movs	r2, #0
 800753e:	4618      	mov	r0, r3
 8007540:	4611      	mov	r1, r2
 8007542:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007546:	623b      	str	r3, [r7, #32]
 8007548:	2300      	movs	r3, #0
 800754a:	627b      	str	r3, [r7, #36]	@ 0x24
 800754c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007550:	4642      	mov	r2, r8
 8007552:	464b      	mov	r3, r9
 8007554:	f04f 0000 	mov.w	r0, #0
 8007558:	f04f 0100 	mov.w	r1, #0
 800755c:	0159      	lsls	r1, r3, #5
 800755e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007562:	0150      	lsls	r0, r2, #5
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4641      	mov	r1, r8
 800756a:	ebb2 0a01 	subs.w	sl, r2, r1
 800756e:	4649      	mov	r1, r9
 8007570:	eb63 0b01 	sbc.w	fp, r3, r1
 8007574:	f04f 0200 	mov.w	r2, #0
 8007578:	f04f 0300 	mov.w	r3, #0
 800757c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007580:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007584:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007588:	ebb2 040a 	subs.w	r4, r2, sl
 800758c:	eb63 050b 	sbc.w	r5, r3, fp
 8007590:	f04f 0200 	mov.w	r2, #0
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	00eb      	lsls	r3, r5, #3
 800759a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800759e:	00e2      	lsls	r2, r4, #3
 80075a0:	4614      	mov	r4, r2
 80075a2:	461d      	mov	r5, r3
 80075a4:	4643      	mov	r3, r8
 80075a6:	18e3      	adds	r3, r4, r3
 80075a8:	603b      	str	r3, [r7, #0]
 80075aa:	464b      	mov	r3, r9
 80075ac:	eb45 0303 	adc.w	r3, r5, r3
 80075b0:	607b      	str	r3, [r7, #4]
 80075b2:	f04f 0200 	mov.w	r2, #0
 80075b6:	f04f 0300 	mov.w	r3, #0
 80075ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80075be:	4629      	mov	r1, r5
 80075c0:	028b      	lsls	r3, r1, #10
 80075c2:	4621      	mov	r1, r4
 80075c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075c8:	4621      	mov	r1, r4
 80075ca:	028a      	lsls	r2, r1, #10
 80075cc:	4610      	mov	r0, r2
 80075ce:	4619      	mov	r1, r3
 80075d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075d2:	2200      	movs	r2, #0
 80075d4:	61bb      	str	r3, [r7, #24]
 80075d6:	61fa      	str	r2, [r7, #28]
 80075d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075dc:	f7f8 fdfc 	bl	80001d8 <__aeabi_uldivmod>
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	4613      	mov	r3, r2
 80075e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80075e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007618 <HAL_RCC_GetSysClockFreq+0x200>)
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	0c1b      	lsrs	r3, r3, #16
 80075ee:	f003 0303 	and.w	r3, r3, #3
 80075f2:	3301      	adds	r3, #1
 80075f4:	005b      	lsls	r3, r3, #1
 80075f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80075f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80075fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007600:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007602:	e002      	b.n	800760a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007604:	4b05      	ldr	r3, [pc, #20]	@ (800761c <HAL_RCC_GetSysClockFreq+0x204>)
 8007606:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800760a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800760c:	4618      	mov	r0, r3
 800760e:	3750      	adds	r7, #80	@ 0x50
 8007610:	46bd      	mov	sp, r7
 8007612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007616:	bf00      	nop
 8007618:	40023800 	.word	0x40023800
 800761c:	00f42400 	.word	0x00f42400
 8007620:	007a1200 	.word	0x007a1200

08007624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007624:	b480      	push	{r7}
 8007626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007628:	4b03      	ldr	r3, [pc, #12]	@ (8007638 <HAL_RCC_GetHCLKFreq+0x14>)
 800762a:	681b      	ldr	r3, [r3, #0]
}
 800762c:	4618      	mov	r0, r3
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	20000068 	.word	0x20000068

0800763c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007640:	f7ff fff0 	bl	8007624 <HAL_RCC_GetHCLKFreq>
 8007644:	4602      	mov	r2, r0
 8007646:	4b05      	ldr	r3, [pc, #20]	@ (800765c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	0a9b      	lsrs	r3, r3, #10
 800764c:	f003 0307 	and.w	r3, r3, #7
 8007650:	4903      	ldr	r1, [pc, #12]	@ (8007660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007652:	5ccb      	ldrb	r3, [r1, r3]
 8007654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007658:	4618      	mov	r0, r3
 800765a:	bd80      	pop	{r7, pc}
 800765c:	40023800 	.word	0x40023800
 8007660:	0801050c 	.word	0x0801050c

08007664 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800766c:	2300      	movs	r3, #0
 800766e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	d105      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007688:	2b00      	cmp	r3, #0
 800768a:	d038      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800768c:	4b68      	ldr	r3, [pc, #416]	@ (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800768e:	2200      	movs	r2, #0
 8007690:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007692:	f7fa fe7f 	bl	8002394 <HAL_GetTick>
 8007696:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007698:	e008      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800769a:	f7fa fe7b 	bl	8002394 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d901      	bls.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e0bd      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076ac:	4b61      	ldr	r3, [pc, #388]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1f0      	bne.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	019b      	lsls	r3, r3, #6
 80076c2:	431a      	orrs	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	071b      	lsls	r3, r3, #28
 80076ca:	495a      	ldr	r1, [pc, #360]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80076d2:	4b57      	ldr	r3, [pc, #348]	@ (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80076d4:	2201      	movs	r2, #1
 80076d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80076d8:	f7fa fe5c 	bl	8002394 <HAL_GetTick>
 80076dc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80076de:	e008      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80076e0:	f7fa fe58 	bl	8002394 <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d901      	bls.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e09a      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80076f2:	4b50      	ldr	r3, [pc, #320]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d0f0      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 8083 	beq.w	8007812 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800770c:	2300      	movs	r3, #0
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	4b48      	ldr	r3, [pc, #288]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007714:	4a47      	ldr	r2, [pc, #284]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800771a:	6413      	str	r3, [r2, #64]	@ 0x40
 800771c:	4b45      	ldr	r3, [pc, #276]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800771e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007724:	60fb      	str	r3, [r7, #12]
 8007726:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007728:	4b43      	ldr	r3, [pc, #268]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a42      	ldr	r2, [pc, #264]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800772e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007732:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007734:	f7fa fe2e 	bl	8002394 <HAL_GetTick>
 8007738:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800773a:	e008      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800773c:	f7fa fe2a 	bl	8002394 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b02      	cmp	r3, #2
 8007748:	d901      	bls.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e06c      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800774e:	4b3a      	ldr	r3, [pc, #232]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0f0      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800775a:	4b36      	ldr	r3, [pc, #216]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800775c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800775e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007762:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d02f      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x166>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	429a      	cmp	r2, r3
 8007776:	d028      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007778:	4b2e      	ldr	r3, [pc, #184]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800777a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800777c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007780:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007782:	4b2e      	ldr	r3, [pc, #184]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007784:	2201      	movs	r2, #1
 8007786:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007788:	4b2c      	ldr	r3, [pc, #176]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800778a:	2200      	movs	r2, #0
 800778c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800778e:	4a29      	ldr	r2, [pc, #164]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007794:	4b27      	ldr	r3, [pc, #156]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	2b01      	cmp	r3, #1
 800779e:	d114      	bne.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80077a0:	f7fa fdf8 	bl	8002394 <HAL_GetTick>
 80077a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077a6:	e00a      	b.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077a8:	f7fa fdf4 	bl	8002394 <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d901      	bls.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e034      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077be:	4b1d      	ldr	r3, [pc, #116]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0ee      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077d6:	d10d      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80077d8:	4b16      	ldr	r3, [pc, #88]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80077e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077ec:	4911      	ldr	r1, [pc, #68]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	608b      	str	r3, [r1, #8]
 80077f2:	e005      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80077f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	4a0e      	ldr	r2, [pc, #56]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077fa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80077fe:	6093      	str	r3, [r2, #8]
 8007800:	4b0c      	ldr	r3, [pc, #48]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007802:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800780c:	4909      	ldr	r1, [pc, #36]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800780e:	4313      	orrs	r3, r2
 8007810:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 0308 	and.w	r3, r3, #8
 800781a:	2b00      	cmp	r3, #0
 800781c:	d003      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	7d1a      	ldrb	r2, [r3, #20]
 8007822:	4b07      	ldr	r3, [pc, #28]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007824:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	42470068 	.word	0x42470068
 8007834:	40023800 	.word	0x40023800
 8007838:	40007000 	.word	0x40007000
 800783c:	42470e40 	.word	0x42470e40
 8007840:	424711e0 	.word	0x424711e0

08007844 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2203      	movs	r2, #3
 8007850:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007852:	4b1c      	ldr	r3, [pc, #112]	@ (80078c4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007854:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007858:	099b      	lsrs	r3, r3, #6
 800785a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007862:	4b18      	ldr	r3, [pc, #96]	@ (80078c4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007864:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007868:	0f1b      	lsrs	r3, r3, #28
 800786a:	f003 0207 	and.w	r2, r3, #7
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 8007872:	4b14      	ldr	r3, [pc, #80]	@ (80078c4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007874:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007878:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007880:	4b10      	ldr	r3, [pc, #64]	@ (80078c4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007888:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800788a:	4b0e      	ldr	r3, [pc, #56]	@ (80078c4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800788c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800788e:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	431a      	orrs	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 800789a:	4b0a      	ldr	r3, [pc, #40]	@ (80078c4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800789c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d103      	bne.n	80078b0 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80078ae:	e002      	b.n	80078b6 <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	751a      	strb	r2, [r3, #20]
}
 80078b6:	bf00      	nop
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	40023800 	.word	0x40023800

080078c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80078dc:	2300      	movs	r3, #0
 80078de:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d140      	bne.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80078e6:	4b24      	ldr	r3, [pc, #144]	@ (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078ee:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d005      	beq.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d131      	bne.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80078fc:	4b1f      	ldr	r3, [pc, #124]	@ (800797c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80078fe:	617b      	str	r3, [r7, #20]
          break;
 8007900:	e031      	b.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007902:	4b1d      	ldr	r3, [pc, #116]	@ (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800790a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800790e:	d109      	bne.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007910:	4b19      	ldr	r3, [pc, #100]	@ (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007912:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007916:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800791a:	4a19      	ldr	r2, [pc, #100]	@ (8007980 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800791c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007920:	613b      	str	r3, [r7, #16]
 8007922:	e008      	b.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007924:	4b14      	ldr	r3, [pc, #80]	@ (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007926:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800792a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800792e:	4a15      	ldr	r2, [pc, #84]	@ (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007930:	fbb2 f3f3 	udiv	r3, r2, r3
 8007934:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007936:	4b10      	ldr	r3, [pc, #64]	@ (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007938:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800793c:	099b      	lsrs	r3, r3, #6
 800793e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	fb02 f303 	mul.w	r3, r2, r3
 8007948:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800794a:	4b0b      	ldr	r3, [pc, #44]	@ (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800794c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007950:	0f1b      	lsrs	r3, r3, #28
 8007952:	f003 0307 	and.w	r3, r3, #7
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	fbb2 f3f3 	udiv	r3, r2, r3
 800795c:	617b      	str	r3, [r7, #20]
          break;
 800795e:	e002      	b.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	617b      	str	r3, [r7, #20]
          break;
 8007964:	bf00      	nop
        }
      }
      break;
 8007966:	bf00      	nop
    }
  }
  return frequency;
 8007968:	697b      	ldr	r3, [r7, #20]
}
 800796a:	4618      	mov	r0, r3
 800796c:	371c      	adds	r7, #28
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	40023800 	.word	0x40023800
 800797c:	00bb8000 	.word	0x00bb8000
 8007980:	007a1200 	.word	0x007a1200
 8007984:	00f42400 	.word	0x00f42400

08007988 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	4613      	mov	r3, r2
 8007994:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b20      	cmp	r3, #32
 80079a0:	d11d      	bne.n	80079de <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <HAL_UART_Receive_IT+0x26>
 80079a8:	88fb      	ldrh	r3, [r7, #6]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e016      	b.n	80079e0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d101      	bne.n	80079c0 <HAL_UART_Receive_IT+0x38>
 80079bc:	2302      	movs	r3, #2
 80079be:	e00f      	b.n	80079e0 <HAL_UART_Receive_IT+0x58>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80079ce:	88fb      	ldrh	r3, [r7, #6]
 80079d0:	461a      	mov	r2, r3
 80079d2:	68b9      	ldr	r1, [r7, #8]
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 fab5 	bl	8007f44 <UART_Start_Receive_IT>
 80079da:	4603      	mov	r3, r0
 80079dc:	e000      	b.n	80079e0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80079de:	2302      	movs	r3, #2
  }
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b0ba      	sub	sp, #232	@ 0xe8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007a14:	2300      	movs	r3, #0
 8007a16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a1e:	f003 030f 	and.w	r3, r3, #15
 8007a22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007a26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10f      	bne.n	8007a4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a32:	f003 0320 	and.w	r3, r3, #32
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d009      	beq.n	8007a4e <HAL_UART_IRQHandler+0x66>
 8007a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a3e:	f003 0320 	and.w	r3, r3, #32
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d003      	beq.n	8007a4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fb99 	bl	800817e <UART_Receive_IT>
      return;
 8007a4c:	e256      	b.n	8007efc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 80de 	beq.w	8007c14 <HAL_UART_IRQHandler+0x22c>
 8007a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d106      	bne.n	8007a72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 80d1 	beq.w	8007c14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00b      	beq.n	8007a96 <HAL_UART_IRQHandler+0xae>
 8007a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d005      	beq.n	8007a96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a8e:	f043 0201 	orr.w	r2, r3, #1
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a9a:	f003 0304 	and.w	r3, r3, #4
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00b      	beq.n	8007aba <HAL_UART_IRQHandler+0xd2>
 8007aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d005      	beq.n	8007aba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab2:	f043 0202 	orr.w	r2, r3, #2
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007abe:	f003 0302 	and.w	r3, r3, #2
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00b      	beq.n	8007ade <HAL_UART_IRQHandler+0xf6>
 8007ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007aca:	f003 0301 	and.w	r3, r3, #1
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d005      	beq.n	8007ade <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad6:	f043 0204 	orr.w	r2, r3, #4
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ae2:	f003 0308 	and.w	r3, r3, #8
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d011      	beq.n	8007b0e <HAL_UART_IRQHandler+0x126>
 8007aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aee:	f003 0320 	and.w	r3, r3, #32
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d105      	bne.n	8007b02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d005      	beq.n	8007b0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b06:	f043 0208 	orr.w	r2, r3, #8
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 81ed 	beq.w	8007ef2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b1c:	f003 0320 	and.w	r3, r3, #32
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d008      	beq.n	8007b36 <HAL_UART_IRQHandler+0x14e>
 8007b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b28:	f003 0320 	and.w	r3, r3, #32
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d002      	beq.n	8007b36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fb24 	bl	800817e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b40:	2b40      	cmp	r3, #64	@ 0x40
 8007b42:	bf0c      	ite	eq
 8007b44:	2301      	moveq	r3, #1
 8007b46:	2300      	movne	r3, #0
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b52:	f003 0308 	and.w	r3, r3, #8
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d103      	bne.n	8007b62 <HAL_UART_IRQHandler+0x17a>
 8007b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d04f      	beq.n	8007c02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fa2c 	bl	8007fc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b72:	2b40      	cmp	r3, #64	@ 0x40
 8007b74:	d141      	bne.n	8007bfa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3314      	adds	r3, #20
 8007b7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3314      	adds	r3, #20
 8007b9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007ba2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007baa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007bae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007bb2:	e841 2300 	strex	r3, r2, [r1]
 8007bb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007bba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1d9      	bne.n	8007b76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d013      	beq.n	8007bf2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bce:	4a7d      	ldr	r2, [pc, #500]	@ (8007dc4 <HAL_UART_IRQHandler+0x3dc>)
 8007bd0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fa fef2 	bl	80029c0 <HAL_DMA_Abort_IT>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d016      	beq.n	8007c10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007bec:	4610      	mov	r0, r2
 8007bee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf0:	e00e      	b.n	8007c10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f990 	bl	8007f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf8:	e00a      	b.n	8007c10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f98c 	bl	8007f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c00:	e006      	b.n	8007c10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f988 	bl	8007f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8007c0e:	e170      	b.n	8007ef2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c10:	bf00      	nop
    return;
 8007c12:	e16e      	b.n	8007ef2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	f040 814a 	bne.w	8007eb2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c22:	f003 0310 	and.w	r3, r3, #16
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f000 8143 	beq.w	8007eb2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c30:	f003 0310 	and.w	r3, r3, #16
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 813c 	beq.w	8007eb2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60bb      	str	r3, [r7, #8]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	60bb      	str	r3, [r7, #8]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	60bb      	str	r3, [r7, #8]
 8007c4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c5a:	2b40      	cmp	r3, #64	@ 0x40
 8007c5c:	f040 80b4 	bne.w	8007dc8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 8140 	beq.w	8007ef6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	f080 8139 	bcs.w	8007ef6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c96:	f000 8088 	beq.w	8007daa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	330c      	adds	r3, #12
 8007ca0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ca8:	e853 3f00 	ldrex	r3, [r3]
 8007cac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007cb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	330c      	adds	r3, #12
 8007cc2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007cc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007cca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007cd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007cd6:	e841 2300 	strex	r3, r2, [r1]
 8007cda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1d9      	bne.n	8007c9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3314      	adds	r3, #20
 8007cec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007cf0:	e853 3f00 	ldrex	r3, [r3]
 8007cf4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007cf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007cf8:	f023 0301 	bic.w	r3, r3, #1
 8007cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3314      	adds	r3, #20
 8007d06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007d0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007d0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007d12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007d16:	e841 2300 	strex	r3, r2, [r1]
 8007d1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007d1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1e1      	bne.n	8007ce6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	3314      	adds	r3, #20
 8007d28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007d32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3314      	adds	r3, #20
 8007d42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007d46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007d48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007d4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007d4e:	e841 2300 	strex	r3, r2, [r1]
 8007d52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007d54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1e3      	bne.n	8007d22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	330c      	adds	r3, #12
 8007d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d72:	e853 3f00 	ldrex	r3, [r3]
 8007d76:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d7a:	f023 0310 	bic.w	r3, r3, #16
 8007d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	330c      	adds	r3, #12
 8007d88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007d8c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007d8e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d94:	e841 2300 	strex	r3, r2, [r1]
 8007d98:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1e3      	bne.n	8007d68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7fa fd9b 	bl	80028e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f8b6 	bl	8007f2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007dc0:	e099      	b.n	8007ef6 <HAL_UART_IRQHandler+0x50e>
 8007dc2:	bf00      	nop
 8007dc4:	08008087 	.word	0x08008087
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f000 808b 	beq.w	8007efa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007de4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f000 8086 	beq.w	8007efa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	330c      	adds	r3, #12
 8007df4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	330c      	adds	r3, #12
 8007e0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007e12:	647a      	str	r2, [r7, #68]	@ 0x44
 8007e14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e1a:	e841 2300 	strex	r3, r2, [r1]
 8007e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1e3      	bne.n	8007dee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	3314      	adds	r3, #20
 8007e2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e30:	e853 3f00 	ldrex	r3, [r3]
 8007e34:	623b      	str	r3, [r7, #32]
   return(result);
 8007e36:	6a3b      	ldr	r3, [r7, #32]
 8007e38:	f023 0301 	bic.w	r3, r3, #1
 8007e3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	3314      	adds	r3, #20
 8007e46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007e4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e52:	e841 2300 	strex	r3, r2, [r1]
 8007e56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1e3      	bne.n	8007e26 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2220      	movs	r2, #32
 8007e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	330c      	adds	r3, #12
 8007e72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	e853 3f00 	ldrex	r3, [r3]
 8007e7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 0310 	bic.w	r3, r3, #16
 8007e82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	330c      	adds	r3, #12
 8007e8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007e90:	61fa      	str	r2, [r7, #28]
 8007e92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e94:	69b9      	ldr	r1, [r7, #24]
 8007e96:	69fa      	ldr	r2, [r7, #28]
 8007e98:	e841 2300 	strex	r3, r2, [r1]
 8007e9c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1e3      	bne.n	8007e6c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ea4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f83e 	bl	8007f2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007eb0:	e023      	b.n	8007efa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d009      	beq.n	8007ed2 <HAL_UART_IRQHandler+0x4ea>
 8007ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d003      	beq.n	8007ed2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f8ef 	bl	80080ae <UART_Transmit_IT>
    return;
 8007ed0:	e014      	b.n	8007efc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00e      	beq.n	8007efc <HAL_UART_IRQHandler+0x514>
 8007ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d008      	beq.n	8007efc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f92f 	bl	800814e <UART_EndTransmit_IT>
    return;
 8007ef0:	e004      	b.n	8007efc <HAL_UART_IRQHandler+0x514>
    return;
 8007ef2:	bf00      	nop
 8007ef4:	e002      	b.n	8007efc <HAL_UART_IRQHandler+0x514>
      return;
 8007ef6:	bf00      	nop
 8007ef8:	e000      	b.n	8007efc <HAL_UART_IRQHandler+0x514>
      return;
 8007efa:	bf00      	nop
  }
}
 8007efc:	37e8      	adds	r7, #232	@ 0xe8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop

08007f04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	88fa      	ldrh	r2, [r7, #6]
 8007f5c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	88fa      	ldrh	r2, [r7, #6]
 8007f62:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2222      	movs	r2, #34	@ 0x22
 8007f6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d007      	beq.n	8007f92 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68da      	ldr	r2, [r3, #12]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f90:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	695a      	ldr	r2, [r3, #20]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f042 0201 	orr.w	r2, r2, #1
 8007fa0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68da      	ldr	r2, [r3, #12]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f042 0220 	orr.w	r2, r2, #32
 8007fb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b095      	sub	sp, #84	@ 0x54
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	330c      	adds	r3, #12
 8007fce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd2:	e853 3f00 	ldrex	r3, [r3]
 8007fd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	330c      	adds	r3, #12
 8007fe6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007fe8:	643a      	str	r2, [r7, #64]	@ 0x40
 8007fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ff0:	e841 2300 	strex	r3, r2, [r1]
 8007ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1e5      	bne.n	8007fc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3314      	adds	r3, #20
 8008002:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	e853 3f00 	ldrex	r3, [r3]
 800800a:	61fb      	str	r3, [r7, #28]
   return(result);
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	f023 0301 	bic.w	r3, r3, #1
 8008012:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3314      	adds	r3, #20
 800801a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800801c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800801e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800802a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e5      	bne.n	8007ffc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008034:	2b01      	cmp	r3, #1
 8008036:	d119      	bne.n	800806c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	330c      	adds	r3, #12
 800803e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	e853 3f00 	ldrex	r3, [r3]
 8008046:	60bb      	str	r3, [r7, #8]
   return(result);
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	f023 0310 	bic.w	r3, r3, #16
 800804e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	330c      	adds	r3, #12
 8008056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008058:	61ba      	str	r2, [r7, #24]
 800805a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805c:	6979      	ldr	r1, [r7, #20]
 800805e:	69ba      	ldr	r2, [r7, #24]
 8008060:	e841 2300 	strex	r3, r2, [r1]
 8008064:	613b      	str	r3, [r7, #16]
   return(result);
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1e5      	bne.n	8008038 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2220      	movs	r2, #32
 8008070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800807a:	bf00      	nop
 800807c:	3754      	adds	r7, #84	@ 0x54
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b084      	sub	sp, #16
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008092:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f7ff ff39 	bl	8007f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080a6:	bf00      	nop
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b085      	sub	sp, #20
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b21      	cmp	r3, #33	@ 0x21
 80080c0:	d13e      	bne.n	8008140 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080ca:	d114      	bne.n	80080f6 <UART_Transmit_IT+0x48>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d110      	bne.n	80080f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	881b      	ldrh	r3, [r3, #0]
 80080de:	461a      	mov	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	1c9a      	adds	r2, r3, #2
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	621a      	str	r2, [r3, #32]
 80080f4:	e008      	b.n	8008108 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	1c59      	adds	r1, r3, #1
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	6211      	str	r1, [r2, #32]
 8008100:	781a      	ldrb	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800810c:	b29b      	uxth	r3, r3
 800810e:	3b01      	subs	r3, #1
 8008110:	b29b      	uxth	r3, r3
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	4619      	mov	r1, r3
 8008116:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10f      	bne.n	800813c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68da      	ldr	r2, [r3, #12]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800812a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68da      	ldr	r2, [r3, #12]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800813a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	e000      	b.n	8008142 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008140:	2302      	movs	r3, #2
  }
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b082      	sub	sp, #8
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68da      	ldr	r2, [r3, #12]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008164:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2220      	movs	r2, #32
 800816a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7ff fec8 	bl	8007f04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3708      	adds	r7, #8
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b08c      	sub	sp, #48	@ 0x30
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b22      	cmp	r3, #34	@ 0x22
 8008190:	f040 80ab 	bne.w	80082ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800819c:	d117      	bne.n	80081ce <UART_Receive_IT+0x50>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d113      	bne.n	80081ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80081a6:	2300      	movs	r3, #0
 80081a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081bc:	b29a      	uxth	r2, r3
 80081be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c6:	1c9a      	adds	r2, r3, #2
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80081cc:	e026      	b.n	800821c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80081d4:	2300      	movs	r3, #0
 80081d6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081e0:	d007      	beq.n	80081f2 <UART_Receive_IT+0x74>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10a      	bne.n	8008200 <UART_Receive_IT+0x82>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d106      	bne.n	8008200 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081fc:	701a      	strb	r2, [r3, #0]
 80081fe:	e008      	b.n	8008212 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	b2db      	uxtb	r3, r3
 8008208:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800820c:	b2da      	uxtb	r2, r3
 800820e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008210:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008220:	b29b      	uxth	r3, r3
 8008222:	3b01      	subs	r3, #1
 8008224:	b29b      	uxth	r3, r3
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	4619      	mov	r1, r3
 800822a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800822c:	2b00      	cmp	r3, #0
 800822e:	d15a      	bne.n	80082e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f022 0220 	bic.w	r2, r2, #32
 800823e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68da      	ldr	r2, [r3, #12]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800824e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	695a      	ldr	r2, [r3, #20]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f022 0201 	bic.w	r2, r2, #1
 800825e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2220      	movs	r2, #32
 8008264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800826c:	2b01      	cmp	r3, #1
 800826e:	d135      	bne.n	80082dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	330c      	adds	r3, #12
 800827c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	613b      	str	r3, [r7, #16]
   return(result);
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	f023 0310 	bic.w	r3, r3, #16
 800828c:	627b      	str	r3, [r7, #36]	@ 0x24
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	330c      	adds	r3, #12
 8008294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008296:	623a      	str	r2, [r7, #32]
 8008298:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829a:	69f9      	ldr	r1, [r7, #28]
 800829c:	6a3a      	ldr	r2, [r7, #32]
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e5      	bne.n	8008276 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0310 	and.w	r3, r3, #16
 80082b4:	2b10      	cmp	r3, #16
 80082b6:	d10a      	bne.n	80082ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082b8:	2300      	movs	r3, #0
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	60fb      	str	r3, [r7, #12]
 80082cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082d2:	4619      	mov	r1, r3
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7ff fe29 	bl	8007f2c <HAL_UARTEx_RxEventCallback>
 80082da:	e002      	b.n	80082e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7f9 fc8f 	bl	8001c00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	e002      	b.n	80082ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	e000      	b.n	80082ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80082ea:	2302      	movs	r3, #2
  }
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3730      	adds	r7, #48	@ 0x30
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082f4:	b084      	sub	sp, #16
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b084      	sub	sp, #16
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
 80082fe:	f107 001c 	add.w	r0, r7, #28
 8008302:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008308:	2b01      	cmp	r3, #1
 800830a:	d122      	bne.n	8008352 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008310:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008336:	2b01      	cmp	r3, #1
 8008338:	d105      	bne.n	8008346 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f9c0 	bl	80086cc <USB_CoreReset>
 800834c:	4603      	mov	r3, r0
 800834e:	73fb      	strb	r3, [r7, #15]
 8008350:	e01a      	b.n	8008388 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f9b4 	bl	80086cc <USB_CoreReset>
 8008364:	4603      	mov	r3, r0
 8008366:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008368:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800836a:	2b00      	cmp	r3, #0
 800836c:	d106      	bne.n	800837c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008372:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	639a      	str	r2, [r3, #56]	@ 0x38
 800837a:	e005      	b.n	8008388 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008380:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838a:	2b01      	cmp	r3, #1
 800838c:	d10b      	bne.n	80083a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f043 0206 	orr.w	r2, r3, #6
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f043 0220 	orr.w	r2, r3, #32
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083b2:	b004      	add	sp, #16
 80083b4:	4770      	bx	lr

080083b6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b083      	sub	sp, #12
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f043 0201 	orr.w	r2, r3, #1
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f023 0201 	bic.w	r2, r3, #1
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b084      	sub	sp, #16
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	460b      	mov	r3, r1
 8008404:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008416:	78fb      	ldrb	r3, [r7, #3]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d115      	bne.n	8008448 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008428:	2001      	movs	r0, #1
 800842a:	f7f9 ffbf 	bl	80023ac <HAL_Delay>
      ms++;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3301      	adds	r3, #1
 8008432:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f93a 	bl	80086ae <USB_GetMode>
 800843a:	4603      	mov	r3, r0
 800843c:	2b01      	cmp	r3, #1
 800843e:	d01e      	beq.n	800847e <USB_SetCurrentMode+0x84>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2b31      	cmp	r3, #49	@ 0x31
 8008444:	d9f0      	bls.n	8008428 <USB_SetCurrentMode+0x2e>
 8008446:	e01a      	b.n	800847e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d115      	bne.n	800847a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800845a:	2001      	movs	r0, #1
 800845c:	f7f9 ffa6 	bl	80023ac <HAL_Delay>
      ms++;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	3301      	adds	r3, #1
 8008464:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f921 	bl	80086ae <USB_GetMode>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d005      	beq.n	800847e <USB_SetCurrentMode+0x84>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2b31      	cmp	r3, #49	@ 0x31
 8008476:	d9f0      	bls.n	800845a <USB_SetCurrentMode+0x60>
 8008478:	e001      	b.n	800847e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e005      	b.n	800848a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2b32      	cmp	r3, #50	@ 0x32
 8008482:	d101      	bne.n	8008488 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e000      	b.n	800848a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
	...

08008494 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3301      	adds	r3, #1
 80084a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4a13      	ldr	r2, [pc, #76]	@ (80084f8 <USB_FlushTxFifo+0x64>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d901      	bls.n	80084b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e01b      	b.n	80084ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	daf2      	bge.n	80084a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80084bc:	2300      	movs	r3, #0
 80084be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	019b      	lsls	r3, r3, #6
 80084c4:	f043 0220 	orr.w	r2, r3, #32
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	3301      	adds	r3, #1
 80084d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	4a08      	ldr	r2, [pc, #32]	@ (80084f8 <USB_FlushTxFifo+0x64>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d901      	bls.n	80084de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e006      	b.n	80084ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	f003 0320 	and.w	r3, r3, #32
 80084e6:	2b20      	cmp	r3, #32
 80084e8:	d0f0      	beq.n	80084cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3714      	adds	r7, #20
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr
 80084f8:	00030d40 	.word	0x00030d40

080084fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008504:	2300      	movs	r3, #0
 8008506:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	3301      	adds	r3, #1
 800850c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	4a11      	ldr	r2, [pc, #68]	@ (8008558 <USB_FlushRxFifo+0x5c>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d901      	bls.n	800851a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e018      	b.n	800854c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	2b00      	cmp	r3, #0
 8008520:	daf2      	bge.n	8008508 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008522:	2300      	movs	r3, #0
 8008524:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2210      	movs	r2, #16
 800852a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	3301      	adds	r3, #1
 8008530:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	4a08      	ldr	r2, [pc, #32]	@ (8008558 <USB_FlushRxFifo+0x5c>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d901      	bls.n	800853e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e006      	b.n	800854c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	f003 0310 	and.w	r3, r3, #16
 8008546:	2b10      	cmp	r3, #16
 8008548:	d0f0      	beq.n	800852c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3714      	adds	r7, #20
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr
 8008558:	00030d40 	.word	0x00030d40

0800855c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800855c:	b480      	push	{r7}
 800855e:	b089      	sub	sp, #36	@ 0x24
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	4611      	mov	r1, r2
 8008568:	461a      	mov	r2, r3
 800856a:	460b      	mov	r3, r1
 800856c:	71fb      	strb	r3, [r7, #7]
 800856e:	4613      	mov	r3, r2
 8008570:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800857a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800857e:	2b00      	cmp	r3, #0
 8008580:	d123      	bne.n	80085ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008582:	88bb      	ldrh	r3, [r7, #4]
 8008584:	3303      	adds	r3, #3
 8008586:	089b      	lsrs	r3, r3, #2
 8008588:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800858a:	2300      	movs	r3, #0
 800858c:	61bb      	str	r3, [r7, #24]
 800858e:	e018      	b.n	80085c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008590:	79fb      	ldrb	r3, [r7, #7]
 8008592:	031a      	lsls	r2, r3, #12
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	4413      	add	r3, r2
 8008598:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800859c:	461a      	mov	r2, r3
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	3301      	adds	r3, #1
 80085a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	3301      	adds	r3, #1
 80085ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	3301      	adds	r3, #1
 80085b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	3301      	adds	r3, #1
 80085ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	3301      	adds	r3, #1
 80085c0:	61bb      	str	r3, [r7, #24]
 80085c2:	69ba      	ldr	r2, [r7, #24]
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d3e2      	bcc.n	8008590 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3724      	adds	r7, #36	@ 0x24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80085d8:	b480      	push	{r7}
 80085da:	b08b      	sub	sp, #44	@ 0x2c
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	4613      	mov	r3, r2
 80085e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80085ee:	88fb      	ldrh	r3, [r7, #6]
 80085f0:	089b      	lsrs	r3, r3, #2
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80085f6:	88fb      	ldrh	r3, [r7, #6]
 80085f8:	f003 0303 	and.w	r3, r3, #3
 80085fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80085fe:	2300      	movs	r3, #0
 8008600:	623b      	str	r3, [r7, #32]
 8008602:	e014      	b.n	800862e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008612:	3301      	adds	r3, #1
 8008614:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008618:	3301      	adds	r3, #1
 800861a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800861c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861e:	3301      	adds	r3, #1
 8008620:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008624:	3301      	adds	r3, #1
 8008626:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	3301      	adds	r3, #1
 800862c:	623b      	str	r3, [r7, #32]
 800862e:	6a3a      	ldr	r2, [r7, #32]
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	429a      	cmp	r2, r3
 8008634:	d3e6      	bcc.n	8008604 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008636:	8bfb      	ldrh	r3, [r7, #30]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d01e      	beq.n	800867a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800863c:	2300      	movs	r3, #0
 800863e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008646:	461a      	mov	r2, r3
 8008648:	f107 0310 	add.w	r3, r7, #16
 800864c:	6812      	ldr	r2, [r2, #0]
 800864e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	b2db      	uxtb	r3, r3
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	fa22 f303 	lsr.w	r3, r2, r3
 800865c:	b2da      	uxtb	r2, r3
 800865e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008660:	701a      	strb	r2, [r3, #0]
      i++;
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	3301      	adds	r3, #1
 8008666:	623b      	str	r3, [r7, #32]
      pDest++;
 8008668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866a:	3301      	adds	r3, #1
 800866c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800866e:	8bfb      	ldrh	r3, [r7, #30]
 8008670:	3b01      	subs	r3, #1
 8008672:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008674:	8bfb      	ldrh	r3, [r7, #30]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1ea      	bne.n	8008650 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800867a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800867c:	4618      	mov	r0, r3
 800867e:	372c      	adds	r7, #44	@ 0x2c
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	695b      	ldr	r3, [r3, #20]
 8008694:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	4013      	ands	r3, r2
 800869e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80086a0:	68fb      	ldr	r3, [r7, #12]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	f003 0301 	and.w	r3, r3, #1
}
 80086be:	4618      	mov	r0, r3
 80086c0:	370c      	adds	r7, #12
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
	...

080086cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	3301      	adds	r3, #1
 80086dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	4a13      	ldr	r2, [pc, #76]	@ (8008730 <USB_CoreReset+0x64>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d901      	bls.n	80086ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e01b      	b.n	8008722 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	daf2      	bge.n	80086d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80086f2:	2300      	movs	r3, #0
 80086f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	f043 0201 	orr.w	r2, r3, #1
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	3301      	adds	r3, #1
 8008706:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	4a09      	ldr	r2, [pc, #36]	@ (8008730 <USB_CoreReset+0x64>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d901      	bls.n	8008714 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e006      	b.n	8008722 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	2b01      	cmp	r3, #1
 800871e:	d0f0      	beq.n	8008702 <USB_CoreReset+0x36>

  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	00030d40 	.word	0x00030d40

08008734 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008734:	b084      	sub	sp, #16
 8008736:	b580      	push	{r7, lr}
 8008738:	b086      	sub	sp, #24
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008742:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008754:	461a      	mov	r2, r3
 8008756:	2300      	movs	r3, #0
 8008758:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800875e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800876a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008776:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008786:	2b00      	cmp	r3, #0
 8008788:	d018      	beq.n	80087bc <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800878a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800878c:	2b01      	cmp	r3, #1
 800878e:	d10a      	bne.n	80087a6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800879e:	f043 0304 	orr.w	r3, r3, #4
 80087a2:	6013      	str	r3, [r2, #0]
 80087a4:	e014      	b.n	80087d0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80087b4:	f023 0304 	bic.w	r3, r3, #4
 80087b8:	6013      	str	r3, [r2, #0]
 80087ba:	e009      	b.n	80087d0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80087ca:	f023 0304 	bic.w	r3, r3, #4
 80087ce:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087d0:	2110      	movs	r1, #16
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7ff fe5e 	bl	8008494 <USB_FlushTxFifo>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d001      	beq.n	80087e2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7ff fe8a 	bl	80084fc <USB_FlushRxFifo>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d001      	beq.n	80087f2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80087f2:	2300      	movs	r3, #0
 80087f4:	613b      	str	r3, [r7, #16]
 80087f6:	e015      	b.n	8008824 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008804:	461a      	mov	r2, r3
 8008806:	f04f 33ff 	mov.w	r3, #4294967295
 800880a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	015a      	lsls	r2, r3, #5
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	4413      	add	r3, r2
 8008814:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008818:	461a      	mov	r2, r3
 800881a:	2300      	movs	r3, #0
 800881c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	3301      	adds	r3, #1
 8008822:	613b      	str	r3, [r7, #16]
 8008824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	429a      	cmp	r2, r3
 800882a:	d3e5      	bcc.n	80087f8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f04f 32ff 	mov.w	r2, #4294967295
 8008838:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800883e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00b      	beq.n	800885e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800884c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a13      	ldr	r2, [pc, #76]	@ (80088a0 <USB_HostInit+0x16c>)
 8008852:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a13      	ldr	r2, [pc, #76]	@ (80088a4 <USB_HostInit+0x170>)
 8008858:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800885c:	e009      	b.n	8008872 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2280      	movs	r2, #128	@ 0x80
 8008862:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a10      	ldr	r2, [pc, #64]	@ (80088a8 <USB_HostInit+0x174>)
 8008868:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a0f      	ldr	r2, [pc, #60]	@ (80088ac <USB_HostInit+0x178>)
 800886e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008874:	2b00      	cmp	r3, #0
 8008876:	d105      	bne.n	8008884 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	f043 0210 	orr.w	r2, r3, #16
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	699a      	ldr	r2, [r3, #24]
 8008888:	4b09      	ldr	r3, [pc, #36]	@ (80088b0 <USB_HostInit+0x17c>)
 800888a:	4313      	orrs	r3, r2
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008890:	7dfb      	ldrb	r3, [r7, #23]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3718      	adds	r7, #24
 8008896:	46bd      	mov	sp, r7
 8008898:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800889c:	b004      	add	sp, #16
 800889e:	4770      	bx	lr
 80088a0:	01000200 	.word	0x01000200
 80088a4:	00e00300 	.word	0x00e00300
 80088a8:	00600080 	.word	0x00600080
 80088ac:	004000e0 	.word	0x004000e0
 80088b0:	a3200008 	.word	0xa3200008

080088b4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80088d2:	f023 0303 	bic.w	r3, r3, #3
 80088d6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	78fb      	ldrb	r3, [r7, #3]
 80088e2:	f003 0303 	and.w	r3, r3, #3
 80088e6:	68f9      	ldr	r1, [r7, #12]
 80088e8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80088ec:	4313      	orrs	r3, r2
 80088ee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80088f0:	78fb      	ldrb	r3, [r7, #3]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d107      	bne.n	8008906 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088fc:	461a      	mov	r2, r3
 80088fe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008902:	6053      	str	r3, [r2, #4]
 8008904:	e009      	b.n	800891a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008906:	78fb      	ldrb	r3, [r7, #3]
 8008908:	2b02      	cmp	r3, #2
 800890a:	d106      	bne.n	800891a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008912:	461a      	mov	r2, r3
 8008914:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008918:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008934:	2300      	movs	r3, #0
 8008936:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008948:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008952:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008956:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008958:	2064      	movs	r0, #100	@ 0x64
 800895a:	f7f9 fd27 	bl	80023ac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008966:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800896a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800896c:	200a      	movs	r0, #10
 800896e:	f7f9 fd1d 	bl	80023ac <HAL_Delay>

  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	460b      	mov	r3, r1
 8008986:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80089a0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d109      	bne.n	80089c0 <USB_DriveVbus+0x44>
 80089ac:	78fb      	ldrb	r3, [r7, #3]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d106      	bne.n	80089c0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80089ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80089be:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80089c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089ca:	d109      	bne.n	80089e0 <USB_DriveVbus+0x64>
 80089cc:	78fb      	ldrb	r3, [r7, #3]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d106      	bne.n	80089e0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80089da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089de:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3714      	adds	r7, #20
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b085      	sub	sp, #20
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80089fa:	2300      	movs	r3, #0
 80089fc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	0c5b      	lsrs	r3, r3, #17
 8008a0c:	f003 0303 	and.w	r3, r3, #3
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3714      	adds	r7, #20
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	b29b      	uxth	r3, r3
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
	...

08008a40 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b088      	sub	sp, #32
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	4608      	mov	r0, r1
 8008a4a:	4611      	mov	r1, r2
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	4603      	mov	r3, r0
 8008a50:	70fb      	strb	r3, [r7, #3]
 8008a52:	460b      	mov	r3, r1
 8008a54:	70bb      	strb	r3, [r7, #2]
 8008a56:	4613      	mov	r3, r2
 8008a58:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008a62:	78fb      	ldrb	r3, [r7, #3]
 8008a64:	015a      	lsls	r2, r3, #5
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	4413      	add	r3, r2
 8008a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a6e:	461a      	mov	r2, r3
 8008a70:	f04f 33ff 	mov.w	r3, #4294967295
 8008a74:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008a76:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d87e      	bhi.n	8008b7c <USB_HC_Init+0x13c>
 8008a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a84 <USB_HC_Init+0x44>)
 8008a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a84:	08008a95 	.word	0x08008a95
 8008a88:	08008b3f 	.word	0x08008b3f
 8008a8c:	08008a95 	.word	0x08008a95
 8008a90:	08008b01 	.word	0x08008b01
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008a94:	78fb      	ldrb	r3, [r7, #3]
 8008a96:	015a      	lsls	r2, r3, #5
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008aa6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008aa8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	da10      	bge.n	8008ad2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008ab0:	78fb      	ldrb	r3, [r7, #3]
 8008ab2:	015a      	lsls	r2, r3, #5
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	78fa      	ldrb	r2, [r7, #3]
 8008ac0:	0151      	lsls	r1, r2, #5
 8008ac2:	693a      	ldr	r2, [r7, #16]
 8008ac4:	440a      	add	r2, r1
 8008ac6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ace:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008ad0:	e057      	b.n	8008b82 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d051      	beq.n	8008b82 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008ade:	78fb      	ldrb	r3, [r7, #3]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	78fa      	ldrb	r2, [r7, #3]
 8008aee:	0151      	lsls	r1, r2, #5
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	440a      	add	r2, r1
 8008af4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008af8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008afc:	60d3      	str	r3, [r2, #12]
      break;
 8008afe:	e040      	b.n	8008b82 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	015a      	lsls	r2, r3, #5
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	4413      	add	r3, r2
 8008b08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008b12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008b14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	da34      	bge.n	8008b86 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008b1c:	78fb      	ldrb	r3, [r7, #3]
 8008b1e:	015a      	lsls	r2, r3, #5
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	4413      	add	r3, r2
 8008b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	78fa      	ldrb	r2, [r7, #3]
 8008b2c:	0151      	lsls	r1, r2, #5
 8008b2e:	693a      	ldr	r2, [r7, #16]
 8008b30:	440a      	add	r2, r1
 8008b32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b3a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008b3c:	e023      	b.n	8008b86 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008b3e:	78fb      	ldrb	r3, [r7, #3]
 8008b40:	015a      	lsls	r2, r3, #5
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	4413      	add	r3, r2
 8008b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	f240 2325 	movw	r3, #549	@ 0x225
 8008b50:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008b52:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	da17      	bge.n	8008b8a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008b5a:	78fb      	ldrb	r3, [r7, #3]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	78fa      	ldrb	r2, [r7, #3]
 8008b6a:	0151      	lsls	r1, r2, #5
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	440a      	add	r2, r1
 8008b70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b74:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008b78:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008b7a:	e006      	b.n	8008b8a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	77fb      	strb	r3, [r7, #31]
      break;
 8008b80:	e004      	b.n	8008b8c <USB_HC_Init+0x14c>
      break;
 8008b82:	bf00      	nop
 8008b84:	e002      	b.n	8008b8c <USB_HC_Init+0x14c>
      break;
 8008b86:	bf00      	nop
 8008b88:	e000      	b.n	8008b8c <USB_HC_Init+0x14c>
      break;
 8008b8a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008b8c:	78fb      	ldrb	r3, [r7, #3]
 8008b8e:	015a      	lsls	r2, r3, #5
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	4413      	add	r3, r2
 8008b94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	78fa      	ldrb	r2, [r7, #3]
 8008b9c:	0151      	lsls	r1, r2, #5
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	440a      	add	r2, r1
 8008ba2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ba6:	f043 0302 	orr.w	r3, r3, #2
 8008baa:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008bb2:	699a      	ldr	r2, [r3, #24]
 8008bb4:	78fb      	ldrb	r3, [r7, #3]
 8008bb6:	f003 030f 	and.w	r3, r3, #15
 8008bba:	2101      	movs	r1, #1
 8008bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8008bc0:	6939      	ldr	r1, [r7, #16]
 8008bc2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008bd6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	da03      	bge.n	8008be6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008be2:	61bb      	str	r3, [r7, #24]
 8008be4:	e001      	b.n	8008bea <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8008be6:	2300      	movs	r3, #0
 8008be8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7ff feff 	bl	80089ee <USB_GetHostSpeed>
 8008bf0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008bf2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d106      	bne.n	8008c08 <USB_HC_Init+0x1c8>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d003      	beq.n	8008c08 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008c00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008c04:	617b      	str	r3, [r7, #20]
 8008c06:	e001      	b.n	8008c0c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c0c:	787b      	ldrb	r3, [r7, #1]
 8008c0e:	059b      	lsls	r3, r3, #22
 8008c10:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008c14:	78bb      	ldrb	r3, [r7, #2]
 8008c16:	02db      	lsls	r3, r3, #11
 8008c18:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c1c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008c1e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008c22:	049b      	lsls	r3, r3, #18
 8008c24:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008c28:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008c2a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008c2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008c30:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c36:	78fb      	ldrb	r3, [r7, #3]
 8008c38:	0159      	lsls	r1, r3, #5
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	440b      	add	r3, r1
 8008c3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c42:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c48:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008c4a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	d003      	beq.n	8008c5a <USB_HC_Init+0x21a>
 8008c52:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d10f      	bne.n	8008c7a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008c5a:	78fb      	ldrb	r3, [r7, #3]
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	4413      	add	r3, r2
 8008c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	78fa      	ldrb	r2, [r7, #3]
 8008c6a:	0151      	lsls	r1, r2, #5
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	440a      	add	r2, r1
 8008c70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008c78:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008c7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3720      	adds	r7, #32
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b08c      	sub	sp, #48	@ 0x30
 8008c88:	af02      	add	r7, sp, #8
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	785b      	ldrb	r3, [r3, #1]
 8008c9a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008c9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ca0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d02d      	beq.n	8008d0a <USB_HC_StartXfer+0x86>
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	791b      	ldrb	r3, [r3, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d129      	bne.n	8008d0a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008cb6:	79fb      	ldrb	r3, [r7, #7]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d117      	bne.n	8008cec <USB_HC_StartXfer+0x68>
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	79db      	ldrb	r3, [r3, #7]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d003      	beq.n	8008ccc <USB_HC_StartXfer+0x48>
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	79db      	ldrb	r3, [r3, #7]
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d10f      	bne.n	8008cec <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	015a      	lsls	r2, r3, #5
 8008cd0:	6a3b      	ldr	r3, [r7, #32]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	69fa      	ldr	r2, [r7, #28]
 8008cdc:	0151      	lsls	r1, r2, #5
 8008cde:	6a3a      	ldr	r2, [r7, #32]
 8008ce0:	440a      	add	r2, r1
 8008ce2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cea:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008cec:	79fb      	ldrb	r3, [r7, #7]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10b      	bne.n	8008d0a <USB_HC_StartXfer+0x86>
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	795b      	ldrb	r3, [r3, #5]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d107      	bne.n	8008d0a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	785b      	ldrb	r3, [r3, #1]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f000 fa0f 	bl	8009124 <USB_DoPing>
      return HAL_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	e0f8      	b.n	8008efc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d018      	beq.n	8008d44 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	695b      	ldr	r3, [r3, #20]
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	8912      	ldrh	r2, [r2, #8]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	8912      	ldrh	r2, [r2, #8]
 8008d22:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d26:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (num_packets > max_hc_pkt_count)
 8008d28:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008d2a:	8b7b      	ldrh	r3, [r7, #26]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d90b      	bls.n	8008d48 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008d30:	8b7b      	ldrh	r3, [r7, #26]
 8008d32:	84fb      	strh	r3, [r7, #38]	@ 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008d34:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	8912      	ldrh	r2, [r2, #8]
 8008d3a:	fb03 f202 	mul.w	r2, r3, r2
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	611a      	str	r2, [r3, #16]
 8008d42:	e001      	b.n	8008d48 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008d44:	2301      	movs	r3, #1
 8008d46:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	78db      	ldrb	r3, [r3, #3]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d007      	beq.n	8008d60 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008d50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	8912      	ldrh	r2, [r2, #8]
 8008d56:	fb03 f202 	mul.w	r2, r3, r2
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	611a      	str	r2, [r3, #16]
 8008d5e:	e003      	b.n	8008d68 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	695a      	ldr	r2, [r3, #20]
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d70:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008d72:	04d9      	lsls	r1, r3, #19
 8008d74:	4b63      	ldr	r3, [pc, #396]	@ (8008f04 <USB_HC_StartXfer+0x280>)
 8008d76:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d78:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	7a9b      	ldrb	r3, [r3, #10]
 8008d7e:	075b      	lsls	r3, r3, #29
 8008d80:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d84:	69f9      	ldr	r1, [r7, #28]
 8008d86:	0148      	lsls	r0, r1, #5
 8008d88:	6a39      	ldr	r1, [r7, #32]
 8008d8a:	4401      	add	r1, r0
 8008d8c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d90:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d92:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008d94:	79fb      	ldrb	r3, [r7, #7]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d009      	beq.n	8008dae <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	68d9      	ldr	r1, [r3, #12]
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	015a      	lsls	r2, r3, #5
 8008da2:	6a3b      	ldr	r3, [r7, #32]
 8008da4:	4413      	add	r3, r2
 8008da6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008daa:	460a      	mov	r2, r1
 8008dac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008dae:	6a3b      	ldr	r3, [r7, #32]
 8008db0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	bf0c      	ite	eq
 8008dbe:	2301      	moveq	r3, #1
 8008dc0:	2300      	movne	r3, #0
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	015a      	lsls	r2, r3, #5
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	4413      	add	r3, r2
 8008dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	69fa      	ldr	r2, [r7, #28]
 8008dd6:	0151      	lsls	r1, r2, #5
 8008dd8:	6a3a      	ldr	r2, [r7, #32]
 8008dda:	440a      	add	r2, r1
 8008ddc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008de0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008de4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	015a      	lsls	r2, r3, #5
 8008dea:	6a3b      	ldr	r3, [r7, #32]
 8008dec:	4413      	add	r3, r2
 8008dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	7e7b      	ldrb	r3, [r7, #25]
 8008df6:	075b      	lsls	r3, r3, #29
 8008df8:	69f9      	ldr	r1, [r7, #28]
 8008dfa:	0148      	lsls	r0, r1, #5
 8008dfc:	6a39      	ldr	r1, [r7, #32]
 8008dfe:	4401      	add	r1, r0
 8008e00:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008e04:	4313      	orrs	r3, r2
 8008e06:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	015a      	lsls	r2, r3, #5
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	4413      	add	r3, r2
 8008e10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008e1e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	78db      	ldrb	r3, [r3, #3]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d004      	beq.n	8008e32 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e2e:	613b      	str	r3, [r7, #16]
 8008e30:	e003      	b.n	8008e3a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e38:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e40:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	6a3b      	ldr	r3, [r7, #32]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e4e:	461a      	mov	r2, r3
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008e54:	79fb      	ldrb	r3, [r7, #7]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	e04e      	b.n	8008efc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	78db      	ldrb	r3, [r3, #3]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d149      	bne.n	8008efa <USB_HC_StartXfer+0x276>
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d045      	beq.n	8008efa <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	79db      	ldrb	r3, [r3, #7]
 8008e72:	2b03      	cmp	r3, #3
 8008e74:	d830      	bhi.n	8008ed8 <USB_HC_StartXfer+0x254>
 8008e76:	a201      	add	r2, pc, #4	@ (adr r2, 8008e7c <USB_HC_StartXfer+0x1f8>)
 8008e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7c:	08008e8d 	.word	0x08008e8d
 8008e80:	08008eb1 	.word	0x08008eb1
 8008e84:	08008e8d 	.word	0x08008e8d
 8008e88:	08008eb1 	.word	0x08008eb1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	695b      	ldr	r3, [r3, #20]
 8008e90:	3303      	adds	r3, #3
 8008e92:	089b      	lsrs	r3, r3, #2
 8008e94:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008e96:	8afa      	ldrh	r2, [r7, #22]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d91c      	bls.n	8008edc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	f043 0220 	orr.w	r2, r3, #32
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	619a      	str	r2, [r3, #24]
        }
        break;
 8008eae:	e015      	b.n	8008edc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	695b      	ldr	r3, [r3, #20]
 8008eb4:	3303      	adds	r3, #3
 8008eb6:	089b      	lsrs	r3, r3, #2
 8008eb8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008eba:	8afa      	ldrh	r2, [r7, #22]
 8008ebc:	6a3b      	ldr	r3, [r7, #32]
 8008ebe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d90a      	bls.n	8008ee0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	619a      	str	r2, [r3, #24]
        }
        break;
 8008ed6:	e003      	b.n	8008ee0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008ed8:	bf00      	nop
 8008eda:	e002      	b.n	8008ee2 <USB_HC_StartXfer+0x25e>
        break;
 8008edc:	bf00      	nop
 8008ede:	e000      	b.n	8008ee2 <USB_HC_StartXfer+0x25e>
        break;
 8008ee0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	68d9      	ldr	r1, [r3, #12]
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	785a      	ldrb	r2, [r3, #1]
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	695b      	ldr	r3, [r3, #20]
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	9000      	str	r0, [sp, #0]
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f7ff fb31 	bl	800855c <USB_WritePacket>
  }

  return HAL_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3728      	adds	r7, #40	@ 0x28
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	1ff80000 	.word	0x1ff80000

08008f08 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f1a:	695b      	ldr	r3, [r3, #20]
 8008f1c:	b29b      	uxth	r3, r3
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr

08008f2a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008f2a:	b480      	push	{r7}
 8008f2c:	b089      	sub	sp, #36	@ 0x24
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	460b      	mov	r3, r1
 8008f34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008f3a:	78fb      	ldrb	r3, [r7, #3]
 8008f3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	015a      	lsls	r2, r3, #5
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	4413      	add	r3, r2
 8008f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	0c9b      	lsrs	r3, r3, #18
 8008f52:	f003 0303 	and.w	r3, r3, #3
 8008f56:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	015a      	lsls	r2, r3, #5
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	4413      	add	r3, r2
 8008f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	0fdb      	lsrs	r3, r3, #31
 8008f68:	f003 0301 	and.w	r3, r3, #1
 8008f6c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	f003 0320 	and.w	r3, r3, #32
 8008f76:	2b20      	cmp	r3, #32
 8008f78:	d104      	bne.n	8008f84 <USB_HC_Halt+0x5a>
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d101      	bne.n	8008f84 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008f80:	2300      	movs	r3, #0
 8008f82:	e0c8      	b.n	8009116 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d002      	beq.n	8008f90 <USB_HC_Halt+0x66>
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d163      	bne.n	8009058 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	015a      	lsls	r2, r3, #5
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	4413      	add	r3, r2
 8008f98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	69ba      	ldr	r2, [r7, #24]
 8008fa0:	0151      	lsls	r1, r2, #5
 8008fa2:	69fa      	ldr	r2, [r7, #28]
 8008fa4:	440a      	add	r2, r1
 8008fa6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008faa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008fae:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f003 0320 	and.w	r3, r3, #32
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f040 80ab 	bne.w	8009114 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fc2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d133      	bne.n	8009032 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	015a      	lsls	r2, r3, #5
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	69ba      	ldr	r2, [r7, #24]
 8008fda:	0151      	lsls	r1, r2, #5
 8008fdc:	69fa      	ldr	r2, [r7, #28]
 8008fde:	440a      	add	r2, r1
 8008fe0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008fe4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008fe8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	69ba      	ldr	r2, [r7, #24]
 8008ffa:	0151      	lsls	r1, r2, #5
 8008ffc:	69fa      	ldr	r2, [r7, #28]
 8008ffe:	440a      	add	r2, r1
 8009000:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009004:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009008:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	3301      	adds	r3, #1
 800900e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009016:	d81d      	bhi.n	8009054 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	4413      	add	r3, r2
 8009020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800902a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800902e:	d0ec      	beq.n	800900a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009030:	e070      	b.n	8009114 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	015a      	lsls	r2, r3, #5
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	4413      	add	r3, r2
 800903a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	0151      	lsls	r1, r2, #5
 8009044:	69fa      	ldr	r2, [r7, #28]
 8009046:	440a      	add	r2, r1
 8009048:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800904c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009050:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009052:	e05f      	b.n	8009114 <USB_HC_Halt+0x1ea>
            break;
 8009054:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009056:	e05d      	b.n	8009114 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	015a      	lsls	r2, r3, #5
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	4413      	add	r3, r2
 8009060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	69ba      	ldr	r2, [r7, #24]
 8009068:	0151      	lsls	r1, r2, #5
 800906a:	69fa      	ldr	r2, [r7, #28]
 800906c:	440a      	add	r2, r1
 800906e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009072:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009076:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d133      	bne.n	80090f0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	015a      	lsls	r2, r3, #5
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	4413      	add	r3, r2
 8009090:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	69ba      	ldr	r2, [r7, #24]
 8009098:	0151      	lsls	r1, r2, #5
 800909a:	69fa      	ldr	r2, [r7, #28]
 800909c:	440a      	add	r2, r1
 800909e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80090a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	015a      	lsls	r2, r3, #5
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	4413      	add	r3, r2
 80090b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	69ba      	ldr	r2, [r7, #24]
 80090b8:	0151      	lsls	r1, r2, #5
 80090ba:	69fa      	ldr	r2, [r7, #28]
 80090bc:	440a      	add	r2, r1
 80090be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80090c6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	3301      	adds	r3, #1
 80090cc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80090d4:	d81d      	bhi.n	8009112 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	015a      	lsls	r2, r3, #5
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090ec:	d0ec      	beq.n	80090c8 <USB_HC_Halt+0x19e>
 80090ee:	e011      	b.n	8009114 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	015a      	lsls	r2, r3, #5
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	4413      	add	r3, r2
 80090f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	69ba      	ldr	r2, [r7, #24]
 8009100:	0151      	lsls	r1, r2, #5
 8009102:	69fa      	ldr	r2, [r7, #28]
 8009104:	440a      	add	r2, r1
 8009106:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800910a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800910e:	6013      	str	r3, [r2, #0]
 8009110:	e000      	b.n	8009114 <USB_HC_Halt+0x1ea>
          break;
 8009112:	bf00      	nop
    }
  }

  return HAL_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3724      	adds	r7, #36	@ 0x24
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
	...

08009124 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009124:	b480      	push	{r7}
 8009126:	b087      	sub	sp, #28
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	460b      	mov	r3, r1
 800912e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009134:	78fb      	ldrb	r3, [r7, #3]
 8009136:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009138:	2301      	movs	r3, #1
 800913a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	04da      	lsls	r2, r3, #19
 8009140:	4b15      	ldr	r3, [pc, #84]	@ (8009198 <USB_DoPing+0x74>)
 8009142:	4013      	ands	r3, r2
 8009144:	693a      	ldr	r2, [r7, #16]
 8009146:	0151      	lsls	r1, r2, #5
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	440a      	add	r2, r1
 800914c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009150:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009154:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	015a      	lsls	r2, r3, #5
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	4413      	add	r3, r2
 800915e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800916c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009174:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	015a      	lsls	r2, r3, #5
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	4413      	add	r3, r2
 800917e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009182:	461a      	mov	r2, r3
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	371c      	adds	r7, #28
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	1ff80000 	.word	0x1ff80000

0800919c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b088      	sub	sp, #32
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80091ac:	2300      	movs	r3, #0
 80091ae:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f7ff f911 	bl	80083d8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80091b6:	2110      	movs	r1, #16
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f7ff f96b 	bl	8008494 <USB_FlushTxFifo>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d001      	beq.n	80091c8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7ff f997 	bl	80084fc <USB_FlushRxFifo>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80091d8:	2300      	movs	r3, #0
 80091da:	61bb      	str	r3, [r7, #24]
 80091dc:	e01f      	b.n	800921e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	015a      	lsls	r2, r3, #5
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80091f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80091fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009204:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	015a      	lsls	r2, r3, #5
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	4413      	add	r3, r2
 800920e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009212:	461a      	mov	r2, r3
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	3301      	adds	r3, #1
 800921c:	61bb      	str	r3, [r7, #24]
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	2b0f      	cmp	r3, #15
 8009222:	d9dc      	bls.n	80091de <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009224:	2300      	movs	r3, #0
 8009226:	61bb      	str	r3, [r7, #24]
 8009228:	e034      	b.n	8009294 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	015a      	lsls	r2, r3, #5
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	4413      	add	r3, r2
 8009232:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009240:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009248:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009250:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	015a      	lsls	r2, r3, #5
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	4413      	add	r3, r2
 800925a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800925e:	461a      	mov	r2, r3
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	3301      	adds	r3, #1
 8009268:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009270:	d80c      	bhi.n	800928c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	015a      	lsls	r2, r3, #5
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	4413      	add	r3, r2
 800927a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009284:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009288:	d0ec      	beq.n	8009264 <USB_StopHost+0xc8>
 800928a:	e000      	b.n	800928e <USB_StopHost+0xf2>
        break;
 800928c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	3301      	adds	r3, #1
 8009292:	61bb      	str	r3, [r7, #24]
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	2b0f      	cmp	r3, #15
 8009298:	d9c7      	bls.n	800922a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80092a0:	461a      	mov	r2, r3
 80092a2:	f04f 33ff 	mov.w	r3, #4294967295
 80092a6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f04f 32ff 	mov.w	r2, #4294967295
 80092ae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f7ff f880 	bl	80083b6 <USB_EnableGlobalInt>

  return ret;
 80092b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3720      	adds	r7, #32
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80092c4:	4904      	ldr	r1, [pc, #16]	@ (80092d8 <MX_FATFS_Init+0x18>)
 80092c6:	4805      	ldr	r0, [pc, #20]	@ (80092dc <MX_FATFS_Init+0x1c>)
 80092c8:	f006 fb20 	bl	800f90c <FATFS_LinkDriver>
 80092cc:	4603      	mov	r3, r0
 80092ce:	461a      	mov	r2, r3
 80092d0:	4b03      	ldr	r3, [pc, #12]	@ (80092e0 <MX_FATFS_Init+0x20>)
 80092d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80092d4:	bf00      	nop
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	20001a10 	.word	0x20001a10
 80092dc:	0801051c 	.word	0x0801051c
 80092e0:	20001a0c 	.word	0x20001a0c

080092e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80092e4:	b480      	push	{r7}
 80092e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80092e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	4603      	mov	r3, r0
 80092fc:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	4603      	mov	r3, r0
 8009314:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800931a:	79fb      	ldrb	r3, [r7, #7]
 800931c:	4619      	mov	r1, r3
 800931e:	4808      	ldr	r0, [pc, #32]	@ (8009340 <USBH_status+0x34>)
 8009320:	f000 fe30 	bl	8009f84 <USBH_MSC_UnitIsReady>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d002      	beq.n	8009330 <USBH_status+0x24>
  {
    res = RES_OK;
 800932a:	2300      	movs	r3, #0
 800932c:	73fb      	strb	r3, [r7, #15]
 800932e:	e001      	b.n	8009334 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009334:	7bfb      	ldrb	r3, [r7, #15]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20001e7c 	.word	0x20001e7c

08009344 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b094      	sub	sp, #80	@ 0x50
 8009348:	af02      	add	r7, sp, #8
 800934a:	60b9      	str	r1, [r7, #8]
 800934c:	607a      	str	r2, [r7, #4]
 800934e:	603b      	str	r3, [r7, #0]
 8009350:	4603      	mov	r3, r0
 8009352:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800935a:	7bf9      	ldrb	r1, [r7, #15]
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	4813      	ldr	r0, [pc, #76]	@ (80093b4 <USBH_read+0x70>)
 8009366:	f000 fe57 	bl	800a018 <USBH_MSC_Read>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d103      	bne.n	8009378 <USBH_read+0x34>
  {
    res = RES_OK;
 8009370:	2300      	movs	r3, #0
 8009372:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009376:	e017      	b.n	80093a8 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009378:	f107 0210 	add.w	r2, r7, #16
 800937c:	7bfb      	ldrb	r3, [r7, #15]
 800937e:	4619      	mov	r1, r3
 8009380:	480c      	ldr	r0, [pc, #48]	@ (80093b4 <USBH_read+0x70>)
 8009382:	f000 fe25 	bl	8009fd0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009386:	7f7b      	ldrb	r3, [r7, #29]
 8009388:	2b3a      	cmp	r3, #58	@ 0x3a
 800938a:	d005      	beq.n	8009398 <USBH_read+0x54>
 800938c:	2b3a      	cmp	r3, #58	@ 0x3a
 800938e:	dc07      	bgt.n	80093a0 <USBH_read+0x5c>
 8009390:	2b04      	cmp	r3, #4
 8009392:	d001      	beq.n	8009398 <USBH_read+0x54>
 8009394:	2b28      	cmp	r3, #40	@ 0x28
 8009396:	d103      	bne.n	80093a0 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009398:	2303      	movs	r3, #3
 800939a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800939e:	e003      	b.n	80093a8 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 80093a6:	bf00      	nop
    }
  }

  return res;
 80093a8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3748      	adds	r7, #72	@ 0x48
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	20001e7c 	.word	0x20001e7c

080093b8 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b094      	sub	sp, #80	@ 0x50
 80093bc:	af02      	add	r7, sp, #8
 80093be:	60b9      	str	r1, [r7, #8]
 80093c0:	607a      	str	r2, [r7, #4]
 80093c2:	603b      	str	r3, [r7, #0]
 80093c4:	4603      	mov	r3, r0
 80093c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80093ce:	7bf9      	ldrb	r1, [r7, #15]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	4817      	ldr	r0, [pc, #92]	@ (8009438 <USBH_write+0x80>)
 80093da:	f000 fe86 	bl	800a0ea <USBH_MSC_Write>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d103      	bne.n	80093ec <USBH_write+0x34>
  {
    res = RES_OK;
 80093e4:	2300      	movs	r3, #0
 80093e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80093ea:	e01f      	b.n	800942c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80093ec:	f107 0210 	add.w	r2, r7, #16
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
 80093f2:	4619      	mov	r1, r3
 80093f4:	4810      	ldr	r0, [pc, #64]	@ (8009438 <USBH_write+0x80>)
 80093f6:	f000 fdeb 	bl	8009fd0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80093fa:	7f7b      	ldrb	r3, [r7, #29]
 80093fc:	2b3a      	cmp	r3, #58	@ 0x3a
 80093fe:	d00d      	beq.n	800941c <USBH_write+0x64>
 8009400:	2b3a      	cmp	r3, #58	@ 0x3a
 8009402:	dc0f      	bgt.n	8009424 <USBH_write+0x6c>
 8009404:	2b28      	cmp	r3, #40	@ 0x28
 8009406:	d009      	beq.n	800941c <USBH_write+0x64>
 8009408:	2b28      	cmp	r3, #40	@ 0x28
 800940a:	dc0b      	bgt.n	8009424 <USBH_write+0x6c>
 800940c:	2b04      	cmp	r3, #4
 800940e:	d005      	beq.n	800941c <USBH_write+0x64>
 8009410:	2b27      	cmp	r3, #39	@ 0x27
 8009412:	d107      	bne.n	8009424 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8009414:	2302      	movs	r3, #2
 8009416:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800941a:	e007      	b.n	800942c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800941c:	2303      	movs	r3, #3
 800941e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8009422:	e003      	b.n	800942c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800942a:	bf00      	nop
    }
  }

  return res;
 800942c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009430:	4618      	mov	r0, r3
 8009432:	3748      	adds	r7, #72	@ 0x48
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	20001e7c 	.word	0x20001e7c

0800943c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b090      	sub	sp, #64	@ 0x40
 8009440:	af00      	add	r7, sp, #0
 8009442:	4603      	mov	r3, r0
 8009444:	603a      	str	r2, [r7, #0]
 8009446:	71fb      	strb	r3, [r7, #7]
 8009448:	460b      	mov	r3, r1
 800944a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009452:	79bb      	ldrb	r3, [r7, #6]
 8009454:	2b03      	cmp	r3, #3
 8009456:	d852      	bhi.n	80094fe <USBH_ioctl+0xc2>
 8009458:	a201      	add	r2, pc, #4	@ (adr r2, 8009460 <USBH_ioctl+0x24>)
 800945a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945e:	bf00      	nop
 8009460:	08009471 	.word	0x08009471
 8009464:	08009479 	.word	0x08009479
 8009468:	080094a3 	.word	0x080094a3
 800946c:	080094cf 	.word	0x080094cf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009470:	2300      	movs	r3, #0
 8009472:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8009476:	e045      	b.n	8009504 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009478:	f107 0208 	add.w	r2, r7, #8
 800947c:	79fb      	ldrb	r3, [r7, #7]
 800947e:	4619      	mov	r1, r3
 8009480:	4823      	ldr	r0, [pc, #140]	@ (8009510 <USBH_ioctl+0xd4>)
 8009482:	f000 fda5 	bl	8009fd0 <USBH_MSC_GetLUNInfo>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d106      	bne.n	800949a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009492:	2300      	movs	r3, #0
 8009494:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009498:	e034      	b.n	8009504 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 80094a0:	e030      	b.n	8009504 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80094a2:	f107 0208 	add.w	r2, r7, #8
 80094a6:	79fb      	ldrb	r3, [r7, #7]
 80094a8:	4619      	mov	r1, r3
 80094aa:	4819      	ldr	r0, [pc, #100]	@ (8009510 <USBH_ioctl+0xd4>)
 80094ac:	f000 fd90 	bl	8009fd0 <USBH_MSC_GetLUNInfo>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d107      	bne.n	80094c6 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80094b6:	8a3b      	ldrh	r3, [r7, #16]
 80094b8:	461a      	mov	r2, r3
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80094c4:	e01e      	b.n	8009504 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 80094cc:	e01a      	b.n	8009504 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80094ce:	f107 0208 	add.w	r2, r7, #8
 80094d2:	79fb      	ldrb	r3, [r7, #7]
 80094d4:	4619      	mov	r1, r3
 80094d6:	480e      	ldr	r0, [pc, #56]	@ (8009510 <USBH_ioctl+0xd4>)
 80094d8:	f000 fd7a 	bl	8009fd0 <USBH_MSC_GetLUNInfo>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d109      	bne.n	80094f6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80094e2:	8a3b      	ldrh	r3, [r7, #16]
 80094e4:	0a5b      	lsrs	r3, r3, #9
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	461a      	mov	r2, r3
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80094ee:	2300      	movs	r3, #0
 80094f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80094f4:	e006      	b.n	8009504 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 80094fc:	e002      	b.n	8009504 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80094fe:	2304      	movs	r3, #4
 8009500:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 8009504:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8009508:	4618      	mov	r0, r3
 800950a:	3740      	adds	r7, #64	@ 0x40
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	20001e7c 	.word	0x20001e7c

08009514 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009514:	b590      	push	{r4, r7, lr}
 8009516:	b089      	sub	sp, #36	@ 0x24
 8009518:	af04      	add	r7, sp, #16
 800951a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009522:	7919      	ldrb	r1, [r3, #4]
 8009524:	2350      	movs	r3, #80	@ 0x50
 8009526:	2206      	movs	r2, #6
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f001 fc68 	bl	800adfe <USBH_FindInterface>
 800952e:	4603      	mov	r3, r0
 8009530:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	2bff      	cmp	r3, #255	@ 0xff
 8009536:	d002      	beq.n	800953e <USBH_MSC_InterfaceInit+0x2a>
 8009538:	7bfb      	ldrb	r3, [r7, #15]
 800953a:	2b01      	cmp	r3, #1
 800953c:	d901      	bls.n	8009542 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800953e:	2302      	movs	r3, #2
 8009540:	e106      	b.n	8009750 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8009542:	7bfb      	ldrb	r3, [r7, #15]
 8009544:	4619      	mov	r1, r3
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f001 fc3d 	bl	800adc6 <USBH_SelectInterface>
 800954c:	4603      	mov	r3, r0
 800954e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009550:	7bbb      	ldrb	r3, [r7, #14]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d001      	beq.n	800955a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8009556:	2302      	movs	r3, #2
 8009558:	e0fa      	b.n	8009750 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009560:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009564:	f006 fde0 	bl	8010128 <malloc>
 8009568:	4603      	mov	r3, r0
 800956a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009572:	69db      	ldr	r3, [r3, #28]
 8009574:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d101      	bne.n	8009580 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800957c:	2302      	movs	r3, #2
 800957e:	e0e7      	b.n	8009750 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009580:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009584:	2100      	movs	r1, #0
 8009586:	68b8      	ldr	r0, [r7, #8]
 8009588:	f006 fe8c 	bl	80102a4 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800958c:	7bfb      	ldrb	r3, [r7, #15]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	211a      	movs	r1, #26
 8009592:	fb01 f303 	mul.w	r3, r1, r3
 8009596:	4413      	add	r3, r2
 8009598:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	b25b      	sxtb	r3, r3
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	da16      	bge.n	80095d2 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80095a4:	7bfb      	ldrb	r3, [r7, #15]
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	211a      	movs	r1, #26
 80095aa:	fb01 f303 	mul.w	r3, r1, r3
 80095ae:	4413      	add	r3, r2
 80095b0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80095b4:	781a      	ldrb	r2, [r3, #0]
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80095ba:	7bfb      	ldrb	r3, [r7, #15]
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	211a      	movs	r1, #26
 80095c0:	fb01 f303 	mul.w	r3, r1, r3
 80095c4:	4413      	add	r3, r2
 80095c6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80095ca:	881a      	ldrh	r2, [r3, #0]
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	815a      	strh	r2, [r3, #10]
 80095d0:	e015      	b.n	80095fe <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80095d2:	7bfb      	ldrb	r3, [r7, #15]
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	211a      	movs	r1, #26
 80095d8:	fb01 f303 	mul.w	r3, r1, r3
 80095dc:	4413      	add	r3, r2
 80095de:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80095e2:	781a      	ldrb	r2, [r3, #0]
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80095e8:	7bfb      	ldrb	r3, [r7, #15]
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	211a      	movs	r1, #26
 80095ee:	fb01 f303 	mul.w	r3, r1, r3
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80095f8:	881a      	ldrh	r2, [r3, #0]
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80095fe:	7bfb      	ldrb	r3, [r7, #15]
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	211a      	movs	r1, #26
 8009604:	fb01 f303 	mul.w	r3, r1, r3
 8009608:	4413      	add	r3, r2
 800960a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	b25b      	sxtb	r3, r3
 8009612:	2b00      	cmp	r3, #0
 8009614:	da16      	bge.n	8009644 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009616:	7bfb      	ldrb	r3, [r7, #15]
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	211a      	movs	r1, #26
 800961c:	fb01 f303 	mul.w	r3, r1, r3
 8009620:	4413      	add	r3, r2
 8009622:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009626:	781a      	ldrb	r2, [r3, #0]
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800962c:	7bfb      	ldrb	r3, [r7, #15]
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	211a      	movs	r1, #26
 8009632:	fb01 f303 	mul.w	r3, r1, r3
 8009636:	4413      	add	r3, r2
 8009638:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800963c:	881a      	ldrh	r2, [r3, #0]
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	815a      	strh	r2, [r3, #10]
 8009642:	e015      	b.n	8009670 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009644:	7bfb      	ldrb	r3, [r7, #15]
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	211a      	movs	r1, #26
 800964a:	fb01 f303 	mul.w	r3, r1, r3
 800964e:	4413      	add	r3, r2
 8009650:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009654:	781a      	ldrb	r2, [r3, #0]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800965a:	7bfb      	ldrb	r3, [r7, #15]
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	211a      	movs	r1, #26
 8009660:	fb01 f303 	mul.w	r3, r1, r3
 8009664:	4413      	add	r3, r2
 8009666:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800966a:	881a      	ldrh	r2, [r3, #0]
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	2200      	movs	r2, #0
 8009674:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	2200      	movs	r2, #0
 800967a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	2200      	movs	r2, #0
 8009680:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	799b      	ldrb	r3, [r3, #6]
 8009686:	4619      	mov	r1, r3
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f002 fec4 	bl	800c416 <USBH_AllocPipe>
 800968e:	4603      	mov	r3, r0
 8009690:	461a      	mov	r2, r3
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	79db      	ldrb	r3, [r3, #7]
 800969a:	4619      	mov	r1, r3
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f002 feba 	bl	800c416 <USBH_AllocPipe>
 80096a2:	4603      	mov	r3, r0
 80096a4:	461a      	mov	r2, r3
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 fdc2 	bl	800a234 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	799b      	ldrb	r3, [r3, #6]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d01e      	beq.n	80096f6 <USBH_MSC_InterfaceInit+0x1e2>
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	891b      	ldrh	r3, [r3, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d01a      	beq.n	80096f6 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	7959      	ldrb	r1, [r3, #5]
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	7998      	ldrb	r0, [r3, #6]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	8912      	ldrh	r2, [r2, #8]
 80096d8:	9202      	str	r2, [sp, #8]
 80096da:	2202      	movs	r2, #2
 80096dc:	9201      	str	r2, [sp, #4]
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	4623      	mov	r3, r4
 80096e2:	4602      	mov	r2, r0
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f002 fe67 	bl	800c3b8 <USBH_OpenPipe>
 80096ea:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	79db      	ldrb	r3, [r3, #7]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d02c      	beq.n	800974e <USBH_MSC_InterfaceInit+0x23a>
 80096f4:	e001      	b.n	80096fa <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 80096f6:	2303      	movs	r3, #3
 80096f8:	e02a      	b.n	8009750 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	895b      	ldrh	r3, [r3, #10]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d025      	beq.n	800974e <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	7919      	ldrb	r1, [r3, #4]
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	79d8      	ldrb	r0, [r3, #7]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	8952      	ldrh	r2, [r2, #10]
 800971a:	9202      	str	r2, [sp, #8]
 800971c:	2202      	movs	r2, #2
 800971e:	9201      	str	r2, [sp, #4]
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	4623      	mov	r3, r4
 8009724:	4602      	mov	r2, r0
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f002 fe46 	bl	800c3b8 <USBH_OpenPipe>
 800972c:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	791b      	ldrb	r3, [r3, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	4619      	mov	r1, r3
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f006 fc42 	bl	800ffc0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	795b      	ldrb	r3, [r3, #5]
 8009740:	2200      	movs	r2, #0
 8009742:	4619      	mov	r1, r3
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f006 fc3b 	bl	800ffc0 <USBH_LL_SetToggle>

  return USBH_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	e000      	b.n	8009750 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800974e:	2303      	movs	r3, #3
}
 8009750:	4618      	mov	r0, r3
 8009752:	3714      	adds	r7, #20
 8009754:	46bd      	mov	sp, r7
 8009756:	bd90      	pop	{r4, r7, pc}

08009758 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009766:	69db      	ldr	r3, [r3, #28]
 8009768:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	795b      	ldrb	r3, [r3, #5]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00e      	beq.n	8009790 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	795b      	ldrb	r3, [r3, #5]
 8009776:	4619      	mov	r1, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f002 fe3c 	bl	800c3f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	795b      	ldrb	r3, [r3, #5]
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f002 fe67 	bl	800c458 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	791b      	ldrb	r3, [r3, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00e      	beq.n	80097b6 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	791b      	ldrb	r3, [r3, #4]
 800979c:	4619      	mov	r1, r3
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f002 fe29 	bl	800c3f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	791b      	ldrb	r3, [r3, #4]
 80097a8:	4619      	mov	r1, r3
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f002 fe54 	bl	800c458 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097bc:	69db      	ldr	r3, [r3, #28]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00b      	beq.n	80097da <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097c8:	69db      	ldr	r3, [r3, #28]
 80097ca:	4618      	mov	r0, r3
 80097cc:	f006 fcb4 	bl	8010138 <free>
    phost->pActiveClass->pData = 0U;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097d6:	2200      	movs	r2, #0
 80097d8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097f2:	69db      	ldr	r3, [r3, #28]
 80097f4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80097f6:	2301      	movs	r3, #1
 80097f8:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	7b9b      	ldrb	r3, [r3, #14]
 80097fe:	2b03      	cmp	r3, #3
 8009800:	d041      	beq.n	8009886 <USBH_MSC_ClassRequest+0xa2>
 8009802:	2b03      	cmp	r3, #3
 8009804:	dc4b      	bgt.n	800989e <USBH_MSC_ClassRequest+0xba>
 8009806:	2b00      	cmp	r3, #0
 8009808:	d001      	beq.n	800980e <USBH_MSC_ClassRequest+0x2a>
 800980a:	2b02      	cmp	r3, #2
 800980c:	d147      	bne.n	800989e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	4619      	mov	r1, r3
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fcef 	bl	800a1f6 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009818:	4603      	mov	r3, r0
 800981a:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800981c:	7bfb      	ldrb	r3, [r7, #15]
 800981e:	2b03      	cmp	r3, #3
 8009820:	d104      	bne.n	800982c <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2200      	movs	r2, #0
 8009826:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800982c:	7bfb      	ldrb	r3, [r7, #15]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d137      	bne.n	80098a2 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	2b02      	cmp	r3, #2
 8009838:	d804      	bhi.n	8009844 <USBH_MSC_ClassRequest+0x60>
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	3301      	adds	r3, #1
 8009840:	b2da      	uxtb	r2, r3
 8009842:	e000      	b.n	8009846 <USBH_MSC_ClassRequest+0x62>
 8009844:	2202      	movs	r2, #2
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800984a:	2300      	movs	r3, #0
 800984c:	73bb      	strb	r3, [r7, #14]
 800984e:	e014      	b.n	800987a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009850:	7bbb      	ldrb	r3, [r7, #14]
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	2134      	movs	r1, #52	@ 0x34
 8009856:	fb01 f303 	mul.w	r3, r1, r3
 800985a:	4413      	add	r3, r2
 800985c:	3392      	adds	r3, #146	@ 0x92
 800985e:	2202      	movs	r2, #2
 8009860:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009862:	7bbb      	ldrb	r3, [r7, #14]
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	2134      	movs	r1, #52	@ 0x34
 8009868:	fb01 f303 	mul.w	r3, r1, r3
 800986c:	4413      	add	r3, r2
 800986e:	33c1      	adds	r3, #193	@ 0xc1
 8009870:	2200      	movs	r2, #0
 8009872:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009874:	7bbb      	ldrb	r3, [r7, #14]
 8009876:	3301      	adds	r3, #1
 8009878:	73bb      	strb	r3, [r7, #14]
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	7bba      	ldrb	r2, [r7, #14]
 8009880:	429a      	cmp	r2, r3
 8009882:	d3e5      	bcc.n	8009850 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8009884:	e00d      	b.n	80098a2 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009886:	2100      	movs	r1, #0
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f002 f87e 	bl	800b98a <USBH_ClrFeature>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d108      	bne.n	80098a6 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	7bda      	ldrb	r2, [r3, #15]
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	739a      	strb	r2, [r3, #14]
      }
      break;
 800989c:	e003      	b.n	80098a6 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800989e:	bf00      	nop
 80098a0:	e002      	b.n	80098a8 <USBH_MSC_ClassRequest+0xc4>
      break;
 80098a2:	bf00      	nop
 80098a4:	e000      	b.n	80098a8 <USBH_MSC_ClassRequest+0xc4>
      break;
 80098a6:	bf00      	nop
  }

  return status;
 80098a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
	...

080098b4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80098c2:	69db      	ldr	r3, [r3, #28]
 80098c4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80098c6:	2301      	movs	r3, #1
 80098c8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80098ca:	2301      	movs	r3, #1
 80098cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80098ce:	2301      	movs	r3, #1
 80098d0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	7b1b      	ldrb	r3, [r3, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d003      	beq.n	80098e2 <USBH_MSC_Process+0x2e>
 80098da:	2b01      	cmp	r3, #1
 80098dc:	f000 826f 	beq.w	8009dbe <USBH_MSC_Process+0x50a>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80098e0:	e270      	b.n	8009dc4 <USBH_MSC_Process+0x510>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	7812      	ldrb	r2, [r2, #0]
 80098ec:	4293      	cmp	r3, r2
 80098ee:	f080 824e 	bcs.w	8009d8e <USBH_MSC_Process+0x4da>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80098f8:	4619      	mov	r1, r3
 80098fa:	693a      	ldr	r2, [r7, #16]
 80098fc:	2334      	movs	r3, #52	@ 0x34
 80098fe:	fb01 f303 	mul.w	r3, r1, r3
 8009902:	4413      	add	r3, r2
 8009904:	3391      	adds	r3, #145	@ 0x91
 8009906:	2201      	movs	r2, #1
 8009908:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009910:	4619      	mov	r1, r3
 8009912:	693a      	ldr	r2, [r7, #16]
 8009914:	2334      	movs	r3, #52	@ 0x34
 8009916:	fb01 f303 	mul.w	r3, r1, r3
 800991a:	4413      	add	r3, r2
 800991c:	3390      	adds	r3, #144	@ 0x90
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	2b08      	cmp	r3, #8
 8009922:	f200 8242 	bhi.w	8009daa <USBH_MSC_Process+0x4f6>
 8009926:	a201      	add	r2, pc, #4	@ (adr r2, 800992c <USBH_MSC_Process+0x78>)
 8009928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992c:	08009951 	.word	0x08009951
 8009930:	08009dab 	.word	0x08009dab
 8009934:	08009a19 	.word	0x08009a19
 8009938:	08009b9d 	.word	0x08009b9d
 800993c:	08009977 	.word	0x08009977
 8009940:	08009c69 	.word	0x08009c69
 8009944:	08009dab 	.word	0x08009dab
 8009948:	08009dab 	.word	0x08009dab
 800994c:	08009d7d 	.word	0x08009d7d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009956:	4619      	mov	r1, r3
 8009958:	693a      	ldr	r2, [r7, #16]
 800995a:	2334      	movs	r3, #52	@ 0x34
 800995c:	fb01 f303 	mul.w	r3, r1, r3
 8009960:	4413      	add	r3, r2
 8009962:	3390      	adds	r3, #144	@ 0x90
 8009964:	2204      	movs	r2, #4
 8009966:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
            break;
 8009974:	e222      	b.n	8009dbc <USBH_MSC_Process+0x508>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800997c:	b2d9      	uxtb	r1, r3
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009984:	461a      	mov	r2, r3
 8009986:	2334      	movs	r3, #52	@ 0x34
 8009988:	fb02 f303 	mul.w	r3, r2, r3
 800998c:	3398      	adds	r3, #152	@ 0x98
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	4413      	add	r3, r2
 8009992:	3307      	adds	r3, #7
 8009994:	461a      	mov	r2, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 ff69 	bl	800a86e <USBH_MSC_SCSI_Inquiry>
 800999c:	4603      	mov	r3, r0
 800999e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80099a0:	7bfb      	ldrb	r3, [r7, #15]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10b      	bne.n	80099be <USBH_MSC_Process+0x10a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80099ac:	4619      	mov	r1, r3
 80099ae:	693a      	ldr	r2, [r7, #16]
 80099b0:	2334      	movs	r3, #52	@ 0x34
 80099b2:	fb01 f303 	mul.w	r3, r1, r3
 80099b6:	4413      	add	r3, r2
 80099b8:	3390      	adds	r3, #144	@ 0x90
 80099ba:	2202      	movs	r2, #2
 80099bc:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d10c      	bne.n	80099de <USBH_MSC_Process+0x12a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80099ca:	4619      	mov	r1, r3
 80099cc:	693a      	ldr	r2, [r7, #16]
 80099ce:	2334      	movs	r3, #52	@ 0x34
 80099d0:	fb01 f303 	mul.w	r3, r1, r3
 80099d4:	4413      	add	r3, r2
 80099d6:	3390      	adds	r3, #144	@ 0x90
 80099d8:	2205      	movs	r2, #5
 80099da:	701a      	strb	r2, [r3, #0]
            break;
 80099dc:	e1e7      	b.n	8009dae <USBH_MSC_Process+0x4fa>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80099de:	7bfb      	ldrb	r3, [r7, #15]
 80099e0:	2b04      	cmp	r3, #4
 80099e2:	f040 81e4 	bne.w	8009dae <USBH_MSC_Process+0x4fa>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80099ec:	4619      	mov	r1, r3
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	2334      	movs	r3, #52	@ 0x34
 80099f2:	fb01 f303 	mul.w	r3, r1, r3
 80099f6:	4413      	add	r3, r2
 80099f8:	3390      	adds	r3, #144	@ 0x90
 80099fa:	2201      	movs	r2, #1
 80099fc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009a04:	4619      	mov	r1, r3
 8009a06:	693a      	ldr	r2, [r7, #16]
 8009a08:	2334      	movs	r3, #52	@ 0x34
 8009a0a:	fb01 f303 	mul.w	r3, r1, r3
 8009a0e:	4413      	add	r3, r2
 8009a10:	3391      	adds	r3, #145	@ 0x91
 8009a12:	2202      	movs	r2, #2
 8009a14:	701a      	strb	r2, [r3, #0]
            break;
 8009a16:	e1ca      	b.n	8009dae <USBH_MSC_Process+0x4fa>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fe66 	bl	800a6f4 <USBH_MSC_SCSI_TestUnitReady>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d149      	bne.n	8009ac6 <USBH_MSC_Process+0x212>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009a38:	4619      	mov	r1, r3
 8009a3a:	693a      	ldr	r2, [r7, #16]
 8009a3c:	2334      	movs	r3, #52	@ 0x34
 8009a3e:	fb01 f303 	mul.w	r3, r1, r3
 8009a42:	4413      	add	r3, r2
 8009a44:	3392      	adds	r3, #146	@ 0x92
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00c      	beq.n	8009a66 <USBH_MSC_Process+0x1b2>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009a52:	4619      	mov	r1, r3
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	2334      	movs	r3, #52	@ 0x34
 8009a58:	fb01 f303 	mul.w	r3, r1, r3
 8009a5c:	4413      	add	r3, r2
 8009a5e:	33c1      	adds	r3, #193	@ 0xc1
 8009a60:	2201      	movs	r2, #1
 8009a62:	701a      	strb	r2, [r3, #0]
 8009a64:	e00b      	b.n	8009a7e <USBH_MSC_Process+0x1ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	693a      	ldr	r2, [r7, #16]
 8009a70:	2334      	movs	r3, #52	@ 0x34
 8009a72:	fb01 f303 	mul.w	r3, r1, r3
 8009a76:	4413      	add	r3, r2
 8009a78:	33c1      	adds	r3, #193	@ 0xc1
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009a84:	4619      	mov	r1, r3
 8009a86:	693a      	ldr	r2, [r7, #16]
 8009a88:	2334      	movs	r3, #52	@ 0x34
 8009a8a:	fb01 f303 	mul.w	r3, r1, r3
 8009a8e:	4413      	add	r3, r2
 8009a90:	3390      	adds	r3, #144	@ 0x90
 8009a92:	2203      	movs	r2, #3
 8009a94:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	693a      	ldr	r2, [r7, #16]
 8009aa0:	2334      	movs	r3, #52	@ 0x34
 8009aa2:	fb01 f303 	mul.w	r3, r1, r3
 8009aa6:	4413      	add	r3, r2
 8009aa8:	3391      	adds	r3, #145	@ 0x91
 8009aaa:	2200      	movs	r2, #0
 8009aac:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	693a      	ldr	r2, [r7, #16]
 8009ab8:	2334      	movs	r3, #52	@ 0x34
 8009aba:	fb01 f303 	mul.w	r3, r1, r3
 8009abe:	4413      	add	r3, r2
 8009ac0:	3392      	adds	r3, #146	@ 0x92
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009ac6:	7bbb      	ldrb	r3, [r7, #14]
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d14a      	bne.n	8009b62 <USBH_MSC_Process+0x2ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	693a      	ldr	r2, [r7, #16]
 8009ad6:	2334      	movs	r3, #52	@ 0x34
 8009ad8:	fb01 f303 	mul.w	r3, r1, r3
 8009adc:	4413      	add	r3, r2
 8009ade:	3392      	adds	r3, #146	@ 0x92
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d00c      	beq.n	8009b00 <USBH_MSC_Process+0x24c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009aec:	4619      	mov	r1, r3
 8009aee:	693a      	ldr	r2, [r7, #16]
 8009af0:	2334      	movs	r3, #52	@ 0x34
 8009af2:	fb01 f303 	mul.w	r3, r1, r3
 8009af6:	4413      	add	r3, r2
 8009af8:	33c1      	adds	r3, #193	@ 0xc1
 8009afa:	2201      	movs	r2, #1
 8009afc:	701a      	strb	r2, [r3, #0]
 8009afe:	e00b      	b.n	8009b18 <USBH_MSC_Process+0x264>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009b06:	4619      	mov	r1, r3
 8009b08:	693a      	ldr	r2, [r7, #16]
 8009b0a:	2334      	movs	r3, #52	@ 0x34
 8009b0c:	fb01 f303 	mul.w	r3, r1, r3
 8009b10:	4413      	add	r3, r2
 8009b12:	33c1      	adds	r3, #193	@ 0xc1
 8009b14:	2200      	movs	r2, #0
 8009b16:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009b1e:	4619      	mov	r1, r3
 8009b20:	693a      	ldr	r2, [r7, #16]
 8009b22:	2334      	movs	r3, #52	@ 0x34
 8009b24:	fb01 f303 	mul.w	r3, r1, r3
 8009b28:	4413      	add	r3, r2
 8009b2a:	3390      	adds	r3, #144	@ 0x90
 8009b2c:	2205      	movs	r2, #5
 8009b2e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009b36:	4619      	mov	r1, r3
 8009b38:	693a      	ldr	r2, [r7, #16]
 8009b3a:	2334      	movs	r3, #52	@ 0x34
 8009b3c:	fb01 f303 	mul.w	r3, r1, r3
 8009b40:	4413      	add	r3, r2
 8009b42:	3391      	adds	r3, #145	@ 0x91
 8009b44:	2201      	movs	r2, #1
 8009b46:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009b4e:	4619      	mov	r1, r3
 8009b50:	693a      	ldr	r2, [r7, #16]
 8009b52:	2334      	movs	r3, #52	@ 0x34
 8009b54:	fb01 f303 	mul.w	r3, r1, r3
 8009b58:	4413      	add	r3, r2
 8009b5a:	3392      	adds	r3, #146	@ 0x92
 8009b5c:	2202      	movs	r2, #2
 8009b5e:	701a      	strb	r2, [r3, #0]
            break;
 8009b60:	e127      	b.n	8009db2 <USBH_MSC_Process+0x4fe>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009b62:	7bbb      	ldrb	r3, [r7, #14]
 8009b64:	2b04      	cmp	r3, #4
 8009b66:	f040 8124 	bne.w	8009db2 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009b70:	4619      	mov	r1, r3
 8009b72:	693a      	ldr	r2, [r7, #16]
 8009b74:	2334      	movs	r3, #52	@ 0x34
 8009b76:	fb01 f303 	mul.w	r3, r1, r3
 8009b7a:	4413      	add	r3, r2
 8009b7c:	3390      	adds	r3, #144	@ 0x90
 8009b7e:	2201      	movs	r2, #1
 8009b80:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009b88:	4619      	mov	r1, r3
 8009b8a:	693a      	ldr	r2, [r7, #16]
 8009b8c:	2334      	movs	r3, #52	@ 0x34
 8009b8e:	fb01 f303 	mul.w	r3, r1, r3
 8009b92:	4413      	add	r3, r2
 8009b94:	3391      	adds	r3, #145	@ 0x91
 8009b96:	2202      	movs	r2, #2
 8009b98:	701a      	strb	r2, [r3, #0]
            break;
 8009b9a:	e10a      	b.n	8009db2 <USBH_MSC_Process+0x4fe>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009ba2:	b2d9      	uxtb	r1, r3
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009baa:	461a      	mov	r2, r3
 8009bac:	2334      	movs	r3, #52	@ 0x34
 8009bae:	fb02 f303 	mul.w	r3, r2, r3
 8009bb2:	3390      	adds	r3, #144	@ 0x90
 8009bb4:	693a      	ldr	r2, [r7, #16]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	3304      	adds	r3, #4
 8009bba:	461a      	mov	r2, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 fddc 	bl	800a77a <USBH_MSC_SCSI_ReadCapacity>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009bc6:	7bfb      	ldrb	r3, [r7, #15]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d120      	bne.n	8009c0e <USBH_MSC_Process+0x35a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	2334      	movs	r3, #52	@ 0x34
 8009bd8:	fb01 f303 	mul.w	r3, r1, r3
 8009bdc:	4413      	add	r3, r2
 8009bde:	3390      	adds	r3, #144	@ 0x90
 8009be0:	2201      	movs	r2, #1
 8009be2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009bea:	4619      	mov	r1, r3
 8009bec:	693a      	ldr	r2, [r7, #16]
 8009bee:	2334      	movs	r3, #52	@ 0x34
 8009bf0:	fb01 f303 	mul.w	r3, r1, r3
 8009bf4:	4413      	add	r3, r2
 8009bf6:	3391      	adds	r3, #145	@ 0x91
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009c02:	3301      	adds	r3, #1
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8009c0c:	e0d3      	b.n	8009db6 <USBH_MSC_Process+0x502>
            else if (scsi_status == USBH_FAIL)
 8009c0e:	7bfb      	ldrb	r3, [r7, #15]
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	d10c      	bne.n	8009c2e <USBH_MSC_Process+0x37a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	2334      	movs	r3, #52	@ 0x34
 8009c20:	fb01 f303 	mul.w	r3, r1, r3
 8009c24:	4413      	add	r3, r2
 8009c26:	3390      	adds	r3, #144	@ 0x90
 8009c28:	2205      	movs	r2, #5
 8009c2a:	701a      	strb	r2, [r3, #0]
            break;
 8009c2c:	e0c3      	b.n	8009db6 <USBH_MSC_Process+0x502>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009c2e:	7bfb      	ldrb	r3, [r7, #15]
 8009c30:	2b04      	cmp	r3, #4
 8009c32:	f040 80c0 	bne.w	8009db6 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	693a      	ldr	r2, [r7, #16]
 8009c40:	2334      	movs	r3, #52	@ 0x34
 8009c42:	fb01 f303 	mul.w	r3, r1, r3
 8009c46:	4413      	add	r3, r2
 8009c48:	3390      	adds	r3, #144	@ 0x90
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009c54:	4619      	mov	r1, r3
 8009c56:	693a      	ldr	r2, [r7, #16]
 8009c58:	2334      	movs	r3, #52	@ 0x34
 8009c5a:	fb01 f303 	mul.w	r3, r1, r3
 8009c5e:	4413      	add	r3, r2
 8009c60:	3391      	adds	r3, #145	@ 0x91
 8009c62:	2202      	movs	r2, #2
 8009c64:	701a      	strb	r2, [r3, #0]
            break;
 8009c66:	e0a6      	b.n	8009db6 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009c6e:	b2d9      	uxtb	r1, r3
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009c76:	461a      	mov	r2, r3
 8009c78:	2334      	movs	r3, #52	@ 0x34
 8009c7a:	fb02 f303 	mul.w	r3, r2, r3
 8009c7e:	3398      	adds	r3, #152	@ 0x98
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	4413      	add	r3, r2
 8009c84:	3304      	adds	r3, #4
 8009c86:	461a      	mov	r2, r3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fe95 	bl	800a9b8 <USBH_MSC_SCSI_RequestSense>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d145      	bne.n	8009d24 <USBH_MSC_Process+0x470>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	2334      	movs	r3, #52	@ 0x34
 8009ca4:	fb01 f303 	mul.w	r3, r1, r3
 8009ca8:	4413      	add	r3, r2
 8009caa:	339c      	adds	r3, #156	@ 0x9c
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	2b06      	cmp	r3, #6
 8009cb0:	d00c      	beq.n	8009ccc <USBH_MSC_Process+0x418>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009cb8:	4619      	mov	r1, r3
 8009cba:	693a      	ldr	r2, [r7, #16]
 8009cbc:	2334      	movs	r3, #52	@ 0x34
 8009cbe:	fb01 f303 	mul.w	r3, r1, r3
 8009cc2:	4413      	add	r3, r2
 8009cc4:	339c      	adds	r3, #156	@ 0x9c
 8009cc6:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d117      	bne.n	8009cfc <USBH_MSC_Process+0x448>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	f242 720f 	movw	r2, #9999	@ 0x270f
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d80c      	bhi.n	8009cfc <USBH_MSC_Process+0x448>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009ce8:	4619      	mov	r1, r3
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	2334      	movs	r3, #52	@ 0x34
 8009cee:	fb01 f303 	mul.w	r3, r1, r3
 8009cf2:	4413      	add	r3, r2
 8009cf4:	3390      	adds	r3, #144	@ 0x90
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	701a      	strb	r2, [r3, #0]
                  break;
 8009cfa:	e05f      	b.n	8009dbc <USBH_MSC_Process+0x508>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009d02:	4619      	mov	r1, r3
 8009d04:	693a      	ldr	r2, [r7, #16]
 8009d06:	2334      	movs	r3, #52	@ 0x34
 8009d08:	fb01 f303 	mul.w	r3, r1, r3
 8009d0c:	4413      	add	r3, r2
 8009d0e:	3390      	adds	r3, #144	@ 0x90
 8009d10:	2201      	movs	r2, #1
 8009d12:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            if (scsi_status == USBH_FAIL)
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d10c      	bne.n	8009d44 <USBH_MSC_Process+0x490>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009d30:	4619      	mov	r1, r3
 8009d32:	693a      	ldr	r2, [r7, #16]
 8009d34:	2334      	movs	r3, #52	@ 0x34
 8009d36:	fb01 f303 	mul.w	r3, r1, r3
 8009d3a:	4413      	add	r3, r2
 8009d3c:	3390      	adds	r3, #144	@ 0x90
 8009d3e:	2208      	movs	r2, #8
 8009d40:	701a      	strb	r2, [r3, #0]
            break;
 8009d42:	e03a      	b.n	8009dba <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009d44:	7bfb      	ldrb	r3, [r7, #15]
 8009d46:	2b04      	cmp	r3, #4
 8009d48:	d137      	bne.n	8009dba <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009d50:	4619      	mov	r1, r3
 8009d52:	693a      	ldr	r2, [r7, #16]
 8009d54:	2334      	movs	r3, #52	@ 0x34
 8009d56:	fb01 f303 	mul.w	r3, r1, r3
 8009d5a:	4413      	add	r3, r2
 8009d5c:	3390      	adds	r3, #144	@ 0x90
 8009d5e:	2201      	movs	r2, #1
 8009d60:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009d68:	4619      	mov	r1, r3
 8009d6a:	693a      	ldr	r2, [r7, #16]
 8009d6c:	2334      	movs	r3, #52	@ 0x34
 8009d6e:	fb01 f303 	mul.w	r3, r1, r3
 8009d72:	4413      	add	r3, r2
 8009d74:	3391      	adds	r3, #145	@ 0x91
 8009d76:	2202      	movs	r2, #2
 8009d78:	701a      	strb	r2, [r3, #0]
            break;
 8009d7a:	e01e      	b.n	8009dba <USBH_MSC_Process+0x506>
            MSC_Handle->current_lun++;
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009d82:	3301      	adds	r3, #1
 8009d84:	b29a      	uxth	r2, r3
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8009d8c:	e016      	b.n	8009dbc <USBH_MSC_Process+0x508>
        MSC_Handle->current_lun = 0U;
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	2200      	movs	r2, #0
 8009d92:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009da2:	2102      	movs	r1, #2
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	4798      	blx	r3
      break;
 8009da8:	e00c      	b.n	8009dc4 <USBH_MSC_Process+0x510>
            break;
 8009daa:	bf00      	nop
 8009dac:	e00a      	b.n	8009dc4 <USBH_MSC_Process+0x510>
            break;
 8009dae:	bf00      	nop
 8009db0:	e008      	b.n	8009dc4 <USBH_MSC_Process+0x510>
            break;
 8009db2:	bf00      	nop
 8009db4:	e006      	b.n	8009dc4 <USBH_MSC_Process+0x510>
            break;
 8009db6:	bf00      	nop
 8009db8:	e004      	b.n	8009dc4 <USBH_MSC_Process+0x510>
            break;
 8009dba:	bf00      	nop
      break;
 8009dbc:	e002      	b.n	8009dc4 <USBH_MSC_Process+0x510>
      error = USBH_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	75fb      	strb	r3, [r7, #23]
      break;
 8009dc2:	bf00      	nop
  }
  return error;
 8009dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3718      	adds	r7, #24
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop

08009dd0 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b088      	sub	sp, #32
 8009dea:	af02      	add	r7, sp, #8
 8009dec:	6078      	str	r0, [r7, #4]
 8009dee:	460b      	mov	r3, r1
 8009df0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009df8:	69db      	ldr	r3, [r3, #28]
 8009dfa:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8009e00:	2301      	movs	r3, #1
 8009e02:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8009e04:	78fb      	ldrb	r3, [r7, #3]
 8009e06:	693a      	ldr	r2, [r7, #16]
 8009e08:	2134      	movs	r1, #52	@ 0x34
 8009e0a:	fb01 f303 	mul.w	r3, r1, r3
 8009e0e:	4413      	add	r3, r2
 8009e10:	3390      	adds	r3, #144	@ 0x90
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	2b07      	cmp	r3, #7
 8009e16:	d03c      	beq.n	8009e92 <USBH_MSC_RdWrProcess+0xac>
 8009e18:	2b07      	cmp	r3, #7
 8009e1a:	f300 80a7 	bgt.w	8009f6c <USBH_MSC_RdWrProcess+0x186>
 8009e1e:	2b05      	cmp	r3, #5
 8009e20:	d06c      	beq.n	8009efc <USBH_MSC_RdWrProcess+0x116>
 8009e22:	2b06      	cmp	r3, #6
 8009e24:	f040 80a2 	bne.w	8009f6c <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8009e28:	78f9      	ldrb	r1, [r7, #3]
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	9300      	str	r3, [sp, #0]
 8009e2e:	2300      	movs	r3, #0
 8009e30:	2200      	movs	r2, #0
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 fea4 	bl	800ab80 <USBH_MSC_SCSI_Read>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009e3c:	7bfb      	ldrb	r3, [r7, #15]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d10b      	bne.n	8009e5a <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009e42:	78fb      	ldrb	r3, [r7, #3]
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	2134      	movs	r1, #52	@ 0x34
 8009e48:	fb01 f303 	mul.w	r3, r1, r3
 8009e4c:	4413      	add	r3, r2
 8009e4e:	3390      	adds	r3, #144	@ 0x90
 8009e50:	2201      	movs	r2, #1
 8009e52:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009e58:	e08a      	b.n	8009f70 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8009e5a:	7bfb      	ldrb	r3, [r7, #15]
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	d109      	bne.n	8009e74 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009e60:	78fb      	ldrb	r3, [r7, #3]
 8009e62:	693a      	ldr	r2, [r7, #16]
 8009e64:	2134      	movs	r1, #52	@ 0x34
 8009e66:	fb01 f303 	mul.w	r3, r1, r3
 8009e6a:	4413      	add	r3, r2
 8009e6c:	3390      	adds	r3, #144	@ 0x90
 8009e6e:	2205      	movs	r2, #5
 8009e70:	701a      	strb	r2, [r3, #0]
      break;
 8009e72:	e07d      	b.n	8009f70 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009e74:	7bfb      	ldrb	r3, [r7, #15]
 8009e76:	2b04      	cmp	r3, #4
 8009e78:	d17a      	bne.n	8009f70 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009e7a:	78fb      	ldrb	r3, [r7, #3]
 8009e7c:	693a      	ldr	r2, [r7, #16]
 8009e7e:	2134      	movs	r1, #52	@ 0x34
 8009e80:	fb01 f303 	mul.w	r3, r1, r3
 8009e84:	4413      	add	r3, r2
 8009e86:	3390      	adds	r3, #144	@ 0x90
 8009e88:	2208      	movs	r2, #8
 8009e8a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8009e90:	e06e      	b.n	8009f70 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009e92:	78f9      	ldrb	r1, [r7, #3]
 8009e94:	2300      	movs	r3, #0
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	2300      	movs	r3, #0
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 fe04 	bl	800aaaa <USBH_MSC_SCSI_Write>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009ea6:	7bfb      	ldrb	r3, [r7, #15]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d10b      	bne.n	8009ec4 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009eac:	78fb      	ldrb	r3, [r7, #3]
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	2134      	movs	r1, #52	@ 0x34
 8009eb2:	fb01 f303 	mul.w	r3, r1, r3
 8009eb6:	4413      	add	r3, r2
 8009eb8:	3390      	adds	r3, #144	@ 0x90
 8009eba:	2201      	movs	r2, #1
 8009ebc:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009ec2:	e057      	b.n	8009f74 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009ec4:	7bfb      	ldrb	r3, [r7, #15]
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d109      	bne.n	8009ede <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009eca:	78fb      	ldrb	r3, [r7, #3]
 8009ecc:	693a      	ldr	r2, [r7, #16]
 8009ece:	2134      	movs	r1, #52	@ 0x34
 8009ed0:	fb01 f303 	mul.w	r3, r1, r3
 8009ed4:	4413      	add	r3, r2
 8009ed6:	3390      	adds	r3, #144	@ 0x90
 8009ed8:	2205      	movs	r2, #5
 8009eda:	701a      	strb	r2, [r3, #0]
      break;
 8009edc:	e04a      	b.n	8009f74 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009ede:	7bfb      	ldrb	r3, [r7, #15]
 8009ee0:	2b04      	cmp	r3, #4
 8009ee2:	d147      	bne.n	8009f74 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009ee4:	78fb      	ldrb	r3, [r7, #3]
 8009ee6:	693a      	ldr	r2, [r7, #16]
 8009ee8:	2134      	movs	r1, #52	@ 0x34
 8009eea:	fb01 f303 	mul.w	r3, r1, r3
 8009eee:	4413      	add	r3, r2
 8009ef0:	3390      	adds	r3, #144	@ 0x90
 8009ef2:	2208      	movs	r2, #8
 8009ef4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009ef6:	2302      	movs	r3, #2
 8009ef8:	75fb      	strb	r3, [r7, #23]
      break;
 8009efa:	e03b      	b.n	8009f74 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009efc:	78fb      	ldrb	r3, [r7, #3]
 8009efe:	2234      	movs	r2, #52	@ 0x34
 8009f00:	fb02 f303 	mul.w	r3, r2, r3
 8009f04:	3398      	adds	r3, #152	@ 0x98
 8009f06:	693a      	ldr	r2, [r7, #16]
 8009f08:	4413      	add	r3, r2
 8009f0a:	1d1a      	adds	r2, r3, #4
 8009f0c:	78fb      	ldrb	r3, [r7, #3]
 8009f0e:	4619      	mov	r1, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fd51 	bl	800a9b8 <USBH_MSC_SCSI_RequestSense>
 8009f16:	4603      	mov	r3, r0
 8009f18:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009f1a:	7bfb      	ldrb	r3, [r7, #15]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d113      	bne.n	8009f48 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009f20:	78fb      	ldrb	r3, [r7, #3]
 8009f22:	693a      	ldr	r2, [r7, #16]
 8009f24:	2134      	movs	r1, #52	@ 0x34
 8009f26:	fb01 f303 	mul.w	r3, r1, r3
 8009f2a:	4413      	add	r3, r2
 8009f2c:	3390      	adds	r3, #144	@ 0x90
 8009f2e:	2201      	movs	r2, #1
 8009f30:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009f32:	78fb      	ldrb	r3, [r7, #3]
 8009f34:	693a      	ldr	r2, [r7, #16]
 8009f36:	2134      	movs	r1, #52	@ 0x34
 8009f38:	fb01 f303 	mul.w	r3, r1, r3
 8009f3c:	4413      	add	r3, r2
 8009f3e:	3391      	adds	r3, #145	@ 0x91
 8009f40:	2202      	movs	r2, #2
 8009f42:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009f44:	2302      	movs	r3, #2
 8009f46:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d014      	beq.n	8009f78 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009f4e:	7bfb      	ldrb	r3, [r7, #15]
 8009f50:	2b04      	cmp	r3, #4
 8009f52:	d111      	bne.n	8009f78 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009f54:	78fb      	ldrb	r3, [r7, #3]
 8009f56:	693a      	ldr	r2, [r7, #16]
 8009f58:	2134      	movs	r1, #52	@ 0x34
 8009f5a:	fb01 f303 	mul.w	r3, r1, r3
 8009f5e:	4413      	add	r3, r2
 8009f60:	3390      	adds	r3, #144	@ 0x90
 8009f62:	2208      	movs	r2, #8
 8009f64:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009f66:	2302      	movs	r3, #2
 8009f68:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009f6a:	e005      	b.n	8009f78 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8009f6c:	bf00      	nop
 8009f6e:	e004      	b.n	8009f7a <USBH_MSC_RdWrProcess+0x194>
      break;
 8009f70:	bf00      	nop
 8009f72:	e002      	b.n	8009f7a <USBH_MSC_RdWrProcess+0x194>
      break;
 8009f74:	bf00      	nop
 8009f76:	e000      	b.n	8009f7a <USBH_MSC_RdWrProcess+0x194>
      break;
 8009f78:	bf00      	nop

  }
  return error;
 8009f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3718      	adds	r7, #24
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f96:	69db      	ldr	r3, [r3, #28]
 8009f98:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	2b0b      	cmp	r3, #11
 8009fa2:	d10c      	bne.n	8009fbe <USBH_MSC_UnitIsReady+0x3a>
 8009fa4:	78fb      	ldrb	r3, [r7, #3]
 8009fa6:	68ba      	ldr	r2, [r7, #8]
 8009fa8:	2134      	movs	r1, #52	@ 0x34
 8009faa:	fb01 f303 	mul.w	r3, r1, r3
 8009fae:	4413      	add	r3, r2
 8009fb0:	3391      	adds	r3, #145	@ 0x91
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d102      	bne.n	8009fbe <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	73fb      	strb	r3, [r7, #15]
 8009fbc:	e001      	b.n	8009fc2 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3714      	adds	r7, #20
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	607a      	str	r2, [r7, #4]
 8009fdc:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009fe4:	69db      	ldr	r3, [r3, #28]
 8009fe6:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	2b0b      	cmp	r3, #11
 8009ff0:	d10d      	bne.n	800a00e <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009ff2:	7afb      	ldrb	r3, [r7, #11]
 8009ff4:	2234      	movs	r2, #52	@ 0x34
 8009ff6:	fb02 f303 	mul.w	r3, r2, r3
 8009ffa:	3390      	adds	r3, #144	@ 0x90
 8009ffc:	697a      	ldr	r2, [r7, #20]
 8009ffe:	4413      	add	r3, r2
 800a000:	2234      	movs	r2, #52	@ 0x34
 800a002:	4619      	mov	r1, r3
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f006 f9bb 	bl	8010380 <memcpy>
    return USBH_OK;
 800a00a:	2300      	movs	r3, #0
 800a00c:	e000      	b.n	800a010 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800a00e:	2302      	movs	r3, #2
  }
}
 800a010:	4618      	mov	r0, r3
 800a012:	3718      	adds	r7, #24
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b088      	sub	sp, #32
 800a01c:	af02      	add	r7, sp, #8
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	607a      	str	r2, [r7, #4]
 800a022:	603b      	str	r3, [r7, #0]
 800a024:	460b      	mov	r3, r1
 800a026:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a02e:	69db      	ldr	r3, [r3, #28]
 800a030:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00e      	beq.n	800a05c <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a044:	2b0b      	cmp	r3, #11
 800a046:	d109      	bne.n	800a05c <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a048:	7afb      	ldrb	r3, [r7, #11]
 800a04a:	697a      	ldr	r2, [r7, #20]
 800a04c:	2134      	movs	r1, #52	@ 0x34
 800a04e:	fb01 f303 	mul.w	r3, r1, r3
 800a052:	4413      	add	r3, r2
 800a054:	3390      	adds	r3, #144	@ 0x90
 800a056:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d001      	beq.n	800a060 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800a05c:	2302      	movs	r3, #2
 800a05e:	e040      	b.n	800a0e2 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	2206      	movs	r2, #6
 800a064:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800a066:	7afb      	ldrb	r3, [r7, #11]
 800a068:	697a      	ldr	r2, [r7, #20]
 800a06a:	2134      	movs	r1, #52	@ 0x34
 800a06c:	fb01 f303 	mul.w	r3, r1, r3
 800a070:	4413      	add	r3, r2
 800a072:	3390      	adds	r3, #144	@ 0x90
 800a074:	2206      	movs	r2, #6
 800a076:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a078:	7afb      	ldrb	r3, [r7, #11]
 800a07a:	b29a      	uxth	r2, r3
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a082:	7af9      	ldrb	r1, [r7, #11]
 800a084:	6a3b      	ldr	r3, [r7, #32]
 800a086:	9300      	str	r3, [sp, #0]
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f000 fd77 	bl	800ab80 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a098:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a09a:	e016      	b.n	800a0ca <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	1ad2      	subs	r2, r2, r3
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	f242 7110 	movw	r1, #10000	@ 0x2710
 800a0ac:	fb01 f303 	mul.w	r3, r1, r3
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d805      	bhi.n	800a0c0 <USBH_MSC_Read+0xa8>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d104      	bne.n	800a0ca <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	e00b      	b.n	800a0e2 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a0ca:	7afb      	ldrb	r3, [r7, #11]
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f7ff fe89 	bl	8009de6 <USBH_MSC_RdWrProcess>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d0e0      	beq.n	800a09c <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3718      	adds	r7, #24
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b088      	sub	sp, #32
 800a0ee:	af02      	add	r7, sp, #8
 800a0f0:	60f8      	str	r0, [r7, #12]
 800a0f2:	607a      	str	r2, [r7, #4]
 800a0f4:	603b      	str	r3, [r7, #0]
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a100:	69db      	ldr	r3, [r3, #28]
 800a102:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00e      	beq.n	800a12e <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a116:	2b0b      	cmp	r3, #11
 800a118:	d109      	bne.n	800a12e <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a11a:	7afb      	ldrb	r3, [r7, #11]
 800a11c:	697a      	ldr	r2, [r7, #20]
 800a11e:	2134      	movs	r1, #52	@ 0x34
 800a120:	fb01 f303 	mul.w	r3, r1, r3
 800a124:	4413      	add	r3, r2
 800a126:	3390      	adds	r3, #144	@ 0x90
 800a128:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d001      	beq.n	800a132 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800a12e:	2302      	movs	r3, #2
 800a130:	e040      	b.n	800a1b4 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	2207      	movs	r2, #7
 800a136:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a138:	7afb      	ldrb	r3, [r7, #11]
 800a13a:	697a      	ldr	r2, [r7, #20]
 800a13c:	2134      	movs	r1, #52	@ 0x34
 800a13e:	fb01 f303 	mul.w	r3, r1, r3
 800a142:	4413      	add	r3, r2
 800a144:	3390      	adds	r3, #144	@ 0x90
 800a146:	2207      	movs	r2, #7
 800a148:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a14a:	7afb      	ldrb	r3, [r7, #11]
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a154:	7af9      	ldrb	r1, [r7, #11]
 800a156:	6a3b      	ldr	r3, [r7, #32]
 800a158:	9300      	str	r3, [sp, #0]
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f000 fca3 	bl	800aaaa <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a16a:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a16c:	e016      	b.n	800a19c <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	1ad2      	subs	r2, r2, r3
 800a178:	6a3b      	ldr	r3, [r7, #32]
 800a17a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800a17e:	fb01 f303 	mul.w	r3, r1, r3
 800a182:	429a      	cmp	r2, r3
 800a184:	d805      	bhi.n	800a192 <USBH_MSC_Write+0xa8>
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d104      	bne.n	800a19c <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	2201      	movs	r2, #1
 800a196:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a198:	2302      	movs	r3, #2
 800a19a:	e00b      	b.n	800a1b4 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a19c:	7afb      	ldrb	r3, [r7, #11]
 800a19e:	4619      	mov	r1, r3
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f7ff fe20 	bl	8009de6 <USBH_MSC_RdWrProcess>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d0e0      	beq.n	800a16e <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3718      	adds	r7, #24
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2221      	movs	r2, #33	@ 0x21
 800a1c8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	22ff      	movs	r2, #255	@ 0xff
 800a1ce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f001 fe95 	bl	800bf16 <USBH_CtlReq>
 800a1ec:	4603      	mov	r3, r0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3708      	adds	r7, #8
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b082      	sub	sp, #8
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
 800a1fe:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	22a1      	movs	r2, #161	@ 0xa1
 800a204:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	22fe      	movs	r2, #254	@ 0xfe
 800a20a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a21e:	2201      	movs	r2, #1
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f001 fe77 	bl	800bf16 <USBH_CtlReq>
 800a228:	4603      	mov	r3, r0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3708      	adds	r7, #8
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
	...

0800a234 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800a234:	b480      	push	{r7}
 800a236:	b085      	sub	sp, #20
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a242:	69db      	ldr	r3, [r3, #28]
 800a244:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	4a09      	ldr	r2, [pc, #36]	@ (800a270 <USBH_MSC_BOT_Init+0x3c>)
 800a24a:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	4a09      	ldr	r2, [pc, #36]	@ (800a274 <USBH_MSC_BOT_Init+0x40>)
 800a250:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2201      	movs	r2, #1
 800a25e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	43425355 	.word	0x43425355
 800a274:	20304050 	.word	0x20304050

0800a278 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b088      	sub	sp, #32
 800a27c:	af02      	add	r7, sp, #8
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	460b      	mov	r3, r1
 800a282:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a284:	2301      	movs	r3, #1
 800a286:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a288:	2301      	movs	r3, #1
 800a28a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a28c:	2301      	movs	r3, #1
 800a28e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a290:	2300      	movs	r3, #0
 800a292:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a29a:	69db      	ldr	r3, [r3, #28]
 800a29c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a2a8:	3b01      	subs	r3, #1
 800a2aa:	2b0a      	cmp	r3, #10
 800a2ac:	f200 819e 	bhi.w	800a5ec <USBH_MSC_BOT_Process+0x374>
 800a2b0:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b8 <USBH_MSC_BOT_Process+0x40>)
 800a2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b6:	bf00      	nop
 800a2b8:	0800a2e5 	.word	0x0800a2e5
 800a2bc:	0800a30d 	.word	0x0800a30d
 800a2c0:	0800a377 	.word	0x0800a377
 800a2c4:	0800a395 	.word	0x0800a395
 800a2c8:	0800a419 	.word	0x0800a419
 800a2cc:	0800a43b 	.word	0x0800a43b
 800a2d0:	0800a4d3 	.word	0x0800a4d3
 800a2d4:	0800a4ef 	.word	0x0800a4ef
 800a2d8:	0800a541 	.word	0x0800a541
 800a2dc:	0800a571 	.word	0x0800a571
 800a2e0:	0800a5d3 	.word	0x0800a5d3
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	78fa      	ldrb	r2, [r7, #3]
 800a2e8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	2202      	movs	r2, #2
 800a2f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	795b      	ldrb	r3, [r3, #5]
 800a2fe:	2201      	movs	r2, #1
 800a300:	9200      	str	r2, [sp, #0]
 800a302:	221f      	movs	r2, #31
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f002 f814 	bl	800c332 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a30a:	e17e      	b.n	800a60a <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	795b      	ldrb	r3, [r3, #5]
 800a310:	4619      	mov	r1, r3
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f005 fe2a 	bl	800ff6c <USBH_LL_GetURBState>
 800a318:	4603      	mov	r3, r0
 800a31a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a31c:	7d3b      	ldrb	r3, [r7, #20]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d118      	bne.n	800a354 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00f      	beq.n	800a34a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800a330:	b25b      	sxtb	r3, r3
 800a332:	2b00      	cmp	r3, #0
 800a334:	da04      	bge.n	800a340 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	2203      	movs	r2, #3
 800a33a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a33e:	e157      	b.n	800a5f0 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	2205      	movs	r2, #5
 800a344:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a348:	e152      	b.n	800a5f0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	2207      	movs	r2, #7
 800a34e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a352:	e14d      	b.n	800a5f0 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a354:	7d3b      	ldrb	r3, [r7, #20]
 800a356:	2b02      	cmp	r3, #2
 800a358:	d104      	bne.n	800a364 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	2201      	movs	r2, #1
 800a35e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a362:	e145      	b.n	800a5f0 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800a364:	7d3b      	ldrb	r3, [r7, #20]
 800a366:	2b05      	cmp	r3, #5
 800a368:	f040 8142 	bne.w	800a5f0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	220a      	movs	r2, #10
 800a370:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a374:	e13c      	b.n	800a5f0 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	895a      	ldrh	r2, [r3, #10]
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	791b      	ldrb	r3, [r3, #4]
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f001 fff9 	bl	800c37c <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	2204      	movs	r2, #4
 800a38e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 800a392:	e13a      	b.n	800a60a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	791b      	ldrb	r3, [r3, #4]
 800a398:	4619      	mov	r1, r3
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f005 fde6 	bl	800ff6c <USBH_LL_GetURBState>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a3a4:	7d3b      	ldrb	r3, [r7, #20]
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d12d      	bne.n	800a406 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	8952      	ldrh	r2, [r2, #10]
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d910      	bls.n	800a3d8 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3bc:	693a      	ldr	r2, [r7, #16]
 800a3be:	8952      	ldrh	r2, [r2, #10]
 800a3c0:	441a      	add	r2, r3
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3cc:	693a      	ldr	r2, [r7, #16]
 800a3ce:	8952      	ldrh	r2, [r2, #10]
 800a3d0:	1a9a      	subs	r2, r3, r2
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a3d6:	e002      	b.n	800a3de <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00a      	beq.n	800a3fc <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	895a      	ldrh	r2, [r3, #10]
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	791b      	ldrb	r3, [r3, #4]
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f001 ffc1 	bl	800c37c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a3fa:	e0fb      	b.n	800a5f4 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	2207      	movs	r2, #7
 800a400:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a404:	e0f6      	b.n	800a5f4 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800a406:	7d3b      	ldrb	r3, [r7, #20]
 800a408:	2b05      	cmp	r3, #5
 800a40a:	f040 80f3 	bne.w	800a5f4 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	2209      	movs	r2, #9
 800a412:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a416:	e0ed      	b.n	800a5f4 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	891a      	ldrh	r2, [r3, #8]
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	795b      	ldrb	r3, [r3, #5]
 800a426:	2001      	movs	r0, #1
 800a428:	9000      	str	r0, [sp, #0]
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f001 ff81 	bl	800c332 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	2206      	movs	r2, #6
 800a434:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a438:	e0e7      	b.n	800a60a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	795b      	ldrb	r3, [r3, #5]
 800a43e:	4619      	mov	r1, r3
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f005 fd93 	bl	800ff6c <USBH_LL_GetURBState>
 800a446:	4603      	mov	r3, r0
 800a448:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a44a:	7d3b      	ldrb	r3, [r7, #20]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d12f      	bne.n	800a4b0 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a454:	693a      	ldr	r2, [r7, #16]
 800a456:	8912      	ldrh	r2, [r2, #8]
 800a458:	4293      	cmp	r3, r2
 800a45a:	d910      	bls.n	800a47e <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a462:	693a      	ldr	r2, [r7, #16]
 800a464:	8912      	ldrh	r2, [r2, #8]
 800a466:	441a      	add	r2, r3
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a472:	693a      	ldr	r2, [r7, #16]
 800a474:	8912      	ldrh	r2, [r2, #8]
 800a476:	1a9a      	subs	r2, r3, r2
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a47c:	e002      	b.n	800a484 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	2200      	movs	r2, #0
 800a482:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00c      	beq.n	800a4a6 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	891a      	ldrh	r2, [r3, #8]
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	795b      	ldrb	r3, [r3, #5]
 800a49a:	2001      	movs	r0, #1
 800a49c:	9000      	str	r0, [sp, #0]
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f001 ff47 	bl	800c332 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a4a4:	e0a8      	b.n	800a5f8 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	2207      	movs	r2, #7
 800a4aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a4ae:	e0a3      	b.n	800a5f8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a4b0:	7d3b      	ldrb	r3, [r7, #20]
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	d104      	bne.n	800a4c0 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	2205      	movs	r2, #5
 800a4ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a4be:	e09b      	b.n	800a5f8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800a4c0:	7d3b      	ldrb	r3, [r7, #20]
 800a4c2:	2b05      	cmp	r3, #5
 800a4c4:	f040 8098 	bne.w	800a5f8 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	220a      	movs	r2, #10
 800a4cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a4d0:	e092      	b.n	800a5f8 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	791b      	ldrb	r3, [r3, #4]
 800a4dc:	220d      	movs	r2, #13
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f001 ff4c 	bl	800c37c <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	2208      	movs	r2, #8
 800a4e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a4ec:	e08d      	b.n	800a60a <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	791b      	ldrb	r3, [r3, #4]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f005 fd39 	bl	800ff6c <USBH_LL_GetURBState>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a4fe:	7d3b      	ldrb	r3, [r7, #20]
 800a500:	2b01      	cmp	r3, #1
 800a502:	d115      	bne.n	800a530 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	2201      	movs	r2, #1
 800a508:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	2201      	movs	r2, #1
 800a510:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f8a9 	bl	800a66c <USBH_MSC_DecodeCSW>
 800a51a:	4603      	mov	r3, r0
 800a51c:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a51e:	7d7b      	ldrb	r3, [r7, #21]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d102      	bne.n	800a52a <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800a524:	2300      	movs	r3, #0
 800a526:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a528:	e068      	b.n	800a5fc <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800a52a:	2302      	movs	r3, #2
 800a52c:	75fb      	strb	r3, [r7, #23]
      break;
 800a52e:	e065      	b.n	800a5fc <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800a530:	7d3b      	ldrb	r3, [r7, #20]
 800a532:	2b05      	cmp	r3, #5
 800a534:	d162      	bne.n	800a5fc <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	2209      	movs	r2, #9
 800a53a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a53e:	e05d      	b.n	800a5fc <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a540:	78fb      	ldrb	r3, [r7, #3]
 800a542:	2200      	movs	r2, #0
 800a544:	4619      	mov	r1, r3
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f864 	bl	800a614 <USBH_MSC_BOT_Abort>
 800a54c:	4603      	mov	r3, r0
 800a54e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a550:	7dbb      	ldrb	r3, [r7, #22]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d104      	bne.n	800a560 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	2207      	movs	r2, #7
 800a55a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a55e:	e04f      	b.n	800a600 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a560:	7dbb      	ldrb	r3, [r7, #22]
 800a562:	2b04      	cmp	r3, #4
 800a564:	d14c      	bne.n	800a600 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	220b      	movs	r2, #11
 800a56a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a56e:	e047      	b.n	800a600 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a570:	78fb      	ldrb	r3, [r7, #3]
 800a572:	2201      	movs	r2, #1
 800a574:	4619      	mov	r1, r3
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 f84c 	bl	800a614 <USBH_MSC_BOT_Abort>
 800a57c:	4603      	mov	r3, r0
 800a57e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a580:	7dbb      	ldrb	r3, [r7, #22]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d11d      	bne.n	800a5c2 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	795b      	ldrb	r3, [r3, #5]
 800a58a:	4619      	mov	r1, r3
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f005 fd47 	bl	8010020 <USBH_LL_GetToggle>
 800a592:	4603      	mov	r3, r0
 800a594:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	7959      	ldrb	r1, [r3, #5]
 800a59a:	7bfb      	ldrb	r3, [r7, #15]
 800a59c:	f1c3 0301 	rsb	r3, r3, #1
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f005 fd0b 	bl	800ffc0 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	791b      	ldrb	r3, [r3, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f005 fd04 	bl	800ffc0 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	2209      	movs	r2, #9
 800a5bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a5c0:	e020      	b.n	800a604 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800a5c2:	7dbb      	ldrb	r3, [r7, #22]
 800a5c4:	2b04      	cmp	r3, #4
 800a5c6:	d11d      	bne.n	800a604 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	220b      	movs	r2, #11
 800a5cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a5d0:	e018      	b.n	800a604 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f7ff fdf2 	bl	800a1bc <USBH_MSC_BOT_REQ_Reset>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a5dc:	7dfb      	ldrb	r3, [r7, #23]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d112      	bne.n	800a608 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 800a5ea:	e00d      	b.n	800a608 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800a5ec:	bf00      	nop
 800a5ee:	e00c      	b.n	800a60a <USBH_MSC_BOT_Process+0x392>
      break;
 800a5f0:	bf00      	nop
 800a5f2:	e00a      	b.n	800a60a <USBH_MSC_BOT_Process+0x392>
      break;
 800a5f4:	bf00      	nop
 800a5f6:	e008      	b.n	800a60a <USBH_MSC_BOT_Process+0x392>
      break;
 800a5f8:	bf00      	nop
 800a5fa:	e006      	b.n	800a60a <USBH_MSC_BOT_Process+0x392>
      break;
 800a5fc:	bf00      	nop
 800a5fe:	e004      	b.n	800a60a <USBH_MSC_BOT_Process+0x392>
      break;
 800a600:	bf00      	nop
 800a602:	e002      	b.n	800a60a <USBH_MSC_BOT_Process+0x392>
      break;
 800a604:	bf00      	nop
 800a606:	e000      	b.n	800a60a <USBH_MSC_BOT_Process+0x392>
      break;
 800a608:	bf00      	nop
  }
  return status;
 800a60a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3718      	adds	r7, #24
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	460b      	mov	r3, r1
 800a61e:	70fb      	strb	r3, [r7, #3]
 800a620:	4613      	mov	r3, r2
 800a622:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800a624:	2302      	movs	r3, #2
 800a626:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a62e:	69db      	ldr	r3, [r3, #28]
 800a630:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800a632:	78bb      	ldrb	r3, [r7, #2]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d002      	beq.n	800a63e <USBH_MSC_BOT_Abort+0x2a>
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d009      	beq.n	800a650 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800a63c:	e011      	b.n	800a662 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	79db      	ldrb	r3, [r3, #7]
 800a642:	4619      	mov	r1, r3
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f001 f9a0 	bl	800b98a <USBH_ClrFeature>
 800a64a:	4603      	mov	r3, r0
 800a64c:	73fb      	strb	r3, [r7, #15]
      break;
 800a64e:	e008      	b.n	800a662 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	799b      	ldrb	r3, [r3, #6]
 800a654:	4619      	mov	r1, r3
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f001 f997 	bl	800b98a <USBH_ClrFeature>
 800a65c:	4603      	mov	r3, r0
 800a65e:	73fb      	strb	r3, [r7, #15]
      break;
 800a660:	bf00      	nop
  }
  return status;
 800a662:	7bfb      	ldrb	r3, [r7, #15]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a67a:	69db      	ldr	r3, [r3, #28]
 800a67c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800a67e:	2301      	movs	r3, #1
 800a680:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	791b      	ldrb	r3, [r3, #4]
 800a686:	4619      	mov	r1, r3
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f005 fbdd 	bl	800fe48 <USBH_LL_GetLastXferSize>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b0d      	cmp	r3, #13
 800a692:	d002      	beq.n	800a69a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800a694:	2302      	movs	r3, #2
 800a696:	73fb      	strb	r3, [r7, #15]
 800a698:	e024      	b.n	800a6e4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a69e:	4a14      	ldr	r2, [pc, #80]	@ (800a6f0 <USBH_MSC_DecodeCSW+0x84>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d11d      	bne.n	800a6e0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d119      	bne.n	800a6e4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d102      	bne.n	800a6c0 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	73fb      	strb	r3, [r7, #15]
 800a6be:	e011      	b.n	800a6e4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d102      	bne.n	800a6d0 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	73fb      	strb	r3, [r7, #15]
 800a6ce:	e009      	b.n	800a6e4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d104      	bne.n	800a6e4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a6da:	2302      	movs	r3, #2
 800a6dc:	73fb      	strb	r3, [r7, #15]
 800a6de:	e001      	b.n	800a6e4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a6e0:	2302      	movs	r3, #2
 800a6e2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	53425355 	.word	0x53425355

0800a6f4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a700:	2302      	movs	r3, #2
 800a702:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a70a:	69db      	ldr	r3, [r3, #28]
 800a70c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a714:	2b01      	cmp	r3, #1
 800a716:	d002      	beq.n	800a71e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a718:	2b02      	cmp	r3, #2
 800a71a:	d021      	beq.n	800a760 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a71c:	e028      	b.n	800a770 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	2200      	movs	r2, #0
 800a722:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	2200      	movs	r2, #0
 800a728:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	220a      	movs	r2, #10
 800a730:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	3363      	adds	r3, #99	@ 0x63
 800a738:	2210      	movs	r2, #16
 800a73a:	2100      	movs	r1, #0
 800a73c:	4618      	mov	r0, r3
 800a73e:	f005 fdb1 	bl	80102a4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	2200      	movs	r2, #0
 800a746:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	2201      	movs	r2, #1
 800a74e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	2202      	movs	r2, #2
 800a756:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 800a75a:	2301      	movs	r3, #1
 800a75c:	73fb      	strb	r3, [r7, #15]
      break;
 800a75e:	e007      	b.n	800a770 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a760:	78fb      	ldrb	r3, [r7, #3]
 800a762:	4619      	mov	r1, r3
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7ff fd87 	bl	800a278 <USBH_MSC_BOT_Process>
 800a76a:	4603      	mov	r3, r0
 800a76c:	73fb      	strb	r3, [r7, #15]
      break;
 800a76e:	bf00      	nop
  }

  return error;
 800a770:	7bfb      	ldrb	r3, [r7, #15]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b086      	sub	sp, #24
 800a77e:	af00      	add	r7, sp, #0
 800a780:	60f8      	str	r0, [r7, #12]
 800a782:	460b      	mov	r3, r1
 800a784:	607a      	str	r2, [r7, #4]
 800a786:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800a788:	2301      	movs	r3, #1
 800a78a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a792:	69db      	ldr	r3, [r3, #28]
 800a794:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d002      	beq.n	800a7a6 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a7a0:	2b02      	cmp	r3, #2
 800a7a2:	d027      	beq.n	800a7f4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a7a4:	e05e      	b.n	800a864 <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	2208      	movs	r2, #8
 800a7aa:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	2280      	movs	r2, #128	@ 0x80
 800a7b0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	220a      	movs	r2, #10
 800a7b8:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	3363      	adds	r3, #99	@ 0x63
 800a7c0:	2210      	movs	r2, #16
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f005 fd6d 	bl	80102a4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	2225      	movs	r2, #37	@ 0x25
 800a7ce:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	2202      	movs	r2, #2
 800a7de:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	f103 0210 	add.w	r2, r3, #16
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	75fb      	strb	r3, [r7, #23]
      break;
 800a7f2:	e037      	b.n	800a864 <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a7f4:	7afb      	ldrb	r3, [r7, #11]
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f7ff fd3d 	bl	800a278 <USBH_MSC_BOT_Process>
 800a7fe:	4603      	mov	r3, r0
 800a800:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a802:	7dfb      	ldrb	r3, [r7, #23]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d12c      	bne.n	800a862 <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a80e:	3303      	adds	r3, #3
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	461a      	mov	r2, r3
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a81a:	3302      	adds	r3, #2
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	021b      	lsls	r3, r3, #8
 800a820:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a828:	3301      	adds	r3, #1
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a82e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	061b      	lsls	r3, r3, #24
 800a83a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a846:	3307      	adds	r3, #7
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	461a      	mov	r2, r3
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a852:	3306      	adds	r3, #6
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	021b      	lsls	r3, r3, #8
 800a858:	b29b      	uxth	r3, r3
 800a85a:	4313      	orrs	r3, r2
 800a85c:	b29a      	uxth	r2, r3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	809a      	strh	r2, [r3, #4]
      break;
 800a862:	bf00      	nop
  }

  return error;
 800a864:	7dfb      	ldrb	r3, [r7, #23]
}
 800a866:	4618      	mov	r0, r3
 800a868:	3718      	adds	r7, #24
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b086      	sub	sp, #24
 800a872:	af00      	add	r7, sp, #0
 800a874:	60f8      	str	r0, [r7, #12]
 800a876:	460b      	mov	r3, r1
 800a878:	607a      	str	r2, [r7, #4]
 800a87a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a87c:	2302      	movs	r3, #2
 800a87e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a886:	69db      	ldr	r3, [r3, #28]
 800a888:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a890:	2b01      	cmp	r3, #1
 800a892:	d002      	beq.n	800a89a <USBH_MSC_SCSI_Inquiry+0x2c>
 800a894:	2b02      	cmp	r3, #2
 800a896:	d03d      	beq.n	800a914 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a898:	e089      	b.n	800a9ae <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	2224      	movs	r2, #36	@ 0x24
 800a89e:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	2280      	movs	r2, #128	@ 0x80
 800a8a4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	220a      	movs	r2, #10
 800a8ac:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	3363      	adds	r3, #99	@ 0x63
 800a8b4:	220a      	movs	r2, #10
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f005 fcf3 	bl	80102a4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	2212      	movs	r2, #18
 800a8c2:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a8c6:	7afb      	ldrb	r3, [r7, #11]
 800a8c8:	015b      	lsls	r3, r3, #5
 800a8ca:	b2da      	uxtb	r2, r3
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	2224      	movs	r2, #36	@ 0x24
 800a8e6:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	2202      	movs	r2, #2
 800a8fe:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	f103 0210 	add.w	r2, r3, #16
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800a90e:	2301      	movs	r3, #1
 800a910:	75fb      	strb	r3, [r7, #23]
      break;
 800a912:	e04c      	b.n	800a9ae <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a914:	7afb      	ldrb	r3, [r7, #11]
 800a916:	4619      	mov	r1, r3
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f7ff fcad 	bl	800a278 <USBH_MSC_BOT_Process>
 800a91e:	4603      	mov	r3, r0
 800a920:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a922:	7dfb      	ldrb	r3, [r7, #23]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d141      	bne.n	800a9ac <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a928:	2222      	movs	r2, #34	@ 0x22
 800a92a:	2100      	movs	r1, #0
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f005 fcb9 	bl	80102a4 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	f003 031f 	and.w	r3, r3, #31
 800a93e:	b2da      	uxtb	r2, r3
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	095b      	lsrs	r3, r3, #5
 800a94e:	b2da      	uxtb	r2, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a95a:	3301      	adds	r3, #1
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	b25b      	sxtb	r3, r3
 800a960:	2b00      	cmp	r3, #0
 800a962:	da03      	bge.n	800a96c <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	709a      	strb	r2, [r3, #2]
 800a96a:	e002      	b.n	800a972 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	1cd8      	adds	r0, r3, #3
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a97c:	3308      	adds	r3, #8
 800a97e:	2208      	movs	r2, #8
 800a980:	4619      	mov	r1, r3
 800a982:	f005 fcfd 	bl	8010380 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f103 000c 	add.w	r0, r3, #12
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a992:	3310      	adds	r3, #16
 800a994:	2210      	movs	r2, #16
 800a996:	4619      	mov	r1, r3
 800a998:	f005 fcf2 	bl	8010380 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	331d      	adds	r3, #29
 800a9a0:	693a      	ldr	r2, [r7, #16]
 800a9a2:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800a9a6:	3220      	adds	r2, #32
 800a9a8:	6812      	ldr	r2, [r2, #0]
 800a9aa:	601a      	str	r2, [r3, #0]
      break;
 800a9ac:	bf00      	nop
  }

  return error;
 800a9ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3718      	adds	r7, #24
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	607a      	str	r2, [r7, #4]
 800a9c4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a9c6:	2302      	movs	r3, #2
 800a9c8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a9d0:	69db      	ldr	r3, [r3, #28]
 800a9d2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d002      	beq.n	800a9e4 <USBH_MSC_SCSI_RequestSense+0x2c>
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	d03d      	beq.n	800aa5e <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a9e2:	e05d      	b.n	800aaa0 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	220e      	movs	r2, #14
 800a9e8:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	2280      	movs	r2, #128	@ 0x80
 800a9ee:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	220a      	movs	r2, #10
 800a9f6:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	3363      	adds	r3, #99	@ 0x63
 800a9fe:	2210      	movs	r2, #16
 800aa00:	2100      	movs	r1, #0
 800aa02:	4618      	mov	r0, r3
 800aa04:	f005 fc4e 	bl	80102a4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	2203      	movs	r2, #3
 800aa0c:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800aa10:	7afb      	ldrb	r3, [r7, #11]
 800aa12:	015b      	lsls	r3, r3, #5
 800aa14:	b2da      	uxtb	r2, r3
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	220e      	movs	r2, #14
 800aa30:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	2200      	movs	r2, #0
 800aa38:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	2202      	movs	r2, #2
 800aa48:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	f103 0210 	add.w	r2, r3, #16
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	75fb      	strb	r3, [r7, #23]
      break;
 800aa5c:	e020      	b.n	800aaa0 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800aa5e:	7afb      	ldrb	r3, [r7, #11]
 800aa60:	4619      	mov	r1, r3
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f7ff fc08 	bl	800a278 <USBH_MSC_BOT_Process>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800aa6c:	7dfb      	ldrb	r3, [r7, #23]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d115      	bne.n	800aa9e <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa78:	3302      	adds	r3, #2
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	f003 030f 	and.w	r3, r3, #15
 800aa80:	b2da      	uxtb	r2, r3
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa8c:	7b1a      	ldrb	r2, [r3, #12]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa98:	7b5a      	ldrb	r2, [r3, #13]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	709a      	strb	r2, [r3, #2]
      break;
 800aa9e:	bf00      	nop
  }

  return error;
 800aaa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3718      	adds	r7, #24
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b086      	sub	sp, #24
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	60f8      	str	r0, [r7, #12]
 800aab2:	607a      	str	r2, [r7, #4]
 800aab4:	603b      	str	r3, [r7, #0]
 800aab6:	460b      	mov	r3, r1
 800aab8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800aaba:	2302      	movs	r3, #2
 800aabc:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aac4:	69db      	ldr	r3, [r3, #28]
 800aac6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d002      	beq.n	800aad8 <USBH_MSC_SCSI_Write+0x2e>
 800aad2:	2b02      	cmp	r3, #2
 800aad4:	d047      	beq.n	800ab66 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800aad6:	e04e      	b.n	800ab76 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 800aade:	461a      	mov	r2, r3
 800aae0:	6a3b      	ldr	r3, [r7, #32]
 800aae2:	fb03 f202 	mul.w	r2, r3, r2
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	220a      	movs	r2, #10
 800aaf6:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	3363      	adds	r3, #99	@ 0x63
 800aafe:	2210      	movs	r2, #16
 800ab00:	2100      	movs	r1, #0
 800ab02:	4618      	mov	r0, r3
 800ab04:	f005 fbce 	bl	80102a4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	222a      	movs	r2, #42	@ 0x2a
 800ab0c:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800ab10:	79fa      	ldrb	r2, [r7, #7]
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800ab18:	79ba      	ldrb	r2, [r7, #6]
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800ab20:	797a      	ldrb	r2, [r7, #5]
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800ab28:	1d3b      	adds	r3, r7, #4
 800ab2a:	781a      	ldrb	r2, [r3, #0]
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800ab32:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800ab3c:	f107 0320 	add.w	r3, r7, #32
 800ab40:	781a      	ldrb	r2, [r3, #0]
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	2202      	movs	r2, #2
 800ab54:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	683a      	ldr	r2, [r7, #0]
 800ab5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800ab60:	2301      	movs	r3, #1
 800ab62:	75fb      	strb	r3, [r7, #23]
      break;
 800ab64:	e007      	b.n	800ab76 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ab66:	7afb      	ldrb	r3, [r7, #11]
 800ab68:	4619      	mov	r1, r3
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f7ff fb84 	bl	800a278 <USBH_MSC_BOT_Process>
 800ab70:	4603      	mov	r3, r0
 800ab72:	75fb      	strb	r3, [r7, #23]
      break;
 800ab74:	bf00      	nop
  }

  return error;
 800ab76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3718      	adds	r7, #24
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	607a      	str	r2, [r7, #4]
 800ab8a:	603b      	str	r3, [r7, #0]
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ab90:	2302      	movs	r3, #2
 800ab92:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ab9a:	69db      	ldr	r3, [r3, #28]
 800ab9c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d002      	beq.n	800abae <USBH_MSC_SCSI_Read+0x2e>
 800aba8:	2b02      	cmp	r3, #2
 800abaa:	d047      	beq.n	800ac3c <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800abac:	e04e      	b.n	800ac4c <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 800abb4:	461a      	mov	r2, r3
 800abb6:	6a3b      	ldr	r3, [r7, #32]
 800abb8:	fb03 f202 	mul.w	r2, r3, r2
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	2280      	movs	r2, #128	@ 0x80
 800abc4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	220a      	movs	r2, #10
 800abcc:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	3363      	adds	r3, #99	@ 0x63
 800abd4:	2210      	movs	r2, #16
 800abd6:	2100      	movs	r1, #0
 800abd8:	4618      	mov	r0, r3
 800abda:	f005 fb63 	bl	80102a4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	2228      	movs	r2, #40	@ 0x28
 800abe2:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800abe6:	79fa      	ldrb	r2, [r7, #7]
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800abee:	79ba      	ldrb	r2, [r7, #6]
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800abf6:	797a      	ldrb	r2, [r7, #5]
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800abfe:	1d3b      	adds	r3, r7, #4
 800ac00:	781a      	ldrb	r2, [r3, #0]
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800ac08:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800ac12:	f107 0320 	add.w	r3, r7, #32
 800ac16:	781a      	ldrb	r2, [r3, #0]
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	2201      	movs	r2, #1
 800ac22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	2202      	movs	r2, #2
 800ac2a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	683a      	ldr	r2, [r7, #0]
 800ac32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800ac36:	2301      	movs	r3, #1
 800ac38:	75fb      	strb	r3, [r7, #23]
      break;
 800ac3a:	e007      	b.n	800ac4c <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ac3c:	7afb      	ldrb	r3, [r7, #11]
 800ac3e:	4619      	mov	r1, r3
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f7ff fb19 	bl	800a278 <USBH_MSC_BOT_Process>
 800ac46:	4603      	mov	r3, r0
 800ac48:	75fb      	strb	r3, [r7, #23]
      break;
 800ac4a:	bf00      	nop
  }

  return error;
 800ac4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3718      	adds	r7, #24
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b084      	sub	sp, #16
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	60f8      	str	r0, [r7, #12]
 800ac5e:	60b9      	str	r1, [r7, #8]
 800ac60:	4613      	mov	r3, r2
 800ac62:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d101      	bne.n	800ac6e <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ac6a:	2302      	movs	r3, #2
 800ac6c:	e029      	b.n	800acc2 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	79fa      	ldrb	r2, [r7, #7]
 800ac72:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	f000 f81f 	bl	800acca <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d003      	beq.n	800acba <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	68ba      	ldr	r2, [r7, #8]
 800acb6:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f005 f810 	bl	800fce0 <USBH_LL_Init>

  return USBH_OK;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800acca:	b480      	push	{r7}
 800accc:	b085      	sub	sp, #20
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800acd2:	2300      	movs	r3, #0
 800acd4:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800acd6:	2300      	movs	r3, #0
 800acd8:	60fb      	str	r3, [r7, #12]
 800acda:	e009      	b.n	800acf0 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	33e0      	adds	r3, #224	@ 0xe0
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4413      	add	r3, r2
 800ace6:	2200      	movs	r2, #0
 800ace8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	3301      	adds	r3, #1
 800acee:	60fb      	str	r3, [r7, #12]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2b0f      	cmp	r3, #15
 800acf4:	d9f2      	bls.n	800acdc <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800acf6:	2300      	movs	r3, #0
 800acf8:	60fb      	str	r3, [r7, #12]
 800acfa:	e009      	b.n	800ad10 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	4413      	add	r3, r2
 800ad02:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ad06:	2200      	movs	r2, #0
 800ad08:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	60fb      	str	r3, [r7, #12]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad16:	d3f1      	bcc.n	800acfc <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2201      	movs	r2, #1
 800ad36:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2240      	movs	r2, #64	@ 0x40
 800ad3c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  return USBH_OK;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3714      	adds	r7, #20
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr

0800ad72 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ad72:	b480      	push	{r7}
 800ad74:	b085      	sub	sp, #20
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
 800ad7a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d016      	beq.n	800adb4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d10e      	bne.n	800adae <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ad96:	1c59      	adds	r1, r3, #1
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	33de      	adds	r3, #222	@ 0xde
 800ada2:	6839      	ldr	r1, [r7, #0]
 800ada4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ada8:	2300      	movs	r3, #0
 800adaa:	73fb      	strb	r3, [r7, #15]
 800adac:	e004      	b.n	800adb8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800adae:	2302      	movs	r3, #2
 800adb0:	73fb      	strb	r3, [r7, #15]
 800adb2:	e001      	b.n	800adb8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800adb4:	2302      	movs	r3, #2
 800adb6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800adb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3714      	adds	r7, #20
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr

0800adc6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800adc6:	b480      	push	{r7}
 800adc8:	b085      	sub	sp, #20
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
 800adce:	460b      	mov	r3, r1
 800add0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800add2:	2300      	movs	r3, #0
 800add4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800addc:	78fa      	ldrb	r2, [r7, #3]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d204      	bcs.n	800adec <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	78fa      	ldrb	r2, [r7, #3]
 800ade6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800adea:	e001      	b.n	800adf0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800adec:	2302      	movs	r3, #2
 800adee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800adf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3714      	adds	r7, #20
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr

0800adfe <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800adfe:	b480      	push	{r7}
 800ae00:	b087      	sub	sp, #28
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
 800ae06:	4608      	mov	r0, r1
 800ae08:	4611      	mov	r1, r2
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	70fb      	strb	r3, [r7, #3]
 800ae10:	460b      	mov	r3, r1
 800ae12:	70bb      	strb	r3, [r7, #2]
 800ae14:	4613      	mov	r3, r2
 800ae16:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800ae26:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ae28:	e025      	b.n	800ae76 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ae2a:	7dfb      	ldrb	r3, [r7, #23]
 800ae2c:	221a      	movs	r2, #26
 800ae2e:	fb02 f303 	mul.w	r3, r2, r3
 800ae32:	3308      	adds	r3, #8
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	4413      	add	r3, r2
 800ae38:	3302      	adds	r3, #2
 800ae3a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	795b      	ldrb	r3, [r3, #5]
 800ae40:	78fa      	ldrb	r2, [r7, #3]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d002      	beq.n	800ae4c <USBH_FindInterface+0x4e>
 800ae46:	78fb      	ldrb	r3, [r7, #3]
 800ae48:	2bff      	cmp	r3, #255	@ 0xff
 800ae4a:	d111      	bne.n	800ae70 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ae50:	78ba      	ldrb	r2, [r7, #2]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d002      	beq.n	800ae5c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ae56:	78bb      	ldrb	r3, [r7, #2]
 800ae58:	2bff      	cmp	r3, #255	@ 0xff
 800ae5a:	d109      	bne.n	800ae70 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ae60:	787a      	ldrb	r2, [r7, #1]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d002      	beq.n	800ae6c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ae66:	787b      	ldrb	r3, [r7, #1]
 800ae68:	2bff      	cmp	r3, #255	@ 0xff
 800ae6a:	d101      	bne.n	800ae70 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ae6c:	7dfb      	ldrb	r3, [r7, #23]
 800ae6e:	e006      	b.n	800ae7e <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ae70:	7dfb      	ldrb	r3, [r7, #23]
 800ae72:	3301      	adds	r3, #1
 800ae74:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ae76:	7dfb      	ldrb	r3, [r7, #23]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d9d6      	bls.n	800ae2a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ae7c:	23ff      	movs	r3, #255	@ 0xff
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	371c      	adds	r7, #28
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr

0800ae8a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b082      	sub	sp, #8
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f004 ff60 	bl	800fd58 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800ae98:	2101      	movs	r1, #1
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f005 f879 	bl	800ff92 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800aea0:	2300      	movs	r3, #0
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3708      	adds	r7, #8
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
	...

0800aeac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b088      	sub	sp, #32
 800aeb0:	af04      	add	r7, sp, #16
 800aeb2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d102      	bne.n	800aece <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2203      	movs	r2, #3
 800aecc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	2b0b      	cmp	r3, #11
 800aed6:	f200 81bb 	bhi.w	800b250 <USBH_Process+0x3a4>
 800aeda:	a201      	add	r2, pc, #4	@ (adr r2, 800aee0 <USBH_Process+0x34>)
 800aedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee0:	0800af11 	.word	0x0800af11
 800aee4:	0800af43 	.word	0x0800af43
 800aee8:	0800afab 	.word	0x0800afab
 800aeec:	0800b1eb 	.word	0x0800b1eb
 800aef0:	0800b251 	.word	0x0800b251
 800aef4:	0800b04b 	.word	0x0800b04b
 800aef8:	0800b191 	.word	0x0800b191
 800aefc:	0800b081 	.word	0x0800b081
 800af00:	0800b0a1 	.word	0x0800b0a1
 800af04:	0800b0bf 	.word	0x0800b0bf
 800af08:	0800b103 	.word	0x0800b103
 800af0c:	0800b1d3 	.word	0x0800b1d3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800af16:	b2db      	uxtb	r3, r3
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f000 819b 	beq.w	800b254 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2201      	movs	r2, #1
 800af22:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800af24:	20c8      	movs	r0, #200	@ 0xc8
 800af26:	f005 f8ab 	bl	8010080 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f004 ff71 	bl	800fe12 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800af40:	e188      	b.n	800b254 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d107      	bne.n	800af5c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2202      	movs	r2, #2
 800af58:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800af5a:	e18a      	b.n	800b272 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800af62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800af66:	d914      	bls.n	800af92 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800af6e:	3301      	adds	r3, #1
 800af70:	b2da      	uxtb	r2, r3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800af7e:	2b03      	cmp	r3, #3
 800af80:	d903      	bls.n	800af8a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	220d      	movs	r2, #13
 800af86:	701a      	strb	r2, [r3, #0]
      break;
 800af88:	e173      	b.n	800b272 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2200      	movs	r2, #0
 800af8e:	701a      	strb	r2, [r3, #0]
      break;
 800af90:	e16f      	b.n	800b272 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800af98:	f103 020a 	add.w	r2, r3, #10
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800afa2:	200a      	movs	r0, #10
 800afa4:	f005 f86c 	bl	8010080 <USBH_Delay>
      break;
 800afa8:	e163      	b.n	800b272 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d005      	beq.n	800afc0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800afba:	2104      	movs	r1, #4
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800afc0:	2064      	movs	r0, #100	@ 0x64
 800afc2:	f005 f85d 	bl	8010080 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f004 fefc 	bl	800fdc4 <USBH_LL_GetSpeed>
 800afcc:	4603      	mov	r3, r0
 800afce:	461a      	mov	r2, r3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2205      	movs	r2, #5
 800afda:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800afdc:	2100      	movs	r1, #0
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f001 fa19 	bl	800c416 <USBH_AllocPipe>
 800afe4:	4603      	mov	r3, r0
 800afe6:	461a      	mov	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800afec:	2180      	movs	r1, #128	@ 0x80
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f001 fa11 	bl	800c416 <USBH_AllocPipe>
 800aff4:	4603      	mov	r3, r0
 800aff6:	461a      	mov	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	7919      	ldrb	r1, [r3, #4]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b010:	9202      	str	r2, [sp, #8]
 800b012:	2200      	movs	r2, #0
 800b014:	9201      	str	r2, [sp, #4]
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	4603      	mov	r3, r0
 800b01a:	2280      	movs	r2, #128	@ 0x80
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f001 f9cb 	bl	800c3b8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	7959      	ldrb	r1, [r3, #5]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b036:	9202      	str	r2, [sp, #8]
 800b038:	2200      	movs	r2, #0
 800b03a:	9201      	str	r2, [sp, #4]
 800b03c:	9300      	str	r3, [sp, #0]
 800b03e:	4603      	mov	r3, r0
 800b040:	2200      	movs	r2, #0
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f001 f9b8 	bl	800c3b8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b048:	e113      	b.n	800b272 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f916 	bl	800b27c <USBH_HandleEnum>
 800b050:	4603      	mov	r3, r0
 800b052:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b054:	7bbb      	ldrb	r3, [r7, #14]
 800b056:	b2db      	uxtb	r3, r3
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f040 80fd 	bne.w	800b258 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2200      	movs	r2, #0
 800b062:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d103      	bne.n	800b078 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2208      	movs	r2, #8
 800b074:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b076:	e0ef      	b.n	800b258 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2207      	movs	r2, #7
 800b07c:	701a      	strb	r2, [r3, #0]
      break;
 800b07e:	e0eb      	b.n	800b258 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b086:	2b00      	cmp	r3, #0
 800b088:	f000 80e8 	beq.w	800b25c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b092:	2101      	movs	r1, #1
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2208      	movs	r2, #8
 800b09c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b09e:	e0dd      	b.n	800b25c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 fc27 	bl	800b8fc <USBH_SetCfg>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f040 80d5 	bne.w	800b260 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2209      	movs	r2, #9
 800b0ba:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b0bc:	e0d0      	b.n	800b260 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800b0c4:	f003 0320 	and.w	r3, r3, #32
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d016      	beq.n	800b0fa <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b0cc:	2101      	movs	r1, #1
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 fc37 	bl	800b942 <USBH_SetFeature>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b0d8:	7bbb      	ldrb	r3, [r7, #14]
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d103      	bne.n	800b0e8 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	220a      	movs	r2, #10
 800b0e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b0e6:	e0bd      	b.n	800b264 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800b0e8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	2b03      	cmp	r3, #3
 800b0ee:	f040 80b9 	bne.w	800b264 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	220a      	movs	r2, #10
 800b0f6:	701a      	strb	r2, [r3, #0]
      break;
 800b0f8:	e0b4      	b.n	800b264 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	220a      	movs	r2, #10
 800b0fe:	701a      	strb	r2, [r3, #0]
      break;
 800b100:	e0b0      	b.n	800b264 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f000 80ad 	beq.w	800b268 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b116:	2300      	movs	r3, #0
 800b118:	73fb      	strb	r3, [r7, #15]
 800b11a:	e016      	b.n	800b14a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b11c:	7bfa      	ldrb	r2, [r7, #15]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	32de      	adds	r2, #222	@ 0xde
 800b122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b126:	791a      	ldrb	r2, [r3, #4]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800b12e:	429a      	cmp	r2, r3
 800b130:	d108      	bne.n	800b144 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b132:	7bfa      	ldrb	r2, [r7, #15]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	32de      	adds	r2, #222	@ 0xde
 800b138:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800b142:	e005      	b.n	800b150 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b144:	7bfb      	ldrb	r3, [r7, #15]
 800b146:	3301      	adds	r3, #1
 800b148:	73fb      	strb	r3, [r7, #15]
 800b14a:	7bfb      	ldrb	r3, [r7, #15]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d0e5      	beq.n	800b11c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b156:	2b00      	cmp	r3, #0
 800b158:	d016      	beq.n	800b188 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	4798      	blx	r3
 800b166:	4603      	mov	r3, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d109      	bne.n	800b180 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2206      	movs	r2, #6
 800b170:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b178:	2103      	movs	r1, #3
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b17e:	e073      	b.n	800b268 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	220d      	movs	r2, #13
 800b184:	701a      	strb	r2, [r3, #0]
      break;
 800b186:	e06f      	b.n	800b268 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	220d      	movs	r2, #13
 800b18c:	701a      	strb	r2, [r3, #0]
      break;
 800b18e:	e06b      	b.n	800b268 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b196:	2b00      	cmp	r3, #0
 800b198:	d017      	beq.n	800b1ca <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	4798      	blx	r3
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b1aa:	7bbb      	ldrb	r3, [r7, #14]
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d103      	bne.n	800b1ba <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	220b      	movs	r2, #11
 800b1b6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b1b8:	e058      	b.n	800b26c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800b1ba:	7bbb      	ldrb	r3, [r7, #14]
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	2b02      	cmp	r3, #2
 800b1c0:	d154      	bne.n	800b26c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	220d      	movs	r2, #13
 800b1c6:	701a      	strb	r2, [r3, #0]
      break;
 800b1c8:	e050      	b.n	800b26c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	220d      	movs	r2, #13
 800b1ce:	701a      	strb	r2, [r3, #0]
      break;
 800b1d0:	e04c      	b.n	800b26c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d049      	beq.n	800b270 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b1e2:	695b      	ldr	r3, [r3, #20]
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	4798      	blx	r3
      }
      break;
 800b1e8:	e042      	b.n	800b270 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f7ff fd69 	bl	800acca <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d009      	beq.n	800b216 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d005      	beq.n	800b22c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b226:	2105      	movs	r1, #5
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800b232:	b2db      	uxtb	r3, r3
 800b234:	2b01      	cmp	r3, #1
 800b236:	d107      	bne.n	800b248 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f7ff fe22 	bl	800ae8a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b246:	e014      	b.n	800b272 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f004 fd85 	bl	800fd58 <USBH_LL_Start>
      break;
 800b24e:	e010      	b.n	800b272 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b250:	bf00      	nop
 800b252:	e00e      	b.n	800b272 <USBH_Process+0x3c6>
      break;
 800b254:	bf00      	nop
 800b256:	e00c      	b.n	800b272 <USBH_Process+0x3c6>
      break;
 800b258:	bf00      	nop
 800b25a:	e00a      	b.n	800b272 <USBH_Process+0x3c6>
    break;
 800b25c:	bf00      	nop
 800b25e:	e008      	b.n	800b272 <USBH_Process+0x3c6>
      break;
 800b260:	bf00      	nop
 800b262:	e006      	b.n	800b272 <USBH_Process+0x3c6>
      break;
 800b264:	bf00      	nop
 800b266:	e004      	b.n	800b272 <USBH_Process+0x3c6>
      break;
 800b268:	bf00      	nop
 800b26a:	e002      	b.n	800b272 <USBH_Process+0x3c6>
      break;
 800b26c:	bf00      	nop
 800b26e:	e000      	b.n	800b272 <USBH_Process+0x3c6>
      break;
 800b270:	bf00      	nop
  }
  return USBH_OK;
 800b272:	2300      	movs	r3, #0
}
 800b274:	4618      	mov	r0, r3
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b088      	sub	sp, #32
 800b280:	af04      	add	r7, sp, #16
 800b282:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b284:	2301      	movs	r3, #1
 800b286:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b288:	2301      	movs	r3, #1
 800b28a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	785b      	ldrb	r3, [r3, #1]
 800b290:	2b07      	cmp	r3, #7
 800b292:	f200 81bd 	bhi.w	800b610 <USBH_HandleEnum+0x394>
 800b296:	a201      	add	r2, pc, #4	@ (adr r2, 800b29c <USBH_HandleEnum+0x20>)
 800b298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b29c:	0800b2bd 	.word	0x0800b2bd
 800b2a0:	0800b377 	.word	0x0800b377
 800b2a4:	0800b3e1 	.word	0x0800b3e1
 800b2a8:	0800b46b 	.word	0x0800b46b
 800b2ac:	0800b4d5 	.word	0x0800b4d5
 800b2b0:	0800b545 	.word	0x0800b545
 800b2b4:	0800b58b 	.word	0x0800b58b
 800b2b8:	0800b5d1 	.word	0x0800b5d1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b2bc:	2108      	movs	r1, #8
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 fa4c 	bl	800b75c <USBH_Get_DevDesc>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b2c8:	7bbb      	ldrb	r3, [r7, #14]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d12e      	bne.n	800b32c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	7919      	ldrb	r1, [r3, #4]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b2f2:	9202      	str	r2, [sp, #8]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	9201      	str	r2, [sp, #4]
 800b2f8:	9300      	str	r3, [sp, #0]
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2280      	movs	r2, #128	@ 0x80
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f001 f85a 	bl	800c3b8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	7959      	ldrb	r1, [r3, #5]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b318:	9202      	str	r2, [sp, #8]
 800b31a:	2200      	movs	r2, #0
 800b31c:	9201      	str	r2, [sp, #4]
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	4603      	mov	r3, r0
 800b322:	2200      	movs	r2, #0
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f001 f847 	bl	800c3b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b32a:	e173      	b.n	800b614 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b32c:	7bbb      	ldrb	r3, [r7, #14]
 800b32e:	2b03      	cmp	r3, #3
 800b330:	f040 8170 	bne.w	800b614 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b33a:	3301      	adds	r3, #1
 800b33c:	b2da      	uxtb	r2, r3
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b34a:	2b03      	cmp	r3, #3
 800b34c:	d903      	bls.n	800b356 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	220d      	movs	r2, #13
 800b352:	701a      	strb	r2, [r3, #0]
      break;
 800b354:	e15e      	b.n	800b614 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	795b      	ldrb	r3, [r3, #5]
 800b35a:	4619      	mov	r1, r3
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f001 f87b 	bl	800c458 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	791b      	ldrb	r3, [r3, #4]
 800b366:	4619      	mov	r1, r3
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f001 f875 	bl	800c458 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2200      	movs	r2, #0
 800b372:	701a      	strb	r2, [r3, #0]
      break;
 800b374:	e14e      	b.n	800b614 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b376:	2112      	movs	r1, #18
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f000 f9ef 	bl	800b75c <USBH_Get_DevDesc>
 800b37e:	4603      	mov	r3, r0
 800b380:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b382:	7bbb      	ldrb	r3, [r7, #14]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d103      	bne.n	800b390 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2202      	movs	r2, #2
 800b38c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b38e:	e143      	b.n	800b618 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b390:	7bbb      	ldrb	r3, [r7, #14]
 800b392:	2b03      	cmp	r3, #3
 800b394:	f040 8140 	bne.w	800b618 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b39e:	3301      	adds	r3, #1
 800b3a0:	b2da      	uxtb	r2, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b3ae:	2b03      	cmp	r3, #3
 800b3b0:	d903      	bls.n	800b3ba <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	220d      	movs	r2, #13
 800b3b6:	701a      	strb	r2, [r3, #0]
      break;
 800b3b8:	e12e      	b.n	800b618 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	795b      	ldrb	r3, [r3, #5]
 800b3be:	4619      	mov	r1, r3
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f001 f849 	bl	800c458 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	791b      	ldrb	r3, [r3, #4]
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f001 f843 	bl	800c458 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	701a      	strb	r2, [r3, #0]
      break;
 800b3de:	e11b      	b.n	800b618 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b3e0:	2101      	movs	r1, #1
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 fa66 	bl	800b8b4 <USBH_SetAddress>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b3ec:	7bbb      	ldrb	r3, [r7, #14]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d130      	bne.n	800b454 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800b3f2:	2002      	movs	r0, #2
 800b3f4:	f004 fe44 	bl	8010080 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2203      	movs	r2, #3
 800b404:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	7919      	ldrb	r1, [r3, #4]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b41a:	9202      	str	r2, [sp, #8]
 800b41c:	2200      	movs	r2, #0
 800b41e:	9201      	str	r2, [sp, #4]
 800b420:	9300      	str	r3, [sp, #0]
 800b422:	4603      	mov	r3, r0
 800b424:	2280      	movs	r2, #128	@ 0x80
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 ffc6 	bl	800c3b8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	7959      	ldrb	r1, [r3, #5]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b440:	9202      	str	r2, [sp, #8]
 800b442:	2200      	movs	r2, #0
 800b444:	9201      	str	r2, [sp, #4]
 800b446:	9300      	str	r3, [sp, #0]
 800b448:	4603      	mov	r3, r0
 800b44a:	2200      	movs	r2, #0
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 ffb3 	bl	800c3b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b452:	e0e3      	b.n	800b61c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b454:	7bbb      	ldrb	r3, [r7, #14]
 800b456:	2b03      	cmp	r3, #3
 800b458:	f040 80e0 	bne.w	800b61c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	220d      	movs	r2, #13
 800b460:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	705a      	strb	r2, [r3, #1]
      break;
 800b468:	e0d8      	b.n	800b61c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b46a:	2109      	movs	r1, #9
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 f99d 	bl	800b7ac <USBH_Get_CfgDesc>
 800b472:	4603      	mov	r3, r0
 800b474:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b476:	7bbb      	ldrb	r3, [r7, #14]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d103      	bne.n	800b484 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2204      	movs	r2, #4
 800b480:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b482:	e0cd      	b.n	800b620 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b484:	7bbb      	ldrb	r3, [r7, #14]
 800b486:	2b03      	cmp	r3, #3
 800b488:	f040 80ca 	bne.w	800b620 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b492:	3301      	adds	r3, #1
 800b494:	b2da      	uxtb	r2, r3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b4a2:	2b03      	cmp	r3, #3
 800b4a4:	d903      	bls.n	800b4ae <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	220d      	movs	r2, #13
 800b4aa:	701a      	strb	r2, [r3, #0]
      break;
 800b4ac:	e0b8      	b.n	800b620 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	795b      	ldrb	r3, [r3, #5]
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 ffcf 	bl	800c458 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	791b      	ldrb	r3, [r3, #4]
 800b4be:	4619      	mov	r1, r3
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f000 ffc9 	bl	800c458 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	701a      	strb	r2, [r3, #0]
      break;
 800b4d2:	e0a5      	b.n	800b620 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800b4da:	4619      	mov	r1, r3
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 f965 	bl	800b7ac <USBH_Get_CfgDesc>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b4e6:	7bbb      	ldrb	r3, [r7, #14]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d103      	bne.n	800b4f4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2205      	movs	r2, #5
 800b4f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b4f2:	e097      	b.n	800b624 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b4f4:	7bbb      	ldrb	r3, [r7, #14]
 800b4f6:	2b03      	cmp	r3, #3
 800b4f8:	f040 8094 	bne.w	800b624 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b502:	3301      	adds	r3, #1
 800b504:	b2da      	uxtb	r2, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b512:	2b03      	cmp	r3, #3
 800b514:	d903      	bls.n	800b51e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	220d      	movs	r2, #13
 800b51a:	701a      	strb	r2, [r3, #0]
      break;
 800b51c:	e082      	b.n	800b624 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	795b      	ldrb	r3, [r3, #5]
 800b522:	4619      	mov	r1, r3
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 ff97 	bl	800c458 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	791b      	ldrb	r3, [r3, #4]
 800b52e:	4619      	mov	r1, r3
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 ff91 	bl	800c458 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	701a      	strb	r2, [r3, #0]
      break;
 800b542:	e06f      	b.n	800b624 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d019      	beq.n	800b582 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b55a:	23ff      	movs	r3, #255	@ 0xff
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 f949 	bl	800b7f4 <USBH_Get_StringDesc>
 800b562:	4603      	mov	r3, r0
 800b564:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b566:	7bbb      	ldrb	r3, [r7, #14]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d103      	bne.n	800b574 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2206      	movs	r2, #6
 800b570:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b572:	e059      	b.n	800b628 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b574:	7bbb      	ldrb	r3, [r7, #14]
 800b576:	2b03      	cmp	r3, #3
 800b578:	d156      	bne.n	800b628 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2206      	movs	r2, #6
 800b57e:	705a      	strb	r2, [r3, #1]
      break;
 800b580:	e052      	b.n	800b628 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2206      	movs	r2, #6
 800b586:	705a      	strb	r2, [r3, #1]
      break;
 800b588:	e04e      	b.n	800b628 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800b590:	2b00      	cmp	r3, #0
 800b592:	d019      	beq.n	800b5c8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b5a0:	23ff      	movs	r3, #255	@ 0xff
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 f926 	bl	800b7f4 <USBH_Get_StringDesc>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b5ac:	7bbb      	ldrb	r3, [r7, #14]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d103      	bne.n	800b5ba <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2207      	movs	r2, #7
 800b5b6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b5b8:	e038      	b.n	800b62c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b5ba:	7bbb      	ldrb	r3, [r7, #14]
 800b5bc:	2b03      	cmp	r3, #3
 800b5be:	d135      	bne.n	800b62c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2207      	movs	r2, #7
 800b5c4:	705a      	strb	r2, [r3, #1]
      break;
 800b5c6:	e031      	b.n	800b62c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2207      	movs	r2, #7
 800b5cc:	705a      	strb	r2, [r3, #1]
      break;
 800b5ce:	e02d      	b.n	800b62c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d017      	beq.n	800b60a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b5e6:	23ff      	movs	r3, #255	@ 0xff
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 f903 	bl	800b7f4 <USBH_Get_StringDesc>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b5f2:	7bbb      	ldrb	r3, [r7, #14]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d102      	bne.n	800b5fe <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b5fc:	e018      	b.n	800b630 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b5fe:	7bbb      	ldrb	r3, [r7, #14]
 800b600:	2b03      	cmp	r3, #3
 800b602:	d115      	bne.n	800b630 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800b604:	2300      	movs	r3, #0
 800b606:	73fb      	strb	r3, [r7, #15]
      break;
 800b608:	e012      	b.n	800b630 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800b60a:	2300      	movs	r3, #0
 800b60c:	73fb      	strb	r3, [r7, #15]
      break;
 800b60e:	e00f      	b.n	800b630 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800b610:	bf00      	nop
 800b612:	e00e      	b.n	800b632 <USBH_HandleEnum+0x3b6>
      break;
 800b614:	bf00      	nop
 800b616:	e00c      	b.n	800b632 <USBH_HandleEnum+0x3b6>
      break;
 800b618:	bf00      	nop
 800b61a:	e00a      	b.n	800b632 <USBH_HandleEnum+0x3b6>
      break;
 800b61c:	bf00      	nop
 800b61e:	e008      	b.n	800b632 <USBH_HandleEnum+0x3b6>
      break;
 800b620:	bf00      	nop
 800b622:	e006      	b.n	800b632 <USBH_HandleEnum+0x3b6>
      break;
 800b624:	bf00      	nop
 800b626:	e004      	b.n	800b632 <USBH_HandleEnum+0x3b6>
      break;
 800b628:	bf00      	nop
 800b62a:	e002      	b.n	800b632 <USBH_HandleEnum+0x3b6>
      break;
 800b62c:	bf00      	nop
 800b62e:	e000      	b.n	800b632 <USBH_HandleEnum+0x3b6>
      break;
 800b630:	bf00      	nop
  }
  return Status;
 800b632:	7bfb      	ldrb	r3, [r7, #15]
}
 800b634:	4618      	mov	r0, r3
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	683a      	ldr	r2, [r7, #0]
 800b64a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800b64e:	bf00      	nop
 800b650:	370c      	adds	r7, #12
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b082      	sub	sp, #8
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b668:	1c5a      	adds	r2, r3, #1
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 f804 	bl	800b67e <USBH_HandleSof>
}
 800b676:	bf00      	nop
 800b678:	3708      	adds	r7, #8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b082      	sub	sp, #8
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	2b0b      	cmp	r3, #11
 800b68e:	d10a      	bne.n	800b6a6 <USBH_HandleSof+0x28>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b696:	2b00      	cmp	r3, #0
 800b698:	d005      	beq.n	800b6a6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b6a0:	699b      	ldr	r3, [r3, #24]
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	4798      	blx	r3
  }
}
 800b6a6:	bf00      	nop
 800b6a8:	3708      	adds	r7, #8
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b6ae:	b480      	push	{r7}
 800b6b0:	b083      	sub	sp, #12
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b6be:	bf00      	nop
}
 800b6c0:	370c      	adds	r7, #12
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr

0800b6ca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b6ca:	b480      	push	{r7}
 800b6cc:	b083      	sub	sp, #12
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800b6da:	bf00      	nop
}
 800b6dc:	370c      	adds	r7, #12
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b083      	sub	sp, #12
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2200      	movs	r2, #0
 800b702:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b706:	2300      	movs	r3, #0
}
 800b708:	4618      	mov	r0, r3
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2201      	movs	r2, #1
 800b720:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2200      	movs	r2, #0
 800b728:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f004 fb2a 	bl	800fd8e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	791b      	ldrb	r3, [r3, #4]
 800b73e:	4619      	mov	r1, r3
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 fe89 	bl	800c458 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	795b      	ldrb	r3, [r3, #5]
 800b74a:	4619      	mov	r1, r3
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fe83 	bl	800c458 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	3708      	adds	r7, #8
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b086      	sub	sp, #24
 800b760:	af02      	add	r7, sp, #8
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	460b      	mov	r3, r1
 800b766:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b76e:	78fb      	ldrb	r3, [r7, #3]
 800b770:	b29b      	uxth	r3, r3
 800b772:	9300      	str	r3, [sp, #0]
 800b774:	4613      	mov	r3, r2
 800b776:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b77a:	2100      	movs	r1, #0
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 f864 	bl	800b84a <USBH_GetDescriptor>
 800b782:	4603      	mov	r3, r0
 800b784:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800b786:	7bfb      	ldrb	r3, [r7, #15]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d10a      	bne.n	800b7a2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f203 3026 	addw	r0, r3, #806	@ 0x326
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b798:	78fa      	ldrb	r2, [r7, #3]
 800b79a:	b292      	uxth	r2, r2
 800b79c:	4619      	mov	r1, r3
 800b79e:	f000 f919 	bl	800b9d4 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b7a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3710      	adds	r7, #16
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b086      	sub	sp, #24
 800b7b0:	af02      	add	r7, sp, #8
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	331c      	adds	r3, #28
 800b7bc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b7be:	887b      	ldrh	r3, [r7, #2]
 800b7c0:	9300      	str	r3, [sp, #0]
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 f83d 	bl	800b84a <USBH_GetDescriptor>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b7d4:	7bfb      	ldrb	r3, [r7, #15]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d107      	bne.n	800b7ea <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b7da:	887b      	ldrh	r3, [r7, #2]
 800b7dc:	461a      	mov	r2, r3
 800b7de:	68b9      	ldr	r1, [r7, #8]
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 f985 	bl	800baf0 <USBH_ParseCfgDesc>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b7ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3710      	adds	r7, #16
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b088      	sub	sp, #32
 800b7f8:	af02      	add	r7, sp, #8
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	607a      	str	r2, [r7, #4]
 800b7fe:	461a      	mov	r2, r3
 800b800:	460b      	mov	r3, r1
 800b802:	72fb      	strb	r3, [r7, #11]
 800b804:	4613      	mov	r3, r2
 800b806:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800b808:	7afb      	ldrb	r3, [r7, #11]
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800b810:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b818:	893b      	ldrh	r3, [r7, #8]
 800b81a:	9300      	str	r3, [sp, #0]
 800b81c:	460b      	mov	r3, r1
 800b81e:	2100      	movs	r1, #0
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f000 f812 	bl	800b84a <USBH_GetDescriptor>
 800b826:	4603      	mov	r3, r0
 800b828:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b82a:	7dfb      	ldrb	r3, [r7, #23]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d107      	bne.n	800b840 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b836:	893a      	ldrh	r2, [r7, #8]
 800b838:	6879      	ldr	r1, [r7, #4]
 800b83a:	4618      	mov	r0, r3
 800b83c:	f000 fb1e 	bl	800be7c <USBH_ParseStringDesc>
  }

  return status;
 800b840:	7dfb      	ldrb	r3, [r7, #23]
}
 800b842:	4618      	mov	r0, r3
 800b844:	3718      	adds	r7, #24
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}

0800b84a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b084      	sub	sp, #16
 800b84e:	af00      	add	r7, sp, #0
 800b850:	60f8      	str	r0, [r7, #12]
 800b852:	607b      	str	r3, [r7, #4]
 800b854:	460b      	mov	r3, r1
 800b856:	72fb      	strb	r3, [r7, #11]
 800b858:	4613      	mov	r3, r2
 800b85a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	789b      	ldrb	r3, [r3, #2]
 800b860:	2b01      	cmp	r3, #1
 800b862:	d11c      	bne.n	800b89e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b864:	7afb      	ldrb	r3, [r7, #11]
 800b866:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b86a:	b2da      	uxtb	r2, r3
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2206      	movs	r2, #6
 800b874:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	893a      	ldrh	r2, [r7, #8]
 800b87a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b87c:	893b      	ldrh	r3, [r7, #8]
 800b87e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b882:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b886:	d104      	bne.n	800b892 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f240 4209 	movw	r2, #1033	@ 0x409
 800b88e:	829a      	strh	r2, [r3, #20]
 800b890:	e002      	b.n	800b898 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2200      	movs	r2, #0
 800b896:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	8b3a      	ldrh	r2, [r7, #24]
 800b89c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b89e:	8b3b      	ldrh	r3, [r7, #24]
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	6879      	ldr	r1, [r7, #4]
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f000 fb36 	bl	800bf16 <USBH_CtlReq>
 800b8aa:	4603      	mov	r3, r0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3710      	adds	r7, #16
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b082      	sub	sp, #8
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	460b      	mov	r3, r1
 800b8be:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	789b      	ldrb	r3, [r3, #2]
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d10f      	bne.n	800b8e8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2205      	movs	r2, #5
 800b8d2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b8d4:	78fb      	ldrb	r3, [r7, #3]
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 fb12 	bl	800bf16 <USBH_CtlReq>
 800b8f2:	4603      	mov	r3, r0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3708      	adds	r7, #8
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	460b      	mov	r3, r1
 800b906:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	789b      	ldrb	r3, [r3, #2]
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d10e      	bne.n	800b92e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2209      	movs	r2, #9
 800b91a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	887a      	ldrh	r2, [r7, #2]
 800b920:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b92e:	2200      	movs	r2, #0
 800b930:	2100      	movs	r1, #0
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 faef 	bl	800bf16 <USBH_CtlReq>
 800b938:	4603      	mov	r3, r0
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3708      	adds	r7, #8
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}

0800b942 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b942:	b580      	push	{r7, lr}
 800b944:	b082      	sub	sp, #8
 800b946:	af00      	add	r7, sp, #0
 800b948:	6078      	str	r0, [r7, #4]
 800b94a:	460b      	mov	r3, r1
 800b94c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	789b      	ldrb	r3, [r3, #2]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d10f      	bne.n	800b976 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2203      	movs	r2, #3
 800b960:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b962:	78fb      	ldrb	r3, [r7, #3]
 800b964:	b29a      	uxth	r2, r3
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b976:	2200      	movs	r2, #0
 800b978:	2100      	movs	r1, #0
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 facb 	bl	800bf16 <USBH_CtlReq>
 800b980:	4603      	mov	r3, r0
}
 800b982:	4618      	mov	r0, r3
 800b984:	3708      	adds	r7, #8
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b082      	sub	sp, #8
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
 800b992:	460b      	mov	r3, r1
 800b994:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	789b      	ldrb	r3, [r3, #2]
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d10f      	bne.n	800b9be <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2202      	movs	r2, #2
 800b9a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b9b0:	78fb      	ldrb	r3, [r7, #3]
 800b9b2:	b29a      	uxth	r2, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800b9be:	2200      	movs	r2, #0
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 faa7 	bl	800bf16 <USBH_CtlReq>
 800b9c8:	4603      	mov	r3, r0
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
	...

0800b9d4 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	4613      	mov	r3, r2
 800b9e0:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	781a      	ldrb	r2, [r3, #0]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	785a      	ldrb	r2, [r3, #1]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	3302      	adds	r3, #2
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	3303      	adds	r3, #3
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	021b      	lsls	r3, r3, #8
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	4313      	orrs	r3, r2
 800ba06:	b29a      	uxth	r2, r3
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	791a      	ldrb	r2, [r3, #4]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	795a      	ldrb	r2, [r3, #5]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	799a      	ldrb	r2, [r3, #6]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	79da      	ldrb	r2, [r3, #7]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	79db      	ldrb	r3, [r3, #7]
 800ba30:	2b20      	cmp	r3, #32
 800ba32:	dc0f      	bgt.n	800ba54 <USBH_ParseDevDesc+0x80>
 800ba34:	2b08      	cmp	r3, #8
 800ba36:	db14      	blt.n	800ba62 <USBH_ParseDevDesc+0x8e>
 800ba38:	3b08      	subs	r3, #8
 800ba3a:	4a2c      	ldr	r2, [pc, #176]	@ (800baec <USBH_ParseDevDesc+0x118>)
 800ba3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ba40:	f003 0301 	and.w	r3, r3, #1
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	bf14      	ite	ne
 800ba48:	2301      	movne	r3, #1
 800ba4a:	2300      	moveq	r3, #0
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d102      	bne.n	800ba58 <USBH_ParseDevDesc+0x84>
 800ba52:	e006      	b.n	800ba62 <USBH_ParseDevDesc+0x8e>
 800ba54:	2b40      	cmp	r3, #64	@ 0x40
 800ba56:	d104      	bne.n	800ba62 <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	79da      	ldrb	r2, [r3, #7]
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	71da      	strb	r2, [r3, #7]
      break;
 800ba60:	e003      	b.n	800ba6a <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2240      	movs	r2, #64	@ 0x40
 800ba66:	71da      	strb	r2, [r3, #7]
      break;
 800ba68:	bf00      	nop
  }

  if (length > 8U)
 800ba6a:	88fb      	ldrh	r3, [r7, #6]
 800ba6c:	2b08      	cmp	r3, #8
 800ba6e:	d936      	bls.n	800bade <USBH_ParseDevDesc+0x10a>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	3308      	adds	r3, #8
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	461a      	mov	r2, r3
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	3309      	adds	r3, #9
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	021b      	lsls	r3, r3, #8
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	4313      	orrs	r3, r2
 800ba84:	b29a      	uxth	r2, r3
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	330a      	adds	r3, #10
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	461a      	mov	r2, r3
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	330b      	adds	r3, #11
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	021b      	lsls	r3, r3, #8
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	330c      	adds	r3, #12
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	461a      	mov	r2, r3
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	330d      	adds	r3, #13
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	021b      	lsls	r3, r3, #8
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	4313      	orrs	r3, r2
 800bab8:	b29a      	uxth	r2, r3
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	7b9a      	ldrb	r2, [r3, #14]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	7bda      	ldrb	r2, [r3, #15]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	7c1a      	ldrb	r2, [r3, #16]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	7c5a      	ldrb	r2, [r3, #17]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	745a      	strb	r2, [r3, #17]
  }
}
 800bade:	bf00      	nop
 800bae0:	3714      	adds	r7, #20
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr
 800baea:	bf00      	nop
 800baec:	01000101 	.word	0x01000101

0800baf0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b08c      	sub	sp, #48	@ 0x30
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	4613      	mov	r3, r2
 800bafc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800bb04:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800bb06:	2300      	movs	r3, #0
 800bb08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bb10:	2300      	movs	r3, #0
 800bb12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800bb16:	2300      	movs	r3, #0
 800bb18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	781a      	ldrb	r2, [r3, #0]
 800bb24:	6a3b      	ldr	r3, [r7, #32]
 800bb26:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	785a      	ldrb	r2, [r3, #1]
 800bb2c:	6a3b      	ldr	r3, [r7, #32]
 800bb2e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	3302      	adds	r3, #2
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	461a      	mov	r2, r3
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	3303      	adds	r3, #3
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	021b      	lsls	r3, r3, #8
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	4313      	orrs	r3, r2
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb4a:	bf28      	it	cs
 800bb4c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800bb50:	b29a      	uxth	r2, r3
 800bb52:	6a3b      	ldr	r3, [r7, #32]
 800bb54:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	791a      	ldrb	r2, [r3, #4]
 800bb5a:	6a3b      	ldr	r3, [r7, #32]
 800bb5c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	795a      	ldrb	r2, [r3, #5]
 800bb62:	6a3b      	ldr	r3, [r7, #32]
 800bb64:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	799a      	ldrb	r2, [r3, #6]
 800bb6a:	6a3b      	ldr	r3, [r7, #32]
 800bb6c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	79da      	ldrb	r2, [r3, #7]
 800bb72:	6a3b      	ldr	r3, [r7, #32]
 800bb74:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	7a1a      	ldrb	r2, [r3, #8]
 800bb7a:	6a3b      	ldr	r3, [r7, #32]
 800bb7c:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800bb7e:	6a3b      	ldr	r3, [r7, #32]
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	2b09      	cmp	r3, #9
 800bb84:	d002      	beq.n	800bb8c <USBH_ParseCfgDesc+0x9c>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800bb86:	6a3b      	ldr	r3, [r7, #32]
 800bb88:	2209      	movs	r2, #9
 800bb8a:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bb8c:	88fb      	ldrh	r3, [r7, #6]
 800bb8e:	2b09      	cmp	r3, #9
 800bb90:	f240 809d 	bls.w	800bcce <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 800bb94:	2309      	movs	r3, #9
 800bb96:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bb9c:	e081      	b.n	800bca2 <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bb9e:	f107 0316 	add.w	r3, r7, #22
 800bba2:	4619      	mov	r1, r3
 800bba4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bba6:	f000 f99c 	bl	800bee2 <USBH_GetNextDesc>
 800bbaa:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800bbac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbae:	785b      	ldrb	r3, [r3, #1]
 800bbb0:	2b04      	cmp	r3, #4
 800bbb2:	d176      	bne.n	800bca2 <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800bbb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	2b09      	cmp	r3, #9
 800bbba:	d002      	beq.n	800bbc2 <USBH_ParseCfgDesc+0xd2>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800bbbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbbe:	2209      	movs	r2, #9
 800bbc0:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800bbc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbc6:	221a      	movs	r2, #26
 800bbc8:	fb02 f303 	mul.w	r3, r2, r3
 800bbcc:	3308      	adds	r3, #8
 800bbce:	6a3a      	ldr	r2, [r7, #32]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	3302      	adds	r3, #2
 800bbd4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bbd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bbd8:	69f8      	ldr	r0, [r7, #28]
 800bbda:	f000 f87e 	bl	800bcda <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bbe8:	e043      	b.n	800bc72 <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bbea:	f107 0316 	add.w	r3, r7, #22
 800bbee:	4619      	mov	r1, r3
 800bbf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bbf2:	f000 f976 	bl	800bee2 <USBH_GetNextDesc>
 800bbf6:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bbf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbfa:	785b      	ldrb	r3, [r3, #1]
 800bbfc:	2b05      	cmp	r3, #5
 800bbfe:	d138      	bne.n	800bc72 <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	795b      	ldrb	r3, [r3, #5]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d10f      	bne.n	800bc28 <USBH_ParseCfgDesc+0x138>
 800bc08:	69fb      	ldr	r3, [r7, #28]
 800bc0a:	799b      	ldrb	r3, [r3, #6]
 800bc0c:	2b02      	cmp	r3, #2
 800bc0e:	d10b      	bne.n	800bc28 <USBH_ParseCfgDesc+0x138>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bc10:	69fb      	ldr	r3, [r7, #28]
 800bc12:	79db      	ldrb	r3, [r3, #7]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10f      	bne.n	800bc38 <USBH_ParseCfgDesc+0x148>
 800bc18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	2b09      	cmp	r3, #9
 800bc1e:	d00b      	beq.n	800bc38 <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 800bc20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc22:	2209      	movs	r2, #9
 800bc24:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bc26:	e007      	b.n	800bc38 <USBH_ParseCfgDesc+0x148>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800bc28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	2b07      	cmp	r3, #7
 800bc2e:	d004      	beq.n	800bc3a <USBH_ParseCfgDesc+0x14a>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800bc30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc32:	2207      	movs	r2, #7
 800bc34:	701a      	strb	r2, [r3, #0]
 800bc36:	e000      	b.n	800bc3a <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bc38:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bc3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc3e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800bc42:	3201      	adds	r2, #1
 800bc44:	00d2      	lsls	r2, r2, #3
 800bc46:	211a      	movs	r1, #26
 800bc48:	fb01 f303 	mul.w	r3, r1, r3
 800bc4c:	4413      	add	r3, r2
 800bc4e:	3308      	adds	r3, #8
 800bc50:	6a3a      	ldr	r2, [r7, #32]
 800bc52:	4413      	add	r3, r2
 800bc54:	3304      	adds	r3, #4
 800bc56:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800bc58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc5a:	69b9      	ldr	r1, [r7, #24]
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	f000 f86b 	bl	800bd38 <USBH_ParseEPDesc>
 800bc62:	4603      	mov	r3, r0
 800bc64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800bc68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bc72:	69fb      	ldr	r3, [r7, #28]
 800bc74:	791b      	ldrb	r3, [r3, #4]
 800bc76:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d204      	bcs.n	800bc88 <USBH_ParseCfgDesc+0x198>
 800bc7e:	6a3b      	ldr	r3, [r7, #32]
 800bc80:	885a      	ldrh	r2, [r3, #2]
 800bc82:	8afb      	ldrh	r3, [r7, #22]
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d8b0      	bhi.n	800bbea <USBH_ParseCfgDesc+0xfa>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	791b      	ldrb	r3, [r3, #4]
 800bc8c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d201      	bcs.n	800bc98 <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 800bc94:	2303      	movs	r3, #3
 800bc96:	e01c      	b.n	800bcd2 <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 800bc98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bca2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d805      	bhi.n	800bcb6 <USBH_ParseCfgDesc+0x1c6>
 800bcaa:	6a3b      	ldr	r3, [r7, #32]
 800bcac:	885a      	ldrh	r2, [r3, #2]
 800bcae:	8afb      	ldrh	r3, [r7, #22]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	f63f af74 	bhi.w	800bb9e <USBH_ParseCfgDesc+0xae>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800bcb6:	6a3b      	ldr	r3, [r7, #32]
 800bcb8:	791b      	ldrb	r3, [r3, #4]
 800bcba:	2b02      	cmp	r3, #2
 800bcbc:	bf28      	it	cs
 800bcbe:	2302      	movcs	r3, #2
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d201      	bcs.n	800bcce <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 800bcca:	2303      	movs	r3, #3
 800bccc:	e001      	b.n	800bcd2 <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 800bcce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3730      	adds	r7, #48	@ 0x30
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800bcda:	b480      	push	{r7}
 800bcdc:	b083      	sub	sp, #12
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
 800bce2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	781a      	ldrb	r2, [r3, #0]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	785a      	ldrb	r2, [r3, #1]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	789a      	ldrb	r2, [r3, #2]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	78da      	ldrb	r2, [r3, #3]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	791a      	ldrb	r2, [r3, #4]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	795a      	ldrb	r2, [r3, #5]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	799a      	ldrb	r2, [r3, #6]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	79da      	ldrb	r2, [r3, #7]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	7a1a      	ldrb	r2, [r3, #8]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	721a      	strb	r2, [r3, #8]
}
 800bd2c:	bf00      	nop
 800bd2e:	370c      	adds	r7, #12
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b087      	sub	sp, #28
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800bd44:	2300      	movs	r3, #0
 800bd46:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	781a      	ldrb	r2, [r3, #0]
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	785a      	ldrb	r2, [r3, #1]
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	789a      	ldrb	r2, [r3, #2]
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	78da      	ldrb	r2, [r3, #3]
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	3304      	adds	r3, #4
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	461a      	mov	r2, r3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	3305      	adds	r3, #5
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	021b      	lsls	r3, r3, #8
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	b29a      	uxth	r2, r3
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	799a      	ldrb	r2, [r3, #6]
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	889b      	ldrh	r3, [r3, #4]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d102      	bne.n	800bd98 <USBH_ParseEPDesc+0x60>
  {
    status = USBH_NOT_SUPPORTED;
 800bd92:	2303      	movs	r3, #3
 800bd94:	75fb      	strb	r3, [r7, #23]
 800bd96:	e031      	b.n	800bdfc <USBH_ParseEPDesc+0xc4>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	889b      	ldrh	r3, [r3, #4]
 800bd9c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800bda0:	f023 0307 	bic.w	r3, r3, #7
 800bda4:	b29a      	uxth	r2, r3
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	889b      	ldrh	r3, [r3, #4]
 800bdae:	b21a      	sxth	r2, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	3304      	adds	r3, #4
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	3305      	adds	r3, #5
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	021b      	lsls	r3, r3, #8
 800bdc0:	b29b      	uxth	r3, r3
 800bdc2:	430b      	orrs	r3, r1
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d10f      	bne.n	800bdee <USBH_ParseEPDesc+0xb6>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	3304      	adds	r3, #4
 800bdd2:	781b      	ldrb	r3, [r3, #0]
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	3305      	adds	r3, #5
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	021b      	lsls	r3, r3, #8
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	430b      	orrs	r3, r1
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	b21b      	sxth	r3, r3
 800bde6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bdea:	b21b      	sxth	r3, r3
 800bdec:	e001      	b.n	800bdf2 <USBH_ParseEPDesc+0xba>
 800bdee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	b21b      	sxth	r3, r3
 800bdf6:	b29a      	uxth	r2, r3
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800be02:	2b00      	cmp	r3, #0
 800be04:	d116      	bne.n	800be34 <USBH_ParseEPDesc+0xfc>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	78db      	ldrb	r3, [r3, #3]
 800be0a:	f003 0303 	and.w	r3, r3, #3
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d005      	beq.n	800be1e <USBH_ParseEPDesc+0xe6>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	78db      	ldrb	r3, [r3, #3]
 800be16:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800be1a:	2b03      	cmp	r3, #3
 800be1c:	d127      	bne.n	800be6e <USBH_ParseEPDesc+0x136>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	799b      	ldrb	r3, [r3, #6]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d003      	beq.n	800be2e <USBH_ParseEPDesc+0xf6>
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	799b      	ldrb	r3, [r3, #6]
 800be2a:	2b10      	cmp	r3, #16
 800be2c:	d91f      	bls.n	800be6e <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800be2e:	2303      	movs	r3, #3
 800be30:	75fb      	strb	r3, [r7, #23]
 800be32:	e01c      	b.n	800be6e <USBH_ParseEPDesc+0x136>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	78db      	ldrb	r3, [r3, #3]
 800be38:	f003 0303 	and.w	r3, r3, #3
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d10a      	bne.n	800be56 <USBH_ParseEPDesc+0x11e>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	799b      	ldrb	r3, [r3, #6]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d003      	beq.n	800be50 <USBH_ParseEPDesc+0x118>
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	799b      	ldrb	r3, [r3, #6]
 800be4c:	2b10      	cmp	r3, #16
 800be4e:	d90e      	bls.n	800be6e <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800be50:	2303      	movs	r3, #3
 800be52:	75fb      	strb	r3, [r7, #23]
 800be54:	e00b      	b.n	800be6e <USBH_ParseEPDesc+0x136>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	78db      	ldrb	r3, [r3, #3]
 800be5a:	f003 0303 	and.w	r3, r3, #3
 800be5e:	2b03      	cmp	r3, #3
 800be60:	d105      	bne.n	800be6e <USBH_ParseEPDesc+0x136>
    {
      if (ep_descriptor->bInterval == 0U)
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	799b      	ldrb	r3, [r3, #6]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d101      	bne.n	800be6e <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800be6a:	2303      	movs	r3, #3
 800be6c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800be6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800be70:	4618      	mov	r0, r3
 800be72:	371c      	adds	r7, #28
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b087      	sub	sp, #28
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	4613      	mov	r3, r2
 800be88:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	3301      	adds	r3, #1
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	2b03      	cmp	r3, #3
 800be92:	d120      	bne.n	800bed6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	1e9a      	subs	r2, r3, #2
 800be9a:	88fb      	ldrh	r3, [r7, #6]
 800be9c:	4293      	cmp	r3, r2
 800be9e:	bf28      	it	cs
 800bea0:	4613      	movcs	r3, r2
 800bea2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	3302      	adds	r3, #2
 800bea8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800beaa:	2300      	movs	r3, #0
 800beac:	82fb      	strh	r3, [r7, #22]
 800beae:	e00b      	b.n	800bec8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800beb0:	8afb      	ldrh	r3, [r7, #22]
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	4413      	add	r3, r2
 800beb6:	781a      	ldrb	r2, [r3, #0]
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	3301      	adds	r3, #1
 800bec0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bec2:	8afb      	ldrh	r3, [r7, #22]
 800bec4:	3302      	adds	r3, #2
 800bec6:	82fb      	strh	r3, [r7, #22]
 800bec8:	8afa      	ldrh	r2, [r7, #22]
 800beca:	8abb      	ldrh	r3, [r7, #20]
 800becc:	429a      	cmp	r2, r3
 800bece:	d3ef      	bcc.n	800beb0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	2200      	movs	r2, #0
 800bed4:	701a      	strb	r2, [r3, #0]
  }
}
 800bed6:	bf00      	nop
 800bed8:	371c      	adds	r7, #28
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr

0800bee2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800bee2:	b480      	push	{r7}
 800bee4:	b085      	sub	sp, #20
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
 800beea:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	881b      	ldrh	r3, [r3, #0]
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	7812      	ldrb	r2, [r2, #0]
 800bef4:	4413      	add	r3, r2
 800bef6:	b29a      	uxth	r2, r3
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4413      	add	r3, r2
 800bf06:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bf08:	68fb      	ldr	r3, [r7, #12]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3714      	adds	r7, #20
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr

0800bf16 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b086      	sub	sp, #24
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	60f8      	str	r0, [r7, #12]
 800bf1e:	60b9      	str	r1, [r7, #8]
 800bf20:	4613      	mov	r3, r2
 800bf22:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bf24:	2301      	movs	r3, #1
 800bf26:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	789b      	ldrb	r3, [r3, #2]
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d002      	beq.n	800bf36 <USBH_CtlReq+0x20>
 800bf30:	2b02      	cmp	r3, #2
 800bf32:	d00f      	beq.n	800bf54 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bf34:	e027      	b.n	800bf86 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	68ba      	ldr	r2, [r7, #8]
 800bf3a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	88fa      	ldrh	r2, [r7, #6]
 800bf40:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2201      	movs	r2, #1
 800bf46:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	2202      	movs	r2, #2
 800bf4c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	75fb      	strb	r3, [r7, #23]
      break;
 800bf52:	e018      	b.n	800bf86 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bf54:	68f8      	ldr	r0, [r7, #12]
 800bf56:	f000 f81b 	bl	800bf90 <USBH_HandleControl>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bf5e:	7dfb      	ldrb	r3, [r7, #23]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d002      	beq.n	800bf6a <USBH_CtlReq+0x54>
 800bf64:	7dfb      	ldrb	r3, [r7, #23]
 800bf66:	2b03      	cmp	r3, #3
 800bf68:	d106      	bne.n	800bf78 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2200      	movs	r2, #0
 800bf74:	761a      	strb	r2, [r3, #24]
      break;
 800bf76:	e005      	b.n	800bf84 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bf78:	7dfb      	ldrb	r3, [r7, #23]
 800bf7a:	2b02      	cmp	r3, #2
 800bf7c:	d102      	bne.n	800bf84 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2201      	movs	r2, #1
 800bf82:	709a      	strb	r2, [r3, #2]
      break;
 800bf84:	bf00      	nop
  }
  return status;
 800bf86:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3718      	adds	r7, #24
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b086      	sub	sp, #24
 800bf94:	af02      	add	r7, sp, #8
 800bf96:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	7e1b      	ldrb	r3, [r3, #24]
 800bfa4:	3b01      	subs	r3, #1
 800bfa6:	2b0a      	cmp	r3, #10
 800bfa8:	f200 8156 	bhi.w	800c258 <USBH_HandleControl+0x2c8>
 800bfac:	a201      	add	r2, pc, #4	@ (adr r2, 800bfb4 <USBH_HandleControl+0x24>)
 800bfae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb2:	bf00      	nop
 800bfb4:	0800bfe1 	.word	0x0800bfe1
 800bfb8:	0800bffb 	.word	0x0800bffb
 800bfbc:	0800c065 	.word	0x0800c065
 800bfc0:	0800c08b 	.word	0x0800c08b
 800bfc4:	0800c0c3 	.word	0x0800c0c3
 800bfc8:	0800c0ed 	.word	0x0800c0ed
 800bfcc:	0800c13f 	.word	0x0800c13f
 800bfd0:	0800c161 	.word	0x0800c161
 800bfd4:	0800c19d 	.word	0x0800c19d
 800bfd8:	0800c1c3 	.word	0x0800c1c3
 800bfdc:	0800c201 	.word	0x0800c201
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f103 0110 	add.w	r1, r3, #16
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	795b      	ldrb	r3, [r3, #5]
 800bfea:	461a      	mov	r2, r3
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 f943 	bl	800c278 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2202      	movs	r2, #2
 800bff6:	761a      	strb	r2, [r3, #24]
      break;
 800bff8:	e139      	b.n	800c26e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	795b      	ldrb	r3, [r3, #5]
 800bffe:	4619      	mov	r1, r3
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f003 ffb3 	bl	800ff6c <USBH_LL_GetURBState>
 800c006:	4603      	mov	r3, r0
 800c008:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c00a:	7bbb      	ldrb	r3, [r7, #14]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d11e      	bne.n	800c04e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	7c1b      	ldrb	r3, [r3, #16]
 800c014:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c018:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	8adb      	ldrh	r3, [r3, #22]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00a      	beq.n	800c038 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c022:	7b7b      	ldrb	r3, [r7, #13]
 800c024:	2b80      	cmp	r3, #128	@ 0x80
 800c026:	d103      	bne.n	800c030 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2203      	movs	r2, #3
 800c02c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c02e:	e115      	b.n	800c25c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2205      	movs	r2, #5
 800c034:	761a      	strb	r2, [r3, #24]
      break;
 800c036:	e111      	b.n	800c25c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c038:	7b7b      	ldrb	r3, [r7, #13]
 800c03a:	2b80      	cmp	r3, #128	@ 0x80
 800c03c:	d103      	bne.n	800c046 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2209      	movs	r2, #9
 800c042:	761a      	strb	r2, [r3, #24]
      break;
 800c044:	e10a      	b.n	800c25c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2207      	movs	r2, #7
 800c04a:	761a      	strb	r2, [r3, #24]
      break;
 800c04c:	e106      	b.n	800c25c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c04e:	7bbb      	ldrb	r3, [r7, #14]
 800c050:	2b04      	cmp	r3, #4
 800c052:	d003      	beq.n	800c05c <USBH_HandleControl+0xcc>
 800c054:	7bbb      	ldrb	r3, [r7, #14]
 800c056:	2b02      	cmp	r3, #2
 800c058:	f040 8100 	bne.w	800c25c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	220b      	movs	r2, #11
 800c060:	761a      	strb	r2, [r3, #24]
      break;
 800c062:	e0fb      	b.n	800c25c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6899      	ldr	r1, [r3, #8]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	899a      	ldrh	r2, [r3, #12]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	791b      	ldrb	r3, [r3, #4]
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 f93a 	bl	800c2f6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2204      	movs	r2, #4
 800c086:	761a      	strb	r2, [r3, #24]
      break;
 800c088:	e0f1      	b.n	800c26e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	791b      	ldrb	r3, [r3, #4]
 800c08e:	4619      	mov	r1, r3
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f003 ff6b 	bl	800ff6c <USBH_LL_GetURBState>
 800c096:	4603      	mov	r3, r0
 800c098:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c09a:	7bbb      	ldrb	r3, [r7, #14]
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d102      	bne.n	800c0a6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2209      	movs	r2, #9
 800c0a4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c0a6:	7bbb      	ldrb	r3, [r7, #14]
 800c0a8:	2b05      	cmp	r3, #5
 800c0aa:	d102      	bne.n	800c0b2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c0ac:	2303      	movs	r3, #3
 800c0ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c0b0:	e0d6      	b.n	800c260 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c0b2:	7bbb      	ldrb	r3, [r7, #14]
 800c0b4:	2b04      	cmp	r3, #4
 800c0b6:	f040 80d3 	bne.w	800c260 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	220b      	movs	r2, #11
 800c0be:	761a      	strb	r2, [r3, #24]
      break;
 800c0c0:	e0ce      	b.n	800c260 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6899      	ldr	r1, [r3, #8]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	899a      	ldrh	r2, [r3, #12]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	795b      	ldrb	r3, [r3, #5]
 800c0ce:	2001      	movs	r0, #1
 800c0d0:	9000      	str	r0, [sp, #0]
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 f8ea 	bl	800c2ac <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c0de:	b29a      	uxth	r2, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2206      	movs	r2, #6
 800c0e8:	761a      	strb	r2, [r3, #24]
      break;
 800c0ea:	e0c0      	b.n	800c26e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	795b      	ldrb	r3, [r3, #5]
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f003 ff3a 	bl	800ff6c <USBH_LL_GetURBState>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c0fc:	7bbb      	ldrb	r3, [r7, #14]
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d103      	bne.n	800c10a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2207      	movs	r2, #7
 800c106:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c108:	e0ac      	b.n	800c264 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c10a:	7bbb      	ldrb	r3, [r7, #14]
 800c10c:	2b05      	cmp	r3, #5
 800c10e:	d105      	bne.n	800c11c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	220c      	movs	r2, #12
 800c114:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c116:	2303      	movs	r3, #3
 800c118:	73fb      	strb	r3, [r7, #15]
      break;
 800c11a:	e0a3      	b.n	800c264 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c11c:	7bbb      	ldrb	r3, [r7, #14]
 800c11e:	2b02      	cmp	r3, #2
 800c120:	d103      	bne.n	800c12a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2205      	movs	r2, #5
 800c126:	761a      	strb	r2, [r3, #24]
      break;
 800c128:	e09c      	b.n	800c264 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c12a:	7bbb      	ldrb	r3, [r7, #14]
 800c12c:	2b04      	cmp	r3, #4
 800c12e:	f040 8099 	bne.w	800c264 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	220b      	movs	r2, #11
 800c136:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c138:	2302      	movs	r3, #2
 800c13a:	73fb      	strb	r3, [r7, #15]
      break;
 800c13c:	e092      	b.n	800c264 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	791b      	ldrb	r3, [r3, #4]
 800c142:	2200      	movs	r2, #0
 800c144:	2100      	movs	r1, #0
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 f8d5 	bl	800c2f6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c152:	b29a      	uxth	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2208      	movs	r2, #8
 800c15c:	761a      	strb	r2, [r3, #24]

      break;
 800c15e:	e086      	b.n	800c26e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	791b      	ldrb	r3, [r3, #4]
 800c164:	4619      	mov	r1, r3
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f003 ff00 	bl	800ff6c <USBH_LL_GetURBState>
 800c16c:	4603      	mov	r3, r0
 800c16e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c170:	7bbb      	ldrb	r3, [r7, #14]
 800c172:	2b01      	cmp	r3, #1
 800c174:	d105      	bne.n	800c182 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	220d      	movs	r2, #13
 800c17a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c17c:	2300      	movs	r3, #0
 800c17e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c180:	e072      	b.n	800c268 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c182:	7bbb      	ldrb	r3, [r7, #14]
 800c184:	2b04      	cmp	r3, #4
 800c186:	d103      	bne.n	800c190 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	220b      	movs	r2, #11
 800c18c:	761a      	strb	r2, [r3, #24]
      break;
 800c18e:	e06b      	b.n	800c268 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c190:	7bbb      	ldrb	r3, [r7, #14]
 800c192:	2b05      	cmp	r3, #5
 800c194:	d168      	bne.n	800c268 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c196:	2303      	movs	r3, #3
 800c198:	73fb      	strb	r3, [r7, #15]
      break;
 800c19a:	e065      	b.n	800c268 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	795b      	ldrb	r3, [r3, #5]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	9200      	str	r2, [sp, #0]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	2100      	movs	r1, #0
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 f87f 	bl	800c2ac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c1b4:	b29a      	uxth	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	220a      	movs	r2, #10
 800c1be:	761a      	strb	r2, [r3, #24]
      break;
 800c1c0:	e055      	b.n	800c26e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	795b      	ldrb	r3, [r3, #5]
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f003 fecf 	bl	800ff6c <USBH_LL_GetURBState>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c1d2:	7bbb      	ldrb	r3, [r7, #14]
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d105      	bne.n	800c1e4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	220d      	movs	r2, #13
 800c1e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c1e2:	e043      	b.n	800c26c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c1e4:	7bbb      	ldrb	r3, [r7, #14]
 800c1e6:	2b02      	cmp	r3, #2
 800c1e8:	d103      	bne.n	800c1f2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2209      	movs	r2, #9
 800c1ee:	761a      	strb	r2, [r3, #24]
      break;
 800c1f0:	e03c      	b.n	800c26c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c1f2:	7bbb      	ldrb	r3, [r7, #14]
 800c1f4:	2b04      	cmp	r3, #4
 800c1f6:	d139      	bne.n	800c26c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	220b      	movs	r2, #11
 800c1fc:	761a      	strb	r2, [r3, #24]
      break;
 800c1fe:	e035      	b.n	800c26c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	7e5b      	ldrb	r3, [r3, #25]
 800c204:	3301      	adds	r3, #1
 800c206:	b2da      	uxtb	r2, r3
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	765a      	strb	r2, [r3, #25]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	7e5b      	ldrb	r3, [r3, #25]
 800c210:	2b02      	cmp	r3, #2
 800c212:	d806      	bhi.n	800c222 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2201      	movs	r2, #1
 800c218:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2201      	movs	r2, #1
 800c21e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c220:	e025      	b.n	800c26e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c228:	2106      	movs	r1, #6
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2200      	movs	r2, #0
 800c232:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	795b      	ldrb	r3, [r3, #5]
 800c238:	4619      	mov	r1, r3
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 f90c 	bl	800c458 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	791b      	ldrb	r3, [r3, #4]
 800c244:	4619      	mov	r1, r3
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 f906 	bl	800c458 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c252:	2302      	movs	r3, #2
 800c254:	73fb      	strb	r3, [r7, #15]
      break;
 800c256:	e00a      	b.n	800c26e <USBH_HandleControl+0x2de>

    default:
      break;
 800c258:	bf00      	nop
 800c25a:	e008      	b.n	800c26e <USBH_HandleControl+0x2de>
      break;
 800c25c:	bf00      	nop
 800c25e:	e006      	b.n	800c26e <USBH_HandleControl+0x2de>
      break;
 800c260:	bf00      	nop
 800c262:	e004      	b.n	800c26e <USBH_HandleControl+0x2de>
      break;
 800c264:	bf00      	nop
 800c266:	e002      	b.n	800c26e <USBH_HandleControl+0x2de>
      break;
 800c268:	bf00      	nop
 800c26a:	e000      	b.n	800c26e <USBH_HandleControl+0x2de>
      break;
 800c26c:	bf00      	nop
  }

  return status;
 800c26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c270:	4618      	mov	r0, r3
 800c272:	3710      	adds	r7, #16
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b088      	sub	sp, #32
 800c27c:	af04      	add	r7, sp, #16
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	4613      	mov	r3, r2
 800c284:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c286:	79f9      	ldrb	r1, [r7, #7]
 800c288:	2300      	movs	r3, #0
 800c28a:	9303      	str	r3, [sp, #12]
 800c28c:	2308      	movs	r3, #8
 800c28e:	9302      	str	r3, [sp, #8]
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	9301      	str	r3, [sp, #4]
 800c294:	2300      	movs	r3, #0
 800c296:	9300      	str	r3, [sp, #0]
 800c298:	2300      	movs	r3, #0
 800c29a:	2200      	movs	r2, #0
 800c29c:	68f8      	ldr	r0, [r7, #12]
 800c29e:	f003 fe34 	bl	800ff0a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c2a2:	2300      	movs	r3, #0
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3710      	adds	r7, #16
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b088      	sub	sp, #32
 800c2b0:	af04      	add	r7, sp, #16
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	60b9      	str	r1, [r7, #8]
 800c2b6:	4611      	mov	r1, r2
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	80fb      	strh	r3, [r7, #6]
 800c2be:	4613      	mov	r3, r2
 800c2c0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d001      	beq.n	800c2d0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c2d0:	7979      	ldrb	r1, [r7, #5]
 800c2d2:	7e3b      	ldrb	r3, [r7, #24]
 800c2d4:	9303      	str	r3, [sp, #12]
 800c2d6:	88fb      	ldrh	r3, [r7, #6]
 800c2d8:	9302      	str	r3, [sp, #8]
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	9301      	str	r3, [sp, #4]
 800c2de:	2301      	movs	r3, #1
 800c2e0:	9300      	str	r3, [sp, #0]
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f003 fe0f 	bl	800ff0a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c2ec:	2300      	movs	r3, #0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3710      	adds	r7, #16
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c2f6:	b580      	push	{r7, lr}
 800c2f8:	b088      	sub	sp, #32
 800c2fa:	af04      	add	r7, sp, #16
 800c2fc:	60f8      	str	r0, [r7, #12]
 800c2fe:	60b9      	str	r1, [r7, #8]
 800c300:	4611      	mov	r1, r2
 800c302:	461a      	mov	r2, r3
 800c304:	460b      	mov	r3, r1
 800c306:	80fb      	strh	r3, [r7, #6]
 800c308:	4613      	mov	r3, r2
 800c30a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c30c:	7979      	ldrb	r1, [r7, #5]
 800c30e:	2300      	movs	r3, #0
 800c310:	9303      	str	r3, [sp, #12]
 800c312:	88fb      	ldrh	r3, [r7, #6]
 800c314:	9302      	str	r3, [sp, #8]
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	9301      	str	r3, [sp, #4]
 800c31a:	2301      	movs	r3, #1
 800c31c:	9300      	str	r3, [sp, #0]
 800c31e:	2300      	movs	r3, #0
 800c320:	2201      	movs	r2, #1
 800c322:	68f8      	ldr	r0, [r7, #12]
 800c324:	f003 fdf1 	bl	800ff0a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c328:	2300      	movs	r3, #0

}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b088      	sub	sp, #32
 800c336:	af04      	add	r7, sp, #16
 800c338:	60f8      	str	r0, [r7, #12]
 800c33a:	60b9      	str	r1, [r7, #8]
 800c33c:	4611      	mov	r1, r2
 800c33e:	461a      	mov	r2, r3
 800c340:	460b      	mov	r3, r1
 800c342:	80fb      	strh	r3, [r7, #6]
 800c344:	4613      	mov	r3, r2
 800c346:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d001      	beq.n	800c356 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c352:	2300      	movs	r3, #0
 800c354:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c356:	7979      	ldrb	r1, [r7, #5]
 800c358:	7e3b      	ldrb	r3, [r7, #24]
 800c35a:	9303      	str	r3, [sp, #12]
 800c35c:	88fb      	ldrh	r3, [r7, #6]
 800c35e:	9302      	str	r3, [sp, #8]
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	9301      	str	r3, [sp, #4]
 800c364:	2301      	movs	r3, #1
 800c366:	9300      	str	r3, [sp, #0]
 800c368:	2302      	movs	r3, #2
 800c36a:	2200      	movs	r2, #0
 800c36c:	68f8      	ldr	r0, [r7, #12]
 800c36e:	f003 fdcc 	bl	800ff0a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c372:	2300      	movs	r3, #0
}
 800c374:	4618      	mov	r0, r3
 800c376:	3710      	adds	r7, #16
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b088      	sub	sp, #32
 800c380:	af04      	add	r7, sp, #16
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	4611      	mov	r1, r2
 800c388:	461a      	mov	r2, r3
 800c38a:	460b      	mov	r3, r1
 800c38c:	80fb      	strh	r3, [r7, #6]
 800c38e:	4613      	mov	r3, r2
 800c390:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c392:	7979      	ldrb	r1, [r7, #5]
 800c394:	2300      	movs	r3, #0
 800c396:	9303      	str	r3, [sp, #12]
 800c398:	88fb      	ldrh	r3, [r7, #6]
 800c39a:	9302      	str	r3, [sp, #8]
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	9301      	str	r3, [sp, #4]
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	9300      	str	r3, [sp, #0]
 800c3a4:	2302      	movs	r3, #2
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	68f8      	ldr	r0, [r7, #12]
 800c3aa:	f003 fdae 	bl	800ff0a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c3ae:	2300      	movs	r3, #0
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3710      	adds	r7, #16
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b086      	sub	sp, #24
 800c3bc:	af04      	add	r7, sp, #16
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	4608      	mov	r0, r1
 800c3c2:	4611      	mov	r1, r2
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	70fb      	strb	r3, [r7, #3]
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	70bb      	strb	r3, [r7, #2]
 800c3ce:	4613      	mov	r3, r2
 800c3d0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c3d2:	7878      	ldrb	r0, [r7, #1]
 800c3d4:	78ba      	ldrb	r2, [r7, #2]
 800c3d6:	78f9      	ldrb	r1, [r7, #3]
 800c3d8:	8b3b      	ldrh	r3, [r7, #24]
 800c3da:	9302      	str	r3, [sp, #8]
 800c3dc:	7d3b      	ldrb	r3, [r7, #20]
 800c3de:	9301      	str	r3, [sp, #4]
 800c3e0:	7c3b      	ldrb	r3, [r7, #16]
 800c3e2:	9300      	str	r3, [sp, #0]
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f003 fd41 	bl	800fe6e <USBH_LL_OpenPipe>

  return USBH_OK;
 800c3ec:	2300      	movs	r3, #0
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3708      	adds	r7, #8
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b082      	sub	sp, #8
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
 800c3fe:	460b      	mov	r3, r1
 800c400:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c402:	78fb      	ldrb	r3, [r7, #3]
 800c404:	4619      	mov	r1, r3
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f003 fd60 	bl	800fecc <USBH_LL_ClosePipe>

  return USBH_OK;
 800c40c:	2300      	movs	r3, #0
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3708      	adds	r7, #8
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}

0800c416 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c416:	b580      	push	{r7, lr}
 800c418:	b084      	sub	sp, #16
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
 800c41e:	460b      	mov	r3, r1
 800c420:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 f836 	bl	800c494 <USBH_GetFreePipe>
 800c428:	4603      	mov	r3, r0
 800c42a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c42c:	89fb      	ldrh	r3, [r7, #14]
 800c42e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c432:	4293      	cmp	r3, r2
 800c434:	d00a      	beq.n	800c44c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c436:	78fa      	ldrb	r2, [r7, #3]
 800c438:	89fb      	ldrh	r3, [r7, #14]
 800c43a:	f003 030f 	and.w	r3, r3, #15
 800c43e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c442:	6879      	ldr	r1, [r7, #4]
 800c444:	33e0      	adds	r3, #224	@ 0xe0
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	440b      	add	r3, r1
 800c44a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c44c:	89fb      	ldrh	r3, [r7, #14]
 800c44e:	b2db      	uxtb	r3, r3
}
 800c450:	4618      	mov	r0, r3
 800c452:	3710      	adds	r7, #16
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c458:	b480      	push	{r7}
 800c45a:	b083      	sub	sp, #12
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	460b      	mov	r3, r1
 800c462:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c464:	78fb      	ldrb	r3, [r7, #3]
 800c466:	2b0f      	cmp	r3, #15
 800c468:	d80d      	bhi.n	800c486 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c46a:	78fb      	ldrb	r3, [r7, #3]
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	33e0      	adds	r3, #224	@ 0xe0
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	4413      	add	r3, r2
 800c474:	685a      	ldr	r2, [r3, #4]
 800c476:	78fb      	ldrb	r3, [r7, #3]
 800c478:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c47c:	6879      	ldr	r1, [r7, #4]
 800c47e:	33e0      	adds	r3, #224	@ 0xe0
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	440b      	add	r3, r1
 800c484:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c486:	2300      	movs	r3, #0
}
 800c488:	4618      	mov	r0, r3
 800c48a:	370c      	adds	r7, #12
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c494:	b480      	push	{r7}
 800c496:	b085      	sub	sp, #20
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c49c:	2300      	movs	r3, #0
 800c49e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	73fb      	strb	r3, [r7, #15]
 800c4a4:	e00f      	b.n	800c4c6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c4a6:	7bfb      	ldrb	r3, [r7, #15]
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	33e0      	adds	r3, #224	@ 0xe0
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	4413      	add	r3, r2
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d102      	bne.n	800c4c0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c4ba:	7bfb      	ldrb	r3, [r7, #15]
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	e007      	b.n	800c4d0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c4c0:	7bfb      	ldrb	r3, [r7, #15]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	73fb      	strb	r3, [r7, #15]
 800c4c6:	7bfb      	ldrb	r3, [r7, #15]
 800c4c8:	2b0f      	cmp	r3, #15
 800c4ca:	d9ec      	bls.n	800c4a6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c4cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3714      	adds	r7, #20
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c4e6:	79fb      	ldrb	r3, [r7, #7]
 800c4e8:	4a08      	ldr	r2, [pc, #32]	@ (800c50c <disk_status+0x30>)
 800c4ea:	009b      	lsls	r3, r3, #2
 800c4ec:	4413      	add	r3, r2
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	79fa      	ldrb	r2, [r7, #7]
 800c4f4:	4905      	ldr	r1, [pc, #20]	@ (800c50c <disk_status+0x30>)
 800c4f6:	440a      	add	r2, r1
 800c4f8:	7a12      	ldrb	r2, [r2, #8]
 800c4fa:	4610      	mov	r0, r2
 800c4fc:	4798      	blx	r3
 800c4fe:	4603      	mov	r3, r0
 800c500:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c502:	7bfb      	ldrb	r3, [r7, #15]
}
 800c504:	4618      	mov	r0, r3
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	20001e70 	.word	0x20001e70

0800c510 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b084      	sub	sp, #16
 800c514:	af00      	add	r7, sp, #0
 800c516:	4603      	mov	r3, r0
 800c518:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c51a:	2300      	movs	r3, #0
 800c51c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c51e:	79fb      	ldrb	r3, [r7, #7]
 800c520:	4a0d      	ldr	r2, [pc, #52]	@ (800c558 <disk_initialize+0x48>)
 800c522:	5cd3      	ldrb	r3, [r2, r3]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d111      	bne.n	800c54c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c528:	79fb      	ldrb	r3, [r7, #7]
 800c52a:	4a0b      	ldr	r2, [pc, #44]	@ (800c558 <disk_initialize+0x48>)
 800c52c:	2101      	movs	r1, #1
 800c52e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c530:	79fb      	ldrb	r3, [r7, #7]
 800c532:	4a09      	ldr	r2, [pc, #36]	@ (800c558 <disk_initialize+0x48>)
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	4413      	add	r3, r2
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	79fa      	ldrb	r2, [r7, #7]
 800c53e:	4906      	ldr	r1, [pc, #24]	@ (800c558 <disk_initialize+0x48>)
 800c540:	440a      	add	r2, r1
 800c542:	7a12      	ldrb	r2, [r2, #8]
 800c544:	4610      	mov	r0, r2
 800c546:	4798      	blx	r3
 800c548:	4603      	mov	r3, r0
 800c54a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3710      	adds	r7, #16
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	20001e70 	.word	0x20001e70

0800c55c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c55c:	b590      	push	{r4, r7, lr}
 800c55e:	b087      	sub	sp, #28
 800c560:	af00      	add	r7, sp, #0
 800c562:	60b9      	str	r1, [r7, #8]
 800c564:	607a      	str	r2, [r7, #4]
 800c566:	603b      	str	r3, [r7, #0]
 800c568:	4603      	mov	r3, r0
 800c56a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c56c:	7bfb      	ldrb	r3, [r7, #15]
 800c56e:	4a0a      	ldr	r2, [pc, #40]	@ (800c598 <disk_read+0x3c>)
 800c570:	009b      	lsls	r3, r3, #2
 800c572:	4413      	add	r3, r2
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	689c      	ldr	r4, [r3, #8]
 800c578:	7bfb      	ldrb	r3, [r7, #15]
 800c57a:	4a07      	ldr	r2, [pc, #28]	@ (800c598 <disk_read+0x3c>)
 800c57c:	4413      	add	r3, r2
 800c57e:	7a18      	ldrb	r0, [r3, #8]
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	68b9      	ldr	r1, [r7, #8]
 800c586:	47a0      	blx	r4
 800c588:	4603      	mov	r3, r0
 800c58a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c58c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	371c      	adds	r7, #28
 800c592:	46bd      	mov	sp, r7
 800c594:	bd90      	pop	{r4, r7, pc}
 800c596:	bf00      	nop
 800c598:	20001e70 	.word	0x20001e70

0800c59c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c59c:	b590      	push	{r4, r7, lr}
 800c59e:	b087      	sub	sp, #28
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60b9      	str	r1, [r7, #8]
 800c5a4:	607a      	str	r2, [r7, #4]
 800c5a6:	603b      	str	r3, [r7, #0]
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c5ac:	7bfb      	ldrb	r3, [r7, #15]
 800c5ae:	4a0a      	ldr	r2, [pc, #40]	@ (800c5d8 <disk_write+0x3c>)
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	4413      	add	r3, r2
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	68dc      	ldr	r4, [r3, #12]
 800c5b8:	7bfb      	ldrb	r3, [r7, #15]
 800c5ba:	4a07      	ldr	r2, [pc, #28]	@ (800c5d8 <disk_write+0x3c>)
 800c5bc:	4413      	add	r3, r2
 800c5be:	7a18      	ldrb	r0, [r3, #8]
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	68b9      	ldr	r1, [r7, #8]
 800c5c6:	47a0      	blx	r4
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	75fb      	strb	r3, [r7, #23]
  return res;
 800c5cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	371c      	adds	r7, #28
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd90      	pop	{r4, r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	20001e70 	.word	0x20001e70

0800c5dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	603a      	str	r2, [r7, #0]
 800c5e6:	71fb      	strb	r3, [r7, #7]
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c5ec:	79fb      	ldrb	r3, [r7, #7]
 800c5ee:	4a09      	ldr	r2, [pc, #36]	@ (800c614 <disk_ioctl+0x38>)
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	4413      	add	r3, r2
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	691b      	ldr	r3, [r3, #16]
 800c5f8:	79fa      	ldrb	r2, [r7, #7]
 800c5fa:	4906      	ldr	r1, [pc, #24]	@ (800c614 <disk_ioctl+0x38>)
 800c5fc:	440a      	add	r2, r1
 800c5fe:	7a10      	ldrb	r0, [r2, #8]
 800c600:	79b9      	ldrb	r1, [r7, #6]
 800c602:	683a      	ldr	r2, [r7, #0]
 800c604:	4798      	blx	r3
 800c606:	4603      	mov	r3, r0
 800c608:	73fb      	strb	r3, [r7, #15]
  return res;
 800c60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3710      	adds	r7, #16
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	20001e70 	.word	0x20001e70

0800c618 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c618:	b480      	push	{r7}
 800c61a:	b085      	sub	sp, #20
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	3301      	adds	r3, #1
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c628:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c62c:	021b      	lsls	r3, r3, #8
 800c62e:	b21a      	sxth	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	b21b      	sxth	r3, r3
 800c636:	4313      	orrs	r3, r2
 800c638:	b21b      	sxth	r3, r3
 800c63a:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c63c:	89fb      	ldrh	r3, [r7, #14]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3714      	adds	r7, #20
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr

0800c64a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c64a:	b480      	push	{r7}
 800c64c:	b085      	sub	sp, #20
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	3303      	adds	r3, #3
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	021b      	lsls	r3, r3, #8
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	3202      	adds	r2, #2
 800c662:	7812      	ldrb	r2, [r2, #0]
 800c664:	4313      	orrs	r3, r2
 800c666:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	021b      	lsls	r3, r3, #8
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	3201      	adds	r2, #1
 800c670:	7812      	ldrb	r2, [r2, #0]
 800c672:	4313      	orrs	r3, r2
 800c674:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	021b      	lsls	r3, r3, #8
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	7812      	ldrb	r2, [r2, #0]
 800c67e:	4313      	orrs	r3, r2
 800c680:	60fb      	str	r3, [r7, #12]
	return rv;
 800c682:	68fb      	ldr	r3, [r7, #12]
}
 800c684:	4618      	mov	r0, r3
 800c686:	3714      	adds	r7, #20
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr

0800c690 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	460b      	mov	r3, r1
 800c69a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	1c5a      	adds	r2, r3, #1
 800c6a0:	607a      	str	r2, [r7, #4]
 800c6a2:	887a      	ldrh	r2, [r7, #2]
 800c6a4:	b2d2      	uxtb	r2, r2
 800c6a6:	701a      	strb	r2, [r3, #0]
 800c6a8:	887b      	ldrh	r3, [r7, #2]
 800c6aa:	0a1b      	lsrs	r3, r3, #8
 800c6ac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	1c5a      	adds	r2, r3, #1
 800c6b2:	607a      	str	r2, [r7, #4]
 800c6b4:	887a      	ldrh	r2, [r7, #2]
 800c6b6:	b2d2      	uxtb	r2, r2
 800c6b8:	701a      	strb	r2, [r3, #0]
}
 800c6ba:	bf00      	nop
 800c6bc:	370c      	adds	r7, #12
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c6c6:	b480      	push	{r7}
 800c6c8:	b083      	sub	sp, #12
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	1c5a      	adds	r2, r3, #1
 800c6d4:	607a      	str	r2, [r7, #4]
 800c6d6:	683a      	ldr	r2, [r7, #0]
 800c6d8:	b2d2      	uxtb	r2, r2
 800c6da:	701a      	strb	r2, [r3, #0]
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	0a1b      	lsrs	r3, r3, #8
 800c6e0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	1c5a      	adds	r2, r3, #1
 800c6e6:	607a      	str	r2, [r7, #4]
 800c6e8:	683a      	ldr	r2, [r7, #0]
 800c6ea:	b2d2      	uxtb	r2, r2
 800c6ec:	701a      	strb	r2, [r3, #0]
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	0a1b      	lsrs	r3, r3, #8
 800c6f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	1c5a      	adds	r2, r3, #1
 800c6f8:	607a      	str	r2, [r7, #4]
 800c6fa:	683a      	ldr	r2, [r7, #0]
 800c6fc:	b2d2      	uxtb	r2, r2
 800c6fe:	701a      	strb	r2, [r3, #0]
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	0a1b      	lsrs	r3, r3, #8
 800c704:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	1c5a      	adds	r2, r3, #1
 800c70a:	607a      	str	r2, [r7, #4]
 800c70c:	683a      	ldr	r2, [r7, #0]
 800c70e:	b2d2      	uxtb	r2, r2
 800c710:	701a      	strb	r2, [r3, #0]
}
 800c712:	bf00      	nop
 800c714:	370c      	adds	r7, #12
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr

0800c71e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c71e:	b480      	push	{r7}
 800c720:	b087      	sub	sp, #28
 800c722:	af00      	add	r7, sp, #0
 800c724:	60f8      	str	r0, [r7, #12]
 800c726:	60b9      	str	r1, [r7, #8]
 800c728:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d00d      	beq.n	800c754 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c738:	693a      	ldr	r2, [r7, #16]
 800c73a:	1c53      	adds	r3, r2, #1
 800c73c:	613b      	str	r3, [r7, #16]
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	1c59      	adds	r1, r3, #1
 800c742:	6179      	str	r1, [r7, #20]
 800c744:	7812      	ldrb	r2, [r2, #0]
 800c746:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	3b01      	subs	r3, #1
 800c74c:	607b      	str	r3, [r7, #4]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d1f1      	bne.n	800c738 <mem_cpy+0x1a>
	}
}
 800c754:	bf00      	nop
 800c756:	371c      	adds	r7, #28
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c760:	b480      	push	{r7}
 800c762:	b087      	sub	sp, #28
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	1c5a      	adds	r2, r3, #1
 800c774:	617a      	str	r2, [r7, #20]
 800c776:	68ba      	ldr	r2, [r7, #8]
 800c778:	b2d2      	uxtb	r2, r2
 800c77a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	3b01      	subs	r3, #1
 800c780:	607b      	str	r3, [r7, #4]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d1f3      	bne.n	800c770 <mem_set+0x10>
}
 800c788:	bf00      	nop
 800c78a:	bf00      	nop
 800c78c:	371c      	adds	r7, #28
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr

0800c796 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c796:	b480      	push	{r7}
 800c798:	b089      	sub	sp, #36	@ 0x24
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	60f8      	str	r0, [r7, #12]
 800c79e:	60b9      	str	r1, [r7, #8]
 800c7a0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	61fb      	str	r3, [r7, #28]
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	1c5a      	adds	r2, r3, #1
 800c7b2:	61fa      	str	r2, [r7, #28]
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	69bb      	ldr	r3, [r7, #24]
 800c7ba:	1c5a      	adds	r2, r3, #1
 800c7bc:	61ba      	str	r2, [r7, #24]
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	1acb      	subs	r3, r1, r3
 800c7c2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	3b01      	subs	r3, #1
 800c7c8:	607b      	str	r3, [r7, #4]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d002      	beq.n	800c7d6 <mem_cmp+0x40>
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d0eb      	beq.n	800c7ae <mem_cmp+0x18>

	return r;
 800c7d6:	697b      	ldr	r3, [r7, #20]
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3724      	adds	r7, #36	@ 0x24
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr

0800c7e4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c7ee:	e002      	b.n	800c7f6 <chk_chr+0x12>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	607b      	str	r3, [r7, #4]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d005      	beq.n	800c80a <chk_chr+0x26>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	461a      	mov	r2, r3
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	4293      	cmp	r3, r2
 800c808:	d1f2      	bne.n	800c7f0 <chk_chr+0xc>
	return *str;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	781b      	ldrb	r3, [r3, #0]
}
 800c80e:	4618      	mov	r0, r3
 800c810:	370c      	adds	r7, #12
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr
	...

0800c81c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b085      	sub	sp, #20
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c826:	2300      	movs	r3, #0
 800c828:	60bb      	str	r3, [r7, #8]
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	60fb      	str	r3, [r7, #12]
 800c82e:	e029      	b.n	800c884 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c830:	4a27      	ldr	r2, [pc, #156]	@ (800c8d0 <chk_lock+0xb4>)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	011b      	lsls	r3, r3, #4
 800c836:	4413      	add	r3, r2
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d01d      	beq.n	800c87a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c83e:	4a24      	ldr	r2, [pc, #144]	@ (800c8d0 <chk_lock+0xb4>)
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	011b      	lsls	r3, r3, #4
 800c844:	4413      	add	r3, r2
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d116      	bne.n	800c87e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c850:	4a1f      	ldr	r2, [pc, #124]	@ (800c8d0 <chk_lock+0xb4>)
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	011b      	lsls	r3, r3, #4
 800c856:	4413      	add	r3, r2
 800c858:	3304      	adds	r3, #4
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c860:	429a      	cmp	r2, r3
 800c862:	d10c      	bne.n	800c87e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c864:	4a1a      	ldr	r2, [pc, #104]	@ (800c8d0 <chk_lock+0xb4>)
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	011b      	lsls	r3, r3, #4
 800c86a:	4413      	add	r3, r2
 800c86c:	3308      	adds	r3, #8
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c874:	429a      	cmp	r2, r3
 800c876:	d102      	bne.n	800c87e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c878:	e007      	b.n	800c88a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c87a:	2301      	movs	r3, #1
 800c87c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	3301      	adds	r3, #1
 800c882:	60fb      	str	r3, [r7, #12]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2b01      	cmp	r3, #1
 800c888:	d9d2      	bls.n	800c830 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	d109      	bne.n	800c8a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d102      	bne.n	800c89c <chk_lock+0x80>
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	2b02      	cmp	r3, #2
 800c89a:	d101      	bne.n	800c8a0 <chk_lock+0x84>
 800c89c:	2300      	movs	r3, #0
 800c89e:	e010      	b.n	800c8c2 <chk_lock+0xa6>
 800c8a0:	2312      	movs	r3, #18
 800c8a2:	e00e      	b.n	800c8c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d108      	bne.n	800c8bc <chk_lock+0xa0>
 800c8aa:	4a09      	ldr	r2, [pc, #36]	@ (800c8d0 <chk_lock+0xb4>)
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	011b      	lsls	r3, r3, #4
 800c8b0:	4413      	add	r3, r2
 800c8b2:	330c      	adds	r3, #12
 800c8b4:	881b      	ldrh	r3, [r3, #0]
 800c8b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8ba:	d101      	bne.n	800c8c0 <chk_lock+0xa4>
 800c8bc:	2310      	movs	r3, #16
 800c8be:	e000      	b.n	800c8c2 <chk_lock+0xa6>
 800c8c0:	2300      	movs	r3, #0
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3714      	adds	r7, #20
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop
 800c8d0:	20001c50 	.word	0x20001c50

0800c8d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b083      	sub	sp, #12
 800c8d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	607b      	str	r3, [r7, #4]
 800c8de:	e002      	b.n	800c8e6 <enq_lock+0x12>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	607b      	str	r3, [r7, #4]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	d806      	bhi.n	800c8fa <enq_lock+0x26>
 800c8ec:	4a09      	ldr	r2, [pc, #36]	@ (800c914 <enq_lock+0x40>)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	011b      	lsls	r3, r3, #4
 800c8f2:	4413      	add	r3, r2
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d1f2      	bne.n	800c8e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2b02      	cmp	r3, #2
 800c8fe:	bf14      	ite	ne
 800c900:	2301      	movne	r3, #1
 800c902:	2300      	moveq	r3, #0
 800c904:	b2db      	uxtb	r3, r3
}
 800c906:	4618      	mov	r0, r3
 800c908:	370c      	adds	r7, #12
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	20001c50 	.word	0x20001c50

0800c918 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c918:	b480      	push	{r7}
 800c91a:	b085      	sub	sp, #20
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c922:	2300      	movs	r3, #0
 800c924:	60fb      	str	r3, [r7, #12]
 800c926:	e01f      	b.n	800c968 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c928:	4a41      	ldr	r2, [pc, #260]	@ (800ca30 <inc_lock+0x118>)
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	011b      	lsls	r3, r3, #4
 800c92e:	4413      	add	r3, r2
 800c930:	681a      	ldr	r2, [r3, #0]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	429a      	cmp	r2, r3
 800c938:	d113      	bne.n	800c962 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c93a:	4a3d      	ldr	r2, [pc, #244]	@ (800ca30 <inc_lock+0x118>)
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	011b      	lsls	r3, r3, #4
 800c940:	4413      	add	r3, r2
 800c942:	3304      	adds	r3, #4
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d109      	bne.n	800c962 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c94e:	4a38      	ldr	r2, [pc, #224]	@ (800ca30 <inc_lock+0x118>)
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	011b      	lsls	r3, r3, #4
 800c954:	4413      	add	r3, r2
 800c956:	3308      	adds	r3, #8
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c95e:	429a      	cmp	r2, r3
 800c960:	d006      	beq.n	800c970 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	3301      	adds	r3, #1
 800c966:	60fb      	str	r3, [r7, #12]
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	d9dc      	bls.n	800c928 <inc_lock+0x10>
 800c96e:	e000      	b.n	800c972 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c970:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2b02      	cmp	r3, #2
 800c976:	d132      	bne.n	800c9de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c978:	2300      	movs	r3, #0
 800c97a:	60fb      	str	r3, [r7, #12]
 800c97c:	e002      	b.n	800c984 <inc_lock+0x6c>
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	3301      	adds	r3, #1
 800c982:	60fb      	str	r3, [r7, #12]
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2b01      	cmp	r3, #1
 800c988:	d806      	bhi.n	800c998 <inc_lock+0x80>
 800c98a:	4a29      	ldr	r2, [pc, #164]	@ (800ca30 <inc_lock+0x118>)
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	011b      	lsls	r3, r3, #4
 800c990:	4413      	add	r3, r2
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d1f2      	bne.n	800c97e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2b02      	cmp	r3, #2
 800c99c:	d101      	bne.n	800c9a2 <inc_lock+0x8a>
 800c99e:	2300      	movs	r3, #0
 800c9a0:	e040      	b.n	800ca24 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	4922      	ldr	r1, [pc, #136]	@ (800ca30 <inc_lock+0x118>)
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	011b      	lsls	r3, r3, #4
 800c9ac:	440b      	add	r3, r1
 800c9ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	689a      	ldr	r2, [r3, #8]
 800c9b4:	491e      	ldr	r1, [pc, #120]	@ (800ca30 <inc_lock+0x118>)
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	011b      	lsls	r3, r3, #4
 800c9ba:	440b      	add	r3, r1
 800c9bc:	3304      	adds	r3, #4
 800c9be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	695a      	ldr	r2, [r3, #20]
 800c9c4:	491a      	ldr	r1, [pc, #104]	@ (800ca30 <inc_lock+0x118>)
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	011b      	lsls	r3, r3, #4
 800c9ca:	440b      	add	r3, r1
 800c9cc:	3308      	adds	r3, #8
 800c9ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c9d0:	4a17      	ldr	r2, [pc, #92]	@ (800ca30 <inc_lock+0x118>)
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	011b      	lsls	r3, r3, #4
 800c9d6:	4413      	add	r3, r2
 800c9d8:	330c      	adds	r3, #12
 800c9da:	2200      	movs	r2, #0
 800c9dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d009      	beq.n	800c9f8 <inc_lock+0xe0>
 800c9e4:	4a12      	ldr	r2, [pc, #72]	@ (800ca30 <inc_lock+0x118>)
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	011b      	lsls	r3, r3, #4
 800c9ea:	4413      	add	r3, r2
 800c9ec:	330c      	adds	r3, #12
 800c9ee:	881b      	ldrh	r3, [r3, #0]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d001      	beq.n	800c9f8 <inc_lock+0xe0>
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	e015      	b.n	800ca24 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d108      	bne.n	800ca10 <inc_lock+0xf8>
 800c9fe:	4a0c      	ldr	r2, [pc, #48]	@ (800ca30 <inc_lock+0x118>)
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	011b      	lsls	r3, r3, #4
 800ca04:	4413      	add	r3, r2
 800ca06:	330c      	adds	r3, #12
 800ca08:	881b      	ldrh	r3, [r3, #0]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	b29a      	uxth	r2, r3
 800ca0e:	e001      	b.n	800ca14 <inc_lock+0xfc>
 800ca10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ca14:	4906      	ldr	r1, [pc, #24]	@ (800ca30 <inc_lock+0x118>)
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	011b      	lsls	r3, r3, #4
 800ca1a:	440b      	add	r3, r1
 800ca1c:	330c      	adds	r3, #12
 800ca1e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	3301      	adds	r3, #1
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3714      	adds	r7, #20
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr
 800ca30:	20001c50 	.word	0x20001c50

0800ca34 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b085      	sub	sp, #20
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	3b01      	subs	r3, #1
 800ca40:	607b      	str	r3, [r7, #4]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d825      	bhi.n	800ca94 <dec_lock+0x60>
		n = Files[i].ctr;
 800ca48:	4a17      	ldr	r2, [pc, #92]	@ (800caa8 <dec_lock+0x74>)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	011b      	lsls	r3, r3, #4
 800ca4e:	4413      	add	r3, r2
 800ca50:	330c      	adds	r3, #12
 800ca52:	881b      	ldrh	r3, [r3, #0]
 800ca54:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ca56:	89fb      	ldrh	r3, [r7, #14]
 800ca58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca5c:	d101      	bne.n	800ca62 <dec_lock+0x2e>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ca62:	89fb      	ldrh	r3, [r7, #14]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d002      	beq.n	800ca6e <dec_lock+0x3a>
 800ca68:	89fb      	ldrh	r3, [r7, #14]
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ca6e:	4a0e      	ldr	r2, [pc, #56]	@ (800caa8 <dec_lock+0x74>)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	011b      	lsls	r3, r3, #4
 800ca74:	4413      	add	r3, r2
 800ca76:	330c      	adds	r3, #12
 800ca78:	89fa      	ldrh	r2, [r7, #14]
 800ca7a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ca7c:	89fb      	ldrh	r3, [r7, #14]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d105      	bne.n	800ca8e <dec_lock+0x5a>
 800ca82:	4a09      	ldr	r2, [pc, #36]	@ (800caa8 <dec_lock+0x74>)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	011b      	lsls	r3, r3, #4
 800ca88:	4413      	add	r3, r2
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	737b      	strb	r3, [r7, #13]
 800ca92:	e001      	b.n	800ca98 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ca94:	2302      	movs	r3, #2
 800ca96:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ca98:	7b7b      	ldrb	r3, [r7, #13]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3714      	adds	r7, #20
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	20001c50 	.word	0x20001c50

0800caac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800caac:	b480      	push	{r7}
 800caae:	b085      	sub	sp, #20
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cab4:	2300      	movs	r3, #0
 800cab6:	60fb      	str	r3, [r7, #12]
 800cab8:	e010      	b.n	800cadc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800caba:	4a0d      	ldr	r2, [pc, #52]	@ (800caf0 <clear_lock+0x44>)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	011b      	lsls	r3, r3, #4
 800cac0:	4413      	add	r3, r2
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d105      	bne.n	800cad6 <clear_lock+0x2a>
 800caca:	4a09      	ldr	r2, [pc, #36]	@ (800caf0 <clear_lock+0x44>)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	011b      	lsls	r3, r3, #4
 800cad0:	4413      	add	r3, r2
 800cad2:	2200      	movs	r2, #0
 800cad4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	3301      	adds	r3, #1
 800cada:	60fb      	str	r3, [r7, #12]
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2b01      	cmp	r3, #1
 800cae0:	d9eb      	bls.n	800caba <clear_lock+0xe>
	}
}
 800cae2:	bf00      	nop
 800cae4:	bf00      	nop
 800cae6:	3714      	adds	r7, #20
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr
 800caf0:	20001c50 	.word	0x20001c50

0800caf4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b086      	sub	sp, #24
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cafc:	2300      	movs	r3, #0
 800cafe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	78db      	ldrb	r3, [r3, #3]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d034      	beq.n	800cb72 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb0c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	7858      	ldrb	r0, [r3, #1]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800cb18:	2301      	movs	r3, #1
 800cb1a:	697a      	ldr	r2, [r7, #20]
 800cb1c:	f7ff fd3e 	bl	800c59c <disk_write>
 800cb20:	4603      	mov	r3, r0
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d002      	beq.n	800cb2c <sync_window+0x38>
			res = FR_DISK_ERR;
 800cb26:	2301      	movs	r3, #1
 800cb28:	73fb      	strb	r3, [r7, #15]
 800cb2a:	e022      	b.n	800cb72 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb36:	697a      	ldr	r2, [r7, #20]
 800cb38:	1ad2      	subs	r2, r2, r3
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	69db      	ldr	r3, [r3, #28]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d217      	bcs.n	800cb72 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	789b      	ldrb	r3, [r3, #2]
 800cb46:	613b      	str	r3, [r7, #16]
 800cb48:	e010      	b.n	800cb6c <sync_window+0x78>
					wsect += fs->fsize;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	69db      	ldr	r3, [r3, #28]
 800cb4e:	697a      	ldr	r2, [r7, #20]
 800cb50:	4413      	add	r3, r2
 800cb52:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	7858      	ldrb	r0, [r3, #1]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800cb5e:	2301      	movs	r3, #1
 800cb60:	697a      	ldr	r2, [r7, #20]
 800cb62:	f7ff fd1b 	bl	800c59c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	3b01      	subs	r3, #1
 800cb6a:	613b      	str	r3, [r7, #16]
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	d8eb      	bhi.n	800cb4a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cb72:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3718      	adds	r7, #24
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cb86:	2300      	movs	r3, #0
 800cb88:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb8e:	683a      	ldr	r2, [r7, #0]
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d01b      	beq.n	800cbcc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f7ff ffad 	bl	800caf4 <sync_window>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cb9e:	7bfb      	ldrb	r3, [r7, #15]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d113      	bne.n	800cbcc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	7858      	ldrb	r0, [r3, #1]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800cbae:	2301      	movs	r3, #1
 800cbb0:	683a      	ldr	r2, [r7, #0]
 800cbb2:	f7ff fcd3 	bl	800c55c <disk_read>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d004      	beq.n	800cbc6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cbbc:	f04f 33ff 	mov.w	r3, #4294967295
 800cbc0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	683a      	ldr	r2, [r7, #0]
 800cbca:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800cbcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3710      	adds	r7, #16
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
	...

0800cbd8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f7ff ff87 	bl	800caf4 <sync_window>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cbea:	7bfb      	ldrb	r3, [r7, #15]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d158      	bne.n	800cca2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	2b03      	cmp	r3, #3
 800cbf6:	d148      	bne.n	800cc8a <sync_fs+0xb2>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	791b      	ldrb	r3, [r3, #4]
 800cbfc:	2b01      	cmp	r3, #1
 800cbfe:	d144      	bne.n	800cc8a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	3334      	adds	r3, #52	@ 0x34
 800cc04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc08:	2100      	movs	r1, #0
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7ff fda8 	bl	800c760 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	3334      	adds	r3, #52	@ 0x34
 800cc14:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cc18:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7ff fd37 	bl	800c690 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	3334      	adds	r3, #52	@ 0x34
 800cc26:	4921      	ldr	r1, [pc, #132]	@ (800ccac <sync_fs+0xd4>)
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7ff fd4c 	bl	800c6c6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	3334      	adds	r3, #52	@ 0x34
 800cc32:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cc36:	491e      	ldr	r1, [pc, #120]	@ (800ccb0 <sync_fs+0xd8>)
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7ff fd44 	bl	800c6c6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	3334      	adds	r3, #52	@ 0x34
 800cc42:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	695b      	ldr	r3, [r3, #20]
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	4610      	mov	r0, r2
 800cc4e:	f7ff fd3a 	bl	800c6c6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	3334      	adds	r3, #52	@ 0x34
 800cc56:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	691b      	ldr	r3, [r3, #16]
 800cc5e:	4619      	mov	r1, r3
 800cc60:	4610      	mov	r0, r2
 800cc62:	f7ff fd30 	bl	800c6c6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6a1b      	ldr	r3, [r3, #32]
 800cc6a:	1c5a      	adds	r2, r3, #1
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	7858      	ldrb	r0, [r3, #1]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc7e:	2301      	movs	r3, #1
 800cc80:	f7ff fc8c 	bl	800c59c <disk_write>
			fs->fsi_flag = 0;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2200      	movs	r2, #0
 800cc88:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	785b      	ldrb	r3, [r3, #1]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	2100      	movs	r1, #0
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7ff fca2 	bl	800c5dc <disk_ioctl>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d001      	beq.n	800cca2 <sync_fs+0xca>
 800cc9e:	2301      	movs	r3, #1
 800cca0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cca2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3710      	adds	r7, #16
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	41615252 	.word	0x41615252
 800ccb0:	61417272 	.word	0x61417272

0800ccb4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b083      	sub	sp, #12
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	3b02      	subs	r3, #2
 800ccc2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	699b      	ldr	r3, [r3, #24]
 800ccc8:	3b02      	subs	r3, #2
 800ccca:	683a      	ldr	r2, [r7, #0]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d301      	bcc.n	800ccd4 <clust2sect+0x20>
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	e008      	b.n	800cce6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	895b      	ldrh	r3, [r3, #10]
 800ccd8:	461a      	mov	r2, r3
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	fb03 f202 	mul.w	r2, r3, r2
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cce4:	4413      	add	r3, r2
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	370c      	adds	r7, #12
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr

0800ccf2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ccf2:	b580      	push	{r7, lr}
 800ccf4:	b086      	sub	sp, #24
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
 800ccfa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d904      	bls.n	800cd12 <get_fat+0x20>
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	699b      	ldr	r3, [r3, #24]
 800cd0c:	683a      	ldr	r2, [r7, #0]
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d302      	bcc.n	800cd18 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cd12:	2301      	movs	r3, #1
 800cd14:	617b      	str	r3, [r7, #20]
 800cd16:	e08e      	b.n	800ce36 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cd18:	f04f 33ff 	mov.w	r3, #4294967295
 800cd1c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	2b03      	cmp	r3, #3
 800cd24:	d061      	beq.n	800cdea <get_fat+0xf8>
 800cd26:	2b03      	cmp	r3, #3
 800cd28:	dc7b      	bgt.n	800ce22 <get_fat+0x130>
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d002      	beq.n	800cd34 <get_fat+0x42>
 800cd2e:	2b02      	cmp	r3, #2
 800cd30:	d041      	beq.n	800cdb6 <get_fat+0xc4>
 800cd32:	e076      	b.n	800ce22 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	60fb      	str	r3, [r7, #12]
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	085b      	lsrs	r3, r3, #1
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	4413      	add	r3, r2
 800cd40:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	0a5b      	lsrs	r3, r3, #9
 800cd4a:	4413      	add	r3, r2
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	6938      	ldr	r0, [r7, #16]
 800cd50:	f7ff ff14 	bl	800cb7c <move_window>
 800cd54:	4603      	mov	r3, r0
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d166      	bne.n	800ce28 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	1c5a      	adds	r2, r3, #1
 800cd5e:	60fa      	str	r2, [r7, #12]
 800cd60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd64:	693a      	ldr	r2, [r7, #16]
 800cd66:	4413      	add	r3, r2
 800cd68:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cd6c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	0a5b      	lsrs	r3, r3, #9
 800cd76:	4413      	add	r3, r2
 800cd78:	4619      	mov	r1, r3
 800cd7a:	6938      	ldr	r0, [r7, #16]
 800cd7c:	f7ff fefe 	bl	800cb7c <move_window>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d152      	bne.n	800ce2c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd8c:	693a      	ldr	r2, [r7, #16]
 800cd8e:	4413      	add	r3, r2
 800cd90:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cd94:	021b      	lsls	r3, r3, #8
 800cd96:	68ba      	ldr	r2, [r7, #8]
 800cd98:	4313      	orrs	r3, r2
 800cd9a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	f003 0301 	and.w	r3, r3, #1
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d002      	beq.n	800cdac <get_fat+0xba>
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	091b      	lsrs	r3, r3, #4
 800cdaa:	e002      	b.n	800cdb2 <get_fat+0xc0>
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cdb2:	617b      	str	r3, [r7, #20]
			break;
 800cdb4:	e03f      	b.n	800ce36 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	0a1b      	lsrs	r3, r3, #8
 800cdbe:	4413      	add	r3, r2
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	6938      	ldr	r0, [r7, #16]
 800cdc4:	f7ff feda 	bl	800cb7c <move_window>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d130      	bne.n	800ce30 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	005b      	lsls	r3, r3, #1
 800cdd8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800cddc:	4413      	add	r3, r2
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7ff fc1a 	bl	800c618 <ld_word>
 800cde4:	4603      	mov	r3, r0
 800cde6:	617b      	str	r3, [r7, #20]
			break;
 800cde8:	e025      	b.n	800ce36 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	09db      	lsrs	r3, r3, #7
 800cdf2:	4413      	add	r3, r2
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	6938      	ldr	r0, [r7, #16]
 800cdf8:	f7ff fec0 	bl	800cb7c <move_window>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d118      	bne.n	800ce34 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ce10:	4413      	add	r3, r2
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7ff fc19 	bl	800c64a <ld_dword>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ce1e:	617b      	str	r3, [r7, #20]
			break;
 800ce20:	e009      	b.n	800ce36 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ce22:	2301      	movs	r3, #1
 800ce24:	617b      	str	r3, [r7, #20]
 800ce26:	e006      	b.n	800ce36 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ce28:	bf00      	nop
 800ce2a:	e004      	b.n	800ce36 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ce2c:	bf00      	nop
 800ce2e:	e002      	b.n	800ce36 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ce30:	bf00      	nop
 800ce32:	e000      	b.n	800ce36 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ce34:	bf00      	nop
		}
	}

	return val;
 800ce36:	697b      	ldr	r3, [r7, #20]
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3718      	adds	r7, #24
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ce40:	b590      	push	{r4, r7, lr}
 800ce42:	b089      	sub	sp, #36	@ 0x24
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ce4c:	2302      	movs	r3, #2
 800ce4e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	f240 80d9 	bls.w	800d00a <put_fat+0x1ca>
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	699b      	ldr	r3, [r3, #24]
 800ce5c:	68ba      	ldr	r2, [r7, #8]
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	f080 80d3 	bcs.w	800d00a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	2b03      	cmp	r3, #3
 800ce6a:	f000 8096 	beq.w	800cf9a <put_fat+0x15a>
 800ce6e:	2b03      	cmp	r3, #3
 800ce70:	f300 80cb 	bgt.w	800d00a <put_fat+0x1ca>
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d002      	beq.n	800ce7e <put_fat+0x3e>
 800ce78:	2b02      	cmp	r3, #2
 800ce7a:	d06e      	beq.n	800cf5a <put_fat+0x11a>
 800ce7c:	e0c5      	b.n	800d00a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	61bb      	str	r3, [r7, #24]
 800ce82:	69bb      	ldr	r3, [r7, #24]
 800ce84:	085b      	lsrs	r3, r3, #1
 800ce86:	69ba      	ldr	r2, [r7, #24]
 800ce88:	4413      	add	r3, r2
 800ce8a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ce90:	69bb      	ldr	r3, [r7, #24]
 800ce92:	0a5b      	lsrs	r3, r3, #9
 800ce94:	4413      	add	r3, r2
 800ce96:	4619      	mov	r1, r3
 800ce98:	68f8      	ldr	r0, [r7, #12]
 800ce9a:	f7ff fe6f 	bl	800cb7c <move_window>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cea2:	7ffb      	ldrb	r3, [r7, #31]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	f040 80a9 	bne.w	800cffc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ceb0:	69bb      	ldr	r3, [r7, #24]
 800ceb2:	1c59      	adds	r1, r3, #1
 800ceb4:	61b9      	str	r1, [r7, #24]
 800ceb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceba:	4413      	add	r3, r2
 800cebc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	f003 0301 	and.w	r3, r3, #1
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d00d      	beq.n	800cee4 <put_fat+0xa4>
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	b25b      	sxtb	r3, r3
 800cece:	f003 030f 	and.w	r3, r3, #15
 800ced2:	b25a      	sxtb	r2, r3
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	b25b      	sxtb	r3, r3
 800ced8:	011b      	lsls	r3, r3, #4
 800ceda:	b25b      	sxtb	r3, r3
 800cedc:	4313      	orrs	r3, r2
 800cede:	b25b      	sxtb	r3, r3
 800cee0:	b2db      	uxtb	r3, r3
 800cee2:	e001      	b.n	800cee8 <put_fat+0xa8>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	697a      	ldr	r2, [r7, #20]
 800ceea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2201      	movs	r2, #1
 800cef0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	0a5b      	lsrs	r3, r3, #9
 800cefa:	4413      	add	r3, r2
 800cefc:	4619      	mov	r1, r3
 800cefe:	68f8      	ldr	r0, [r7, #12]
 800cf00:	f7ff fe3c 	bl	800cb7c <move_window>
 800cf04:	4603      	mov	r3, r0
 800cf06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf08:	7ffb      	ldrb	r3, [r7, #31]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d178      	bne.n	800d000 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf1a:	4413      	add	r3, r2
 800cf1c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	f003 0301 	and.w	r3, r3, #1
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d003      	beq.n	800cf30 <put_fat+0xf0>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	091b      	lsrs	r3, r3, #4
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	e00e      	b.n	800cf4e <put_fat+0x10e>
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	b25b      	sxtb	r3, r3
 800cf36:	f023 030f 	bic.w	r3, r3, #15
 800cf3a:	b25a      	sxtb	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	0a1b      	lsrs	r3, r3, #8
 800cf40:	b25b      	sxtb	r3, r3
 800cf42:	f003 030f 	and.w	r3, r3, #15
 800cf46:	b25b      	sxtb	r3, r3
 800cf48:	4313      	orrs	r3, r2
 800cf4a:	b25b      	sxtb	r3, r3
 800cf4c:	b2db      	uxtb	r3, r3
 800cf4e:	697a      	ldr	r2, [r7, #20]
 800cf50:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2201      	movs	r2, #1
 800cf56:	70da      	strb	r2, [r3, #3]
			break;
 800cf58:	e057      	b.n	800d00a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	0a1b      	lsrs	r3, r3, #8
 800cf62:	4413      	add	r3, r2
 800cf64:	4619      	mov	r1, r3
 800cf66:	68f8      	ldr	r0, [r7, #12]
 800cf68:	f7ff fe08 	bl	800cb7c <move_window>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf70:	7ffb      	ldrb	r3, [r7, #31]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d146      	bne.n	800d004 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	005b      	lsls	r3, r3, #1
 800cf80:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800cf84:	4413      	add	r3, r2
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	b292      	uxth	r2, r2
 800cf8a:	4611      	mov	r1, r2
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7ff fb7f 	bl	800c690 <st_word>
			fs->wflag = 1;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2201      	movs	r2, #1
 800cf96:	70da      	strb	r2, [r3, #3]
			break;
 800cf98:	e037      	b.n	800d00a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	09db      	lsrs	r3, r3, #7
 800cfa2:	4413      	add	r3, r2
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	68f8      	ldr	r0, [r7, #12]
 800cfa8:	f7ff fde8 	bl	800cb7c <move_window>
 800cfac:	4603      	mov	r3, r0
 800cfae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cfb0:	7ffb      	ldrb	r3, [r7, #31]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d128      	bne.n	800d008 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	009b      	lsls	r3, r3, #2
 800cfc6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cfca:	4413      	add	r3, r2
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7ff fb3c 	bl	800c64a <ld_dword>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800cfd8:	4323      	orrs	r3, r4
 800cfda:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	009b      	lsls	r3, r3, #2
 800cfe6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cfea:	4413      	add	r3, r2
 800cfec:	6879      	ldr	r1, [r7, #4]
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7ff fb69 	bl	800c6c6 <st_dword>
			fs->wflag = 1;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	2201      	movs	r2, #1
 800cff8:	70da      	strb	r2, [r3, #3]
			break;
 800cffa:	e006      	b.n	800d00a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cffc:	bf00      	nop
 800cffe:	e004      	b.n	800d00a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d000:	bf00      	nop
 800d002:	e002      	b.n	800d00a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d004:	bf00      	nop
 800d006:	e000      	b.n	800d00a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d008:	bf00      	nop
		}
	}
	return res;
 800d00a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3724      	adds	r7, #36	@ 0x24
 800d010:	46bd      	mov	sp, r7
 800d012:	bd90      	pop	{r4, r7, pc}

0800d014 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b088      	sub	sp, #32
 800d018:	af00      	add	r7, sp, #0
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	60b9      	str	r1, [r7, #8]
 800d01e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d020:	2300      	movs	r3, #0
 800d022:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d904      	bls.n	800d03a <remove_chain+0x26>
 800d030:	69bb      	ldr	r3, [r7, #24]
 800d032:	699b      	ldr	r3, [r3, #24]
 800d034:	68ba      	ldr	r2, [r7, #8]
 800d036:	429a      	cmp	r2, r3
 800d038:	d301      	bcc.n	800d03e <remove_chain+0x2a>
 800d03a:	2302      	movs	r3, #2
 800d03c:	e04b      	b.n	800d0d6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d00c      	beq.n	800d05e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d044:	f04f 32ff 	mov.w	r2, #4294967295
 800d048:	6879      	ldr	r1, [r7, #4]
 800d04a:	69b8      	ldr	r0, [r7, #24]
 800d04c:	f7ff fef8 	bl	800ce40 <put_fat>
 800d050:	4603      	mov	r3, r0
 800d052:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d054:	7ffb      	ldrb	r3, [r7, #31]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d001      	beq.n	800d05e <remove_chain+0x4a>
 800d05a:	7ffb      	ldrb	r3, [r7, #31]
 800d05c:	e03b      	b.n	800d0d6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d05e:	68b9      	ldr	r1, [r7, #8]
 800d060:	68f8      	ldr	r0, [r7, #12]
 800d062:	f7ff fe46 	bl	800ccf2 <get_fat>
 800d066:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d031      	beq.n	800d0d2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	2b01      	cmp	r3, #1
 800d072:	d101      	bne.n	800d078 <remove_chain+0x64>
 800d074:	2302      	movs	r3, #2
 800d076:	e02e      	b.n	800d0d6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d07e:	d101      	bne.n	800d084 <remove_chain+0x70>
 800d080:	2301      	movs	r3, #1
 800d082:	e028      	b.n	800d0d6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d084:	2200      	movs	r2, #0
 800d086:	68b9      	ldr	r1, [r7, #8]
 800d088:	69b8      	ldr	r0, [r7, #24]
 800d08a:	f7ff fed9 	bl	800ce40 <put_fat>
 800d08e:	4603      	mov	r3, r0
 800d090:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d092:	7ffb      	ldrb	r3, [r7, #31]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d001      	beq.n	800d09c <remove_chain+0x88>
 800d098:	7ffb      	ldrb	r3, [r7, #31]
 800d09a:	e01c      	b.n	800d0d6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	695a      	ldr	r2, [r3, #20]
 800d0a0:	69bb      	ldr	r3, [r7, #24]
 800d0a2:	699b      	ldr	r3, [r3, #24]
 800d0a4:	3b02      	subs	r3, #2
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d20b      	bcs.n	800d0c2 <remove_chain+0xae>
			fs->free_clst++;
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	695b      	ldr	r3, [r3, #20]
 800d0ae:	1c5a      	adds	r2, r3, #1
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d0b4:	69bb      	ldr	r3, [r7, #24]
 800d0b6:	791b      	ldrb	r3, [r3, #4]
 800d0b8:	f043 0301 	orr.w	r3, r3, #1
 800d0bc:	b2da      	uxtb	r2, r3
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	699b      	ldr	r3, [r3, #24]
 800d0ca:	68ba      	ldr	r2, [r7, #8]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d3c6      	bcc.n	800d05e <remove_chain+0x4a>
 800d0d0:	e000      	b.n	800d0d4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d0d2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d0d4:	2300      	movs	r3, #0
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3720      	adds	r7, #32
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}

0800d0de <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b088      	sub	sp, #32
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
 800d0e6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d10d      	bne.n	800d110 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	691b      	ldr	r3, [r3, #16]
 800d0f8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d0fa:	69bb      	ldr	r3, [r7, #24]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d004      	beq.n	800d10a <create_chain+0x2c>
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	699b      	ldr	r3, [r3, #24]
 800d104:	69ba      	ldr	r2, [r7, #24]
 800d106:	429a      	cmp	r2, r3
 800d108:	d31b      	bcc.n	800d142 <create_chain+0x64>
 800d10a:	2301      	movs	r3, #1
 800d10c:	61bb      	str	r3, [r7, #24]
 800d10e:	e018      	b.n	800d142 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d110:	6839      	ldr	r1, [r7, #0]
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f7ff fded 	bl	800ccf2 <get_fat>
 800d118:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d801      	bhi.n	800d124 <create_chain+0x46>
 800d120:	2301      	movs	r3, #1
 800d122:	e070      	b.n	800d206 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d12a:	d101      	bne.n	800d130 <create_chain+0x52>
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	e06a      	b.n	800d206 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	699b      	ldr	r3, [r3, #24]
 800d134:	68fa      	ldr	r2, [r7, #12]
 800d136:	429a      	cmp	r2, r3
 800d138:	d201      	bcs.n	800d13e <create_chain+0x60>
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	e063      	b.n	800d206 <create_chain+0x128>
		scl = clst;
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	3301      	adds	r3, #1
 800d14a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	699b      	ldr	r3, [r3, #24]
 800d150:	69fa      	ldr	r2, [r7, #28]
 800d152:	429a      	cmp	r2, r3
 800d154:	d307      	bcc.n	800d166 <create_chain+0x88>
				ncl = 2;
 800d156:	2302      	movs	r3, #2
 800d158:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d15a:	69fa      	ldr	r2, [r7, #28]
 800d15c:	69bb      	ldr	r3, [r7, #24]
 800d15e:	429a      	cmp	r2, r3
 800d160:	d901      	bls.n	800d166 <create_chain+0x88>
 800d162:	2300      	movs	r3, #0
 800d164:	e04f      	b.n	800d206 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d166:	69f9      	ldr	r1, [r7, #28]
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f7ff fdc2 	bl	800ccf2 <get_fat>
 800d16e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d00e      	beq.n	800d194 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d003      	beq.n	800d184 <create_chain+0xa6>
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d182:	d101      	bne.n	800d188 <create_chain+0xaa>
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	e03e      	b.n	800d206 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d188:	69fa      	ldr	r2, [r7, #28]
 800d18a:	69bb      	ldr	r3, [r7, #24]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d1da      	bne.n	800d146 <create_chain+0x68>
 800d190:	2300      	movs	r3, #0
 800d192:	e038      	b.n	800d206 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d194:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d196:	f04f 32ff 	mov.w	r2, #4294967295
 800d19a:	69f9      	ldr	r1, [r7, #28]
 800d19c:	6938      	ldr	r0, [r7, #16]
 800d19e:	f7ff fe4f 	bl	800ce40 <put_fat>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d1a6:	7dfb      	ldrb	r3, [r7, #23]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d109      	bne.n	800d1c0 <create_chain+0xe2>
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d006      	beq.n	800d1c0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d1b2:	69fa      	ldr	r2, [r7, #28]
 800d1b4:	6839      	ldr	r1, [r7, #0]
 800d1b6:	6938      	ldr	r0, [r7, #16]
 800d1b8:	f7ff fe42 	bl	800ce40 <put_fat>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d1c0:	7dfb      	ldrb	r3, [r7, #23]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d116      	bne.n	800d1f4 <create_chain+0x116>
		fs->last_clst = ncl;
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	69fa      	ldr	r2, [r7, #28]
 800d1ca:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	695a      	ldr	r2, [r3, #20]
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	699b      	ldr	r3, [r3, #24]
 800d1d4:	3b02      	subs	r3, #2
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d804      	bhi.n	800d1e4 <create_chain+0x106>
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	695b      	ldr	r3, [r3, #20]
 800d1de:	1e5a      	subs	r2, r3, #1
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	791b      	ldrb	r3, [r3, #4]
 800d1e8:	f043 0301 	orr.w	r3, r3, #1
 800d1ec:	b2da      	uxtb	r2, r3
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	711a      	strb	r2, [r3, #4]
 800d1f2:	e007      	b.n	800d204 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d1f4:	7dfb      	ldrb	r3, [r7, #23]
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d102      	bne.n	800d200 <create_chain+0x122>
 800d1fa:	f04f 33ff 	mov.w	r3, #4294967295
 800d1fe:	e000      	b.n	800d202 <create_chain+0x124>
 800d200:	2301      	movs	r3, #1
 800d202:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d204:	69fb      	ldr	r3, [r7, #28]
}
 800d206:	4618      	mov	r0, r3
 800d208:	3720      	adds	r7, #32
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d20e:	b480      	push	{r7}
 800d210:	b087      	sub	sp, #28
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
 800d216:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d222:	3304      	adds	r3, #4
 800d224:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	0a5b      	lsrs	r3, r3, #9
 800d22a:	68fa      	ldr	r2, [r7, #12]
 800d22c:	8952      	ldrh	r2, [r2, #10]
 800d22e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d232:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	1d1a      	adds	r2, r3, #4
 800d238:	613a      	str	r2, [r7, #16]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d101      	bne.n	800d248 <clmt_clust+0x3a>
 800d244:	2300      	movs	r3, #0
 800d246:	e010      	b.n	800d26a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d248:	697a      	ldr	r2, [r7, #20]
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d307      	bcc.n	800d260 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d250:	697a      	ldr	r2, [r7, #20]
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	1ad3      	subs	r3, r2, r3
 800d256:	617b      	str	r3, [r7, #20]
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	3304      	adds	r3, #4
 800d25c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d25e:	e7e9      	b.n	800d234 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d260:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	681a      	ldr	r2, [r3, #0]
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	4413      	add	r3, r2
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	371c      	adds	r7, #28
 800d26e:	46bd      	mov	sp, r7
 800d270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d274:	4770      	bx	lr

0800d276 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d276:	b580      	push	{r7, lr}
 800d278:	b086      	sub	sp, #24
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
 800d27e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d28c:	d204      	bcs.n	800d298 <dir_sdi+0x22>
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	f003 031f 	and.w	r3, r3, #31
 800d294:	2b00      	cmp	r3, #0
 800d296:	d001      	beq.n	800d29c <dir_sdi+0x26>
		return FR_INT_ERR;
 800d298:	2302      	movs	r3, #2
 800d29a:	e063      	b.n	800d364 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	683a      	ldr	r2, [r7, #0]
 800d2a0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	689b      	ldr	r3, [r3, #8]
 800d2a6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d106      	bne.n	800d2bc <dir_sdi+0x46>
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	2b02      	cmp	r3, #2
 800d2b4:	d902      	bls.n	800d2bc <dir_sdi+0x46>
		clst = fs->dirbase;
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2ba:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d10c      	bne.n	800d2dc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	095b      	lsrs	r3, r3, #5
 800d2c6:	693a      	ldr	r2, [r7, #16]
 800d2c8:	8912      	ldrh	r2, [r2, #8]
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d301      	bcc.n	800d2d2 <dir_sdi+0x5c>
 800d2ce:	2302      	movs	r3, #2
 800d2d0:	e048      	b.n	800d364 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	61da      	str	r2, [r3, #28]
 800d2da:	e029      	b.n	800d330 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	895b      	ldrh	r3, [r3, #10]
 800d2e0:	025b      	lsls	r3, r3, #9
 800d2e2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d2e4:	e019      	b.n	800d31a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6979      	ldr	r1, [r7, #20]
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7ff fd01 	bl	800ccf2 <get_fat>
 800d2f0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2f8:	d101      	bne.n	800d2fe <dir_sdi+0x88>
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	e032      	b.n	800d364 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	2b01      	cmp	r3, #1
 800d302:	d904      	bls.n	800d30e <dir_sdi+0x98>
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	699b      	ldr	r3, [r3, #24]
 800d308:	697a      	ldr	r2, [r7, #20]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d301      	bcc.n	800d312 <dir_sdi+0x9c>
 800d30e:	2302      	movs	r3, #2
 800d310:	e028      	b.n	800d364 <dir_sdi+0xee>
			ofs -= csz;
 800d312:	683a      	ldr	r2, [r7, #0]
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	1ad3      	subs	r3, r2, r3
 800d318:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d31a:	683a      	ldr	r2, [r7, #0]
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	429a      	cmp	r2, r3
 800d320:	d2e1      	bcs.n	800d2e6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d322:	6979      	ldr	r1, [r7, #20]
 800d324:	6938      	ldr	r0, [r7, #16]
 800d326:	f7ff fcc5 	bl	800ccb4 <clust2sect>
 800d32a:	4602      	mov	r2, r0
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	697a      	ldr	r2, [r7, #20]
 800d334:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	69db      	ldr	r3, [r3, #28]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d101      	bne.n	800d342 <dir_sdi+0xcc>
 800d33e:	2302      	movs	r3, #2
 800d340:	e010      	b.n	800d364 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	69da      	ldr	r2, [r3, #28]
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	0a5b      	lsrs	r3, r3, #9
 800d34a:	441a      	add	r2, r3
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d35c:	441a      	add	r2, r3
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d362:	2300      	movs	r3, #0
}
 800d364:	4618      	mov	r0, r3
 800d366:	3718      	adds	r7, #24
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b086      	sub	sp, #24
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	695b      	ldr	r3, [r3, #20]
 800d380:	3320      	adds	r3, #32
 800d382:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	69db      	ldr	r3, [r3, #28]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d003      	beq.n	800d394 <dir_next+0x28>
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d392:	d301      	bcc.n	800d398 <dir_next+0x2c>
 800d394:	2304      	movs	r3, #4
 800d396:	e0aa      	b.n	800d4ee <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	f040 8098 	bne.w	800d4d4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	69db      	ldr	r3, [r3, #28]
 800d3a8:	1c5a      	adds	r2, r3, #1
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	699b      	ldr	r3, [r3, #24]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10b      	bne.n	800d3ce <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	095b      	lsrs	r3, r3, #5
 800d3ba:	68fa      	ldr	r2, [r7, #12]
 800d3bc:	8912      	ldrh	r2, [r2, #8]
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	f0c0 8088 	bcc.w	800d4d4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	61da      	str	r2, [r3, #28]
 800d3ca:	2304      	movs	r3, #4
 800d3cc:	e08f      	b.n	800d4ee <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	0a5b      	lsrs	r3, r3, #9
 800d3d2:	68fa      	ldr	r2, [r7, #12]
 800d3d4:	8952      	ldrh	r2, [r2, #10]
 800d3d6:	3a01      	subs	r2, #1
 800d3d8:	4013      	ands	r3, r2
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d17a      	bne.n	800d4d4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	699b      	ldr	r3, [r3, #24]
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	4610      	mov	r0, r2
 800d3e8:	f7ff fc83 	bl	800ccf2 <get_fat>
 800d3ec:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d801      	bhi.n	800d3f8 <dir_next+0x8c>
 800d3f4:	2302      	movs	r3, #2
 800d3f6:	e07a      	b.n	800d4ee <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3fe:	d101      	bne.n	800d404 <dir_next+0x98>
 800d400:	2301      	movs	r3, #1
 800d402:	e074      	b.n	800d4ee <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	699b      	ldr	r3, [r3, #24]
 800d408:	697a      	ldr	r2, [r7, #20]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d358      	bcc.n	800d4c0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d104      	bne.n	800d41e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2200      	movs	r2, #0
 800d418:	61da      	str	r2, [r3, #28]
 800d41a:	2304      	movs	r3, #4
 800d41c:	e067      	b.n	800d4ee <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d41e:	687a      	ldr	r2, [r7, #4]
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	699b      	ldr	r3, [r3, #24]
 800d424:	4619      	mov	r1, r3
 800d426:	4610      	mov	r0, r2
 800d428:	f7ff fe59 	bl	800d0de <create_chain>
 800d42c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d101      	bne.n	800d438 <dir_next+0xcc>
 800d434:	2307      	movs	r3, #7
 800d436:	e05a      	b.n	800d4ee <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	2b01      	cmp	r3, #1
 800d43c:	d101      	bne.n	800d442 <dir_next+0xd6>
 800d43e:	2302      	movs	r3, #2
 800d440:	e055      	b.n	800d4ee <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d448:	d101      	bne.n	800d44e <dir_next+0xe2>
 800d44a:	2301      	movs	r3, #1
 800d44c:	e04f      	b.n	800d4ee <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d44e:	68f8      	ldr	r0, [r7, #12]
 800d450:	f7ff fb50 	bl	800caf4 <sync_window>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d001      	beq.n	800d45e <dir_next+0xf2>
 800d45a:	2301      	movs	r3, #1
 800d45c:	e047      	b.n	800d4ee <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	3334      	adds	r3, #52	@ 0x34
 800d462:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d466:	2100      	movs	r1, #0
 800d468:	4618      	mov	r0, r3
 800d46a:	f7ff f979 	bl	800c760 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d46e:	2300      	movs	r3, #0
 800d470:	613b      	str	r3, [r7, #16]
 800d472:	6979      	ldr	r1, [r7, #20]
 800d474:	68f8      	ldr	r0, [r7, #12]
 800d476:	f7ff fc1d 	bl	800ccb4 <clust2sect>
 800d47a:	4602      	mov	r2, r0
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	631a      	str	r2, [r3, #48]	@ 0x30
 800d480:	e012      	b.n	800d4a8 <dir_next+0x13c>
						fs->wflag = 1;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2201      	movs	r2, #1
 800d486:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d488:	68f8      	ldr	r0, [r7, #12]
 800d48a:	f7ff fb33 	bl	800caf4 <sync_window>
 800d48e:	4603      	mov	r3, r0
 800d490:	2b00      	cmp	r3, #0
 800d492:	d001      	beq.n	800d498 <dir_next+0x12c>
 800d494:	2301      	movs	r3, #1
 800d496:	e02a      	b.n	800d4ee <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	3301      	adds	r3, #1
 800d49c:	613b      	str	r3, [r7, #16]
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4a2:	1c5a      	adds	r2, r3, #1
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	631a      	str	r2, [r3, #48]	@ 0x30
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	895b      	ldrh	r3, [r3, #10]
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	d3e6      	bcc.n	800d482 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	1ad2      	subs	r2, r2, r3
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	697a      	ldr	r2, [r7, #20]
 800d4c4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d4c6:	6979      	ldr	r1, [r7, #20]
 800d4c8:	68f8      	ldr	r0, [r7, #12]
 800d4ca:	f7ff fbf3 	bl	800ccb4 <clust2sect>
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	68ba      	ldr	r2, [r7, #8]
 800d4d8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4e6:	441a      	add	r2, r3
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d4ec:	2300      	movs	r3, #0
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3718      	adds	r7, #24
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}

0800d4f6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d4f6:	b580      	push	{r7, lr}
 800d4f8:	b086      	sub	sp, #24
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6078      	str	r0, [r7, #4]
 800d4fe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d506:	2100      	movs	r1, #0
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f7ff feb4 	bl	800d276 <dir_sdi>
 800d50e:	4603      	mov	r3, r0
 800d510:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d512:	7dfb      	ldrb	r3, [r7, #23]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d12b      	bne.n	800d570 <dir_alloc+0x7a>
		n = 0;
 800d518:	2300      	movs	r3, #0
 800d51a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	69db      	ldr	r3, [r3, #28]
 800d520:	4619      	mov	r1, r3
 800d522:	68f8      	ldr	r0, [r7, #12]
 800d524:	f7ff fb2a 	bl	800cb7c <move_window>
 800d528:	4603      	mov	r3, r0
 800d52a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d52c:	7dfb      	ldrb	r3, [r7, #23]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d11d      	bne.n	800d56e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6a1b      	ldr	r3, [r3, #32]
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	2be5      	cmp	r3, #229	@ 0xe5
 800d53a:	d004      	beq.n	800d546 <dir_alloc+0x50>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6a1b      	ldr	r3, [r3, #32]
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d107      	bne.n	800d556 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	3301      	adds	r3, #1
 800d54a:	613b      	str	r3, [r7, #16]
 800d54c:	693a      	ldr	r2, [r7, #16]
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	429a      	cmp	r2, r3
 800d552:	d102      	bne.n	800d55a <dir_alloc+0x64>
 800d554:	e00c      	b.n	800d570 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d556:	2300      	movs	r3, #0
 800d558:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d55a:	2101      	movs	r1, #1
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f7ff ff05 	bl	800d36c <dir_next>
 800d562:	4603      	mov	r3, r0
 800d564:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d566:	7dfb      	ldrb	r3, [r7, #23]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d0d7      	beq.n	800d51c <dir_alloc+0x26>
 800d56c:	e000      	b.n	800d570 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d56e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d570:	7dfb      	ldrb	r3, [r7, #23]
 800d572:	2b04      	cmp	r3, #4
 800d574:	d101      	bne.n	800d57a <dir_alloc+0x84>
 800d576:	2307      	movs	r3, #7
 800d578:	75fb      	strb	r3, [r7, #23]
	return res;
 800d57a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3718      	adds	r7, #24
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	331a      	adds	r3, #26
 800d592:	4618      	mov	r0, r3
 800d594:	f7ff f840 	bl	800c618 <ld_word>
 800d598:	4603      	mov	r3, r0
 800d59a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	2b03      	cmp	r3, #3
 800d5a2:	d109      	bne.n	800d5b8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	3314      	adds	r3, #20
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7ff f835 	bl	800c618 <ld_word>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	041b      	lsls	r3, r3, #16
 800d5b2:	68fa      	ldr	r2, [r7, #12]
 800d5b4:	4313      	orrs	r3, r2
 800d5b6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3710      	adds	r7, #16
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}

0800d5c2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d5c2:	b580      	push	{r7, lr}
 800d5c4:	b084      	sub	sp, #16
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	60f8      	str	r0, [r7, #12]
 800d5ca:	60b9      	str	r1, [r7, #8]
 800d5cc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	331a      	adds	r3, #26
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	b292      	uxth	r2, r2
 800d5d6:	4611      	mov	r1, r2
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7ff f859 	bl	800c690 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	2b03      	cmp	r3, #3
 800d5e4:	d109      	bne.n	800d5fa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	f103 0214 	add.w	r2, r3, #20
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	0c1b      	lsrs	r3, r3, #16
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	4610      	mov	r0, r2
 800d5f6:	f7ff f84b 	bl	800c690 <st_word>
	}
}
 800d5fa:	bf00      	nop
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
	...

0800d604 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d604:	b590      	push	{r4, r7, lr}
 800d606:	b087      	sub	sp, #28
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	331a      	adds	r3, #26
 800d612:	4618      	mov	r0, r3
 800d614:	f7ff f800 	bl	800c618 <ld_word>
 800d618:	4603      	mov	r3, r0
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d001      	beq.n	800d622 <cmp_lfn+0x1e>
 800d61e:	2300      	movs	r3, #0
 800d620:	e059      	b.n	800d6d6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d62a:	1e5a      	subs	r2, r3, #1
 800d62c:	4613      	mov	r3, r2
 800d62e:	005b      	lsls	r3, r3, #1
 800d630:	4413      	add	r3, r2
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	4413      	add	r3, r2
 800d636:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d638:	2301      	movs	r3, #1
 800d63a:	81fb      	strh	r3, [r7, #14]
 800d63c:	2300      	movs	r3, #0
 800d63e:	613b      	str	r3, [r7, #16]
 800d640:	e033      	b.n	800d6aa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d642:	4a27      	ldr	r2, [pc, #156]	@ (800d6e0 <cmp_lfn+0xdc>)
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	4413      	add	r3, r2
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	461a      	mov	r2, r3
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	4413      	add	r3, r2
 800d650:	4618      	mov	r0, r3
 800d652:	f7fe ffe1 	bl	800c618 <ld_word>
 800d656:	4603      	mov	r3, r0
 800d658:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d65a:	89fb      	ldrh	r3, [r7, #14]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d01a      	beq.n	800d696 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	2bfe      	cmp	r3, #254	@ 0xfe
 800d664:	d812      	bhi.n	800d68c <cmp_lfn+0x88>
 800d666:	89bb      	ldrh	r3, [r7, #12]
 800d668:	4618      	mov	r0, r3
 800d66a:	f002 f99b 	bl	800f9a4 <ff_wtoupper>
 800d66e:	4603      	mov	r3, r0
 800d670:	461c      	mov	r4, r3
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	1c5a      	adds	r2, r3, #1
 800d676:	617a      	str	r2, [r7, #20]
 800d678:	005b      	lsls	r3, r3, #1
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	4413      	add	r3, r2
 800d67e:	881b      	ldrh	r3, [r3, #0]
 800d680:	4618      	mov	r0, r3
 800d682:	f002 f98f 	bl	800f9a4 <ff_wtoupper>
 800d686:	4603      	mov	r3, r0
 800d688:	429c      	cmp	r4, r3
 800d68a:	d001      	beq.n	800d690 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d68c:	2300      	movs	r3, #0
 800d68e:	e022      	b.n	800d6d6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d690:	89bb      	ldrh	r3, [r7, #12]
 800d692:	81fb      	strh	r3, [r7, #14]
 800d694:	e006      	b.n	800d6a4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d696:	89bb      	ldrh	r3, [r7, #12]
 800d698:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d001      	beq.n	800d6a4 <cmp_lfn+0xa0>
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	e018      	b.n	800d6d6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	613b      	str	r3, [r7, #16]
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	2b0c      	cmp	r3, #12
 800d6ae:	d9c8      	bls.n	800d642 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d00b      	beq.n	800d6d4 <cmp_lfn+0xd0>
 800d6bc:	89fb      	ldrh	r3, [r7, #14]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d008      	beq.n	800d6d4 <cmp_lfn+0xd0>
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	005b      	lsls	r3, r3, #1
 800d6c6:	687a      	ldr	r2, [r7, #4]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	881b      	ldrh	r3, [r3, #0]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d001      	beq.n	800d6d4 <cmp_lfn+0xd0>
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	e000      	b.n	800d6d6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d6d4:	2301      	movs	r3, #1
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	371c      	adds	r7, #28
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd90      	pop	{r4, r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	080105b0 	.word	0x080105b0

0800d6e4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b086      	sub	sp, #24
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	331a      	adds	r3, #26
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7fe ff90 	bl	800c618 <ld_word>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d001      	beq.n	800d702 <pick_lfn+0x1e>
 800d6fe:	2300      	movs	r3, #0
 800d700:	e04d      	b.n	800d79e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d70a:	1e5a      	subs	r2, r3, #1
 800d70c:	4613      	mov	r3, r2
 800d70e:	005b      	lsls	r3, r3, #1
 800d710:	4413      	add	r3, r2
 800d712:	009b      	lsls	r3, r3, #2
 800d714:	4413      	add	r3, r2
 800d716:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d718:	2301      	movs	r3, #1
 800d71a:	81fb      	strh	r3, [r7, #14]
 800d71c:	2300      	movs	r3, #0
 800d71e:	613b      	str	r3, [r7, #16]
 800d720:	e028      	b.n	800d774 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d722:	4a21      	ldr	r2, [pc, #132]	@ (800d7a8 <pick_lfn+0xc4>)
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	4413      	add	r3, r2
 800d728:	781b      	ldrb	r3, [r3, #0]
 800d72a:	461a      	mov	r2, r3
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	4413      	add	r3, r2
 800d730:	4618      	mov	r0, r3
 800d732:	f7fe ff71 	bl	800c618 <ld_word>
 800d736:	4603      	mov	r3, r0
 800d738:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d73a:	89fb      	ldrh	r3, [r7, #14]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d00f      	beq.n	800d760 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	2bfe      	cmp	r3, #254	@ 0xfe
 800d744:	d901      	bls.n	800d74a <pick_lfn+0x66>
 800d746:	2300      	movs	r3, #0
 800d748:	e029      	b.n	800d79e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d74a:	89bb      	ldrh	r3, [r7, #12]
 800d74c:	81fb      	strh	r3, [r7, #14]
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	1c5a      	adds	r2, r3, #1
 800d752:	617a      	str	r2, [r7, #20]
 800d754:	005b      	lsls	r3, r3, #1
 800d756:	687a      	ldr	r2, [r7, #4]
 800d758:	4413      	add	r3, r2
 800d75a:	89fa      	ldrh	r2, [r7, #14]
 800d75c:	801a      	strh	r2, [r3, #0]
 800d75e:	e006      	b.n	800d76e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d760:	89bb      	ldrh	r3, [r7, #12]
 800d762:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d766:	4293      	cmp	r3, r2
 800d768:	d001      	beq.n	800d76e <pick_lfn+0x8a>
 800d76a:	2300      	movs	r3, #0
 800d76c:	e017      	b.n	800d79e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	3301      	adds	r3, #1
 800d772:	613b      	str	r3, [r7, #16]
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	2b0c      	cmp	r3, #12
 800d778:	d9d3      	bls.n	800d722 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d782:	2b00      	cmp	r3, #0
 800d784:	d00a      	beq.n	800d79c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	2bfe      	cmp	r3, #254	@ 0xfe
 800d78a:	d901      	bls.n	800d790 <pick_lfn+0xac>
 800d78c:	2300      	movs	r3, #0
 800d78e:	e006      	b.n	800d79e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	005b      	lsls	r3, r3, #1
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	4413      	add	r3, r2
 800d798:	2200      	movs	r2, #0
 800d79a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800d79c:	2301      	movs	r3, #1
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3718      	adds	r7, #24
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	080105b0 	.word	0x080105b0

0800d7ac <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b088      	sub	sp, #32
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	4611      	mov	r1, r2
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	71fb      	strb	r3, [r7, #7]
 800d7be:	4613      	mov	r3, r2
 800d7c0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	330d      	adds	r3, #13
 800d7c6:	79ba      	ldrb	r2, [r7, #6]
 800d7c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	330b      	adds	r3, #11
 800d7ce:	220f      	movs	r2, #15
 800d7d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	330c      	adds	r3, #12
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	331a      	adds	r3, #26
 800d7de:	2100      	movs	r1, #0
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f7fe ff55 	bl	800c690 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d7e6:	79fb      	ldrb	r3, [r7, #7]
 800d7e8:	1e5a      	subs	r2, r3, #1
 800d7ea:	4613      	mov	r3, r2
 800d7ec:	005b      	lsls	r3, r3, #1
 800d7ee:	4413      	add	r3, r2
 800d7f0:	009b      	lsls	r3, r3, #2
 800d7f2:	4413      	add	r3, r2
 800d7f4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	82fb      	strh	r3, [r7, #22]
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d7fe:	8afb      	ldrh	r3, [r7, #22]
 800d800:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d804:	4293      	cmp	r3, r2
 800d806:	d007      	beq.n	800d818 <put_lfn+0x6c>
 800d808:	69fb      	ldr	r3, [r7, #28]
 800d80a:	1c5a      	adds	r2, r3, #1
 800d80c:	61fa      	str	r2, [r7, #28]
 800d80e:	005b      	lsls	r3, r3, #1
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	4413      	add	r3, r2
 800d814:	881b      	ldrh	r3, [r3, #0]
 800d816:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d818:	4a17      	ldr	r2, [pc, #92]	@ (800d878 <put_lfn+0xcc>)
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	4413      	add	r3, r2
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	461a      	mov	r2, r3
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	4413      	add	r3, r2
 800d826:	8afa      	ldrh	r2, [r7, #22]
 800d828:	4611      	mov	r1, r2
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7fe ff30 	bl	800c690 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d830:	8afb      	ldrh	r3, [r7, #22]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d102      	bne.n	800d83c <put_lfn+0x90>
 800d836:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d83a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	3301      	adds	r3, #1
 800d840:	61bb      	str	r3, [r7, #24]
 800d842:	69bb      	ldr	r3, [r7, #24]
 800d844:	2b0c      	cmp	r3, #12
 800d846:	d9da      	bls.n	800d7fe <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d848:	8afb      	ldrh	r3, [r7, #22]
 800d84a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d84e:	4293      	cmp	r3, r2
 800d850:	d006      	beq.n	800d860 <put_lfn+0xb4>
 800d852:	69fb      	ldr	r3, [r7, #28]
 800d854:	005b      	lsls	r3, r3, #1
 800d856:	68fa      	ldr	r2, [r7, #12]
 800d858:	4413      	add	r3, r2
 800d85a:	881b      	ldrh	r3, [r3, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d103      	bne.n	800d868 <put_lfn+0xbc>
 800d860:	79fb      	ldrb	r3, [r7, #7]
 800d862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d866:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	79fa      	ldrb	r2, [r7, #7]
 800d86c:	701a      	strb	r2, [r3, #0]
}
 800d86e:	bf00      	nop
 800d870:	3720      	adds	r7, #32
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	080105b0 	.word	0x080105b0

0800d87c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b08c      	sub	sp, #48	@ 0x30
 800d880:	af00      	add	r7, sp, #0
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	607a      	str	r2, [r7, #4]
 800d888:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d88a:	220b      	movs	r2, #11
 800d88c:	68b9      	ldr	r1, [r7, #8]
 800d88e:	68f8      	ldr	r0, [r7, #12]
 800d890:	f7fe ff45 	bl	800c71e <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	2b05      	cmp	r3, #5
 800d898:	d92b      	bls.n	800d8f2 <gen_numname+0x76>
		sr = seq;
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d89e:	e022      	b.n	800d8e6 <gen_numname+0x6a>
			wc = *lfn++;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	1c9a      	adds	r2, r3, #2
 800d8a4:	607a      	str	r2, [r7, #4]
 800d8a6:	881b      	ldrh	r3, [r3, #0]
 800d8a8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d8ae:	e017      	b.n	800d8e0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d8b0:	69fb      	ldr	r3, [r7, #28]
 800d8b2:	005a      	lsls	r2, r3, #1
 800d8b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d8b6:	f003 0301 	and.w	r3, r3, #1
 800d8ba:	4413      	add	r3, r2
 800d8bc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d8be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d8c0:	085b      	lsrs	r3, r3, #1
 800d8c2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d005      	beq.n	800d8da <gen_numname+0x5e>
 800d8ce:	69fb      	ldr	r3, [r7, #28]
 800d8d0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800d8d4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800d8d8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8dc:	3301      	adds	r3, #1
 800d8de:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8e2:	2b0f      	cmp	r3, #15
 800d8e4:	d9e4      	bls.n	800d8b0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	881b      	ldrh	r3, [r3, #0]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d1d8      	bne.n	800d8a0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d8ee:	69fb      	ldr	r3, [r7, #28]
 800d8f0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d8f2:	2307      	movs	r3, #7
 800d8f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	b2db      	uxtb	r3, r3
 800d8fa:	f003 030f 	and.w	r3, r3, #15
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	3330      	adds	r3, #48	@ 0x30
 800d902:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800d906:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d90a:	2b39      	cmp	r3, #57	@ 0x39
 800d90c:	d904      	bls.n	800d918 <gen_numname+0x9c>
 800d90e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d912:	3307      	adds	r3, #7
 800d914:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800d918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d91a:	1e5a      	subs	r2, r3, #1
 800d91c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d91e:	3330      	adds	r3, #48	@ 0x30
 800d920:	443b      	add	r3, r7
 800d922:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d926:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	091b      	lsrs	r3, r3, #4
 800d92e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d1df      	bne.n	800d8f6 <gen_numname+0x7a>
	ns[i] = '~';
 800d936:	f107 0214 	add.w	r2, r7, #20
 800d93a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d93c:	4413      	add	r3, r2
 800d93e:	227e      	movs	r2, #126	@ 0x7e
 800d940:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d942:	2300      	movs	r3, #0
 800d944:	627b      	str	r3, [r7, #36]	@ 0x24
 800d946:	e002      	b.n	800d94e <gen_numname+0xd2>
 800d948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d94a:	3301      	adds	r3, #1
 800d94c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d94e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d952:	429a      	cmp	r2, r3
 800d954:	d205      	bcs.n	800d962 <gen_numname+0xe6>
 800d956:	68fa      	ldr	r2, [r7, #12]
 800d958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d95a:	4413      	add	r3, r2
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	2b20      	cmp	r3, #32
 800d960:	d1f2      	bne.n	800d948 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d964:	2b07      	cmp	r3, #7
 800d966:	d807      	bhi.n	800d978 <gen_numname+0xfc>
 800d968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d96a:	1c5a      	adds	r2, r3, #1
 800d96c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d96e:	3330      	adds	r3, #48	@ 0x30
 800d970:	443b      	add	r3, r7
 800d972:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d976:	e000      	b.n	800d97a <gen_numname+0xfe>
 800d978:	2120      	movs	r1, #32
 800d97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d97c:	1c5a      	adds	r2, r3, #1
 800d97e:	627a      	str	r2, [r7, #36]	@ 0x24
 800d980:	68fa      	ldr	r2, [r7, #12]
 800d982:	4413      	add	r3, r2
 800d984:	460a      	mov	r2, r1
 800d986:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d98a:	2b07      	cmp	r3, #7
 800d98c:	d9e9      	bls.n	800d962 <gen_numname+0xe6>
}
 800d98e:	bf00      	nop
 800d990:	bf00      	nop
 800d992:	3730      	adds	r7, #48	@ 0x30
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d998:	b480      	push	{r7}
 800d99a:	b085      	sub	sp, #20
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d9a4:	230b      	movs	r3, #11
 800d9a6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d9a8:	7bfb      	ldrb	r3, [r7, #15]
 800d9aa:	b2da      	uxtb	r2, r3
 800d9ac:	0852      	lsrs	r2, r2, #1
 800d9ae:	01db      	lsls	r3, r3, #7
 800d9b0:	4313      	orrs	r3, r2
 800d9b2:	b2da      	uxtb	r2, r3
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	1c59      	adds	r1, r3, #1
 800d9b8:	6079      	str	r1, [r7, #4]
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	4413      	add	r3, r2
 800d9be:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	3b01      	subs	r3, #1
 800d9c4:	60bb      	str	r3, [r7, #8]
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d1ed      	bne.n	800d9a8 <sum_sfn+0x10>
	return sum;
 800d9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3714      	adds	r7, #20
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr

0800d9da <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d9da:	b580      	push	{r7, lr}
 800d9dc:	b086      	sub	sp, #24
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
 800d9e2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d9e4:	2304      	movs	r3, #4
 800d9e6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d9ee:	23ff      	movs	r3, #255	@ 0xff
 800d9f0:	757b      	strb	r3, [r7, #21]
 800d9f2:	23ff      	movs	r3, #255	@ 0xff
 800d9f4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d9f6:	e081      	b.n	800dafc <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	69db      	ldr	r3, [r3, #28]
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	6938      	ldr	r0, [r7, #16]
 800da00:	f7ff f8bc 	bl	800cb7c <move_window>
 800da04:	4603      	mov	r3, r0
 800da06:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800da08:	7dfb      	ldrb	r3, [r7, #23]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d17c      	bne.n	800db08 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6a1b      	ldr	r3, [r3, #32]
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800da16:	7dbb      	ldrb	r3, [r7, #22]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d102      	bne.n	800da22 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800da1c:	2304      	movs	r3, #4
 800da1e:	75fb      	strb	r3, [r7, #23]
 800da20:	e077      	b.n	800db12 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6a1b      	ldr	r3, [r3, #32]
 800da26:	330b      	adds	r3, #11
 800da28:	781b      	ldrb	r3, [r3, #0]
 800da2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800da2e:	73fb      	strb	r3, [r7, #15]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	7bfa      	ldrb	r2, [r7, #15]
 800da34:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800da36:	7dbb      	ldrb	r3, [r7, #22]
 800da38:	2be5      	cmp	r3, #229	@ 0xe5
 800da3a:	d00e      	beq.n	800da5a <dir_read+0x80>
 800da3c:	7dbb      	ldrb	r3, [r7, #22]
 800da3e:	2b2e      	cmp	r3, #46	@ 0x2e
 800da40:	d00b      	beq.n	800da5a <dir_read+0x80>
 800da42:	7bfb      	ldrb	r3, [r7, #15]
 800da44:	f023 0320 	bic.w	r3, r3, #32
 800da48:	2b08      	cmp	r3, #8
 800da4a:	bf0c      	ite	eq
 800da4c:	2301      	moveq	r3, #1
 800da4e:	2300      	movne	r3, #0
 800da50:	b2db      	uxtb	r3, r3
 800da52:	461a      	mov	r2, r3
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	4293      	cmp	r3, r2
 800da58:	d002      	beq.n	800da60 <dir_read+0x86>
				ord = 0xFF;
 800da5a:	23ff      	movs	r3, #255	@ 0xff
 800da5c:	757b      	strb	r3, [r7, #21]
 800da5e:	e044      	b.n	800daea <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800da60:	7bfb      	ldrb	r3, [r7, #15]
 800da62:	2b0f      	cmp	r3, #15
 800da64:	d12f      	bne.n	800dac6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800da66:	7dbb      	ldrb	r3, [r7, #22]
 800da68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d00d      	beq.n	800da8c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6a1b      	ldr	r3, [r3, #32]
 800da74:	7b5b      	ldrb	r3, [r3, #13]
 800da76:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800da78:	7dbb      	ldrb	r3, [r7, #22]
 800da7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da7e:	75bb      	strb	r3, [r7, #22]
 800da80:	7dbb      	ldrb	r3, [r7, #22]
 800da82:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	695a      	ldr	r2, [r3, #20]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800da8c:	7dba      	ldrb	r2, [r7, #22]
 800da8e:	7d7b      	ldrb	r3, [r7, #21]
 800da90:	429a      	cmp	r2, r3
 800da92:	d115      	bne.n	800dac0 <dir_read+0xe6>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6a1b      	ldr	r3, [r3, #32]
 800da98:	330d      	adds	r3, #13
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	7d3a      	ldrb	r2, [r7, #20]
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d10e      	bne.n	800dac0 <dir_read+0xe6>
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	68da      	ldr	r2, [r3, #12]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6a1b      	ldr	r3, [r3, #32]
 800daaa:	4619      	mov	r1, r3
 800daac:	4610      	mov	r0, r2
 800daae:	f7ff fe19 	bl	800d6e4 <pick_lfn>
 800dab2:	4603      	mov	r3, r0
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d003      	beq.n	800dac0 <dir_read+0xe6>
 800dab8:	7d7b      	ldrb	r3, [r7, #21]
 800daba:	3b01      	subs	r3, #1
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	e000      	b.n	800dac2 <dir_read+0xe8>
 800dac0:	23ff      	movs	r3, #255	@ 0xff
 800dac2:	757b      	strb	r3, [r7, #21]
 800dac4:	e011      	b.n	800daea <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800dac6:	7d7b      	ldrb	r3, [r7, #21]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d109      	bne.n	800dae0 <dir_read+0x106>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6a1b      	ldr	r3, [r3, #32]
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7ff ff61 	bl	800d998 <sum_sfn>
 800dad6:	4603      	mov	r3, r0
 800dad8:	461a      	mov	r2, r3
 800dada:	7d3b      	ldrb	r3, [r7, #20]
 800dadc:	4293      	cmp	r3, r2
 800dade:	d015      	beq.n	800db0c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f04f 32ff 	mov.w	r2, #4294967295
 800dae6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 800dae8:	e010      	b.n	800db0c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800daea:	2100      	movs	r1, #0
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f7ff fc3d 	bl	800d36c <dir_next>
 800daf2:	4603      	mov	r3, r0
 800daf4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800daf6:	7dfb      	ldrb	r3, [r7, #23]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d109      	bne.n	800db10 <dir_read+0x136>
	while (dp->sect) {
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	69db      	ldr	r3, [r3, #28]
 800db00:	2b00      	cmp	r3, #0
 800db02:	f47f af79 	bne.w	800d9f8 <dir_read+0x1e>
 800db06:	e004      	b.n	800db12 <dir_read+0x138>
		if (res != FR_OK) break;
 800db08:	bf00      	nop
 800db0a:	e002      	b.n	800db12 <dir_read+0x138>
					break;
 800db0c:	bf00      	nop
 800db0e:	e000      	b.n	800db12 <dir_read+0x138>
		if (res != FR_OK) break;
 800db10:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800db12:	7dfb      	ldrb	r3, [r7, #23]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d002      	beq.n	800db1e <dir_read+0x144>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2200      	movs	r2, #0
 800db1c:	61da      	str	r2, [r3, #28]
	return res;
 800db1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800db20:	4618      	mov	r0, r3
 800db22:	3718      	adds	r7, #24
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b086      	sub	sp, #24
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800db36:	2100      	movs	r1, #0
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f7ff fb9c 	bl	800d276 <dir_sdi>
 800db3e:	4603      	mov	r3, r0
 800db40:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800db42:	7dfb      	ldrb	r3, [r7, #23]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d001      	beq.n	800db4c <dir_find+0x24>
 800db48:	7dfb      	ldrb	r3, [r7, #23]
 800db4a:	e0a9      	b.n	800dca0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800db4c:	23ff      	movs	r3, #255	@ 0xff
 800db4e:	753b      	strb	r3, [r7, #20]
 800db50:	7d3b      	ldrb	r3, [r7, #20]
 800db52:	757b      	strb	r3, [r7, #21]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f04f 32ff 	mov.w	r2, #4294967295
 800db5a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	69db      	ldr	r3, [r3, #28]
 800db60:	4619      	mov	r1, r3
 800db62:	6938      	ldr	r0, [r7, #16]
 800db64:	f7ff f80a 	bl	800cb7c <move_window>
 800db68:	4603      	mov	r3, r0
 800db6a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800db6c:	7dfb      	ldrb	r3, [r7, #23]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	f040 8090 	bne.w	800dc94 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6a1b      	ldr	r3, [r3, #32]
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800db7c:	7dbb      	ldrb	r3, [r7, #22]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d102      	bne.n	800db88 <dir_find+0x60>
 800db82:	2304      	movs	r3, #4
 800db84:	75fb      	strb	r3, [r7, #23]
 800db86:	e08a      	b.n	800dc9e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6a1b      	ldr	r3, [r3, #32]
 800db8c:	330b      	adds	r3, #11
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800db94:	73fb      	strb	r3, [r7, #15]
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	7bfa      	ldrb	r2, [r7, #15]
 800db9a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800db9c:	7dbb      	ldrb	r3, [r7, #22]
 800db9e:	2be5      	cmp	r3, #229	@ 0xe5
 800dba0:	d007      	beq.n	800dbb2 <dir_find+0x8a>
 800dba2:	7bfb      	ldrb	r3, [r7, #15]
 800dba4:	f003 0308 	and.w	r3, r3, #8
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d009      	beq.n	800dbc0 <dir_find+0x98>
 800dbac:	7bfb      	ldrb	r3, [r7, #15]
 800dbae:	2b0f      	cmp	r3, #15
 800dbb0:	d006      	beq.n	800dbc0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dbb2:	23ff      	movs	r3, #255	@ 0xff
 800dbb4:	757b      	strb	r3, [r7, #21]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f04f 32ff 	mov.w	r2, #4294967295
 800dbbc:	631a      	str	r2, [r3, #48]	@ 0x30
 800dbbe:	e05e      	b.n	800dc7e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800dbc0:	7bfb      	ldrb	r3, [r7, #15]
 800dbc2:	2b0f      	cmp	r3, #15
 800dbc4:	d136      	bne.n	800dc34 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800dbcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d154      	bne.n	800dc7e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800dbd4:	7dbb      	ldrb	r3, [r7, #22]
 800dbd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00d      	beq.n	800dbfa <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6a1b      	ldr	r3, [r3, #32]
 800dbe2:	7b5b      	ldrb	r3, [r3, #13]
 800dbe4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800dbe6:	7dbb      	ldrb	r3, [r7, #22]
 800dbe8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dbec:	75bb      	strb	r3, [r7, #22]
 800dbee:	7dbb      	ldrb	r3, [r7, #22]
 800dbf0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	695a      	ldr	r2, [r3, #20]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dbfa:	7dba      	ldrb	r2, [r7, #22]
 800dbfc:	7d7b      	ldrb	r3, [r7, #21]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d115      	bne.n	800dc2e <dir_find+0x106>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6a1b      	ldr	r3, [r3, #32]
 800dc06:	330d      	adds	r3, #13
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	7d3a      	ldrb	r2, [r7, #20]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d10e      	bne.n	800dc2e <dir_find+0x106>
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	68da      	ldr	r2, [r3, #12]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6a1b      	ldr	r3, [r3, #32]
 800dc18:	4619      	mov	r1, r3
 800dc1a:	4610      	mov	r0, r2
 800dc1c:	f7ff fcf2 	bl	800d604 <cmp_lfn>
 800dc20:	4603      	mov	r3, r0
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d003      	beq.n	800dc2e <dir_find+0x106>
 800dc26:	7d7b      	ldrb	r3, [r7, #21]
 800dc28:	3b01      	subs	r3, #1
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	e000      	b.n	800dc30 <dir_find+0x108>
 800dc2e:	23ff      	movs	r3, #255	@ 0xff
 800dc30:	757b      	strb	r3, [r7, #21]
 800dc32:	e024      	b.n	800dc7e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800dc34:	7d7b      	ldrb	r3, [r7, #21]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d109      	bne.n	800dc4e <dir_find+0x126>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6a1b      	ldr	r3, [r3, #32]
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7ff feaa 	bl	800d998 <sum_sfn>
 800dc44:	4603      	mov	r3, r0
 800dc46:	461a      	mov	r2, r3
 800dc48:	7d3b      	ldrb	r3, [r7, #20]
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d024      	beq.n	800dc98 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800dc54:	f003 0301 	and.w	r3, r3, #1
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d10a      	bne.n	800dc72 <dir_find+0x14a>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6a18      	ldr	r0, [r3, #32]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	3324      	adds	r3, #36	@ 0x24
 800dc64:	220b      	movs	r2, #11
 800dc66:	4619      	mov	r1, r3
 800dc68:	f7fe fd95 	bl	800c796 <mem_cmp>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d014      	beq.n	800dc9c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dc72:	23ff      	movs	r3, #255	@ 0xff
 800dc74:	757b      	strb	r3, [r7, #21]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f04f 32ff 	mov.w	r2, #4294967295
 800dc7c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800dc7e:	2100      	movs	r1, #0
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f7ff fb73 	bl	800d36c <dir_next>
 800dc86:	4603      	mov	r3, r0
 800dc88:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800dc8a:	7dfb      	ldrb	r3, [r7, #23]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	f43f af65 	beq.w	800db5c <dir_find+0x34>
 800dc92:	e004      	b.n	800dc9e <dir_find+0x176>
		if (res != FR_OK) break;
 800dc94:	bf00      	nop
 800dc96:	e002      	b.n	800dc9e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800dc98:	bf00      	nop
 800dc9a:	e000      	b.n	800dc9e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800dc9c:	bf00      	nop

	return res;
 800dc9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3718      	adds	r7, #24
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b08c      	sub	sp, #48	@ 0x30
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800dcbc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d001      	beq.n	800dcc8 <dir_register+0x20>
 800dcc4:	2306      	movs	r3, #6
 800dcc6:	e0e0      	b.n	800de8a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800dcc8:	2300      	movs	r3, #0
 800dcca:	627b      	str	r3, [r7, #36]	@ 0x24
 800dccc:	e002      	b.n	800dcd4 <dir_register+0x2c>
 800dcce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	627b      	str	r3, [r7, #36]	@ 0x24
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	68da      	ldr	r2, [r3, #12]
 800dcd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcda:	005b      	lsls	r3, r3, #1
 800dcdc:	4413      	add	r3, r2
 800dcde:	881b      	ldrh	r3, [r3, #0]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d1f4      	bne.n	800dcce <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800dcea:	f107 030c 	add.w	r3, r7, #12
 800dcee:	220c      	movs	r2, #12
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7fe fd14 	bl	800c71e <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800dcf6:	7dfb      	ldrb	r3, [r7, #23]
 800dcf8:	f003 0301 	and.w	r3, r3, #1
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d032      	beq.n	800dd66 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2240      	movs	r2, #64	@ 0x40
 800dd04:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800dd08:	2301      	movs	r3, #1
 800dd0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dd0c:	e016      	b.n	800dd3c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	68da      	ldr	r2, [r3, #12]
 800dd18:	f107 010c 	add.w	r1, r7, #12
 800dd1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd1e:	f7ff fdad 	bl	800d87c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f7ff ff00 	bl	800db28 <dir_find>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800dd2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d106      	bne.n	800dd44 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800dd36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd38:	3301      	adds	r3, #1
 800dd3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dd3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd3e:	2b63      	cmp	r3, #99	@ 0x63
 800dd40:	d9e5      	bls.n	800dd0e <dir_register+0x66>
 800dd42:	e000      	b.n	800dd46 <dir_register+0x9e>
			if (res != FR_OK) break;
 800dd44:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800dd46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd48:	2b64      	cmp	r3, #100	@ 0x64
 800dd4a:	d101      	bne.n	800dd50 <dir_register+0xa8>
 800dd4c:	2307      	movs	r3, #7
 800dd4e:	e09c      	b.n	800de8a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800dd50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dd54:	2b04      	cmp	r3, #4
 800dd56:	d002      	beq.n	800dd5e <dir_register+0xb6>
 800dd58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dd5c:	e095      	b.n	800de8a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800dd5e:	7dfa      	ldrb	r2, [r7, #23]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800dd66:	7dfb      	ldrb	r3, [r7, #23]
 800dd68:	f003 0302 	and.w	r3, r3, #2
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d007      	beq.n	800dd80 <dir_register+0xd8>
 800dd70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd72:	330c      	adds	r3, #12
 800dd74:	4a47      	ldr	r2, [pc, #284]	@ (800de94 <dir_register+0x1ec>)
 800dd76:	fba2 2303 	umull	r2, r3, r2, r3
 800dd7a:	089b      	lsrs	r3, r3, #2
 800dd7c:	3301      	adds	r3, #1
 800dd7e:	e000      	b.n	800dd82 <dir_register+0xda>
 800dd80:	2301      	movs	r3, #1
 800dd82:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800dd84:	6a39      	ldr	r1, [r7, #32]
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f7ff fbb5 	bl	800d4f6 <dir_alloc>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800dd92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d148      	bne.n	800de2c <dir_register+0x184>
 800dd9a:	6a3b      	ldr	r3, [r7, #32]
 800dd9c:	3b01      	subs	r3, #1
 800dd9e:	623b      	str	r3, [r7, #32]
 800dda0:	6a3b      	ldr	r3, [r7, #32]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d042      	beq.n	800de2c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	695a      	ldr	r2, [r3, #20]
 800ddaa:	6a3b      	ldr	r3, [r7, #32]
 800ddac:	015b      	lsls	r3, r3, #5
 800ddae:	1ad3      	subs	r3, r2, r3
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f7ff fa5f 	bl	800d276 <dir_sdi>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800ddbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d132      	bne.n	800de2c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	3324      	adds	r3, #36	@ 0x24
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f7ff fde4 	bl	800d998 <sum_sfn>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	69db      	ldr	r3, [r3, #28]
 800ddd8:	4619      	mov	r1, r3
 800ddda:	69f8      	ldr	r0, [r7, #28]
 800dddc:	f7fe fece 	bl	800cb7c <move_window>
 800dde0:	4603      	mov	r3, r0
 800dde2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800dde6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d11d      	bne.n	800de2a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ddee:	69fb      	ldr	r3, [r7, #28]
 800ddf0:	68d8      	ldr	r0, [r3, #12]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6a19      	ldr	r1, [r3, #32]
 800ddf6:	6a3b      	ldr	r3, [r7, #32]
 800ddf8:	b2da      	uxtb	r2, r3
 800ddfa:	7efb      	ldrb	r3, [r7, #27]
 800ddfc:	f7ff fcd6 	bl	800d7ac <put_lfn>
				fs->wflag = 1;
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	2201      	movs	r2, #1
 800de04:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800de06:	2100      	movs	r1, #0
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f7ff faaf 	bl	800d36c <dir_next>
 800de0e:	4603      	mov	r3, r0
 800de10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800de14:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d107      	bne.n	800de2c <dir_register+0x184>
 800de1c:	6a3b      	ldr	r3, [r7, #32]
 800de1e:	3b01      	subs	r3, #1
 800de20:	623b      	str	r3, [r7, #32]
 800de22:	6a3b      	ldr	r3, [r7, #32]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d1d5      	bne.n	800ddd4 <dir_register+0x12c>
 800de28:	e000      	b.n	800de2c <dir_register+0x184>
				if (res != FR_OK) break;
 800de2a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800de2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800de30:	2b00      	cmp	r3, #0
 800de32:	d128      	bne.n	800de86 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	69db      	ldr	r3, [r3, #28]
 800de38:	4619      	mov	r1, r3
 800de3a:	69f8      	ldr	r0, [r7, #28]
 800de3c:	f7fe fe9e 	bl	800cb7c <move_window>
 800de40:	4603      	mov	r3, r0
 800de42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800de46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d11b      	bne.n	800de86 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6a1b      	ldr	r3, [r3, #32]
 800de52:	2220      	movs	r2, #32
 800de54:	2100      	movs	r1, #0
 800de56:	4618      	mov	r0, r3
 800de58:	f7fe fc82 	bl	800c760 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6a18      	ldr	r0, [r3, #32]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	3324      	adds	r3, #36	@ 0x24
 800de64:	220b      	movs	r2, #11
 800de66:	4619      	mov	r1, r3
 800de68:	f7fe fc59 	bl	800c71e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6a1b      	ldr	r3, [r3, #32]
 800de76:	330c      	adds	r3, #12
 800de78:	f002 0218 	and.w	r2, r2, #24
 800de7c:	b2d2      	uxtb	r2, r2
 800de7e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800de80:	69fb      	ldr	r3, [r7, #28]
 800de82:	2201      	movs	r2, #1
 800de84:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800de86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3730      	adds	r7, #48	@ 0x30
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	4ec4ec4f 	.word	0x4ec4ec4f

0800de98 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b088      	sub	sp, #32
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	2200      	movs	r2, #0
 800deac:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	69db      	ldr	r3, [r3, #28]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	f000 80ca 	beq.w	800e04c <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800debc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dec0:	d032      	beq.n	800df28 <get_fileinfo+0x90>
			i = j = 0;
 800dec2:	2300      	movs	r3, #0
 800dec4:	61bb      	str	r3, [r7, #24]
 800dec6:	69bb      	ldr	r3, [r7, #24]
 800dec8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800deca:	e01b      	b.n	800df04 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800decc:	89fb      	ldrh	r3, [r7, #14]
 800dece:	2100      	movs	r1, #0
 800ded0:	4618      	mov	r0, r3
 800ded2:	f001 fd2b 	bl	800f92c <ff_convert>
 800ded6:	4603      	mov	r3, r0
 800ded8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800deda:	89fb      	ldrh	r3, [r7, #14]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d102      	bne.n	800dee6 <get_fileinfo+0x4e>
 800dee0:	2300      	movs	r3, #0
 800dee2:	61fb      	str	r3, [r7, #28]
 800dee4:	e01a      	b.n	800df1c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800dee6:	69fb      	ldr	r3, [r7, #28]
 800dee8:	2bfe      	cmp	r3, #254	@ 0xfe
 800deea:	d902      	bls.n	800def2 <get_fileinfo+0x5a>
 800deec:	2300      	movs	r3, #0
 800deee:	61fb      	str	r3, [r7, #28]
 800def0:	e014      	b.n	800df1c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800def2:	69fb      	ldr	r3, [r7, #28]
 800def4:	1c5a      	adds	r2, r3, #1
 800def6:	61fa      	str	r2, [r7, #28]
 800def8:	89fa      	ldrh	r2, [r7, #14]
 800defa:	b2d1      	uxtb	r1, r2
 800defc:	683a      	ldr	r2, [r7, #0]
 800defe:	4413      	add	r3, r2
 800df00:	460a      	mov	r2, r1
 800df02:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	68da      	ldr	r2, [r3, #12]
 800df08:	69bb      	ldr	r3, [r7, #24]
 800df0a:	1c59      	adds	r1, r3, #1
 800df0c:	61b9      	str	r1, [r7, #24]
 800df0e:	005b      	lsls	r3, r3, #1
 800df10:	4413      	add	r3, r2
 800df12:	881b      	ldrh	r3, [r3, #0]
 800df14:	81fb      	strh	r3, [r7, #14]
 800df16:	89fb      	ldrh	r3, [r7, #14]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d1d7      	bne.n	800decc <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800df1c:	683a      	ldr	r2, [r7, #0]
 800df1e:	69fb      	ldr	r3, [r7, #28]
 800df20:	4413      	add	r3, r2
 800df22:	3316      	adds	r3, #22
 800df24:	2200      	movs	r2, #0
 800df26:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800df28:	2300      	movs	r3, #0
 800df2a:	61bb      	str	r3, [r7, #24]
 800df2c:	69bb      	ldr	r3, [r7, #24]
 800df2e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800df30:	683a      	ldr	r2, [r7, #0]
 800df32:	69fb      	ldr	r3, [r7, #28]
 800df34:	4413      	add	r3, r2
 800df36:	3316      	adds	r3, #22
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800df3c:	e04d      	b.n	800dfda <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6a1a      	ldr	r2, [r3, #32]
 800df42:	69fb      	ldr	r3, [r7, #28]
 800df44:	1c59      	adds	r1, r3, #1
 800df46:	61f9      	str	r1, [r7, #28]
 800df48:	4413      	add	r3, r2
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800df4e:	7dfb      	ldrb	r3, [r7, #23]
 800df50:	2b20      	cmp	r3, #32
 800df52:	d041      	beq.n	800dfd8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800df54:	7dfb      	ldrb	r3, [r7, #23]
 800df56:	2b05      	cmp	r3, #5
 800df58:	d101      	bne.n	800df5e <get_fileinfo+0xc6>
 800df5a:	23e5      	movs	r3, #229	@ 0xe5
 800df5c:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800df5e:	69fb      	ldr	r3, [r7, #28]
 800df60:	2b09      	cmp	r3, #9
 800df62:	d10f      	bne.n	800df84 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800df64:	89bb      	ldrh	r3, [r7, #12]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d105      	bne.n	800df76 <get_fileinfo+0xde>
 800df6a:	683a      	ldr	r2, [r7, #0]
 800df6c:	69bb      	ldr	r3, [r7, #24]
 800df6e:	4413      	add	r3, r2
 800df70:	3316      	adds	r3, #22
 800df72:	222e      	movs	r2, #46	@ 0x2e
 800df74:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	1c5a      	adds	r2, r3, #1
 800df7a:	61ba      	str	r2, [r7, #24]
 800df7c:	683a      	ldr	r2, [r7, #0]
 800df7e:	4413      	add	r3, r2
 800df80:	222e      	movs	r2, #46	@ 0x2e
 800df82:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800df84:	683a      	ldr	r2, [r7, #0]
 800df86:	69bb      	ldr	r3, [r7, #24]
 800df88:	4413      	add	r3, r2
 800df8a:	3309      	adds	r3, #9
 800df8c:	7dfa      	ldrb	r2, [r7, #23]
 800df8e:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800df90:	89bb      	ldrh	r3, [r7, #12]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d11c      	bne.n	800dfd0 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800df96:	7dfb      	ldrb	r3, [r7, #23]
 800df98:	2b40      	cmp	r3, #64	@ 0x40
 800df9a:	d913      	bls.n	800dfc4 <get_fileinfo+0x12c>
 800df9c:	7dfb      	ldrb	r3, [r7, #23]
 800df9e:	2b5a      	cmp	r3, #90	@ 0x5a
 800dfa0:	d810      	bhi.n	800dfc4 <get_fileinfo+0x12c>
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6a1b      	ldr	r3, [r3, #32]
 800dfa6:	330c      	adds	r3, #12
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	461a      	mov	r2, r3
 800dfac:	69fb      	ldr	r3, [r7, #28]
 800dfae:	2b08      	cmp	r3, #8
 800dfb0:	d901      	bls.n	800dfb6 <get_fileinfo+0x11e>
 800dfb2:	2310      	movs	r3, #16
 800dfb4:	e000      	b.n	800dfb8 <get_fileinfo+0x120>
 800dfb6:	2308      	movs	r3, #8
 800dfb8:	4013      	ands	r3, r2
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d002      	beq.n	800dfc4 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800dfbe:	7dfb      	ldrb	r3, [r7, #23]
 800dfc0:	3320      	adds	r3, #32
 800dfc2:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800dfc4:	683a      	ldr	r2, [r7, #0]
 800dfc6:	69bb      	ldr	r3, [r7, #24]
 800dfc8:	4413      	add	r3, r2
 800dfca:	3316      	adds	r3, #22
 800dfcc:	7dfa      	ldrb	r2, [r7, #23]
 800dfce:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800dfd0:	69bb      	ldr	r3, [r7, #24]
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	61bb      	str	r3, [r7, #24]
 800dfd6:	e000      	b.n	800dfda <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 800dfd8:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800dfda:	69fb      	ldr	r3, [r7, #28]
 800dfdc:	2b0a      	cmp	r3, #10
 800dfde:	d9ae      	bls.n	800df3e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800dfe0:	89bb      	ldrh	r3, [r7, #12]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d10d      	bne.n	800e002 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800dfe6:	683a      	ldr	r2, [r7, #0]
 800dfe8:	69bb      	ldr	r3, [r7, #24]
 800dfea:	4413      	add	r3, r2
 800dfec:	3316      	adds	r3, #22
 800dfee:	2200      	movs	r2, #0
 800dff0:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6a1b      	ldr	r3, [r3, #32]
 800dff6:	330c      	adds	r3, #12
 800dff8:	781b      	ldrb	r3, [r3, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d101      	bne.n	800e002 <get_fileinfo+0x16a>
 800dffe:	2300      	movs	r3, #0
 800e000:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800e002:	683a      	ldr	r2, [r7, #0]
 800e004:	69bb      	ldr	r3, [r7, #24]
 800e006:	4413      	add	r3, r2
 800e008:	3309      	adds	r3, #9
 800e00a:	2200      	movs	r2, #0
 800e00c:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6a1b      	ldr	r3, [r3, #32]
 800e012:	7ada      	ldrb	r2, [r3, #11]
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6a1b      	ldr	r3, [r3, #32]
 800e01c:	331c      	adds	r3, #28
 800e01e:	4618      	mov	r0, r3
 800e020:	f7fe fb13 	bl	800c64a <ld_dword>
 800e024:	4602      	mov	r2, r0
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a1b      	ldr	r3, [r3, #32]
 800e02e:	3316      	adds	r3, #22
 800e030:	4618      	mov	r0, r3
 800e032:	f7fe fb0a 	bl	800c64a <ld_dword>
 800e036:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	b29a      	uxth	r2, r3
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	80da      	strh	r2, [r3, #6]
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	0c1b      	lsrs	r3, r3, #16
 800e044:	b29a      	uxth	r2, r3
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	809a      	strh	r2, [r3, #4]
 800e04a:	e000      	b.n	800e04e <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e04c:	bf00      	nop
}
 800e04e:	3720      	adds	r7, #32
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b08a      	sub	sp, #40	@ 0x28
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	613b      	str	r3, [r7, #16]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	68db      	ldr	r3, [r3, #12]
 800e06a:	60fb      	str	r3, [r7, #12]
 800e06c:	2300      	movs	r3, #0
 800e06e:	617b      	str	r3, [r7, #20]
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e074:	69bb      	ldr	r3, [r7, #24]
 800e076:	1c5a      	adds	r2, r3, #1
 800e078:	61ba      	str	r2, [r7, #24]
 800e07a:	693a      	ldr	r2, [r7, #16]
 800e07c:	4413      	add	r3, r2
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e082:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e084:	2b1f      	cmp	r3, #31
 800e086:	d940      	bls.n	800e10a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e088:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e08a:	2b2f      	cmp	r3, #47	@ 0x2f
 800e08c:	d006      	beq.n	800e09c <create_name+0x48>
 800e08e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e090:	2b5c      	cmp	r3, #92	@ 0x5c
 800e092:	d110      	bne.n	800e0b6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e094:	e002      	b.n	800e09c <create_name+0x48>
 800e096:	69bb      	ldr	r3, [r7, #24]
 800e098:	3301      	adds	r3, #1
 800e09a:	61bb      	str	r3, [r7, #24]
 800e09c:	693a      	ldr	r2, [r7, #16]
 800e09e:	69bb      	ldr	r3, [r7, #24]
 800e0a0:	4413      	add	r3, r2
 800e0a2:	781b      	ldrb	r3, [r3, #0]
 800e0a4:	2b2f      	cmp	r3, #47	@ 0x2f
 800e0a6:	d0f6      	beq.n	800e096 <create_name+0x42>
 800e0a8:	693a      	ldr	r2, [r7, #16]
 800e0aa:	69bb      	ldr	r3, [r7, #24]
 800e0ac:	4413      	add	r3, r2
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	2b5c      	cmp	r3, #92	@ 0x5c
 800e0b2:	d0f0      	beq.n	800e096 <create_name+0x42>
			break;
 800e0b4:	e02a      	b.n	800e10c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	2bfe      	cmp	r3, #254	@ 0xfe
 800e0ba:	d901      	bls.n	800e0c0 <create_name+0x6c>
 800e0bc:	2306      	movs	r3, #6
 800e0be:	e17d      	b.n	800e3bc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e0c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e0c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e0c8:	2101      	movs	r1, #1
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f001 fc2e 	bl	800f92c <ff_convert>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e0d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d101      	bne.n	800e0de <create_name+0x8a>
 800e0da:	2306      	movs	r3, #6
 800e0dc:	e16e      	b.n	800e3bc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e0de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e0e0:	2b7f      	cmp	r3, #127	@ 0x7f
 800e0e2:	d809      	bhi.n	800e0f8 <create_name+0xa4>
 800e0e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	488d      	ldr	r0, [pc, #564]	@ (800e320 <create_name+0x2cc>)
 800e0ea:	f7fe fb7b 	bl	800c7e4 <chk_chr>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d001      	beq.n	800e0f8 <create_name+0xa4>
 800e0f4:	2306      	movs	r3, #6
 800e0f6:	e161      	b.n	800e3bc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	1c5a      	adds	r2, r3, #1
 800e0fc:	617a      	str	r2, [r7, #20]
 800e0fe:	005b      	lsls	r3, r3, #1
 800e100:	68fa      	ldr	r2, [r7, #12]
 800e102:	4413      	add	r3, r2
 800e104:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e106:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e108:	e7b4      	b.n	800e074 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e10a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e10c:	693a      	ldr	r2, [r7, #16]
 800e10e:	69bb      	ldr	r3, [r7, #24]
 800e110:	441a      	add	r2, r3
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e116:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e118:	2b1f      	cmp	r3, #31
 800e11a:	d801      	bhi.n	800e120 <create_name+0xcc>
 800e11c:	2304      	movs	r3, #4
 800e11e:	e000      	b.n	800e122 <create_name+0xce>
 800e120:	2300      	movs	r3, #0
 800e122:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e126:	e011      	b.n	800e14c <create_name+0xf8>
		w = lfn[di - 1];
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e12e:	3b01      	subs	r3, #1
 800e130:	005b      	lsls	r3, r3, #1
 800e132:	68fa      	ldr	r2, [r7, #12]
 800e134:	4413      	add	r3, r2
 800e136:	881b      	ldrh	r3, [r3, #0]
 800e138:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800e13a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e13c:	2b20      	cmp	r3, #32
 800e13e:	d002      	beq.n	800e146 <create_name+0xf2>
 800e140:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e142:	2b2e      	cmp	r3, #46	@ 0x2e
 800e144:	d106      	bne.n	800e154 <create_name+0x100>
		di--;
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	3b01      	subs	r3, #1
 800e14a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d1ea      	bne.n	800e128 <create_name+0xd4>
 800e152:	e000      	b.n	800e156 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e154:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	005b      	lsls	r3, r3, #1
 800e15a:	68fa      	ldr	r2, [r7, #12]
 800e15c:	4413      	add	r3, r2
 800e15e:	2200      	movs	r2, #0
 800e160:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d101      	bne.n	800e16c <create_name+0x118>
 800e168:	2306      	movs	r3, #6
 800e16a:	e127      	b.n	800e3bc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	3324      	adds	r3, #36	@ 0x24
 800e170:	220b      	movs	r2, #11
 800e172:	2120      	movs	r1, #32
 800e174:	4618      	mov	r0, r3
 800e176:	f7fe faf3 	bl	800c760 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e17a:	2300      	movs	r3, #0
 800e17c:	61bb      	str	r3, [r7, #24]
 800e17e:	e002      	b.n	800e186 <create_name+0x132>
 800e180:	69bb      	ldr	r3, [r7, #24]
 800e182:	3301      	adds	r3, #1
 800e184:	61bb      	str	r3, [r7, #24]
 800e186:	69bb      	ldr	r3, [r7, #24]
 800e188:	005b      	lsls	r3, r3, #1
 800e18a:	68fa      	ldr	r2, [r7, #12]
 800e18c:	4413      	add	r3, r2
 800e18e:	881b      	ldrh	r3, [r3, #0]
 800e190:	2b20      	cmp	r3, #32
 800e192:	d0f5      	beq.n	800e180 <create_name+0x12c>
 800e194:	69bb      	ldr	r3, [r7, #24]
 800e196:	005b      	lsls	r3, r3, #1
 800e198:	68fa      	ldr	r2, [r7, #12]
 800e19a:	4413      	add	r3, r2
 800e19c:	881b      	ldrh	r3, [r3, #0]
 800e19e:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1a0:	d0ee      	beq.n	800e180 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d009      	beq.n	800e1bc <create_name+0x168>
 800e1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e1ac:	f043 0303 	orr.w	r3, r3, #3
 800e1b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e1b4:	e002      	b.n	800e1bc <create_name+0x168>
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	3b01      	subs	r3, #1
 800e1ba:	617b      	str	r3, [r7, #20]
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d009      	beq.n	800e1d6 <create_name+0x182>
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e1c8:	3b01      	subs	r3, #1
 800e1ca:	005b      	lsls	r3, r3, #1
 800e1cc:	68fa      	ldr	r2, [r7, #12]
 800e1ce:	4413      	add	r3, r2
 800e1d0:	881b      	ldrh	r3, [r3, #0]
 800e1d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1d4:	d1ef      	bne.n	800e1b6 <create_name+0x162>

	i = b = 0; ni = 8;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e1dc:	2300      	movs	r3, #0
 800e1de:	623b      	str	r3, [r7, #32]
 800e1e0:	2308      	movs	r3, #8
 800e1e2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e1e4:	69bb      	ldr	r3, [r7, #24]
 800e1e6:	1c5a      	adds	r2, r3, #1
 800e1e8:	61ba      	str	r2, [r7, #24]
 800e1ea:	005b      	lsls	r3, r3, #1
 800e1ec:	68fa      	ldr	r2, [r7, #12]
 800e1ee:	4413      	add	r3, r2
 800e1f0:	881b      	ldrh	r3, [r3, #0]
 800e1f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e1f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	f000 8090 	beq.w	800e31c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e1fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e1fe:	2b20      	cmp	r3, #32
 800e200:	d006      	beq.n	800e210 <create_name+0x1bc>
 800e202:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e204:	2b2e      	cmp	r3, #46	@ 0x2e
 800e206:	d10a      	bne.n	800e21e <create_name+0x1ca>
 800e208:	69ba      	ldr	r2, [r7, #24]
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d006      	beq.n	800e21e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e210:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e214:	f043 0303 	orr.w	r3, r3, #3
 800e218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e21c:	e07d      	b.n	800e31a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e21e:	6a3a      	ldr	r2, [r7, #32]
 800e220:	69fb      	ldr	r3, [r7, #28]
 800e222:	429a      	cmp	r2, r3
 800e224:	d203      	bcs.n	800e22e <create_name+0x1da>
 800e226:	69ba      	ldr	r2, [r7, #24]
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d123      	bne.n	800e276 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e22e:	69fb      	ldr	r3, [r7, #28]
 800e230:	2b0b      	cmp	r3, #11
 800e232:	d106      	bne.n	800e242 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e234:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e238:	f043 0303 	orr.w	r3, r3, #3
 800e23c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e240:	e075      	b.n	800e32e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e242:	69ba      	ldr	r2, [r7, #24]
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	429a      	cmp	r2, r3
 800e248:	d005      	beq.n	800e256 <create_name+0x202>
 800e24a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e24e:	f043 0303 	orr.w	r3, r3, #3
 800e252:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800e256:	69ba      	ldr	r2, [r7, #24]
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d866      	bhi.n	800e32c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	61bb      	str	r3, [r7, #24]
 800e262:	2308      	movs	r3, #8
 800e264:	623b      	str	r3, [r7, #32]
 800e266:	230b      	movs	r3, #11
 800e268:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e26a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e274:	e051      	b.n	800e31a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e276:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e278:	2b7f      	cmp	r3, #127	@ 0x7f
 800e27a:	d914      	bls.n	800e2a6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e27c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e27e:	2100      	movs	r1, #0
 800e280:	4618      	mov	r0, r3
 800e282:	f001 fb53 	bl	800f92c <ff_convert>
 800e286:	4603      	mov	r3, r0
 800e288:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e28a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d004      	beq.n	800e29a <create_name+0x246>
 800e290:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e292:	3b80      	subs	r3, #128	@ 0x80
 800e294:	4a23      	ldr	r2, [pc, #140]	@ (800e324 <create_name+0x2d0>)
 800e296:	5cd3      	ldrb	r3, [r2, r3]
 800e298:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e29a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e29e:	f043 0302 	orr.w	r3, r3, #2
 800e2a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e2a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d007      	beq.n	800e2bc <create_name+0x268>
 800e2ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	481d      	ldr	r0, [pc, #116]	@ (800e328 <create_name+0x2d4>)
 800e2b2:	f7fe fa97 	bl	800c7e4 <chk_chr>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d008      	beq.n	800e2ce <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e2bc:	235f      	movs	r3, #95	@ 0x5f
 800e2be:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800e2c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e2c4:	f043 0303 	orr.w	r3, r3, #3
 800e2c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e2cc:	e01b      	b.n	800e306 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e2ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e2d0:	2b40      	cmp	r3, #64	@ 0x40
 800e2d2:	d909      	bls.n	800e2e8 <create_name+0x294>
 800e2d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e2d6:	2b5a      	cmp	r3, #90	@ 0x5a
 800e2d8:	d806      	bhi.n	800e2e8 <create_name+0x294>
					b |= 2;
 800e2da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e2de:	f043 0302 	orr.w	r3, r3, #2
 800e2e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e2e6:	e00e      	b.n	800e306 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e2e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e2ea:	2b60      	cmp	r3, #96	@ 0x60
 800e2ec:	d90b      	bls.n	800e306 <create_name+0x2b2>
 800e2ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e2f0:	2b7a      	cmp	r3, #122	@ 0x7a
 800e2f2:	d808      	bhi.n	800e306 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e2f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e2f8:	f043 0301 	orr.w	r3, r3, #1
 800e2fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e300:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e302:	3b20      	subs	r3, #32
 800e304:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e306:	6a3b      	ldr	r3, [r7, #32]
 800e308:	1c5a      	adds	r2, r3, #1
 800e30a:	623a      	str	r2, [r7, #32]
 800e30c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e30e:	b2d1      	uxtb	r1, r2
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	4413      	add	r3, r2
 800e314:	460a      	mov	r2, r1
 800e316:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e31a:	e763      	b.n	800e1e4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e31c:	bf00      	nop
 800e31e:	e006      	b.n	800e32e <create_name+0x2da>
 800e320:	08010454 	.word	0x08010454
 800e324:	08010530 	.word	0x08010530
 800e328:	08010460 	.word	0x08010460
			if (si > di) break;			/* No extension */
 800e32c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e334:	2be5      	cmp	r3, #229	@ 0xe5
 800e336:	d103      	bne.n	800e340 <create_name+0x2ec>
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2205      	movs	r2, #5
 800e33c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800e340:	69fb      	ldr	r3, [r7, #28]
 800e342:	2b08      	cmp	r3, #8
 800e344:	d104      	bne.n	800e350 <create_name+0x2fc>
 800e346:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e34a:	009b      	lsls	r3, r3, #2
 800e34c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e350:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e354:	f003 030c 	and.w	r3, r3, #12
 800e358:	2b0c      	cmp	r3, #12
 800e35a:	d005      	beq.n	800e368 <create_name+0x314>
 800e35c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e360:	f003 0303 	and.w	r3, r3, #3
 800e364:	2b03      	cmp	r3, #3
 800e366:	d105      	bne.n	800e374 <create_name+0x320>
 800e368:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e36c:	f043 0302 	orr.w	r3, r3, #2
 800e370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e374:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e378:	f003 0302 	and.w	r3, r3, #2
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d117      	bne.n	800e3b0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e380:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e384:	f003 0303 	and.w	r3, r3, #3
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d105      	bne.n	800e398 <create_name+0x344>
 800e38c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e390:	f043 0310 	orr.w	r3, r3, #16
 800e394:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e398:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e39c:	f003 030c 	and.w	r3, r3, #12
 800e3a0:	2b04      	cmp	r3, #4
 800e3a2:	d105      	bne.n	800e3b0 <create_name+0x35c>
 800e3a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e3a8:	f043 0308 	orr.w	r3, r3, #8
 800e3ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e3b6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800e3ba:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3728      	adds	r7, #40	@ 0x28
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}

0800e3c4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b086      	sub	sp, #24
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e3d2:	693b      	ldr	r3, [r7, #16]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e3d8:	e002      	b.n	800e3e0 <follow_path+0x1c>
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	3301      	adds	r3, #1
 800e3de:	603b      	str	r3, [r7, #0]
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	781b      	ldrb	r3, [r3, #0]
 800e3e4:	2b2f      	cmp	r3, #47	@ 0x2f
 800e3e6:	d0f8      	beq.n	800e3da <follow_path+0x16>
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	2b5c      	cmp	r3, #92	@ 0x5c
 800e3ee:	d0f4      	beq.n	800e3da <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	781b      	ldrb	r3, [r3, #0]
 800e3fa:	2b1f      	cmp	r3, #31
 800e3fc:	d80a      	bhi.n	800e414 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2280      	movs	r2, #128	@ 0x80
 800e402:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800e406:	2100      	movs	r1, #0
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f7fe ff34 	bl	800d276 <dir_sdi>
 800e40e:	4603      	mov	r3, r0
 800e410:	75fb      	strb	r3, [r7, #23]
 800e412:	e043      	b.n	800e49c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e414:	463b      	mov	r3, r7
 800e416:	4619      	mov	r1, r3
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f7ff fe1b 	bl	800e054 <create_name>
 800e41e:	4603      	mov	r3, r0
 800e420:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e422:	7dfb      	ldrb	r3, [r7, #23]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d134      	bne.n	800e492 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f7ff fb7d 	bl	800db28 <dir_find>
 800e42e:	4603      	mov	r3, r0
 800e430:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e438:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e43a:	7dfb      	ldrb	r3, [r7, #23]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d00a      	beq.n	800e456 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e440:	7dfb      	ldrb	r3, [r7, #23]
 800e442:	2b04      	cmp	r3, #4
 800e444:	d127      	bne.n	800e496 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e446:	7afb      	ldrb	r3, [r7, #11]
 800e448:	f003 0304 	and.w	r3, r3, #4
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d122      	bne.n	800e496 <follow_path+0xd2>
 800e450:	2305      	movs	r3, #5
 800e452:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e454:	e01f      	b.n	800e496 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e456:	7afb      	ldrb	r3, [r7, #11]
 800e458:	f003 0304 	and.w	r3, r3, #4
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d11c      	bne.n	800e49a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	799b      	ldrb	r3, [r3, #6]
 800e464:	f003 0310 	and.w	r3, r3, #16
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d102      	bne.n	800e472 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e46c:	2305      	movs	r3, #5
 800e46e:	75fb      	strb	r3, [r7, #23]
 800e470:	e014      	b.n	800e49c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	695b      	ldr	r3, [r3, #20]
 800e47c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e480:	4413      	add	r3, r2
 800e482:	4619      	mov	r1, r3
 800e484:	68f8      	ldr	r0, [r7, #12]
 800e486:	f7ff f87d 	bl	800d584 <ld_clust>
 800e48a:	4602      	mov	r2, r0
 800e48c:	693b      	ldr	r3, [r7, #16]
 800e48e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e490:	e7c0      	b.n	800e414 <follow_path+0x50>
			if (res != FR_OK) break;
 800e492:	bf00      	nop
 800e494:	e002      	b.n	800e49c <follow_path+0xd8>
				break;
 800e496:	bf00      	nop
 800e498:	e000      	b.n	800e49c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e49a:	bf00      	nop
			}
		}
	}

	return res;
 800e49c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3718      	adds	r7, #24
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}

0800e4a6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e4a6:	b480      	push	{r7}
 800e4a8:	b087      	sub	sp, #28
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e4ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e4b2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d031      	beq.n	800e520 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	617b      	str	r3, [r7, #20]
 800e4c2:	e002      	b.n	800e4ca <get_ldnumber+0x24>
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	617b      	str	r3, [r7, #20]
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	2b1f      	cmp	r3, #31
 800e4d0:	d903      	bls.n	800e4da <get_ldnumber+0x34>
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	2b3a      	cmp	r3, #58	@ 0x3a
 800e4d8:	d1f4      	bne.n	800e4c4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	2b3a      	cmp	r3, #58	@ 0x3a
 800e4e0:	d11c      	bne.n	800e51c <get_ldnumber+0x76>
			tp = *path;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	1c5a      	adds	r2, r3, #1
 800e4ec:	60fa      	str	r2, [r7, #12]
 800e4ee:	781b      	ldrb	r3, [r3, #0]
 800e4f0:	3b30      	subs	r3, #48	@ 0x30
 800e4f2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	2b09      	cmp	r3, #9
 800e4f8:	d80e      	bhi.n	800e518 <get_ldnumber+0x72>
 800e4fa:	68fa      	ldr	r2, [r7, #12]
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d10a      	bne.n	800e518 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d107      	bne.n	800e518 <get_ldnumber+0x72>
					vol = (int)i;
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	3301      	adds	r3, #1
 800e510:	617b      	str	r3, [r7, #20]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	697a      	ldr	r2, [r7, #20]
 800e516:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	e002      	b.n	800e522 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e51c:	2300      	movs	r3, #0
 800e51e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e520:	693b      	ldr	r3, [r7, #16]
}
 800e522:	4618      	mov	r0, r3
 800e524:	371c      	adds	r7, #28
 800e526:	46bd      	mov	sp, r7
 800e528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52c:	4770      	bx	lr
	...

0800e530 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2200      	movs	r2, #0
 800e53e:	70da      	strb	r2, [r3, #3]
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f04f 32ff 	mov.w	r2, #4294967295
 800e546:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e548:	6839      	ldr	r1, [r7, #0]
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f7fe fb16 	bl	800cb7c <move_window>
 800e550:	4603      	mov	r3, r0
 800e552:	2b00      	cmp	r3, #0
 800e554:	d001      	beq.n	800e55a <check_fs+0x2a>
 800e556:	2304      	movs	r3, #4
 800e558:	e038      	b.n	800e5cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	3334      	adds	r3, #52	@ 0x34
 800e55e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e562:	4618      	mov	r0, r3
 800e564:	f7fe f858 	bl	800c618 <ld_word>
 800e568:	4603      	mov	r3, r0
 800e56a:	461a      	mov	r2, r3
 800e56c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e570:	429a      	cmp	r2, r3
 800e572:	d001      	beq.n	800e578 <check_fs+0x48>
 800e574:	2303      	movs	r3, #3
 800e576:	e029      	b.n	800e5cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e57e:	2be9      	cmp	r3, #233	@ 0xe9
 800e580:	d009      	beq.n	800e596 <check_fs+0x66>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e588:	2beb      	cmp	r3, #235	@ 0xeb
 800e58a:	d11e      	bne.n	800e5ca <check_fs+0x9a>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e592:	2b90      	cmp	r3, #144	@ 0x90
 800e594:	d119      	bne.n	800e5ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	3334      	adds	r3, #52	@ 0x34
 800e59a:	3336      	adds	r3, #54	@ 0x36
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7fe f854 	bl	800c64a <ld_dword>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e5a8:	4a0a      	ldr	r2, [pc, #40]	@ (800e5d4 <check_fs+0xa4>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d101      	bne.n	800e5b2 <check_fs+0x82>
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	e00c      	b.n	800e5cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	3334      	adds	r3, #52	@ 0x34
 800e5b6:	3352      	adds	r3, #82	@ 0x52
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7fe f846 	bl	800c64a <ld_dword>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	4a05      	ldr	r2, [pc, #20]	@ (800e5d8 <check_fs+0xa8>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d101      	bne.n	800e5ca <check_fs+0x9a>
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	e000      	b.n	800e5cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e5ca:	2302      	movs	r3, #2
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3708      	adds	r7, #8
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}
 800e5d4:	00544146 	.word	0x00544146
 800e5d8:	33544146 	.word	0x33544146

0800e5dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b096      	sub	sp, #88	@ 0x58
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	60f8      	str	r0, [r7, #12]
 800e5e4:	60b9      	str	r1, [r7, #8]
 800e5e6:	4613      	mov	r3, r2
 800e5e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e5f0:	68f8      	ldr	r0, [r7, #12]
 800e5f2:	f7ff ff58 	bl	800e4a6 <get_ldnumber>
 800e5f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e5f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	da01      	bge.n	800e602 <find_volume+0x26>
 800e5fe:	230b      	movs	r3, #11
 800e600:	e230      	b.n	800ea64 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e602:	4aa1      	ldr	r2, [pc, #644]	@ (800e888 <find_volume+0x2ac>)
 800e604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e60a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d101      	bne.n	800e616 <find_volume+0x3a>
 800e612:	230c      	movs	r3, #12
 800e614:	e226      	b.n	800ea64 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e61a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e61c:	79fb      	ldrb	r3, [r7, #7]
 800e61e:	f023 0301 	bic.w	r3, r3, #1
 800e622:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d01a      	beq.n	800e662 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e62e:	785b      	ldrb	r3, [r3, #1]
 800e630:	4618      	mov	r0, r3
 800e632:	f7fd ff53 	bl	800c4dc <disk_status>
 800e636:	4603      	mov	r3, r0
 800e638:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e63c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e640:	f003 0301 	and.w	r3, r3, #1
 800e644:	2b00      	cmp	r3, #0
 800e646:	d10c      	bne.n	800e662 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e648:	79fb      	ldrb	r3, [r7, #7]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d007      	beq.n	800e65e <find_volume+0x82>
 800e64e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e652:	f003 0304 	and.w	r3, r3, #4
 800e656:	2b00      	cmp	r3, #0
 800e658:	d001      	beq.n	800e65e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e65a:	230a      	movs	r3, #10
 800e65c:	e202      	b.n	800ea64 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800e65e:	2300      	movs	r3, #0
 800e660:	e200      	b.n	800ea64 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e664:	2200      	movs	r2, #0
 800e666:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e66a:	b2da      	uxtb	r2, r3
 800e66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e66e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e672:	785b      	ldrb	r3, [r3, #1]
 800e674:	4618      	mov	r0, r3
 800e676:	f7fd ff4b 	bl	800c510 <disk_initialize>
 800e67a:	4603      	mov	r3, r0
 800e67c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e680:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e684:	f003 0301 	and.w	r3, r3, #1
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d001      	beq.n	800e690 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e68c:	2303      	movs	r3, #3
 800e68e:	e1e9      	b.n	800ea64 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e690:	79fb      	ldrb	r3, [r7, #7]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d007      	beq.n	800e6a6 <find_volume+0xca>
 800e696:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e69a:	f003 0304 	and.w	r3, r3, #4
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d001      	beq.n	800e6a6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e6a2:	230a      	movs	r3, #10
 800e6a4:	e1de      	b.n	800ea64 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e6aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e6ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e6ae:	f7ff ff3f 	bl	800e530 <check_fs>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e6b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e6bc:	2b02      	cmp	r3, #2
 800e6be:	d149      	bne.n	800e754 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	643b      	str	r3, [r7, #64]	@ 0x40
 800e6c4:	e01e      	b.n	800e704 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e6c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6c8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e6cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e6ce:	011b      	lsls	r3, r3, #4
 800e6d0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e6d4:	4413      	add	r3, r2
 800e6d6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6da:	3304      	adds	r3, #4
 800e6dc:	781b      	ldrb	r3, [r3, #0]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d006      	beq.n	800e6f0 <find_volume+0x114>
 800e6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6e4:	3308      	adds	r3, #8
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7fd ffaf 	bl	800c64a <ld_dword>
 800e6ec:	4602      	mov	r2, r0
 800e6ee:	e000      	b.n	800e6f2 <find_volume+0x116>
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	3358      	adds	r3, #88	@ 0x58
 800e6f8:	443b      	add	r3, r7
 800e6fa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e6fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e700:	3301      	adds	r3, #1
 800e702:	643b      	str	r3, [r7, #64]	@ 0x40
 800e704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e706:	2b03      	cmp	r3, #3
 800e708:	d9dd      	bls.n	800e6c6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e70a:	2300      	movs	r3, #0
 800e70c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e70e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e710:	2b00      	cmp	r3, #0
 800e712:	d002      	beq.n	800e71a <find_volume+0x13e>
 800e714:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e716:	3b01      	subs	r3, #1
 800e718:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e71a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	3358      	adds	r3, #88	@ 0x58
 800e720:	443b      	add	r3, r7
 800e722:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e726:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d005      	beq.n	800e73a <find_volume+0x15e>
 800e72e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e730:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e732:	f7ff fefd 	bl	800e530 <check_fs>
 800e736:	4603      	mov	r3, r0
 800e738:	e000      	b.n	800e73c <find_volume+0x160>
 800e73a:	2303      	movs	r3, #3
 800e73c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e740:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e744:	2b01      	cmp	r3, #1
 800e746:	d905      	bls.n	800e754 <find_volume+0x178>
 800e748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e74a:	3301      	adds	r3, #1
 800e74c:	643b      	str	r3, [r7, #64]	@ 0x40
 800e74e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e750:	2b03      	cmp	r3, #3
 800e752:	d9e2      	bls.n	800e71a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e754:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e758:	2b04      	cmp	r3, #4
 800e75a:	d101      	bne.n	800e760 <find_volume+0x184>
 800e75c:	2301      	movs	r3, #1
 800e75e:	e181      	b.n	800ea64 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e760:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e764:	2b01      	cmp	r3, #1
 800e766:	d901      	bls.n	800e76c <find_volume+0x190>
 800e768:	230d      	movs	r3, #13
 800e76a:	e17b      	b.n	800ea64 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e76e:	3334      	adds	r3, #52	@ 0x34
 800e770:	330b      	adds	r3, #11
 800e772:	4618      	mov	r0, r3
 800e774:	f7fd ff50 	bl	800c618 <ld_word>
 800e778:	4603      	mov	r3, r0
 800e77a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e77e:	d001      	beq.n	800e784 <find_volume+0x1a8>
 800e780:	230d      	movs	r3, #13
 800e782:	e16f      	b.n	800ea64 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e786:	3334      	adds	r3, #52	@ 0x34
 800e788:	3316      	adds	r3, #22
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7fd ff44 	bl	800c618 <ld_word>
 800e790:	4603      	mov	r3, r0
 800e792:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e796:	2b00      	cmp	r3, #0
 800e798:	d106      	bne.n	800e7a8 <find_volume+0x1cc>
 800e79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e79c:	3334      	adds	r3, #52	@ 0x34
 800e79e:	3324      	adds	r3, #36	@ 0x24
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7fd ff52 	bl	800c64a <ld_dword>
 800e7a6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e7ac:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7b0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800e7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7ba:	789b      	ldrb	r3, [r3, #2]
 800e7bc:	2b01      	cmp	r3, #1
 800e7be:	d005      	beq.n	800e7cc <find_volume+0x1f0>
 800e7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7c2:	789b      	ldrb	r3, [r3, #2]
 800e7c4:	2b02      	cmp	r3, #2
 800e7c6:	d001      	beq.n	800e7cc <find_volume+0x1f0>
 800e7c8:	230d      	movs	r3, #13
 800e7ca:	e14b      	b.n	800ea64 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7ce:	789b      	ldrb	r3, [r3, #2]
 800e7d0:	461a      	mov	r2, r3
 800e7d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7d4:	fb02 f303 	mul.w	r3, r2, r3
 800e7d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e7e0:	461a      	mov	r2, r3
 800e7e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e7e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7e8:	895b      	ldrh	r3, [r3, #10]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d008      	beq.n	800e800 <find_volume+0x224>
 800e7ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7f0:	895b      	ldrh	r3, [r3, #10]
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7f6:	895b      	ldrh	r3, [r3, #10]
 800e7f8:	3b01      	subs	r3, #1
 800e7fa:	4013      	ands	r3, r2
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d001      	beq.n	800e804 <find_volume+0x228>
 800e800:	230d      	movs	r3, #13
 800e802:	e12f      	b.n	800ea64 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e806:	3334      	adds	r3, #52	@ 0x34
 800e808:	3311      	adds	r3, #17
 800e80a:	4618      	mov	r0, r3
 800e80c:	f7fd ff04 	bl	800c618 <ld_word>
 800e810:	4603      	mov	r3, r0
 800e812:	461a      	mov	r2, r3
 800e814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e816:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e81a:	891b      	ldrh	r3, [r3, #8]
 800e81c:	f003 030f 	and.w	r3, r3, #15
 800e820:	b29b      	uxth	r3, r3
 800e822:	2b00      	cmp	r3, #0
 800e824:	d001      	beq.n	800e82a <find_volume+0x24e>
 800e826:	230d      	movs	r3, #13
 800e828:	e11c      	b.n	800ea64 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e82c:	3334      	adds	r3, #52	@ 0x34
 800e82e:	3313      	adds	r3, #19
 800e830:	4618      	mov	r0, r3
 800e832:	f7fd fef1 	bl	800c618 <ld_word>
 800e836:	4603      	mov	r3, r0
 800e838:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e83a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d106      	bne.n	800e84e <find_volume+0x272>
 800e840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e842:	3334      	adds	r3, #52	@ 0x34
 800e844:	3320      	adds	r3, #32
 800e846:	4618      	mov	r0, r3
 800e848:	f7fd feff 	bl	800c64a <ld_dword>
 800e84c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e850:	3334      	adds	r3, #52	@ 0x34
 800e852:	330e      	adds	r3, #14
 800e854:	4618      	mov	r0, r3
 800e856:	f7fd fedf 	bl	800c618 <ld_word>
 800e85a:	4603      	mov	r3, r0
 800e85c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e85e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e860:	2b00      	cmp	r3, #0
 800e862:	d101      	bne.n	800e868 <find_volume+0x28c>
 800e864:	230d      	movs	r3, #13
 800e866:	e0fd      	b.n	800ea64 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e868:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e86a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e86c:	4413      	add	r3, r2
 800e86e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e870:	8912      	ldrh	r2, [r2, #8]
 800e872:	0912      	lsrs	r2, r2, #4
 800e874:	b292      	uxth	r2, r2
 800e876:	4413      	add	r3, r2
 800e878:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e87a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e87e:	429a      	cmp	r2, r3
 800e880:	d204      	bcs.n	800e88c <find_volume+0x2b0>
 800e882:	230d      	movs	r3, #13
 800e884:	e0ee      	b.n	800ea64 <find_volume+0x488>
 800e886:	bf00      	nop
 800e888:	20001c48 	.word	0x20001c48
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e88c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e890:	1ad3      	subs	r3, r2, r3
 800e892:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e894:	8952      	ldrh	r2, [r2, #10]
 800e896:	fbb3 f3f2 	udiv	r3, r3, r2
 800e89a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d101      	bne.n	800e8a6 <find_volume+0x2ca>
 800e8a2:	230d      	movs	r3, #13
 800e8a4:	e0de      	b.n	800ea64 <find_volume+0x488>
		fmt = FS_FAT32;
 800e8a6:	2303      	movs	r3, #3
 800e8a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ae:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e8b2:	4293      	cmp	r3, r2
 800e8b4:	d802      	bhi.n	800e8bc <find_volume+0x2e0>
 800e8b6:	2302      	movs	r3, #2
 800e8b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8be:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e8c2:	4293      	cmp	r3, r2
 800e8c4:	d802      	bhi.n	800e8cc <find_volume+0x2f0>
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e8cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ce:	1c9a      	adds	r2, r3, #2
 800e8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8d2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e8d8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e8da:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e8dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8de:	441a      	add	r2, r3
 800e8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8e2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e8e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8e8:	441a      	add	r2, r3
 800e8ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8ec:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800e8ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e8f2:	2b03      	cmp	r3, #3
 800e8f4:	d11e      	bne.n	800e934 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e8f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8f8:	3334      	adds	r3, #52	@ 0x34
 800e8fa:	332a      	adds	r3, #42	@ 0x2a
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f7fd fe8b 	bl	800c618 <ld_word>
 800e902:	4603      	mov	r3, r0
 800e904:	2b00      	cmp	r3, #0
 800e906:	d001      	beq.n	800e90c <find_volume+0x330>
 800e908:	230d      	movs	r3, #13
 800e90a:	e0ab      	b.n	800ea64 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e90e:	891b      	ldrh	r3, [r3, #8]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d001      	beq.n	800e918 <find_volume+0x33c>
 800e914:	230d      	movs	r3, #13
 800e916:	e0a5      	b.n	800ea64 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e91a:	3334      	adds	r3, #52	@ 0x34
 800e91c:	332c      	adds	r3, #44	@ 0x2c
 800e91e:	4618      	mov	r0, r3
 800e920:	f7fd fe93 	bl	800c64a <ld_dword>
 800e924:	4602      	mov	r2, r0
 800e926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e928:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e92c:	699b      	ldr	r3, [r3, #24]
 800e92e:	009b      	lsls	r3, r3, #2
 800e930:	647b      	str	r3, [r7, #68]	@ 0x44
 800e932:	e01f      	b.n	800e974 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e936:	891b      	ldrh	r3, [r3, #8]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d101      	bne.n	800e940 <find_volume+0x364>
 800e93c:	230d      	movs	r3, #13
 800e93e:	e091      	b.n	800ea64 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e942:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e946:	441a      	add	r2, r3
 800e948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e94a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e94c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e950:	2b02      	cmp	r3, #2
 800e952:	d103      	bne.n	800e95c <find_volume+0x380>
 800e954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e956:	699b      	ldr	r3, [r3, #24]
 800e958:	005b      	lsls	r3, r3, #1
 800e95a:	e00a      	b.n	800e972 <find_volume+0x396>
 800e95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e95e:	699a      	ldr	r2, [r3, #24]
 800e960:	4613      	mov	r3, r2
 800e962:	005b      	lsls	r3, r3, #1
 800e964:	4413      	add	r3, r2
 800e966:	085a      	lsrs	r2, r3, #1
 800e968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e96a:	699b      	ldr	r3, [r3, #24]
 800e96c:	f003 0301 	and.w	r3, r3, #1
 800e970:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e972:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e976:	69da      	ldr	r2, [r3, #28]
 800e978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e97a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e97e:	0a5b      	lsrs	r3, r3, #9
 800e980:	429a      	cmp	r2, r3
 800e982:	d201      	bcs.n	800e988 <find_volume+0x3ac>
 800e984:	230d      	movs	r3, #13
 800e986:	e06d      	b.n	800ea64 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e98a:	f04f 32ff 	mov.w	r2, #4294967295
 800e98e:	615a      	str	r2, [r3, #20]
 800e990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e992:	695a      	ldr	r2, [r3, #20]
 800e994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e996:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e99a:	2280      	movs	r2, #128	@ 0x80
 800e99c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e99e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e9a2:	2b03      	cmp	r3, #3
 800e9a4:	d149      	bne.n	800ea3a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e9a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9a8:	3334      	adds	r3, #52	@ 0x34
 800e9aa:	3330      	adds	r3, #48	@ 0x30
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f7fd fe33 	bl	800c618 <ld_word>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	2b01      	cmp	r3, #1
 800e9b6:	d140      	bne.n	800ea3a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e9b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	4619      	mov	r1, r3
 800e9be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e9c0:	f7fe f8dc 	bl	800cb7c <move_window>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d137      	bne.n	800ea3a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e9ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9d2:	3334      	adds	r3, #52	@ 0x34
 800e9d4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7fd fe1d 	bl	800c618 <ld_word>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d127      	bne.n	800ea3a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9ec:	3334      	adds	r3, #52	@ 0x34
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7fd fe2b 	bl	800c64a <ld_dword>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	4a1d      	ldr	r2, [pc, #116]	@ (800ea6c <find_volume+0x490>)
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d11e      	bne.n	800ea3a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9fe:	3334      	adds	r3, #52	@ 0x34
 800ea00:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7fd fe20 	bl	800c64a <ld_dword>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	4a18      	ldr	r2, [pc, #96]	@ (800ea70 <find_volume+0x494>)
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d113      	bne.n	800ea3a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ea12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea14:	3334      	adds	r3, #52	@ 0x34
 800ea16:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7fd fe15 	bl	800c64a <ld_dword>
 800ea20:	4602      	mov	r2, r0
 800ea22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea24:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ea26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea28:	3334      	adds	r3, #52	@ 0x34
 800ea2a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7fd fe0b 	bl	800c64a <ld_dword>
 800ea34:	4602      	mov	r2, r0
 800ea36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea38:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ea3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea3c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800ea40:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ea42:	4b0c      	ldr	r3, [pc, #48]	@ (800ea74 <find_volume+0x498>)
 800ea44:	881b      	ldrh	r3, [r3, #0]
 800ea46:	3301      	adds	r3, #1
 800ea48:	b29a      	uxth	r2, r3
 800ea4a:	4b0a      	ldr	r3, [pc, #40]	@ (800ea74 <find_volume+0x498>)
 800ea4c:	801a      	strh	r2, [r3, #0]
 800ea4e:	4b09      	ldr	r3, [pc, #36]	@ (800ea74 <find_volume+0x498>)
 800ea50:	881a      	ldrh	r2, [r3, #0]
 800ea52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea54:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ea56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea58:	4a07      	ldr	r2, [pc, #28]	@ (800ea78 <find_volume+0x49c>)
 800ea5a:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ea5c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ea5e:	f7fe f825 	bl	800caac <clear_lock>
#endif
	return FR_OK;
 800ea62:	2300      	movs	r3, #0
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3758      	adds	r7, #88	@ 0x58
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}
 800ea6c:	41615252 	.word	0x41615252
 800ea70:	61417272 	.word	0x61417272
 800ea74:	20001c4c 	.word	0x20001c4c
 800ea78:	20001c70 	.word	0x20001c70

0800ea7c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
 800ea84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ea86:	2309      	movs	r3, #9
 800ea88:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d01c      	beq.n	800eaca <validate+0x4e>
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d018      	beq.n	800eaca <validate+0x4e>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	781b      	ldrb	r3, [r3, #0]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d013      	beq.n	800eaca <validate+0x4e>
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	889a      	ldrh	r2, [r3, #4]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	88db      	ldrh	r3, [r3, #6]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d10c      	bne.n	800eaca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	785b      	ldrb	r3, [r3, #1]
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7fd fd10 	bl	800c4dc <disk_status>
 800eabc:	4603      	mov	r3, r0
 800eabe:	f003 0301 	and.w	r3, r3, #1
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d101      	bne.n	800eaca <validate+0x4e>
			res = FR_OK;
 800eac6:	2300      	movs	r3, #0
 800eac8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800eaca:	7bfb      	ldrb	r3, [r7, #15]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d102      	bne.n	800ead6 <validate+0x5a>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	e000      	b.n	800ead8 <validate+0x5c>
 800ead6:	2300      	movs	r3, #0
 800ead8:	683a      	ldr	r2, [r7, #0]
 800eada:	6013      	str	r3, [r2, #0]
	return res;
 800eadc:	7bfb      	ldrb	r3, [r7, #15]
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3710      	adds	r7, #16
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}
	...

0800eae8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b088      	sub	sp, #32
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	60f8      	str	r0, [r7, #12]
 800eaf0:	60b9      	str	r1, [r7, #8]
 800eaf2:	4613      	mov	r3, r2
 800eaf4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800eafa:	f107 0310 	add.w	r3, r7, #16
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7ff fcd1 	bl	800e4a6 <get_ldnumber>
 800eb04:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800eb06:	69fb      	ldr	r3, [r7, #28]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	da01      	bge.n	800eb10 <f_mount+0x28>
 800eb0c:	230b      	movs	r3, #11
 800eb0e:	e02b      	b.n	800eb68 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800eb10:	4a17      	ldr	r2, [pc, #92]	@ (800eb70 <f_mount+0x88>)
 800eb12:	69fb      	ldr	r3, [r7, #28]
 800eb14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb18:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800eb1a:	69bb      	ldr	r3, [r7, #24]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d005      	beq.n	800eb2c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800eb20:	69b8      	ldr	r0, [r7, #24]
 800eb22:	f7fd ffc3 	bl	800caac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800eb26:	69bb      	ldr	r3, [r7, #24]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d002      	beq.n	800eb38 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	2200      	movs	r2, #0
 800eb36:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800eb38:	68fa      	ldr	r2, [r7, #12]
 800eb3a:	490d      	ldr	r1, [pc, #52]	@ (800eb70 <f_mount+0x88>)
 800eb3c:	69fb      	ldr	r3, [r7, #28]
 800eb3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d002      	beq.n	800eb4e <f_mount+0x66>
 800eb48:	79fb      	ldrb	r3, [r7, #7]
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	d001      	beq.n	800eb52 <f_mount+0x6a>
 800eb4e:	2300      	movs	r3, #0
 800eb50:	e00a      	b.n	800eb68 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800eb52:	f107 010c 	add.w	r1, r7, #12
 800eb56:	f107 0308 	add.w	r3, r7, #8
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7ff fd3d 	bl	800e5dc <find_volume>
 800eb62:	4603      	mov	r3, r0
 800eb64:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800eb66:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3720      	adds	r7, #32
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	20001c48 	.word	0x20001c48

0800eb74 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b09a      	sub	sp, #104	@ 0x68
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	60f8      	str	r0, [r7, #12]
 800eb7c:	60b9      	str	r1, [r7, #8]
 800eb7e:	4613      	mov	r3, r2
 800eb80:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d101      	bne.n	800eb8c <f_open+0x18>
 800eb88:	2309      	movs	r3, #9
 800eb8a:	e1a9      	b.n	800eee0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800eb8c:	79fb      	ldrb	r3, [r7, #7]
 800eb8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eb92:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800eb94:	79fa      	ldrb	r2, [r7, #7]
 800eb96:	f107 0114 	add.w	r1, r7, #20
 800eb9a:	f107 0308 	add.w	r3, r7, #8
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f7ff fd1c 	bl	800e5dc <find_volume>
 800eba4:	4603      	mov	r3, r0
 800eba6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800ebaa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	f040 818d 	bne.w	800eece <f_open+0x35a>
		dj.obj.fs = fs;
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ebb8:	68ba      	ldr	r2, [r7, #8]
 800ebba:	f107 0318 	add.w	r3, r7, #24
 800ebbe:	4611      	mov	r1, r2
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7ff fbff 	bl	800e3c4 <follow_path>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ebcc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d118      	bne.n	800ec06 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ebd4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ebd8:	b25b      	sxtb	r3, r3
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	da03      	bge.n	800ebe6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ebde:	2306      	movs	r3, #6
 800ebe0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ebe4:	e00f      	b.n	800ec06 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ebe6:	79fb      	ldrb	r3, [r7, #7]
 800ebe8:	2b01      	cmp	r3, #1
 800ebea:	bf8c      	ite	hi
 800ebec:	2301      	movhi	r3, #1
 800ebee:	2300      	movls	r3, #0
 800ebf0:	b2db      	uxtb	r3, r3
 800ebf2:	461a      	mov	r2, r3
 800ebf4:	f107 0318 	add.w	r3, r7, #24
 800ebf8:	4611      	mov	r1, r2
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7fd fe0e 	bl	800c81c <chk_lock>
 800ec00:	4603      	mov	r3, r0
 800ec02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ec06:	79fb      	ldrb	r3, [r7, #7]
 800ec08:	f003 031c 	and.w	r3, r3, #28
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d07f      	beq.n	800ed10 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ec10:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d017      	beq.n	800ec48 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ec18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ec1c:	2b04      	cmp	r3, #4
 800ec1e:	d10e      	bne.n	800ec3e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ec20:	f7fd fe58 	bl	800c8d4 <enq_lock>
 800ec24:	4603      	mov	r3, r0
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d006      	beq.n	800ec38 <f_open+0xc4>
 800ec2a:	f107 0318 	add.w	r3, r7, #24
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7ff f83a 	bl	800dca8 <dir_register>
 800ec34:	4603      	mov	r3, r0
 800ec36:	e000      	b.n	800ec3a <f_open+0xc6>
 800ec38:	2312      	movs	r3, #18
 800ec3a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ec3e:	79fb      	ldrb	r3, [r7, #7]
 800ec40:	f043 0308 	orr.w	r3, r3, #8
 800ec44:	71fb      	strb	r3, [r7, #7]
 800ec46:	e010      	b.n	800ec6a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ec48:	7fbb      	ldrb	r3, [r7, #30]
 800ec4a:	f003 0311 	and.w	r3, r3, #17
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d003      	beq.n	800ec5a <f_open+0xe6>
					res = FR_DENIED;
 800ec52:	2307      	movs	r3, #7
 800ec54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ec58:	e007      	b.n	800ec6a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ec5a:	79fb      	ldrb	r3, [r7, #7]
 800ec5c:	f003 0304 	and.w	r3, r3, #4
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d002      	beq.n	800ec6a <f_open+0xf6>
 800ec64:	2308      	movs	r3, #8
 800ec66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ec6a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d168      	bne.n	800ed44 <f_open+0x1d0>
 800ec72:	79fb      	ldrb	r3, [r7, #7]
 800ec74:	f003 0308 	and.w	r3, r3, #8
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d063      	beq.n	800ed44 <f_open+0x1d0>
				dw = GET_FATTIME();
 800ec7c:	f7fa fb32 	bl	80092e4 <get_fattime>
 800ec80:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ec82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec84:	330e      	adds	r3, #14
 800ec86:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7fd fd1c 	bl	800c6c6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ec8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec90:	3316      	adds	r3, #22
 800ec92:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7fd fd16 	bl	800c6c6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ec9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec9c:	330b      	adds	r3, #11
 800ec9e:	2220      	movs	r2, #32
 800eca0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eca6:	4611      	mov	r1, r2
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7fe fc6b 	bl	800d584 <ld_clust>
 800ecae:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7fe fc83 	bl	800d5c2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ecbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecbe:	331c      	adds	r3, #28
 800ecc0:	2100      	movs	r1, #0
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7fd fcff 	bl	800c6c6 <st_dword>
					fs->wflag = 1;
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	2201      	movs	r2, #1
 800eccc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ecce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d037      	beq.n	800ed44 <f_open+0x1d0>
						dw = fs->winsect;
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecd8:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ecda:	f107 0318 	add.w	r3, r7, #24
 800ecde:	2200      	movs	r2, #0
 800ece0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7fe f996 	bl	800d014 <remove_chain>
 800ece8:	4603      	mov	r3, r0
 800ecea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800ecee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d126      	bne.n	800ed44 <f_open+0x1d0>
							res = move_window(fs, dw);
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7fd ff3e 	bl	800cb7c <move_window>
 800ed00:	4603      	mov	r3, r0
 800ed02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ed0a:	3a01      	subs	r2, #1
 800ed0c:	611a      	str	r2, [r3, #16]
 800ed0e:	e019      	b.n	800ed44 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ed10:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d115      	bne.n	800ed44 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ed18:	7fbb      	ldrb	r3, [r7, #30]
 800ed1a:	f003 0310 	and.w	r3, r3, #16
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d003      	beq.n	800ed2a <f_open+0x1b6>
					res = FR_NO_FILE;
 800ed22:	2304      	movs	r3, #4
 800ed24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ed28:	e00c      	b.n	800ed44 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ed2a:	79fb      	ldrb	r3, [r7, #7]
 800ed2c:	f003 0302 	and.w	r3, r3, #2
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d007      	beq.n	800ed44 <f_open+0x1d0>
 800ed34:	7fbb      	ldrb	r3, [r7, #30]
 800ed36:	f003 0301 	and.w	r3, r3, #1
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d002      	beq.n	800ed44 <f_open+0x1d0>
						res = FR_DENIED;
 800ed3e:	2307      	movs	r3, #7
 800ed40:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800ed44:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d126      	bne.n	800ed9a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ed4c:	79fb      	ldrb	r3, [r7, #7]
 800ed4e:	f003 0308 	and.w	r3, r3, #8
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d003      	beq.n	800ed5e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800ed56:	79fb      	ldrb	r3, [r7, #7]
 800ed58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed5c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800ed66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ed6c:	79fb      	ldrb	r3, [r7, #7]
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	bf8c      	ite	hi
 800ed72:	2301      	movhi	r3, #1
 800ed74:	2300      	movls	r3, #0
 800ed76:	b2db      	uxtb	r3, r3
 800ed78:	461a      	mov	r2, r3
 800ed7a:	f107 0318 	add.w	r3, r7, #24
 800ed7e:	4611      	mov	r1, r2
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7fd fdc9 	bl	800c918 <inc_lock>
 800ed86:	4602      	mov	r2, r0
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	691b      	ldr	r3, [r3, #16]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d102      	bne.n	800ed9a <f_open+0x226>
 800ed94:	2302      	movs	r3, #2
 800ed96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ed9a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	f040 8095 	bne.w	800eece <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eda8:	4611      	mov	r1, r2
 800edaa:	4618      	mov	r0, r3
 800edac:	f7fe fbea 	bl	800d584 <ld_clust>
 800edb0:	4602      	mov	r2, r0
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800edb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edb8:	331c      	adds	r3, #28
 800edba:	4618      	mov	r0, r3
 800edbc:	f7fd fc45 	bl	800c64a <ld_dword>
 800edc0:	4602      	mov	r2, r0
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	2200      	movs	r2, #0
 800edca:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800edcc:	697a      	ldr	r2, [r7, #20]
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	88da      	ldrh	r2, [r3, #6]
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	79fa      	ldrb	r2, [r7, #7]
 800edde:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2200      	movs	r2, #0
 800ede4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2200      	movs	r2, #0
 800edea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	2200      	movs	r2, #0
 800edf0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	3330      	adds	r3, #48	@ 0x30
 800edf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800edfa:	2100      	movs	r1, #0
 800edfc:	4618      	mov	r0, r3
 800edfe:	f7fd fcaf 	bl	800c760 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ee02:	79fb      	ldrb	r3, [r7, #7]
 800ee04:	f003 0320 	and.w	r3, r3, #32
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d060      	beq.n	800eece <f_open+0x35a>
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d05c      	beq.n	800eece <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	68da      	ldr	r2, [r3, #12]
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	895b      	ldrh	r3, [r3, #10]
 800ee20:	025b      	lsls	r3, r3, #9
 800ee22:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	689b      	ldr	r3, [r3, #8]
 800ee28:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	68db      	ldr	r3, [r3, #12]
 800ee2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ee30:	e016      	b.n	800ee60 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7fd ff5b 	bl	800ccf2 <get_fat>
 800ee3c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ee3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ee40:	2b01      	cmp	r3, #1
 800ee42:	d802      	bhi.n	800ee4a <f_open+0x2d6>
 800ee44:	2302      	movs	r3, #2
 800ee46:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ee4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ee4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee50:	d102      	bne.n	800ee58 <f_open+0x2e4>
 800ee52:	2301      	movs	r3, #1
 800ee54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ee58:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ee5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee5c:	1ad3      	subs	r3, r2, r3
 800ee5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ee60:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d103      	bne.n	800ee70 <f_open+0x2fc>
 800ee68:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ee6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d8e0      	bhi.n	800ee32 <f_open+0x2be>
				}
				fp->clust = clst;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ee74:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ee76:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d127      	bne.n	800eece <f_open+0x35a>
 800ee7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ee80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d022      	beq.n	800eece <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7fd ff11 	bl	800ccb4 <clust2sect>
 800ee92:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800ee94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d103      	bne.n	800eea2 <f_open+0x32e>
						res = FR_INT_ERR;
 800ee9a:	2302      	movs	r3, #2
 800ee9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800eea0:	e015      	b.n	800eece <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800eea2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eea4:	0a5a      	lsrs	r2, r3, #9
 800eea6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eea8:	441a      	add	r2, r3
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	7858      	ldrb	r0, [r3, #1]
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	6a1a      	ldr	r2, [r3, #32]
 800eebc:	2301      	movs	r3, #1
 800eebe:	f7fd fb4d 	bl	800c55c <disk_read>
 800eec2:	4603      	mov	r3, r0
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d002      	beq.n	800eece <f_open+0x35a>
 800eec8:	2301      	movs	r3, #1
 800eeca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800eece:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d002      	beq.n	800eedc <f_open+0x368>
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2200      	movs	r2, #0
 800eeda:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eedc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3768      	adds	r7, #104	@ 0x68
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}

0800eee8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b08e      	sub	sp, #56	@ 0x38
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	60f8      	str	r0, [r7, #12]
 800eef0:	60b9      	str	r1, [r7, #8]
 800eef2:	607a      	str	r2, [r7, #4]
 800eef4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	2200      	movs	r2, #0
 800eefe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f107 0214 	add.w	r2, r7, #20
 800ef06:	4611      	mov	r1, r2
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f7ff fdb7 	bl	800ea7c <validate>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ef14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d107      	bne.n	800ef2c <f_read+0x44>
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	7d5b      	ldrb	r3, [r3, #21]
 800ef20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ef24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d002      	beq.n	800ef32 <f_read+0x4a>
 800ef2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ef30:	e115      	b.n	800f15e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	7d1b      	ldrb	r3, [r3, #20]
 800ef36:	f003 0301 	and.w	r3, r3, #1
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d101      	bne.n	800ef42 <f_read+0x5a>
 800ef3e:	2307      	movs	r3, #7
 800ef40:	e10d      	b.n	800f15e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	68da      	ldr	r2, [r3, #12]
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	699b      	ldr	r3, [r3, #24]
 800ef4a:	1ad3      	subs	r3, r2, r3
 800ef4c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ef4e:	687a      	ldr	r2, [r7, #4]
 800ef50:	6a3b      	ldr	r3, [r7, #32]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	f240 80fe 	bls.w	800f154 <f_read+0x26c>
 800ef58:	6a3b      	ldr	r3, [r7, #32]
 800ef5a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ef5c:	e0fa      	b.n	800f154 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	699b      	ldr	r3, [r3, #24]
 800ef62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	f040 80c6 	bne.w	800f0f8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	699b      	ldr	r3, [r3, #24]
 800ef70:	0a5b      	lsrs	r3, r3, #9
 800ef72:	697a      	ldr	r2, [r7, #20]
 800ef74:	8952      	ldrh	r2, [r2, #10]
 800ef76:	3a01      	subs	r2, #1
 800ef78:	4013      	ands	r3, r2
 800ef7a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ef7c:	69fb      	ldr	r3, [r7, #28]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d12f      	bne.n	800efe2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	699b      	ldr	r3, [r3, #24]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d103      	bne.n	800ef92 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	689b      	ldr	r3, [r3, #8]
 800ef8e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ef90:	e013      	b.n	800efba <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d007      	beq.n	800efaa <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	699b      	ldr	r3, [r3, #24]
 800ef9e:	4619      	mov	r1, r3
 800efa0:	68f8      	ldr	r0, [r7, #12]
 800efa2:	f7fe f934 	bl	800d20e <clmt_clust>
 800efa6:	6338      	str	r0, [r7, #48]	@ 0x30
 800efa8:	e007      	b.n	800efba <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800efaa:	68fa      	ldr	r2, [r7, #12]
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	69db      	ldr	r3, [r3, #28]
 800efb0:	4619      	mov	r1, r3
 800efb2:	4610      	mov	r0, r2
 800efb4:	f7fd fe9d 	bl	800ccf2 <get_fat>
 800efb8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800efba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efbc:	2b01      	cmp	r3, #1
 800efbe:	d804      	bhi.n	800efca <f_read+0xe2>
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2202      	movs	r2, #2
 800efc4:	755a      	strb	r2, [r3, #21]
 800efc6:	2302      	movs	r3, #2
 800efc8:	e0c9      	b.n	800f15e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800efca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efd0:	d104      	bne.n	800efdc <f_read+0xf4>
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	2201      	movs	r2, #1
 800efd6:	755a      	strb	r2, [r3, #21]
 800efd8:	2301      	movs	r3, #1
 800efda:	e0c0      	b.n	800f15e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800efe0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800efe2:	697a      	ldr	r2, [r7, #20]
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	69db      	ldr	r3, [r3, #28]
 800efe8:	4619      	mov	r1, r3
 800efea:	4610      	mov	r0, r2
 800efec:	f7fd fe62 	bl	800ccb4 <clust2sect>
 800eff0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800eff2:	69bb      	ldr	r3, [r7, #24]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d104      	bne.n	800f002 <f_read+0x11a>
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2202      	movs	r2, #2
 800effc:	755a      	strb	r2, [r3, #21]
 800effe:	2302      	movs	r3, #2
 800f000:	e0ad      	b.n	800f15e <f_read+0x276>
			sect += csect;
 800f002:	69ba      	ldr	r2, [r7, #24]
 800f004:	69fb      	ldr	r3, [r7, #28]
 800f006:	4413      	add	r3, r2
 800f008:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	0a5b      	lsrs	r3, r3, #9
 800f00e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f012:	2b00      	cmp	r3, #0
 800f014:	d039      	beq.n	800f08a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f016:	69fa      	ldr	r2, [r7, #28]
 800f018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f01a:	4413      	add	r3, r2
 800f01c:	697a      	ldr	r2, [r7, #20]
 800f01e:	8952      	ldrh	r2, [r2, #10]
 800f020:	4293      	cmp	r3, r2
 800f022:	d905      	bls.n	800f030 <f_read+0x148>
					cc = fs->csize - csect;
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	895b      	ldrh	r3, [r3, #10]
 800f028:	461a      	mov	r2, r3
 800f02a:	69fb      	ldr	r3, [r7, #28]
 800f02c:	1ad3      	subs	r3, r2, r3
 800f02e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	7858      	ldrb	r0, [r3, #1]
 800f034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f036:	69ba      	ldr	r2, [r7, #24]
 800f038:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f03a:	f7fd fa8f 	bl	800c55c <disk_read>
 800f03e:	4603      	mov	r3, r0
 800f040:	2b00      	cmp	r3, #0
 800f042:	d004      	beq.n	800f04e <f_read+0x166>
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2201      	movs	r2, #1
 800f048:	755a      	strb	r2, [r3, #21]
 800f04a:	2301      	movs	r3, #1
 800f04c:	e087      	b.n	800f15e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	7d1b      	ldrb	r3, [r3, #20]
 800f052:	b25b      	sxtb	r3, r3
 800f054:	2b00      	cmp	r3, #0
 800f056:	da14      	bge.n	800f082 <f_read+0x19a>
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	6a1a      	ldr	r2, [r3, #32]
 800f05c:	69bb      	ldr	r3, [r7, #24]
 800f05e:	1ad3      	subs	r3, r2, r3
 800f060:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f062:	429a      	cmp	r2, r3
 800f064:	d90d      	bls.n	800f082 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	6a1a      	ldr	r2, [r3, #32]
 800f06a:	69bb      	ldr	r3, [r7, #24]
 800f06c:	1ad3      	subs	r3, r2, r3
 800f06e:	025b      	lsls	r3, r3, #9
 800f070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f072:	18d0      	adds	r0, r2, r3
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	3330      	adds	r3, #48	@ 0x30
 800f078:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f07c:	4619      	mov	r1, r3
 800f07e:	f7fd fb4e 	bl	800c71e <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f084:	025b      	lsls	r3, r3, #9
 800f086:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800f088:	e050      	b.n	800f12c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	6a1b      	ldr	r3, [r3, #32]
 800f08e:	69ba      	ldr	r2, [r7, #24]
 800f090:	429a      	cmp	r2, r3
 800f092:	d02e      	beq.n	800f0f2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	7d1b      	ldrb	r3, [r3, #20]
 800f098:	b25b      	sxtb	r3, r3
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	da18      	bge.n	800f0d0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	7858      	ldrb	r0, [r3, #1]
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	6a1a      	ldr	r2, [r3, #32]
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	f7fd fa75 	bl	800c59c <disk_write>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d004      	beq.n	800f0c2 <f_read+0x1da>
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	755a      	strb	r2, [r3, #21]
 800f0be:	2301      	movs	r3, #1
 800f0c0:	e04d      	b.n	800f15e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	7d1b      	ldrb	r3, [r3, #20]
 800f0c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f0ca:	b2da      	uxtb	r2, r3
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	7858      	ldrb	r0, [r3, #1]
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f0da:	2301      	movs	r3, #1
 800f0dc:	69ba      	ldr	r2, [r7, #24]
 800f0de:	f7fd fa3d 	bl	800c55c <disk_read>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d004      	beq.n	800f0f2 <f_read+0x20a>
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	755a      	strb	r2, [r3, #21]
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	e035      	b.n	800f15e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	69ba      	ldr	r2, [r7, #24]
 800f0f6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	699b      	ldr	r3, [r3, #24]
 800f0fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f100:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800f104:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d901      	bls.n	800f112 <f_read+0x22a>
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	699b      	ldr	r3, [r3, #24]
 800f11c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f120:	4413      	add	r3, r2
 800f122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f124:	4619      	mov	r1, r3
 800f126:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f128:	f7fd faf9 	bl	800c71e <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f12c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f130:	4413      	add	r3, r2
 800f132:	627b      	str	r3, [r7, #36]	@ 0x24
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	699a      	ldr	r2, [r3, #24]
 800f138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f13a:	441a      	add	r2, r3
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	619a      	str	r2, [r3, #24]
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	681a      	ldr	r2, [r3, #0]
 800f144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f146:	441a      	add	r2, r3
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	601a      	str	r2, [r3, #0]
 800f14c:	687a      	ldr	r2, [r7, #4]
 800f14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f150:	1ad3      	subs	r3, r2, r3
 800f152:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2b00      	cmp	r3, #0
 800f158:	f47f af01 	bne.w	800ef5e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f15c:	2300      	movs	r3, #0
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3738      	adds	r7, #56	@ 0x38
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}

0800f166 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f166:	b580      	push	{r7, lr}
 800f168:	b086      	sub	sp, #24
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f107 0208 	add.w	r2, r7, #8
 800f174:	4611      	mov	r1, r2
 800f176:	4618      	mov	r0, r3
 800f178:	f7ff fc80 	bl	800ea7c <validate>
 800f17c:	4603      	mov	r3, r0
 800f17e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f180:	7dfb      	ldrb	r3, [r7, #23]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d168      	bne.n	800f258 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	7d1b      	ldrb	r3, [r3, #20]
 800f18a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d062      	beq.n	800f258 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	7d1b      	ldrb	r3, [r3, #20]
 800f196:	b25b      	sxtb	r3, r3
 800f198:	2b00      	cmp	r3, #0
 800f19a:	da15      	bge.n	800f1c8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	7858      	ldrb	r0, [r3, #1]
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6a1a      	ldr	r2, [r3, #32]
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	f7fd f9f6 	bl	800c59c <disk_write>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d001      	beq.n	800f1ba <f_sync+0x54>
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	e04f      	b.n	800f25a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	7d1b      	ldrb	r3, [r3, #20]
 800f1be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f1c2:	b2da      	uxtb	r2, r3
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f1c8:	f7fa f88c 	bl	80092e4 <get_fattime>
 800f1cc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f1ce:	68ba      	ldr	r2, [r7, #8]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1d4:	4619      	mov	r1, r3
 800f1d6:	4610      	mov	r0, r2
 800f1d8:	f7fd fcd0 	bl	800cb7c <move_window>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f1e0:	7dfb      	ldrb	r3, [r7, #23]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d138      	bne.n	800f258 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1ea:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	330b      	adds	r3, #11
 800f1f0:	781a      	ldrb	r2, [r3, #0]
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	330b      	adds	r3, #11
 800f1f6:	f042 0220 	orr.w	r2, r2, #32
 800f1fa:	b2d2      	uxtb	r2, r2
 800f1fc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6818      	ldr	r0, [r3, #0]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	689b      	ldr	r3, [r3, #8]
 800f206:	461a      	mov	r2, r3
 800f208:	68f9      	ldr	r1, [r7, #12]
 800f20a:	f7fe f9da 	bl	800d5c2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	f103 021c 	add.w	r2, r3, #28
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	68db      	ldr	r3, [r3, #12]
 800f218:	4619      	mov	r1, r3
 800f21a:	4610      	mov	r0, r2
 800f21c:	f7fd fa53 	bl	800c6c6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	3316      	adds	r3, #22
 800f224:	6939      	ldr	r1, [r7, #16]
 800f226:	4618      	mov	r0, r3
 800f228:	f7fd fa4d 	bl	800c6c6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	3312      	adds	r3, #18
 800f230:	2100      	movs	r1, #0
 800f232:	4618      	mov	r0, r3
 800f234:	f7fd fa2c 	bl	800c690 <st_word>
					fs->wflag = 1;
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	2201      	movs	r2, #1
 800f23c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	4618      	mov	r0, r3
 800f242:	f7fd fcc9 	bl	800cbd8 <sync_fs>
 800f246:	4603      	mov	r3, r0
 800f248:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	7d1b      	ldrb	r3, [r3, #20]
 800f24e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f252:	b2da      	uxtb	r2, r3
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f258:	7dfb      	ldrb	r3, [r7, #23]
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3718      	adds	r7, #24
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}

0800f262 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f262:	b580      	push	{r7, lr}
 800f264:	b084      	sub	sp, #16
 800f266:	af00      	add	r7, sp, #0
 800f268:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f7ff ff7b 	bl	800f166 <f_sync>
 800f270:	4603      	mov	r3, r0
 800f272:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f274:	7bfb      	ldrb	r3, [r7, #15]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d118      	bne.n	800f2ac <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f107 0208 	add.w	r2, r7, #8
 800f280:	4611      	mov	r1, r2
 800f282:	4618      	mov	r0, r3
 800f284:	f7ff fbfa 	bl	800ea7c <validate>
 800f288:	4603      	mov	r3, r0
 800f28a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f28c:	7bfb      	ldrb	r3, [r7, #15]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d10c      	bne.n	800f2ac <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	691b      	ldr	r3, [r3, #16]
 800f296:	4618      	mov	r0, r3
 800f298:	f7fd fbcc 	bl	800ca34 <dec_lock>
 800f29c:	4603      	mov	r3, r0
 800f29e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f2a0:	7bfb      	ldrb	r3, [r7, #15]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d102      	bne.n	800f2ac <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3710      	adds	r7, #16
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}

0800f2b6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f2b6:	b580      	push	{r7, lr}
 800f2b8:	b090      	sub	sp, #64	@ 0x40
 800f2ba:	af00      	add	r7, sp, #0
 800f2bc:	6078      	str	r0, [r7, #4]
 800f2be:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f107 0208 	add.w	r2, r7, #8
 800f2c6:	4611      	mov	r1, r2
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7ff fbd7 	bl	800ea7c <validate>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f2d4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d103      	bne.n	800f2e4 <f_lseek+0x2e>
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	7d5b      	ldrb	r3, [r3, #21]
 800f2e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f2e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d002      	beq.n	800f2f2 <f_lseek+0x3c>
 800f2ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f2f0:	e1e6      	b.n	800f6c0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	f000 80d1 	beq.w	800f49e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f302:	d15a      	bne.n	800f3ba <f_lseek+0x104>
			tbl = fp->cltbl;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f308:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f30c:	1d1a      	adds	r2, r3, #4
 800f30e:	627a      	str	r2, [r7, #36]	@ 0x24
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	617b      	str	r3, [r7, #20]
 800f314:	2302      	movs	r3, #2
 800f316:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	689b      	ldr	r3, [r3, #8]
 800f31c:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800f31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f320:	2b00      	cmp	r3, #0
 800f322:	d03a      	beq.n	800f39a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f326:	613b      	str	r3, [r7, #16]
 800f328:	2300      	movs	r3, #0
 800f32a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f32c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f32e:	3302      	adds	r3, #2
 800f330:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800f332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f334:	60fb      	str	r3, [r7, #12]
 800f336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f338:	3301      	adds	r3, #1
 800f33a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f340:	4618      	mov	r0, r3
 800f342:	f7fd fcd6 	bl	800ccf2 <get_fat>
 800f346:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f34a:	2b01      	cmp	r3, #1
 800f34c:	d804      	bhi.n	800f358 <f_lseek+0xa2>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2202      	movs	r2, #2
 800f352:	755a      	strb	r2, [r3, #21]
 800f354:	2302      	movs	r3, #2
 800f356:	e1b3      	b.n	800f6c0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f35e:	d104      	bne.n	800f36a <f_lseek+0xb4>
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2201      	movs	r2, #1
 800f364:	755a      	strb	r2, [r3, #21]
 800f366:	2301      	movs	r3, #1
 800f368:	e1aa      	b.n	800f6c0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	3301      	adds	r3, #1
 800f36e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f370:	429a      	cmp	r2, r3
 800f372:	d0de      	beq.n	800f332 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f374:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d809      	bhi.n	800f390 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800f37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f37e:	1d1a      	adds	r2, r3, #4
 800f380:	627a      	str	r2, [r7, #36]	@ 0x24
 800f382:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f384:	601a      	str	r2, [r3, #0]
 800f386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f388:	1d1a      	adds	r2, r3, #4
 800f38a:	627a      	str	r2, [r7, #36]	@ 0x24
 800f38c:	693a      	ldr	r2, [r7, #16]
 800f38e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	699b      	ldr	r3, [r3, #24]
 800f394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f396:	429a      	cmp	r2, r3
 800f398:	d3c4      	bcc.n	800f324 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f39e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f3a0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f3a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d803      	bhi.n	800f3b2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800f3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	601a      	str	r2, [r3, #0]
 800f3b0:	e184      	b.n	800f6bc <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f3b2:	2311      	movs	r3, #17
 800f3b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800f3b8:	e180      	b.n	800f6bc <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	68db      	ldr	r3, [r3, #12]
 800f3be:	683a      	ldr	r2, [r7, #0]
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d902      	bls.n	800f3ca <f_lseek+0x114>
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	68db      	ldr	r3, [r3, #12]
 800f3c8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	683a      	ldr	r2, [r7, #0]
 800f3ce:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	f000 8172 	beq.w	800f6bc <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	3b01      	subs	r3, #1
 800f3dc:	4619      	mov	r1, r3
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f7fd ff15 	bl	800d20e <clmt_clust>
 800f3e4:	4602      	mov	r2, r0
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f3ea:	68ba      	ldr	r2, [r7, #8]
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	69db      	ldr	r3, [r3, #28]
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	4610      	mov	r0, r2
 800f3f4:	f7fd fc5e 	bl	800ccb4 <clust2sect>
 800f3f8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f3fa:	69bb      	ldr	r3, [r7, #24]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d104      	bne.n	800f40a <f_lseek+0x154>
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2202      	movs	r2, #2
 800f404:	755a      	strb	r2, [r3, #21]
 800f406:	2302      	movs	r3, #2
 800f408:	e15a      	b.n	800f6c0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	3b01      	subs	r3, #1
 800f40e:	0a5b      	lsrs	r3, r3, #9
 800f410:	68ba      	ldr	r2, [r7, #8]
 800f412:	8952      	ldrh	r2, [r2, #10]
 800f414:	3a01      	subs	r2, #1
 800f416:	4013      	ands	r3, r2
 800f418:	69ba      	ldr	r2, [r7, #24]
 800f41a:	4413      	add	r3, r2
 800f41c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	699b      	ldr	r3, [r3, #24]
 800f422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f426:	2b00      	cmp	r3, #0
 800f428:	f000 8148 	beq.w	800f6bc <f_lseek+0x406>
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	6a1b      	ldr	r3, [r3, #32]
 800f430:	69ba      	ldr	r2, [r7, #24]
 800f432:	429a      	cmp	r2, r3
 800f434:	f000 8142 	beq.w	800f6bc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	7d1b      	ldrb	r3, [r3, #20]
 800f43c:	b25b      	sxtb	r3, r3
 800f43e:	2b00      	cmp	r3, #0
 800f440:	da18      	bge.n	800f474 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	7858      	ldrb	r0, [r3, #1]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6a1a      	ldr	r2, [r3, #32]
 800f450:	2301      	movs	r3, #1
 800f452:	f7fd f8a3 	bl	800c59c <disk_write>
 800f456:	4603      	mov	r3, r0
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d004      	beq.n	800f466 <f_lseek+0x1b0>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2201      	movs	r2, #1
 800f460:	755a      	strb	r2, [r3, #21]
 800f462:	2301      	movs	r3, #1
 800f464:	e12c      	b.n	800f6c0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	7d1b      	ldrb	r3, [r3, #20]
 800f46a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f46e:	b2da      	uxtb	r2, r3
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	7858      	ldrb	r0, [r3, #1]
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f47e:	2301      	movs	r3, #1
 800f480:	69ba      	ldr	r2, [r7, #24]
 800f482:	f7fd f86b 	bl	800c55c <disk_read>
 800f486:	4603      	mov	r3, r0
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d004      	beq.n	800f496 <f_lseek+0x1e0>
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2201      	movs	r2, #1
 800f490:	755a      	strb	r2, [r3, #21]
 800f492:	2301      	movs	r3, #1
 800f494:	e114      	b.n	800f6c0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	69ba      	ldr	r2, [r7, #24]
 800f49a:	621a      	str	r2, [r3, #32]
 800f49c:	e10e      	b.n	800f6bc <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	68db      	ldr	r3, [r3, #12]
 800f4a2:	683a      	ldr	r2, [r7, #0]
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	d908      	bls.n	800f4ba <f_lseek+0x204>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	7d1b      	ldrb	r3, [r3, #20]
 800f4ac:	f003 0302 	and.w	r3, r3, #2
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d102      	bne.n	800f4ba <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	68db      	ldr	r3, [r3, #12]
 800f4b8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	699b      	ldr	r3, [r3, #24]
 800f4be:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f4c8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	f000 80a7 	beq.w	800f620 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	895b      	ldrh	r3, [r3, #10]
 800f4d6:	025b      	lsls	r3, r3, #9
 800f4d8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f4da:	6a3b      	ldr	r3, [r7, #32]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d01b      	beq.n	800f518 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	1e5a      	subs	r2, r3, #1
 800f4e4:	69fb      	ldr	r3, [r7, #28]
 800f4e6:	fbb2 f2f3 	udiv	r2, r2, r3
 800f4ea:	6a3b      	ldr	r3, [r7, #32]
 800f4ec:	1e59      	subs	r1, r3, #1
 800f4ee:	69fb      	ldr	r3, [r7, #28]
 800f4f0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d30f      	bcc.n	800f518 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f4f8:	6a3b      	ldr	r3, [r7, #32]
 800f4fa:	1e5a      	subs	r2, r3, #1
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	425b      	negs	r3, r3
 800f500:	401a      	ands	r2, r3
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	699b      	ldr	r3, [r3, #24]
 800f50a:	683a      	ldr	r2, [r7, #0]
 800f50c:	1ad3      	subs	r3, r2, r3
 800f50e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	69db      	ldr	r3, [r3, #28]
 800f514:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f516:	e022      	b.n	800f55e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	689b      	ldr	r3, [r3, #8]
 800f51c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f520:	2b00      	cmp	r3, #0
 800f522:	d119      	bne.n	800f558 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2100      	movs	r1, #0
 800f528:	4618      	mov	r0, r3
 800f52a:	f7fd fdd8 	bl	800d0de <create_chain>
 800f52e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f532:	2b01      	cmp	r3, #1
 800f534:	d104      	bne.n	800f540 <f_lseek+0x28a>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2202      	movs	r2, #2
 800f53a:	755a      	strb	r2, [r3, #21]
 800f53c:	2302      	movs	r3, #2
 800f53e:	e0bf      	b.n	800f6c0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f546:	d104      	bne.n	800f552 <f_lseek+0x29c>
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2201      	movs	r2, #1
 800f54c:	755a      	strb	r2, [r3, #21]
 800f54e:	2301      	movs	r3, #1
 800f550:	e0b6      	b.n	800f6c0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f556:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f55c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f560:	2b00      	cmp	r3, #0
 800f562:	d05d      	beq.n	800f620 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f564:	e03a      	b.n	800f5dc <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f566:	683a      	ldr	r2, [r7, #0]
 800f568:	69fb      	ldr	r3, [r7, #28]
 800f56a:	1ad3      	subs	r3, r2, r3
 800f56c:	603b      	str	r3, [r7, #0]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	699a      	ldr	r2, [r3, #24]
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	441a      	add	r2, r3
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	7d1b      	ldrb	r3, [r3, #20]
 800f57e:	f003 0302 	and.w	r3, r3, #2
 800f582:	2b00      	cmp	r3, #0
 800f584:	d00b      	beq.n	800f59e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7fd fda7 	bl	800d0de <create_chain>
 800f590:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f594:	2b00      	cmp	r3, #0
 800f596:	d108      	bne.n	800f5aa <f_lseek+0x2f4>
							ofs = 0; break;
 800f598:	2300      	movs	r3, #0
 800f59a:	603b      	str	r3, [r7, #0]
 800f59c:	e022      	b.n	800f5e4 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7fd fba5 	bl	800ccf2 <get_fat>
 800f5a8:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5b0:	d104      	bne.n	800f5bc <f_lseek+0x306>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	2201      	movs	r2, #1
 800f5b6:	755a      	strb	r2, [r3, #21]
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	e081      	b.n	800f6c0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	d904      	bls.n	800f5cc <f_lseek+0x316>
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	699b      	ldr	r3, [r3, #24]
 800f5c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	d304      	bcc.n	800f5d6 <f_lseek+0x320>
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2202      	movs	r2, #2
 800f5d0:	755a      	strb	r2, [r3, #21]
 800f5d2:	2302      	movs	r3, #2
 800f5d4:	e074      	b.n	800f6c0 <f_lseek+0x40a>
					fp->clust = clst;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f5da:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f5dc:	683a      	ldr	r2, [r7, #0]
 800f5de:	69fb      	ldr	r3, [r7, #28]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d8c0      	bhi.n	800f566 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	699a      	ldr	r2, [r3, #24]
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	441a      	add	r2, r3
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d012      	beq.n	800f620 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f5fe:	4618      	mov	r0, r3
 800f600:	f7fd fb58 	bl	800ccb4 <clust2sect>
 800f604:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d104      	bne.n	800f616 <f_lseek+0x360>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2202      	movs	r2, #2
 800f610:	755a      	strb	r2, [r3, #21]
 800f612:	2302      	movs	r3, #2
 800f614:	e054      	b.n	800f6c0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	0a5b      	lsrs	r3, r3, #9
 800f61a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f61c:	4413      	add	r3, r2
 800f61e:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	699a      	ldr	r2, [r3, #24]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	68db      	ldr	r3, [r3, #12]
 800f628:	429a      	cmp	r2, r3
 800f62a:	d90a      	bls.n	800f642 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	699a      	ldr	r2, [r3, #24]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	7d1b      	ldrb	r3, [r3, #20]
 800f638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f63c:	b2da      	uxtb	r2, r3
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	699b      	ldr	r3, [r3, #24]
 800f646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d036      	beq.n	800f6bc <f_lseek+0x406>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6a1b      	ldr	r3, [r3, #32]
 800f652:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f654:	429a      	cmp	r2, r3
 800f656:	d031      	beq.n	800f6bc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	7d1b      	ldrb	r3, [r3, #20]
 800f65c:	b25b      	sxtb	r3, r3
 800f65e:	2b00      	cmp	r3, #0
 800f660:	da18      	bge.n	800f694 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	7858      	ldrb	r0, [r3, #1]
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6a1a      	ldr	r2, [r3, #32]
 800f670:	2301      	movs	r3, #1
 800f672:	f7fc ff93 	bl	800c59c <disk_write>
 800f676:	4603      	mov	r3, r0
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d004      	beq.n	800f686 <f_lseek+0x3d0>
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2201      	movs	r2, #1
 800f680:	755a      	strb	r2, [r3, #21]
 800f682:	2301      	movs	r3, #1
 800f684:	e01c      	b.n	800f6c0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	7d1b      	ldrb	r3, [r3, #20]
 800f68a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f68e:	b2da      	uxtb	r2, r3
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	7858      	ldrb	r0, [r3, #1]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f69e:	2301      	movs	r3, #1
 800f6a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f6a2:	f7fc ff5b 	bl	800c55c <disk_read>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d004      	beq.n	800f6b6 <f_lseek+0x400>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2201      	movs	r2, #1
 800f6b0:	755a      	strb	r2, [r3, #21]
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	e004      	b.n	800f6c0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f6ba:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f6bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3740      	adds	r7, #64	@ 0x40
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}

0800f6c8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b086      	sub	sp, #24
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d101      	bne.n	800f6dc <f_opendir+0x14>
 800f6d8:	2309      	movs	r3, #9
 800f6da:	e064      	b.n	800f7a6 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800f6e0:	f107 010c 	add.w	r1, r7, #12
 800f6e4:	463b      	mov	r3, r7
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7fe ff77 	bl	800e5dc <find_volume>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f6f2:	7dfb      	ldrb	r3, [r7, #23]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d14f      	bne.n	800f798 <f_opendir+0xd0>
		obj->fs = fs;
 800f6f8:	68fa      	ldr	r2, [r7, #12]
 800f6fa:	693b      	ldr	r3, [r7, #16]
 800f6fc:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	4619      	mov	r1, r3
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f7fe fe5e 	bl	800e3c4 <follow_path>
 800f708:	4603      	mov	r3, r0
 800f70a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800f70c:	7dfb      	ldrb	r3, [r7, #23]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d13d      	bne.n	800f78e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f718:	b25b      	sxtb	r3, r3
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	db12      	blt.n	800f744 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	799b      	ldrb	r3, [r3, #6]
 800f722:	f003 0310 	and.w	r3, r3, #16
 800f726:	2b00      	cmp	r3, #0
 800f728:	d00a      	beq.n	800f740 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f72a:	68fa      	ldr	r2, [r7, #12]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6a1b      	ldr	r3, [r3, #32]
 800f730:	4619      	mov	r1, r3
 800f732:	4610      	mov	r0, r2
 800f734:	f7fd ff26 	bl	800d584 <ld_clust>
 800f738:	4602      	mov	r2, r0
 800f73a:	693b      	ldr	r3, [r7, #16]
 800f73c:	609a      	str	r2, [r3, #8]
 800f73e:	e001      	b.n	800f744 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f740:	2305      	movs	r3, #5
 800f742:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800f744:	7dfb      	ldrb	r3, [r7, #23]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d121      	bne.n	800f78e <f_opendir+0xc6>
				obj->id = fs->id;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	88da      	ldrh	r2, [r3, #6]
 800f74e:	693b      	ldr	r3, [r7, #16]
 800f750:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f752:	2100      	movs	r1, #0
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f7fd fd8e 	bl	800d276 <dir_sdi>
 800f75a:	4603      	mov	r3, r0
 800f75c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800f75e:	7dfb      	ldrb	r3, [r7, #23]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d114      	bne.n	800f78e <f_opendir+0xc6>
					if (obj->sclust) {
 800f764:	693b      	ldr	r3, [r7, #16]
 800f766:	689b      	ldr	r3, [r3, #8]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d00d      	beq.n	800f788 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f76c:	2100      	movs	r1, #0
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f7fd f8d2 	bl	800c918 <inc_lock>
 800f774:	4602      	mov	r2, r0
 800f776:	693b      	ldr	r3, [r7, #16]
 800f778:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	691b      	ldr	r3, [r3, #16]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d105      	bne.n	800f78e <f_opendir+0xc6>
 800f782:	2312      	movs	r3, #18
 800f784:	75fb      	strb	r3, [r7, #23]
 800f786:	e002      	b.n	800f78e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	2200      	movs	r2, #0
 800f78c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f78e:	7dfb      	ldrb	r3, [r7, #23]
 800f790:	2b04      	cmp	r3, #4
 800f792:	d101      	bne.n	800f798 <f_opendir+0xd0>
 800f794:	2305      	movs	r3, #5
 800f796:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f798:	7dfb      	ldrb	r3, [r7, #23]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d002      	beq.n	800f7a4 <f_opendir+0xdc>
 800f79e:	693b      	ldr	r3, [r7, #16]
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f7a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3718      	adds	r7, #24
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}

0800f7ae <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800f7ae:	b580      	push	{r7, lr}
 800f7b0:	b084      	sub	sp, #16
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f107 0208 	add.w	r2, r7, #8
 800f7bc:	4611      	mov	r1, r2
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f7ff f95c 	bl	800ea7c <validate>
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f7c8:	7bfb      	ldrb	r3, [r7, #15]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d110      	bne.n	800f7f0 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	691b      	ldr	r3, [r3, #16]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d006      	beq.n	800f7e4 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	691b      	ldr	r3, [r3, #16]
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f7fd f92a 	bl	800ca34 <dec_lock>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800f7e4:	7bfb      	ldrb	r3, [r7, #15]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d102      	bne.n	800f7f0 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800f7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3710      	adds	r7, #16
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}

0800f7fa <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f7fa:	b580      	push	{r7, lr}
 800f7fc:	b084      	sub	sp, #16
 800f7fe:	af00      	add	r7, sp, #0
 800f800:	6078      	str	r0, [r7, #4]
 800f802:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f107 0208 	add.w	r2, r7, #8
 800f80a:	4611      	mov	r1, r2
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7ff f935 	bl	800ea7c <validate>
 800f812:	4603      	mov	r3, r0
 800f814:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f816:	7bfb      	ldrb	r3, [r7, #15]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d126      	bne.n	800f86a <f_readdir+0x70>
		if (!fno) {
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d106      	bne.n	800f830 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f822:	2100      	movs	r1, #0
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f7fd fd26 	bl	800d276 <dir_sdi>
 800f82a:	4603      	mov	r3, r0
 800f82c:	73fb      	strb	r3, [r7, #15]
 800f82e:	e01c      	b.n	800f86a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800f830:	2100      	movs	r1, #0
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f7fe f8d1 	bl	800d9da <dir_read>
 800f838:	4603      	mov	r3, r0
 800f83a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800f83c:	7bfb      	ldrb	r3, [r7, #15]
 800f83e:	2b04      	cmp	r3, #4
 800f840:	d101      	bne.n	800f846 <f_readdir+0x4c>
 800f842:	2300      	movs	r3, #0
 800f844:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800f846:	7bfb      	ldrb	r3, [r7, #15]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d10e      	bne.n	800f86a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800f84c:	6839      	ldr	r1, [r7, #0]
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f7fe fb22 	bl	800de98 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f854:	2100      	movs	r1, #0
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f7fd fd88 	bl	800d36c <dir_next>
 800f85c:	4603      	mov	r3, r0
 800f85e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800f860:	7bfb      	ldrb	r3, [r7, #15]
 800f862:	2b04      	cmp	r3, #4
 800f864:	d101      	bne.n	800f86a <f_readdir+0x70>
 800f866:	2300      	movs	r3, #0
 800f868:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800f86a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	3710      	adds	r7, #16
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}

0800f874 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f874:	b480      	push	{r7}
 800f876:	b087      	sub	sp, #28
 800f878:	af00      	add	r7, sp, #0
 800f87a:	60f8      	str	r0, [r7, #12]
 800f87c:	60b9      	str	r1, [r7, #8]
 800f87e:	4613      	mov	r3, r2
 800f880:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f882:	2301      	movs	r3, #1
 800f884:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f886:	2300      	movs	r3, #0
 800f888:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f88a:	4b1f      	ldr	r3, [pc, #124]	@ (800f908 <FATFS_LinkDriverEx+0x94>)
 800f88c:	7a5b      	ldrb	r3, [r3, #9]
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	2b00      	cmp	r3, #0
 800f892:	d131      	bne.n	800f8f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f894:	4b1c      	ldr	r3, [pc, #112]	@ (800f908 <FATFS_LinkDriverEx+0x94>)
 800f896:	7a5b      	ldrb	r3, [r3, #9]
 800f898:	b2db      	uxtb	r3, r3
 800f89a:	461a      	mov	r2, r3
 800f89c:	4b1a      	ldr	r3, [pc, #104]	@ (800f908 <FATFS_LinkDriverEx+0x94>)
 800f89e:	2100      	movs	r1, #0
 800f8a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f8a2:	4b19      	ldr	r3, [pc, #100]	@ (800f908 <FATFS_LinkDriverEx+0x94>)
 800f8a4:	7a5b      	ldrb	r3, [r3, #9]
 800f8a6:	b2db      	uxtb	r3, r3
 800f8a8:	4a17      	ldr	r2, [pc, #92]	@ (800f908 <FATFS_LinkDriverEx+0x94>)
 800f8aa:	009b      	lsls	r3, r3, #2
 800f8ac:	4413      	add	r3, r2
 800f8ae:	68fa      	ldr	r2, [r7, #12]
 800f8b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f8b2:	4b15      	ldr	r3, [pc, #84]	@ (800f908 <FATFS_LinkDriverEx+0x94>)
 800f8b4:	7a5b      	ldrb	r3, [r3, #9]
 800f8b6:	b2db      	uxtb	r3, r3
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	4b13      	ldr	r3, [pc, #76]	@ (800f908 <FATFS_LinkDriverEx+0x94>)
 800f8bc:	4413      	add	r3, r2
 800f8be:	79fa      	ldrb	r2, [r7, #7]
 800f8c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f8c2:	4b11      	ldr	r3, [pc, #68]	@ (800f908 <FATFS_LinkDriverEx+0x94>)
 800f8c4:	7a5b      	ldrb	r3, [r3, #9]
 800f8c6:	b2db      	uxtb	r3, r3
 800f8c8:	1c5a      	adds	r2, r3, #1
 800f8ca:	b2d1      	uxtb	r1, r2
 800f8cc:	4a0e      	ldr	r2, [pc, #56]	@ (800f908 <FATFS_LinkDriverEx+0x94>)
 800f8ce:	7251      	strb	r1, [r2, #9]
 800f8d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f8d2:	7dbb      	ldrb	r3, [r7, #22]
 800f8d4:	3330      	adds	r3, #48	@ 0x30
 800f8d6:	b2da      	uxtb	r2, r3
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	3301      	adds	r3, #1
 800f8e0:	223a      	movs	r2, #58	@ 0x3a
 800f8e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	3302      	adds	r3, #2
 800f8e8:	222f      	movs	r2, #47	@ 0x2f
 800f8ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	3303      	adds	r3, #3
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f8f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	371c      	adds	r7, #28
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr
 800f906:	bf00      	nop
 800f908:	20001e70 	.word	0x20001e70

0800f90c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b082      	sub	sp, #8
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f916:	2200      	movs	r2, #0
 800f918:	6839      	ldr	r1, [r7, #0]
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f7ff ffaa 	bl	800f874 <FATFS_LinkDriverEx>
 800f920:	4603      	mov	r3, r0
}
 800f922:	4618      	mov	r0, r3
 800f924:	3708      	adds	r7, #8
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}
	...

0800f92c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f92c:	b480      	push	{r7}
 800f92e:	b085      	sub	sp, #20
 800f930:	af00      	add	r7, sp, #0
 800f932:	4603      	mov	r3, r0
 800f934:	6039      	str	r1, [r7, #0]
 800f936:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f938:	88fb      	ldrh	r3, [r7, #6]
 800f93a:	2b7f      	cmp	r3, #127	@ 0x7f
 800f93c:	d802      	bhi.n	800f944 <ff_convert+0x18>
		c = chr;
 800f93e:	88fb      	ldrh	r3, [r7, #6]
 800f940:	81fb      	strh	r3, [r7, #14]
 800f942:	e025      	b.n	800f990 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d00b      	beq.n	800f962 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f94a:	88fb      	ldrh	r3, [r7, #6]
 800f94c:	2bff      	cmp	r3, #255	@ 0xff
 800f94e:	d805      	bhi.n	800f95c <ff_convert+0x30>
 800f950:	88fb      	ldrh	r3, [r7, #6]
 800f952:	3b80      	subs	r3, #128	@ 0x80
 800f954:	4a12      	ldr	r2, [pc, #72]	@ (800f9a0 <ff_convert+0x74>)
 800f956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f95a:	e000      	b.n	800f95e <ff_convert+0x32>
 800f95c:	2300      	movs	r3, #0
 800f95e:	81fb      	strh	r3, [r7, #14]
 800f960:	e016      	b.n	800f990 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f962:	2300      	movs	r3, #0
 800f964:	81fb      	strh	r3, [r7, #14]
 800f966:	e009      	b.n	800f97c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f968:	89fb      	ldrh	r3, [r7, #14]
 800f96a:	4a0d      	ldr	r2, [pc, #52]	@ (800f9a0 <ff_convert+0x74>)
 800f96c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f970:	88fa      	ldrh	r2, [r7, #6]
 800f972:	429a      	cmp	r2, r3
 800f974:	d006      	beq.n	800f984 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f976:	89fb      	ldrh	r3, [r7, #14]
 800f978:	3301      	adds	r3, #1
 800f97a:	81fb      	strh	r3, [r7, #14]
 800f97c:	89fb      	ldrh	r3, [r7, #14]
 800f97e:	2b7f      	cmp	r3, #127	@ 0x7f
 800f980:	d9f2      	bls.n	800f968 <ff_convert+0x3c>
 800f982:	e000      	b.n	800f986 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f984:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f986:	89fb      	ldrh	r3, [r7, #14]
 800f988:	3380      	adds	r3, #128	@ 0x80
 800f98a:	b29b      	uxth	r3, r3
 800f98c:	b2db      	uxtb	r3, r3
 800f98e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f990:	89fb      	ldrh	r3, [r7, #14]
}
 800f992:	4618      	mov	r0, r3
 800f994:	3714      	adds	r7, #20
 800f996:	46bd      	mov	sp, r7
 800f998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99c:	4770      	bx	lr
 800f99e:	bf00      	nop
 800f9a0:	080105c0 	.word	0x080105c0

0800f9a4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b087      	sub	sp, #28
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f9ae:	88fb      	ldrh	r3, [r7, #6]
 800f9b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f9b4:	d201      	bcs.n	800f9ba <ff_wtoupper+0x16>
 800f9b6:	4b3e      	ldr	r3, [pc, #248]	@ (800fab0 <ff_wtoupper+0x10c>)
 800f9b8:	e000      	b.n	800f9bc <ff_wtoupper+0x18>
 800f9ba:	4b3e      	ldr	r3, [pc, #248]	@ (800fab4 <ff_wtoupper+0x110>)
 800f9bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	1c9a      	adds	r2, r3, #2
 800f9c2:	617a      	str	r2, [r7, #20]
 800f9c4:	881b      	ldrh	r3, [r3, #0]
 800f9c6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f9c8:	8a7b      	ldrh	r3, [r7, #18]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d068      	beq.n	800faa0 <ff_wtoupper+0xfc>
 800f9ce:	88fa      	ldrh	r2, [r7, #6]
 800f9d0:	8a7b      	ldrh	r3, [r7, #18]
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d364      	bcc.n	800faa0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	1c9a      	adds	r2, r3, #2
 800f9da:	617a      	str	r2, [r7, #20]
 800f9dc:	881b      	ldrh	r3, [r3, #0]
 800f9de:	823b      	strh	r3, [r7, #16]
 800f9e0:	8a3b      	ldrh	r3, [r7, #16]
 800f9e2:	0a1b      	lsrs	r3, r3, #8
 800f9e4:	81fb      	strh	r3, [r7, #14]
 800f9e6:	8a3b      	ldrh	r3, [r7, #16]
 800f9e8:	b2db      	uxtb	r3, r3
 800f9ea:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f9ec:	88fa      	ldrh	r2, [r7, #6]
 800f9ee:	8a79      	ldrh	r1, [r7, #18]
 800f9f0:	8a3b      	ldrh	r3, [r7, #16]
 800f9f2:	440b      	add	r3, r1
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	da49      	bge.n	800fa8c <ff_wtoupper+0xe8>
			switch (cmd) {
 800f9f8:	89fb      	ldrh	r3, [r7, #14]
 800f9fa:	2b08      	cmp	r3, #8
 800f9fc:	d84f      	bhi.n	800fa9e <ff_wtoupper+0xfa>
 800f9fe:	a201      	add	r2, pc, #4	@ (adr r2, 800fa04 <ff_wtoupper+0x60>)
 800fa00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa04:	0800fa29 	.word	0x0800fa29
 800fa08:	0800fa3b 	.word	0x0800fa3b
 800fa0c:	0800fa51 	.word	0x0800fa51
 800fa10:	0800fa59 	.word	0x0800fa59
 800fa14:	0800fa61 	.word	0x0800fa61
 800fa18:	0800fa69 	.word	0x0800fa69
 800fa1c:	0800fa71 	.word	0x0800fa71
 800fa20:	0800fa79 	.word	0x0800fa79
 800fa24:	0800fa81 	.word	0x0800fa81
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800fa28:	88fa      	ldrh	r2, [r7, #6]
 800fa2a:	8a7b      	ldrh	r3, [r7, #18]
 800fa2c:	1ad3      	subs	r3, r2, r3
 800fa2e:	005b      	lsls	r3, r3, #1
 800fa30:	697a      	ldr	r2, [r7, #20]
 800fa32:	4413      	add	r3, r2
 800fa34:	881b      	ldrh	r3, [r3, #0]
 800fa36:	80fb      	strh	r3, [r7, #6]
 800fa38:	e027      	b.n	800fa8a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fa3a:	88fa      	ldrh	r2, [r7, #6]
 800fa3c:	8a7b      	ldrh	r3, [r7, #18]
 800fa3e:	1ad3      	subs	r3, r2, r3
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	f003 0301 	and.w	r3, r3, #1
 800fa46:	b29b      	uxth	r3, r3
 800fa48:	88fa      	ldrh	r2, [r7, #6]
 800fa4a:	1ad3      	subs	r3, r2, r3
 800fa4c:	80fb      	strh	r3, [r7, #6]
 800fa4e:	e01c      	b.n	800fa8a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800fa50:	88fb      	ldrh	r3, [r7, #6]
 800fa52:	3b10      	subs	r3, #16
 800fa54:	80fb      	strh	r3, [r7, #6]
 800fa56:	e018      	b.n	800fa8a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fa58:	88fb      	ldrh	r3, [r7, #6]
 800fa5a:	3b20      	subs	r3, #32
 800fa5c:	80fb      	strh	r3, [r7, #6]
 800fa5e:	e014      	b.n	800fa8a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fa60:	88fb      	ldrh	r3, [r7, #6]
 800fa62:	3b30      	subs	r3, #48	@ 0x30
 800fa64:	80fb      	strh	r3, [r7, #6]
 800fa66:	e010      	b.n	800fa8a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fa68:	88fb      	ldrh	r3, [r7, #6]
 800fa6a:	3b1a      	subs	r3, #26
 800fa6c:	80fb      	strh	r3, [r7, #6]
 800fa6e:	e00c      	b.n	800fa8a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800fa70:	88fb      	ldrh	r3, [r7, #6]
 800fa72:	3308      	adds	r3, #8
 800fa74:	80fb      	strh	r3, [r7, #6]
 800fa76:	e008      	b.n	800fa8a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800fa78:	88fb      	ldrh	r3, [r7, #6]
 800fa7a:	3b50      	subs	r3, #80	@ 0x50
 800fa7c:	80fb      	strh	r3, [r7, #6]
 800fa7e:	e004      	b.n	800fa8a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fa80:	88fb      	ldrh	r3, [r7, #6]
 800fa82:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800fa86:	80fb      	strh	r3, [r7, #6]
 800fa88:	bf00      	nop
			}
			break;
 800fa8a:	e008      	b.n	800fa9e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800fa8c:	89fb      	ldrh	r3, [r7, #14]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d195      	bne.n	800f9be <ff_wtoupper+0x1a>
 800fa92:	8a3b      	ldrh	r3, [r7, #16]
 800fa94:	005b      	lsls	r3, r3, #1
 800fa96:	697a      	ldr	r2, [r7, #20]
 800fa98:	4413      	add	r3, r2
 800fa9a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800fa9c:	e78f      	b.n	800f9be <ff_wtoupper+0x1a>
			break;
 800fa9e:	bf00      	nop
	}

	return chr;
 800faa0:	88fb      	ldrh	r3, [r7, #6]
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	371c      	adds	r7, #28
 800faa6:	46bd      	mov	sp, r7
 800faa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faac:	4770      	bx	lr
 800faae:	bf00      	nop
 800fab0:	080106c0 	.word	0x080106c0
 800fab4:	080108b4 	.word	0x080108b4

0800fab8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800fabc:	2201      	movs	r2, #1
 800fabe:	490e      	ldr	r1, [pc, #56]	@ (800faf8 <MX_USB_HOST_Init+0x40>)
 800fac0:	480e      	ldr	r0, [pc, #56]	@ (800fafc <MX_USB_HOST_Init+0x44>)
 800fac2:	f7fb f8c8 	bl	800ac56 <USBH_Init>
 800fac6:	4603      	mov	r3, r0
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d001      	beq.n	800fad0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800facc:	f7f2 f8e6 	bl	8001c9c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800fad0:	490b      	ldr	r1, [pc, #44]	@ (800fb00 <MX_USB_HOST_Init+0x48>)
 800fad2:	480a      	ldr	r0, [pc, #40]	@ (800fafc <MX_USB_HOST_Init+0x44>)
 800fad4:	f7fb f94d 	bl	800ad72 <USBH_RegisterClass>
 800fad8:	4603      	mov	r3, r0
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d001      	beq.n	800fae2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800fade:	f7f2 f8dd 	bl	8001c9c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800fae2:	4806      	ldr	r0, [pc, #24]	@ (800fafc <MX_USB_HOST_Init+0x44>)
 800fae4:	f7fb f9d1 	bl	800ae8a <USBH_Start>
 800fae8:	4603      	mov	r3, r0
 800faea:	2b00      	cmp	r3, #0
 800faec:	d001      	beq.n	800faf2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800faee:	f7f2 f8d5 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800faf2:	bf00      	nop
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	0800fb19 	.word	0x0800fb19
 800fafc:	20001e7c 	.word	0x20001e7c
 800fb00:	20000078 	.word	0x20000078

0800fb04 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800fb08:	4802      	ldr	r0, [pc, #8]	@ (800fb14 <MX_USB_HOST_Process+0x10>)
 800fb0a:	f7fb f9cf 	bl	800aeac <USBH_Process>
}
 800fb0e:	bf00      	nop
 800fb10:	bd80      	pop	{r7, pc}
 800fb12:	bf00      	nop
 800fb14:	20001e7c 	.word	0x20001e7c

0800fb18 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b083      	sub	sp, #12
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	460b      	mov	r3, r1
 800fb22:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800fb24:	78fb      	ldrb	r3, [r7, #3]
 800fb26:	3b01      	subs	r3, #1
 800fb28:	2b04      	cmp	r3, #4
 800fb2a:	d819      	bhi.n	800fb60 <USBH_UserProcess+0x48>
 800fb2c:	a201      	add	r2, pc, #4	@ (adr r2, 800fb34 <USBH_UserProcess+0x1c>)
 800fb2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb32:	bf00      	nop
 800fb34:	0800fb61 	.word	0x0800fb61
 800fb38:	0800fb51 	.word	0x0800fb51
 800fb3c:	0800fb61 	.word	0x0800fb61
 800fb40:	0800fb59 	.word	0x0800fb59
 800fb44:	0800fb49 	.word	0x0800fb49
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800fb48:	4b09      	ldr	r3, [pc, #36]	@ (800fb70 <USBH_UserProcess+0x58>)
 800fb4a:	2203      	movs	r2, #3
 800fb4c:	701a      	strb	r2, [r3, #0]
  break;
 800fb4e:	e008      	b.n	800fb62 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800fb50:	4b07      	ldr	r3, [pc, #28]	@ (800fb70 <USBH_UserProcess+0x58>)
 800fb52:	2202      	movs	r2, #2
 800fb54:	701a      	strb	r2, [r3, #0]
  break;
 800fb56:	e004      	b.n	800fb62 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800fb58:	4b05      	ldr	r3, [pc, #20]	@ (800fb70 <USBH_UserProcess+0x58>)
 800fb5a:	2201      	movs	r2, #1
 800fb5c:	701a      	strb	r2, [r3, #0]
  break;
 800fb5e:	e000      	b.n	800fb62 <USBH_UserProcess+0x4a>

  default:
  break;
 800fb60:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800fb62:	bf00      	nop
 800fb64:	370c      	adds	r7, #12
 800fb66:	46bd      	mov	sp, r7
 800fb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6c:	4770      	bx	lr
 800fb6e:	bf00      	nop
 800fb70:	20002254 	.word	0x20002254

0800fb74 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b08a      	sub	sp, #40	@ 0x28
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fb7c:	f107 0314 	add.w	r3, r7, #20
 800fb80:	2200      	movs	r2, #0
 800fb82:	601a      	str	r2, [r3, #0]
 800fb84:	605a      	str	r2, [r3, #4]
 800fb86:	609a      	str	r2, [r3, #8]
 800fb88:	60da      	str	r2, [r3, #12]
 800fb8a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fb94:	d147      	bne.n	800fc26 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fb96:	2300      	movs	r3, #0
 800fb98:	613b      	str	r3, [r7, #16]
 800fb9a:	4b25      	ldr	r3, [pc, #148]	@ (800fc30 <HAL_HCD_MspInit+0xbc>)
 800fb9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb9e:	4a24      	ldr	r2, [pc, #144]	@ (800fc30 <HAL_HCD_MspInit+0xbc>)
 800fba0:	f043 0301 	orr.w	r3, r3, #1
 800fba4:	6313      	str	r3, [r2, #48]	@ 0x30
 800fba6:	4b22      	ldr	r3, [pc, #136]	@ (800fc30 <HAL_HCD_MspInit+0xbc>)
 800fba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fbaa:	f003 0301 	and.w	r3, r3, #1
 800fbae:	613b      	str	r3, [r7, #16]
 800fbb0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800fbb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fbb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fbb8:	2300      	movs	r3, #0
 800fbba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fbc0:	f107 0314 	add.w	r3, r7, #20
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	481b      	ldr	r0, [pc, #108]	@ (800fc34 <HAL_HCD_MspInit+0xc0>)
 800fbc8:	f7f3 f986 	bl	8002ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fbcc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800fbd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fbd2:	2302      	movs	r3, #2
 800fbd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fbda:	2303      	movs	r3, #3
 800fbdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fbde:	230a      	movs	r3, #10
 800fbe0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fbe2:	f107 0314 	add.w	r3, r7, #20
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	4812      	ldr	r0, [pc, #72]	@ (800fc34 <HAL_HCD_MspInit+0xc0>)
 800fbea:	f7f3 f975 	bl	8002ed8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fbee:	4b10      	ldr	r3, [pc, #64]	@ (800fc30 <HAL_HCD_MspInit+0xbc>)
 800fbf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbf2:	4a0f      	ldr	r2, [pc, #60]	@ (800fc30 <HAL_HCD_MspInit+0xbc>)
 800fbf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fbf8:	6353      	str	r3, [r2, #52]	@ 0x34
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	60fb      	str	r3, [r7, #12]
 800fbfe:	4b0c      	ldr	r3, [pc, #48]	@ (800fc30 <HAL_HCD_MspInit+0xbc>)
 800fc00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc02:	4a0b      	ldr	r2, [pc, #44]	@ (800fc30 <HAL_HCD_MspInit+0xbc>)
 800fc04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800fc08:	6453      	str	r3, [r2, #68]	@ 0x44
 800fc0a:	4b09      	ldr	r3, [pc, #36]	@ (800fc30 <HAL_HCD_MspInit+0xbc>)
 800fc0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fc12:	60fb      	str	r3, [r7, #12]
 800fc14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fc16:	2200      	movs	r2, #0
 800fc18:	2100      	movs	r1, #0
 800fc1a:	2043      	movs	r0, #67	@ 0x43
 800fc1c:	f7f2 fcc5 	bl	80025aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fc20:	2043      	movs	r0, #67	@ 0x43
 800fc22:	f7f2 fcde 	bl	80025e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fc26:	bf00      	nop
 800fc28:	3728      	adds	r7, #40	@ 0x28
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	40023800 	.word	0x40023800
 800fc34:	40020000 	.word	0x40020000

0800fc38 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b082      	sub	sp, #8
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7fb fd07 	bl	800b65a <USBH_LL_IncTimer>
}
 800fc4c:	bf00      	nop
 800fc4e:	3708      	adds	r7, #8
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b082      	sub	sp, #8
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800fc62:	4618      	mov	r0, r3
 800fc64:	f7fb fd3f 	bl	800b6e6 <USBH_LL_Connect>
}
 800fc68:	bf00      	nop
 800fc6a:	3708      	adds	r7, #8
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}

0800fc70 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7fb fd48 	bl	800b714 <USBH_LL_Disconnect>
}
 800fc84:	bf00      	nop
 800fc86:	3708      	adds	r7, #8
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}

0800fc8c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b083      	sub	sp, #12
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	460b      	mov	r3, r1
 800fc96:	70fb      	strb	r3, [r7, #3]
 800fc98:	4613      	mov	r3, r2
 800fc9a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800fc9c:	bf00      	nop
 800fc9e:	370c      	adds	r7, #12
 800fca0:	46bd      	mov	sp, r7
 800fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca6:	4770      	bx	lr

0800fca8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b082      	sub	sp, #8
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7fb fcf9 	bl	800b6ae <USBH_LL_PortEnabled>
}
 800fcbc:	bf00      	nop
 800fcbe:	3708      	adds	r7, #8
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b082      	sub	sp, #8
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7fb fcf9 	bl	800b6ca <USBH_LL_PortDisabled>
}
 800fcd8:	bf00      	nop
 800fcda:	3708      	adds	r7, #8
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}

0800fce0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b082      	sub	sp, #8
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800fcee:	2b01      	cmp	r3, #1
 800fcf0:	d12a      	bne.n	800fd48 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800fcf2:	4a18      	ldr	r2, [pc, #96]	@ (800fd54 <USBH_LL_Init+0x74>)
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	4a15      	ldr	r2, [pc, #84]	@ (800fd54 <USBH_LL_Init+0x74>)
 800fcfe:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fd02:	4b14      	ldr	r3, [pc, #80]	@ (800fd54 <USBH_LL_Init+0x74>)
 800fd04:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800fd08:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800fd0a:	4b12      	ldr	r3, [pc, #72]	@ (800fd54 <USBH_LL_Init+0x74>)
 800fd0c:	2208      	movs	r2, #8
 800fd0e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800fd10:	4b10      	ldr	r3, [pc, #64]	@ (800fd54 <USBH_LL_Init+0x74>)
 800fd12:	2201      	movs	r2, #1
 800fd14:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fd16:	4b0f      	ldr	r3, [pc, #60]	@ (800fd54 <USBH_LL_Init+0x74>)
 800fd18:	2200      	movs	r2, #0
 800fd1a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800fd1c:	4b0d      	ldr	r3, [pc, #52]	@ (800fd54 <USBH_LL_Init+0x74>)
 800fd1e:	2202      	movs	r2, #2
 800fd20:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fd22:	4b0c      	ldr	r3, [pc, #48]	@ (800fd54 <USBH_LL_Init+0x74>)
 800fd24:	2200      	movs	r2, #0
 800fd26:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800fd28:	480a      	ldr	r0, [pc, #40]	@ (800fd54 <USBH_LL_Init+0x74>)
 800fd2a:	f7f3 fb6f 	bl	800340c <HAL_HCD_Init>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d001      	beq.n	800fd38 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800fd34:	f7f1 ffb2 	bl	8001c9c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800fd38:	4806      	ldr	r0, [pc, #24]	@ (800fd54 <USBH_LL_Init+0x74>)
 800fd3a:	f7f3 ff52 	bl	8003be2 <HAL_HCD_GetCurrentFrame>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	4619      	mov	r1, r3
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f7fb fc7a 	bl	800b63c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800fd48:	2300      	movs	r3, #0
}
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	3708      	adds	r7, #8
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}
 800fd52:	bf00      	nop
 800fd54:	20002258 	.word	0x20002258

0800fd58 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b084      	sub	sp, #16
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd60:	2300      	movs	r3, #0
 800fd62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fd64:	2300      	movs	r3, #0
 800fd66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7f3 fec1 	bl	8003af6 <HAL_HCD_Start>
 800fd74:	4603      	mov	r3, r0
 800fd76:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fd78:	7bfb      	ldrb	r3, [r7, #15]
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f000 f98c 	bl	8010098 <USBH_Get_USB_Status>
 800fd80:	4603      	mov	r3, r0
 800fd82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd84:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	3710      	adds	r7, #16
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}

0800fd8e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800fd8e:	b580      	push	{r7, lr}
 800fd90:	b084      	sub	sp, #16
 800fd92:	af00      	add	r7, sp, #0
 800fd94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd96:	2300      	movs	r3, #0
 800fd98:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7f3 fec9 	bl	8003b3c <HAL_HCD_Stop>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fdae:	7bfb      	ldrb	r3, [r7, #15]
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f000 f971 	bl	8010098 <USBH_Get_USB_Status>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fdba:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3710      	adds	r7, #16
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}

0800fdc4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800fdcc:	2301      	movs	r3, #1
 800fdce:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7f3 ff11 	bl	8003bfe <HAL_HCD_GetCurrentSpeed>
 800fddc:	4603      	mov	r3, r0
 800fdde:	2b02      	cmp	r3, #2
 800fde0:	d00c      	beq.n	800fdfc <USBH_LL_GetSpeed+0x38>
 800fde2:	2b02      	cmp	r3, #2
 800fde4:	d80d      	bhi.n	800fe02 <USBH_LL_GetSpeed+0x3e>
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d002      	beq.n	800fdf0 <USBH_LL_GetSpeed+0x2c>
 800fdea:	2b01      	cmp	r3, #1
 800fdec:	d003      	beq.n	800fdf6 <USBH_LL_GetSpeed+0x32>
 800fdee:	e008      	b.n	800fe02 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	73fb      	strb	r3, [r7, #15]
    break;
 800fdf4:	e008      	b.n	800fe08 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	73fb      	strb	r3, [r7, #15]
    break;
 800fdfa:	e005      	b.n	800fe08 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800fdfc:	2302      	movs	r3, #2
 800fdfe:	73fb      	strb	r3, [r7, #15]
    break;
 800fe00:	e002      	b.n	800fe08 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800fe02:	2301      	movs	r3, #1
 800fe04:	73fb      	strb	r3, [r7, #15]
    break;
 800fe06:	bf00      	nop
  }
  return  speed;
 800fe08:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3710      	adds	r7, #16
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}

0800fe12 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800fe12:	b580      	push	{r7, lr}
 800fe14:	b084      	sub	sp, #16
 800fe16:	af00      	add	r7, sp, #0
 800fe18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7f3 fea4 	bl	8003b76 <HAL_HCD_ResetPort>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fe32:	7bfb      	ldrb	r3, [r7, #15]
 800fe34:	4618      	mov	r0, r3
 800fe36:	f000 f92f 	bl	8010098 <USBH_Get_USB_Status>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	3710      	adds	r7, #16
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}

0800fe48 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	460b      	mov	r3, r1
 800fe52:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fe5a:	78fa      	ldrb	r2, [r7, #3]
 800fe5c:	4611      	mov	r1, r2
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f7f3 feab 	bl	8003bba <HAL_HCD_HC_GetXferCount>
 800fe64:	4603      	mov	r3, r0
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3708      	adds	r7, #8
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}

0800fe6e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fe6e:	b590      	push	{r4, r7, lr}
 800fe70:	b089      	sub	sp, #36	@ 0x24
 800fe72:	af04      	add	r7, sp, #16
 800fe74:	6078      	str	r0, [r7, #4]
 800fe76:	4608      	mov	r0, r1
 800fe78:	4611      	mov	r1, r2
 800fe7a:	461a      	mov	r2, r3
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	70fb      	strb	r3, [r7, #3]
 800fe80:	460b      	mov	r3, r1
 800fe82:	70bb      	strb	r3, [r7, #2]
 800fe84:	4613      	mov	r3, r2
 800fe86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe88:	2300      	movs	r3, #0
 800fe8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800fe96:	787c      	ldrb	r4, [r7, #1]
 800fe98:	78ba      	ldrb	r2, [r7, #2]
 800fe9a:	78f9      	ldrb	r1, [r7, #3]
 800fe9c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fe9e:	9302      	str	r3, [sp, #8]
 800fea0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fea4:	9301      	str	r3, [sp, #4]
 800fea6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800feaa:	9300      	str	r3, [sp, #0]
 800feac:	4623      	mov	r3, r4
 800feae:	f7f3 fb0f 	bl	80034d0 <HAL_HCD_HC_Init>
 800feb2:	4603      	mov	r3, r0
 800feb4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800feb6:	7bfb      	ldrb	r3, [r7, #15]
 800feb8:	4618      	mov	r0, r3
 800feba:	f000 f8ed 	bl	8010098 <USBH_Get_USB_Status>
 800febe:	4603      	mov	r3, r0
 800fec0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fec2:	7bbb      	ldrb	r3, [r7, #14]
}
 800fec4:	4618      	mov	r0, r3
 800fec6:	3714      	adds	r7, #20
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd90      	pop	{r4, r7, pc}

0800fecc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b084      	sub	sp, #16
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
 800fed4:	460b      	mov	r3, r1
 800fed6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fed8:	2300      	movs	r3, #0
 800feda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fedc:	2300      	movs	r3, #0
 800fede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fee6:	78fa      	ldrb	r2, [r7, #3]
 800fee8:	4611      	mov	r1, r2
 800feea:	4618      	mov	r0, r3
 800feec:	f7f3 fb7f 	bl	80035ee <HAL_HCD_HC_Halt>
 800fef0:	4603      	mov	r3, r0
 800fef2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fef4:	7bfb      	ldrb	r3, [r7, #15]
 800fef6:	4618      	mov	r0, r3
 800fef8:	f000 f8ce 	bl	8010098 <USBH_Get_USB_Status>
 800fefc:	4603      	mov	r3, r0
 800fefe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff00:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff02:	4618      	mov	r0, r3
 800ff04:	3710      	adds	r7, #16
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}

0800ff0a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ff0a:	b590      	push	{r4, r7, lr}
 800ff0c:	b089      	sub	sp, #36	@ 0x24
 800ff0e:	af04      	add	r7, sp, #16
 800ff10:	6078      	str	r0, [r7, #4]
 800ff12:	4608      	mov	r0, r1
 800ff14:	4611      	mov	r1, r2
 800ff16:	461a      	mov	r2, r3
 800ff18:	4603      	mov	r3, r0
 800ff1a:	70fb      	strb	r3, [r7, #3]
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	70bb      	strb	r3, [r7, #2]
 800ff20:	4613      	mov	r3, r2
 800ff22:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff24:	2300      	movs	r3, #0
 800ff26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ff32:	787c      	ldrb	r4, [r7, #1]
 800ff34:	78ba      	ldrb	r2, [r7, #2]
 800ff36:	78f9      	ldrb	r1, [r7, #3]
 800ff38:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ff3c:	9303      	str	r3, [sp, #12]
 800ff3e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ff40:	9302      	str	r3, [sp, #8]
 800ff42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff44:	9301      	str	r3, [sp, #4]
 800ff46:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ff4a:	9300      	str	r3, [sp, #0]
 800ff4c:	4623      	mov	r3, r4
 800ff4e:	f7f3 fb71 	bl	8003634 <HAL_HCD_HC_SubmitRequest>
 800ff52:	4603      	mov	r3, r0
 800ff54:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ff56:	7bfb      	ldrb	r3, [r7, #15]
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f000 f89d 	bl	8010098 <USBH_Get_USB_Status>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff62:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3714      	adds	r7, #20
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd90      	pop	{r4, r7, pc}

0800ff6c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
 800ff74:	460b      	mov	r3, r1
 800ff76:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ff7e:	78fa      	ldrb	r2, [r7, #3]
 800ff80:	4611      	mov	r1, r2
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7f3 fe05 	bl	8003b92 <HAL_HCD_HC_GetURBState>
 800ff88:	4603      	mov	r3, r0
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	3708      	adds	r7, #8
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}

0800ff92 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ff92:	b580      	push	{r7, lr}
 800ff94:	b082      	sub	sp, #8
 800ff96:	af00      	add	r7, sp, #0
 800ff98:	6078      	str	r0, [r7, #4]
 800ff9a:	460b      	mov	r3, r1
 800ff9c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ffa4:	2b01      	cmp	r3, #1
 800ffa6:	d103      	bne.n	800ffb0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ffa8:	78fb      	ldrb	r3, [r7, #3]
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f000 f8a0 	bl	80100f0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ffb0:	20c8      	movs	r0, #200	@ 0xc8
 800ffb2:	f7f2 f9fb 	bl	80023ac <HAL_Delay>
  return USBH_OK;
 800ffb6:	2300      	movs	r3, #0
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3708      	adds	r7, #8
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b085      	sub	sp, #20
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	460b      	mov	r3, r1
 800ffca:	70fb      	strb	r3, [r7, #3]
 800ffcc:	4613      	mov	r3, r2
 800ffce:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ffd6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ffd8:	78fb      	ldrb	r3, [r7, #3]
 800ffda:	68fa      	ldr	r2, [r7, #12]
 800ffdc:	212c      	movs	r1, #44	@ 0x2c
 800ffde:	fb01 f303 	mul.w	r3, r1, r3
 800ffe2:	4413      	add	r3, r2
 800ffe4:	333b      	adds	r3, #59	@ 0x3b
 800ffe6:	781b      	ldrb	r3, [r3, #0]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d009      	beq.n	8010000 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ffec:	78fb      	ldrb	r3, [r7, #3]
 800ffee:	68fa      	ldr	r2, [r7, #12]
 800fff0:	212c      	movs	r1, #44	@ 0x2c
 800fff2:	fb01 f303 	mul.w	r3, r1, r3
 800fff6:	4413      	add	r3, r2
 800fff8:	3354      	adds	r3, #84	@ 0x54
 800fffa:	78ba      	ldrb	r2, [r7, #2]
 800fffc:	701a      	strb	r2, [r3, #0]
 800fffe:	e008      	b.n	8010012 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010000:	78fb      	ldrb	r3, [r7, #3]
 8010002:	68fa      	ldr	r2, [r7, #12]
 8010004:	212c      	movs	r1, #44	@ 0x2c
 8010006:	fb01 f303 	mul.w	r3, r1, r3
 801000a:	4413      	add	r3, r2
 801000c:	3355      	adds	r3, #85	@ 0x55
 801000e:	78ba      	ldrb	r2, [r7, #2]
 8010010:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010012:	2300      	movs	r3, #0
}
 8010014:	4618      	mov	r0, r3
 8010016:	3714      	adds	r7, #20
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr

08010020 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010020:	b480      	push	{r7}
 8010022:	b085      	sub	sp, #20
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	460b      	mov	r3, r1
 801002a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801002c:	2300      	movs	r3, #0
 801002e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010036:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8010038:	78fb      	ldrb	r3, [r7, #3]
 801003a:	68ba      	ldr	r2, [r7, #8]
 801003c:	212c      	movs	r1, #44	@ 0x2c
 801003e:	fb01 f303 	mul.w	r3, r1, r3
 8010042:	4413      	add	r3, r2
 8010044:	333b      	adds	r3, #59	@ 0x3b
 8010046:	781b      	ldrb	r3, [r3, #0]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d009      	beq.n	8010060 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801004c:	78fb      	ldrb	r3, [r7, #3]
 801004e:	68ba      	ldr	r2, [r7, #8]
 8010050:	212c      	movs	r1, #44	@ 0x2c
 8010052:	fb01 f303 	mul.w	r3, r1, r3
 8010056:	4413      	add	r3, r2
 8010058:	3354      	adds	r3, #84	@ 0x54
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	73fb      	strb	r3, [r7, #15]
 801005e:	e008      	b.n	8010072 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8010060:	78fb      	ldrb	r3, [r7, #3]
 8010062:	68ba      	ldr	r2, [r7, #8]
 8010064:	212c      	movs	r1, #44	@ 0x2c
 8010066:	fb01 f303 	mul.w	r3, r1, r3
 801006a:	4413      	add	r3, r2
 801006c:	3355      	adds	r3, #85	@ 0x55
 801006e:	781b      	ldrb	r3, [r3, #0]
 8010070:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8010072:	7bfb      	ldrb	r3, [r7, #15]
}
 8010074:	4618      	mov	r0, r3
 8010076:	3714      	adds	r7, #20
 8010078:	46bd      	mov	sp, r7
 801007a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007e:	4770      	bx	lr

08010080 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b082      	sub	sp, #8
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f7f2 f98f 	bl	80023ac <HAL_Delay>
}
 801008e:	bf00      	nop
 8010090:	3708      	adds	r7, #8
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
	...

08010098 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010098:	b480      	push	{r7}
 801009a:	b085      	sub	sp, #20
 801009c:	af00      	add	r7, sp, #0
 801009e:	4603      	mov	r3, r0
 80100a0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80100a2:	2300      	movs	r3, #0
 80100a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80100a6:	79fb      	ldrb	r3, [r7, #7]
 80100a8:	2b03      	cmp	r3, #3
 80100aa:	d817      	bhi.n	80100dc <USBH_Get_USB_Status+0x44>
 80100ac:	a201      	add	r2, pc, #4	@ (adr r2, 80100b4 <USBH_Get_USB_Status+0x1c>)
 80100ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100b2:	bf00      	nop
 80100b4:	080100c5 	.word	0x080100c5
 80100b8:	080100cb 	.word	0x080100cb
 80100bc:	080100d1 	.word	0x080100d1
 80100c0:	080100d7 	.word	0x080100d7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80100c4:	2300      	movs	r3, #0
 80100c6:	73fb      	strb	r3, [r7, #15]
    break;
 80100c8:	e00b      	b.n	80100e2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80100ca:	2302      	movs	r3, #2
 80100cc:	73fb      	strb	r3, [r7, #15]
    break;
 80100ce:	e008      	b.n	80100e2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80100d0:	2301      	movs	r3, #1
 80100d2:	73fb      	strb	r3, [r7, #15]
    break;
 80100d4:	e005      	b.n	80100e2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80100d6:	2302      	movs	r3, #2
 80100d8:	73fb      	strb	r3, [r7, #15]
    break;
 80100da:	e002      	b.n	80100e2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80100dc:	2302      	movs	r3, #2
 80100de:	73fb      	strb	r3, [r7, #15]
    break;
 80100e0:	bf00      	nop
  }
  return usb_status;
 80100e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3714      	adds	r7, #20
 80100e8:	46bd      	mov	sp, r7
 80100ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ee:	4770      	bx	lr

080100f0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b084      	sub	sp, #16
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	4603      	mov	r3, r0
 80100f8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80100fa:	79fb      	ldrb	r3, [r7, #7]
 80100fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80100fe:	79fb      	ldrb	r3, [r7, #7]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d102      	bne.n	801010a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010104:	2301      	movs	r3, #1
 8010106:	73fb      	strb	r3, [r7, #15]
 8010108:	e001      	b.n	801010e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801010a:	2300      	movs	r3, #0
 801010c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 801010e:	7bfb      	ldrb	r3, [r7, #15]
 8010110:	461a      	mov	r2, r3
 8010112:	2101      	movs	r1, #1
 8010114:	4803      	ldr	r0, [pc, #12]	@ (8010124 <MX_DriverVbusFS+0x34>)
 8010116:	f7f3 f947 	bl	80033a8 <HAL_GPIO_WritePin>
}
 801011a:	bf00      	nop
 801011c:	3710      	adds	r7, #16
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}
 8010122:	bf00      	nop
 8010124:	40020800 	.word	0x40020800

08010128 <malloc>:
 8010128:	4b02      	ldr	r3, [pc, #8]	@ (8010134 <malloc+0xc>)
 801012a:	4601      	mov	r1, r0
 801012c:	6818      	ldr	r0, [r3, #0]
 801012e:	f000 b82d 	b.w	801018c <_malloc_r>
 8010132:	bf00      	nop
 8010134:	20000098 	.word	0x20000098

08010138 <free>:
 8010138:	4b02      	ldr	r3, [pc, #8]	@ (8010144 <free+0xc>)
 801013a:	4601      	mov	r1, r0
 801013c:	6818      	ldr	r0, [r3, #0]
 801013e:	f000 b92d 	b.w	801039c <_free_r>
 8010142:	bf00      	nop
 8010144:	20000098 	.word	0x20000098

08010148 <sbrk_aligned>:
 8010148:	b570      	push	{r4, r5, r6, lr}
 801014a:	4e0f      	ldr	r6, [pc, #60]	@ (8010188 <sbrk_aligned+0x40>)
 801014c:	460c      	mov	r4, r1
 801014e:	6831      	ldr	r1, [r6, #0]
 8010150:	4605      	mov	r5, r0
 8010152:	b911      	cbnz	r1, 801015a <sbrk_aligned+0x12>
 8010154:	f000 f8d8 	bl	8010308 <_sbrk_r>
 8010158:	6030      	str	r0, [r6, #0]
 801015a:	4621      	mov	r1, r4
 801015c:	4628      	mov	r0, r5
 801015e:	f000 f8d3 	bl	8010308 <_sbrk_r>
 8010162:	1c43      	adds	r3, r0, #1
 8010164:	d103      	bne.n	801016e <sbrk_aligned+0x26>
 8010166:	f04f 34ff 	mov.w	r4, #4294967295
 801016a:	4620      	mov	r0, r4
 801016c:	bd70      	pop	{r4, r5, r6, pc}
 801016e:	1cc4      	adds	r4, r0, #3
 8010170:	f024 0403 	bic.w	r4, r4, #3
 8010174:	42a0      	cmp	r0, r4
 8010176:	d0f8      	beq.n	801016a <sbrk_aligned+0x22>
 8010178:	1a21      	subs	r1, r4, r0
 801017a:	4628      	mov	r0, r5
 801017c:	f000 f8c4 	bl	8010308 <_sbrk_r>
 8010180:	3001      	adds	r0, #1
 8010182:	d1f2      	bne.n	801016a <sbrk_aligned+0x22>
 8010184:	e7ef      	b.n	8010166 <sbrk_aligned+0x1e>
 8010186:	bf00      	nop
 8010188:	2000255c 	.word	0x2000255c

0801018c <_malloc_r>:
 801018c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010190:	1ccd      	adds	r5, r1, #3
 8010192:	f025 0503 	bic.w	r5, r5, #3
 8010196:	3508      	adds	r5, #8
 8010198:	2d0c      	cmp	r5, #12
 801019a:	bf38      	it	cc
 801019c:	250c      	movcc	r5, #12
 801019e:	2d00      	cmp	r5, #0
 80101a0:	4606      	mov	r6, r0
 80101a2:	db01      	blt.n	80101a8 <_malloc_r+0x1c>
 80101a4:	42a9      	cmp	r1, r5
 80101a6:	d904      	bls.n	80101b2 <_malloc_r+0x26>
 80101a8:	230c      	movs	r3, #12
 80101aa:	6033      	str	r3, [r6, #0]
 80101ac:	2000      	movs	r0, #0
 80101ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010288 <_malloc_r+0xfc>
 80101b6:	f000 f869 	bl	801028c <__malloc_lock>
 80101ba:	f8d8 3000 	ldr.w	r3, [r8]
 80101be:	461c      	mov	r4, r3
 80101c0:	bb44      	cbnz	r4, 8010214 <_malloc_r+0x88>
 80101c2:	4629      	mov	r1, r5
 80101c4:	4630      	mov	r0, r6
 80101c6:	f7ff ffbf 	bl	8010148 <sbrk_aligned>
 80101ca:	1c43      	adds	r3, r0, #1
 80101cc:	4604      	mov	r4, r0
 80101ce:	d158      	bne.n	8010282 <_malloc_r+0xf6>
 80101d0:	f8d8 4000 	ldr.w	r4, [r8]
 80101d4:	4627      	mov	r7, r4
 80101d6:	2f00      	cmp	r7, #0
 80101d8:	d143      	bne.n	8010262 <_malloc_r+0xd6>
 80101da:	2c00      	cmp	r4, #0
 80101dc:	d04b      	beq.n	8010276 <_malloc_r+0xea>
 80101de:	6823      	ldr	r3, [r4, #0]
 80101e0:	4639      	mov	r1, r7
 80101e2:	4630      	mov	r0, r6
 80101e4:	eb04 0903 	add.w	r9, r4, r3
 80101e8:	f000 f88e 	bl	8010308 <_sbrk_r>
 80101ec:	4581      	cmp	r9, r0
 80101ee:	d142      	bne.n	8010276 <_malloc_r+0xea>
 80101f0:	6821      	ldr	r1, [r4, #0]
 80101f2:	1a6d      	subs	r5, r5, r1
 80101f4:	4629      	mov	r1, r5
 80101f6:	4630      	mov	r0, r6
 80101f8:	f7ff ffa6 	bl	8010148 <sbrk_aligned>
 80101fc:	3001      	adds	r0, #1
 80101fe:	d03a      	beq.n	8010276 <_malloc_r+0xea>
 8010200:	6823      	ldr	r3, [r4, #0]
 8010202:	442b      	add	r3, r5
 8010204:	6023      	str	r3, [r4, #0]
 8010206:	f8d8 3000 	ldr.w	r3, [r8]
 801020a:	685a      	ldr	r2, [r3, #4]
 801020c:	bb62      	cbnz	r2, 8010268 <_malloc_r+0xdc>
 801020e:	f8c8 7000 	str.w	r7, [r8]
 8010212:	e00f      	b.n	8010234 <_malloc_r+0xa8>
 8010214:	6822      	ldr	r2, [r4, #0]
 8010216:	1b52      	subs	r2, r2, r5
 8010218:	d420      	bmi.n	801025c <_malloc_r+0xd0>
 801021a:	2a0b      	cmp	r2, #11
 801021c:	d917      	bls.n	801024e <_malloc_r+0xc2>
 801021e:	1961      	adds	r1, r4, r5
 8010220:	42a3      	cmp	r3, r4
 8010222:	6025      	str	r5, [r4, #0]
 8010224:	bf18      	it	ne
 8010226:	6059      	strne	r1, [r3, #4]
 8010228:	6863      	ldr	r3, [r4, #4]
 801022a:	bf08      	it	eq
 801022c:	f8c8 1000 	streq.w	r1, [r8]
 8010230:	5162      	str	r2, [r4, r5]
 8010232:	604b      	str	r3, [r1, #4]
 8010234:	4630      	mov	r0, r6
 8010236:	f000 f82f 	bl	8010298 <__malloc_unlock>
 801023a:	f104 000b 	add.w	r0, r4, #11
 801023e:	1d23      	adds	r3, r4, #4
 8010240:	f020 0007 	bic.w	r0, r0, #7
 8010244:	1ac2      	subs	r2, r0, r3
 8010246:	bf1c      	itt	ne
 8010248:	1a1b      	subne	r3, r3, r0
 801024a:	50a3      	strne	r3, [r4, r2]
 801024c:	e7af      	b.n	80101ae <_malloc_r+0x22>
 801024e:	6862      	ldr	r2, [r4, #4]
 8010250:	42a3      	cmp	r3, r4
 8010252:	bf0c      	ite	eq
 8010254:	f8c8 2000 	streq.w	r2, [r8]
 8010258:	605a      	strne	r2, [r3, #4]
 801025a:	e7eb      	b.n	8010234 <_malloc_r+0xa8>
 801025c:	4623      	mov	r3, r4
 801025e:	6864      	ldr	r4, [r4, #4]
 8010260:	e7ae      	b.n	80101c0 <_malloc_r+0x34>
 8010262:	463c      	mov	r4, r7
 8010264:	687f      	ldr	r7, [r7, #4]
 8010266:	e7b6      	b.n	80101d6 <_malloc_r+0x4a>
 8010268:	461a      	mov	r2, r3
 801026a:	685b      	ldr	r3, [r3, #4]
 801026c:	42a3      	cmp	r3, r4
 801026e:	d1fb      	bne.n	8010268 <_malloc_r+0xdc>
 8010270:	2300      	movs	r3, #0
 8010272:	6053      	str	r3, [r2, #4]
 8010274:	e7de      	b.n	8010234 <_malloc_r+0xa8>
 8010276:	230c      	movs	r3, #12
 8010278:	6033      	str	r3, [r6, #0]
 801027a:	4630      	mov	r0, r6
 801027c:	f000 f80c 	bl	8010298 <__malloc_unlock>
 8010280:	e794      	b.n	80101ac <_malloc_r+0x20>
 8010282:	6005      	str	r5, [r0, #0]
 8010284:	e7d6      	b.n	8010234 <_malloc_r+0xa8>
 8010286:	bf00      	nop
 8010288:	20002560 	.word	0x20002560

0801028c <__malloc_lock>:
 801028c:	4801      	ldr	r0, [pc, #4]	@ (8010294 <__malloc_lock+0x8>)
 801028e:	f000 b875 	b.w	801037c <__retarget_lock_acquire_recursive>
 8010292:	bf00      	nop
 8010294:	200026a0 	.word	0x200026a0

08010298 <__malloc_unlock>:
 8010298:	4801      	ldr	r0, [pc, #4]	@ (80102a0 <__malloc_unlock+0x8>)
 801029a:	f000 b870 	b.w	801037e <__retarget_lock_release_recursive>
 801029e:	bf00      	nop
 80102a0:	200026a0 	.word	0x200026a0

080102a4 <memset>:
 80102a4:	4402      	add	r2, r0
 80102a6:	4603      	mov	r3, r0
 80102a8:	4293      	cmp	r3, r2
 80102aa:	d100      	bne.n	80102ae <memset+0xa>
 80102ac:	4770      	bx	lr
 80102ae:	f803 1b01 	strb.w	r1, [r3], #1
 80102b2:	e7f9      	b.n	80102a8 <memset+0x4>

080102b4 <strncpy>:
 80102b4:	b510      	push	{r4, lr}
 80102b6:	3901      	subs	r1, #1
 80102b8:	4603      	mov	r3, r0
 80102ba:	b132      	cbz	r2, 80102ca <strncpy+0x16>
 80102bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80102c0:	f803 4b01 	strb.w	r4, [r3], #1
 80102c4:	3a01      	subs	r2, #1
 80102c6:	2c00      	cmp	r4, #0
 80102c8:	d1f7      	bne.n	80102ba <strncpy+0x6>
 80102ca:	441a      	add	r2, r3
 80102cc:	2100      	movs	r1, #0
 80102ce:	4293      	cmp	r3, r2
 80102d0:	d100      	bne.n	80102d4 <strncpy+0x20>
 80102d2:	bd10      	pop	{r4, pc}
 80102d4:	f803 1b01 	strb.w	r1, [r3], #1
 80102d8:	e7f9      	b.n	80102ce <strncpy+0x1a>

080102da <strstr>:
 80102da:	780a      	ldrb	r2, [r1, #0]
 80102dc:	b570      	push	{r4, r5, r6, lr}
 80102de:	b96a      	cbnz	r2, 80102fc <strstr+0x22>
 80102e0:	bd70      	pop	{r4, r5, r6, pc}
 80102e2:	429a      	cmp	r2, r3
 80102e4:	d109      	bne.n	80102fa <strstr+0x20>
 80102e6:	460c      	mov	r4, r1
 80102e8:	4605      	mov	r5, r0
 80102ea:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d0f6      	beq.n	80102e0 <strstr+0x6>
 80102f2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80102f6:	429e      	cmp	r6, r3
 80102f8:	d0f7      	beq.n	80102ea <strstr+0x10>
 80102fa:	3001      	adds	r0, #1
 80102fc:	7803      	ldrb	r3, [r0, #0]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d1ef      	bne.n	80102e2 <strstr+0x8>
 8010302:	4618      	mov	r0, r3
 8010304:	e7ec      	b.n	80102e0 <strstr+0x6>
	...

08010308 <_sbrk_r>:
 8010308:	b538      	push	{r3, r4, r5, lr}
 801030a:	4d06      	ldr	r5, [pc, #24]	@ (8010324 <_sbrk_r+0x1c>)
 801030c:	2300      	movs	r3, #0
 801030e:	4604      	mov	r4, r0
 8010310:	4608      	mov	r0, r1
 8010312:	602b      	str	r3, [r5, #0]
 8010314:	f7f1 fda4 	bl	8001e60 <_sbrk>
 8010318:	1c43      	adds	r3, r0, #1
 801031a:	d102      	bne.n	8010322 <_sbrk_r+0x1a>
 801031c:	682b      	ldr	r3, [r5, #0]
 801031e:	b103      	cbz	r3, 8010322 <_sbrk_r+0x1a>
 8010320:	6023      	str	r3, [r4, #0]
 8010322:	bd38      	pop	{r3, r4, r5, pc}
 8010324:	2000269c 	.word	0x2000269c

08010328 <__errno>:
 8010328:	4b01      	ldr	r3, [pc, #4]	@ (8010330 <__errno+0x8>)
 801032a:	6818      	ldr	r0, [r3, #0]
 801032c:	4770      	bx	lr
 801032e:	bf00      	nop
 8010330:	20000098 	.word	0x20000098

08010334 <__libc_init_array>:
 8010334:	b570      	push	{r4, r5, r6, lr}
 8010336:	4d0d      	ldr	r5, [pc, #52]	@ (801036c <__libc_init_array+0x38>)
 8010338:	4c0d      	ldr	r4, [pc, #52]	@ (8010370 <__libc_init_array+0x3c>)
 801033a:	1b64      	subs	r4, r4, r5
 801033c:	10a4      	asrs	r4, r4, #2
 801033e:	2600      	movs	r6, #0
 8010340:	42a6      	cmp	r6, r4
 8010342:	d109      	bne.n	8010358 <__libc_init_array+0x24>
 8010344:	4d0b      	ldr	r5, [pc, #44]	@ (8010374 <__libc_init_array+0x40>)
 8010346:	4c0c      	ldr	r4, [pc, #48]	@ (8010378 <__libc_init_array+0x44>)
 8010348:	f000 f872 	bl	8010430 <_init>
 801034c:	1b64      	subs	r4, r4, r5
 801034e:	10a4      	asrs	r4, r4, #2
 8010350:	2600      	movs	r6, #0
 8010352:	42a6      	cmp	r6, r4
 8010354:	d105      	bne.n	8010362 <__libc_init_array+0x2e>
 8010356:	bd70      	pop	{r4, r5, r6, pc}
 8010358:	f855 3b04 	ldr.w	r3, [r5], #4
 801035c:	4798      	blx	r3
 801035e:	3601      	adds	r6, #1
 8010360:	e7ee      	b.n	8010340 <__libc_init_array+0xc>
 8010362:	f855 3b04 	ldr.w	r3, [r5], #4
 8010366:	4798      	blx	r3
 8010368:	3601      	adds	r6, #1
 801036a:	e7f2      	b.n	8010352 <__libc_init_array+0x1e>
 801036c:	08010978 	.word	0x08010978
 8010370:	08010978 	.word	0x08010978
 8010374:	08010978 	.word	0x08010978
 8010378:	0801097c 	.word	0x0801097c

0801037c <__retarget_lock_acquire_recursive>:
 801037c:	4770      	bx	lr

0801037e <__retarget_lock_release_recursive>:
 801037e:	4770      	bx	lr

08010380 <memcpy>:
 8010380:	440a      	add	r2, r1
 8010382:	4291      	cmp	r1, r2
 8010384:	f100 33ff 	add.w	r3, r0, #4294967295
 8010388:	d100      	bne.n	801038c <memcpy+0xc>
 801038a:	4770      	bx	lr
 801038c:	b510      	push	{r4, lr}
 801038e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010392:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010396:	4291      	cmp	r1, r2
 8010398:	d1f9      	bne.n	801038e <memcpy+0xe>
 801039a:	bd10      	pop	{r4, pc}

0801039c <_free_r>:
 801039c:	b538      	push	{r3, r4, r5, lr}
 801039e:	4605      	mov	r5, r0
 80103a0:	2900      	cmp	r1, #0
 80103a2:	d041      	beq.n	8010428 <_free_r+0x8c>
 80103a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103a8:	1f0c      	subs	r4, r1, #4
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	bfb8      	it	lt
 80103ae:	18e4      	addlt	r4, r4, r3
 80103b0:	f7ff ff6c 	bl	801028c <__malloc_lock>
 80103b4:	4a1d      	ldr	r2, [pc, #116]	@ (801042c <_free_r+0x90>)
 80103b6:	6813      	ldr	r3, [r2, #0]
 80103b8:	b933      	cbnz	r3, 80103c8 <_free_r+0x2c>
 80103ba:	6063      	str	r3, [r4, #4]
 80103bc:	6014      	str	r4, [r2, #0]
 80103be:	4628      	mov	r0, r5
 80103c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103c4:	f7ff bf68 	b.w	8010298 <__malloc_unlock>
 80103c8:	42a3      	cmp	r3, r4
 80103ca:	d908      	bls.n	80103de <_free_r+0x42>
 80103cc:	6820      	ldr	r0, [r4, #0]
 80103ce:	1821      	adds	r1, r4, r0
 80103d0:	428b      	cmp	r3, r1
 80103d2:	bf01      	itttt	eq
 80103d4:	6819      	ldreq	r1, [r3, #0]
 80103d6:	685b      	ldreq	r3, [r3, #4]
 80103d8:	1809      	addeq	r1, r1, r0
 80103da:	6021      	streq	r1, [r4, #0]
 80103dc:	e7ed      	b.n	80103ba <_free_r+0x1e>
 80103de:	461a      	mov	r2, r3
 80103e0:	685b      	ldr	r3, [r3, #4]
 80103e2:	b10b      	cbz	r3, 80103e8 <_free_r+0x4c>
 80103e4:	42a3      	cmp	r3, r4
 80103e6:	d9fa      	bls.n	80103de <_free_r+0x42>
 80103e8:	6811      	ldr	r1, [r2, #0]
 80103ea:	1850      	adds	r0, r2, r1
 80103ec:	42a0      	cmp	r0, r4
 80103ee:	d10b      	bne.n	8010408 <_free_r+0x6c>
 80103f0:	6820      	ldr	r0, [r4, #0]
 80103f2:	4401      	add	r1, r0
 80103f4:	1850      	adds	r0, r2, r1
 80103f6:	4283      	cmp	r3, r0
 80103f8:	6011      	str	r1, [r2, #0]
 80103fa:	d1e0      	bne.n	80103be <_free_r+0x22>
 80103fc:	6818      	ldr	r0, [r3, #0]
 80103fe:	685b      	ldr	r3, [r3, #4]
 8010400:	6053      	str	r3, [r2, #4]
 8010402:	4408      	add	r0, r1
 8010404:	6010      	str	r0, [r2, #0]
 8010406:	e7da      	b.n	80103be <_free_r+0x22>
 8010408:	d902      	bls.n	8010410 <_free_r+0x74>
 801040a:	230c      	movs	r3, #12
 801040c:	602b      	str	r3, [r5, #0]
 801040e:	e7d6      	b.n	80103be <_free_r+0x22>
 8010410:	6820      	ldr	r0, [r4, #0]
 8010412:	1821      	adds	r1, r4, r0
 8010414:	428b      	cmp	r3, r1
 8010416:	bf04      	itt	eq
 8010418:	6819      	ldreq	r1, [r3, #0]
 801041a:	685b      	ldreq	r3, [r3, #4]
 801041c:	6063      	str	r3, [r4, #4]
 801041e:	bf04      	itt	eq
 8010420:	1809      	addeq	r1, r1, r0
 8010422:	6021      	streq	r1, [r4, #0]
 8010424:	6054      	str	r4, [r2, #4]
 8010426:	e7ca      	b.n	80103be <_free_r+0x22>
 8010428:	bd38      	pop	{r3, r4, r5, pc}
 801042a:	bf00      	nop
 801042c:	20002560 	.word	0x20002560

08010430 <_init>:
 8010430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010432:	bf00      	nop
 8010434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010436:	bc08      	pop	{r3}
 8010438:	469e      	mov	lr, r3
 801043a:	4770      	bx	lr

0801043c <_fini>:
 801043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801043e:	bf00      	nop
 8010440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010442:	bc08      	pop	{r3}
 8010444:	469e      	mov	lr, r3
 8010446:	4770      	bx	lr
