
EugenioProyect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011890  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b04  08011a28  08011a28  00021a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801352c  0801352c  000300fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801352c  0801352c  0002352c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013534  08013534  000300fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013534  08013534  00023534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013538  08013538  00023538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0801353c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c18  200000fc  08013638  000300fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002d14  08013638  00032d14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024255  00000000  00000000  0003016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006729  00000000  00000000  000543c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e8  00000000  00000000  0005aaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013aa  00000000  00000000  0005c4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e4b8  00000000  00000000  0005d882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b995  00000000  00000000  0007bd3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000927ef  00000000  00000000  000a76cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a48  00000000  00000000  00139ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00140908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08011a10 	.word	0x08011a10

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08011a10 	.word	0x08011a10

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	603a      	str	r2, [r7, #0]
 80004de:	80fb      	strh	r3, [r7, #6]
 80004e0:	460b      	mov	r3, r1
 80004e2:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 80004e4:	2300      	movs	r3, #0
 80004e6:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80004e8:	2200      	movs	r2, #0
 80004ea:	6839      	ldr	r1, [r7, #0]
 80004ec:	481c      	ldr	r0, [pc, #112]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 80004ee:	f000 f8f9 	bl	80006e4 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 80004f4:	4a1b      	ldr	r2, [pc, #108]	; (8000564 <AUDIO_OUT_Init+0x90>)
 80004f6:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80004f8:	4819      	ldr	r0, [pc, #100]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 80004fa:	f007 f855 	bl	80075a8 <HAL_I2S_GetState>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d103      	bne.n	800050c <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8000504:	2100      	movs	r1, #0
 8000506:	4816      	ldr	r0, [pc, #88]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 8000508:	f000 f94a 	bl	80007a0 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 800050c:	6838      	ldr	r0, [r7, #0]
 800050e:	f000 fa0f 	bl	8000930 <I2S3_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 8000518:	2301      	movs	r3, #1
 800051a:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d10e      	bne.n	8000540 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <AUDIO_OUT_Init+0x94>)
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	2094      	movs	r0, #148	; 0x94
 8000528:	4798      	blx	r3
 800052a:	4603      	mov	r3, r0
 800052c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000530:	2be0      	cmp	r3, #224	; 0xe0
 8000532:	d103      	bne.n	800053c <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <AUDIO_OUT_Init+0x98>)
 8000536:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <AUDIO_OUT_Init+0x94>)
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	e001      	b.n	8000540 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 800053c:	2301      	movs	r3, #1
 800053e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d107      	bne.n	8000556 <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <AUDIO_OUT_Init+0x98>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	681c      	ldr	r4, [r3, #0]
 800054c:	797a      	ldrb	r2, [r7, #5]
 800054e:	88f9      	ldrh	r1, [r7, #6]
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	2094      	movs	r0, #148	; 0x94
 8000554:	47a0      	blx	r4
  }
  
  return ret;
 8000556:	7bfb      	ldrb	r3, [r7, #15]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	2000011c 	.word	0x2000011c
 8000564:	40003c00 	.word	0x40003c00
 8000568:	20000004 	.word	0x20000004
 800056c:	20000118 	.word	0x20000118

08000570 <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <AUDIO_OUT_Play+0x4c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	b292      	uxth	r2, r2
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	2094      	movs	r0, #148	; 0x94
 8000588:	4798      	blx	r3
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8000590:	2301      	movs	r3, #1
 8000592:	e00f      	b.n	80005b4 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800059a:	d203      	bcs.n	80005a4 <AUDIO_OUT_Play+0x34>
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	085b      	lsrs	r3, r3, #1
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	e001      	b.n	80005a8 <AUDIO_OUT_Play+0x38>
 80005a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a8:	461a      	mov	r2, r3
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <AUDIO_OUT_Play+0x50>)
 80005ae:	f006 fc79 	bl	8006ea4 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005b2:	2300      	movs	r3, #0
  }
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000118 	.word	0x20000118
 80005c0:	2000011c 	.word	0x2000011c

080005c4 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <AUDIO_OUT_Pause+0x24>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	691b      	ldr	r3, [r3, #16]
 80005ce:	2094      	movs	r0, #148	; 0x94
 80005d0:	4798      	blx	r3
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 80005d8:	2301      	movs	r3, #1
 80005da:	e003      	b.n	80005e4 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <AUDIO_OUT_Pause+0x28>)
 80005de:	f006 fd09 	bl	8006ff4 <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005e2:	2300      	movs	r3, #0
  }
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000118 	.word	0x20000118
 80005ec:	2000011c 	.word	0x2000011c

080005f0 <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <AUDIO_OUT_Resume+0x24>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	2094      	movs	r0, #148	; 0x94
 80005fc:	4798      	blx	r3
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	e003      	b.n	8000610 <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 8000608:	4803      	ldr	r0, [pc, #12]	; (8000618 <AUDIO_OUT_Resume+0x28>)
 800060a:	f006 fd55 	bl	80070b8 <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800060e:	2300      	movs	r3, #0
  }
}
 8000610:	4618      	mov	r0, r3
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000118 	.word	0x20000118
 8000618:	2000011c 	.word	0x2000011c

0800061c <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8000624:	480e      	ldr	r0, [pc, #56]	; (8000660 <AUDIO_OUT_Stop+0x44>)
 8000626:	f006 fddb 	bl	80071e0 <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <AUDIO_OUT_Stop+0x48>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	2094      	movs	r0, #148	; 0x94
 8000634:	4798      	blx	r3
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 800063c:	2301      	movs	r3, #1
 800063e:	e00b      	b.n	8000658 <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d107      	bne.n	8000656 <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(1);
 8000646:	2001      	movs	r0, #1
 8000648:	f002 fc06 	bl	8002e58 <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2110      	movs	r1, #16
 8000650:	4805      	ldr	r0, [pc, #20]	; (8000668 <AUDIO_OUT_Stop+0x4c>)
 8000652:	f003 fbff 	bl	8003e54 <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000656:	2300      	movs	r3, #0
  }
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	2000011c 	.word	0x2000011c
 8000664:	20000118 	.word	0x20000118
 8000668:	40020c00 	.word	0x40020c00

0800066c <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <AUDIO_OUT_SetVolume+0x2c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	6a1b      	ldr	r3, [r3, #32]
 800067c:	79fa      	ldrb	r2, [r7, #7]
 800067e:	4611      	mov	r1, r2
 8000680:	2094      	movs	r0, #148	; 0x94
 8000682:	4798      	blx	r3
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	e000      	b.n	8000690 <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800068e:	2300      	movs	r3, #0
  }
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000118 	.word	0x20000118

0800069c <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <HAL_I2S_TxCpltCallback+0x20>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d101      	bne.n	80006b2 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 80006ae:	f002 fb0f 	bl	8002cd0 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40003c00 	.word	0x40003c00

080006c0 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d101      	bne.n	80006d6 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 80006d2:	f002 fb11 	bl	8002cf8 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40003c00 	.word	0x40003c00

080006e4 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80006f6:	23ff      	movs	r3, #255	; 0xff
 80006f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  
  for(index = 0; index < 8; index++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000702:	e010      	b.n	8000726 <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 8000704:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000708:	4a22      	ldr	r2, [pc, #136]	; (8000794 <AUDIO_OUT_ClockConfig+0xb0>)
 800070a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	429a      	cmp	r2, r3
 8000712:	d103      	bne.n	800071c <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 8000714:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000718:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  for(index = 0; index < 8; index++)
 800071c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000720:	3301      	adds	r3, #1
 8000722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000726:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800072a:	2b07      	cmp	r3, #7
 800072c:	d9ea      	bls.n	8000704 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4618      	mov	r0, r3
 8000734:	f008 f89e 	bl	8008874 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000738:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800073c:	f003 0307 	and.w	r3, r3, #7
 8000740:	2b00      	cmp	r3, #0
 8000742:	d115      	bne.n	8000770 <AUDIO_OUT_ClockConfig+0x8c>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000744:	2301      	movs	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8000748:	2308      	movs	r3, #8
 800074a:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 800074c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <AUDIO_OUT_ClockConfig+0xb4>)
 8000752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000756:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000758:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800075c:	4a0f      	ldr	r2, [pc, #60]	; (800079c <AUDIO_OUT_ClockConfig+0xb8>)
 800075e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000762:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4618      	mov	r0, r3
 800076a:	f007 ff93 	bl	8008694 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 800076e:	e00d      	b.n	800078c <AUDIO_OUT_ClockConfig+0xa8>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000770:	2301      	movs	r3, #1
 8000772:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8000774:	2308      	movs	r3, #8
 8000776:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000778:	f44f 7381 	mov.w	r3, #258	; 0x102
 800077c:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 800077e:	2303      	movs	r3, #3
 8000780:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4618      	mov	r0, r3
 8000788:	f007 ff84 	bl	8008694 <HAL_RCCEx_PeriphCLKConfig>
}
 800078c:	bf00      	nop
 800078e:	3730      	adds	r7, #48	; 0x30
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	08011b90 	.word	0x08011b90
 8000798:	08011bb0 	.word	0x08011bb0
 800079c:	08011bd0 	.word	0x08011bd0

080007a0 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	4b56      	ldr	r3, [pc, #344]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	4a55      	ldr	r2, [pc, #340]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007b8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ba:	4b53      	ldr	r3, [pc, #332]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	4b4f      	ldr	r3, [pc, #316]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a4e      	ldr	r2, [pc, #312]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b4c      	ldr	r3, [pc, #304]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b48      	ldr	r3, [pc, #288]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a47      	ldr	r2, [pc, #284]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b45      	ldr	r3, [pc, #276]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80007fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 800080c:	2302      	movs	r3, #2
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8000810:	2306      	movs	r3, #6
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	483c      	ldr	r0, [pc, #240]	; (800090c <AUDIO_OUT_MspInit+0x16c>)
 800081c:	f003 f8b2 	bl	8003984 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8000820:	2310      	movs	r3, #16
 8000822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4839      	ldr	r0, [pc, #228]	; (8000910 <AUDIO_OUT_MspInit+0x170>)
 800082c:	f003 f8aa 	bl	8003984 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	4b34      	ldr	r3, [pc, #208]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000838:	4a33      	ldr	r2, [pc, #204]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	6313      	str	r3, [r2, #48]	; 0x30
 8000840:	4b31      	ldr	r3, [pc, #196]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	482d      	ldr	r0, [pc, #180]	; (800090c <AUDIO_OUT_MspInit+0x16c>)
 8000858:	f003 f894 	bl	8003984 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	4b29      	ldr	r3, [pc, #164]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	4a28      	ldr	r2, [pc, #160]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 8000866:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800086a:	6313      	str	r3, [r2, #48]	; 0x30
 800086c:	4b26      	ldr	r3, [pc, #152]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a25      	ldr	r2, [pc, #148]	; (8000914 <AUDIO_OUT_MspInit+0x174>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d136      	bne.n	80008f0 <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8000882:	4b25      	ldr	r3, [pc, #148]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000888:	4b23      	ldr	r3, [pc, #140]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 800088a:	2240      	movs	r2, #64	; 0x40
 800088c:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800088e:	4b22      	ldr	r3, [pc, #136]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8000894:	4b20      	ldr	r3, [pc, #128]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 8000896:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800089a:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 800089e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008a2:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008aa:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008b8:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008bc:	2204      	movs	r2, #4
 80008be:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008c2:	2203      	movs	r2, #3
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008d4:	4a11      	ldr	r2, [pc, #68]	; (800091c <AUDIO_OUT_MspInit+0x17c>)
 80008d6:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008dc:	639a      	str	r2, [r3, #56]	; 0x38
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008e6:	f002 fc9b 	bl	8003220 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 80008ea:	480b      	ldr	r0, [pc, #44]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008ec:	f002 fbea 	bl	80030c4 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	210e      	movs	r1, #14
 80008f4:	202f      	movs	r0, #47	; 0x2f
 80008f6:	f002 fbae 	bl	8003056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80008fa:	202f      	movs	r0, #47	; 0x2f
 80008fc:	f002 fbc7 	bl	800308e <HAL_NVIC_EnableIRQ>
}
 8000900:	bf00      	nop
 8000902:	3730      	adds	r7, #48	; 0x30
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40020800 	.word	0x40020800
 8000910:	40020000 	.word	0x40020000
 8000914:	40003c00 	.word	0x40003c00
 8000918:	20000164 	.word	0x20000164
 800091c:	400260b8 	.word	0x400260b8

08000920 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <I2S3_Init+0x68>)
 800093a:	4a18      	ldr	r2, [pc, #96]	; (800099c <I2S3_Init+0x6c>)
 800093c:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <I2S3_Init+0x68>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	69da      	ldr	r2, [r3, #28]
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <I2S3_Init+0x68>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800094c:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <I2S3_Init+0x68>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <I2S3_Init+0x68>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <I2S3_Init+0x68>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <I2S3_Init+0x68>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <I2S3_Init+0x68>)
 8000968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800096c:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <I2S3_Init+0x68>)
 8000970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000974:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <I2S3_Init+0x68>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 800097c:	4806      	ldr	r0, [pc, #24]	; (8000998 <I2S3_Init+0x68>)
 800097e:	f006 f951 	bl	8006c24 <HAL_I2S_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 8000988:	2301      	movs	r3, #1
 800098a:	e000      	b.n	800098e <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 800098c:	2300      	movs	r3, #0
  }
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2000011c 	.word	0x2000011c
 800099c:	40003c00 	.word	0x40003c00

080009a0 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_I2S_ErrorCallback+0x20>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d101      	bne.n	80009b6 <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 80009b2:	f7ff ffb5 	bl	8000920 <AUDIO_OUT_Error_CallBack>
  }
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40003c00 	.word	0x40003c00

080009c4 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80009c8:	4814      	ldr	r0, [pc, #80]	; (8000a1c <I2Cx_Init+0x58>)
 80009ca:	f005 fd3f 	bl	800644c <HAL_I2C_GetState>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d121      	bne.n	8000a18 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <I2Cx_Init+0x58>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <I2Cx_Init+0x5c>)
 80009d8:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <I2Cx_Init+0x58>)
 80009dc:	2243      	movs	r2, #67	; 0x43
 80009de:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <I2Cx_Init+0x58>)
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <I2Cx_Init+0x60>)
 80009e4:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <I2Cx_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <I2Cx_Init+0x58>)
 80009ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009f2:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <I2Cx_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <I2Cx_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <I2Cx_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <I2Cx_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <I2Cx_Init+0x58>)
 8000a0e:	f000 f86b 	bl	8000ae8 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000a12:	4802      	ldr	r0, [pc, #8]	; (8000a1c <I2Cx_Init+0x58>)
 8000a14:	f004 fe5a 	bl	80056cc <HAL_I2C_Init>
  }
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200001c4 	.word	0x200001c4
 8000a20:	40005400 	.word	0x40005400
 8000a24:	000186a0 	.word	0x000186a0

08000a28 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af04      	add	r7, sp, #16
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80fb      	strh	r3, [r7, #6]
 8000a32:	460b      	mov	r3, r1
 8000a34:	717b      	strb	r3, [r7, #5]
 8000a36:	4613      	mov	r3, r2
 8000a38:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000a3e:	797b      	ldrb	r3, [r7, #5]
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <I2Cx_WriteData+0x48>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	88f9      	ldrh	r1, [r7, #6]
 8000a48:	9302      	str	r3, [sp, #8]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2301      	movs	r3, #1
 8000a54:	4807      	ldr	r0, [pc, #28]	; (8000a74 <I2Cx_WriteData+0x4c>)
 8000a56:	f005 f8ab 	bl	8005bb0 <HAL_I2C_Mem_Write>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000a64:	f000 f834 	bl	8000ad0 <I2Cx_Error>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000000 	.word	0x20000000
 8000a74:	200001c4 	.word	0x200001c4

08000a78 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af04      	add	r7, sp, #16
 8000a7e:	4603      	mov	r3, r0
 8000a80:	460a      	mov	r2, r1
 8000a82:	80fb      	strh	r3, [r7, #6]
 8000a84:	4613      	mov	r3, r2
 8000a86:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000a90:	797b      	ldrb	r3, [r7, #5]
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <I2Cx_ReadData+0x50>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	88f9      	ldrh	r1, [r7, #6]
 8000a9a:	9302      	str	r3, [sp, #8]
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	f107 030e 	add.w	r3, r7, #14
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	4808      	ldr	r0, [pc, #32]	; (8000acc <I2Cx_ReadData+0x54>)
 8000aaa:	f005 f97b 	bl	8005da4 <HAL_I2C_Mem_Read>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000ab8:	f000 f80a 	bl	8000ad0 <I2Cx_Error>
  }
  return value;
 8000abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	200001c4 	.word	0x200001c4

08000ad0 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000ad4:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <I2Cx_Error+0x14>)
 8000ad6:	f004 ff3d 	bl	8005954 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000ada:	f7ff ff73 	bl	80009c4 <I2Cx_Init>
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200001c4 	.word	0x200001c4

08000ae8 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a24      	ldr	r2, [pc, #144]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000afa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000b28:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000b2e:	2312      	movs	r3, #18
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000b36:	2302      	movs	r3, #2
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4812      	ldr	r0, [pc, #72]	; (8000b90 <I2Cx_MspInit+0xa8>)
 8000b46:	f002 ff1d 	bl	8003984 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b4c:	6a1b      	ldr	r3, [r3, #32]
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b54:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b58:	6a1b      	ldr	r3, [r3, #32]
 8000b5a:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b60:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	210f      	movs	r1, #15
 8000b66:	201f      	movs	r0, #31
 8000b68:	f002 fa75 	bl	8003056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000b6c:	201f      	movs	r0, #31
 8000b6e:	f002 fa8e 	bl	800308e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	210f      	movs	r1, #15
 8000b76:	2020      	movs	r0, #32
 8000b78:	f002 fa6d 	bl	8003056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000b7c:	2020      	movs	r0, #32
 8000b7e:	f002 fa86 	bl	800308e <HAL_NVIC_EnableIRQ>
}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020400 	.word	0x40020400

08000b94 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <AUDIO_IO_Init+0x68>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a16      	ldr	r2, [pc, #88]	; (8000bfc <AUDIO_IO_Init+0x68>)
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <AUDIO_IO_Init+0x68>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000bb6:	2310      	movs	r3, #16
 8000bb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <AUDIO_IO_Init+0x6c>)
 8000bcc:	f002 feda 	bl	8003984 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000bd0:	f7ff fef8 	bl	80009c4 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <AUDIO_IO_Init+0x6c>)
 8000bda:	f003 f93b 	bl	8003e54 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bde:	2005      	movs	r0, #5
 8000be0:	f002 f93a 	bl	8002e58 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000be4:	2201      	movs	r2, #1
 8000be6:	2110      	movs	r1, #16
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <AUDIO_IO_Init+0x6c>)
 8000bea:	f003 f933 	bl	8003e54 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bee:	2005      	movs	r0, #5
 8000bf0:	f002 f932 	bl	8002e58 <HAL_Delay>
}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020c00 	.word	0x40020c00

08000c04 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	71bb      	strb	r3, [r7, #6]
 8000c20:	4613      	mov	r3, r2
 8000c22:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	797a      	ldrb	r2, [r7, #5]
 8000c2a:	79b9      	ldrb	r1, [r7, #6]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fefb 	bl	8000a28 <I2Cx_WriteData>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	460a      	mov	r2, r1
 8000c44:	71fb      	strb	r3, [r7, #7]
 8000c46:	4613      	mov	r3, r2
 8000c48:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	79ba      	ldrb	r2, [r7, #6]
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ff10 	bl	8000a78 <I2Cx_ReadData>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <AUDIO_StorageParse>:

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b0d6      	sub	sp, #344	; 0x158
 8000c68:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USBHPath);
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	4945      	ldr	r1, [pc, #276]	; (8000d88 <AUDIO_StorageParse+0x124>)
 8000c74:	4618      	mov	r0, r3
 8000c76:	f010 f817 	bl	8010ca8 <f_opendir>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FileList.ptr = 0;
 8000c80:	4b42      	ldr	r3, [pc, #264]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8

  if(res == FR_OK)
 8000c88:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d16b      	bne.n	8000d68 <AUDIO_StorageParse+0x104>
  {
    while(Appli_state == APPLICATION_READY)
 8000c90:	e066      	b.n	8000d60 <AUDIO_StorageParse+0xfc>
    {
      res = f_readdir(&dir, &fno);
 8000c92:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f010 f89d 	bl	8010dda <f_readdir>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if(res != FR_OK || fno.fname[0] == 0)
 8000ca6:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d15c      	bne.n	8000d68 <AUDIO_StorageParse+0x104>
 8000cae:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000cb2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cb6:	7d9b      	ldrb	r3, [r3, #22]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d055      	beq.n	8000d68 <AUDIO_StorageParse+0x104>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000cbc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000cc0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cc4:	7d9b      	ldrb	r3, [r3, #22]
 8000cc6:	2b2e      	cmp	r3, #46	; 0x2e
 8000cc8:	d100      	bne.n	8000ccc <AUDIO_StorageParse+0x68>
      {
        continue;
 8000cca:	e049      	b.n	8000d60 <AUDIO_StorageParse+0xfc>
      }

      fn = fno.fname;
 8000ccc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cd0:	3316      	adds	r3, #22
 8000cd2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000cd6:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000cd8:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000cdc:	2b17      	cmp	r3, #23
 8000cde:	d83f      	bhi.n	8000d60 <AUDIO_StorageParse+0xfc>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000ce0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000ce4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ce8:	7a1b      	ldrb	r3, [r3, #8]
 8000cea:	f003 0310 	and.w	r3, r3, #16
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d136      	bne.n	8000d60 <AUDIO_StorageParse+0xfc>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000cf2:	4927      	ldr	r1, [pc, #156]	; (8000d90 <AUDIO_StorageParse+0x12c>)
 8000cf4:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000cf8:	f010 fddd 	bl	80118b6 <strstr>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d107      	bne.n	8000d12 <AUDIO_StorageParse+0xae>
 8000d02:	4924      	ldr	r1, [pc, #144]	; (8000d94 <AUDIO_StorageParse+0x130>)
 8000d04:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000d08:	f010 fdd5 	bl	80118b6 <strstr>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d026      	beq.n	8000d60 <AUDIO_StorageParse+0xfc>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d14:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	4413      	add	r3, r2
 8000d24:	4a19      	ldr	r2, [pc, #100]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d26:	4413      	add	r3, r2
 8000d28:	3301      	adds	r3, #1
 8000d2a:	2228      	movs	r2, #40	; 0x28
 8000d2c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8000d30:	4618      	mov	r0, r3
 8000d32:	f010 fdad 	bl	8011890 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d38:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4913      	ldr	r1, [pc, #76]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	4413      	add	r3, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d52:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d56:	3301      	adds	r3, #1
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d5c:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
    while(Appli_state == APPLICATION_READY)
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <AUDIO_StorageParse+0x134>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d094      	beq.n	8000c92 <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d6a:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	; 0x3d8
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <AUDIO_StorageParse+0x138>)
 8000d70:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	4618      	mov	r0, r3
 8000d76:	f010 f80a 	bl	8010d8e <f_closedir>
  return res;
 8000d7a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20002080 	.word	0x20002080
 8000d8c:	20001840 	.word	0x20001840
 8000d90:	08011a28 	.word	0x08011a28
 8000d94:	08011a2c 	.word	0x08011a2c
 8000d98:	200028c4 	.word	0x200028c4
 8000d9c:	2000021a 	.word	0x2000021a

08000da0 <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK) return NumObs;
 8000da4:	f7ff ff5e 	bl	8000c64 <AUDIO_StorageParse>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d102      	bne.n	8000db4 <AUDIO_GetWavObjectNumber+0x14>
 8000dae:	4b02      	ldr	r3, [pc, #8]	; (8000db8 <AUDIO_GetWavObjectNumber+0x18>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	e7ff      	b.n	8000db4 <AUDIO_GetWavObjectNumber+0x14>
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	2000021a 	.word	0x2000021a

08000dbc <Mount_USB>:

void Mount_USB (void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4905      	ldr	r1, [pc, #20]	; (8000dd8 <Mount_USB+0x1c>)
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <Mount_USB+0x20>)
 8000dc6:	f00f f97b 	bl	80100c0 <f_mount>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <Mount_USB+0x24>)
 8000dd0:	701a      	strb	r2, [r3, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20002080 	.word	0x20002080
 8000ddc:	20002084 	.word	0x20002084
 8000de0:	20000218 	.word	0x20000218

08000de4 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	4603      	mov	r3, r0
 8000dee:	81fb      	strh	r3, [r7, #14]
 8000df0:	460b      	mov	r3, r1
 8000df2:	81bb      	strh	r3, [r7, #12]
 8000df4:	4613      	mov	r3, r2
 8000df6:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000dfc:	f7ff feca 	bl	8000b94 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000e00:	89fb      	ldrh	r3, [r7, #14]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2201      	movs	r2, #1
 8000e06:	2102      	movs	r1, #2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 fb01 	bl	8001410 <CODEC_IO_Write>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	461a      	mov	r2, r3
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	4413      	add	r3, r2
 8000e16:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000e18:	89bb      	ldrh	r3, [r7, #12]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	d81b      	bhi.n	8000e58 <cs43l22_Init+0x74>
 8000e20:	a201      	add	r2, pc, #4	; (adr r2, 8000e28 <cs43l22_Init+0x44>)
 8000e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e26:	bf00      	nop
 8000e28:	08000e39 	.word	0x08000e39
 8000e2c:	08000e41 	.word	0x08000e41
 8000e30:	08000e49 	.word	0x08000e49
 8000e34:	08000e51 	.word	0x08000e51
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000e38:	4b5b      	ldr	r3, [pc, #364]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e3a:	22fa      	movs	r2, #250	; 0xfa
 8000e3c:	701a      	strb	r2, [r3, #0]
    break;
 8000e3e:	e00f      	b.n	8000e60 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000e40:	4b59      	ldr	r3, [pc, #356]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e42:	22af      	movs	r2, #175	; 0xaf
 8000e44:	701a      	strb	r2, [r3, #0]
    break;
 8000e46:	e00b      	b.n	8000e60 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000e48:	4b57      	ldr	r3, [pc, #348]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e4a:	22aa      	movs	r2, #170	; 0xaa
 8000e4c:	701a      	strb	r2, [r3, #0]
    break;
 8000e4e:	e007      	b.n	8000e60 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000e50:	4b55      	ldr	r3, [pc, #340]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e52:	2205      	movs	r2, #5
 8000e54:	701a      	strb	r2, [r3, #0]
    break;    
 8000e56:	e003      	b.n	8000e60 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000e58:	4b53      	ldr	r3, [pc, #332]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e5a:	2205      	movs	r2, #5
 8000e5c:	701a      	strb	r2, [r3, #0]
    break;    
 8000e5e:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000e60:	89fb      	ldrh	r3, [r7, #14]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	4a50      	ldr	r2, [pc, #320]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e66:	7812      	ldrb	r2, [r2, #0]
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 facf 	bl	8001410 <CODEC_IO_Write>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	4413      	add	r3, r2
 8000e7a:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000e7c:	89fb      	ldrh	r3, [r7, #14]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2281      	movs	r2, #129	; 0x81
 8000e82:	2105      	movs	r1, #5
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 fac3 	bl	8001410 <CODEC_IO_Write>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	4413      	add	r3, r2
 8000e92:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000e94:	89fb      	ldrh	r3, [r7, #14]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2204      	movs	r2, #4
 8000e9a:	2106      	movs	r1, #6
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fab7 	bl	8001410 <CODEC_IO_Write>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000eac:	7afa      	ldrb	r2, [r7, #11]
 8000eae:	89fb      	ldrh	r3, [r7, #14]
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f964 	bl	8001180 <cs43l22_SetVolume>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000ec0:	89bb      	ldrh	r3, [r7, #12]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d023      	beq.n	8000f0e <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000ec6:	89fb      	ldrh	r3, [r7, #14]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2206      	movs	r2, #6
 8000ecc:	210f      	movs	r1, #15
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fa9e 	bl	8001410 <CODEC_IO_Write>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	4413      	add	r3, r2
 8000edc:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000ede:	89fb      	ldrh	r3, [r7, #14]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2124      	movs	r1, #36	; 0x24
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fa92 	bl	8001410 <CODEC_IO_Write>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000ef6:	89fb      	ldrh	r3, [r7, #14]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2200      	movs	r2, #0
 8000efc:	2125      	movs	r1, #37	; 0x25
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fa86 	bl	8001410 <CODEC_IO_Write>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000f0e:	89fb      	ldrh	r3, [r7, #14]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2200      	movs	r2, #0
 8000f14:	210a      	movs	r1, #10
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fa7a 	bl	8001410 <CODEC_IO_Write>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	4413      	add	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000f26:	89fb      	ldrh	r3, [r7, #14]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	210e      	movs	r1, #14
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fa6e 	bl	8001410 <CODEC_IO_Write>
 8000f34:	4603      	mov	r3, r0
 8000f36:	461a      	mov	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000f3e:	89fb      	ldrh	r3, [r7, #14]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2200      	movs	r2, #0
 8000f44:	2127      	movs	r1, #39	; 0x27
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fa62 	bl	8001410 <CODEC_IO_Write>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	4413      	add	r3, r2
 8000f54:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	211f      	movs	r1, #31
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fa56 	bl	8001410 <CODEC_IO_Write>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000f6e:	89fb      	ldrh	r3, [r7, #14]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	220a      	movs	r2, #10
 8000f74:	211a      	movs	r1, #26
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fa4a 	bl	8001410 <CODEC_IO_Write>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	4413      	add	r3, r2
 8000f84:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000f86:	89fb      	ldrh	r3, [r7, #14]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	220a      	movs	r2, #10
 8000f8c:	211b      	movs	r1, #27
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fa3e 	bl	8001410 <CODEC_IO_Write>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000f9e:	697b      	ldr	r3, [r7, #20]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	2000021c 	.word	0x2000021c

08000fac <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000fb0:	f7ff fe28 	bl	8000c04 <AUDIO_IO_DeInit>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000fc2:	f7ff fde7 	bl	8000b94 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2101      	movs	r1, #1
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fe34 	bl	8000c3a <AUDIO_IO_Read>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	f023 0307 	bic.w	r3, r3, #7
 8000fdc:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	80fb      	strh	r3, [r7, #6]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <cs43l22_Play+0x70>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d123      	bne.n	800104c <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2206      	movs	r2, #6
 800100a:	210e      	movs	r1, #14
 800100c:	4618      	mov	r0, r3
 800100e:	f000 f9ff 	bl	8001410 <CODEC_IO_Write>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4413      	add	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f919 	bl	8001258 <cs43l22_SetMute>
 8001026:	4602      	mov	r2, r0
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	229e      	movs	r2, #158	; 0x9e
 8001034:	2102      	movs	r1, #2
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f9ea 	bl	8001410 <CODEC_IO_Write>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <cs43l22_Play+0x70>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 800104c:	68fb      	ldr	r3, [r7, #12]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000034 	.word	0x20000034

0800105c <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	2101      	movs	r1, #1
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f8f2 	bl	8001258 <cs43l22_SetMute>
 8001074:	4602      	mov	r2, r0
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4413      	add	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2201      	movs	r2, #1
 8001082:	2102      	movs	r1, #2
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f9c3 	bl	8001410 <CODEC_IO_Write>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4413      	add	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001094:	68fb      	ldr	r3, [r7, #12]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f8ce 	bl	8001258 <cs43l22_SetMute>
 80010bc:	4602      	mov	r2, r0
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4413      	add	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	e002      	b.n	80010d0 <cs43l22_Resume+0x30>
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3301      	adds	r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2bfe      	cmp	r3, #254	; 0xfe
 80010d4:	d9f9      	bls.n	80010ca <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <cs43l22_Resume+0x74>)
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	2104      	movs	r1, #4
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f994 	bl	8001410 <CODEC_IO_Write>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	229e      	movs	r2, #158	; 0x9e
 80010f8:	2102      	movs	r1, #2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f988 	bl	8001410 <CODEC_IO_Write>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000021c 	.word	0x2000021c

08001118 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	2101      	movs	r1, #1
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f893 	bl	8001258 <cs43l22_SetMute>
 8001132:	4602      	mov	r2, r0
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2204      	movs	r2, #4
 8001140:	210e      	movs	r1, #14
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f964 	bl	8001410 <CODEC_IO_Write>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	229f      	movs	r2, #159	; 0x9f
 8001158:	2102      	movs	r1, #2
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f958 	bl	8001410 <CODEC_IO_Write>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <cs43l22_Stop+0x64>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001170:	68fb      	ldr	r3, [r7, #12]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000034 	.word	0x20000034

08001180 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	460a      	mov	r2, r1
 800118a:	80fb      	strh	r3, [r7, #6]
 800118c:	4613      	mov	r3, r2
 800118e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001194:	797b      	ldrb	r3, [r7, #5]
 8001196:	2b64      	cmp	r3, #100	; 0x64
 8001198:	d80b      	bhi.n	80011b2 <cs43l22_SetVolume+0x32>
 800119a:	797a      	ldrb	r2, [r7, #5]
 800119c:	4613      	mov	r3, r2
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	1a9b      	subs	r3, r3, r2
 80011a2:	4a25      	ldr	r2, [pc, #148]	; (8001238 <cs43l22_SetVolume+0xb8>)
 80011a4:	fb82 1203 	smull	r1, r2, r2, r3
 80011a8:	1152      	asrs	r2, r2, #5
 80011aa:	17db      	asrs	r3, r3, #31
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	e000      	b.n	80011b4 <cs43l22_SetVolume+0x34>
 80011b2:	23ff      	movs	r3, #255	; 0xff
 80011b4:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80011b6:	7afb      	ldrb	r3, [r7, #11]
 80011b8:	2be6      	cmp	r3, #230	; 0xe6
 80011ba:	d91c      	bls.n	80011f6 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	b2d8      	uxtb	r0, r3
 80011c0:	7afb      	ldrb	r3, [r7, #11]
 80011c2:	3319      	adds	r3, #25
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	2120      	movs	r1, #32
 80011ca:	f000 f921 	bl	8001410 <CODEC_IO_Write>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4413      	add	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	b2d8      	uxtb	r0, r3
 80011dc:	7afb      	ldrb	r3, [r7, #11]
 80011de:	3319      	adds	r3, #25
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	2121      	movs	r1, #33	; 0x21
 80011e6:	f000 f913 	bl	8001410 <CODEC_IO_Write>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4413      	add	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e01b      	b.n	800122e <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	b2d8      	uxtb	r0, r3
 80011fa:	7afb      	ldrb	r3, [r7, #11]
 80011fc:	3319      	adds	r3, #25
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	461a      	mov	r2, r3
 8001202:	2120      	movs	r1, #32
 8001204:	f000 f904 	bl	8001410 <CODEC_IO_Write>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	b2d8      	uxtb	r0, r3
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	3319      	adds	r3, #25
 800121a:	b2db      	uxtb	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	2121      	movs	r1, #33	; 0x21
 8001220:	f000 f8f6 	bl	8001410 <CODEC_IO_Write>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	51eb851f 	.word	0x51eb851f

0800123c <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d124      	bne.n	80012b8 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	22ff      	movs	r2, #255	; 0xff
 8001274:	2104      	movs	r1, #4
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f8ca 	bl	8001410 <CODEC_IO_Write>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2201      	movs	r2, #1
 800128c:	2122      	movs	r1, #34	; 0x22
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f8be 	bl	8001410 <CODEC_IO_Write>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2201      	movs	r2, #1
 80012a4:	2123      	movs	r1, #35	; 0x23
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f8b2 	bl	8001410 <CODEC_IO_Write>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	e025      	b.n	8001304 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2200      	movs	r2, #0
 80012be:	2122      	movs	r1, #34	; 0x22
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f8a5 	bl	8001410 <CODEC_IO_Write>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2200      	movs	r2, #0
 80012d6:	2123      	movs	r1, #35	; 0x23
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f899 	bl	8001410 <CODEC_IO_Write>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4a08      	ldr	r2, [pc, #32]	; (8001310 <cs43l22_SetMute+0xb8>)
 80012ee:	7812      	ldrb	r2, [r2, #0]
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	2104      	movs	r1, #4
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 f88b 	bl	8001410 <CODEC_IO_Write>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4413      	add	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001304:	68fb      	ldr	r3, [r7, #12]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000021c 	.word	0x2000021c

08001314 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	460a      	mov	r2, r1
 800131e:	80fb      	strh	r3, [r7, #6]
 8001320:	4613      	mov	r3, r2
 8001322:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001328:	797b      	ldrb	r3, [r7, #5]
 800132a:	3b01      	subs	r3, #1
 800132c:	2b03      	cmp	r3, #3
 800132e:	d84b      	bhi.n	80013c8 <cs43l22_SetOutputMode+0xb4>
 8001330:	a201      	add	r2, pc, #4	; (adr r2, 8001338 <cs43l22_SetOutputMode+0x24>)
 8001332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001336:	bf00      	nop
 8001338:	08001349 	.word	0x08001349
 800133c:	08001369 	.word	0x08001369
 8001340:	08001389 	.word	0x08001389
 8001344:	080013a9 	.word	0x080013a9
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	22fa      	movs	r2, #250	; 0xfa
 800134e:	2104      	movs	r1, #4
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f85d 	bl	8001410 <CODEC_IO_Write>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4413      	add	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001360:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 8001362:	22fa      	movs	r2, #250	; 0xfa
 8001364:	701a      	strb	r2, [r3, #0]
      break;
 8001366:	e03f      	b.n	80013e8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	22af      	movs	r2, #175	; 0xaf
 800136e:	2104      	movs	r1, #4
 8001370:	4618      	mov	r0, r3
 8001372:	f000 f84d 	bl	8001410 <CODEC_IO_Write>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4413      	add	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 8001382:	22af      	movs	r2, #175	; 0xaf
 8001384:	701a      	strb	r2, [r3, #0]
      break;
 8001386:	e02f      	b.n	80013e8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	22aa      	movs	r2, #170	; 0xaa
 800138e:	2104      	movs	r1, #4
 8001390:	4618      	mov	r0, r3
 8001392:	f000 f83d 	bl	8001410 <CODEC_IO_Write>
 8001396:	4603      	mov	r3, r0
 8001398:	461a      	mov	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4413      	add	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 80013a2:	22aa      	movs	r2, #170	; 0xaa
 80013a4:	701a      	strb	r2, [r3, #0]
      break;
 80013a6:	e01f      	b.n	80013e8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2205      	movs	r2, #5
 80013ae:	2104      	movs	r1, #4
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f82d 	bl	8001410 <CODEC_IO_Write>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4413      	add	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 80013c2:	2205      	movs	r2, #5
 80013c4:	701a      	strb	r2, [r3, #0]
      break;    
 80013c6:	e00f      	b.n	80013e8 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2205      	movs	r2, #5
 80013ce:	2104      	movs	r1, #4
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f81d 	bl	8001410 <CODEC_IO_Write>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4413      	add	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 80013e2:	2205      	movs	r2, #5
 80013e4:	701a      	strb	r2, [r3, #0]
      break;
 80013e6:	bf00      	nop
  }  
  return counter;
 80013e8:	68fb      	ldr	r3, [r7, #12]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000021c 	.word	0x2000021c

080013f8 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	460b      	mov	r3, r1
 800141c:	71bb      	strb	r3, [r7, #6]
 800141e:	4613      	mov	r3, r2
 8001420:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001426:	797a      	ldrb	r2, [r7, #5]
 8001428:	79b9      	ldrb	r1, [r7, #6]
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fbf0 	bl	8000c12 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	b2db      	uxtb	r3, r3
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <display_cancion>:
	SSD1306_Puts("* CI:Silencio ", &Font_7x10, WHITE);
	SSD1306_UpdateScreen();
}

void display_cancion(int idx)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	switch(idx){
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b03      	cmp	r3, #3
 800144c:	f200 80a7 	bhi.w	800159e <display_cancion+0x15e>
 8001450:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <display_cancion+0x18>)
 8001452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001456:	bf00      	nop
 8001458:	08001469 	.word	0x08001469
 800145c:	080014bb 	.word	0x080014bb
 8001460:	0800150d 	.word	0x0800150d
 8001464:	0800155f 	.word	0x0800155f

	case 0:
		SSD1306_Clear();
 8001468:	f000 ffe9 	bl	800243e <SSD1306_Clear>
		SSD1306_GotoXY(30,0);
 800146c:	2100      	movs	r1, #0
 800146e:	201e      	movs	r0, #30
 8001470:	f000 ff2a 	bl	80022c8 <SSD1306_GotoXY>
		SSD1306_Puts("STATUS", &Font_11x18, WHITE);
 8001474:	2201      	movs	r2, #1
 8001476:	494c      	ldr	r1, [pc, #304]	; (80015a8 <display_cancion+0x168>)
 8001478:	484c      	ldr	r0, [pc, #304]	; (80015ac <display_cancion+0x16c>)
 800147a:	f000 ffbb 	bl	80023f4 <SSD1306_Puts>
		SSD1306_GotoXY(8,25);
 800147e:	2119      	movs	r1, #25
 8001480:	2008      	movs	r0, #8
 8001482:	f000 ff21 	bl	80022c8 <SSD1306_GotoXY>
		SSD1306_Puts("Reproduciendo...", &Font_7x10, WHITE);
 8001486:	2201      	movs	r2, #1
 8001488:	4949      	ldr	r1, [pc, #292]	; (80015b0 <display_cancion+0x170>)
 800148a:	484a      	ldr	r0, [pc, #296]	; (80015b4 <display_cancion+0x174>)
 800148c:	f000 ffb2 	bl	80023f4 <SSD1306_Puts>
		SSD1306_GotoXY(18,40);
 8001490:	2128      	movs	r1, #40	; 0x28
 8001492:	2012      	movs	r0, #18
 8001494:	f000 ff18 	bl	80022c8 <SSD1306_GotoXY>
		SSD1306_Puts("* CD:Musica ", &Font_7x10, WHITE);
 8001498:	2201      	movs	r2, #1
 800149a:	4945      	ldr	r1, [pc, #276]	; (80015b0 <display_cancion+0x170>)
 800149c:	4846      	ldr	r0, [pc, #280]	; (80015b8 <display_cancion+0x178>)
 800149e:	f000 ffa9 	bl	80023f4 <SSD1306_Puts>
		SSD1306_GotoXY(18,50);
 80014a2:	2132      	movs	r1, #50	; 0x32
 80014a4:	2012      	movs	r0, #18
 80014a6:	f000 ff0f 	bl	80022c8 <SSD1306_GotoXY>
		SSD1306_Puts("* CI:Silencio ", &Font_7x10, WHITE);
 80014aa:	2201      	movs	r2, #1
 80014ac:	4940      	ldr	r1, [pc, #256]	; (80015b0 <display_cancion+0x170>)
 80014ae:	4843      	ldr	r0, [pc, #268]	; (80015bc <display_cancion+0x17c>)
 80014b0:	f000 ffa0 	bl	80023f4 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80014b4:	f000 fe62 	bl	800217c <SSD1306_UpdateScreen>
		break;
 80014b8:	e071      	b.n	800159e <display_cancion+0x15e>


	case 1:
		SSD1306_Clear();
 80014ba:	f000 ffc0 	bl	800243e <SSD1306_Clear>
		SSD1306_GotoXY(30,0);
 80014be:	2100      	movs	r1, #0
 80014c0:	201e      	movs	r0, #30
 80014c2:	f000 ff01 	bl	80022c8 <SSD1306_GotoXY>
		SSD1306_Puts("STATUS", &Font_11x18, WHITE);
 80014c6:	2201      	movs	r2, #1
 80014c8:	4937      	ldr	r1, [pc, #220]	; (80015a8 <display_cancion+0x168>)
 80014ca:	4838      	ldr	r0, [pc, #224]	; (80015ac <display_cancion+0x16c>)
 80014cc:	f000 ff92 	bl	80023f4 <SSD1306_Puts>
		SSD1306_GotoXY(8,25);
 80014d0:	2119      	movs	r1, #25
 80014d2:	2008      	movs	r0, #8
 80014d4:	f000 fef8 	bl	80022c8 <SSD1306_GotoXY>
		SSD1306_Puts("Reproduciendo...", &Font_7x10, WHITE);
 80014d8:	2201      	movs	r2, #1
 80014da:	4935      	ldr	r1, [pc, #212]	; (80015b0 <display_cancion+0x170>)
 80014dc:	4835      	ldr	r0, [pc, #212]	; (80015b4 <display_cancion+0x174>)
 80014de:	f000 ff89 	bl	80023f4 <SSD1306_Puts>
		SSD1306_GotoXY(18,40);
 80014e2:	2128      	movs	r1, #40	; 0x28
 80014e4:	2012      	movs	r0, #18
 80014e6:	f000 feef 	bl	80022c8 <SSD1306_GotoXY>
		SSD1306_Puts("* CD:Electronica", &Font_7x10, WHITE);
 80014ea:	2201      	movs	r2, #1
 80014ec:	4930      	ldr	r1, [pc, #192]	; (80015b0 <display_cancion+0x170>)
 80014ee:	4834      	ldr	r0, [pc, #208]	; (80015c0 <display_cancion+0x180>)
 80014f0:	f000 ff80 	bl	80023f4 <SSD1306_Puts>
		SSD1306_GotoXY(18,50);
 80014f4:	2132      	movs	r1, #50	; 0x32
 80014f6:	2012      	movs	r0, #18
 80014f8:	f000 fee6 	bl	80022c8 <SSD1306_GotoXY>
		SSD1306_Puts("* CI:The Strokes", &Font_7x10, WHITE);
 80014fc:	2201      	movs	r2, #1
 80014fe:	492c      	ldr	r1, [pc, #176]	; (80015b0 <display_cancion+0x170>)
 8001500:	4830      	ldr	r0, [pc, #192]	; (80015c4 <display_cancion+0x184>)
 8001502:	f000 ff77 	bl	80023f4 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001506:	f000 fe39 	bl	800217c <SSD1306_UpdateScreen>
		break;
 800150a:	e048      	b.n	800159e <display_cancion+0x15e>

	case 2:
		SSD1306_Clear();
 800150c:	f000 ff97 	bl	800243e <SSD1306_Clear>
		SSD1306_GotoXY(30,0);
 8001510:	2100      	movs	r1, #0
 8001512:	201e      	movs	r0, #30
 8001514:	f000 fed8 	bl	80022c8 <SSD1306_GotoXY>
		SSD1306_Puts("STATUS", &Font_11x18, WHITE);
 8001518:	2201      	movs	r2, #1
 800151a:	4923      	ldr	r1, [pc, #140]	; (80015a8 <display_cancion+0x168>)
 800151c:	4823      	ldr	r0, [pc, #140]	; (80015ac <display_cancion+0x16c>)
 800151e:	f000 ff69 	bl	80023f4 <SSD1306_Puts>
		SSD1306_GotoXY(8,25);
 8001522:	2119      	movs	r1, #25
 8001524:	2008      	movs	r0, #8
 8001526:	f000 fecf 	bl	80022c8 <SSD1306_GotoXY>
		SSD1306_Puts("Reproduciendo...", &Font_7x10, WHITE);
 800152a:	2201      	movs	r2, #1
 800152c:	4920      	ldr	r1, [pc, #128]	; (80015b0 <display_cancion+0x170>)
 800152e:	4821      	ldr	r0, [pc, #132]	; (80015b4 <display_cancion+0x174>)
 8001530:	f000 ff60 	bl	80023f4 <SSD1306_Puts>
		SSD1306_GotoXY(18,40);
 8001534:	2128      	movs	r1, #40	; 0x28
 8001536:	2012      	movs	r0, #18
 8001538:	f000 fec6 	bl	80022c8 <SSD1306_GotoXY>
		SSD1306_Puts("* CD:Murmullo ", &Font_7x10, WHITE);
 800153c:	2201      	movs	r2, #1
 800153e:	491c      	ldr	r1, [pc, #112]	; (80015b0 <display_cancion+0x170>)
 8001540:	4821      	ldr	r0, [pc, #132]	; (80015c8 <display_cancion+0x188>)
 8001542:	f000 ff57 	bl	80023f4 <SSD1306_Puts>
		SSD1306_GotoXY(18,50);
 8001546:	2132      	movs	r1, #50	; 0x32
 8001548:	2012      	movs	r0, #18
 800154a:	f000 febd 	bl	80022c8 <SSD1306_GotoXY>
		SSD1306_Puts("* CI:Normal ", &Font_7x10, WHITE);
 800154e:	2201      	movs	r2, #1
 8001550:	4917      	ldr	r1, [pc, #92]	; (80015b0 <display_cancion+0x170>)
 8001552:	481e      	ldr	r0, [pc, #120]	; (80015cc <display_cancion+0x18c>)
 8001554:	f000 ff4e 	bl	80023f4 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001558:	f000 fe10 	bl	800217c <SSD1306_UpdateScreen>
		break;
 800155c:	e01f      	b.n	800159e <display_cancion+0x15e>



	case 3:
		SSD1306_Clear();
 800155e:	f000 ff6e 	bl	800243e <SSD1306_Clear>
		SSD1306_GotoXY(30,0);
 8001562:	2100      	movs	r1, #0
 8001564:	201e      	movs	r0, #30
 8001566:	f000 feaf 	bl	80022c8 <SSD1306_GotoXY>
		SSD1306_Puts("STATUS", &Font_11x18, WHITE);
 800156a:	2201      	movs	r2, #1
 800156c:	490e      	ldr	r1, [pc, #56]	; (80015a8 <display_cancion+0x168>)
 800156e:	480f      	ldr	r0, [pc, #60]	; (80015ac <display_cancion+0x16c>)
 8001570:	f000 ff40 	bl	80023f4 <SSD1306_Puts>
		SSD1306_GotoXY(8,25);
 8001574:	2119      	movs	r1, #25
 8001576:	2008      	movs	r0, #8
 8001578:	f000 fea6 	bl	80022c8 <SSD1306_GotoXY>
		SSD1306_Puts("Reproduciendo...", &Font_7x10, WHITE);
 800157c:	2201      	movs	r2, #1
 800157e:	490c      	ldr	r1, [pc, #48]	; (80015b0 <display_cancion+0x170>)
 8001580:	480c      	ldr	r0, [pc, #48]	; (80015b4 <display_cancion+0x174>)
 8001582:	f000 ff37 	bl	80023f4 <SSD1306_Puts>
		SSD1306_GotoXY(18,40);
 8001586:	2128      	movs	r1, #40	; 0x28
 8001588:	2012      	movs	r0, #18
 800158a:	f000 fe9d 	bl	80022c8 <SSD1306_GotoXY>
		SSD1306_Puts("* Cancion", &Font_7x10, WHITE);
 800158e:	2201      	movs	r2, #1
 8001590:	4907      	ldr	r1, [pc, #28]	; (80015b0 <display_cancion+0x170>)
 8001592:	480f      	ldr	r0, [pc, #60]	; (80015d0 <display_cancion+0x190>)
 8001594:	f000 ff2e 	bl	80023f4 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001598:	f000 fdf0 	bl	800217c <SSD1306_UpdateScreen>

	}

}
 800159c:	e7ff      	b.n	800159e <display_cancion+0x15e>
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000040 	.word	0x20000040
 80015ac:	08011ab4 	.word	0x08011ab4
 80015b0:	20000038 	.word	0x20000038
 80015b4:	08011abc 	.word	0x08011abc
 80015b8:	08011ad0 	.word	0x08011ad0
 80015bc:	08011ae0 	.word	0x08011ae0
 80015c0:	08011af0 	.word	0x08011af0
 80015c4:	08011b04 	.word	0x08011b04
 80015c8:	08011b18 	.word	0x08011b18
 80015cc:	08011b28 	.word	0x08011b28
 80015d0:	08011b38 	.word	0x08011b38

080015d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b1b      	ldr	r3, [pc, #108]	; (800164c <MX_DMA_Init+0x78>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a1a      	ldr	r2, [pc, #104]	; (800164c <MX_DMA_Init+0x78>)
 80015e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_DMA_Init+0x78>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	4b14      	ldr	r3, [pc, #80]	; (800164c <MX_DMA_Init+0x78>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a13      	ldr	r2, [pc, #76]	; (800164c <MX_DMA_Init+0x78>)
 8001600:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_DMA_Init+0x78>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	2010      	movs	r0, #16
 8001618:	f001 fd1d 	bl	8003056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800161c:	2010      	movs	r0, #16
 800161e:	f001 fd36 	bl	800308e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	203a      	movs	r0, #58	; 0x3a
 8001628:	f001 fd15 	bl	8003056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800162c:	203a      	movs	r0, #58	; 0x3a
 800162e:	f001 fd2e 	bl	800308e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2046      	movs	r0, #70	; 0x46
 8001638:	f001 fd0d 	bl	8003056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800163c:	2046      	movs	r0, #70	; 0x46
 800163e:	f001 fd26 	bl	800308e <HAL_NVIC_EnableIRQ>

}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800

08001650 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	4b59      	ldr	r3, [pc, #356]	; (80017d0 <MX_GPIO_Init+0x180>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <MX_GPIO_Init+0x180>)
 8001670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b56      	ldr	r3, [pc, #344]	; (80017d0 <MX_GPIO_Init+0x180>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b52      	ldr	r3, [pc, #328]	; (80017d0 <MX_GPIO_Init+0x180>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a51      	ldr	r2, [pc, #324]	; (80017d0 <MX_GPIO_Init+0x180>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b4f      	ldr	r3, [pc, #316]	; (80017d0 <MX_GPIO_Init+0x180>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	4b4b      	ldr	r3, [pc, #300]	; (80017d0 <MX_GPIO_Init+0x180>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a4a      	ldr	r2, [pc, #296]	; (80017d0 <MX_GPIO_Init+0x180>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b48      	ldr	r3, [pc, #288]	; (80017d0 <MX_GPIO_Init+0x180>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b44      	ldr	r3, [pc, #272]	; (80017d0 <MX_GPIO_Init+0x180>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a43      	ldr	r2, [pc, #268]	; (80017d0 <MX_GPIO_Init+0x180>)
 80016c4:	f043 0308 	orr.w	r3, r3, #8
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <MX_GPIO_Init+0x180>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4b3d      	ldr	r3, [pc, #244]	; (80017d0 <MX_GPIO_Init+0x180>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a3c      	ldr	r2, [pc, #240]	; (80017d0 <MX_GPIO_Init+0x180>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b3a      	ldr	r3, [pc, #232]	; (80017d0 <MX_GPIO_Init+0x180>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|PC1_Pin|PC3_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	210b      	movs	r1, #11
 80016f6:	4837      	ldr	r0, [pc, #220]	; (80017d4 <MX_GPIO_Init+0x184>)
 80016f8:	f002 fbac 	bl	8003e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA1_Pin|PA3_Pin|PA5_Pin|PA7_Pin, GPIO_PIN_SET);
 80016fc:	2201      	movs	r2, #1
 80016fe:	21aa      	movs	r1, #170	; 0xaa
 8001700:	4835      	ldr	r0, [pc, #212]	; (80017d8 <MX_GPIO_Init+0x188>)
 8001702:	f002 fba7 	bl	8003e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PC1_Pin|PC3_Pin;
 8001706:	230b      	movs	r3, #11
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	482d      	ldr	r0, [pc, #180]	; (80017d4 <MX_GPIO_Init+0x184>)
 800171e:	f002 f931 	bl	8003984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001722:	2301      	movs	r3, #1
 8001724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001726:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800172a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800172c:	2302      	movs	r3, #2
 800172e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	4828      	ldr	r0, [pc, #160]	; (80017d8 <MX_GPIO_Init+0x188>)
 8001738:	f002 f924 	bl	8003984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PA1_Pin|PA3_Pin|PA5_Pin|PA7_Pin;
 800173c:	23aa      	movs	r3, #170	; 0xaa
 800173e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001740:	2301      	movs	r3, #1
 8001742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	4619      	mov	r1, r3
 8001752:	4821      	ldr	r0, [pc, #132]	; (80017d8 <MX_GPIO_Init+0x188>)
 8001754:	f002 f916 	bl	8003984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PD9_Pin|PD11_Pin|PD13_Pin|PD15_Pin;
 8001758:	f44f 432a 	mov.w	r3, #43520	; 0xaa00
 800175c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800175e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001764:	2301      	movs	r3, #1
 8001766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	481b      	ldr	r0, [pc, #108]	; (80017dc <MX_GPIO_Init+0x18c>)
 8001770:	f002 f908 	bl	8003984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001774:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800177a:	2312      	movs	r3, #18
 800177c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800177e:	2301      	movs	r3, #1
 8001780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001786:	2304      	movs	r3, #4
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <MX_GPIO_Init+0x190>)
 8001792:	f002 f8f7 	bl	8003984 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	2006      	movs	r0, #6
 800179c:	f001 fc5b 	bl	8003056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017a0:	2006      	movs	r0, #6
 80017a2:	f001 fc74 	bl	800308e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	2017      	movs	r0, #23
 80017ac:	f001 fc53 	bl	8003056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017b0:	2017      	movs	r0, #23
 80017b2:	f001 fc6c 	bl	800308e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	2028      	movs	r0, #40	; 0x28
 80017bc:	f001 fc4b 	bl	8003056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017c0:	2028      	movs	r0, #40	; 0x28
 80017c2:	f001 fc64 	bl	800308e <HAL_NVIC_EnableIRQ>

}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	; 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40020000 	.word	0x40020000
 80017dc:	40020c00 	.word	0x40020c00
 80017e0:	40020400 	.word	0x40020400

080017e4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <MX_I2C3_Init+0x50>)
 80017ea:	4a13      	ldr	r2, [pc, #76]	; (8001838 <MX_I2C3_Init+0x54>)
 80017ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_I2C3_Init+0x50>)
 80017f0:	4a12      	ldr	r2, [pc, #72]	; (800183c <MX_I2C3_Init+0x58>)
 80017f2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <MX_I2C3_Init+0x50>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_I2C3_Init+0x50>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_I2C3_Init+0x50>)
 8001802:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001806:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <MX_I2C3_Init+0x50>)
 800180a:	2200      	movs	r2, #0
 800180c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_I2C3_Init+0x50>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <MX_I2C3_Init+0x50>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_I2C3_Init+0x50>)
 800181c:	2200      	movs	r2, #0
 800181e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <MX_I2C3_Init+0x50>)
 8001822:	f003 ff53 	bl	80056cc <HAL_I2C_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800182c:	f000 fba8 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000220 	.word	0x20000220
 8001838:	40005c00 	.word	0x40005c00
 800183c:	00061a80 	.word	0x00061a80

08001840 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a29      	ldr	r2, [pc, #164]	; (8001904 <HAL_I2C_MspInit+0xc4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d14b      	bne.n	80018fa <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b28      	ldr	r3, [pc, #160]	; (8001908 <HAL_I2C_MspInit+0xc8>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a27      	ldr	r2, [pc, #156]	; (8001908 <HAL_I2C_MspInit+0xc8>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b25      	ldr	r3, [pc, #148]	; (8001908 <HAL_I2C_MspInit+0xc8>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b21      	ldr	r3, [pc, #132]	; (8001908 <HAL_I2C_MspInit+0xc8>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a20      	ldr	r2, [pc, #128]	; (8001908 <HAL_I2C_MspInit+0xc8>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <HAL_I2C_MspInit+0xc8>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800189a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800189e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a0:	2312      	movs	r3, #18
 80018a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018ac:	2304      	movs	r3, #4
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4815      	ldr	r0, [pc, #84]	; (800190c <HAL_I2C_MspInit+0xcc>)
 80018b8:	f002 f864 	bl	8003984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c2:	2312      	movs	r3, #18
 80018c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ca:	2303      	movs	r3, #3
 80018cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018ce:	2304      	movs	r3, #4
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	480d      	ldr	r0, [pc, #52]	; (8001910 <HAL_I2C_MspInit+0xd0>)
 80018da:	f002 f853 	bl	8003984 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_I2C_MspInit+0xc8>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a08      	ldr	r2, [pc, #32]	; (8001908 <HAL_I2C_MspInit+0xc8>)
 80018e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_I2C_MspInit+0xc8>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80018fa:	bf00      	nop
 80018fc:	3728      	adds	r7, #40	; 0x28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40005c00 	.word	0x40005c00
 8001908:	40023800 	.word	0x40023800
 800190c:	40020800 	.word	0x40020800
 8001910:	40020000 	.word	0x40020000

08001914 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <HAL_I2C_MspDeInit+0x3c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d10f      	bne.n	8001946 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_I2C_MspDeInit+0x40>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <HAL_I2C_MspDeInit+0x40>)
 800192c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001930:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8001932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001936:	4808      	ldr	r0, [pc, #32]	; (8001958 <HAL_I2C_MspDeInit+0x44>)
 8001938:	f002 f9a8 	bl	8003c8c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 800193c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001940:	4806      	ldr	r0, [pc, #24]	; (800195c <HAL_I2C_MspDeInit+0x48>)
 8001942:	f002 f9a3 	bl	8003c8c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40005c00 	.word	0x40005c00
 8001954:	40023800 	.word	0x40023800
 8001958:	40020800 	.word	0x40020800
 800195c:	40020000 	.word	0x40020000

08001960 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <MX_I2S3_Init+0x54>)
 8001966:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <MX_I2S3_Init+0x58>)
 8001968:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <MX_I2S3_Init+0x54>)
 800196c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001970:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <MX_I2S3_Init+0x54>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <MX_I2S3_Init+0x54>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <MX_I2S3_Init+0x54>)
 8001980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001984:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <MX_I2S3_Init+0x54>)
 8001988:	f64a 4244 	movw	r2, #44100	; 0xac44
 800198c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_I2S3_Init+0x54>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <MX_I2S3_Init+0x54>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_I2S3_Init+0x54>)
 800199c:	2200      	movs	r2, #0
 800199e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80019a0:	4804      	ldr	r0, [pc, #16]	; (80019b4 <MX_I2S3_Init+0x54>)
 80019a2:	f005 f93f 	bl	8006c24 <HAL_I2S_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80019ac:	f000 fae8 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000274 	.word	0x20000274
 80019b8:	40003c00 	.word	0x40003c00

080019bc <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b090      	sub	sp, #64	; 0x40
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
 80019e4:	615a      	str	r2, [r3, #20]
  if(i2sHandle->Instance==SPI3)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a4f      	ldr	r2, [pc, #316]	; (8001b28 <HAL_I2S_MspInit+0x16c>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	f040 8097 	bne.w	8001b20 <HAL_I2S_MspInit+0x164>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80019f2:	2301      	movs	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80019f6:	23c8      	movs	r3, #200	; 0xc8
 80019f8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80019fa:	2305      	movs	r3, #5
 80019fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80019fe:	2302      	movs	r3, #2
 8001a00:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4618      	mov	r0, r3
 8001a08:	f006 fe44 	bl	8008694 <HAL_RCCEx_PeriphCLKConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8001a12:	f000 fab5 	bl	8001f80 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b44      	ldr	r3, [pc, #272]	; (8001b2c <HAL_I2S_MspInit+0x170>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	4a43      	ldr	r2, [pc, #268]	; (8001b2c <HAL_I2S_MspInit+0x170>)
 8001a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a24:	6413      	str	r3, [r2, #64]	; 0x40
 8001a26:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <HAL_I2S_MspInit+0x170>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <HAL_I2S_MspInit+0x170>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a3c      	ldr	r2, [pc, #240]	; (8001b2c <HAL_I2S_MspInit+0x170>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <HAL_I2S_MspInit+0x170>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	4b36      	ldr	r3, [pc, #216]	; (8001b2c <HAL_I2S_MspInit+0x170>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a35      	ldr	r2, [pc, #212]	; (8001b2c <HAL_I2S_MspInit+0x170>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <HAL_I2S_MspInit+0x170>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a6a:	2310      	movs	r3, #16
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a7a:	2306      	movs	r3, #6
 8001a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a82:	4619      	mov	r1, r3
 8001a84:	482a      	ldr	r0, [pc, #168]	; (8001b30 <HAL_I2S_MspInit+0x174>)
 8001a86:	f001 ff7d 	bl	8003984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001a8a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a9c:	2306      	movs	r3, #6
 8001a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4823      	ldr	r0, [pc, #140]	; (8001b34 <HAL_I2S_MspInit+0x178>)
 8001aa8:	f001 ff6c 	bl	8003984 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001aac:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001aae:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <HAL_I2S_MspInit+0x180>)
 8001ab0:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001ab2:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001aba:	2240      	movs	r2, #64	; 0x40
 8001abc:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001abe:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001ac6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aca:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001ace:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ad2:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001ad6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ada:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001adc:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ae2:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001ae6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001aea:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001aee:	2204      	movs	r2, #4
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001af4:	2203      	movs	r2, #3
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001b04:	480c      	ldr	r0, [pc, #48]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001b06:	f001 fadd 	bl	80030c4 <HAL_DMA_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_I2S_MspInit+0x158>
    {
      Error_Handler();
 8001b10:	f000 fa36 	bl	8001f80 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a08      	ldr	r2, [pc, #32]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001b18:	639a      	str	r2, [r3, #56]	; 0x38
 8001b1a:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001b20:	bf00      	nop
 8001b22:	3740      	adds	r7, #64	; 0x40
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40003c00 	.word	0x40003c00
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40020800 	.word	0x40020800
 8001b38:	200002bc 	.word	0x200002bc
 8001b3c:	40026088 	.word	0x40026088

08001b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b44:	f001 f916 	bl	8002d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b48:	f000 f858 	bl	8001bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b4c:	f7ff fd80 	bl	8001650 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b50:	f7ff fd40 	bl	80015d4 <MX_DMA_Init>
  MX_I2S3_Init();
 8001b54:	f7ff ff04 	bl	8001960 <MX_I2S3_Init>
  MX_FATFS_Init();
 8001b58:	f008 fe8c 	bl	800a874 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001b5c:	f00f fa9c 	bl	8011098 <MX_USB_HOST_Init>
  MX_USART1_UART_Init();
 8001b60:	f000 fe00 	bl	8002764 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8001b64:	f7ff fe3e 	bl	80017e4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8001b68:	f000 fa44 	bl	8001ff4 <SSD1306_Init>
  HAL_UART_Receive_IT(&huart1, &uart_rx_byte, 1);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	491e      	ldr	r1, [pc, #120]	; (8001be8 <main+0xa8>)
 8001b70:	481e      	ldr	r0, [pc, #120]	; (8001bec <main+0xac>)
 8001b72:	f006 ff6e 	bl	8008a52 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001b76:	f00f fab5 	bl	80110e4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

   	    if (Appli_state == APPLICATION_READY)
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <main+0xb0>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d1f9      	bne.n	8001b76 <main+0x36>
   	    {
   	    	Mount_USB();
 8001b82:	f7ff f91b 	bl	8000dbc <Mount_USB>
   	    	AUDIO_PLAYER_Start(idx);
 8001b86:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <main+0xb4>)
 8001b88:	f993 3000 	ldrsb.w	r3, [r3]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 ff00 	bl	8002994 <AUDIO_PLAYER_Start>
   	    	display_cancion(idx);
 8001b94:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <main+0xb4>)
 8001b96:	f993 3000 	ldrsb.w	r3, [r3]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fc50 	bl	8001440 <display_cancion>
   	    	Activar_Parlante(idS);
 8001ba0:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <main+0xb8>)
 8001ba2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 f9ef 	bl	8001f8c <Activar_Parlante>
   	    	while (1)
   	    	{
				if (Appli_state == APPLICATION_READY)
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <main+0xb0>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d1fb      	bne.n	8001bae <main+0x6e>
				{
					Mount_USB();
 8001bb6:	f7ff f901 	bl	8000dbc <Mount_USB>
					AUDIO_PLAYER_Start(idx);
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <main+0xb4>)
 8001bbc:	f993 3000 	ldrsb.w	r3, [r3]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 fee6 	bl	8002994 <AUDIO_PLAYER_Start>
					display_cancion(idx);
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <main+0xb4>)
 8001bca:	f993 3000 	ldrsb.w	r3, [r3]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fc36 	bl	8001440 <display_cancion>
					Activar_Parlante(idS);
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <main+0xb8>)
 8001bd6:	f993 3000 	ldrsb.w	r3, [r3]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 f9d5 	bl	8001f8c <Activar_Parlante>

					MainLoop();
 8001be2:	f000 f873 	bl	8001ccc <MainLoop>
				if (Appli_state == APPLICATION_READY)
 8001be6:	e7e2      	b.n	8001bae <main+0x6e>
 8001be8:	2000031c 	.word	0x2000031c
 8001bec:	20000730 	.word	0x20000730
 8001bf0:	200028c4 	.word	0x200028c4
 8001bf4:	20000322 	.word	0x20000322
 8001bf8:	20000323 	.word	0x20000323

08001bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b094      	sub	sp, #80	; 0x50
 8001c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c02:	f107 0320 	add.w	r3, r7, #32
 8001c06:	2230      	movs	r2, #48	; 0x30
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f00f fe38 	bl	8011880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c10:	f107 030c 	add.w	r3, r7, #12
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <SystemClock_Config+0xc8>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	4a26      	ldr	r2, [pc, #152]	; (8001cc4 <SystemClock_Config+0xc8>)
 8001c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c30:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <SystemClock_Config+0xc8>)
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <SystemClock_Config+0xcc>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a20      	ldr	r2, [pc, #128]	; (8001cc8 <SystemClock_Config+0xcc>)
 8001c46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <SystemClock_Config+0xcc>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c62:	2302      	movs	r3, #2
 8001c64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001c70:	23c0      	movs	r3, #192	; 0xc0
 8001c72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c74:	2304      	movs	r3, #4
 8001c76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001c78:	2308      	movs	r3, #8
 8001c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c7c:	f107 0320 	add.w	r3, r7, #32
 8001c80:	4618      	mov	r0, r3
 8001c82:	f006 f86f 	bl	8007d64 <HAL_RCC_OscConfig>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c8c:	f000 f978 	bl	8001f80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c90:	230f      	movs	r3, #15
 8001c92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c94:	2302      	movs	r3, #2
 8001c96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ca0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ca6:	f107 030c 	add.w	r3, r7, #12
 8001caa:	2103      	movs	r1, #3
 8001cac:	4618      	mov	r0, r3
 8001cae:	f006 fad1 	bl	8008254 <HAL_RCC_ClockConfig>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001cb8:	f000 f962 	bl	8001f80 <Error_Handler>
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	3750      	adds	r7, #80	; 0x50
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40007000 	.word	0x40007000

08001ccc <MainLoop>:

/* USER CODE BEGIN 4 */
void MainLoop(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
    while (1)
    {
        if (Appli_state != APPLICATION_READY)
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <MainLoop+0x30>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d10e      	bne.n	8001cf6 <MainLoop+0x2a>
            break;

        AUDIO_PLAYER_Process(TRUE, idx);
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <MainLoop+0x34>)
 8001cda:	f993 3000 	ldrsb.w	r3, [r3]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f000 feb6 	bl	8002a54 <AUDIO_PLAYER_Process>
        manejar_uart();
 8001ce8:	f000 f80c 	bl	8001d04 <manejar_uart>
        manejar_cambio_cancion();
 8001cec:	f000 f842 	bl	8001d74 <manejar_cambio_cancion>
        manejar_cambio_parlante();
 8001cf0:	f000 f89a 	bl	8001e28 <manejar_cambio_parlante>
        if (Appli_state != APPLICATION_READY)
 8001cf4:	e7ec      	b.n	8001cd0 <MainLoop+0x4>
            break;
 8001cf6:	bf00      	nop
    }
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	200028c4 	.word	0x200028c4
 8001d00:	20000322 	.word	0x20000322

08001d04 <manejar_uart>:

void manejar_uart(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
    if (uart_cmd_received)
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <manejar_uart+0x5c>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d021      	beq.n	8001d58 <manejar_uart+0x54>
    {
        uart_cmd_received = false;
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <manejar_uart+0x5c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]

        if (uart_rx_byte >= '0' && uart_rx_byte <= '9')
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <manejar_uart+0x60>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b2f      	cmp	r3, #47	; 0x2f
 8001d20:	d91a      	bls.n	8001d58 <manejar_uart+0x54>
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <manejar_uart+0x60>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b39      	cmp	r3, #57	; 0x39
 8001d28:	d816      	bhi.n	8001d58 <manejar_uart+0x54>
        {
            int nuevo_idx = uart_rx_byte - '0';
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <manejar_uart+0x60>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	3b30      	subs	r3, #48	; 0x30
 8001d30:	607b      	str	r3, [r7, #4]
            if (nuevo_idx < cantidad_wavs)
 8001d32:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <manejar_uart+0x64>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	da0c      	bge.n	8001d58 <manejar_uart+0x54>
            {
                idx = nuevo_idx;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	b25a      	sxtb	r2, r3
 8001d42:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <manejar_uart+0x68>)
 8001d44:	701a      	strb	r2, [r3, #0]
                AudioState = AUDIO_STATE_NEXT;
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <manejar_uart+0x6c>)
 8001d48:	2205      	movs	r2, #5
 8001d4a:	701a      	strb	r2, [r3, #0]
                display_cancion(idx);
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <manejar_uart+0x68>)
 8001d4e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fb74 	bl	8001440 <display_cancion>
            }
        }
    }
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	2000031d 	.word	0x2000031d
 8001d64:	2000031c 	.word	0x2000031c
 8001d68:	20000048 	.word	0x20000048
 8001d6c:	20000322 	.word	0x20000322
 8001d70:	2000183c 	.word	0x2000183c

08001d74 <manejar_cambio_cancion>:

void manejar_cambio_cancion(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
    if (next_song)
 8001d78:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <manejar_cambio_cancion+0xa0>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d022      	beq.n	8001dc6 <manejar_cambio_cancion+0x52>
    {
        AudioState = AUDIO_STATE_PAUSE;
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <manejar_cambio_cancion+0xa4>)
 8001d82:	220a      	movs	r2, #10
 8001d84:	701a      	strb	r2, [r3, #0]
        idx++;
 8001d86:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <manejar_cambio_cancion+0xa8>)
 8001d88:	f993 3000 	ldrsb.w	r3, [r3]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	b25a      	sxtb	r2, r3
 8001d94:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <manejar_cambio_cancion+0xa8>)
 8001d96:	701a      	strb	r2, [r3, #0]
        if (idx >= cantidad_wavs)
 8001d98:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <manejar_cambio_cancion+0xa8>)
 8001d9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <manejar_cambio_cancion+0xac>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	db02      	blt.n	8001dae <manejar_cambio_cancion+0x3a>
            idx = 0;
 8001da8:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <manejar_cambio_cancion+0xa8>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
        next_song = false;
 8001dae:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <manejar_cambio_cancion+0xa0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
        display_cancion(idx);
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <manejar_cambio_cancion+0xa8>)
 8001db6:	f993 3000 	ldrsb.w	r3, [r3]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fb40 	bl	8001440 <display_cancion>
        AudioState = AUDIO_STATE_NEXT;
 8001dc0:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <manejar_cambio_cancion+0xa4>)
 8001dc2:	2205      	movs	r2, #5
 8001dc4:	701a      	strb	r2, [r3, #0]
    }

    if (prev_song)
 8001dc6:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <manejar_cambio_cancion+0xb0>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d020      	beq.n	8001e10 <manejar_cambio_cancion+0x9c>
    {
        idx--;
 8001dce:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <manejar_cambio_cancion+0xa8>)
 8001dd0:	f993 3000 	ldrsb.w	r3, [r3]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	b25a      	sxtb	r2, r3
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <manejar_cambio_cancion+0xa8>)
 8001dde:	701a      	strb	r2, [r3, #0]
        if (idx < 0)
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <manejar_cambio_cancion+0xa8>)
 8001de2:	f993 3000 	ldrsb.w	r3, [r3]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	da06      	bge.n	8001df8 <manejar_cambio_cancion+0x84>
            idx = cantidad_wavs - 1;
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <manejar_cambio_cancion+0xac>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	b25a      	sxtb	r2, r3
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <manejar_cambio_cancion+0xa8>)
 8001df6:	701a      	strb	r2, [r3, #0]
        prev_song = false;
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <manejar_cambio_cancion+0xb0>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
        AudioState = AUDIO_STATE_PREVIOUS;
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <manejar_cambio_cancion+0xa4>)
 8001e00:	2206      	movs	r2, #6
 8001e02:	701a      	strb	r2, [r3, #0]
        display_cancion(idx);
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <manejar_cambio_cancion+0xa8>)
 8001e06:	f993 3000 	ldrsb.w	r3, [r3]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fb18 	bl	8001440 <display_cancion>
    }
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	2000031e 	.word	0x2000031e
 8001e18:	2000183c 	.word	0x2000183c
 8001e1c:	20000322 	.word	0x20000322
 8001e20:	20000048 	.word	0x20000048
 8001e24:	2000031f 	.word	0x2000031f

08001e28 <manejar_cambio_parlante>:

void manejar_cambio_parlante(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
    if (next_speaker)
 8001e2c:	4b28      	ldr	r3, [pc, #160]	; (8001ed0 <manejar_cambio_parlante+0xa8>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d023      	beq.n	8001e7c <manejar_cambio_parlante+0x54>
    {
        idS++;
 8001e34:	4b27      	ldr	r3, [pc, #156]	; (8001ed4 <manejar_cambio_parlante+0xac>)
 8001e36:	f993 3000 	ldrsb.w	r3, [r3]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	b25a      	sxtb	r2, r3
 8001e42:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <manejar_cambio_parlante+0xac>)
 8001e44:	701a      	strb	r2, [r3, #0]
        if (idS >= NUM_PARLANTES)
 8001e46:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <manejar_cambio_parlante+0xac>)
 8001e48:	f993 3000 	ldrsb.w	r3, [r3]
 8001e4c:	2b05      	cmp	r3, #5
 8001e4e:	dd02      	ble.n	8001e56 <manejar_cambio_parlante+0x2e>
            idS = 0;
 8001e50:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <manejar_cambio_parlante+0xac>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
        next_speaker = false;
 8001e56:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <manejar_cambio_parlante+0xa8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
        Activar_Parlante(idS);
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <manejar_cambio_parlante+0xac>)
 8001e5e:	f993 3000 	ldrsb.w	r3, [r3]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 f891 	bl	8001f8c <Activar_Parlante>
        display_cancion(idx);
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <manejar_cambio_parlante+0xb0>)
 8001e6c:	f993 3000 	ldrsb.w	r3, [r3]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fae5 	bl	8001440 <display_cancion>
        AudioState = AUDIO_STATE_PLAY;
 8001e76:	4b19      	ldr	r3, [pc, #100]	; (8001edc <manejar_cambio_parlante+0xb4>)
 8001e78:	2203      	movs	r2, #3
 8001e7a:	701a      	strb	r2, [r3, #0]
    }

    if (prev_speaker)
 8001e7c:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <manejar_cambio_parlante+0xb8>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d023      	beq.n	8001ecc <manejar_cambio_parlante+0xa4>
    {
        idS--;
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <manejar_cambio_parlante+0xac>)
 8001e86:	f993 3000 	ldrsb.w	r3, [r3]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	b25a      	sxtb	r2, r3
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <manejar_cambio_parlante+0xac>)
 8001e94:	701a      	strb	r2, [r3, #0]
        if (idS < 0)
 8001e96:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <manejar_cambio_parlante+0xac>)
 8001e98:	f993 3000 	ldrsb.w	r3, [r3]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	da02      	bge.n	8001ea6 <manejar_cambio_parlante+0x7e>
            idS = NUM_PARLANTES - 1;
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <manejar_cambio_parlante+0xac>)
 8001ea2:	2205      	movs	r2, #5
 8001ea4:	701a      	strb	r2, [r3, #0]
        prev_speaker = false;
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <manejar_cambio_parlante+0xb8>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
        Activar_Parlante(idS);
 8001eac:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <manejar_cambio_parlante+0xac>)
 8001eae:	f993 3000 	ldrsb.w	r3, [r3]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 f869 	bl	8001f8c <Activar_Parlante>
        display_cancion(idx);
 8001eba:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <manejar_cambio_parlante+0xb0>)
 8001ebc:	f993 3000 	ldrsb.w	r3, [r3]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fabd 	bl	8001440 <display_cancion>
        AudioState = AUDIO_STATE_PLAY;
 8001ec6:	4b05      	ldr	r3, [pc, #20]	; (8001edc <manejar_cambio_parlante+0xb4>)
 8001ec8:	2203      	movs	r2, #3
 8001eca:	701a      	strb	r2, [r3, #0]
    }
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000320 	.word	0x20000320
 8001ed4:	20000323 	.word	0x20000323
 8001ed8:	20000322 	.word	0x20000322
 8001edc:	2000183c 	.word	0x2000183c
 8001ee0:	20000321 	.word	0x20000321

08001ee4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)  // Cambiá esto si usás otro UART
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <HAL_UART_RxCpltCallback+0x2c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d107      	bne.n	8001f06 <HAL_UART_RxCpltCallback+0x22>
    {
        uart_cmd_received = true;
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <HAL_UART_RxCpltCallback+0x30>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]

        // Reinicia la recepción para recibir el próximo byte
        HAL_UART_Receive_IT(&huart1, &uart_rx_byte, 1);
 8001efc:	2201      	movs	r2, #1
 8001efe:	4906      	ldr	r1, [pc, #24]	; (8001f18 <HAL_UART_RxCpltCallback+0x34>)
 8001f00:	4806      	ldr	r0, [pc, #24]	; (8001f1c <HAL_UART_RxCpltCallback+0x38>)
 8001f02:	f006 fda6 	bl	8008a52 <HAL_UART_Receive_IT>
    }
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40011000 	.word	0x40011000
 8001f14:	2000031d 	.word	0x2000031d
 8001f18:	2000031c 	.word	0x2000031c
 8001f1c:	20000730 	.word	0x20000730

08001f20 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == PD15_Pin)
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f30:	d102      	bne.n	8001f38 <HAL_GPIO_EXTI_Callback+0x18>
	{
		next_song = true;
 8001f32:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <HAL_GPIO_EXTI_Callback+0x50>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == PD13_Pin)
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f3e:	d102      	bne.n	8001f46 <HAL_GPIO_EXTI_Callback+0x26>
	{
		next_speaker = true;
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <HAL_GPIO_EXTI_Callback+0x54>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == PD11_Pin)
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f4c:	d102      	bne.n	8001f54 <HAL_GPIO_EXTI_Callback+0x34>
	{
		prev_speaker = true;
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x58>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == PD9_Pin)
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f5a:	d102      	bne.n	8001f62 <HAL_GPIO_EXTI_Callback+0x42>
	{
		prev_song = true;
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
	}
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	2000031e 	.word	0x2000031e
 8001f74:	20000320 	.word	0x20000320
 8001f78:	20000321 	.word	0x20000321
 8001f7c:	2000031f 	.word	0x2000031f

08001f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f84:	b672      	cpsid	i
}
 8001f86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <Error_Handler+0x8>
	...

08001f8c <Activar_Parlante>:
};


void Parlantes_Init(void) {}

void Activar_Parlante(uint8_t numero) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < NUM_PARLANTES; i++) {
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	e021      	b.n	8001fe0 <Activar_Parlante+0x54>
        if (i == (numero)) {
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d10d      	bne.n	8001fc0 <Activar_Parlante+0x34>
            HAL_GPIO_WritePin(parlantes[i].puerto, parlantes[i].pin, GPIO_PIN_RESET);
 8001fa4:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <Activar_Parlante+0x64>)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001fac:	4a10      	ldr	r2, [pc, #64]	; (8001ff0 <Activar_Parlante+0x64>)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	889b      	ldrh	r3, [r3, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f001 ff4b 	bl	8003e54 <HAL_GPIO_WritePin>
 8001fbe:	e00c      	b.n	8001fda <Activar_Parlante+0x4e>
        } else {
            HAL_GPIO_WritePin(parlantes[i].puerto, parlantes[i].pin, GPIO_PIN_SET);
 8001fc0:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <Activar_Parlante+0x64>)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001fc8:	4a09      	ldr	r2, [pc, #36]	; (8001ff0 <Activar_Parlante+0x64>)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	889b      	ldrh	r3, [r3, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f001 ff3d 	bl	8003e54 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_PARLANTES; i++) {
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	ddda      	ble.n	8001f9c <Activar_Parlante+0x10>
        }
    }
}
 8001fe6:	bf00      	nop
 8001fe8:	bf00      	nop
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	2000004c 	.word	0x2000004c

08001ff4 <SSD1306_Init>:
        }
    }
}

uint8_t SSD1306_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
	SSD1306_I2C_Init();
 8001ffa:	f000 fa29 	bl	8002450 <SSD1306_I2C_Init>
	if(HAL_I2C_IsDeviceReady(&hi2c3, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK){
 8001ffe:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002002:	2201      	movs	r2, #1
 8002004:	2178      	movs	r1, #120	; 0x78
 8002006:	485b      	ldr	r0, [pc, #364]	; (8002174 <SSD1306_Init+0x180>)
 8002008:	f004 f8f2 	bl	80061f0 <HAL_I2C_IsDeviceReady>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <SSD1306_Init+0x22>
		return 0;
 8002012:	2300      	movs	r3, #0
 8002014:	e0a9      	b.n	800216a <SSD1306_Init+0x176>
	}

	uint32_t p = 2500;
 8002016:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800201a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800201c:	e002      	b.n	8002024 <SSD1306_Init+0x30>
		p--;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3b01      	subs	r3, #1
 8002022:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f9      	bne.n	800201e <SSD1306_Init+0x2a>

	SSD1306_WRITECOMMAND(0xAE);
 800202a:	22ae      	movs	r2, #174	; 0xae
 800202c:	2100      	movs	r1, #0
 800202e:	2078      	movs	r0, #120	; 0x78
 8002030:	f000 fa8a 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8002034:	2220      	movs	r2, #32
 8002036:	2100      	movs	r1, #0
 8002038:	2078      	movs	r0, #120	; 0x78
 800203a:	f000 fa85 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 800203e:	2210      	movs	r2, #16
 8002040:	2100      	movs	r1, #0
 8002042:	2078      	movs	r0, #120	; 0x78
 8002044:	f000 fa80 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 8002048:	22b0      	movs	r2, #176	; 0xb0
 800204a:	2100      	movs	r1, #0
 800204c:	2078      	movs	r0, #120	; 0x78
 800204e:	f000 fa7b 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 8002052:	22c8      	movs	r2, #200	; 0xc8
 8002054:	2100      	movs	r1, #0
 8002056:	2078      	movs	r0, #120	; 0x78
 8002058:	f000 fa76 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 800205c:	2200      	movs	r2, #0
 800205e:	2100      	movs	r1, #0
 8002060:	2078      	movs	r0, #120	; 0x78
 8002062:	f000 fa71 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8002066:	2210      	movs	r2, #16
 8002068:	2100      	movs	r1, #0
 800206a:	2078      	movs	r0, #120	; 0x78
 800206c:	f000 fa6c 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 8002070:	2240      	movs	r2, #64	; 0x40
 8002072:	2100      	movs	r1, #0
 8002074:	2078      	movs	r0, #120	; 0x78
 8002076:	f000 fa67 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 800207a:	2281      	movs	r2, #129	; 0x81
 800207c:	2100      	movs	r1, #0
 800207e:	2078      	movs	r0, #120	; 0x78
 8002080:	f000 fa62 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002084:	22ff      	movs	r2, #255	; 0xff
 8002086:	2100      	movs	r1, #0
 8002088:	2078      	movs	r0, #120	; 0x78
 800208a:	f000 fa5d 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 800208e:	22a1      	movs	r2, #161	; 0xa1
 8002090:	2100      	movs	r1, #0
 8002092:	2078      	movs	r0, #120	; 0x78
 8002094:	f000 fa58 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 8002098:	22a6      	movs	r2, #166	; 0xa6
 800209a:	2100      	movs	r1, #0
 800209c:	2078      	movs	r0, #120	; 0x78
 800209e:	f000 fa53 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 80020a2:	22a8      	movs	r2, #168	; 0xa8
 80020a4:	2100      	movs	r1, #0
 80020a6:	2078      	movs	r0, #120	; 0x78
 80020a8:	f000 fa4e 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 80020ac:	223f      	movs	r2, #63	; 0x3f
 80020ae:	2100      	movs	r1, #0
 80020b0:	2078      	movs	r0, #120	; 0x78
 80020b2:	f000 fa49 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 80020b6:	22a4      	movs	r2, #164	; 0xa4
 80020b8:	2100      	movs	r1, #0
 80020ba:	2078      	movs	r0, #120	; 0x78
 80020bc:	f000 fa44 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 80020c0:	22d3      	movs	r2, #211	; 0xd3
 80020c2:	2100      	movs	r1, #0
 80020c4:	2078      	movs	r0, #120	; 0x78
 80020c6:	f000 fa3f 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	2078      	movs	r0, #120	; 0x78
 80020d0:	f000 fa3a 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 80020d4:	22d5      	movs	r2, #213	; 0xd5
 80020d6:	2100      	movs	r1, #0
 80020d8:	2078      	movs	r0, #120	; 0x78
 80020da:	f000 fa35 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 80020de:	22f0      	movs	r2, #240	; 0xf0
 80020e0:	2100      	movs	r1, #0
 80020e2:	2078      	movs	r0, #120	; 0x78
 80020e4:	f000 fa30 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 80020e8:	22d9      	movs	r2, #217	; 0xd9
 80020ea:	2100      	movs	r1, #0
 80020ec:	2078      	movs	r0, #120	; 0x78
 80020ee:	f000 fa2b 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 80020f2:	2222      	movs	r2, #34	; 0x22
 80020f4:	2100      	movs	r1, #0
 80020f6:	2078      	movs	r0, #120	; 0x78
 80020f8:	f000 fa26 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 80020fc:	22da      	movs	r2, #218	; 0xda
 80020fe:	2100      	movs	r1, #0
 8002100:	2078      	movs	r0, #120	; 0x78
 8002102:	f000 fa21 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002106:	2212      	movs	r2, #18
 8002108:	2100      	movs	r1, #0
 800210a:	2078      	movs	r0, #120	; 0x78
 800210c:	f000 fa1c 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 8002110:	22db      	movs	r2, #219	; 0xdb
 8002112:	2100      	movs	r1, #0
 8002114:	2078      	movs	r0, #120	; 0x78
 8002116:	f000 fa17 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 800211a:	2220      	movs	r2, #32
 800211c:	2100      	movs	r1, #0
 800211e:	2078      	movs	r0, #120	; 0x78
 8002120:	f000 fa12 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 8002124:	228d      	movs	r2, #141	; 0x8d
 8002126:	2100      	movs	r1, #0
 8002128:	2078      	movs	r0, #120	; 0x78
 800212a:	f000 fa0d 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 800212e:	2214      	movs	r2, #20
 8002130:	2100      	movs	r1, #0
 8002132:	2078      	movs	r0, #120	; 0x78
 8002134:	f000 fa08 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 8002138:	22af      	movs	r2, #175	; 0xaf
 800213a:	2100      	movs	r1, #0
 800213c:	2078      	movs	r0, #120	; 0x78
 800213e:	f000 fa03 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002142:	222e      	movs	r2, #46	; 0x2e
 8002144:	2100      	movs	r1, #0
 8002146:	2078      	movs	r0, #120	; 0x78
 8002148:	f000 f9fe 	bl	8002548 <SSD1306_I2C_Write>
	SSD1306_Fill(BLACK);
 800214c:	2000      	movs	r0, #0
 800214e:	f000 f843 	bl	80021d8 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8002152:	f000 f813 	bl	800217c <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <SSD1306_Init+0x184>)
 8002158:	2200      	movs	r2, #0
 800215a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <SSD1306_Init+0x184>)
 800215e:	2200      	movs	r2, #0
 8002160:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <SSD1306_Init+0x184>)
 8002164:	2201      	movs	r2, #1
 8002166:	715a      	strb	r2, [r3, #5]
	return 1;
 8002168:	2301      	movs	r3, #1
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000220 	.word	0x20000220
 8002178:	20000724 	.word	0x20000724

0800217c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
	uint8_t m;
	for(m=0; m<8; m++)
 8002182:	2300      	movs	r3, #0
 8002184:	71fb      	strb	r3, [r7, #7]
 8002186:	e01d      	b.n	80021c4 <SSD1306_UpdateScreen+0x48>
	{
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	3b50      	subs	r3, #80	; 0x50
 800218c:	b2db      	uxtb	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	2100      	movs	r1, #0
 8002192:	2078      	movs	r0, #120	; 0x78
 8002194:	f000 f9d8 	bl	8002548 <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002198:	2200      	movs	r2, #0
 800219a:	2100      	movs	r1, #0
 800219c:	2078      	movs	r0, #120	; 0x78
 800219e:	f000 f9d3 	bl	8002548 <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80021a2:	2210      	movs	r2, #16
 80021a4:	2100      	movs	r1, #0
 80021a6:	2078      	movs	r0, #120	; 0x78
 80021a8:	f000 f9ce 	bl	8002548 <SSD1306_I2C_Write>
		SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	01db      	lsls	r3, r3, #7
 80021b0:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <SSD1306_UpdateScreen+0x58>)
 80021b2:	441a      	add	r2, r3
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	2140      	movs	r1, #64	; 0x40
 80021b8:	2078      	movs	r0, #120	; 0x78
 80021ba:	f000 f95f 	bl	800247c <SSD1306_I2C_WriteMulti>
	for(m=0; m<8; m++)
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	3301      	adds	r3, #1
 80021c2:	71fb      	strb	r3, [r7, #7]
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	2b07      	cmp	r3, #7
 80021c8:	d9de      	bls.n	8002188 <SSD1306_UpdateScreen+0xc>
	}
}
 80021ca:	bf00      	nop
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000324 	.word	0x20000324

080021d8 <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <SSD1306_Fill+0x14>
 80021e8:	2300      	movs	r3, #0
 80021ea:	e000      	b.n	80021ee <SSD1306_Fill+0x16>
 80021ec:	23ff      	movs	r3, #255	; 0xff
 80021ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021f2:	4619      	mov	r1, r3
 80021f4:	4803      	ldr	r0, [pc, #12]	; (8002204 <SSD1306_Fill+0x2c>)
 80021f6:	f00f fb43 	bl	8011880 <memset>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000324 	.word	0x20000324

08002208 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	80fb      	strh	r3, [r7, #6]
 8002212:	460b      	mov	r3, r1
 8002214:	80bb      	strh	r3, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	70fb      	strb	r3, [r7, #3]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	2b7f      	cmp	r3, #127	; 0x7f
 800221e:	d848      	bhi.n	80022b2 <SSD1306_DrawPixel+0xaa>
 8002220:	88bb      	ldrh	r3, [r7, #4]
 8002222:	2b3f      	cmp	r3, #63	; 0x3f
 8002224:	d845      	bhi.n	80022b2 <SSD1306_DrawPixel+0xaa>
		return;
	}

	if(SSD1306.Inverted){
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <SSD1306_DrawPixel+0xb8>)
 8002228:	791b      	ldrb	r3, [r3, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d006      	beq.n	800223c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800222e:	78fb      	ldrb	r3, [r7, #3]
 8002230:	2b00      	cmp	r3, #0
 8002232:	bf0c      	ite	eq
 8002234:	2301      	moveq	r3, #1
 8002236:	2300      	movne	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	70fb      	strb	r3, [r7, #3]
	}

	if(color == WHITE){
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d11a      	bne.n	8002278 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002242:	88fa      	ldrh	r2, [r7, #6]
 8002244:	88bb      	ldrh	r3, [r7, #4]
 8002246:	08db      	lsrs	r3, r3, #3
 8002248:	b298      	uxth	r0, r3
 800224a:	4603      	mov	r3, r0
 800224c:	01db      	lsls	r3, r3, #7
 800224e:	4413      	add	r3, r2
 8002250:	4a1c      	ldr	r2, [pc, #112]	; (80022c4 <SSD1306_DrawPixel+0xbc>)
 8002252:	5cd3      	ldrb	r3, [r2, r3]
 8002254:	b25a      	sxtb	r2, r3
 8002256:	88bb      	ldrh	r3, [r7, #4]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	2101      	movs	r1, #1
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	b25b      	sxtb	r3, r3
 8002264:	4313      	orrs	r3, r2
 8002266:	b259      	sxtb	r1, r3
 8002268:	88fa      	ldrh	r2, [r7, #6]
 800226a:	4603      	mov	r3, r0
 800226c:	01db      	lsls	r3, r3, #7
 800226e:	4413      	add	r3, r2
 8002270:	b2c9      	uxtb	r1, r1
 8002272:	4a14      	ldr	r2, [pc, #80]	; (80022c4 <SSD1306_DrawPixel+0xbc>)
 8002274:	54d1      	strb	r1, [r2, r3]
 8002276:	e01d      	b.n	80022b4 <SSD1306_DrawPixel+0xac>
	}else{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002278:	88fa      	ldrh	r2, [r7, #6]
 800227a:	88bb      	ldrh	r3, [r7, #4]
 800227c:	08db      	lsrs	r3, r3, #3
 800227e:	b298      	uxth	r0, r3
 8002280:	4603      	mov	r3, r0
 8002282:	01db      	lsls	r3, r3, #7
 8002284:	4413      	add	r3, r2
 8002286:	4a0f      	ldr	r2, [pc, #60]	; (80022c4 <SSD1306_DrawPixel+0xbc>)
 8002288:	5cd3      	ldrb	r3, [r2, r3]
 800228a:	b25a      	sxtb	r2, r3
 800228c:	88bb      	ldrh	r3, [r7, #4]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	2101      	movs	r1, #1
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	b25b      	sxtb	r3, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	b25b      	sxtb	r3, r3
 800229e:	4013      	ands	r3, r2
 80022a0:	b259      	sxtb	r1, r3
 80022a2:	88fa      	ldrh	r2, [r7, #6]
 80022a4:	4603      	mov	r3, r0
 80022a6:	01db      	lsls	r3, r3, #7
 80022a8:	4413      	add	r3, r2
 80022aa:	b2c9      	uxtb	r1, r1
 80022ac:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <SSD1306_DrawPixel+0xbc>)
 80022ae:	54d1      	strb	r1, [r2, r3]
 80022b0:	e000      	b.n	80022b4 <SSD1306_DrawPixel+0xac>
		return;
 80022b2:	bf00      	nop
	}
}
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	20000724 	.word	0x20000724
 80022c4:	20000324 	.word	0x20000324

080022c8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	460a      	mov	r2, r1
 80022d2:	80fb      	strh	r3, [r7, #6]
 80022d4:	4613      	mov	r3, r2
 80022d6:	80bb      	strh	r3, [r7, #4]
	SSD1306.CurrentX = x;
 80022d8:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <SSD1306_GotoXY+0x28>)
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80022de:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <SSD1306_GotoXY+0x28>)
 80022e0:	88bb      	ldrh	r3, [r7, #4]
 80022e2:	8053      	strh	r3, [r2, #2]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	20000724 	.word	0x20000724

080022f4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	6039      	str	r1, [r7, #0]
 80022fe:	71fb      	strb	r3, [r7, #7]
 8002300:	4613      	mov	r3, r2
 8002302:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	if(SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) || SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)){
 8002304:	4b3a      	ldr	r3, [pc, #232]	; (80023f0 <SSD1306_Putc+0xfc>)
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	4413      	add	r3, r2
 8002310:	2b7f      	cmp	r3, #127	; 0x7f
 8002312:	dc07      	bgt.n	8002324 <SSD1306_Putc+0x30>
 8002314:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <SSD1306_Putc+0xfc>)
 8002316:	885b      	ldrh	r3, [r3, #2]
 8002318:	461a      	mov	r2, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	785b      	ldrb	r3, [r3, #1]
 800231e:	4413      	add	r3, r2
 8002320:	2b3f      	cmp	r3, #63	; 0x3f
 8002322:	dd01      	ble.n	8002328 <SSD1306_Putc+0x34>
		return 0;
 8002324:	2300      	movs	r3, #0
 8002326:	e05e      	b.n	80023e6 <SSD1306_Putc+0xf2>
	}

	for(i=0; i<Font->FontHeight; i++){
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	e04b      	b.n	80023c6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	3b20      	subs	r3, #32
 8002336:	6839      	ldr	r1, [r7, #0]
 8002338:	7849      	ldrb	r1, [r1, #1]
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4619      	mov	r1, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	440b      	add	r3, r1
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	60fb      	str	r3, [r7, #12]
		for(j=0; j<Font->FontWidth; j++){
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	e030      	b.n	80023b4 <SSD1306_Putc+0xc0>
			if((b << j) & 0x8000){
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d010      	beq.n	8002384 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002362:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <SSD1306_Putc+0xfc>)
 8002364:	881a      	ldrh	r2, [r3, #0]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	b29b      	uxth	r3, r3
 800236a:	4413      	add	r3, r2
 800236c:	b298      	uxth	r0, r3
 800236e:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <SSD1306_Putc+0xfc>)
 8002370:	885a      	ldrh	r2, [r3, #2]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	b29b      	uxth	r3, r3
 8002376:	4413      	add	r3, r2
 8002378:	b29b      	uxth	r3, r3
 800237a:	79ba      	ldrb	r2, [r7, #6]
 800237c:	4619      	mov	r1, r3
 800237e:	f7ff ff43 	bl	8002208 <SSD1306_DrawPixel>
 8002382:	e014      	b.n	80023ae <SSD1306_Putc+0xba>
			}else{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002384:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <SSD1306_Putc+0xfc>)
 8002386:	881a      	ldrh	r2, [r3, #0]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	b29b      	uxth	r3, r3
 800238c:	4413      	add	r3, r2
 800238e:	b298      	uxth	r0, r3
 8002390:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <SSD1306_Putc+0xfc>)
 8002392:	885a      	ldrh	r2, [r3, #2]
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	b29b      	uxth	r3, r3
 8002398:	4413      	add	r3, r2
 800239a:	b299      	uxth	r1, r3
 800239c:	79bb      	ldrb	r3, [r7, #6]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bf0c      	ite	eq
 80023a2:	2301      	moveq	r3, #1
 80023a4:	2300      	movne	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	f7ff ff2d 	bl	8002208 <SSD1306_DrawPixel>
		for(j=0; j<Font->FontWidth; j++){
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	3301      	adds	r3, #1
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4293      	cmp	r3, r2
 80023be:	d3c8      	bcc.n	8002352 <SSD1306_Putc+0x5e>
	for(i=0; i<Font->FontHeight; i++){
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	3301      	adds	r3, #1
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	785b      	ldrb	r3, [r3, #1]
 80023ca:	461a      	mov	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d3ad      	bcc.n	800232e <SSD1306_Putc+0x3a>
			}
		}
	}
	SSD1306.CurrentX += Font->FontWidth;
 80023d2:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <SSD1306_Putc+0xfc>)
 80023d4:	881a      	ldrh	r2, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	4413      	add	r3, r2
 80023de:	b29a      	uxth	r2, r3
 80023e0:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <SSD1306_Putc+0xfc>)
 80023e2:	801a      	strh	r2, [r3, #0]
	return ch;
 80023e4:	79fb      	ldrb	r3, [r7, #7]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000724 	.word	0x20000724

080023f4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	4613      	mov	r3, r2
 8002400:	71fb      	strb	r3, [r7, #7]
	while(*str)
 8002402:	e012      	b.n	800242a <SSD1306_Puts+0x36>
	{
		if(SSD1306_Putc(*str, Font, color) != *str){
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	79fa      	ldrb	r2, [r7, #7]
 800240a:	68b9      	ldr	r1, [r7, #8]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff71 	bl	80022f4 <SSD1306_Putc>
 8002412:	4603      	mov	r3, r0
 8002414:	461a      	mov	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d002      	beq.n	8002424 <SSD1306_Puts+0x30>
			return *str;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	e008      	b.n	8002436 <SSD1306_Puts+0x42>
		}
		str++;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3301      	adds	r3, #1
 8002428:	60fb      	str	r3, [r7, #12]
	while(*str)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1e8      	bne.n	8002404 <SSD1306_Puts+0x10>
	}
	return *str;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	781b      	ldrb	r3, [r3, #0]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <SSD1306_Clear>:
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}

void SSD1306_Clear(void)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 8002442:	2000      	movs	r0, #0
 8002444:	f7ff fec8 	bl	80021d8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002448:	f7ff fe98 	bl	800217c <SSD1306_UpdateScreen>
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}

08002450 <SSD1306_I2C_Init>:
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);
}

void SSD1306_I2C_Init(void)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <SSD1306_I2C_Init+0x28>)
 8002458:	607b      	str	r3, [r7, #4]
	while(p>0)
 800245a:	e002      	b.n	8002462 <SSD1306_I2C_Init+0x12>
		p--;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3b01      	subs	r3, #1
 8002460:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1f9      	bne.n	800245c <SSD1306_I2C_Init+0xc>
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	0003d090 	.word	0x0003d090

0800247c <SSD1306_I2C_WriteMulti>:

void SSD1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count)
{
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b0c7      	sub	sp, #284	; 0x11c
 8002480:	af02      	add	r7, sp, #8
 8002482:	4604      	mov	r4, r0
 8002484:	4608      	mov	r0, r1
 8002486:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800248a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800248e:	600a      	str	r2, [r1, #0]
 8002490:	4619      	mov	r1, r3
 8002492:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002496:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800249a:	4622      	mov	r2, r4
 800249c:	701a      	strb	r2, [r3, #0]
 800249e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024a2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80024a6:	4602      	mov	r2, r0
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024b2:	460a      	mov	r2, r1
 80024b4:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 80024b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80024be:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024c2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80024c6:	7812      	ldrb	r2, [r2, #0]
 80024c8:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80024d0:	e015      	b.n	80024fe <SSD1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 80024d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024d6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024da:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	441a      	add	r2, r3
 80024e2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024e6:	3301      	adds	r3, #1
 80024e8:	7811      	ldrb	r1, [r2, #0]
 80024ea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024ee:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80024f2:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 80024f4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024f8:	3301      	adds	r3, #1
 80024fa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80024fe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002502:	b29b      	uxth	r3, r3
 8002504:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002508:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800250c:	8812      	ldrh	r2, [r2, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d8df      	bhi.n	80024d2 <SSD1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c3, address, dt, count+1, 10);
 8002512:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002516:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	b299      	uxth	r1, r3
 800251e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002522:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	b29b      	uxth	r3, r3
 800252c:	f107 020c 	add.w	r2, r7, #12
 8002530:	200a      	movs	r0, #10
 8002532:	9000      	str	r0, [sp, #0]
 8002534:	4803      	ldr	r0, [pc, #12]	; (8002544 <SSD1306_I2C_WriteMulti+0xc8>)
 8002536:	f003 fa3d 	bl	80059b4 <HAL_I2C_Master_Transmit>
}
 800253a:	bf00      	nop
 800253c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002540:	46bd      	mov	sp, r7
 8002542:	bd90      	pop	{r4, r7, pc}
 8002544:	20000220 	.word	0x20000220

08002548 <SSD1306_I2C_Write>:


void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af02      	add	r7, sp, #8
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
 8002552:	460b      	mov	r3, r1
 8002554:	71bb      	strb	r3, [r7, #6]
 8002556:	4613      	mov	r3, r2
 8002558:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800255a:	79bb      	ldrb	r3, [r7, #6]
 800255c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800255e:	797b      	ldrb	r3, [r7, #5]
 8002560:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c3, address, dt, 2, 10);
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	b299      	uxth	r1, r3
 8002566:	f107 020c 	add.w	r2, r7, #12
 800256a:	230a      	movs	r3, #10
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2302      	movs	r3, #2
 8002570:	4803      	ldr	r0, [pc, #12]	; (8002580 <SSD1306_I2C_Write+0x38>)
 8002572:	f003 fa1f 	bl	80059b4 <HAL_I2C_Master_Transmit>
}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000220 	.word	0x20000220

08002584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_MspInit+0x4c>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	4a0f      	ldr	r2, [pc, #60]	; (80025d0 <HAL_MspInit+0x4c>)
 8002594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002598:	6453      	str	r3, [r2, #68]	; 0x44
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <HAL_MspInit+0x4c>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	603b      	str	r3, [r7, #0]
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_MspInit+0x4c>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	4a08      	ldr	r2, [pc, #32]	; (80025d0 <HAL_MspInit+0x4c>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	6413      	str	r3, [r2, #64]	; 0x40
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_MspInit+0x4c>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025c2:	2007      	movs	r0, #7
 80025c4:	f000 fd3c 	bl	8003040 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40023800 	.word	0x40023800

080025d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <NMI_Handler+0x4>

080025da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025de:	e7fe      	b.n	80025de <HardFault_Handler+0x4>

080025e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e4:	e7fe      	b.n	80025e4 <MemManage_Handler+0x4>

080025e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ea:	e7fe      	b.n	80025ea <BusFault_Handler+0x4>

080025ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f0:	e7fe      	b.n	80025f0 <UsageFault_Handler+0x4>

080025f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002620:	f000 fbfa 	bl	8002e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}

08002628 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800262c:	2001      	movs	r0, #1
 800262e:	f001 fc2b 	bl	8003e88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800263c:	4802      	ldr	r0, [pc, #8]	; (8002648 <DMA1_Stream5_IRQHandler+0x10>)
 800263e:	f000 ff37 	bl	80034b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	200002bc 	.word	0x200002bc

0800264c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PD9_Pin);
 8002650:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002654:	f001 fc18 	bl	8003e88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002658:	bf00      	nop
 800265a:	bd80      	pop	{r7, pc}

0800265c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002660:	4802      	ldr	r0, [pc, #8]	; (800266c <USART1_IRQHandler+0x10>)
 8002662:	f006 fa27 	bl	8008ab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000730 	.word	0x20000730

08002670 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PD11_Pin);
 8002674:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002678:	f001 fc06 	bl	8003e88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PD13_Pin);
 800267c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002680:	f001 fc02 	bl	8003e88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PD15_Pin);
 8002684:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002688:	f001 fbfe 	bl	8003e88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}

08002690 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <DMA2_Stream2_IRQHandler+0x10>)
 8002696:	f000 ff0b 	bl	80034b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000774 	.word	0x20000774

080026a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <OTG_FS_IRQHandler+0x10>)
 80026aa:	f001 fe6f 	bl	800438c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	200028c8 	.word	0x200028c8

080026b8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <DMA2_Stream7_IRQHandler+0x10>)
 80026be:	f000 fef7 	bl	80034b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200007d4 	.word	0x200007d4

080026cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d4:	4a14      	ldr	r2, [pc, #80]	; (8002728 <_sbrk+0x5c>)
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <_sbrk+0x60>)
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <_sbrk+0x64>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d102      	bne.n	80026ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <_sbrk+0x64>)
 80026ea:	4a12      	ldr	r2, [pc, #72]	; (8002734 <_sbrk+0x68>)
 80026ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <_sbrk+0x64>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d207      	bcs.n	800270c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026fc:	f00f f902 	bl	8011904 <__errno>
 8002700:	4603      	mov	r3, r0
 8002702:	220c      	movs	r2, #12
 8002704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
 800270a:	e009      	b.n	8002720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <_sbrk+0x64>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <_sbrk+0x64>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	4a05      	ldr	r2, [pc, #20]	; (8002730 <_sbrk+0x64>)
 800271c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800271e:	68fb      	ldr	r3, [r7, #12]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20020000 	.word	0x20020000
 800272c:	00000400 	.word	0x00000400
 8002730:	2000072c 	.word	0x2000072c
 8002734:	20002d18 	.word	0x20002d18

08002738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <SystemInit+0x28>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	4a07      	ldr	r2, [pc, #28]	; (8002760 <SystemInit+0x28>)
 8002744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <SystemInit+0x28>)
 800274e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002752:	609a      	str	r2, [r3, #8]
#endif
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <MX_USART1_UART_Init+0x4c>)
 800276a:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <MX_USART1_UART_Init+0x50>)
 800276c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <MX_USART1_UART_Init+0x4c>)
 8002770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <MX_USART1_UART_Init+0x4c>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <MX_USART1_UART_Init+0x4c>)
 800277e:	2200      	movs	r2, #0
 8002780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <MX_USART1_UART_Init+0x4c>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <MX_USART1_UART_Init+0x4c>)
 800278a:	220c      	movs	r2, #12
 800278c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <MX_USART1_UART_Init+0x4c>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <MX_USART1_UART_Init+0x4c>)
 8002796:	2200      	movs	r2, #0
 8002798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800279a:	4805      	ldr	r0, [pc, #20]	; (80027b0 <MX_USART1_UART_Init+0x4c>)
 800279c:	f006 f90c 	bl	80089b8 <HAL_UART_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027a6:	f7ff fbeb 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000730 	.word	0x20000730
 80027b4:	40011000 	.word	0x40011000

080027b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08a      	sub	sp, #40	; 0x28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a5b      	ldr	r2, [pc, #364]	; (8002944 <HAL_UART_MspInit+0x18c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	f040 80af 	bne.w	800293a <HAL_UART_MspInit+0x182>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027dc:	2300      	movs	r3, #0
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	4b59      	ldr	r3, [pc, #356]	; (8002948 <HAL_UART_MspInit+0x190>)
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	4a58      	ldr	r2, [pc, #352]	; (8002948 <HAL_UART_MspInit+0x190>)
 80027e6:	f043 0310 	orr.w	r3, r3, #16
 80027ea:	6453      	str	r3, [r2, #68]	; 0x44
 80027ec:	4b56      	ldr	r3, [pc, #344]	; (8002948 <HAL_UART_MspInit+0x190>)
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	4b52      	ldr	r3, [pc, #328]	; (8002948 <HAL_UART_MspInit+0x190>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	4a51      	ldr	r2, [pc, #324]	; (8002948 <HAL_UART_MspInit+0x190>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6313      	str	r3, [r2, #48]	; 0x30
 8002808:	4b4f      	ldr	r3, [pc, #316]	; (8002948 <HAL_UART_MspInit+0x190>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002814:	2300      	movs	r3, #0
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	4b4b      	ldr	r3, [pc, #300]	; (8002948 <HAL_UART_MspInit+0x190>)
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	4a4a      	ldr	r2, [pc, #296]	; (8002948 <HAL_UART_MspInit+0x190>)
 800281e:	f043 0302 	orr.w	r3, r3, #2
 8002822:	6313      	str	r3, [r2, #48]	; 0x30
 8002824:	4b48      	ldr	r3, [pc, #288]	; (8002948 <HAL_UART_MspInit+0x190>)
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002830:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002836:	2302      	movs	r3, #2
 8002838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283e:	2303      	movs	r3, #3
 8002840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002842:	2307      	movs	r3, #7
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002846:	f107 0314 	add.w	r3, r7, #20
 800284a:	4619      	mov	r1, r3
 800284c:	483f      	ldr	r0, [pc, #252]	; (800294c <HAL_UART_MspInit+0x194>)
 800284e:	f001 f899 	bl	8003984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002852:	2308      	movs	r3, #8
 8002854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	2302      	movs	r3, #2
 8002858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285e:	2303      	movs	r3, #3
 8002860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002862:	2307      	movs	r3, #7
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	4619      	mov	r1, r3
 800286c:	4838      	ldr	r0, [pc, #224]	; (8002950 <HAL_UART_MspInit+0x198>)
 800286e:	f001 f889 	bl	8003984 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002872:	4b38      	ldr	r3, [pc, #224]	; (8002954 <HAL_UART_MspInit+0x19c>)
 8002874:	4a38      	ldr	r2, [pc, #224]	; (8002958 <HAL_UART_MspInit+0x1a0>)
 8002876:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002878:	4b36      	ldr	r3, [pc, #216]	; (8002954 <HAL_UART_MspInit+0x19c>)
 800287a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800287e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002880:	4b34      	ldr	r3, [pc, #208]	; (8002954 <HAL_UART_MspInit+0x19c>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002886:	4b33      	ldr	r3, [pc, #204]	; (8002954 <HAL_UART_MspInit+0x19c>)
 8002888:	2200      	movs	r2, #0
 800288a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800288c:	4b31      	ldr	r3, [pc, #196]	; (8002954 <HAL_UART_MspInit+0x19c>)
 800288e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002892:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002894:	4b2f      	ldr	r3, [pc, #188]	; (8002954 <HAL_UART_MspInit+0x19c>)
 8002896:	2200      	movs	r2, #0
 8002898:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800289a:	4b2e      	ldr	r3, [pc, #184]	; (8002954 <HAL_UART_MspInit+0x19c>)
 800289c:	2200      	movs	r2, #0
 800289e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80028a0:	4b2c      	ldr	r3, [pc, #176]	; (8002954 <HAL_UART_MspInit+0x19c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028a6:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <HAL_UART_MspInit+0x19c>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ac:	4b29      	ldr	r3, [pc, #164]	; (8002954 <HAL_UART_MspInit+0x19c>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80028b2:	4828      	ldr	r0, [pc, #160]	; (8002954 <HAL_UART_MspInit+0x19c>)
 80028b4:	f000 fc06 	bl	80030c4 <HAL_DMA_Init>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80028be:	f7ff fb5f 	bl	8001f80 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a23      	ldr	r2, [pc, #140]	; (8002954 <HAL_UART_MspInit+0x19c>)
 80028c6:	639a      	str	r2, [r3, #56]	; 0x38
 80028c8:	4a22      	ldr	r2, [pc, #136]	; (8002954 <HAL_UART_MspInit+0x19c>)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80028ce:	4b23      	ldr	r3, [pc, #140]	; (800295c <HAL_UART_MspInit+0x1a4>)
 80028d0:	4a23      	ldr	r2, [pc, #140]	; (8002960 <HAL_UART_MspInit+0x1a8>)
 80028d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80028d4:	4b21      	ldr	r3, [pc, #132]	; (800295c <HAL_UART_MspInit+0x1a4>)
 80028d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028da:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028dc:	4b1f      	ldr	r3, [pc, #124]	; (800295c <HAL_UART_MspInit+0x1a4>)
 80028de:	2240      	movs	r2, #64	; 0x40
 80028e0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028e2:	4b1e      	ldr	r3, [pc, #120]	; (800295c <HAL_UART_MspInit+0x1a4>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028e8:	4b1c      	ldr	r3, [pc, #112]	; (800295c <HAL_UART_MspInit+0x1a4>)
 80028ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ee:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028f0:	4b1a      	ldr	r3, [pc, #104]	; (800295c <HAL_UART_MspInit+0x1a4>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028f6:	4b19      	ldr	r3, [pc, #100]	; (800295c <HAL_UART_MspInit+0x1a4>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80028fc:	4b17      	ldr	r3, [pc, #92]	; (800295c <HAL_UART_MspInit+0x1a4>)
 80028fe:	2200      	movs	r2, #0
 8002900:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002902:	4b16      	ldr	r3, [pc, #88]	; (800295c <HAL_UART_MspInit+0x1a4>)
 8002904:	2200      	movs	r2, #0
 8002906:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002908:	4b14      	ldr	r3, [pc, #80]	; (800295c <HAL_UART_MspInit+0x1a4>)
 800290a:	2200      	movs	r2, #0
 800290c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800290e:	4813      	ldr	r0, [pc, #76]	; (800295c <HAL_UART_MspInit+0x1a4>)
 8002910:	f000 fbd8 	bl	80030c4 <HAL_DMA_Init>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 800291a:	f7ff fb31 	bl	8001f80 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a0e      	ldr	r2, [pc, #56]	; (800295c <HAL_UART_MspInit+0x1a4>)
 8002922:	635a      	str	r2, [r3, #52]	; 0x34
 8002924:	4a0d      	ldr	r2, [pc, #52]	; (800295c <HAL_UART_MspInit+0x1a4>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2100      	movs	r1, #0
 800292e:	2025      	movs	r0, #37	; 0x25
 8002930:	f000 fb91 	bl	8003056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002934:	2025      	movs	r0, #37	; 0x25
 8002936:	f000 fbaa 	bl	800308e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800293a:	bf00      	nop
 800293c:	3728      	adds	r7, #40	; 0x28
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40011000 	.word	0x40011000
 8002948:	40023800 	.word	0x40023800
 800294c:	40020000 	.word	0x40020000
 8002950:	40020400 	.word	0x40020400
 8002954:	20000774 	.word	0x20000774
 8002958:	40026440 	.word	0x40026440
 800295c:	200007d4 	.word	0x200007d4
 8002960:	400264b8 	.word	0x400264b8

08002964 <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <PlayerInit+0x2c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	4619      	mov	r1, r3
 8002976:	2003      	movs	r0, #3
 8002978:	f7fd fdac 	bl	80004d4 <AUDIO_OUT_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <PlayerInit+0x22>
	{
		return 1;
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 8002986:	2300      	movs	r3, #0
	}
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000080 	.word	0x20000080

08002994 <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	71fb      	strb	r3, [r7, #7]
  UINT bytesread;

  f_close(&WavFile);
 800299e:	4828      	ldr	r0, [pc, #160]	; (8002a40 <AUDIO_PLAYER_Start+0xac>)
 80029a0:	f00d ff4f 	bl	8010842 <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 80029a4:	f7fe f9fc 	bl	8000da0 <AUDIO_GetWavObjectNumber>
 80029a8:	4603      	mov	r3, r0
 80029aa:	461a      	mov	r2, r3
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d93f      	bls.n	8002a34 <AUDIO_PLAYER_Start+0xa0>
  {

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 80029b4:	79fa      	ldrb	r2, [r7, #7]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	4a20      	ldr	r2, [pc, #128]	; (8002a44 <AUDIO_PLAYER_Start+0xb0>)
 80029c2:	4413      	add	r3, r2
 80029c4:	3301      	adds	r3, #1
 80029c6:	2201      	movs	r2, #1
 80029c8:	4619      	mov	r1, r3
 80029ca:	481d      	ldr	r0, [pc, #116]	; (8002a40 <AUDIO_PLAYER_Start+0xac>)
 80029cc:	f00d fbbe 	bl	801014c <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 80029d0:	f107 030c 	add.w	r3, r7, #12
 80029d4:	222c      	movs	r2, #44	; 0x2c
 80029d6:	491c      	ldr	r1, [pc, #112]	; (8002a48 <AUDIO_PLAYER_Start+0xb4>)
 80029d8:	4819      	ldr	r0, [pc, #100]	; (8002a40 <AUDIO_PLAYER_Start+0xac>)
 80029da:	f00d fd75 	bl	80104c8 <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 80029de:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <AUDIO_PLAYER_Start+0xb4>)
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff ffbe 	bl	8002964 <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 80029e8:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <AUDIO_PLAYER_Start+0xb8>)
 80029ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 44);
 80029f2:	212c      	movs	r1, #44	; 0x2c
 80029f4:	4812      	ldr	r0, [pc, #72]	; (8002a40 <AUDIO_PLAYER_Start+0xac>)
 80029f6:	f00d ff4e 	bl	8010896 <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 80029fa:	f107 030c 	add.w	r3, r7, #12
 80029fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a02:	4912      	ldr	r1, [pc, #72]	; (8002a4c <AUDIO_PLAYER_Start+0xb8>)
 8002a04:	480e      	ldr	r0, [pc, #56]	; (8002a40 <AUDIO_PLAYER_Start+0xac>)
 8002a06:	f00d fd5f 	bl	80104c8 <f_read>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d111      	bne.n	8002a34 <AUDIO_PLAYER_Start+0xa0>
    {
      AudioState = AUDIO_STATE_PLAY;
 8002a10:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <AUDIO_PLAYER_Start+0xbc>)
 8002a12:	2203      	movs	r2, #3
 8002a14:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00b      	beq.n	8002a34 <AUDIO_PLAYER_Start+0xa0>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8002a1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a20:	480a      	ldr	r0, [pc, #40]	; (8002a4c <AUDIO_PLAYER_Start+0xb8>)
 8002a22:	f7fd fda5 	bl	8000570 <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a08      	ldr	r2, [pc, #32]	; (8002a4c <AUDIO_PLAYER_Start+0xb8>)
 8002a2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a2e:	6053      	str	r3, [r2, #4]
          return AUDIO_ERROR_NONE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e000      	b.n	8002a36 <AUDIO_PLAYER_Start+0xa2>
        }
      }
  }
  return AUDIO_ERROR_IO;
 8002a34:	2301      	movs	r3, #1
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20001c48 	.word	0x20001c48
 8002a44:	20001840 	.word	0x20001840
 8002a48:	20001c1c 	.word	0x20001c1c
 8002a4c:	20000834 	.word	0x20000834
 8002a50:	2000183c 	.word	0x2000183c

08002a54 <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop, uint8_t idx)
{
 8002a54:	b590      	push	{r4, r7, lr}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	460a      	mov	r2, r1
 8002a5e:	71fb      	strb	r3, [r7, #7]
 8002a60:	4613      	mov	r3, r2
 8002a62:	71bb      	strb	r3, [r7, #6]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	73fb      	strb	r3, [r7, #15]
  
  switch(AudioState)
 8002a68:	4b92      	ldr	r3, [pc, #584]	; (8002cb4 <AUDIO_PLAYER_Process+0x260>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b0f      	cmp	r3, #15
 8002a6e:	f200 8118 	bhi.w	8002ca2 <AUDIO_PLAYER_Process+0x24e>
 8002a72:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <AUDIO_PLAYER_Process+0x24>)
 8002a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a78:	08002ca3 	.word	0x08002ca3
 8002a7c:	08002ca3 	.word	0x08002ca3
 8002a80:	08002ca3 	.word	0x08002ca3
 8002a84:	08002ab9 	.word	0x08002ab9
 8002a88:	08002ca3 	.word	0x08002ca3
 8002a8c:	08002b81 	.word	0x08002b81
 8002a90:	08002bdb 	.word	0x08002bdb
 8002a94:	08002ca3 	.word	0x08002ca3
 8002a98:	08002ca3 	.word	0x08002ca3
 8002a9c:	08002b6f 	.word	0x08002b6f
 8002aa0:	08002c1d 	.word	0x08002c1d
 8002aa4:	08002c29 	.word	0x08002c29
 8002aa8:	08002c35 	.word	0x08002c35
 8002aac:	08002c5b 	.word	0x08002c5b
 8002ab0:	08002c81 	.word	0x08002c81
 8002ab4:	08002c8f 	.word	0x08002c8f
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8002ab8:	4b7f      	ldr	r3, [pc, #508]	; (8002cb8 <AUDIO_PLAYER_Process+0x264>)
 8002aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	4b7e      	ldr	r3, [pc, #504]	; (8002cbc <AUDIO_PLAYER_Process+0x268>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d306      	bcc.n	8002ad6 <AUDIO_PLAYER_Process+0x82>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002ac8:	2002      	movs	r0, #2
 8002aca:	f7fd fda7 	bl	800061c <AUDIO_OUT_Stop>
      AUDIO_PLAYER_Start(idx);
 8002ace:	79bb      	ldrb	r3, [r7, #6]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff5f 	bl	8002994 <AUDIO_PLAYER_Start>
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8002ad6:	4b78      	ldr	r3, [pc, #480]	; (8002cb8 <AUDIO_PLAYER_Process+0x264>)
 8002ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d11e      	bne.n	8002b20 <AUDIO_PLAYER_Process+0xcc>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8002ae2:	f107 0308 	add.w	r3, r7, #8
 8002ae6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002aea:	4973      	ldr	r1, [pc, #460]	; (8002cb8 <AUDIO_PLAYER_Process+0x264>)
 8002aec:	4874      	ldr	r0, [pc, #464]	; (8002cc0 <AUDIO_PLAYER_Process+0x26c>)
 8002aee:	f00d fceb 	bl	80104c8 <f_read>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d004      	beq.n	8002b02 <AUDIO_PLAYER_Process+0xae>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002af8:	2002      	movs	r0, #2
 8002afa:	f7fd fd8f 	bl	800061c <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8002afe:	2301      	movs	r3, #1
 8002b00:	e0d3      	b.n	8002caa <AUDIO_PLAYER_Process+0x256>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8002b02:	4b6d      	ldr	r3, [pc, #436]	; (8002cb8 <AUDIO_PLAYER_Process+0x264>)
 8002b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8002b0c:	4b6a      	ldr	r3, [pc, #424]	; (8002cb8 <AUDIO_PLAYER_Process+0x264>)
 8002b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4413      	add	r3, r2
 8002b18:	4a67      	ldr	r2, [pc, #412]	; (8002cb8 <AUDIO_PLAYER_Process+0x264>)
 8002b1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b1e:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 8002b20:	4b65      	ldr	r3, [pc, #404]	; (8002cb8 <AUDIO_PLAYER_Process+0x264>)
 8002b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	f040 80bc 	bne.w	8002ca6 <AUDIO_PLAYER_Process+0x252>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8002b2e:	f107 0308 	add.w	r3, r7, #8
 8002b32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b36:	4963      	ldr	r1, [pc, #396]	; (8002cc4 <AUDIO_PLAYER_Process+0x270>)
 8002b38:	4861      	ldr	r0, [pc, #388]	; (8002cc0 <AUDIO_PLAYER_Process+0x26c>)
 8002b3a:	f00d fcc5 	bl	80104c8 <f_read>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d004      	beq.n	8002b4e <AUDIO_PLAYER_Process+0xfa>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002b44:	2002      	movs	r0, #2
 8002b46:	f7fd fd69 	bl	800061c <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e0ad      	b.n	8002caa <AUDIO_PLAYER_Process+0x256>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8002b4e:	4b5a      	ldr	r3, [pc, #360]	; (8002cb8 <AUDIO_PLAYER_Process+0x264>)
 8002b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8002b58:	4b57      	ldr	r3, [pc, #348]	; (8002cb8 <AUDIO_PLAYER_Process+0x264>)
 8002b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	4413      	add	r3, r2
 8002b64:	4a54      	ldr	r2, [pc, #336]	; (8002cb8 <AUDIO_PLAYER_Process+0x264>)
 8002b66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b6a:	6053      	str	r3, [r2, #4]
    }
    break;
 8002b6c:	e09b      	b.n	8002ca6 <AUDIO_PLAYER_Process+0x252>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002b6e:	2002      	movs	r0, #2
 8002b70:	f7fd fd54 	bl	800061c <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 8002b74:	4b4f      	ldr	r3, [pc, #316]	; (8002cb4 <AUDIO_PLAYER_Process+0x260>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	73fb      	strb	r3, [r7, #15]
    break;
 8002b7e:	e093      	b.n	8002ca8 <AUDIO_PLAYER_Process+0x254>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 8002b80:	4b51      	ldr	r3, [pc, #324]	; (8002cc8 <AUDIO_PLAYER_Process+0x274>)
 8002b82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3301      	adds	r3, #1
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	b21a      	sxth	r2, r3
 8002b8e:	4b4e      	ldr	r3, [pc, #312]	; (8002cc8 <AUDIO_PLAYER_Process+0x274>)
 8002b90:	801a      	strh	r2, [r3, #0]
 8002b92:	4b4d      	ldr	r3, [pc, #308]	; (8002cc8 <AUDIO_PLAYER_Process+0x274>)
 8002b94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b98:	461c      	mov	r4, r3
 8002b9a:	f7fe f901 	bl	8000da0 <AUDIO_GetWavObjectNumber>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	429c      	cmp	r4, r3
 8002ba2:	db09      	blt.n	8002bb8 <AUDIO_PLAYER_Process+0x164>
    {
    	if (isLoop)
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <AUDIO_PLAYER_Process+0x15e>
    	{
    		FilePos = 0;
 8002baa:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <AUDIO_PLAYER_Process+0x274>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	801a      	strh	r2, [r3, #0]
 8002bb0:	e002      	b.n	8002bb8 <AUDIO_PLAYER_Process+0x164>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 8002bb2:	4b40      	ldr	r3, [pc, #256]	; (8002cb4 <AUDIO_PLAYER_Process+0x260>)
 8002bb4:	2209      	movs	r2, #9
 8002bb6:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002bb8:	2002      	movs	r0, #2
 8002bba:	f7fd fd2f 	bl	800061c <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8002bbe:	4b42      	ldr	r3, [pc, #264]	; (8002cc8 <AUDIO_PLAYER_Process+0x274>)
 8002bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fee4 	bl	8002994 <AUDIO_PLAYER_Start>
	AUDIO_OUT_SetVolume(uwVolume);
 8002bcc:	4b3f      	ldr	r3, [pc, #252]	; (8002ccc <AUDIO_PLAYER_Process+0x278>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fd fd4a 	bl	800066c <AUDIO_OUT_SetVolume>
    break;    
 8002bd8:	e066      	b.n	8002ca8 <AUDIO_PLAYER_Process+0x254>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8002bda:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <AUDIO_PLAYER_Process+0x274>)
 8002bdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	b21a      	sxth	r2, r3
 8002be8:	4b37      	ldr	r3, [pc, #220]	; (8002cc8 <AUDIO_PLAYER_Process+0x274>)
 8002bea:	801a      	strh	r2, [r3, #0]
 8002bec:	4b36      	ldr	r3, [pc, #216]	; (8002cc8 <AUDIO_PLAYER_Process+0x274>)
 8002bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	da07      	bge.n	8002c06 <AUDIO_PLAYER_Process+0x1b2>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 8002bf6:	f7fe f8d3 	bl	8000da0 <AUDIO_GetWavObjectNumber>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	b21a      	sxth	r2, r3
 8002c02:	4b31      	ldr	r3, [pc, #196]	; (8002cc8 <AUDIO_PLAYER_Process+0x274>)
 8002c04:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002c06:	2002      	movs	r0, #2
 8002c08:	f7fd fd08 	bl	800061c <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8002c0c:	4b2e      	ldr	r3, [pc, #184]	; (8002cc8 <AUDIO_PLAYER_Process+0x274>)
 8002c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff febd 	bl	8002994 <AUDIO_PLAYER_Start>
    break;   
 8002c1a:	e045      	b.n	8002ca8 <AUDIO_PLAYER_Process+0x254>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 8002c1c:	f7fd fcd2 	bl	80005c4 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8002c20:	4b24      	ldr	r3, [pc, #144]	; (8002cb4 <AUDIO_PLAYER_Process+0x260>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
    break;
 8002c26:	e03f      	b.n	8002ca8 <AUDIO_PLAYER_Process+0x254>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 8002c28:	f7fd fce2 	bl	80005f0 <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 8002c2c:	4b21      	ldr	r3, [pc, #132]	; (8002cb4 <AUDIO_PLAYER_Process+0x260>)
 8002c2e:	2203      	movs	r2, #3
 8002c30:	701a      	strb	r2, [r3, #0]
    break;
 8002c32:	e039      	b.n	8002ca8 <AUDIO_PLAYER_Process+0x254>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 8002c34:	4b25      	ldr	r3, [pc, #148]	; (8002ccc <AUDIO_PLAYER_Process+0x278>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b5a      	cmp	r3, #90	; 0x5a
 8002c3a:	d804      	bhi.n	8002c46 <AUDIO_PLAYER_Process+0x1f2>
    {
      uwVolume += 10;
 8002c3c:	4b23      	ldr	r3, [pc, #140]	; (8002ccc <AUDIO_PLAYER_Process+0x278>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	330a      	adds	r3, #10
 8002c42:	4a22      	ldr	r2, [pc, #136]	; (8002ccc <AUDIO_PLAYER_Process+0x278>)
 8002c44:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8002c46:	4b21      	ldr	r3, [pc, #132]	; (8002ccc <AUDIO_PLAYER_Process+0x278>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd fd0d 	bl	800066c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8002c52:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <AUDIO_PLAYER_Process+0x260>)
 8002c54:	2203      	movs	r2, #3
 8002c56:	701a      	strb	r2, [r3, #0]
    break;
 8002c58:	e026      	b.n	8002ca8 <AUDIO_PLAYER_Process+0x254>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 8002c5a:	4b1c      	ldr	r3, [pc, #112]	; (8002ccc <AUDIO_PLAYER_Process+0x278>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b09      	cmp	r3, #9
 8002c60:	d904      	bls.n	8002c6c <AUDIO_PLAYER_Process+0x218>
    {
      uwVolume -= 10;
 8002c62:	4b1a      	ldr	r3, [pc, #104]	; (8002ccc <AUDIO_PLAYER_Process+0x278>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3b0a      	subs	r3, #10
 8002c68:	4a18      	ldr	r2, [pc, #96]	; (8002ccc <AUDIO_PLAYER_Process+0x278>)
 8002c6a:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8002c6c:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <AUDIO_PLAYER_Process+0x278>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fd fcfa 	bl	800066c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8002c78:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <AUDIO_PLAYER_Process+0x260>)
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	701a      	strb	r2, [r3, #0]
    break;
 8002c7e:	e013      	b.n	8002ca8 <AUDIO_PLAYER_Process+0x254>
    
  case AUDIO_STATE_MUTE:
	AUDIO_OUT_SetVolume(0);
 8002c80:	2000      	movs	r0, #0
 8002c82:	f7fd fcf3 	bl	800066c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <AUDIO_PLAYER_Process+0x260>)
 8002c88:	2203      	movs	r2, #3
 8002c8a:	701a      	strb	r2, [r3, #0]
    break;
 8002c8c:	e00c      	b.n	8002ca8 <AUDIO_PLAYER_Process+0x254>

  case AUDIO_STATE_SET_VOLUME:
	AUDIO_OUT_SetVolume(uwVolume);
 8002c8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <AUDIO_PLAYER_Process+0x278>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fd fce9 	bl	800066c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8002c9a:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <AUDIO_PLAYER_Process+0x260>)
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	701a      	strb	r2, [r3, #0]
    break;
 8002ca0:	e002      	b.n	8002ca8 <AUDIO_PLAYER_Process+0x254>
  case AUDIO_STATE_WAIT:break;
  case AUDIO_STATE_IDLE:break;
  case AUDIO_STATE_INIT:break;
  default:
    /* Do Nothing */
    break;
 8002ca2:	bf00      	nop
 8002ca4:	e000      	b.n	8002ca8 <AUDIO_PLAYER_Process+0x254>
    break;
 8002ca6:	bf00      	nop
  }
  return audio_error;
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd90      	pop	{r4, r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	2000183c 	.word	0x2000183c
 8002cb8:	20000834 	.word	0x20000834
 8002cbc:	20001c1c 	.word	0x20001c1c
 8002cc0:	20001c48 	.word	0x20001c48
 8002cc4:	20001034 	.word	0x20001034
 8002cc8:	2000183e 	.word	0x2000183e
 8002ccc:	20000080 	.word	0x20000080

08002cd0 <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d104      	bne.n	8002ce6 <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8002cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	701a      	strb	r2, [r3, #0]
  }
}
 8002ce6:	bf00      	nop
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	2000183c 	.word	0x2000183c
 8002cf4:	20000834 	.word	0x20000834

08002cf8 <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002cfc:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d104      	bne.n	8002d0e <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8002d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	701a      	strb	r2, [r3, #0]
  }
}
 8002d0e:	bf00      	nop
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	2000183c 	.word	0x2000183c
 8002d1c:	20000834 	.word	0x20000834

08002d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d26:	e003      	b.n	8002d30 <LoopCopyDataInit>

08002d28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d28:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d2e:	3104      	adds	r1, #4

08002d30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d30:	480b      	ldr	r0, [pc, #44]	; (8002d60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d32:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d38:	d3f6      	bcc.n	8002d28 <CopyDataInit>
  ldr  r2, =_sbss
 8002d3a:	4a0b      	ldr	r2, [pc, #44]	; (8002d68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d3c:	e002      	b.n	8002d44 <LoopFillZerobss>

08002d3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d40:	f842 3b04 	str.w	r3, [r2], #4

08002d44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d48:	d3f9      	bcc.n	8002d3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d4a:	f7ff fcf5 	bl	8002738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d4e:	f00e fddf 	bl	8011910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d52:	f7fe fef5 	bl	8001b40 <main>
  bx  lr    
 8002d56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d58:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002d5c:	0801353c 	.word	0x0801353c
  ldr  r0, =_sdata
 8002d60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d64:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 8002d68:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 8002d6c:	20002d14 	.word	0x20002d14

08002d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d70:	e7fe      	b.n	8002d70 <ADC_IRQHandler>
	...

08002d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d78:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <HAL_Init+0x40>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0d      	ldr	r2, [pc, #52]	; (8002db4 <HAL_Init+0x40>)
 8002d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d84:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <HAL_Init+0x40>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <HAL_Init+0x40>)
 8002d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d90:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <HAL_Init+0x40>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a07      	ldr	r2, [pc, #28]	; (8002db4 <HAL_Init+0x40>)
 8002d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d9c:	2003      	movs	r0, #3
 8002d9e:	f000 f94f 	bl	8003040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002da2:	2000      	movs	r0, #0
 8002da4:	f000 f808 	bl	8002db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002da8:	f7ff fbec 	bl	8002584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40023c00 	.word	0x40023c00

08002db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dc0:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <HAL_InitTick+0x54>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <HAL_InitTick+0x58>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f967 	bl	80030aa <HAL_SYSTICK_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e00e      	b.n	8002e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b0f      	cmp	r3, #15
 8002dea:	d80a      	bhi.n	8002e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dec:	2200      	movs	r2, #0
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	f04f 30ff 	mov.w	r0, #4294967295
 8002df4:	f000 f92f 	bl	8003056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002df8:	4a06      	ldr	r2, [pc, #24]	; (8002e14 <HAL_InitTick+0x5c>)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	e000      	b.n	8002e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	2000007c 	.word	0x2000007c
 8002e10:	20000088 	.word	0x20000088
 8002e14:	20000084 	.word	0x20000084

08002e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e1c:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_IncTick+0x20>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <HAL_IncTick+0x24>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4413      	add	r3, r2
 8002e28:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <HAL_IncTick+0x24>)
 8002e2a:	6013      	str	r3, [r2, #0]
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000088 	.word	0x20000088
 8002e3c:	20002078 	.word	0x20002078

08002e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return uwTick;
 8002e44:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <HAL_GetTick+0x14>)
 8002e46:	681b      	ldr	r3, [r3, #0]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20002078 	.word	0x20002078

08002e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e60:	f7ff ffee 	bl	8002e40 <HAL_GetTick>
 8002e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d005      	beq.n	8002e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e72:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <HAL_Delay+0x44>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e7e:	bf00      	nop
 8002e80:	f7ff ffde 	bl	8002e40 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d8f7      	bhi.n	8002e80 <HAL_Delay+0x28>
  {
  }
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000088 	.word	0x20000088

08002ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ed2:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	60d3      	str	r3, [r2, #12]
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eec:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <__NVIC_GetPriorityGrouping+0x18>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	0a1b      	lsrs	r3, r3, #8
 8002ef2:	f003 0307 	and.w	r3, r3, #7
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	db0b      	blt.n	8002f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	f003 021f 	and.w	r2, r3, #31
 8002f1c:	4907      	ldr	r1, [pc, #28]	; (8002f3c <__NVIC_EnableIRQ+0x38>)
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	2001      	movs	r0, #1
 8002f26:	fa00 f202 	lsl.w	r2, r0, r2
 8002f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000e100 	.word	0xe000e100

08002f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	6039      	str	r1, [r7, #0]
 8002f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	db0a      	blt.n	8002f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	490c      	ldr	r1, [pc, #48]	; (8002f8c <__NVIC_SetPriority+0x4c>)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	0112      	lsls	r2, r2, #4
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	440b      	add	r3, r1
 8002f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f68:	e00a      	b.n	8002f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	4908      	ldr	r1, [pc, #32]	; (8002f90 <__NVIC_SetPriority+0x50>)
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	3b04      	subs	r3, #4
 8002f78:	0112      	lsls	r2, r2, #4
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	761a      	strb	r2, [r3, #24]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000e100 	.word	0xe000e100
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b089      	sub	sp, #36	; 0x24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f1c3 0307 	rsb	r3, r3, #7
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	bf28      	it	cs
 8002fb2:	2304      	movcs	r3, #4
 8002fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3304      	adds	r3, #4
 8002fba:	2b06      	cmp	r3, #6
 8002fbc:	d902      	bls.n	8002fc4 <NVIC_EncodePriority+0x30>
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3b03      	subs	r3, #3
 8002fc2:	e000      	b.n	8002fc6 <NVIC_EncodePriority+0x32>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43da      	mvns	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	401a      	ands	r2, r3
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe6:	43d9      	mvns	r1, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fec:	4313      	orrs	r3, r2
         );
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3724      	adds	r7, #36	; 0x24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3b01      	subs	r3, #1
 8003008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800300c:	d301      	bcc.n	8003012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800300e:	2301      	movs	r3, #1
 8003010:	e00f      	b.n	8003032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003012:	4a0a      	ldr	r2, [pc, #40]	; (800303c <SysTick_Config+0x40>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3b01      	subs	r3, #1
 8003018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800301a:	210f      	movs	r1, #15
 800301c:	f04f 30ff 	mov.w	r0, #4294967295
 8003020:	f7ff ff8e 	bl	8002f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <SysTick_Config+0x40>)
 8003026:	2200      	movs	r2, #0
 8003028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800302a:	4b04      	ldr	r3, [pc, #16]	; (800303c <SysTick_Config+0x40>)
 800302c:	2207      	movs	r2, #7
 800302e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	e000e010 	.word	0xe000e010

08003040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff ff29 	bl	8002ea0 <__NVIC_SetPriorityGrouping>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003056:	b580      	push	{r7, lr}
 8003058:	b086      	sub	sp, #24
 800305a:	af00      	add	r7, sp, #0
 800305c:	4603      	mov	r3, r0
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003068:	f7ff ff3e 	bl	8002ee8 <__NVIC_GetPriorityGrouping>
 800306c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	6978      	ldr	r0, [r7, #20]
 8003074:	f7ff ff8e 	bl	8002f94 <NVIC_EncodePriority>
 8003078:	4602      	mov	r2, r0
 800307a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800307e:	4611      	mov	r1, r2
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff ff5d 	bl	8002f40 <__NVIC_SetPriority>
}
 8003086:	bf00      	nop
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	4603      	mov	r3, r0
 8003096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ff31 	bl	8002f04 <__NVIC_EnableIRQ>
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff ffa2 	bl	8002ffc <SysTick_Config>
 80030b8:	4603      	mov	r3, r0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030d0:	f7ff feb6 	bl	8002e40 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e099      	b.n	8003214 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0201 	bic.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003100:	e00f      	b.n	8003122 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003102:	f7ff fe9d 	bl	8002e40 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b05      	cmp	r3, #5
 800310e:	d908      	bls.n	8003122 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2203      	movs	r2, #3
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e078      	b.n	8003214 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1e8      	bne.n	8003102 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	4b38      	ldr	r3, [pc, #224]	; (800321c <HAL_DMA_Init+0x158>)
 800313c:	4013      	ands	r3, r2
 800313e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800314e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800315a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003166:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	2b04      	cmp	r3, #4
 800317a:	d107      	bne.n	800318c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	4313      	orrs	r3, r2
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f023 0307 	bic.w	r3, r3, #7
 80031a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d117      	bne.n	80031e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4313      	orrs	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00e      	beq.n	80031e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 fb5f 	bl	800388c <DMA_CheckFifoParam>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d008      	beq.n	80031e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2240      	movs	r2, #64	; 0x40
 80031d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031e2:	2301      	movs	r3, #1
 80031e4:	e016      	b.n	8003214 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fb16 	bl	8003820 <DMA_CalcBaseAndBitshift>
 80031f4:	4603      	mov	r3, r0
 80031f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fc:	223f      	movs	r2, #63	; 0x3f
 80031fe:	409a      	lsls	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	f010803f 	.word	0xf010803f

08003220 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e050      	b.n	80032d4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d101      	bne.n	8003242 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800323e:	2302      	movs	r3, #2
 8003240:	e048      	b.n	80032d4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0201 	bic.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2200      	movs	r2, #0
 8003260:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2200      	movs	r2, #0
 8003270:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2200      	movs	r2, #0
 8003278:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2221      	movs	r2, #33	; 0x21
 8003280:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 facc 	bl	8003820 <DMA_CalcBaseAndBitshift>
 8003288:	4603      	mov	r3, r0
 800328a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	223f      	movs	r2, #63	; 0x3f
 80032b6:	409a      	lsls	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_DMA_Start_IT+0x26>
 80032fe:	2302      	movs	r3, #2
 8003300:	e040      	b.n	8003384 <HAL_DMA_Start_IT+0xa8>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b01      	cmp	r3, #1
 8003314:	d12f      	bne.n	8003376 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2202      	movs	r2, #2
 800331a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fa4a 	bl	80037c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003334:	223f      	movs	r2, #63	; 0x3f
 8003336:	409a      	lsls	r2, r3
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0216 	orr.w	r2, r2, #22
 800334a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	2b00      	cmp	r3, #0
 8003352:	d007      	beq.n	8003364 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0208 	orr.w	r2, r2, #8
 8003362:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	e005      	b.n	8003382 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800337e:	2302      	movs	r3, #2
 8003380:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003382:	7dfb      	ldrb	r3, [r7, #23]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003398:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800339a:	f7ff fd51 	bl	8002e40 <HAL_GetTick>
 800339e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d008      	beq.n	80033be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2280      	movs	r2, #128	; 0x80
 80033b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e052      	b.n	8003464 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0216 	bic.w	r2, r2, #22
 80033cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695a      	ldr	r2, [r3, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d103      	bne.n	80033ee <HAL_DMA_Abort+0x62>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d007      	beq.n	80033fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0208 	bic.w	r2, r2, #8
 80033fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800340e:	e013      	b.n	8003438 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003410:	f7ff fd16 	bl	8002e40 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b05      	cmp	r3, #5
 800341c:	d90c      	bls.n	8003438 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2220      	movs	r2, #32
 8003422:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2203      	movs	r2, #3
 8003428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e015      	b.n	8003464 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1e4      	bne.n	8003410 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344a:	223f      	movs	r2, #63	; 0x3f
 800344c:	409a      	lsls	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d004      	beq.n	800348a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2280      	movs	r2, #128	; 0x80
 8003484:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e00c      	b.n	80034a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2205      	movs	r2, #5
 800348e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0201 	bic.w	r2, r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034bc:	4b8e      	ldr	r3, [pc, #568]	; (80036f8 <HAL_DMA_IRQHandler+0x248>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a8e      	ldr	r2, [pc, #568]	; (80036fc <HAL_DMA_IRQHandler+0x24c>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	0a9b      	lsrs	r3, r3, #10
 80034c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034da:	2208      	movs	r2, #8
 80034dc:	409a      	lsls	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d01a      	beq.n	800351c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d013      	beq.n	800351c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0204 	bic.w	r2, r2, #4
 8003502:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003508:	2208      	movs	r2, #8
 800350a:	409a      	lsls	r2, r3
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003514:	f043 0201 	orr.w	r2, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003520:	2201      	movs	r2, #1
 8003522:	409a      	lsls	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d012      	beq.n	8003552 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00b      	beq.n	8003552 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353e:	2201      	movs	r2, #1
 8003540:	409a      	lsls	r2, r3
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354a:	f043 0202 	orr.w	r2, r3, #2
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003556:	2204      	movs	r2, #4
 8003558:	409a      	lsls	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4013      	ands	r3, r2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d012      	beq.n	8003588 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00b      	beq.n	8003588 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003574:	2204      	movs	r2, #4
 8003576:	409a      	lsls	r2, r3
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003580:	f043 0204 	orr.w	r2, r3, #4
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358c:	2210      	movs	r2, #16
 800358e:	409a      	lsls	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d043      	beq.n	8003620 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d03c      	beq.n	8003620 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035aa:	2210      	movs	r2, #16
 80035ac:	409a      	lsls	r2, r3
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d018      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d108      	bne.n	80035e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d024      	beq.n	8003620 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	4798      	blx	r3
 80035de:	e01f      	b.n	8003620 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d01b      	beq.n	8003620 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	4798      	blx	r3
 80035f0:	e016      	b.n	8003620 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d107      	bne.n	8003610 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0208 	bic.w	r2, r2, #8
 800360e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003624:	2220      	movs	r2, #32
 8003626:	409a      	lsls	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4013      	ands	r3, r2
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 808f 	beq.w	8003750 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8087 	beq.w	8003750 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003646:	2220      	movs	r2, #32
 8003648:	409a      	lsls	r2, r3
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b05      	cmp	r3, #5
 8003658:	d136      	bne.n	80036c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0216 	bic.w	r2, r2, #22
 8003668:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695a      	ldr	r2, [r3, #20]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003678:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	d103      	bne.n	800368a <HAL_DMA_IRQHandler+0x1da>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003686:	2b00      	cmp	r3, #0
 8003688:	d007      	beq.n	800369a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0208 	bic.w	r2, r2, #8
 8003698:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369e:	223f      	movs	r2, #63	; 0x3f
 80036a0:	409a      	lsls	r2, r3
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d07e      	beq.n	80037bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	4798      	blx	r3
        }
        return;
 80036c6:	e079      	b.n	80037bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d01d      	beq.n	8003712 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10d      	bne.n	8003700 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d031      	beq.n	8003750 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	4798      	blx	r3
 80036f4:	e02c      	b.n	8003750 <HAL_DMA_IRQHandler+0x2a0>
 80036f6:	bf00      	nop
 80036f8:	2000007c 	.word	0x2000007c
 80036fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003704:	2b00      	cmp	r3, #0
 8003706:	d023      	beq.n	8003750 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	4798      	blx	r3
 8003710:	e01e      	b.n	8003750 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10f      	bne.n	8003740 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0210 	bic.w	r2, r2, #16
 800372e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003754:	2b00      	cmp	r3, #0
 8003756:	d032      	beq.n	80037be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d022      	beq.n	80037aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2205      	movs	r2, #5
 8003768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0201 	bic.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	3301      	adds	r3, #1
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	429a      	cmp	r2, r3
 8003786:	d307      	bcc.n	8003798 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f2      	bne.n	800377c <HAL_DMA_IRQHandler+0x2cc>
 8003796:	e000      	b.n	800379a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003798:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	4798      	blx	r3
 80037ba:	e000      	b.n	80037be <HAL_DMA_IRQHandler+0x30e>
        return;
 80037bc:	bf00      	nop
    }
  }
}
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b40      	cmp	r3, #64	; 0x40
 80037f0:	d108      	bne.n	8003804 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003802:	e007      	b.n	8003814 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	60da      	str	r2, [r3, #12]
}
 8003814:	bf00      	nop
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	3b10      	subs	r3, #16
 8003830:	4a14      	ldr	r2, [pc, #80]	; (8003884 <DMA_CalcBaseAndBitshift+0x64>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	091b      	lsrs	r3, r3, #4
 8003838:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800383a:	4a13      	ldr	r2, [pc, #76]	; (8003888 <DMA_CalcBaseAndBitshift+0x68>)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b03      	cmp	r3, #3
 800384c:	d909      	bls.n	8003862 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003856:	f023 0303 	bic.w	r3, r3, #3
 800385a:	1d1a      	adds	r2, r3, #4
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	659a      	str	r2, [r3, #88]	; 0x58
 8003860:	e007      	b.n	8003872 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800386a:	f023 0303 	bic.w	r3, r3, #3
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	aaaaaaab 	.word	0xaaaaaaab
 8003888:	080130d0 	.word	0x080130d0

0800388c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d11f      	bne.n	80038e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d856      	bhi.n	800395a <DMA_CheckFifoParam+0xce>
 80038ac:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <DMA_CheckFifoParam+0x28>)
 80038ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b2:	bf00      	nop
 80038b4:	080038c5 	.word	0x080038c5
 80038b8:	080038d7 	.word	0x080038d7
 80038bc:	080038c5 	.word	0x080038c5
 80038c0:	0800395b 	.word	0x0800395b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d046      	beq.n	800395e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d4:	e043      	b.n	800395e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038de:	d140      	bne.n	8003962 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e4:	e03d      	b.n	8003962 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ee:	d121      	bne.n	8003934 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d837      	bhi.n	8003966 <DMA_CheckFifoParam+0xda>
 80038f6:	a201      	add	r2, pc, #4	; (adr r2, 80038fc <DMA_CheckFifoParam+0x70>)
 80038f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fc:	0800390d 	.word	0x0800390d
 8003900:	08003913 	.word	0x08003913
 8003904:	0800390d 	.word	0x0800390d
 8003908:	08003925 	.word	0x08003925
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
      break;
 8003910:	e030      	b.n	8003974 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d025      	beq.n	800396a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003922:	e022      	b.n	800396a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800392c:	d11f      	bne.n	800396e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003932:	e01c      	b.n	800396e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d903      	bls.n	8003942 <DMA_CheckFifoParam+0xb6>
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b03      	cmp	r3, #3
 800393e:	d003      	beq.n	8003948 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003940:	e018      	b.n	8003974 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
      break;
 8003946:	e015      	b.n	8003974 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00e      	beq.n	8003972 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
      break;
 8003958:	e00b      	b.n	8003972 <DMA_CheckFifoParam+0xe6>
      break;
 800395a:	bf00      	nop
 800395c:	e00a      	b.n	8003974 <DMA_CheckFifoParam+0xe8>
      break;
 800395e:	bf00      	nop
 8003960:	e008      	b.n	8003974 <DMA_CheckFifoParam+0xe8>
      break;
 8003962:	bf00      	nop
 8003964:	e006      	b.n	8003974 <DMA_CheckFifoParam+0xe8>
      break;
 8003966:	bf00      	nop
 8003968:	e004      	b.n	8003974 <DMA_CheckFifoParam+0xe8>
      break;
 800396a:	bf00      	nop
 800396c:	e002      	b.n	8003974 <DMA_CheckFifoParam+0xe8>
      break;   
 800396e:	bf00      	nop
 8003970:	e000      	b.n	8003974 <DMA_CheckFifoParam+0xe8>
      break;
 8003972:	bf00      	nop
    }
  } 
  
  return status; 
 8003974:	7bfb      	ldrb	r3, [r7, #15]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop

08003984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003984:	b480      	push	{r7}
 8003986:	b089      	sub	sp, #36	; 0x24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003992:	2300      	movs	r3, #0
 8003994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003996:	2300      	movs	r3, #0
 8003998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800399a:	2300      	movs	r3, #0
 800399c:	61fb      	str	r3, [r7, #28]
 800399e:	e159      	b.n	8003c54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039a0:	2201      	movs	r2, #1
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4013      	ands	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	f040 8148 	bne.w	8003c4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d005      	beq.n	80039d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d130      	bne.n	8003a38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	2203      	movs	r2, #3
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43db      	mvns	r3, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4013      	ands	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f003 0201 	and.w	r2, r3, #1
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 0303 	and.w	r3, r3, #3
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d017      	beq.n	8003a74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	2203      	movs	r2, #3
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d123      	bne.n	8003ac8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	08da      	lsrs	r2, r3, #3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3208      	adds	r2, #8
 8003a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	220f      	movs	r2, #15
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	08da      	lsrs	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3208      	adds	r2, #8
 8003ac2:	69b9      	ldr	r1, [r7, #24]
 8003ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4013      	ands	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 0203 	and.w	r2, r3, #3
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80a2 	beq.w	8003c4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	4b57      	ldr	r3, [pc, #348]	; (8003c6c <HAL_GPIO_Init+0x2e8>)
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	4a56      	ldr	r2, [pc, #344]	; (8003c6c <HAL_GPIO_Init+0x2e8>)
 8003b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b18:	6453      	str	r3, [r2, #68]	; 0x44
 8003b1a:	4b54      	ldr	r3, [pc, #336]	; (8003c6c <HAL_GPIO_Init+0x2e8>)
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b26:	4a52      	ldr	r2, [pc, #328]	; (8003c70 <HAL_GPIO_Init+0x2ec>)
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	089b      	lsrs	r3, r3, #2
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	220f      	movs	r2, #15
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4013      	ands	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a49      	ldr	r2, [pc, #292]	; (8003c74 <HAL_GPIO_Init+0x2f0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d019      	beq.n	8003b86 <HAL_GPIO_Init+0x202>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a48      	ldr	r2, [pc, #288]	; (8003c78 <HAL_GPIO_Init+0x2f4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d013      	beq.n	8003b82 <HAL_GPIO_Init+0x1fe>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a47      	ldr	r2, [pc, #284]	; (8003c7c <HAL_GPIO_Init+0x2f8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00d      	beq.n	8003b7e <HAL_GPIO_Init+0x1fa>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a46      	ldr	r2, [pc, #280]	; (8003c80 <HAL_GPIO_Init+0x2fc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d007      	beq.n	8003b7a <HAL_GPIO_Init+0x1f6>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a45      	ldr	r2, [pc, #276]	; (8003c84 <HAL_GPIO_Init+0x300>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d101      	bne.n	8003b76 <HAL_GPIO_Init+0x1f2>
 8003b72:	2304      	movs	r3, #4
 8003b74:	e008      	b.n	8003b88 <HAL_GPIO_Init+0x204>
 8003b76:	2307      	movs	r3, #7
 8003b78:	e006      	b.n	8003b88 <HAL_GPIO_Init+0x204>
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e004      	b.n	8003b88 <HAL_GPIO_Init+0x204>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e002      	b.n	8003b88 <HAL_GPIO_Init+0x204>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <HAL_GPIO_Init+0x204>
 8003b86:	2300      	movs	r3, #0
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	f002 0203 	and.w	r2, r2, #3
 8003b8e:	0092      	lsls	r2, r2, #2
 8003b90:	4093      	lsls	r3, r2
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b98:	4935      	ldr	r1, [pc, #212]	; (8003c70 <HAL_GPIO_Init+0x2ec>)
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	089b      	lsrs	r3, r3, #2
 8003b9e:	3302      	adds	r3, #2
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ba6:	4b38      	ldr	r3, [pc, #224]	; (8003c88 <HAL_GPIO_Init+0x304>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bca:	4a2f      	ldr	r2, [pc, #188]	; (8003c88 <HAL_GPIO_Init+0x304>)
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bd0:	4b2d      	ldr	r3, [pc, #180]	; (8003c88 <HAL_GPIO_Init+0x304>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bf4:	4a24      	ldr	r2, [pc, #144]	; (8003c88 <HAL_GPIO_Init+0x304>)
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bfa:	4b23      	ldr	r3, [pc, #140]	; (8003c88 <HAL_GPIO_Init+0x304>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	43db      	mvns	r3, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4013      	ands	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c1e:	4a1a      	ldr	r2, [pc, #104]	; (8003c88 <HAL_GPIO_Init+0x304>)
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c24:	4b18      	ldr	r3, [pc, #96]	; (8003c88 <HAL_GPIO_Init+0x304>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4013      	ands	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c48:	4a0f      	ldr	r2, [pc, #60]	; (8003c88 <HAL_GPIO_Init+0x304>)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	3301      	adds	r3, #1
 8003c52:	61fb      	str	r3, [r7, #28]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	2b0f      	cmp	r3, #15
 8003c58:	f67f aea2 	bls.w	80039a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	bf00      	nop
 8003c60:	3724      	adds	r7, #36	; 0x24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40013800 	.word	0x40013800
 8003c74:	40020000 	.word	0x40020000
 8003c78:	40020400 	.word	0x40020400
 8003c7c:	40020800 	.word	0x40020800
 8003c80:	40020c00 	.word	0x40020c00
 8003c84:	40021000 	.word	0x40021000
 8003c88:	40013c00 	.word	0x40013c00

08003c8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	e0bb      	b.n	8003e20 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ca8:	2201      	movs	r2, #1
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	f040 80ab 	bne.w	8003e1a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003cc4:	4a5c      	ldr	r2, [pc, #368]	; (8003e38 <HAL_GPIO_DeInit+0x1ac>)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	089b      	lsrs	r3, r3, #2
 8003cca:	3302      	adds	r3, #2
 8003ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	220f      	movs	r2, #15
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a54      	ldr	r2, [pc, #336]	; (8003e3c <HAL_GPIO_DeInit+0x1b0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d019      	beq.n	8003d22 <HAL_GPIO_DeInit+0x96>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a53      	ldr	r2, [pc, #332]	; (8003e40 <HAL_GPIO_DeInit+0x1b4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d013      	beq.n	8003d1e <HAL_GPIO_DeInit+0x92>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a52      	ldr	r2, [pc, #328]	; (8003e44 <HAL_GPIO_DeInit+0x1b8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00d      	beq.n	8003d1a <HAL_GPIO_DeInit+0x8e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a51      	ldr	r2, [pc, #324]	; (8003e48 <HAL_GPIO_DeInit+0x1bc>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d007      	beq.n	8003d16 <HAL_GPIO_DeInit+0x8a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a50      	ldr	r2, [pc, #320]	; (8003e4c <HAL_GPIO_DeInit+0x1c0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d101      	bne.n	8003d12 <HAL_GPIO_DeInit+0x86>
 8003d0e:	2304      	movs	r3, #4
 8003d10:	e008      	b.n	8003d24 <HAL_GPIO_DeInit+0x98>
 8003d12:	2307      	movs	r3, #7
 8003d14:	e006      	b.n	8003d24 <HAL_GPIO_DeInit+0x98>
 8003d16:	2303      	movs	r3, #3
 8003d18:	e004      	b.n	8003d24 <HAL_GPIO_DeInit+0x98>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e002      	b.n	8003d24 <HAL_GPIO_DeInit+0x98>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <HAL_GPIO_DeInit+0x98>
 8003d22:	2300      	movs	r3, #0
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	f002 0203 	and.w	r2, r2, #3
 8003d2a:	0092      	lsls	r2, r2, #2
 8003d2c:	4093      	lsls	r3, r2
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d132      	bne.n	8003d9a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003d34:	4b46      	ldr	r3, [pc, #280]	; (8003e50 <HAL_GPIO_DeInit+0x1c4>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	4944      	ldr	r1, [pc, #272]	; (8003e50 <HAL_GPIO_DeInit+0x1c4>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003d42:	4b43      	ldr	r3, [pc, #268]	; (8003e50 <HAL_GPIO_DeInit+0x1c4>)
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	4941      	ldr	r1, [pc, #260]	; (8003e50 <HAL_GPIO_DeInit+0x1c4>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003d50:	4b3f      	ldr	r3, [pc, #252]	; (8003e50 <HAL_GPIO_DeInit+0x1c4>)
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	43db      	mvns	r3, r3
 8003d58:	493d      	ldr	r1, [pc, #244]	; (8003e50 <HAL_GPIO_DeInit+0x1c4>)
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003d5e:	4b3c      	ldr	r3, [pc, #240]	; (8003e50 <HAL_GPIO_DeInit+0x1c4>)
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	43db      	mvns	r3, r3
 8003d66:	493a      	ldr	r1, [pc, #232]	; (8003e50 <HAL_GPIO_DeInit+0x1c4>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	220f      	movs	r2, #15
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003d7c:	4a2e      	ldr	r2, [pc, #184]	; (8003e38 <HAL_GPIO_DeInit+0x1ac>)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	089b      	lsrs	r3, r3, #2
 8003d82:	3302      	adds	r3, #2
 8003d84:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	43da      	mvns	r2, r3
 8003d8c:	482a      	ldr	r0, [pc, #168]	; (8003e38 <HAL_GPIO_DeInit+0x1ac>)
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	089b      	lsrs	r3, r3, #2
 8003d92:	400a      	ands	r2, r1
 8003d94:	3302      	adds	r3, #2
 8003d96:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	2103      	movs	r1, #3
 8003da4:	fa01 f303 	lsl.w	r3, r1, r3
 8003da8:	43db      	mvns	r3, r3
 8003daa:	401a      	ands	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	08da      	lsrs	r2, r3, #3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3208      	adds	r2, #8
 8003db8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	220f      	movs	r2, #15
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	08d2      	lsrs	r2, r2, #3
 8003dd0:	4019      	ands	r1, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3208      	adds	r2, #8
 8003dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	2103      	movs	r1, #3
 8003de4:	fa01 f303 	lsl.w	r3, r1, r3
 8003de8:	43db      	mvns	r3, r3
 8003dea:	401a      	ands	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	2101      	movs	r1, #1
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	401a      	ands	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	2103      	movs	r1, #3
 8003e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e12:	43db      	mvns	r3, r3
 8003e14:	401a      	ands	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2b0f      	cmp	r3, #15
 8003e24:	f67f af40 	bls.w	8003ca8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40013800 	.word	0x40013800
 8003e3c:	40020000 	.word	0x40020000
 8003e40:	40020400 	.word	0x40020400
 8003e44:	40020800 	.word	0x40020800
 8003e48:	40020c00 	.word	0x40020c00
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	40013c00 	.word	0x40013c00

08003e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	807b      	strh	r3, [r7, #2]
 8003e60:	4613      	mov	r3, r2
 8003e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e64:	787b      	ldrb	r3, [r7, #1]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e6a:	887a      	ldrh	r2, [r7, #2]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e70:	e003      	b.n	8003e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e72:	887b      	ldrh	r3, [r7, #2]
 8003e74:	041a      	lsls	r2, r3, #16
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	619a      	str	r2, [r3, #24]
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e92:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e94:	695a      	ldr	r2, [r3, #20]
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d006      	beq.n	8003eac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e9e:	4a05      	ldr	r2, [pc, #20]	; (8003eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ea0:	88fb      	ldrh	r3, [r7, #6]
 8003ea2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fe f83a 	bl	8001f20 <HAL_GPIO_EXTI_Callback>
  }
}
 8003eac:	bf00      	nop
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40013c00 	.word	0x40013c00

08003eb8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eba:	b08f      	sub	sp, #60	; 0x3c
 8003ebc:	af0a      	add	r7, sp, #40	; 0x28
 8003ebe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e054      	b.n	8003f74 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d106      	bne.n	8003eea <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f00d f935 	bl	8011154 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2203      	movs	r2, #3
 8003eee:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f005 fd3f 	bl	800998c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	687e      	ldr	r6, [r7, #4]
 8003f16:	466d      	mov	r5, sp
 8003f18:	f106 0410 	add.w	r4, r6, #16
 8003f1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f28:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f2c:	1d33      	adds	r3, r6, #4
 8003f2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f30:	6838      	ldr	r0, [r7, #0]
 8003f32:	f005 fcb9 	bl	80098a8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f005 fd36 	bl	80099ae <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	687e      	ldr	r6, [r7, #4]
 8003f4a:	466d      	mov	r5, sp
 8003f4c:	f106 0410 	add.w	r4, r6, #16
 8003f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f60:	1d33      	adds	r3, r6, #4
 8003f62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f64:	6838      	ldr	r0, [r7, #0]
 8003f66:	f005 febf 	bl	8009ce8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f7c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003f7c:	b590      	push	{r4, r7, lr}
 8003f7e:	b089      	sub	sp, #36	; 0x24
 8003f80:	af04      	add	r7, sp, #16
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	4608      	mov	r0, r1
 8003f86:	4611      	mov	r1, r2
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	70fb      	strb	r3, [r7, #3]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	70bb      	strb	r3, [r7, #2]
 8003f92:	4613      	mov	r3, r2
 8003f94:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_HCD_HC_Init+0x28>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e076      	b.n	8004092 <HAL_HCD_HC_Init+0x116>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	212c      	movs	r1, #44	; 0x2c
 8003fb2:	fb01 f303 	mul.w	r3, r1, r3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	333d      	adds	r3, #61	; 0x3d
 8003fba:	2200      	movs	r2, #0
 8003fbc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	212c      	movs	r1, #44	; 0x2c
 8003fc4:	fb01 f303 	mul.w	r3, r1, r3
 8003fc8:	4413      	add	r3, r2
 8003fca:	3338      	adds	r3, #56	; 0x38
 8003fcc:	787a      	ldrb	r2, [r7, #1]
 8003fce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	212c      	movs	r1, #44	; 0x2c
 8003fd6:	fb01 f303 	mul.w	r3, r1, r3
 8003fda:	4413      	add	r3, r2
 8003fdc:	3340      	adds	r3, #64	; 0x40
 8003fde:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003fe0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003fe2:	78fb      	ldrb	r3, [r7, #3]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	212c      	movs	r1, #44	; 0x2c
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	4413      	add	r3, r2
 8003fee:	3339      	adds	r3, #57	; 0x39
 8003ff0:	78fa      	ldrb	r2, [r7, #3]
 8003ff2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	212c      	movs	r1, #44	; 0x2c
 8003ffa:	fb01 f303 	mul.w	r3, r1, r3
 8003ffe:	4413      	add	r3, r2
 8004000:	333f      	adds	r3, #63	; 0x3f
 8004002:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004006:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004008:	78fb      	ldrb	r3, [r7, #3]
 800400a:	78ba      	ldrb	r2, [r7, #2]
 800400c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004010:	b2d0      	uxtb	r0, r2
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	212c      	movs	r1, #44	; 0x2c
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	4413      	add	r3, r2
 800401c:	333a      	adds	r3, #58	; 0x3a
 800401e:	4602      	mov	r2, r0
 8004020:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004022:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004026:	2b00      	cmp	r3, #0
 8004028:	da09      	bge.n	800403e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	212c      	movs	r1, #44	; 0x2c
 8004030:	fb01 f303 	mul.w	r3, r1, r3
 8004034:	4413      	add	r3, r2
 8004036:	333b      	adds	r3, #59	; 0x3b
 8004038:	2201      	movs	r2, #1
 800403a:	701a      	strb	r2, [r3, #0]
 800403c:	e008      	b.n	8004050 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	212c      	movs	r1, #44	; 0x2c
 8004044:	fb01 f303 	mul.w	r3, r1, r3
 8004048:	4413      	add	r3, r2
 800404a:	333b      	adds	r3, #59	; 0x3b
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	212c      	movs	r1, #44	; 0x2c
 8004056:	fb01 f303 	mul.w	r3, r1, r3
 800405a:	4413      	add	r3, r2
 800405c:	333c      	adds	r3, #60	; 0x3c
 800405e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004062:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	787c      	ldrb	r4, [r7, #1]
 800406a:	78ba      	ldrb	r2, [r7, #2]
 800406c:	78f9      	ldrb	r1, [r7, #3]
 800406e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004070:	9302      	str	r3, [sp, #8]
 8004072:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004076:	9301      	str	r3, [sp, #4]
 8004078:	f897 3020 	ldrb.w	r3, [r7, #32]
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	4623      	mov	r3, r4
 8004080:	f005 ffb8 	bl	8009ff4 <USB_HC_Init>
 8004084:	4603      	mov	r3, r0
 8004086:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004090:	7bfb      	ldrb	r3, [r7, #15]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	bd90      	pop	{r4, r7, pc}

0800409a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	460b      	mov	r3, r1
 80040a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_HCD_HC_Halt+0x1e>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e00f      	b.n	80040d8 <HAL_HCD_HC_Halt+0x3e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	78fa      	ldrb	r2, [r7, #3]
 80040c6:	4611      	mov	r1, r2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f006 fa08 	bl	800a4de <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	4608      	mov	r0, r1
 80040ea:	4611      	mov	r1, r2
 80040ec:	461a      	mov	r2, r3
 80040ee:	4603      	mov	r3, r0
 80040f0:	70fb      	strb	r3, [r7, #3]
 80040f2:	460b      	mov	r3, r1
 80040f4:	70bb      	strb	r3, [r7, #2]
 80040f6:	4613      	mov	r3, r2
 80040f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80040fa:	78fb      	ldrb	r3, [r7, #3]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	212c      	movs	r1, #44	; 0x2c
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	4413      	add	r3, r2
 8004106:	333b      	adds	r3, #59	; 0x3b
 8004108:	78ba      	ldrb	r2, [r7, #2]
 800410a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	212c      	movs	r1, #44	; 0x2c
 8004112:	fb01 f303 	mul.w	r3, r1, r3
 8004116:	4413      	add	r3, r2
 8004118:	333f      	adds	r3, #63	; 0x3f
 800411a:	787a      	ldrb	r2, [r7, #1]
 800411c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800411e:	7c3b      	ldrb	r3, [r7, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d112      	bne.n	800414a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	212c      	movs	r1, #44	; 0x2c
 800412a:	fb01 f303 	mul.w	r3, r1, r3
 800412e:	4413      	add	r3, r2
 8004130:	3342      	adds	r3, #66	; 0x42
 8004132:	2203      	movs	r2, #3
 8004134:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004136:	78fb      	ldrb	r3, [r7, #3]
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	212c      	movs	r1, #44	; 0x2c
 800413c:	fb01 f303 	mul.w	r3, r1, r3
 8004140:	4413      	add	r3, r2
 8004142:	333d      	adds	r3, #61	; 0x3d
 8004144:	7f3a      	ldrb	r2, [r7, #28]
 8004146:	701a      	strb	r2, [r3, #0]
 8004148:	e008      	b.n	800415c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800414a:	78fb      	ldrb	r3, [r7, #3]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	212c      	movs	r1, #44	; 0x2c
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	4413      	add	r3, r2
 8004156:	3342      	adds	r3, #66	; 0x42
 8004158:	2202      	movs	r2, #2
 800415a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800415c:	787b      	ldrb	r3, [r7, #1]
 800415e:	2b03      	cmp	r3, #3
 8004160:	f200 80c6 	bhi.w	80042f0 <HAL_HCD_HC_SubmitRequest+0x210>
 8004164:	a201      	add	r2, pc, #4	; (adr r2, 800416c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416a:	bf00      	nop
 800416c:	0800417d 	.word	0x0800417d
 8004170:	080042dd 	.word	0x080042dd
 8004174:	080041e1 	.word	0x080041e1
 8004178:	0800425f 	.word	0x0800425f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800417c:	7c3b      	ldrb	r3, [r7, #16]
 800417e:	2b01      	cmp	r3, #1
 8004180:	f040 80b8 	bne.w	80042f4 <HAL_HCD_HC_SubmitRequest+0x214>
 8004184:	78bb      	ldrb	r3, [r7, #2]
 8004186:	2b00      	cmp	r3, #0
 8004188:	f040 80b4 	bne.w	80042f4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800418c:	8b3b      	ldrh	r3, [r7, #24]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d108      	bne.n	80041a4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004192:	78fb      	ldrb	r3, [r7, #3]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	212c      	movs	r1, #44	; 0x2c
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	4413      	add	r3, r2
 800419e:	3355      	adds	r3, #85	; 0x55
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	212c      	movs	r1, #44	; 0x2c
 80041aa:	fb01 f303 	mul.w	r3, r1, r3
 80041ae:	4413      	add	r3, r2
 80041b0:	3355      	adds	r3, #85	; 0x55
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d109      	bne.n	80041cc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	212c      	movs	r1, #44	; 0x2c
 80041be:	fb01 f303 	mul.w	r3, r1, r3
 80041c2:	4413      	add	r3, r2
 80041c4:	3342      	adds	r3, #66	; 0x42
 80041c6:	2200      	movs	r2, #0
 80041c8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80041ca:	e093      	b.n	80042f4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	212c      	movs	r1, #44	; 0x2c
 80041d2:	fb01 f303 	mul.w	r3, r1, r3
 80041d6:	4413      	add	r3, r2
 80041d8:	3342      	adds	r3, #66	; 0x42
 80041da:	2202      	movs	r2, #2
 80041dc:	701a      	strb	r2, [r3, #0]
      break;
 80041de:	e089      	b.n	80042f4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80041e0:	78bb      	ldrb	r3, [r7, #2]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d11d      	bne.n	8004222 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	212c      	movs	r1, #44	; 0x2c
 80041ec:	fb01 f303 	mul.w	r3, r1, r3
 80041f0:	4413      	add	r3, r2
 80041f2:	3355      	adds	r3, #85	; 0x55
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	212c      	movs	r1, #44	; 0x2c
 8004200:	fb01 f303 	mul.w	r3, r1, r3
 8004204:	4413      	add	r3, r2
 8004206:	3342      	adds	r3, #66	; 0x42
 8004208:	2200      	movs	r2, #0
 800420a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800420c:	e073      	b.n	80042f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	212c      	movs	r1, #44	; 0x2c
 8004214:	fb01 f303 	mul.w	r3, r1, r3
 8004218:	4413      	add	r3, r2
 800421a:	3342      	adds	r3, #66	; 0x42
 800421c:	2202      	movs	r2, #2
 800421e:	701a      	strb	r2, [r3, #0]
      break;
 8004220:	e069      	b.n	80042f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004222:	78fb      	ldrb	r3, [r7, #3]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	212c      	movs	r1, #44	; 0x2c
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	4413      	add	r3, r2
 800422e:	3354      	adds	r3, #84	; 0x54
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d109      	bne.n	800424a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	212c      	movs	r1, #44	; 0x2c
 800423c:	fb01 f303 	mul.w	r3, r1, r3
 8004240:	4413      	add	r3, r2
 8004242:	3342      	adds	r3, #66	; 0x42
 8004244:	2200      	movs	r2, #0
 8004246:	701a      	strb	r2, [r3, #0]
      break;
 8004248:	e055      	b.n	80042f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	212c      	movs	r1, #44	; 0x2c
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	4413      	add	r3, r2
 8004256:	3342      	adds	r3, #66	; 0x42
 8004258:	2202      	movs	r2, #2
 800425a:	701a      	strb	r2, [r3, #0]
      break;
 800425c:	e04b      	b.n	80042f6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800425e:	78bb      	ldrb	r3, [r7, #2]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d11d      	bne.n	80042a0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	212c      	movs	r1, #44	; 0x2c
 800426a:	fb01 f303 	mul.w	r3, r1, r3
 800426e:	4413      	add	r3, r2
 8004270:	3355      	adds	r3, #85	; 0x55
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d109      	bne.n	800428c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	212c      	movs	r1, #44	; 0x2c
 800427e:	fb01 f303 	mul.w	r3, r1, r3
 8004282:	4413      	add	r3, r2
 8004284:	3342      	adds	r3, #66	; 0x42
 8004286:	2200      	movs	r2, #0
 8004288:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800428a:	e034      	b.n	80042f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800428c:	78fb      	ldrb	r3, [r7, #3]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	212c      	movs	r1, #44	; 0x2c
 8004292:	fb01 f303 	mul.w	r3, r1, r3
 8004296:	4413      	add	r3, r2
 8004298:	3342      	adds	r3, #66	; 0x42
 800429a:	2202      	movs	r2, #2
 800429c:	701a      	strb	r2, [r3, #0]
      break;
 800429e:	e02a      	b.n	80042f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	212c      	movs	r1, #44	; 0x2c
 80042a6:	fb01 f303 	mul.w	r3, r1, r3
 80042aa:	4413      	add	r3, r2
 80042ac:	3354      	adds	r3, #84	; 0x54
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d109      	bne.n	80042c8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	212c      	movs	r1, #44	; 0x2c
 80042ba:	fb01 f303 	mul.w	r3, r1, r3
 80042be:	4413      	add	r3, r2
 80042c0:	3342      	adds	r3, #66	; 0x42
 80042c2:	2200      	movs	r2, #0
 80042c4:	701a      	strb	r2, [r3, #0]
      break;
 80042c6:	e016      	b.n	80042f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042c8:	78fb      	ldrb	r3, [r7, #3]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	212c      	movs	r1, #44	; 0x2c
 80042ce:	fb01 f303 	mul.w	r3, r1, r3
 80042d2:	4413      	add	r3, r2
 80042d4:	3342      	adds	r3, #66	; 0x42
 80042d6:	2202      	movs	r2, #2
 80042d8:	701a      	strb	r2, [r3, #0]
      break;
 80042da:	e00c      	b.n	80042f6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	212c      	movs	r1, #44	; 0x2c
 80042e2:	fb01 f303 	mul.w	r3, r1, r3
 80042e6:	4413      	add	r3, r2
 80042e8:	3342      	adds	r3, #66	; 0x42
 80042ea:	2200      	movs	r2, #0
 80042ec:	701a      	strb	r2, [r3, #0]
      break;
 80042ee:	e002      	b.n	80042f6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80042f0:	bf00      	nop
 80042f2:	e000      	b.n	80042f6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80042f4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80042f6:	78fb      	ldrb	r3, [r7, #3]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	212c      	movs	r1, #44	; 0x2c
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	4413      	add	r3, r2
 8004302:	3344      	adds	r3, #68	; 0x44
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	8b3a      	ldrh	r2, [r7, #24]
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	202c      	movs	r0, #44	; 0x2c
 8004310:	fb00 f303 	mul.w	r3, r0, r3
 8004314:	440b      	add	r3, r1
 8004316:	334c      	adds	r3, #76	; 0x4c
 8004318:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	212c      	movs	r1, #44	; 0x2c
 8004320:	fb01 f303 	mul.w	r3, r1, r3
 8004324:	4413      	add	r3, r2
 8004326:	3360      	adds	r3, #96	; 0x60
 8004328:	2200      	movs	r2, #0
 800432a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	212c      	movs	r1, #44	; 0x2c
 8004332:	fb01 f303 	mul.w	r3, r1, r3
 8004336:	4413      	add	r3, r2
 8004338:	3350      	adds	r3, #80	; 0x50
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	212c      	movs	r1, #44	; 0x2c
 8004344:	fb01 f303 	mul.w	r3, r1, r3
 8004348:	4413      	add	r3, r2
 800434a:	3339      	adds	r3, #57	; 0x39
 800434c:	78fa      	ldrb	r2, [r7, #3]
 800434e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	212c      	movs	r1, #44	; 0x2c
 8004356:	fb01 f303 	mul.w	r3, r1, r3
 800435a:	4413      	add	r3, r2
 800435c:	3361      	adds	r3, #97	; 0x61
 800435e:	2200      	movs	r2, #0
 8004360:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	78fb      	ldrb	r3, [r7, #3]
 8004368:	222c      	movs	r2, #44	; 0x2c
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	3338      	adds	r3, #56	; 0x38
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	18d1      	adds	r1, r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	461a      	mov	r2, r3
 800437c:	f005 ff5c 	bl	800a238 <USB_HC_StartXfer>
 8004380:	4603      	mov	r3, r0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop

0800438c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f005 fc5d 	bl	8009c62 <USB_GetMode>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	f040 80f6 	bne.w	800459c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f005 fc41 	bl	8009c3c <USB_ReadInterrupts>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80ec 	beq.w	800459a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f005 fc38 	bl	8009c3c <USB_ReadInterrupts>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043d6:	d104      	bne.n	80043e2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80043e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f005 fc28 	bl	8009c3c <USB_ReadInterrupts>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f6:	d104      	bne.n	8004402 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004400:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f005 fc18 	bl	8009c3c <USB_ReadInterrupts>
 800440c:	4603      	mov	r3, r0
 800440e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004412:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004416:	d104      	bne.n	8004422 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004420:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f005 fc08 	bl	8009c3c <USB_ReadInterrupts>
 800442c:	4603      	mov	r3, r0
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b02      	cmp	r3, #2
 8004434:	d103      	bne.n	800443e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2202      	movs	r2, #2
 800443c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f005 fbfa 	bl	8009c3c <USB_ReadInterrupts>
 8004448:	4603      	mov	r3, r0
 800444a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800444e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004452:	d11c      	bne.n	800448e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800445c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10f      	bne.n	800448e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800446e:	2110      	movs	r1, #16
 8004470:	6938      	ldr	r0, [r7, #16]
 8004472:	f005 fae9 	bl	8009a48 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004476:	6938      	ldr	r0, [r7, #16]
 8004478:	f005 fb1a 	bl	8009ab0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2101      	movs	r1, #1
 8004482:	4618      	mov	r0, r3
 8004484:	f005 fcf0 	bl	8009e68 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f00c fee1 	bl	8011250 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f005 fbd2 	bl	8009c3c <USB_ReadInterrupts>
 8004498:	4603      	mov	r3, r0
 800449a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800449e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044a2:	d102      	bne.n	80044aa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f001 f89e 	bl	80055e6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f005 fbc4 	bl	8009c3c <USB_ReadInterrupts>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	d106      	bne.n	80044cc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f00c feaa 	bl	8011218 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2208      	movs	r2, #8
 80044ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f005 fbb3 	bl	8009c3c <USB_ReadInterrupts>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b10      	cmp	r3, #16
 80044de:	d101      	bne.n	80044e4 <HAL_HCD_IRQHandler+0x158>
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <HAL_HCD_IRQHandler+0x15a>
 80044e4:	2300      	movs	r3, #0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d012      	beq.n	8004510 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	699a      	ldr	r2, [r3, #24]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0210 	bic.w	r2, r2, #16
 80044f8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 ffa1 	bl	8005442 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0210 	orr.w	r2, r2, #16
 800450e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f005 fb91 	bl	8009c3c <USB_ReadInterrupts>
 800451a:	4603      	mov	r3, r0
 800451c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004520:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004524:	d13a      	bne.n	800459c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f005 ffc6 	bl	800a4bc <USB_HC_ReadInterrupt>
 8004530:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
 8004536:	e025      	b.n	8004584 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	fa22 f303 	lsr.w	r3, r2, r3
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d018      	beq.n	800457e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4413      	add	r3, r2
 8004554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800455e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004562:	d106      	bne.n	8004572 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	b2db      	uxtb	r3, r3
 8004568:	4619      	mov	r1, r3
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f8ab 	bl	80046c6 <HCD_HC_IN_IRQHandler>
 8004570:	e005      	b.n	800457e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	4619      	mov	r1, r3
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 fbf9 	bl	8004d70 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	3301      	adds	r3, #1
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	429a      	cmp	r2, r3
 800458c:	d3d4      	bcc.n	8004538 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004596:	615a      	str	r2, [r3, #20]
 8004598:	e000      	b.n	800459c <HAL_HCD_IRQHandler+0x210>
      return;
 800459a:	bf00      	nop
    }
  }
}
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b082      	sub	sp, #8
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_HCD_Start+0x16>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e013      	b.n	80045e0 <HAL_HCD_Start+0x3e>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2101      	movs	r1, #1
 80045c6:	4618      	mov	r0, r3
 80045c8:	f005 fcb2 	bl	8009f30 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f005 f9ca 	bl	800996a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <HAL_HCD_Stop+0x16>
 80045fa:	2302      	movs	r3, #2
 80045fc:	e00d      	b.n	800461a <HAL_HCD_Stop+0x32>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f006 f8a0 	bl	800a750 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4618      	mov	r0, r3
 8004630:	f005 fc54 	bl	8009edc <USB_ResetPort>
 8004634:	4603      	mov	r3, r0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	460b      	mov	r3, r1
 8004648:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800464a:	78fb      	ldrb	r3, [r7, #3]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	212c      	movs	r1, #44	; 0x2c
 8004650:	fb01 f303 	mul.w	r3, r1, r3
 8004654:	4413      	add	r3, r2
 8004656:	3360      	adds	r3, #96	; 0x60
 8004658:	781b      	ldrb	r3, [r3, #0]
}
 800465a:	4618      	mov	r0, r3
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	460b      	mov	r3, r1
 8004670:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	212c      	movs	r1, #44	; 0x2c
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	4413      	add	r3, r2
 800467e:	3350      	adds	r3, #80	; 0x50
 8004680:	681b      	ldr	r3, [r3, #0]
}
 8004682:	4618      	mov	r0, r3
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f005 fc98 	bl	8009fd0 <USB_GetCurrentFrame>
 80046a0:	4603      	mov	r3, r0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b082      	sub	sp, #8
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f005 fc73 	bl	8009fa2 <USB_GetHostSpeed>
 80046bc:	4603      	mov	r3, r0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b086      	sub	sp, #24
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	460b      	mov	r3, r1
 80046d0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d11a      	bne.n	800472c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004702:	461a      	mov	r2, r3
 8004704:	2304      	movs	r3, #4
 8004706:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	212c      	movs	r1, #44	; 0x2c
 800470e:	fb01 f303 	mul.w	r3, r1, r3
 8004712:	4413      	add	r3, r2
 8004714:	3361      	adds	r3, #97	; 0x61
 8004716:	2206      	movs	r2, #6
 8004718:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	4611      	mov	r1, r2
 8004724:	4618      	mov	r0, r3
 8004726:	f005 feda 	bl	800a4de <USB_HC_Halt>
 800472a:	e0af      	b.n	800488c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	4413      	add	r3, r2
 8004734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004742:	d11b      	bne.n	800477c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	4413      	add	r3, r2
 800474c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004750:	461a      	mov	r2, r3
 8004752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004756:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	212c      	movs	r1, #44	; 0x2c
 800475e:	fb01 f303 	mul.w	r3, r1, r3
 8004762:	4413      	add	r3, r2
 8004764:	3361      	adds	r3, #97	; 0x61
 8004766:	2207      	movs	r2, #7
 8004768:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	4611      	mov	r1, r2
 8004774:	4618      	mov	r0, r3
 8004776:	f005 feb2 	bl	800a4de <USB_HC_Halt>
 800477a:	e087      	b.n	800488c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4413      	add	r3, r2
 8004784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 0320 	and.w	r3, r3, #32
 800478e:	2b20      	cmp	r3, #32
 8004790:	d109      	bne.n	80047a6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	4413      	add	r3, r2
 800479a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479e:	461a      	mov	r2, r3
 80047a0:	2320      	movs	r3, #32
 80047a2:	6093      	str	r3, [r2, #8]
 80047a4:	e072      	b.n	800488c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d11a      	bne.n	80047f2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c8:	461a      	mov	r2, r3
 80047ca:	2308      	movs	r3, #8
 80047cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	212c      	movs	r1, #44	; 0x2c
 80047d4:	fb01 f303 	mul.w	r3, r1, r3
 80047d8:	4413      	add	r3, r2
 80047da:	3361      	adds	r3, #97	; 0x61
 80047dc:	2205      	movs	r2, #5
 80047de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	4611      	mov	r1, r2
 80047ea:	4618      	mov	r0, r3
 80047ec:	f005 fe77 	bl	800a4de <USB_HC_Halt>
 80047f0:	e04c      	b.n	800488c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004808:	d11b      	bne.n	8004842 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4413      	add	r3, r2
 8004812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004816:	461a      	mov	r2, r3
 8004818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800481c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	212c      	movs	r1, #44	; 0x2c
 8004824:	fb01 f303 	mul.w	r3, r1, r3
 8004828:	4413      	add	r3, r2
 800482a:	3361      	adds	r3, #97	; 0x61
 800482c:	2208      	movs	r2, #8
 800482e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	4611      	mov	r1, r2
 800483a:	4618      	mov	r0, r3
 800483c:	f005 fe4f 	bl	800a4de <USB_HC_Halt>
 8004840:	e024      	b.n	800488c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	4413      	add	r3, r2
 800484a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004854:	2b80      	cmp	r3, #128	; 0x80
 8004856:	d119      	bne.n	800488c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	4413      	add	r3, r2
 8004860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004864:	461a      	mov	r2, r3
 8004866:	2380      	movs	r3, #128	; 0x80
 8004868:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	212c      	movs	r1, #44	; 0x2c
 8004870:	fb01 f303 	mul.w	r3, r1, r3
 8004874:	4413      	add	r3, r2
 8004876:	3361      	adds	r3, #97	; 0x61
 8004878:	2206      	movs	r2, #6
 800487a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	4611      	mov	r1, r2
 8004886:	4618      	mov	r0, r3
 8004888:	f005 fe29 	bl	800a4de <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	4413      	add	r3, r2
 8004894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800489e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a2:	d112      	bne.n	80048ca <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	4611      	mov	r1, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f005 fe15 	bl	800a4de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c0:	461a      	mov	r2, r3
 80048c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048c6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80048c8:	e24e      	b.n	8004d68 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b01      	cmp	r3, #1
 80048de:	f040 80df 	bne.w	8004aa0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d019      	beq.n	800491e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	212c      	movs	r1, #44	; 0x2c
 80048f0:	fb01 f303 	mul.w	r3, r1, r3
 80048f4:	4413      	add	r3, r2
 80048f6:	3348      	adds	r3, #72	; 0x48
 80048f8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	0159      	lsls	r1, r3, #5
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	440b      	add	r3, r1
 8004902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800490c:	1ad2      	subs	r2, r2, r3
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	202c      	movs	r0, #44	; 0x2c
 8004914:	fb00 f303 	mul.w	r3, r0, r3
 8004918:	440b      	add	r3, r1
 800491a:	3350      	adds	r3, #80	; 0x50
 800491c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	212c      	movs	r1, #44	; 0x2c
 8004924:	fb01 f303 	mul.w	r3, r1, r3
 8004928:	4413      	add	r3, r2
 800492a:	3361      	adds	r3, #97	; 0x61
 800492c:	2201      	movs	r2, #1
 800492e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	212c      	movs	r1, #44	; 0x2c
 8004936:	fb01 f303 	mul.w	r3, r1, r3
 800493a:	4413      	add	r3, r2
 800493c:	335c      	adds	r3, #92	; 0x5c
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	4413      	add	r3, r2
 800494a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494e:	461a      	mov	r2, r3
 8004950:	2301      	movs	r3, #1
 8004952:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	212c      	movs	r1, #44	; 0x2c
 800495a:	fb01 f303 	mul.w	r3, r1, r3
 800495e:	4413      	add	r3, r2
 8004960:	333f      	adds	r3, #63	; 0x3f
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d009      	beq.n	800497c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	212c      	movs	r1, #44	; 0x2c
 800496e:	fb01 f303 	mul.w	r3, r1, r3
 8004972:	4413      	add	r3, r2
 8004974:	333f      	adds	r3, #63	; 0x3f
 8004976:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004978:	2b02      	cmp	r3, #2
 800497a:	d111      	bne.n	80049a0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	4611      	mov	r1, r2
 8004986:	4618      	mov	r0, r3
 8004988:	f005 fda9 	bl	800a4de <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	4413      	add	r3, r2
 8004994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004998:	461a      	mov	r2, r3
 800499a:	2310      	movs	r3, #16
 800499c:	6093      	str	r3, [r2, #8]
 800499e:	e03a      	b.n	8004a16 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	212c      	movs	r1, #44	; 0x2c
 80049a6:	fb01 f303 	mul.w	r3, r1, r3
 80049aa:	4413      	add	r3, r2
 80049ac:	333f      	adds	r3, #63	; 0x3f
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d009      	beq.n	80049c8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	212c      	movs	r1, #44	; 0x2c
 80049ba:	fb01 f303 	mul.w	r3, r1, r3
 80049be:	4413      	add	r3, r2
 80049c0:	333f      	adds	r3, #63	; 0x3f
 80049c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d126      	bne.n	8004a16 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	0151      	lsls	r1, r2, #5
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	440a      	add	r2, r1
 80049de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049e6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	212c      	movs	r1, #44	; 0x2c
 80049ee:	fb01 f303 	mul.w	r3, r1, r3
 80049f2:	4413      	add	r3, r2
 80049f4:	3360      	adds	r3, #96	; 0x60
 80049f6:	2201      	movs	r2, #1
 80049f8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	b2d9      	uxtb	r1, r3
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	202c      	movs	r0, #44	; 0x2c
 8004a04:	fb00 f303 	mul.w	r3, r0, r3
 8004a08:	4413      	add	r3, r2
 8004a0a:	3360      	adds	r3, #96	; 0x60
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f00c fc2b 	bl	801126c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d12b      	bne.n	8004a76 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	212c      	movs	r1, #44	; 0x2c
 8004a24:	fb01 f303 	mul.w	r3, r1, r3
 8004a28:	4413      	add	r3, r2
 8004a2a:	3348      	adds	r3, #72	; 0x48
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	202c      	movs	r0, #44	; 0x2c
 8004a34:	fb00 f202 	mul.w	r2, r0, r2
 8004a38:	440a      	add	r2, r1
 8004a3a:	3240      	adds	r2, #64	; 0x40
 8004a3c:	8812      	ldrh	r2, [r2, #0]
 8004a3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 818e 	beq.w	8004d68 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	212c      	movs	r1, #44	; 0x2c
 8004a52:	fb01 f303 	mul.w	r3, r1, r3
 8004a56:	4413      	add	r3, r2
 8004a58:	3354      	adds	r3, #84	; 0x54
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	f083 0301 	eor.w	r3, r3, #1
 8004a60:	b2d8      	uxtb	r0, r3
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	212c      	movs	r1, #44	; 0x2c
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3354      	adds	r3, #84	; 0x54
 8004a70:	4602      	mov	r2, r0
 8004a72:	701a      	strb	r2, [r3, #0]
}
 8004a74:	e178      	b.n	8004d68 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	212c      	movs	r1, #44	; 0x2c
 8004a7c:	fb01 f303 	mul.w	r3, r1, r3
 8004a80:	4413      	add	r3, r2
 8004a82:	3354      	adds	r3, #84	; 0x54
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	f083 0301 	eor.w	r3, r3, #1
 8004a8a:	b2d8      	uxtb	r0, r3
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	212c      	movs	r1, #44	; 0x2c
 8004a92:	fb01 f303 	mul.w	r3, r1, r3
 8004a96:	4413      	add	r3, r2
 8004a98:	3354      	adds	r3, #84	; 0x54
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	701a      	strb	r2, [r3, #0]
}
 8004a9e:	e163      	b.n	8004d68 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	f040 80f6 	bne.w	8004ca4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	212c      	movs	r1, #44	; 0x2c
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3361      	adds	r3, #97	; 0x61
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d109      	bne.n	8004ae0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	212c      	movs	r1, #44	; 0x2c
 8004ad2:	fb01 f303 	mul.w	r3, r1, r3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3360      	adds	r3, #96	; 0x60
 8004ada:	2201      	movs	r2, #1
 8004adc:	701a      	strb	r2, [r3, #0]
 8004ade:	e0c9      	b.n	8004c74 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	212c      	movs	r1, #44	; 0x2c
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
 8004aea:	4413      	add	r3, r2
 8004aec:	3361      	adds	r3, #97	; 0x61
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b05      	cmp	r3, #5
 8004af2:	d109      	bne.n	8004b08 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	212c      	movs	r1, #44	; 0x2c
 8004afa:	fb01 f303 	mul.w	r3, r1, r3
 8004afe:	4413      	add	r3, r2
 8004b00:	3360      	adds	r3, #96	; 0x60
 8004b02:	2205      	movs	r2, #5
 8004b04:	701a      	strb	r2, [r3, #0]
 8004b06:	e0b5      	b.n	8004c74 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	212c      	movs	r1, #44	; 0x2c
 8004b0e:	fb01 f303 	mul.w	r3, r1, r3
 8004b12:	4413      	add	r3, r2
 8004b14:	3361      	adds	r3, #97	; 0x61
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b06      	cmp	r3, #6
 8004b1a:	d009      	beq.n	8004b30 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	212c      	movs	r1, #44	; 0x2c
 8004b22:	fb01 f303 	mul.w	r3, r1, r3
 8004b26:	4413      	add	r3, r2
 8004b28:	3361      	adds	r3, #97	; 0x61
 8004b2a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d150      	bne.n	8004bd2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	212c      	movs	r1, #44	; 0x2c
 8004b36:	fb01 f303 	mul.w	r3, r1, r3
 8004b3a:	4413      	add	r3, r2
 8004b3c:	335c      	adds	r3, #92	; 0x5c
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	202c      	movs	r0, #44	; 0x2c
 8004b48:	fb00 f303 	mul.w	r3, r0, r3
 8004b4c:	440b      	add	r3, r1
 8004b4e:	335c      	adds	r3, #92	; 0x5c
 8004b50:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	212c      	movs	r1, #44	; 0x2c
 8004b58:	fb01 f303 	mul.w	r3, r1, r3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	335c      	adds	r3, #92	; 0x5c
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d912      	bls.n	8004b8c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	212c      	movs	r1, #44	; 0x2c
 8004b6c:	fb01 f303 	mul.w	r3, r1, r3
 8004b70:	4413      	add	r3, r2
 8004b72:	335c      	adds	r3, #92	; 0x5c
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	212c      	movs	r1, #44	; 0x2c
 8004b7e:	fb01 f303 	mul.w	r3, r1, r3
 8004b82:	4413      	add	r3, r2
 8004b84:	3360      	adds	r3, #96	; 0x60
 8004b86:	2204      	movs	r2, #4
 8004b88:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004b8a:	e073      	b.n	8004c74 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	212c      	movs	r1, #44	; 0x2c
 8004b92:	fb01 f303 	mul.w	r3, r1, r3
 8004b96:	4413      	add	r3, r2
 8004b98:	3360      	adds	r3, #96	; 0x60
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bb4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bbc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bca:	461a      	mov	r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004bd0:	e050      	b.n	8004c74 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	212c      	movs	r1, #44	; 0x2c
 8004bd8:	fb01 f303 	mul.w	r3, r1, r3
 8004bdc:	4413      	add	r3, r2
 8004bde:	3361      	adds	r3, #97	; 0x61
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d122      	bne.n	8004c2c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	212c      	movs	r1, #44	; 0x2c
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	3360      	adds	r3, #96	; 0x60
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c0e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c16:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c24:	461a      	mov	r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	e023      	b.n	8004c74 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	212c      	movs	r1, #44	; 0x2c
 8004c32:	fb01 f303 	mul.w	r3, r1, r3
 8004c36:	4413      	add	r3, r2
 8004c38:	3361      	adds	r3, #97	; 0x61
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b07      	cmp	r3, #7
 8004c3e:	d119      	bne.n	8004c74 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	212c      	movs	r1, #44	; 0x2c
 8004c46:	fb01 f303 	mul.w	r3, r1, r3
 8004c4a:	4413      	add	r3, r2
 8004c4c:	335c      	adds	r3, #92	; 0x5c
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	202c      	movs	r0, #44	; 0x2c
 8004c58:	fb00 f303 	mul.w	r3, r0, r3
 8004c5c:	440b      	add	r3, r1
 8004c5e:	335c      	adds	r3, #92	; 0x5c
 8004c60:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	212c      	movs	r1, #44	; 0x2c
 8004c68:	fb01 f303 	mul.w	r3, r1, r3
 8004c6c:	4413      	add	r3, r2
 8004c6e:	3360      	adds	r3, #96	; 0x60
 8004c70:	2204      	movs	r2, #4
 8004c72:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c80:	461a      	mov	r2, r3
 8004c82:	2302      	movs	r3, #2
 8004c84:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	b2d9      	uxtb	r1, r3
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	202c      	movs	r0, #44	; 0x2c
 8004c90:	fb00 f303 	mul.w	r3, r0, r3
 8004c94:	4413      	add	r3, r2
 8004c96:	3360      	adds	r3, #96	; 0x60
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f00c fae5 	bl	801126c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004ca2:	e061      	b.n	8004d68 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 0310 	and.w	r3, r3, #16
 8004cb6:	2b10      	cmp	r3, #16
 8004cb8:	d156      	bne.n	8004d68 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	212c      	movs	r1, #44	; 0x2c
 8004cc0:	fb01 f303 	mul.w	r3, r1, r3
 8004cc4:	4413      	add	r3, r2
 8004cc6:	333f      	adds	r3, #63	; 0x3f
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d111      	bne.n	8004cf2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	212c      	movs	r1, #44	; 0x2c
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	4413      	add	r3, r2
 8004cda:	335c      	adds	r3, #92	; 0x5c
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	4611      	mov	r1, r2
 8004cea:	4618      	mov	r0, r3
 8004cec:	f005 fbf7 	bl	800a4de <USB_HC_Halt>
 8004cf0:	e031      	b.n	8004d56 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	212c      	movs	r1, #44	; 0x2c
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	333f      	adds	r3, #63	; 0x3f
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	212c      	movs	r1, #44	; 0x2c
 8004d0c:	fb01 f303 	mul.w	r3, r1, r3
 8004d10:	4413      	add	r3, r2
 8004d12:	333f      	adds	r3, #63	; 0x3f
 8004d14:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d11d      	bne.n	8004d56 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	212c      	movs	r1, #44	; 0x2c
 8004d20:	fb01 f303 	mul.w	r3, r1, r3
 8004d24:	4413      	add	r3, r2
 8004d26:	335c      	adds	r3, #92	; 0x5c
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d110      	bne.n	8004d56 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	212c      	movs	r1, #44	; 0x2c
 8004d3a:	fb01 f303 	mul.w	r3, r1, r3
 8004d3e:	4413      	add	r3, r2
 8004d40:	3361      	adds	r3, #97	; 0x61
 8004d42:	2203      	movs	r2, #3
 8004d44:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	4611      	mov	r1, r2
 8004d50:	4618      	mov	r0, r3
 8004d52:	f005 fbc4 	bl	800a4de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d62:	461a      	mov	r2, r3
 8004d64:	2310      	movs	r3, #16
 8004d66:	6093      	str	r3, [r2, #8]
}
 8004d68:	bf00      	nop
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004d86:	78fb      	ldrb	r3, [r7, #3]
 8004d88:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d11a      	bne.n	8004dd6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dac:	461a      	mov	r2, r3
 8004dae:	2304      	movs	r3, #4
 8004db0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	212c      	movs	r1, #44	; 0x2c
 8004db8:	fb01 f303 	mul.w	r3, r1, r3
 8004dbc:	4413      	add	r3, r2
 8004dbe:	3361      	adds	r3, #97	; 0x61
 8004dc0:	2206      	movs	r2, #6
 8004dc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	4611      	mov	r1, r2
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f005 fb85 	bl	800a4de <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004dd4:	e331      	b.n	800543a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b20      	cmp	r3, #32
 8004dea:	d12e      	bne.n	8004e4a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df8:	461a      	mov	r2, r3
 8004dfa:	2320      	movs	r3, #32
 8004dfc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	212c      	movs	r1, #44	; 0x2c
 8004e04:	fb01 f303 	mul.w	r3, r1, r3
 8004e08:	4413      	add	r3, r2
 8004e0a:	333d      	adds	r3, #61	; 0x3d
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	f040 8313 	bne.w	800543a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	212c      	movs	r1, #44	; 0x2c
 8004e1a:	fb01 f303 	mul.w	r3, r1, r3
 8004e1e:	4413      	add	r3, r2
 8004e20:	333d      	adds	r3, #61	; 0x3d
 8004e22:	2200      	movs	r2, #0
 8004e24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	212c      	movs	r1, #44	; 0x2c
 8004e2c:	fb01 f303 	mul.w	r3, r1, r3
 8004e30:	4413      	add	r3, r2
 8004e32:	3360      	adds	r3, #96	; 0x60
 8004e34:	2202      	movs	r2, #2
 8004e36:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	4611      	mov	r1, r2
 8004e42:	4618      	mov	r0, r3
 8004e44:	f005 fb4b 	bl	800a4de <USB_HC_Halt>
}
 8004e48:	e2f7      	b.n	800543a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e60:	d112      	bne.n	8004e88 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e6e:	461a      	mov	r2, r3
 8004e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e74:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	4611      	mov	r1, r2
 8004e80:	4618      	mov	r0, r3
 8004e82:	f005 fb2c 	bl	800a4de <USB_HC_Halt>
}
 8004e86:	e2d8      	b.n	800543a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d140      	bne.n	8004f20 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	212c      	movs	r1, #44	; 0x2c
 8004ea4:	fb01 f303 	mul.w	r3, r1, r3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	335c      	adds	r3, #92	; 0x5c
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec2:	2b40      	cmp	r3, #64	; 0x40
 8004ec4:	d111      	bne.n	8004eea <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	212c      	movs	r1, #44	; 0x2c
 8004ecc:	fb01 f303 	mul.w	r3, r1, r3
 8004ed0:	4413      	add	r3, r2
 8004ed2:	333d      	adds	r3, #61	; 0x3d
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	2340      	movs	r3, #64	; 0x40
 8004ee8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	2301      	movs	r3, #1
 8004efa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	212c      	movs	r1, #44	; 0x2c
 8004f02:	fb01 f303 	mul.w	r3, r1, r3
 8004f06:	4413      	add	r3, r2
 8004f08:	3361      	adds	r3, #97	; 0x61
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	4611      	mov	r1, r2
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f005 fae0 	bl	800a4de <USB_HC_Halt>
}
 8004f1e:	e28c      	b.n	800543a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f32:	2b40      	cmp	r3, #64	; 0x40
 8004f34:	d12c      	bne.n	8004f90 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	212c      	movs	r1, #44	; 0x2c
 8004f3c:	fb01 f303 	mul.w	r3, r1, r3
 8004f40:	4413      	add	r3, r2
 8004f42:	3361      	adds	r3, #97	; 0x61
 8004f44:	2204      	movs	r2, #4
 8004f46:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	212c      	movs	r1, #44	; 0x2c
 8004f4e:	fb01 f303 	mul.w	r3, r1, r3
 8004f52:	4413      	add	r3, r2
 8004f54:	333d      	adds	r3, #61	; 0x3d
 8004f56:	2201      	movs	r2, #1
 8004f58:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	212c      	movs	r1, #44	; 0x2c
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	4413      	add	r3, r2
 8004f66:	335c      	adds	r3, #92	; 0x5c
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	4611      	mov	r1, r2
 8004f76:	4618      	mov	r0, r3
 8004f78:	f005 fab1 	bl	800a4de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f88:	461a      	mov	r2, r3
 8004f8a:	2340      	movs	r3, #64	; 0x40
 8004f8c:	6093      	str	r3, [r2, #8]
}
 8004f8e:	e254      	b.n	800543a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b08      	cmp	r3, #8
 8004fa4:	d11a      	bne.n	8004fdc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	2308      	movs	r3, #8
 8004fb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	212c      	movs	r1, #44	; 0x2c
 8004fbe:	fb01 f303 	mul.w	r3, r1, r3
 8004fc2:	4413      	add	r3, r2
 8004fc4:	3361      	adds	r3, #97	; 0x61
 8004fc6:	2205      	movs	r2, #5
 8004fc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f005 fa82 	bl	800a4de <USB_HC_Halt>
}
 8004fda:	e22e      	b.n	800543a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 0310 	and.w	r3, r3, #16
 8004fee:	2b10      	cmp	r3, #16
 8004ff0:	d140      	bne.n	8005074 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	212c      	movs	r1, #44	; 0x2c
 8004ff8:	fb01 f303 	mul.w	r3, r1, r3
 8004ffc:	4413      	add	r3, r2
 8004ffe:	335c      	adds	r3, #92	; 0x5c
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	212c      	movs	r1, #44	; 0x2c
 800500a:	fb01 f303 	mul.w	r3, r1, r3
 800500e:	4413      	add	r3, r2
 8005010:	3361      	adds	r3, #97	; 0x61
 8005012:	2203      	movs	r2, #3
 8005014:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	212c      	movs	r1, #44	; 0x2c
 800501c:	fb01 f303 	mul.w	r3, r1, r3
 8005020:	4413      	add	r3, r2
 8005022:	333d      	adds	r3, #61	; 0x3d
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d112      	bne.n	8005050 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	212c      	movs	r1, #44	; 0x2c
 8005030:	fb01 f303 	mul.w	r3, r1, r3
 8005034:	4413      	add	r3, r2
 8005036:	333c      	adds	r3, #60	; 0x3c
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d108      	bne.n	8005050 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	212c      	movs	r1, #44	; 0x2c
 8005044:	fb01 f303 	mul.w	r3, r1, r3
 8005048:	4413      	add	r3, r2
 800504a:	333d      	adds	r3, #61	; 0x3d
 800504c:	2201      	movs	r2, #1
 800504e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	4611      	mov	r1, r2
 800505a:	4618      	mov	r0, r3
 800505c:	f005 fa3f 	bl	800a4de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	4413      	add	r3, r2
 8005068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506c:	461a      	mov	r2, r3
 800506e:	2310      	movs	r3, #16
 8005070:	6093      	str	r3, [r2, #8]
}
 8005072:	e1e2      	b.n	800543a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	4413      	add	r3, r2
 800507c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005086:	2b80      	cmp	r3, #128	; 0x80
 8005088:	d164      	bne.n	8005154 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d111      	bne.n	80050b6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	212c      	movs	r1, #44	; 0x2c
 8005098:	fb01 f303 	mul.w	r3, r1, r3
 800509c:	4413      	add	r3, r2
 800509e:	3361      	adds	r3, #97	; 0x61
 80050a0:	2206      	movs	r2, #6
 80050a2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	4611      	mov	r1, r2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f005 fa15 	bl	800a4de <USB_HC_Halt>
 80050b4:	e044      	b.n	8005140 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	212c      	movs	r1, #44	; 0x2c
 80050bc:	fb01 f303 	mul.w	r3, r1, r3
 80050c0:	4413      	add	r3, r2
 80050c2:	335c      	adds	r3, #92	; 0x5c
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	1c5a      	adds	r2, r3, #1
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	202c      	movs	r0, #44	; 0x2c
 80050ce:	fb00 f303 	mul.w	r3, r0, r3
 80050d2:	440b      	add	r3, r1
 80050d4:	335c      	adds	r3, #92	; 0x5c
 80050d6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	212c      	movs	r1, #44	; 0x2c
 80050de:	fb01 f303 	mul.w	r3, r1, r3
 80050e2:	4413      	add	r3, r2
 80050e4:	335c      	adds	r3, #92	; 0x5c
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d920      	bls.n	800512e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	212c      	movs	r1, #44	; 0x2c
 80050f2:	fb01 f303 	mul.w	r3, r1, r3
 80050f6:	4413      	add	r3, r2
 80050f8:	335c      	adds	r3, #92	; 0x5c
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	212c      	movs	r1, #44	; 0x2c
 8005104:	fb01 f303 	mul.w	r3, r1, r3
 8005108:	4413      	add	r3, r2
 800510a:	3360      	adds	r3, #96	; 0x60
 800510c:	2204      	movs	r2, #4
 800510e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	b2d9      	uxtb	r1, r3
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	202c      	movs	r0, #44	; 0x2c
 800511a:	fb00 f303 	mul.w	r3, r0, r3
 800511e:	4413      	add	r3, r2
 8005120:	3360      	adds	r3, #96	; 0x60
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	461a      	mov	r2, r3
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f00c f8a0 	bl	801126c <HAL_HCD_HC_NotifyURBChange_Callback>
 800512c:	e008      	b.n	8005140 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	212c      	movs	r1, #44	; 0x2c
 8005134:	fb01 f303 	mul.w	r3, r1, r3
 8005138:	4413      	add	r3, r2
 800513a:	3360      	adds	r3, #96	; 0x60
 800513c:	2202      	movs	r2, #2
 800513e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	4413      	add	r3, r2
 8005148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514c:	461a      	mov	r2, r3
 800514e:	2380      	movs	r3, #128	; 0x80
 8005150:	6093      	str	r3, [r2, #8]
}
 8005152:	e172      	b.n	800543a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	4413      	add	r3, r2
 800515c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800516a:	d11b      	bne.n	80051a4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	212c      	movs	r1, #44	; 0x2c
 8005172:	fb01 f303 	mul.w	r3, r1, r3
 8005176:	4413      	add	r3, r2
 8005178:	3361      	adds	r3, #97	; 0x61
 800517a:	2208      	movs	r2, #8
 800517c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	4611      	mov	r1, r2
 8005188:	4618      	mov	r0, r3
 800518a:	f005 f9a8 	bl	800a4de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	4413      	add	r3, r2
 8005196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519a:	461a      	mov	r2, r3
 800519c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051a0:	6093      	str	r3, [r2, #8]
}
 80051a2:	e14a      	b.n	800543a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	f040 813f 	bne.w	800543a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	212c      	movs	r1, #44	; 0x2c
 80051c2:	fb01 f303 	mul.w	r3, r1, r3
 80051c6:	4413      	add	r3, r2
 80051c8:	3361      	adds	r3, #97	; 0x61
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d17d      	bne.n	80052cc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	212c      	movs	r1, #44	; 0x2c
 80051d6:	fb01 f303 	mul.w	r3, r1, r3
 80051da:	4413      	add	r3, r2
 80051dc:	3360      	adds	r3, #96	; 0x60
 80051de:	2201      	movs	r2, #1
 80051e0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	212c      	movs	r1, #44	; 0x2c
 80051e8:	fb01 f303 	mul.w	r3, r1, r3
 80051ec:	4413      	add	r3, r2
 80051ee:	333f      	adds	r3, #63	; 0x3f
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d00a      	beq.n	800520c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	212c      	movs	r1, #44	; 0x2c
 80051fc:	fb01 f303 	mul.w	r3, r1, r3
 8005200:	4413      	add	r3, r2
 8005202:	333f      	adds	r3, #63	; 0x3f
 8005204:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005206:	2b03      	cmp	r3, #3
 8005208:	f040 8100 	bne.w	800540c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d113      	bne.n	800523c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	212c      	movs	r1, #44	; 0x2c
 800521a:	fb01 f303 	mul.w	r3, r1, r3
 800521e:	4413      	add	r3, r2
 8005220:	3355      	adds	r3, #85	; 0x55
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	f083 0301 	eor.w	r3, r3, #1
 8005228:	b2d8      	uxtb	r0, r3
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	212c      	movs	r1, #44	; 0x2c
 8005230:	fb01 f303 	mul.w	r3, r1, r3
 8005234:	4413      	add	r3, r2
 8005236:	3355      	adds	r3, #85	; 0x55
 8005238:	4602      	mov	r2, r0
 800523a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	2b01      	cmp	r3, #1
 8005242:	f040 80e3 	bne.w	800540c <HCD_HC_OUT_IRQHandler+0x69c>
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	212c      	movs	r1, #44	; 0x2c
 800524c:	fb01 f303 	mul.w	r3, r1, r3
 8005250:	4413      	add	r3, r2
 8005252:	334c      	adds	r3, #76	; 0x4c
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 80d8 	beq.w	800540c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	212c      	movs	r1, #44	; 0x2c
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	4413      	add	r3, r2
 8005268:	334c      	adds	r3, #76	; 0x4c
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6879      	ldr	r1, [r7, #4]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	202c      	movs	r0, #44	; 0x2c
 8005272:	fb00 f202 	mul.w	r2, r0, r2
 8005276:	440a      	add	r2, r1
 8005278:	3240      	adds	r2, #64	; 0x40
 800527a:	8812      	ldrh	r2, [r2, #0]
 800527c:	4413      	add	r3, r2
 800527e:	3b01      	subs	r3, #1
 8005280:	6879      	ldr	r1, [r7, #4]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	202c      	movs	r0, #44	; 0x2c
 8005286:	fb00 f202 	mul.w	r2, r0, r2
 800528a:	440a      	add	r2, r1
 800528c:	3240      	adds	r2, #64	; 0x40
 800528e:	8812      	ldrh	r2, [r2, #0]
 8005290:	fbb3 f3f2 	udiv	r3, r3, r2
 8005294:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 80b5 	beq.w	800540c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	212c      	movs	r1, #44	; 0x2c
 80052a8:	fb01 f303 	mul.w	r3, r1, r3
 80052ac:	4413      	add	r3, r2
 80052ae:	3355      	adds	r3, #85	; 0x55
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	f083 0301 	eor.w	r3, r3, #1
 80052b6:	b2d8      	uxtb	r0, r3
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	212c      	movs	r1, #44	; 0x2c
 80052be:	fb01 f303 	mul.w	r3, r1, r3
 80052c2:	4413      	add	r3, r2
 80052c4:	3355      	adds	r3, #85	; 0x55
 80052c6:	4602      	mov	r2, r0
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	e09f      	b.n	800540c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	212c      	movs	r1, #44	; 0x2c
 80052d2:	fb01 f303 	mul.w	r3, r1, r3
 80052d6:	4413      	add	r3, r2
 80052d8:	3361      	adds	r3, #97	; 0x61
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d109      	bne.n	80052f4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	212c      	movs	r1, #44	; 0x2c
 80052e6:	fb01 f303 	mul.w	r3, r1, r3
 80052ea:	4413      	add	r3, r2
 80052ec:	3360      	adds	r3, #96	; 0x60
 80052ee:	2202      	movs	r2, #2
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	e08b      	b.n	800540c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	212c      	movs	r1, #44	; 0x2c
 80052fa:	fb01 f303 	mul.w	r3, r1, r3
 80052fe:	4413      	add	r3, r2
 8005300:	3361      	adds	r3, #97	; 0x61
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b04      	cmp	r3, #4
 8005306:	d109      	bne.n	800531c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	212c      	movs	r1, #44	; 0x2c
 800530e:	fb01 f303 	mul.w	r3, r1, r3
 8005312:	4413      	add	r3, r2
 8005314:	3360      	adds	r3, #96	; 0x60
 8005316:	2202      	movs	r2, #2
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	e077      	b.n	800540c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	212c      	movs	r1, #44	; 0x2c
 8005322:	fb01 f303 	mul.w	r3, r1, r3
 8005326:	4413      	add	r3, r2
 8005328:	3361      	adds	r3, #97	; 0x61
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b05      	cmp	r3, #5
 800532e:	d109      	bne.n	8005344 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	212c      	movs	r1, #44	; 0x2c
 8005336:	fb01 f303 	mul.w	r3, r1, r3
 800533a:	4413      	add	r3, r2
 800533c:	3360      	adds	r3, #96	; 0x60
 800533e:	2205      	movs	r2, #5
 8005340:	701a      	strb	r2, [r3, #0]
 8005342:	e063      	b.n	800540c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	212c      	movs	r1, #44	; 0x2c
 800534a:	fb01 f303 	mul.w	r3, r1, r3
 800534e:	4413      	add	r3, r2
 8005350:	3361      	adds	r3, #97	; 0x61
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b06      	cmp	r3, #6
 8005356:	d009      	beq.n	800536c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	212c      	movs	r1, #44	; 0x2c
 800535e:	fb01 f303 	mul.w	r3, r1, r3
 8005362:	4413      	add	r3, r2
 8005364:	3361      	adds	r3, #97	; 0x61
 8005366:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005368:	2b08      	cmp	r3, #8
 800536a:	d14f      	bne.n	800540c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	212c      	movs	r1, #44	; 0x2c
 8005372:	fb01 f303 	mul.w	r3, r1, r3
 8005376:	4413      	add	r3, r2
 8005378:	335c      	adds	r3, #92	; 0x5c
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	202c      	movs	r0, #44	; 0x2c
 8005384:	fb00 f303 	mul.w	r3, r0, r3
 8005388:	440b      	add	r3, r1
 800538a:	335c      	adds	r3, #92	; 0x5c
 800538c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	212c      	movs	r1, #44	; 0x2c
 8005394:	fb01 f303 	mul.w	r3, r1, r3
 8005398:	4413      	add	r3, r2
 800539a:	335c      	adds	r3, #92	; 0x5c
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d912      	bls.n	80053c8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	212c      	movs	r1, #44	; 0x2c
 80053a8:	fb01 f303 	mul.w	r3, r1, r3
 80053ac:	4413      	add	r3, r2
 80053ae:	335c      	adds	r3, #92	; 0x5c
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	212c      	movs	r1, #44	; 0x2c
 80053ba:	fb01 f303 	mul.w	r3, r1, r3
 80053be:	4413      	add	r3, r2
 80053c0:	3360      	adds	r3, #96	; 0x60
 80053c2:	2204      	movs	r2, #4
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	e021      	b.n	800540c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	212c      	movs	r1, #44	; 0x2c
 80053ce:	fb01 f303 	mul.w	r3, r1, r3
 80053d2:	4413      	add	r3, r2
 80053d4:	3360      	adds	r3, #96	; 0x60
 80053d6:	2202      	movs	r2, #2
 80053d8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053f0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053f8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	4413      	add	r3, r2
 8005402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005406:	461a      	mov	r2, r3
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	4413      	add	r3, r2
 8005414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005418:	461a      	mov	r2, r3
 800541a:	2302      	movs	r3, #2
 800541c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	b2d9      	uxtb	r1, r3
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	202c      	movs	r0, #44	; 0x2c
 8005428:	fb00 f303 	mul.w	r3, r0, r3
 800542c:	4413      	add	r3, r2
 800542e:	3360      	adds	r3, #96	; 0x60
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f00b ff19 	bl	801126c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800543a:	bf00      	nop
 800543c:	3720      	adds	r7, #32
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b08a      	sub	sp, #40	; 0x28
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	0c5b      	lsrs	r3, r3, #17
 8005468:	f003 030f 	and.w	r3, r3, #15
 800546c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	091b      	lsrs	r3, r3, #4
 8005472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005476:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	2b02      	cmp	r3, #2
 800547c:	d004      	beq.n	8005488 <HCD_RXQLVL_IRQHandler+0x46>
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2b05      	cmp	r3, #5
 8005482:	f000 80a9 	beq.w	80055d8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005486:	e0aa      	b.n	80055de <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 80a6 	beq.w	80055dc <HCD_RXQLVL_IRQHandler+0x19a>
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	212c      	movs	r1, #44	; 0x2c
 8005496:	fb01 f303 	mul.w	r3, r1, r3
 800549a:	4413      	add	r3, r2
 800549c:	3344      	adds	r3, #68	; 0x44
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 809b 	beq.w	80055dc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	212c      	movs	r1, #44	; 0x2c
 80054ac:	fb01 f303 	mul.w	r3, r1, r3
 80054b0:	4413      	add	r3, r2
 80054b2:	3350      	adds	r3, #80	; 0x50
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	441a      	add	r2, r3
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	202c      	movs	r0, #44	; 0x2c
 80054c0:	fb00 f303 	mul.w	r3, r0, r3
 80054c4:	440b      	add	r3, r1
 80054c6:	334c      	adds	r3, #76	; 0x4c
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d87a      	bhi.n	80055c4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6818      	ldr	r0, [r3, #0]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	212c      	movs	r1, #44	; 0x2c
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	4413      	add	r3, r2
 80054de:	3344      	adds	r3, #68	; 0x44
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	b292      	uxth	r2, r2
 80054e6:	4619      	mov	r1, r3
 80054e8:	f004 fb50 	bl	8009b8c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	212c      	movs	r1, #44	; 0x2c
 80054f2:	fb01 f303 	mul.w	r3, r1, r3
 80054f6:	4413      	add	r3, r2
 80054f8:	3344      	adds	r3, #68	; 0x44
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	441a      	add	r2, r3
 8005500:	6879      	ldr	r1, [r7, #4]
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	202c      	movs	r0, #44	; 0x2c
 8005506:	fb00 f303 	mul.w	r3, r0, r3
 800550a:	440b      	add	r3, r1
 800550c:	3344      	adds	r3, #68	; 0x44
 800550e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	212c      	movs	r1, #44	; 0x2c
 8005516:	fb01 f303 	mul.w	r3, r1, r3
 800551a:	4413      	add	r3, r2
 800551c:	3350      	adds	r3, #80	; 0x50
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	441a      	add	r2, r3
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	202c      	movs	r0, #44	; 0x2c
 800552a:	fb00 f303 	mul.w	r3, r0, r3
 800552e:	440b      	add	r3, r1
 8005530:	3350      	adds	r3, #80	; 0x50
 8005532:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	4413      	add	r3, r2
 800553c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	0cdb      	lsrs	r3, r3, #19
 8005544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005548:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	212c      	movs	r1, #44	; 0x2c
 8005550:	fb01 f303 	mul.w	r3, r1, r3
 8005554:	4413      	add	r3, r2
 8005556:	3340      	adds	r3, #64	; 0x40
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4293      	cmp	r3, r2
 8005560:	d13c      	bne.n	80055dc <HCD_RXQLVL_IRQHandler+0x19a>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d039      	beq.n	80055dc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	4413      	add	r3, r2
 8005570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800557e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005586:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	4413      	add	r3, r2
 8005590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005594:	461a      	mov	r2, r3
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	212c      	movs	r1, #44	; 0x2c
 80055a0:	fb01 f303 	mul.w	r3, r1, r3
 80055a4:	4413      	add	r3, r2
 80055a6:	3354      	adds	r3, #84	; 0x54
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	f083 0301 	eor.w	r3, r3, #1
 80055ae:	b2d8      	uxtb	r0, r3
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	212c      	movs	r1, #44	; 0x2c
 80055b6:	fb01 f303 	mul.w	r3, r1, r3
 80055ba:	4413      	add	r3, r2
 80055bc:	3354      	adds	r3, #84	; 0x54
 80055be:	4602      	mov	r2, r0
 80055c0:	701a      	strb	r2, [r3, #0]
      break;
 80055c2:	e00b      	b.n	80055dc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	212c      	movs	r1, #44	; 0x2c
 80055ca:	fb01 f303 	mul.w	r3, r1, r3
 80055ce:	4413      	add	r3, r2
 80055d0:	3360      	adds	r3, #96	; 0x60
 80055d2:	2204      	movs	r2, #4
 80055d4:	701a      	strb	r2, [r3, #0]
      break;
 80055d6:	e001      	b.n	80055dc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80055d8:	bf00      	nop
 80055da:	e000      	b.n	80055de <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80055dc:	bf00      	nop
  }
}
 80055de:	bf00      	nop
 80055e0:	3728      	adds	r7, #40	; 0x28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b086      	sub	sp, #24
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005612:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b02      	cmp	r3, #2
 800561c:	d10b      	bne.n	8005636 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b01      	cmp	r3, #1
 8005626:	d102      	bne.n	800562e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f00b fe03 	bl	8011234 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f043 0302 	orr.w	r3, r3, #2
 8005634:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b08      	cmp	r3, #8
 800563e:	d132      	bne.n	80056a6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f043 0308 	orr.w	r3, r3, #8
 8005646:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f003 0304 	and.w	r3, r3, #4
 800564e:	2b04      	cmp	r3, #4
 8005650:	d126      	bne.n	80056a0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d113      	bne.n	8005682 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005660:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005664:	d106      	bne.n	8005674 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2102      	movs	r1, #2
 800566c:	4618      	mov	r0, r3
 800566e:	f004 fbfb 	bl	8009e68 <USB_InitFSLSPClkSel>
 8005672:	e011      	b.n	8005698 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2101      	movs	r1, #1
 800567a:	4618      	mov	r0, r3
 800567c:	f004 fbf4 	bl	8009e68 <USB_InitFSLSPClkSel>
 8005680:	e00a      	b.n	8005698 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d106      	bne.n	8005698 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005690:	461a      	mov	r2, r3
 8005692:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005696:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f00b fdf5 	bl	8011288 <HAL_HCD_PortEnabled_Callback>
 800569e:	e002      	b.n	80056a6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f00b fdff 	bl	80112a4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f003 0320 	and.w	r3, r3, #32
 80056ac:	2b20      	cmp	r3, #32
 80056ae:	d103      	bne.n	80056b8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f043 0320 	orr.w	r3, r3, #32
 80056b6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056be:	461a      	mov	r2, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	6013      	str	r3, [r2, #0]
}
 80056c4:	bf00      	nop
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e12b      	b.n	8005936 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d106      	bne.n	80056f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fc f8a4 	bl	8001840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2224      	movs	r2, #36	; 0x24
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0201 	bic.w	r2, r2, #1
 800570e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800571e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800572e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005730:	f002 ff88 	bl	8008644 <HAL_RCC_GetPCLK1Freq>
 8005734:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	4a81      	ldr	r2, [pc, #516]	; (8005940 <HAL_I2C_Init+0x274>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d807      	bhi.n	8005750 <HAL_I2C_Init+0x84>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4a80      	ldr	r2, [pc, #512]	; (8005944 <HAL_I2C_Init+0x278>)
 8005744:	4293      	cmp	r3, r2
 8005746:	bf94      	ite	ls
 8005748:	2301      	movls	r3, #1
 800574a:	2300      	movhi	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	e006      	b.n	800575e <HAL_I2C_Init+0x92>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4a7d      	ldr	r2, [pc, #500]	; (8005948 <HAL_I2C_Init+0x27c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	bf94      	ite	ls
 8005758:	2301      	movls	r3, #1
 800575a:	2300      	movhi	r3, #0
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e0e7      	b.n	8005936 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4a78      	ldr	r2, [pc, #480]	; (800594c <HAL_I2C_Init+0x280>)
 800576a:	fba2 2303 	umull	r2, r3, r2, r3
 800576e:	0c9b      	lsrs	r3, r3, #18
 8005770:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	430a      	orrs	r2, r1
 8005784:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	4a6a      	ldr	r2, [pc, #424]	; (8005940 <HAL_I2C_Init+0x274>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d802      	bhi.n	80057a0 <HAL_I2C_Init+0xd4>
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	3301      	adds	r3, #1
 800579e:	e009      	b.n	80057b4 <HAL_I2C_Init+0xe8>
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80057a6:	fb02 f303 	mul.w	r3, r2, r3
 80057aa:	4a69      	ldr	r2, [pc, #420]	; (8005950 <HAL_I2C_Init+0x284>)
 80057ac:	fba2 2303 	umull	r2, r3, r2, r3
 80057b0:	099b      	lsrs	r3, r3, #6
 80057b2:	3301      	adds	r3, #1
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6812      	ldr	r2, [r2, #0]
 80057b8:	430b      	orrs	r3, r1
 80057ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80057c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	495c      	ldr	r1, [pc, #368]	; (8005940 <HAL_I2C_Init+0x274>)
 80057d0:	428b      	cmp	r3, r1
 80057d2:	d819      	bhi.n	8005808 <HAL_I2C_Init+0x13c>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	1e59      	subs	r1, r3, #1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	fbb1 f3f3 	udiv	r3, r1, r3
 80057e2:	1c59      	adds	r1, r3, #1
 80057e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80057e8:	400b      	ands	r3, r1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <HAL_I2C_Init+0x138>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	1e59      	subs	r1, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80057fc:	3301      	adds	r3, #1
 80057fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005802:	e051      	b.n	80058a8 <HAL_I2C_Init+0x1dc>
 8005804:	2304      	movs	r3, #4
 8005806:	e04f      	b.n	80058a8 <HAL_I2C_Init+0x1dc>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d111      	bne.n	8005834 <HAL_I2C_Init+0x168>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	1e58      	subs	r0, r3, #1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6859      	ldr	r1, [r3, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	440b      	add	r3, r1
 800581e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005822:	3301      	adds	r3, #1
 8005824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005828:	2b00      	cmp	r3, #0
 800582a:	bf0c      	ite	eq
 800582c:	2301      	moveq	r3, #1
 800582e:	2300      	movne	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	e012      	b.n	800585a <HAL_I2C_Init+0x18e>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	1e58      	subs	r0, r3, #1
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6859      	ldr	r1, [r3, #4]
 800583c:	460b      	mov	r3, r1
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	440b      	add	r3, r1
 8005842:	0099      	lsls	r1, r3, #2
 8005844:	440b      	add	r3, r1
 8005846:	fbb0 f3f3 	udiv	r3, r0, r3
 800584a:	3301      	adds	r3, #1
 800584c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005850:	2b00      	cmp	r3, #0
 8005852:	bf0c      	ite	eq
 8005854:	2301      	moveq	r3, #1
 8005856:	2300      	movne	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_I2C_Init+0x196>
 800585e:	2301      	movs	r3, #1
 8005860:	e022      	b.n	80058a8 <HAL_I2C_Init+0x1dc>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10e      	bne.n	8005888 <HAL_I2C_Init+0x1bc>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	1e58      	subs	r0, r3, #1
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6859      	ldr	r1, [r3, #4]
 8005872:	460b      	mov	r3, r1
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	440b      	add	r3, r1
 8005878:	fbb0 f3f3 	udiv	r3, r0, r3
 800587c:	3301      	adds	r3, #1
 800587e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005886:	e00f      	b.n	80058a8 <HAL_I2C_Init+0x1dc>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	1e58      	subs	r0, r3, #1
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6859      	ldr	r1, [r3, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	440b      	add	r3, r1
 8005896:	0099      	lsls	r1, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	fbb0 f3f3 	udiv	r3, r0, r3
 800589e:	3301      	adds	r3, #1
 80058a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	6809      	ldr	r1, [r1, #0]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69da      	ldr	r2, [r3, #28]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80058d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	6911      	ldr	r1, [r2, #16]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	68d2      	ldr	r2, [r2, #12]
 80058e2:	4311      	orrs	r1, r2
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6812      	ldr	r2, [r2, #0]
 80058e8:	430b      	orrs	r3, r1
 80058ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695a      	ldr	r2, [r3, #20]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0201 	orr.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	000186a0 	.word	0x000186a0
 8005944:	001e847f 	.word	0x001e847f
 8005948:	003d08ff 	.word	0x003d08ff
 800594c:	431bde83 	.word	0x431bde83
 8005950:	10624dd3 	.word	0x10624dd3

08005954 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e021      	b.n	80059aa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2224      	movs	r2, #36	; 0x24
 800596a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0201 	bic.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fb ffc8 	bl	8001914 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
	...

080059b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af02      	add	r7, sp, #8
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	607a      	str	r2, [r7, #4]
 80059be:	461a      	mov	r2, r3
 80059c0:	460b      	mov	r3, r1
 80059c2:	817b      	strh	r3, [r7, #10]
 80059c4:	4613      	mov	r3, r2
 80059c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059c8:	f7fd fa3a 	bl	8002e40 <HAL_GetTick>
 80059cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b20      	cmp	r3, #32
 80059d8:	f040 80e0 	bne.w	8005b9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	2319      	movs	r3, #25
 80059e2:	2201      	movs	r2, #1
 80059e4:	4970      	ldr	r1, [pc, #448]	; (8005ba8 <HAL_I2C_Master_Transmit+0x1f4>)
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 ff3e 	bl	8006868 <I2C_WaitOnFlagUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80059f2:	2302      	movs	r3, #2
 80059f4:	e0d3      	b.n	8005b9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d101      	bne.n	8005a04 <HAL_I2C_Master_Transmit+0x50>
 8005a00:	2302      	movs	r3, #2
 8005a02:	e0cc      	b.n	8005b9e <HAL_I2C_Master_Transmit+0x1ea>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d007      	beq.n	8005a2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 0201 	orr.w	r2, r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2221      	movs	r2, #33	; 0x21
 8005a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2210      	movs	r2, #16
 8005a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	893a      	ldrh	r2, [r7, #8]
 8005a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4a50      	ldr	r2, [pc, #320]	; (8005bac <HAL_I2C_Master_Transmit+0x1f8>)
 8005a6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005a6c:	8979      	ldrh	r1, [r7, #10]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	6a3a      	ldr	r2, [r7, #32]
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 fcf8 	bl	8006468 <I2C_MasterRequestWrite>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e08d      	b.n	8005b9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a82:	2300      	movs	r3, #0
 8005a84:	613b      	str	r3, [r7, #16]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	613b      	str	r3, [r7, #16]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	613b      	str	r3, [r7, #16]
 8005a96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005a98:	e066      	b.n	8005b68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	6a39      	ldr	r1, [r7, #32]
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 ffb8 	bl	8006a14 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00d      	beq.n	8005ac6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d107      	bne.n	8005ac2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ac0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e06b      	b.n	8005b9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	781a      	ldrb	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d11b      	bne.n	8005b3c <HAL_I2C_Master_Transmit+0x188>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d017      	beq.n	8005b3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	781a      	ldrb	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b34:	3b01      	subs	r3, #1
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	6a39      	ldr	r1, [r7, #32]
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 ffa8 	bl	8006a96 <I2C_WaitOnBTFFlagUntilTimeout>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00d      	beq.n	8005b68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d107      	bne.n	8005b64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e01a      	b.n	8005b9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d194      	bne.n	8005a9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e000      	b.n	8005b9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005b9c:	2302      	movs	r3, #2
  }
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	00100002 	.word	0x00100002
 8005bac:	ffff0000 	.word	0xffff0000

08005bb0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b088      	sub	sp, #32
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	4608      	mov	r0, r1
 8005bba:	4611      	mov	r1, r2
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	817b      	strh	r3, [r7, #10]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	813b      	strh	r3, [r7, #8]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bca:	f7fd f939 	bl	8002e40 <HAL_GetTick>
 8005bce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	f040 80d9 	bne.w	8005d90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	2319      	movs	r3, #25
 8005be4:	2201      	movs	r2, #1
 8005be6:	496d      	ldr	r1, [pc, #436]	; (8005d9c <HAL_I2C_Mem_Write+0x1ec>)
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 fe3d 	bl	8006868 <I2C_WaitOnFlagUntilTimeout>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e0cc      	b.n	8005d92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_I2C_Mem_Write+0x56>
 8005c02:	2302      	movs	r3, #2
 8005c04:	e0c5      	b.n	8005d92 <HAL_I2C_Mem_Write+0x1e2>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d007      	beq.n	8005c2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0201 	orr.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2221      	movs	r2, #33	; 0x21
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2240      	movs	r2, #64	; 0x40
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a3a      	ldr	r2, [r7, #32]
 8005c56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4a4d      	ldr	r2, [pc, #308]	; (8005da0 <HAL_I2C_Mem_Write+0x1f0>)
 8005c6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c6e:	88f8      	ldrh	r0, [r7, #6]
 8005c70:	893a      	ldrh	r2, [r7, #8]
 8005c72:	8979      	ldrh	r1, [r7, #10]
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 fc74 	bl	800656c <I2C_RequestMemoryWrite>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d052      	beq.n	8005d30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e081      	b.n	8005d92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 febe 	bl	8006a14 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00d      	beq.n	8005cba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	d107      	bne.n	8005cb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e06b      	b.n	8005d92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	781a      	ldrb	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d11b      	bne.n	8005d30 <HAL_I2C_Mem_Write+0x180>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d017      	beq.n	8005d30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	781a      	ldrb	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1aa      	bne.n	8005c8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 feaa 	bl	8006a96 <I2C_WaitOnBTFFlagUntilTimeout>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00d      	beq.n	8005d64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4c:	2b04      	cmp	r3, #4
 8005d4e:	d107      	bne.n	8005d60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e016      	b.n	8005d92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	e000      	b.n	8005d92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005d90:	2302      	movs	r3, #2
  }
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	00100002 	.word	0x00100002
 8005da0:	ffff0000 	.word	0xffff0000

08005da4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b08c      	sub	sp, #48	; 0x30
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	4608      	mov	r0, r1
 8005dae:	4611      	mov	r1, r2
 8005db0:	461a      	mov	r2, r3
 8005db2:	4603      	mov	r3, r0
 8005db4:	817b      	strh	r3, [r7, #10]
 8005db6:	460b      	mov	r3, r1
 8005db8:	813b      	strh	r3, [r7, #8]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005dbe:	f7fd f83f 	bl	8002e40 <HAL_GetTick>
 8005dc2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	f040 8208 	bne.w	80061e2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	2319      	movs	r3, #25
 8005dd8:	2201      	movs	r2, #1
 8005dda:	497b      	ldr	r1, [pc, #492]	; (8005fc8 <HAL_I2C_Mem_Read+0x224>)
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 fd43 	bl	8006868 <I2C_WaitOnFlagUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005de8:	2302      	movs	r3, #2
 8005dea:	e1fb      	b.n	80061e4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_I2C_Mem_Read+0x56>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e1f4      	b.n	80061e4 <HAL_I2C_Mem_Read+0x440>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d007      	beq.n	8005e20 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 0201 	orr.w	r2, r2, #1
 8005e1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2222      	movs	r2, #34	; 0x22
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2240      	movs	r2, #64	; 0x40
 8005e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005e50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4a5b      	ldr	r2, [pc, #364]	; (8005fcc <HAL_I2C_Mem_Read+0x228>)
 8005e60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e62:	88f8      	ldrh	r0, [r7, #6]
 8005e64:	893a      	ldrh	r2, [r7, #8]
 8005e66:	8979      	ldrh	r1, [r7, #10]
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	9301      	str	r3, [sp, #4]
 8005e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	4603      	mov	r3, r0
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f000 fc10 	bl	8006698 <I2C_RequestMemoryRead>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e1b0      	b.n	80061e4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d113      	bne.n	8005eb2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	623b      	str	r3, [r7, #32]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	623b      	str	r3, [r7, #32]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	623b      	str	r3, [r7, #32]
 8005e9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	e184      	b.n	80061bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d11b      	bne.n	8005ef2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61fb      	str	r3, [r7, #28]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	61fb      	str	r3, [r7, #28]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	61fb      	str	r3, [r7, #28]
 8005ede:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	e164      	b.n	80061bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d11b      	bne.n	8005f32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	61bb      	str	r3, [r7, #24]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	61bb      	str	r3, [r7, #24]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	61bb      	str	r3, [r7, #24]
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	e144      	b.n	80061bc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f32:	2300      	movs	r3, #0
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005f48:	e138      	b.n	80061bc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	f200 80f1 	bhi.w	8006136 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d123      	bne.n	8005fa4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 fdd9 	bl	8006b18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e139      	b.n	80061e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691a      	ldr	r2, [r3, #16]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fa2:	e10b      	b.n	80061bc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d14e      	bne.n	800604a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	4906      	ldr	r1, [pc, #24]	; (8005fd0 <HAL_I2C_Mem_Read+0x22c>)
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 fc56 	bl	8006868 <I2C_WaitOnFlagUntilTimeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d008      	beq.n	8005fd4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e10e      	b.n	80061e4 <HAL_I2C_Mem_Read+0x440>
 8005fc6:	bf00      	nop
 8005fc8:	00100002 	.word	0x00100002
 8005fcc:	ffff0000 	.word	0xffff0000
 8005fd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	691a      	ldr	r2, [r3, #16]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600c:	b29b      	uxth	r3, r3
 800600e:	3b01      	subs	r3, #1
 8006010:	b29a      	uxth	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	1c5a      	adds	r2, r3, #1
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006032:	3b01      	subs	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006048:	e0b8      	b.n	80061bc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006050:	2200      	movs	r2, #0
 8006052:	4966      	ldr	r1, [pc, #408]	; (80061ec <HAL_I2C_Mem_Read+0x448>)
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 fc07 	bl	8006868 <I2C_WaitOnFlagUntilTimeout>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e0bf      	b.n	80061e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006072:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691a      	ldr	r2, [r3, #16]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006090:	3b01      	subs	r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609c:	b29b      	uxth	r3, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ac:	2200      	movs	r2, #0
 80060ae:	494f      	ldr	r1, [pc, #316]	; (80061ec <HAL_I2C_Mem_Read+0x448>)
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 fbd9 	bl	8006868 <I2C_WaitOnFlagUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e091      	b.n	80061e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691a      	ldr	r2, [r3, #16]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	691a      	ldr	r2, [r3, #16]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006134:	e042      	b.n	80061bc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006138:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 fcec 	bl	8006b18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e04c      	b.n	80061e4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	691a      	ldr	r2, [r3, #16]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006166:	3b01      	subs	r3, #1
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006172:	b29b      	uxth	r3, r3
 8006174:	3b01      	subs	r3, #1
 8006176:	b29a      	uxth	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	f003 0304 	and.w	r3, r3, #4
 8006186:	2b04      	cmp	r3, #4
 8006188:	d118      	bne.n	80061bc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	691a      	ldr	r2, [r3, #16]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a6:	3b01      	subs	r3, #1
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	3b01      	subs	r3, #1
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f47f aec2 	bne.w	8005f4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	e000      	b.n	80061e4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80061e2:	2302      	movs	r3, #2
  }
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3728      	adds	r7, #40	; 0x28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	00010004 	.word	0x00010004

080061f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08a      	sub	sp, #40	; 0x28
 80061f4:	af02      	add	r7, sp, #8
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	607a      	str	r2, [r7, #4]
 80061fa:	603b      	str	r3, [r7, #0]
 80061fc:	460b      	mov	r3, r1
 80061fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006200:	f7fc fe1e 	bl	8002e40 <HAL_GetTick>
 8006204:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b20      	cmp	r3, #32
 8006214:	f040 8111 	bne.w	800643a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	2319      	movs	r3, #25
 800621e:	2201      	movs	r2, #1
 8006220:	4988      	ldr	r1, [pc, #544]	; (8006444 <HAL_I2C_IsDeviceReady+0x254>)
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 fb20 	bl	8006868 <I2C_WaitOnFlagUntilTimeout>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800622e:	2302      	movs	r3, #2
 8006230:	e104      	b.n	800643c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006238:	2b01      	cmp	r3, #1
 800623a:	d101      	bne.n	8006240 <HAL_I2C_IsDeviceReady+0x50>
 800623c:	2302      	movs	r3, #2
 800623e:	e0fd      	b.n	800643c <HAL_I2C_IsDeviceReady+0x24c>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b01      	cmp	r3, #1
 8006254:	d007      	beq.n	8006266 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0201 	orr.w	r2, r2, #1
 8006264:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006274:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2224      	movs	r2, #36	; 0x24
 800627a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4a70      	ldr	r2, [pc, #448]	; (8006448 <HAL_I2C_IsDeviceReady+0x258>)
 8006288:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006298:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 fade 	bl	8006868 <I2C_WaitOnFlagUntilTimeout>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00d      	beq.n	80062ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c0:	d103      	bne.n	80062ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062c8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e0b6      	b.n	800643c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062ce:	897b      	ldrh	r3, [r7, #10]
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	461a      	mov	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80062de:	f7fc fdaf 	bl	8002e40 <HAL_GetTick>
 80062e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	bf0c      	ite	eq
 80062f2:	2301      	moveq	r3, #1
 80062f4:	2300      	movne	r3, #0
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006308:	bf0c      	ite	eq
 800630a:	2301      	moveq	r3, #1
 800630c:	2300      	movne	r3, #0
 800630e:	b2db      	uxtb	r3, r3
 8006310:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006312:	e025      	b.n	8006360 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006314:	f7fc fd94 	bl	8002e40 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d302      	bcc.n	800632a <HAL_I2C_IsDeviceReady+0x13a>
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d103      	bne.n	8006332 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	22a0      	movs	r2, #160	; 0xa0
 800632e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b02      	cmp	r3, #2
 800633e:	bf0c      	ite	eq
 8006340:	2301      	moveq	r3, #1
 8006342:	2300      	movne	r3, #0
 8006344:	b2db      	uxtb	r3, r3
 8006346:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006356:	bf0c      	ite	eq
 8006358:	2301      	moveq	r3, #1
 800635a:	2300      	movne	r3, #0
 800635c:	b2db      	uxtb	r3, r3
 800635e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2ba0      	cmp	r3, #160	; 0xa0
 800636a:	d005      	beq.n	8006378 <HAL_I2C_IsDeviceReady+0x188>
 800636c:	7dfb      	ldrb	r3, [r7, #23]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d102      	bne.n	8006378 <HAL_I2C_IsDeviceReady+0x188>
 8006372:	7dbb      	ldrb	r3, [r7, #22]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0cd      	beq.n	8006314 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2220      	movs	r2, #32
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b02      	cmp	r3, #2
 800638c:	d129      	bne.n	80063e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800639c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800639e:	2300      	movs	r3, #0
 80063a0:	613b      	str	r3, [r7, #16]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	613b      	str	r3, [r7, #16]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	613b      	str	r3, [r7, #16]
 80063b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	2319      	movs	r3, #25
 80063ba:	2201      	movs	r2, #1
 80063bc:	4921      	ldr	r1, [pc, #132]	; (8006444 <HAL_I2C_IsDeviceReady+0x254>)
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 fa52 	bl	8006868 <I2C_WaitOnFlagUntilTimeout>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e036      	b.n	800643c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	e02c      	b.n	800643c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	2319      	movs	r3, #25
 8006402:	2201      	movs	r2, #1
 8006404:	490f      	ldr	r1, [pc, #60]	; (8006444 <HAL_I2C_IsDeviceReady+0x254>)
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 fa2e 	bl	8006868 <I2C_WaitOnFlagUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e012      	b.n	800643c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	3301      	adds	r3, #1
 800641a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	429a      	cmp	r2, r3
 8006422:	f4ff af32 	bcc.w	800628a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2220      	movs	r2, #32
 800642a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e000      	b.n	800643c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800643a:	2302      	movs	r3, #2
  }
}
 800643c:	4618      	mov	r0, r3
 800643e:	3720      	adds	r7, #32
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	00100002 	.word	0x00100002
 8006448:	ffff0000 	.word	0xffff0000

0800644c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800645a:	b2db      	uxtb	r3, r3
}
 800645c:	4618      	mov	r0, r3
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af02      	add	r7, sp, #8
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	607a      	str	r2, [r7, #4]
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	460b      	mov	r3, r1
 8006476:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2b08      	cmp	r3, #8
 8006482:	d006      	beq.n	8006492 <I2C_MasterRequestWrite+0x2a>
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d003      	beq.n	8006492 <I2C_MasterRequestWrite+0x2a>
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006490:	d108      	bne.n	80064a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	e00b      	b.n	80064bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a8:	2b12      	cmp	r3, #18
 80064aa:	d107      	bne.n	80064bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 f9cd 	bl	8006868 <I2C_WaitOnFlagUntilTimeout>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00d      	beq.n	80064f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e2:	d103      	bne.n	80064ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e035      	b.n	800655c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064f8:	d108      	bne.n	800650c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064fa:	897b      	ldrh	r3, [r7, #10]
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	461a      	mov	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006508:	611a      	str	r2, [r3, #16]
 800650a:	e01b      	b.n	8006544 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800650c:	897b      	ldrh	r3, [r7, #10]
 800650e:	11db      	asrs	r3, r3, #7
 8006510:	b2db      	uxtb	r3, r3
 8006512:	f003 0306 	and.w	r3, r3, #6
 8006516:	b2db      	uxtb	r3, r3
 8006518:	f063 030f 	orn	r3, r3, #15
 800651c:	b2da      	uxtb	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	490e      	ldr	r1, [pc, #56]	; (8006564 <I2C_MasterRequestWrite+0xfc>)
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 f9f3 	bl	8006916 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e010      	b.n	800655c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800653a:	897b      	ldrh	r3, [r7, #10]
 800653c:	b2da      	uxtb	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	4907      	ldr	r1, [pc, #28]	; (8006568 <I2C_MasterRequestWrite+0x100>)
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f000 f9e3 	bl	8006916 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e000      	b.n	800655c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	00010008 	.word	0x00010008
 8006568:	00010002 	.word	0x00010002

0800656c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b088      	sub	sp, #32
 8006570:	af02      	add	r7, sp, #8
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	4608      	mov	r0, r1
 8006576:	4611      	mov	r1, r2
 8006578:	461a      	mov	r2, r3
 800657a:	4603      	mov	r3, r0
 800657c:	817b      	strh	r3, [r7, #10]
 800657e:	460b      	mov	r3, r1
 8006580:	813b      	strh	r3, [r7, #8]
 8006582:	4613      	mov	r3, r2
 8006584:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006594:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	2200      	movs	r2, #0
 800659e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 f960 	bl	8006868 <I2C_WaitOnFlagUntilTimeout>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00d      	beq.n	80065ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065bc:	d103      	bne.n	80065c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e05f      	b.n	800668a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065ca:	897b      	ldrh	r3, [r7, #10]
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	461a      	mov	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	6a3a      	ldr	r2, [r7, #32]
 80065de:	492d      	ldr	r1, [pc, #180]	; (8006694 <I2C_RequestMemoryWrite+0x128>)
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 f998 	bl	8006916 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e04c      	b.n	800668a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065f0:	2300      	movs	r3, #0
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006608:	6a39      	ldr	r1, [r7, #32]
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 fa02 	bl	8006a14 <I2C_WaitOnTXEFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00d      	beq.n	8006632 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	2b04      	cmp	r3, #4
 800661c:	d107      	bne.n	800662e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800662c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e02b      	b.n	800668a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006632:	88fb      	ldrh	r3, [r7, #6]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d105      	bne.n	8006644 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006638:	893b      	ldrh	r3, [r7, #8]
 800663a:	b2da      	uxtb	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	611a      	str	r2, [r3, #16]
 8006642:	e021      	b.n	8006688 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006644:	893b      	ldrh	r3, [r7, #8]
 8006646:	0a1b      	lsrs	r3, r3, #8
 8006648:	b29b      	uxth	r3, r3
 800664a:	b2da      	uxtb	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006654:	6a39      	ldr	r1, [r7, #32]
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 f9dc 	bl	8006a14 <I2C_WaitOnTXEFlagUntilTimeout>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00d      	beq.n	800667e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	2b04      	cmp	r3, #4
 8006668:	d107      	bne.n	800667a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006678:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e005      	b.n	800668a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800667e:	893b      	ldrh	r3, [r7, #8]
 8006680:	b2da      	uxtb	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	00010002 	.word	0x00010002

08006698 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b088      	sub	sp, #32
 800669c:	af02      	add	r7, sp, #8
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	4608      	mov	r0, r1
 80066a2:	4611      	mov	r1, r2
 80066a4:	461a      	mov	r2, r3
 80066a6:	4603      	mov	r3, r0
 80066a8:	817b      	strh	r3, [r7, #10]
 80066aa:	460b      	mov	r3, r1
 80066ac:	813b      	strh	r3, [r7, #8]
 80066ae:	4613      	mov	r3, r2
 80066b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	2200      	movs	r2, #0
 80066da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f000 f8c2 	bl	8006868 <I2C_WaitOnFlagUntilTimeout>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00d      	beq.n	8006706 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066f8:	d103      	bne.n	8006702 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006700:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e0aa      	b.n	800685c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006706:	897b      	ldrh	r3, [r7, #10]
 8006708:	b2db      	uxtb	r3, r3
 800670a:	461a      	mov	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006714:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	6a3a      	ldr	r2, [r7, #32]
 800671a:	4952      	ldr	r1, [pc, #328]	; (8006864 <I2C_RequestMemoryRead+0x1cc>)
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 f8fa 	bl	8006916 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e097      	b.n	800685c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800672c:	2300      	movs	r3, #0
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	617b      	str	r3, [r7, #20]
 8006740:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006744:	6a39      	ldr	r1, [r7, #32]
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 f964 	bl	8006a14 <I2C_WaitOnTXEFlagUntilTimeout>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00d      	beq.n	800676e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	2b04      	cmp	r3, #4
 8006758:	d107      	bne.n	800676a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006768:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e076      	b.n	800685c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800676e:	88fb      	ldrh	r3, [r7, #6]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d105      	bne.n	8006780 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006774:	893b      	ldrh	r3, [r7, #8]
 8006776:	b2da      	uxtb	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	611a      	str	r2, [r3, #16]
 800677e:	e021      	b.n	80067c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006780:	893b      	ldrh	r3, [r7, #8]
 8006782:	0a1b      	lsrs	r3, r3, #8
 8006784:	b29b      	uxth	r3, r3
 8006786:	b2da      	uxtb	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800678e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006790:	6a39      	ldr	r1, [r7, #32]
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f000 f93e 	bl	8006a14 <I2C_WaitOnTXEFlagUntilTimeout>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00d      	beq.n	80067ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d107      	bne.n	80067b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e050      	b.n	800685c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067ba:	893b      	ldrh	r3, [r7, #8]
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c6:	6a39      	ldr	r1, [r7, #32]
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 f923 	bl	8006a14 <I2C_WaitOnTXEFlagUntilTimeout>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00d      	beq.n	80067f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d8:	2b04      	cmp	r3, #4
 80067da:	d107      	bne.n	80067ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e035      	b.n	800685c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	2200      	movs	r2, #0
 8006808:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f000 f82b 	bl	8006868 <I2C_WaitOnFlagUntilTimeout>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00d      	beq.n	8006834 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006826:	d103      	bne.n	8006830 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800682e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e013      	b.n	800685c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006834:	897b      	ldrh	r3, [r7, #10]
 8006836:	b2db      	uxtb	r3, r3
 8006838:	f043 0301 	orr.w	r3, r3, #1
 800683c:	b2da      	uxtb	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	6a3a      	ldr	r2, [r7, #32]
 8006848:	4906      	ldr	r1, [pc, #24]	; (8006864 <I2C_RequestMemoryRead+0x1cc>)
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 f863 	bl	8006916 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e000      	b.n	800685c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	00010002 	.word	0x00010002

08006868 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	603b      	str	r3, [r7, #0]
 8006874:	4613      	mov	r3, r2
 8006876:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006878:	e025      	b.n	80068c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006880:	d021      	beq.n	80068c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006882:	f7fc fadd 	bl	8002e40 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	429a      	cmp	r2, r3
 8006890:	d302      	bcc.n	8006898 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d116      	bne.n	80068c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	f043 0220 	orr.w	r2, r3, #32
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e023      	b.n	800690e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	0c1b      	lsrs	r3, r3, #16
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d10d      	bne.n	80068ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	43da      	mvns	r2, r3
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	4013      	ands	r3, r2
 80068dc:	b29b      	uxth	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	bf0c      	ite	eq
 80068e2:	2301      	moveq	r3, #1
 80068e4:	2300      	movne	r3, #0
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	461a      	mov	r2, r3
 80068ea:	e00c      	b.n	8006906 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	43da      	mvns	r2, r3
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	4013      	ands	r3, r2
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	bf0c      	ite	eq
 80068fe:	2301      	moveq	r3, #1
 8006900:	2300      	movne	r3, #0
 8006902:	b2db      	uxtb	r3, r3
 8006904:	461a      	mov	r2, r3
 8006906:	79fb      	ldrb	r3, [r7, #7]
 8006908:	429a      	cmp	r2, r3
 800690a:	d0b6      	beq.n	800687a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	60f8      	str	r0, [r7, #12]
 800691e:	60b9      	str	r1, [r7, #8]
 8006920:	607a      	str	r2, [r7, #4]
 8006922:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006924:	e051      	b.n	80069ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006934:	d123      	bne.n	800697e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006944:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800694e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2220      	movs	r2, #32
 800695a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	f043 0204 	orr.w	r2, r3, #4
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e046      	b.n	8006a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006984:	d021      	beq.n	80069ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006986:	f7fc fa5b 	bl	8002e40 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	429a      	cmp	r2, r3
 8006994:	d302      	bcc.n	800699c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d116      	bne.n	80069ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b6:	f043 0220 	orr.w	r2, r3, #32
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e020      	b.n	8006a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	0c1b      	lsrs	r3, r3, #16
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d10c      	bne.n	80069ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	43da      	mvns	r2, r3
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4013      	ands	r3, r2
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	bf14      	ite	ne
 80069e6:	2301      	movne	r3, #1
 80069e8:	2300      	moveq	r3, #0
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	e00b      	b.n	8006a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	43da      	mvns	r2, r3
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	4013      	ands	r3, r2
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	bf14      	ite	ne
 8006a00:	2301      	movne	r3, #1
 8006a02:	2300      	moveq	r3, #0
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d18d      	bne.n	8006926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a20:	e02d      	b.n	8006a7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 f8ce 	bl	8006bc4 <I2C_IsAcknowledgeFailed>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e02d      	b.n	8006a8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a38:	d021      	beq.n	8006a7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a3a:	f7fc fa01 	bl	8002e40 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d302      	bcc.n	8006a50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d116      	bne.n	8006a7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	f043 0220 	orr.w	r2, r3, #32
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e007      	b.n	8006a8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a88:	2b80      	cmp	r3, #128	; 0x80
 8006a8a:	d1ca      	bne.n	8006a22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	60f8      	str	r0, [r7, #12]
 8006a9e:	60b9      	str	r1, [r7, #8]
 8006aa0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006aa2:	e02d      	b.n	8006b00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 f88d 	bl	8006bc4 <I2C_IsAcknowledgeFailed>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e02d      	b.n	8006b10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aba:	d021      	beq.n	8006b00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006abc:	f7fc f9c0 	bl	8002e40 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d302      	bcc.n	8006ad2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d116      	bne.n	8006b00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2220      	movs	r2, #32
 8006adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aec:	f043 0220 	orr.w	r2, r3, #32
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e007      	b.n	8006b10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	f003 0304 	and.w	r3, r3, #4
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d1ca      	bne.n	8006aa4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b24:	e042      	b.n	8006bac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	f003 0310 	and.w	r3, r3, #16
 8006b30:	2b10      	cmp	r3, #16
 8006b32:	d119      	bne.n	8006b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f06f 0210 	mvn.w	r2, #16
 8006b3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e029      	b.n	8006bbc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b68:	f7fc f96a 	bl	8002e40 <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d302      	bcc.n	8006b7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d116      	bne.n	8006bac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	f043 0220 	orr.w	r2, r3, #32
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e007      	b.n	8006bbc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb6:	2b40      	cmp	r3, #64	; 0x40
 8006bb8:	d1b5      	bne.n	8006b26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bda:	d11b      	bne.n	8006c14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006be4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c00:	f043 0204 	orr.w	r2, r3, #4
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e000      	b.n	8006c16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
	...

08006c24 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e128      	b.n	8006e88 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d109      	bne.n	8006c56 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a90      	ldr	r2, [pc, #576]	; (8006e90 <HAL_I2S_Init+0x26c>)
 8006c4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7fa feb3 	bl	80019bc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2202      	movs	r2, #2
 8006c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	6812      	ldr	r2, [r2, #0]
 8006c68:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006c6c:	f023 030f 	bic.w	r3, r3, #15
 8006c70:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2202      	movs	r2, #2
 8006c78:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d060      	beq.n	8006d44 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d102      	bne.n	8006c90 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006c8a:	2310      	movs	r3, #16
 8006c8c:	617b      	str	r3, [r7, #20]
 8006c8e:	e001      	b.n	8006c94 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006c90:	2320      	movs	r3, #32
 8006c92:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	2b20      	cmp	r3, #32
 8006c9a:	d802      	bhi.n	8006ca2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	005b      	lsls	r3, r3, #1
 8006ca0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	f001 fe28 	bl	80088f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006ca8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb2:	d125      	bne.n	8006d00 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d010      	beq.n	8006cde <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	005b      	lsls	r3, r3, #1
 8006cce:	461a      	mov	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd8:	3305      	adds	r3, #5
 8006cda:	613b      	str	r3, [r7, #16]
 8006cdc:	e01f      	b.n	8006d1e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ce8:	4613      	mov	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	005b      	lsls	r3, r3, #1
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cfa:	3305      	adds	r3, #5
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	e00e      	b.n	8006d1e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d08:	4613      	mov	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	005b      	lsls	r3, r3, #1
 8006d10:	461a      	mov	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1a:	3305      	adds	r3, #5
 8006d1c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	4a5c      	ldr	r2, [pc, #368]	; (8006e94 <HAL_I2S_Init+0x270>)
 8006d22:	fba2 2303 	umull	r2, r3, r2, r3
 8006d26:	08db      	lsrs	r3, r3, #3
 8006d28:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	085b      	lsrs	r3, r3, #1
 8006d3a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	021b      	lsls	r3, r3, #8
 8006d40:	61bb      	str	r3, [r7, #24]
 8006d42:	e003      	b.n	8006d4c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006d44:	2302      	movs	r3, #2
 8006d46:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d902      	bls.n	8006d58 <HAL_I2S_Init+0x134>
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	2bff      	cmp	r3, #255	; 0xff
 8006d56:	d907      	bls.n	8006d68 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5c:	f043 0210 	orr.w	r2, r3, #16
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e08f      	b.n	8006e88 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	691a      	ldr	r2, [r3, #16]
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	ea42 0103 	orr.w	r1, r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69fa      	ldr	r2, [r7, #28]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006d86:	f023 030f 	bic.w	r3, r3, #15
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	6851      	ldr	r1, [r2, #4]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	6892      	ldr	r2, [r2, #8]
 8006d92:	4311      	orrs	r1, r2
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	68d2      	ldr	r2, [r2, #12]
 8006d98:	4311      	orrs	r1, r2
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	6992      	ldr	r2, [r2, #24]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	431a      	orrs	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006daa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d161      	bne.n	8006e78 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a38      	ldr	r2, [pc, #224]	; (8006e98 <HAL_I2S_Init+0x274>)
 8006db8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a37      	ldr	r2, [pc, #220]	; (8006e9c <HAL_I2S_Init+0x278>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d101      	bne.n	8006dc8 <HAL_I2S_Init+0x1a4>
 8006dc4:	4b36      	ldr	r3, [pc, #216]	; (8006ea0 <HAL_I2S_Init+0x27c>)
 8006dc6:	e001      	b.n	8006dcc <HAL_I2S_Init+0x1a8>
 8006dc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	6812      	ldr	r2, [r2, #0]
 8006dd2:	4932      	ldr	r1, [pc, #200]	; (8006e9c <HAL_I2S_Init+0x278>)
 8006dd4:	428a      	cmp	r2, r1
 8006dd6:	d101      	bne.n	8006ddc <HAL_I2S_Init+0x1b8>
 8006dd8:	4a31      	ldr	r2, [pc, #196]	; (8006ea0 <HAL_I2S_Init+0x27c>)
 8006dda:	e001      	b.n	8006de0 <HAL_I2S_Init+0x1bc>
 8006ddc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006de0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006de4:	f023 030f 	bic.w	r3, r3, #15
 8006de8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a2b      	ldr	r2, [pc, #172]	; (8006e9c <HAL_I2S_Init+0x278>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d101      	bne.n	8006df8 <HAL_I2S_Init+0x1d4>
 8006df4:	4b2a      	ldr	r3, [pc, #168]	; (8006ea0 <HAL_I2S_Init+0x27c>)
 8006df6:	e001      	b.n	8006dfc <HAL_I2S_Init+0x1d8>
 8006df8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a25      	ldr	r2, [pc, #148]	; (8006e9c <HAL_I2S_Init+0x278>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d101      	bne.n	8006e0e <HAL_I2S_Init+0x1ea>
 8006e0a:	4b25      	ldr	r3, [pc, #148]	; (8006ea0 <HAL_I2S_Init+0x27c>)
 8006e0c:	e001      	b.n	8006e12 <HAL_I2S_Init+0x1ee>
 8006e0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e1e:	d003      	beq.n	8006e28 <HAL_I2S_Init+0x204>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d103      	bne.n	8006e30 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e2c:	613b      	str	r3, [r7, #16]
 8006e2e:	e001      	b.n	8006e34 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006e30:	2300      	movs	r3, #0
 8006e32:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006e52:	4313      	orrs	r3, r2
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	897b      	ldrh	r3, [r7, #10]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e60:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a0d      	ldr	r2, [pc, #52]	; (8006e9c <HAL_I2S_Init+0x278>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d101      	bne.n	8006e70 <HAL_I2S_Init+0x24c>
 8006e6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ea0 <HAL_I2S_Init+0x27c>)
 8006e6e:	e001      	b.n	8006e74 <HAL_I2S_Init+0x250>
 8006e70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e74:	897a      	ldrh	r2, [r7, #10]
 8006e76:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3720      	adds	r7, #32
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	08007729 	.word	0x08007729
 8006e94:	cccccccd 	.word	0xcccccccd
 8006e98:	080078b1 	.word	0x080078b1
 8006e9c:	40003800 	.word	0x40003800
 8006ea0:	40003400 	.word	0x40003400

08006ea4 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <HAL_I2S_Transmit_DMA+0x1a>
 8006eb8:	88fb      	ldrh	r3, [r7, #6]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e08e      	b.n	8006fe0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d101      	bne.n	8006ed2 <HAL_I2S_Transmit_DMA+0x2e>
 8006ece:	2302      	movs	r3, #2
 8006ed0:	e086      	b.n	8006fe0 <HAL_I2S_Transmit_DMA+0x13c>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d005      	beq.n	8006ef2 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e076      	b.n	8006fe0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2203      	movs	r2, #3
 8006ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	69db      	ldr	r3, [r3, #28]
 8006f0c:	f003 0307 	and.w	r3, r3, #7
 8006f10:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2b03      	cmp	r3, #3
 8006f16:	d002      	beq.n	8006f1e <HAL_I2S_Transmit_DMA+0x7a>
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	2b05      	cmp	r3, #5
 8006f1c:	d10a      	bne.n	8006f34 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8006f1e:	88fb      	ldrh	r3, [r7, #6]
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8006f28:	88fb      	ldrh	r3, [r7, #6]
 8006f2a:	005b      	lsls	r3, r3, #1
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f32:	e005      	b.n	8006f40 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	88fa      	ldrh	r2, [r7, #6]
 8006f38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	88fa      	ldrh	r2, [r7, #6]
 8006f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f44:	4a28      	ldr	r2, [pc, #160]	; (8006fe8 <HAL_I2S_Transmit_DMA+0x144>)
 8006f46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	4a27      	ldr	r2, [pc, #156]	; (8006fec <HAL_I2S_Transmit_DMA+0x148>)
 8006f4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f54:	4a26      	ldr	r2, [pc, #152]	; (8006ff0 <HAL_I2S_Transmit_DMA+0x14c>)
 8006f56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006f60:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006f68:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f6e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006f70:	f7fc f9b4 	bl	80032dc <HAL_DMA_Start_IT>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00f      	beq.n	8006f9a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7e:	f043 0208 	orr.w	r2, r3, #8
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e022      	b.n	8006fe0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d107      	bne.n	8006fb8 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	69da      	ldr	r2, [r3, #28]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fb6:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d107      	bne.n	8006fd6 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f042 0202 	orr.w	r2, r2, #2
 8006fd4:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	08007607 	.word	0x08007607
 8006fec:	080075c5 	.word	0x080075c5
 8006ff0:	08007623 	.word	0x08007623

08006ff4 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b01      	cmp	r3, #1
 8007006:	d101      	bne.n	800700c <HAL_I2S_DMAPause+0x18>
 8007008:	2302      	movs	r3, #2
 800700a:	e04a      	b.n	80070a2 <HAL_I2S_DMAPause+0xae>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b03      	cmp	r3, #3
 800701e:	d108      	bne.n	8007032 <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 0202 	bic.w	r2, r2, #2
 800702e:	605a      	str	r2, [r3, #4]
 8007030:	e032      	b.n	8007098 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b04      	cmp	r3, #4
 800703c:	d108      	bne.n	8007050 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 0201 	bic.w	r2, r2, #1
 800704c:	605a      	str	r2, [r3, #4]
 800704e:	e023      	b.n	8007098 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b05      	cmp	r3, #5
 800705a:	d11d      	bne.n	8007098 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0203 	bic.w	r2, r2, #3
 800706a:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a0f      	ldr	r2, [pc, #60]	; (80070b0 <HAL_I2S_DMAPause+0xbc>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d101      	bne.n	800707a <HAL_I2S_DMAPause+0x86>
 8007076:	4b0f      	ldr	r3, [pc, #60]	; (80070b4 <HAL_I2S_DMAPause+0xc0>)
 8007078:	e001      	b.n	800707e <HAL_I2S_DMAPause+0x8a>
 800707a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	490a      	ldr	r1, [pc, #40]	; (80070b0 <HAL_I2S_DMAPause+0xbc>)
 8007086:	428b      	cmp	r3, r1
 8007088:	d101      	bne.n	800708e <HAL_I2S_DMAPause+0x9a>
 800708a:	4b0a      	ldr	r3, [pc, #40]	; (80070b4 <HAL_I2S_DMAPause+0xc0>)
 800708c:	e001      	b.n	8007092 <HAL_I2S_DMAPause+0x9e>
 800708e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007092:	f022 0203 	bic.w	r2, r2, #3
 8007096:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	40003800 	.word	0x40003800
 80070b4:	40003400 	.word	0x40003400

080070b8 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d101      	bne.n	80070d0 <HAL_I2S_DMAResume+0x18>
 80070cc:	2302      	movs	r3, #2
 80070ce:	e07d      	b.n	80071cc <HAL_I2S_DMAResume+0x114>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d108      	bne.n	80070f6 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0202 	orr.w	r2, r2, #2
 80070f2:	605a      	str	r2, [r3, #4]
 80070f4:	e056      	b.n	80071a4 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b04      	cmp	r3, #4
 8007100:	d108      	bne.n	8007114 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f042 0201 	orr.w	r2, r2, #1
 8007110:	605a      	str	r2, [r3, #4]
 8007112:	e047      	b.n	80071a4 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b05      	cmp	r3, #5
 800711e:	d141      	bne.n	80071a4 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0203 	orr.w	r2, r2, #3
 800712e:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a28      	ldr	r2, [pc, #160]	; (80071d8 <HAL_I2S_DMAResume+0x120>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d101      	bne.n	800713e <HAL_I2S_DMAResume+0x86>
 800713a:	4b28      	ldr	r3, [pc, #160]	; (80071dc <HAL_I2S_DMAResume+0x124>)
 800713c:	e001      	b.n	8007142 <HAL_I2S_DMAResume+0x8a>
 800713e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4923      	ldr	r1, [pc, #140]	; (80071d8 <HAL_I2S_DMAResume+0x120>)
 800714a:	428b      	cmp	r3, r1
 800714c:	d101      	bne.n	8007152 <HAL_I2S_DMAResume+0x9a>
 800714e:	4b23      	ldr	r3, [pc, #140]	; (80071dc <HAL_I2S_DMAResume+0x124>)
 8007150:	e001      	b.n	8007156 <HAL_I2S_DMAResume+0x9e>
 8007152:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007156:	f042 0203 	orr.w	r2, r2, #3
 800715a:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a1d      	ldr	r2, [pc, #116]	; (80071d8 <HAL_I2S_DMAResume+0x120>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d101      	bne.n	800716a <HAL_I2S_DMAResume+0xb2>
 8007166:	4b1d      	ldr	r3, [pc, #116]	; (80071dc <HAL_I2S_DMAResume+0x124>)
 8007168:	e001      	b.n	800716e <HAL_I2S_DMAResume+0xb6>
 800716a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007174:	2b00      	cmp	r3, #0
 8007176:	d115      	bne.n	80071a4 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a16      	ldr	r2, [pc, #88]	; (80071d8 <HAL_I2S_DMAResume+0x120>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d101      	bne.n	8007186 <HAL_I2S_DMAResume+0xce>
 8007182:	4b16      	ldr	r3, [pc, #88]	; (80071dc <HAL_I2S_DMAResume+0x124>)
 8007184:	e001      	b.n	800718a <HAL_I2S_DMAResume+0xd2>
 8007186:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800718a:	69da      	ldr	r2, [r3, #28]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4911      	ldr	r1, [pc, #68]	; (80071d8 <HAL_I2S_DMAResume+0x120>)
 8007192:	428b      	cmp	r3, r1
 8007194:	d101      	bne.n	800719a <HAL_I2S_DMAResume+0xe2>
 8007196:	4b11      	ldr	r3, [pc, #68]	; (80071dc <HAL_I2S_DMAResume+0x124>)
 8007198:	e001      	b.n	800719e <HAL_I2S_DMAResume+0xe6>
 800719a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800719e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071a2:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d107      	bne.n	80071c2 <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69da      	ldr	r2, [r3, #28]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071c0:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	40003800 	.word	0x40003800
 80071dc:	40003400 	.word	0x40003400

080071e0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b088      	sub	sp, #32
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071f4:	d004      	beq.n	8007200 <HAL_I2S_DMAStop+0x20>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f040 80d1 	bne.w	80073a2 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00f      	beq.n	8007228 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720c:	4618      	mov	r0, r3
 800720e:	f7fc f8bd 	bl	800338c <HAL_DMA_Abort>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d007      	beq.n	8007228 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721c:	f043 0208 	orr.w	r2, r3, #8
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8007228:	2364      	movs	r3, #100	; 0x64
 800722a:	2201      	movs	r2, #1
 800722c:	2102      	movs	r1, #2
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fb04 	bl	800783c <I2S_WaitFlagStateUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00b      	beq.n	8007252 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723e:	f043 0201 	orr.w	r2, r3, #1
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8007252:	2364      	movs	r3, #100	; 0x64
 8007254:	2200      	movs	r2, #0
 8007256:	2180      	movs	r1, #128	; 0x80
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 faef 	bl	800783c <I2S_WaitFlagStateUntilTimeout>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00b      	beq.n	800727c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007268:	f043 0201 	orr.w	r2, r3, #1
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	69da      	ldr	r2, [r3, #28]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800728a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800728c:	2300      	movs	r3, #0
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	617b      	str	r3, [r7, #20]
 8007298:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f022 0202 	bic.w	r2, r2, #2
 80072a8:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b05      	cmp	r3, #5
 80072b4:	f040 8165 	bne.w	8007582 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00f      	beq.n	80072e0 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fc f861 	bl	800338c <HAL_DMA_Abort>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d007      	beq.n	80072e0 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d4:	f043 0208 	orr.w	r2, r3, #8
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a8a      	ldr	r2, [pc, #552]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d101      	bne.n	80072ee <HAL_I2S_DMAStop+0x10e>
 80072ea:	4b8a      	ldr	r3, [pc, #552]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 80072ec:	e001      	b.n	80072f2 <HAL_I2S_DMAStop+0x112>
 80072ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072f2:	69da      	ldr	r2, [r3, #28]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4985      	ldr	r1, [pc, #532]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 80072fa:	428b      	cmp	r3, r1
 80072fc:	d101      	bne.n	8007302 <HAL_I2S_DMAStop+0x122>
 80072fe:	4b85      	ldr	r3, [pc, #532]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 8007300:	e001      	b.n	8007306 <HAL_I2S_DMAStop+0x126>
 8007302:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800730a:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 800730c:	2300      	movs	r3, #0
 800730e:	613b      	str	r3, [r7, #16]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a7e      	ldr	r2, [pc, #504]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d101      	bne.n	800731e <HAL_I2S_DMAStop+0x13e>
 800731a:	4b7e      	ldr	r3, [pc, #504]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 800731c:	e001      	b.n	8007322 <HAL_I2S_DMAStop+0x142>
 800731e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	613b      	str	r3, [r7, #16]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a79      	ldr	r2, [pc, #484]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d101      	bne.n	8007334 <HAL_I2S_DMAStop+0x154>
 8007330:	4b78      	ldr	r3, [pc, #480]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 8007332:	e001      	b.n	8007338 <HAL_I2S_DMAStop+0x158>
 8007334:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	613b      	str	r3, [r7, #16]
 800733c:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a73      	ldr	r2, [pc, #460]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d101      	bne.n	800734c <HAL_I2S_DMAStop+0x16c>
 8007348:	4b72      	ldr	r3, [pc, #456]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 800734a:	e001      	b.n	8007350 <HAL_I2S_DMAStop+0x170>
 800734c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	496e      	ldr	r1, [pc, #440]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 8007358:	428b      	cmp	r3, r1
 800735a:	d101      	bne.n	8007360 <HAL_I2S_DMAStop+0x180>
 800735c:	4b6d      	ldr	r3, [pc, #436]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 800735e:	e001      	b.n	8007364 <HAL_I2S_DMAStop+0x184>
 8007360:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007364:	f022 0201 	bic.w	r2, r2, #1
 8007368:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10c      	bne.n	800738c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007376:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800738a:	e0fa      	b.n	8007582 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a5f      	ldr	r2, [pc, #380]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d101      	bne.n	800739a <HAL_I2S_DMAStop+0x1ba>
 8007396:	4b5f      	ldr	r3, [pc, #380]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 8007398:	e001      	b.n	800739e <HAL_I2S_DMAStop+0x1be>
 800739a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800739e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80073a0:	e0ef      	b.n	8007582 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073aa:	d005      	beq.n	80073b8 <HAL_I2S_DMAStop+0x1d8>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073b4:	f040 80e5 	bne.w	8007582 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00f      	beq.n	80073e0 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fb ffe1 	bl	800338c <HAL_DMA_Abort>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d007      	beq.n	80073e0 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d4:	f043 0208 	orr.w	r2, r3, #8
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b05      	cmp	r3, #5
 80073ea:	f040 809a 	bne.w	8007522 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00f      	beq.n	8007416 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fb ffc6 	bl	800338c <HAL_DMA_Abort>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d007      	beq.n	8007416 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740a:	f043 0208 	orr.w	r2, r3, #8
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8007416:	f7fb fd13 	bl	8002e40 <HAL_GetTick>
 800741a:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800741c:	e012      	b.n	8007444 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800741e:	f7fb fd0f 	bl	8002e40 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	2b64      	cmp	r3, #100	; 0x64
 800742a:	d90b      	bls.n	8007444 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007430:	f043 0201 	orr.w	r2, r3, #1
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a31      	ldr	r2, [pc, #196]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d101      	bne.n	8007452 <HAL_I2S_DMAStop+0x272>
 800744e:	4b31      	ldr	r3, [pc, #196]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 8007450:	e001      	b.n	8007456 <HAL_I2S_DMAStop+0x276>
 8007452:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b02      	cmp	r3, #2
 800745e:	d1de      	bne.n	800741e <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8007460:	e012      	b.n	8007488 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8007462:	f7fb fced 	bl	8002e40 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	2b64      	cmp	r3, #100	; 0x64
 800746e:	d90b      	bls.n	8007488 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007474:	f043 0201 	orr.w	r2, r3, #1
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a20      	ldr	r2, [pc, #128]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d101      	bne.n	8007496 <HAL_I2S_DMAStop+0x2b6>
 8007492:	4b20      	ldr	r3, [pc, #128]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 8007494:	e001      	b.n	800749a <HAL_I2S_DMAStop+0x2ba>
 8007496:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a0:	2b80      	cmp	r3, #128	; 0x80
 80074a2:	d0de      	beq.n	8007462 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a19      	ldr	r2, [pc, #100]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d101      	bne.n	80074b2 <HAL_I2S_DMAStop+0x2d2>
 80074ae:	4b19      	ldr	r3, [pc, #100]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 80074b0:	e001      	b.n	80074b6 <HAL_I2S_DMAStop+0x2d6>
 80074b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074b6:	69da      	ldr	r2, [r3, #28]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4914      	ldr	r1, [pc, #80]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 80074be:	428b      	cmp	r3, r1
 80074c0:	d101      	bne.n	80074c6 <HAL_I2S_DMAStop+0x2e6>
 80074c2:	4b14      	ldr	r3, [pc, #80]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 80074c4:	e001      	b.n	80074ca <HAL_I2S_DMAStop+0x2ea>
 80074c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074ce:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a0d      	ldr	r2, [pc, #52]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d101      	bne.n	80074e2 <HAL_I2S_DMAStop+0x302>
 80074de:	4b0d      	ldr	r3, [pc, #52]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 80074e0:	e001      	b.n	80074e6 <HAL_I2S_DMAStop+0x306>
 80074e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a07      	ldr	r2, [pc, #28]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d101      	bne.n	80074fa <HAL_I2S_DMAStop+0x31a>
 80074f6:	4b07      	ldr	r3, [pc, #28]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 80074f8:	e001      	b.n	80074fe <HAL_I2S_DMAStop+0x31e>
 80074fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4902      	ldr	r1, [pc, #8]	; (8007510 <HAL_I2S_DMAStop+0x330>)
 8007506:	428b      	cmp	r3, r1
 8007508:	d106      	bne.n	8007518 <HAL_I2S_DMAStop+0x338>
 800750a:	4b02      	ldr	r3, [pc, #8]	; (8007514 <HAL_I2S_DMAStop+0x334>)
 800750c:	e006      	b.n	800751c <HAL_I2S_DMAStop+0x33c>
 800750e:	bf00      	nop
 8007510:	40003800 	.word	0x40003800
 8007514:	40003400 	.word	0x40003400
 8007518:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800751c:	f022 0202 	bic.w	r2, r2, #2
 8007520:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	69da      	ldr	r2, [r3, #28]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007530:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007532:	2300      	movs	r3, #0
 8007534:	60bb      	str	r3, [r7, #8]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	60bb      	str	r3, [r7, #8]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	60bb      	str	r3, [r7, #8]
 8007546:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f022 0201 	bic.w	r2, r2, #1
 8007556:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007560:	d10c      	bne.n	800757c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007566:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	77fb      	strb	r3, [r7, #31]
 800757a:	e002      	b.n	8007582 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 800758a:	7ffb      	ldrb	r3, [r7, #31]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3720      	adds	r7, #32
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075b6:	b2db      	uxtb	r3, r3
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10e      	bne.n	80075f8 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 0202 	bic.w	r2, r2, #2
 80075e8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f7f9 f84f 	bl	800069c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80075fe:	bf00      	nop
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007612:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f7f9 f853 	bl	80006c0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800761a:	bf00      	nop
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b084      	sub	sp, #16
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f022 0203 	bic.w	r2, r2, #3
 800763e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007658:	f043 0208 	orr.w	r2, r3, #8
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f7f9 f99d 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007666:	bf00      	nop
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b082      	sub	sp, #8
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	881a      	ldrh	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007686:	1c9a      	adds	r2, r3, #2
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007690:	b29b      	uxth	r3, r3
 8007692:	3b01      	subs	r3, #1
 8007694:	b29a      	uxth	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800769e:	b29b      	uxth	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10e      	bne.n	80076c2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80076b2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f7f8 ffed 	bl	800069c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80076c2:	bf00      	nop
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b082      	sub	sp, #8
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076dc:	b292      	uxth	r2, r2
 80076de:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e4:	1c9a      	adds	r2, r3, #2
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	3b01      	subs	r3, #1
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10e      	bne.n	8007720 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007710:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7ff ff3a 	bl	8007594 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007720:	bf00      	nop
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b04      	cmp	r3, #4
 8007742:	d13a      	bne.n	80077ba <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b01      	cmp	r3, #1
 800774c:	d109      	bne.n	8007762 <I2S_IRQHandler+0x3a>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007758:	2b40      	cmp	r3, #64	; 0x40
 800775a:	d102      	bne.n	8007762 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7ff ffb4 	bl	80076ca <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007768:	2b40      	cmp	r3, #64	; 0x40
 800776a:	d126      	bne.n	80077ba <I2S_IRQHandler+0x92>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f003 0320 	and.w	r3, r3, #32
 8007776:	2b20      	cmp	r3, #32
 8007778:	d11f      	bne.n	80077ba <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007788:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800778a:	2300      	movs	r3, #0
 800778c:	613b      	str	r3, [r7, #16]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	613b      	str	r3, [r7, #16]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	613b      	str	r3, [r7, #16]
 800779e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ac:	f043 0202 	orr.w	r2, r3, #2
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7f9 f8f3 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d136      	bne.n	8007834 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f003 0302 	and.w	r3, r3, #2
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d109      	bne.n	80077e4 <I2S_IRQHandler+0xbc>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077da:	2b80      	cmp	r3, #128	; 0x80
 80077dc:	d102      	bne.n	80077e4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7ff ff45 	bl	800766e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f003 0308 	and.w	r3, r3, #8
 80077ea:	2b08      	cmp	r3, #8
 80077ec:	d122      	bne.n	8007834 <I2S_IRQHandler+0x10c>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	f003 0320 	and.w	r3, r3, #32
 80077f8:	2b20      	cmp	r3, #32
 80077fa:	d11b      	bne.n	8007834 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800780a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800780c:	2300      	movs	r3, #0
 800780e:	60fb      	str	r3, [r7, #12]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007826:	f043 0204 	orr.w	r2, r3, #4
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7f9 f8b6 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007834:	bf00      	nop
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	603b      	str	r3, [r7, #0]
 8007848:	4613      	mov	r3, r2
 800784a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800784c:	f7fb faf8 	bl	8002e40 <HAL_GetTick>
 8007850:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007852:	e018      	b.n	8007886 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785a:	d014      	beq.n	8007886 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800785c:	f7fb faf0 	bl	8002e40 <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	429a      	cmp	r2, r3
 800786a:	d902      	bls.n	8007872 <I2S_WaitFlagStateUntilTimeout+0x36>
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d109      	bne.n	8007886 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e00f      	b.n	80078a6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689a      	ldr	r2, [r3, #8]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	4013      	ands	r3, r2
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	429a      	cmp	r2, r3
 8007894:	bf0c      	ite	eq
 8007896:	2301      	moveq	r3, #1
 8007898:	2300      	movne	r3, #0
 800789a:	b2db      	uxtb	r3, r3
 800789c:	461a      	mov	r2, r3
 800789e:	79fb      	ldrb	r3, [r7, #7]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d1d7      	bne.n	8007854 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3718      	adds	r7, #24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
	...

080078b0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a92      	ldr	r2, [pc, #584]	; (8007b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d101      	bne.n	80078ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80078ca:	4b92      	ldr	r3, [pc, #584]	; (8007b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80078cc:	e001      	b.n	80078d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80078ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a8b      	ldr	r2, [pc, #556]	; (8007b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d101      	bne.n	80078ec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80078e8:	4b8a      	ldr	r3, [pc, #552]	; (8007b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80078ea:	e001      	b.n	80078f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80078ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078fc:	d004      	beq.n	8007908 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	f040 8099 	bne.w	8007a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b02      	cmp	r3, #2
 8007910:	d107      	bne.n	8007922 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f925 	bl	8007b6c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b01      	cmp	r3, #1
 800792a:	d107      	bne.n	800793c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007932:	2b00      	cmp	r3, #0
 8007934:	d002      	beq.n	800793c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f9c8 	bl	8007ccc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007942:	2b40      	cmp	r3, #64	; 0x40
 8007944:	d13a      	bne.n	80079bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f003 0320 	and.w	r3, r3, #32
 800794c:	2b00      	cmp	r3, #0
 800794e:	d035      	beq.n	80079bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a6e      	ldr	r2, [pc, #440]	; (8007b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d101      	bne.n	800795e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800795a:	4b6e      	ldr	r3, [pc, #440]	; (8007b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800795c:	e001      	b.n	8007962 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800795e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4969      	ldr	r1, [pc, #420]	; (8007b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800796a:	428b      	cmp	r3, r1
 800796c:	d101      	bne.n	8007972 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800796e:	4b69      	ldr	r3, [pc, #420]	; (8007b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007970:	e001      	b.n	8007976 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007972:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007976:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800797a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800798a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800798c:	2300      	movs	r3, #0
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	60fb      	str	r3, [r7, #12]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ae:	f043 0202 	orr.w	r2, r3, #2
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7f8 fff2 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	f003 0308 	and.w	r3, r3, #8
 80079c2:	2b08      	cmp	r3, #8
 80079c4:	f040 80c3 	bne.w	8007b4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f003 0320 	and.w	r3, r3, #32
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 80bd 	beq.w	8007b4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80079e2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a49      	ldr	r2, [pc, #292]	; (8007b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d101      	bne.n	80079f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80079ee:	4b49      	ldr	r3, [pc, #292]	; (8007b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80079f0:	e001      	b.n	80079f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80079f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4944      	ldr	r1, [pc, #272]	; (8007b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80079fe:	428b      	cmp	r3, r1
 8007a00:	d101      	bne.n	8007a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007a02:	4b44      	ldr	r3, [pc, #272]	; (8007b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007a04:	e001      	b.n	8007a0a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007a06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007a0e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007a10:	2300      	movs	r3, #0
 8007a12:	60bb      	str	r3, [r7, #8]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	60bb      	str	r3, [r7, #8]
 8007a1c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a2a:	f043 0204 	orr.w	r2, r3, #4
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7f8 ffb4 	bl	80009a0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007a38:	e089      	b.n	8007b4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	f003 0302 	and.w	r3, r3, #2
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d107      	bne.n	8007a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d002      	beq.n	8007a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f8be 	bl	8007bd0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d107      	bne.n	8007a6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f8fd 	bl	8007c68 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a74:	2b40      	cmp	r3, #64	; 0x40
 8007a76:	d12f      	bne.n	8007ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f003 0320 	and.w	r3, r3, #32
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d02a      	beq.n	8007ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	685a      	ldr	r2, [r3, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007a90:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a1e      	ldr	r2, [pc, #120]	; (8007b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d101      	bne.n	8007aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007a9c:	4b1d      	ldr	r3, [pc, #116]	; (8007b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007a9e:	e001      	b.n	8007aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007aa0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4919      	ldr	r1, [pc, #100]	; (8007b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007aac:	428b      	cmp	r3, r1
 8007aae:	d101      	bne.n	8007ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007ab0:	4b18      	ldr	r3, [pc, #96]	; (8007b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007ab2:	e001      	b.n	8007ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007ab4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ab8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007abc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aca:	f043 0202 	orr.w	r2, r3, #2
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7f8 ff64 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	f003 0308 	and.w	r3, r3, #8
 8007ade:	2b08      	cmp	r3, #8
 8007ae0:	d136      	bne.n	8007b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f003 0320 	and.w	r3, r3, #32
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d031      	beq.n	8007b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a07      	ldr	r2, [pc, #28]	; (8007b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d101      	bne.n	8007afa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007af6:	4b07      	ldr	r3, [pc, #28]	; (8007b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007af8:	e001      	b.n	8007afe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007afa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4902      	ldr	r1, [pc, #8]	; (8007b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007b06:	428b      	cmp	r3, r1
 8007b08:	d106      	bne.n	8007b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8007b0a:	4b02      	ldr	r3, [pc, #8]	; (8007b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007b0c:	e006      	b.n	8007b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8007b0e:	bf00      	nop
 8007b10:	40003800 	.word	0x40003800
 8007b14:	40003400 	.word	0x40003400
 8007b18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b20:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007b30:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b3e:	f043 0204 	orr.w	r2, r3, #4
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7f8 ff2a 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007b4c:	e000      	b.n	8007b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007b4e:	bf00      	nop
}
 8007b50:	bf00      	nop
 8007b52:	3720      	adds	r7, #32
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b78:	1c99      	adds	r1, r3, #2
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	6251      	str	r1, [r2, #36]	; 0x24
 8007b7e:	881a      	ldrh	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d113      	bne.n	8007bc6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	685a      	ldr	r2, [r3, #4]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007bac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d106      	bne.n	8007bc6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7ff ffc9 	bl	8007b58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007bc6:	bf00      	nop
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
	...

08007bd0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bdc:	1c99      	adds	r1, r3, #2
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	6251      	str	r1, [r2, #36]	; 0x24
 8007be2:	8819      	ldrh	r1, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a1d      	ldr	r2, [pc, #116]	; (8007c60 <I2SEx_TxISR_I2SExt+0x90>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d101      	bne.n	8007bf2 <I2SEx_TxISR_I2SExt+0x22>
 8007bee:	4b1d      	ldr	r3, [pc, #116]	; (8007c64 <I2SEx_TxISR_I2SExt+0x94>)
 8007bf0:	e001      	b.n	8007bf6 <I2SEx_TxISR_I2SExt+0x26>
 8007bf2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007bf6:	460a      	mov	r2, r1
 8007bf8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	3b01      	subs	r3, #1
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d121      	bne.n	8007c56 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a12      	ldr	r2, [pc, #72]	; (8007c60 <I2SEx_TxISR_I2SExt+0x90>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d101      	bne.n	8007c20 <I2SEx_TxISR_I2SExt+0x50>
 8007c1c:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <I2SEx_TxISR_I2SExt+0x94>)
 8007c1e:	e001      	b.n	8007c24 <I2SEx_TxISR_I2SExt+0x54>
 8007c20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	490d      	ldr	r1, [pc, #52]	; (8007c60 <I2SEx_TxISR_I2SExt+0x90>)
 8007c2c:	428b      	cmp	r3, r1
 8007c2e:	d101      	bne.n	8007c34 <I2SEx_TxISR_I2SExt+0x64>
 8007c30:	4b0c      	ldr	r3, [pc, #48]	; (8007c64 <I2SEx_TxISR_I2SExt+0x94>)
 8007c32:	e001      	b.n	8007c38 <I2SEx_TxISR_I2SExt+0x68>
 8007c34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c3c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d106      	bne.n	8007c56 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7ff ff81 	bl	8007b58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007c56:	bf00      	nop
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	40003800 	.word	0x40003800
 8007c64:	40003400 	.word	0x40003400

08007c68 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68d8      	ldr	r0, [r3, #12]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7a:	1c99      	adds	r1, r3, #2
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007c80:	b282      	uxth	r2, r0
 8007c82:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d113      	bne.n	8007cc4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007caa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d106      	bne.n	8007cc4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f7ff ff4a 	bl	8007b58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007cc4:	bf00      	nop
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a20      	ldr	r2, [pc, #128]	; (8007d5c <I2SEx_RxISR_I2SExt+0x90>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d101      	bne.n	8007ce2 <I2SEx_RxISR_I2SExt+0x16>
 8007cde:	4b20      	ldr	r3, [pc, #128]	; (8007d60 <I2SEx_RxISR_I2SExt+0x94>)
 8007ce0:	e001      	b.n	8007ce6 <I2SEx_RxISR_I2SExt+0x1a>
 8007ce2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ce6:	68d8      	ldr	r0, [r3, #12]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cec:	1c99      	adds	r1, r3, #2
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007cf2:	b282      	uxth	r2, r0
 8007cf4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d121      	bne.n	8007d52 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a12      	ldr	r2, [pc, #72]	; (8007d5c <I2SEx_RxISR_I2SExt+0x90>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d101      	bne.n	8007d1c <I2SEx_RxISR_I2SExt+0x50>
 8007d18:	4b11      	ldr	r3, [pc, #68]	; (8007d60 <I2SEx_RxISR_I2SExt+0x94>)
 8007d1a:	e001      	b.n	8007d20 <I2SEx_RxISR_I2SExt+0x54>
 8007d1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	490d      	ldr	r1, [pc, #52]	; (8007d5c <I2SEx_RxISR_I2SExt+0x90>)
 8007d28:	428b      	cmp	r3, r1
 8007d2a:	d101      	bne.n	8007d30 <I2SEx_RxISR_I2SExt+0x64>
 8007d2c:	4b0c      	ldr	r3, [pc, #48]	; (8007d60 <I2SEx_RxISR_I2SExt+0x94>)
 8007d2e:	e001      	b.n	8007d34 <I2SEx_RxISR_I2SExt+0x68>
 8007d30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007d34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007d38:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d106      	bne.n	8007d52 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff ff03 	bl	8007b58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007d52:	bf00      	nop
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	40003800 	.word	0x40003800
 8007d60:	40003400 	.word	0x40003400

08007d64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e267      	b.n	8008246 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d075      	beq.n	8007e6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d82:	4b88      	ldr	r3, [pc, #544]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	f003 030c 	and.w	r3, r3, #12
 8007d8a:	2b04      	cmp	r3, #4
 8007d8c:	d00c      	beq.n	8007da8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d8e:	4b85      	ldr	r3, [pc, #532]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d96:	2b08      	cmp	r3, #8
 8007d98:	d112      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d9a:	4b82      	ldr	r3, [pc, #520]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007da2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007da6:	d10b      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007da8:	4b7e      	ldr	r3, [pc, #504]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d05b      	beq.n	8007e6c <HAL_RCC_OscConfig+0x108>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d157      	bne.n	8007e6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e242      	b.n	8008246 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dc8:	d106      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x74>
 8007dca:	4b76      	ldr	r3, [pc, #472]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a75      	ldr	r2, [pc, #468]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dd4:	6013      	str	r3, [r2, #0]
 8007dd6:	e01d      	b.n	8007e14 <HAL_RCC_OscConfig+0xb0>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007de0:	d10c      	bne.n	8007dfc <HAL_RCC_OscConfig+0x98>
 8007de2:	4b70      	ldr	r3, [pc, #448]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a6f      	ldr	r2, [pc, #444]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007dec:	6013      	str	r3, [r2, #0]
 8007dee:	4b6d      	ldr	r3, [pc, #436]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a6c      	ldr	r2, [pc, #432]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007df8:	6013      	str	r3, [r2, #0]
 8007dfa:	e00b      	b.n	8007e14 <HAL_RCC_OscConfig+0xb0>
 8007dfc:	4b69      	ldr	r3, [pc, #420]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a68      	ldr	r2, [pc, #416]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	4b66      	ldr	r3, [pc, #408]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a65      	ldr	r2, [pc, #404]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d013      	beq.n	8007e44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e1c:	f7fb f810 	bl	8002e40 <HAL_GetTick>
 8007e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e22:	e008      	b.n	8007e36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e24:	f7fb f80c 	bl	8002e40 <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	2b64      	cmp	r3, #100	; 0x64
 8007e30:	d901      	bls.n	8007e36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e207      	b.n	8008246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e36:	4b5b      	ldr	r3, [pc, #364]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0f0      	beq.n	8007e24 <HAL_RCC_OscConfig+0xc0>
 8007e42:	e014      	b.n	8007e6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e44:	f7fa fffc 	bl	8002e40 <HAL_GetTick>
 8007e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e4a:	e008      	b.n	8007e5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e4c:	f7fa fff8 	bl	8002e40 <HAL_GetTick>
 8007e50:	4602      	mov	r2, r0
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	2b64      	cmp	r3, #100	; 0x64
 8007e58:	d901      	bls.n	8007e5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e1f3      	b.n	8008246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e5e:	4b51      	ldr	r3, [pc, #324]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1f0      	bne.n	8007e4c <HAL_RCC_OscConfig+0xe8>
 8007e6a:	e000      	b.n	8007e6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0302 	and.w	r3, r3, #2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d063      	beq.n	8007f42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e7a:	4b4a      	ldr	r3, [pc, #296]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f003 030c 	and.w	r3, r3, #12
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00b      	beq.n	8007e9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e86:	4b47      	ldr	r3, [pc, #284]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e8e:	2b08      	cmp	r3, #8
 8007e90:	d11c      	bne.n	8007ecc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e92:	4b44      	ldr	r3, [pc, #272]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d116      	bne.n	8007ecc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e9e:	4b41      	ldr	r3, [pc, #260]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d005      	beq.n	8007eb6 <HAL_RCC_OscConfig+0x152>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d001      	beq.n	8007eb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e1c7      	b.n	8008246 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eb6:	4b3b      	ldr	r3, [pc, #236]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	00db      	lsls	r3, r3, #3
 8007ec4:	4937      	ldr	r1, [pc, #220]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007eca:	e03a      	b.n	8007f42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d020      	beq.n	8007f16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ed4:	4b34      	ldr	r3, [pc, #208]	; (8007fa8 <HAL_RCC_OscConfig+0x244>)
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eda:	f7fa ffb1 	bl	8002e40 <HAL_GetTick>
 8007ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ee0:	e008      	b.n	8007ef4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ee2:	f7fa ffad 	bl	8002e40 <HAL_GetTick>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d901      	bls.n	8007ef4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e1a8      	b.n	8008246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ef4:	4b2b      	ldr	r3, [pc, #172]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0302 	and.w	r3, r3, #2
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d0f0      	beq.n	8007ee2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f00:	4b28      	ldr	r3, [pc, #160]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	00db      	lsls	r3, r3, #3
 8007f0e:	4925      	ldr	r1, [pc, #148]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007f10:	4313      	orrs	r3, r2
 8007f12:	600b      	str	r3, [r1, #0]
 8007f14:	e015      	b.n	8007f42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f16:	4b24      	ldr	r3, [pc, #144]	; (8007fa8 <HAL_RCC_OscConfig+0x244>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f1c:	f7fa ff90 	bl	8002e40 <HAL_GetTick>
 8007f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f22:	e008      	b.n	8007f36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f24:	f7fa ff8c 	bl	8002e40 <HAL_GetTick>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d901      	bls.n	8007f36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e187      	b.n	8008246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f36:	4b1b      	ldr	r3, [pc, #108]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1f0      	bne.n	8007f24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 0308 	and.w	r3, r3, #8
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d036      	beq.n	8007fbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d016      	beq.n	8007f84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f56:	4b15      	ldr	r3, [pc, #84]	; (8007fac <HAL_RCC_OscConfig+0x248>)
 8007f58:	2201      	movs	r2, #1
 8007f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f5c:	f7fa ff70 	bl	8002e40 <HAL_GetTick>
 8007f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f62:	e008      	b.n	8007f76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f64:	f7fa ff6c 	bl	8002e40 <HAL_GetTick>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d901      	bls.n	8007f76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e167      	b.n	8008246 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f76:	4b0b      	ldr	r3, [pc, #44]	; (8007fa4 <HAL_RCC_OscConfig+0x240>)
 8007f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f7a:	f003 0302 	and.w	r3, r3, #2
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d0f0      	beq.n	8007f64 <HAL_RCC_OscConfig+0x200>
 8007f82:	e01b      	b.n	8007fbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f84:	4b09      	ldr	r3, [pc, #36]	; (8007fac <HAL_RCC_OscConfig+0x248>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f8a:	f7fa ff59 	bl	8002e40 <HAL_GetTick>
 8007f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f90:	e00e      	b.n	8007fb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f92:	f7fa ff55 	bl	8002e40 <HAL_GetTick>
 8007f96:	4602      	mov	r2, r0
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d907      	bls.n	8007fb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e150      	b.n	8008246 <HAL_RCC_OscConfig+0x4e2>
 8007fa4:	40023800 	.word	0x40023800
 8007fa8:	42470000 	.word	0x42470000
 8007fac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fb0:	4b88      	ldr	r3, [pc, #544]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 8007fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fb4:	f003 0302 	and.w	r3, r3, #2
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1ea      	bne.n	8007f92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0304 	and.w	r3, r3, #4
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f000 8097 	beq.w	80080f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fce:	4b81      	ldr	r3, [pc, #516]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10f      	bne.n	8007ffa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fda:	2300      	movs	r3, #0
 8007fdc:	60bb      	str	r3, [r7, #8]
 8007fde:	4b7d      	ldr	r3, [pc, #500]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	4a7c      	ldr	r2, [pc, #496]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 8007fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8007fea:	4b7a      	ldr	r3, [pc, #488]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 8007fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ff2:	60bb      	str	r3, [r7, #8]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ffa:	4b77      	ldr	r3, [pc, #476]	; (80081d8 <HAL_RCC_OscConfig+0x474>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008002:	2b00      	cmp	r3, #0
 8008004:	d118      	bne.n	8008038 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008006:	4b74      	ldr	r3, [pc, #464]	; (80081d8 <HAL_RCC_OscConfig+0x474>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a73      	ldr	r2, [pc, #460]	; (80081d8 <HAL_RCC_OscConfig+0x474>)
 800800c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008012:	f7fa ff15 	bl	8002e40 <HAL_GetTick>
 8008016:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008018:	e008      	b.n	800802c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800801a:	f7fa ff11 	bl	8002e40 <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	2b02      	cmp	r3, #2
 8008026:	d901      	bls.n	800802c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008028:	2303      	movs	r3, #3
 800802a:	e10c      	b.n	8008246 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800802c:	4b6a      	ldr	r3, [pc, #424]	; (80081d8 <HAL_RCC_OscConfig+0x474>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008034:	2b00      	cmp	r3, #0
 8008036:	d0f0      	beq.n	800801a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d106      	bne.n	800804e <HAL_RCC_OscConfig+0x2ea>
 8008040:	4b64      	ldr	r3, [pc, #400]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 8008042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008044:	4a63      	ldr	r2, [pc, #396]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 8008046:	f043 0301 	orr.w	r3, r3, #1
 800804a:	6713      	str	r3, [r2, #112]	; 0x70
 800804c:	e01c      	b.n	8008088 <HAL_RCC_OscConfig+0x324>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	2b05      	cmp	r3, #5
 8008054:	d10c      	bne.n	8008070 <HAL_RCC_OscConfig+0x30c>
 8008056:	4b5f      	ldr	r3, [pc, #380]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 8008058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800805a:	4a5e      	ldr	r2, [pc, #376]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 800805c:	f043 0304 	orr.w	r3, r3, #4
 8008060:	6713      	str	r3, [r2, #112]	; 0x70
 8008062:	4b5c      	ldr	r3, [pc, #368]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 8008064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008066:	4a5b      	ldr	r2, [pc, #364]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 8008068:	f043 0301 	orr.w	r3, r3, #1
 800806c:	6713      	str	r3, [r2, #112]	; 0x70
 800806e:	e00b      	b.n	8008088 <HAL_RCC_OscConfig+0x324>
 8008070:	4b58      	ldr	r3, [pc, #352]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 8008072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008074:	4a57      	ldr	r2, [pc, #348]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 8008076:	f023 0301 	bic.w	r3, r3, #1
 800807a:	6713      	str	r3, [r2, #112]	; 0x70
 800807c:	4b55      	ldr	r3, [pc, #340]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 800807e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008080:	4a54      	ldr	r2, [pc, #336]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 8008082:	f023 0304 	bic.w	r3, r3, #4
 8008086:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d015      	beq.n	80080bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008090:	f7fa fed6 	bl	8002e40 <HAL_GetTick>
 8008094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008096:	e00a      	b.n	80080ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008098:	f7fa fed2 	bl	8002e40 <HAL_GetTick>
 800809c:	4602      	mov	r2, r0
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d901      	bls.n	80080ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e0cb      	b.n	8008246 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080ae:	4b49      	ldr	r3, [pc, #292]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 80080b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d0ee      	beq.n	8008098 <HAL_RCC_OscConfig+0x334>
 80080ba:	e014      	b.n	80080e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080bc:	f7fa fec0 	bl	8002e40 <HAL_GetTick>
 80080c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080c2:	e00a      	b.n	80080da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080c4:	f7fa febc 	bl	8002e40 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d901      	bls.n	80080da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e0b5      	b.n	8008246 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080da:	4b3e      	ldr	r3, [pc, #248]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 80080dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080de:	f003 0302 	and.w	r3, r3, #2
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1ee      	bne.n	80080c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080e6:	7dfb      	ldrb	r3, [r7, #23]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d105      	bne.n	80080f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080ec:	4b39      	ldr	r3, [pc, #228]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 80080ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f0:	4a38      	ldr	r2, [pc, #224]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 80080f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f000 80a1 	beq.w	8008244 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008102:	4b34      	ldr	r3, [pc, #208]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f003 030c 	and.w	r3, r3, #12
 800810a:	2b08      	cmp	r3, #8
 800810c:	d05c      	beq.n	80081c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	2b02      	cmp	r3, #2
 8008114:	d141      	bne.n	800819a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008116:	4b31      	ldr	r3, [pc, #196]	; (80081dc <HAL_RCC_OscConfig+0x478>)
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800811c:	f7fa fe90 	bl	8002e40 <HAL_GetTick>
 8008120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008122:	e008      	b.n	8008136 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008124:	f7fa fe8c 	bl	8002e40 <HAL_GetTick>
 8008128:	4602      	mov	r2, r0
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	2b02      	cmp	r3, #2
 8008130:	d901      	bls.n	8008136 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e087      	b.n	8008246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008136:	4b27      	ldr	r3, [pc, #156]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1f0      	bne.n	8008124 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	69da      	ldr	r2, [r3, #28]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	431a      	orrs	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008150:	019b      	lsls	r3, r3, #6
 8008152:	431a      	orrs	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008158:	085b      	lsrs	r3, r3, #1
 800815a:	3b01      	subs	r3, #1
 800815c:	041b      	lsls	r3, r3, #16
 800815e:	431a      	orrs	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008164:	061b      	lsls	r3, r3, #24
 8008166:	491b      	ldr	r1, [pc, #108]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 8008168:	4313      	orrs	r3, r2
 800816a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800816c:	4b1b      	ldr	r3, [pc, #108]	; (80081dc <HAL_RCC_OscConfig+0x478>)
 800816e:	2201      	movs	r2, #1
 8008170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008172:	f7fa fe65 	bl	8002e40 <HAL_GetTick>
 8008176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008178:	e008      	b.n	800818c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800817a:	f7fa fe61 	bl	8002e40 <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	2b02      	cmp	r3, #2
 8008186:	d901      	bls.n	800818c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e05c      	b.n	8008246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800818c:	4b11      	ldr	r3, [pc, #68]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d0f0      	beq.n	800817a <HAL_RCC_OscConfig+0x416>
 8008198:	e054      	b.n	8008244 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800819a:	4b10      	ldr	r3, [pc, #64]	; (80081dc <HAL_RCC_OscConfig+0x478>)
 800819c:	2200      	movs	r2, #0
 800819e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081a0:	f7fa fe4e 	bl	8002e40 <HAL_GetTick>
 80081a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081a6:	e008      	b.n	80081ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081a8:	f7fa fe4a 	bl	8002e40 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d901      	bls.n	80081ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e045      	b.n	8008246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081ba:	4b06      	ldr	r3, [pc, #24]	; (80081d4 <HAL_RCC_OscConfig+0x470>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1f0      	bne.n	80081a8 <HAL_RCC_OscConfig+0x444>
 80081c6:	e03d      	b.n	8008244 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d107      	bne.n	80081e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e038      	b.n	8008246 <HAL_RCC_OscConfig+0x4e2>
 80081d4:	40023800 	.word	0x40023800
 80081d8:	40007000 	.word	0x40007000
 80081dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80081e0:	4b1b      	ldr	r3, [pc, #108]	; (8008250 <HAL_RCC_OscConfig+0x4ec>)
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d028      	beq.n	8008240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d121      	bne.n	8008240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008206:	429a      	cmp	r2, r3
 8008208:	d11a      	bne.n	8008240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008210:	4013      	ands	r3, r2
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008216:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008218:	4293      	cmp	r3, r2
 800821a:	d111      	bne.n	8008240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008226:	085b      	lsrs	r3, r3, #1
 8008228:	3b01      	subs	r3, #1
 800822a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800822c:	429a      	cmp	r2, r3
 800822e:	d107      	bne.n	8008240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800823c:	429a      	cmp	r2, r3
 800823e:	d001      	beq.n	8008244 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	e000      	b.n	8008246 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	40023800 	.word	0x40023800

08008254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e0cc      	b.n	8008402 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008268:	4b68      	ldr	r3, [pc, #416]	; (800840c <HAL_RCC_ClockConfig+0x1b8>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0307 	and.w	r3, r3, #7
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	429a      	cmp	r2, r3
 8008274:	d90c      	bls.n	8008290 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008276:	4b65      	ldr	r3, [pc, #404]	; (800840c <HAL_RCC_ClockConfig+0x1b8>)
 8008278:	683a      	ldr	r2, [r7, #0]
 800827a:	b2d2      	uxtb	r2, r2
 800827c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800827e:	4b63      	ldr	r3, [pc, #396]	; (800840c <HAL_RCC_ClockConfig+0x1b8>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	429a      	cmp	r2, r3
 800828a:	d001      	beq.n	8008290 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e0b8      	b.n	8008402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0302 	and.w	r3, r3, #2
 8008298:	2b00      	cmp	r3, #0
 800829a:	d020      	beq.n	80082de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 0304 	and.w	r3, r3, #4
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d005      	beq.n	80082b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082a8:	4b59      	ldr	r3, [pc, #356]	; (8008410 <HAL_RCC_ClockConfig+0x1bc>)
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	4a58      	ldr	r2, [pc, #352]	; (8008410 <HAL_RCC_ClockConfig+0x1bc>)
 80082ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80082b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 0308 	and.w	r3, r3, #8
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d005      	beq.n	80082cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082c0:	4b53      	ldr	r3, [pc, #332]	; (8008410 <HAL_RCC_ClockConfig+0x1bc>)
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	4a52      	ldr	r2, [pc, #328]	; (8008410 <HAL_RCC_ClockConfig+0x1bc>)
 80082c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80082ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082cc:	4b50      	ldr	r3, [pc, #320]	; (8008410 <HAL_RCC_ClockConfig+0x1bc>)
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	494d      	ldr	r1, [pc, #308]	; (8008410 <HAL_RCC_ClockConfig+0x1bc>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d044      	beq.n	8008374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d107      	bne.n	8008302 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082f2:	4b47      	ldr	r3, [pc, #284]	; (8008410 <HAL_RCC_ClockConfig+0x1bc>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d119      	bne.n	8008332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e07f      	b.n	8008402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	2b02      	cmp	r3, #2
 8008308:	d003      	beq.n	8008312 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800830e:	2b03      	cmp	r3, #3
 8008310:	d107      	bne.n	8008322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008312:	4b3f      	ldr	r3, [pc, #252]	; (8008410 <HAL_RCC_ClockConfig+0x1bc>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d109      	bne.n	8008332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e06f      	b.n	8008402 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008322:	4b3b      	ldr	r3, [pc, #236]	; (8008410 <HAL_RCC_ClockConfig+0x1bc>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 0302 	and.w	r3, r3, #2
 800832a:	2b00      	cmp	r3, #0
 800832c:	d101      	bne.n	8008332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e067      	b.n	8008402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008332:	4b37      	ldr	r3, [pc, #220]	; (8008410 <HAL_RCC_ClockConfig+0x1bc>)
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f023 0203 	bic.w	r2, r3, #3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	4934      	ldr	r1, [pc, #208]	; (8008410 <HAL_RCC_ClockConfig+0x1bc>)
 8008340:	4313      	orrs	r3, r2
 8008342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008344:	f7fa fd7c 	bl	8002e40 <HAL_GetTick>
 8008348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800834a:	e00a      	b.n	8008362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800834c:	f7fa fd78 	bl	8002e40 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	f241 3288 	movw	r2, #5000	; 0x1388
 800835a:	4293      	cmp	r3, r2
 800835c:	d901      	bls.n	8008362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	e04f      	b.n	8008402 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008362:	4b2b      	ldr	r3, [pc, #172]	; (8008410 <HAL_RCC_ClockConfig+0x1bc>)
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f003 020c 	and.w	r2, r3, #12
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	429a      	cmp	r2, r3
 8008372:	d1eb      	bne.n	800834c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008374:	4b25      	ldr	r3, [pc, #148]	; (800840c <HAL_RCC_ClockConfig+0x1b8>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0307 	and.w	r3, r3, #7
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	429a      	cmp	r2, r3
 8008380:	d20c      	bcs.n	800839c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008382:	4b22      	ldr	r3, [pc, #136]	; (800840c <HAL_RCC_ClockConfig+0x1b8>)
 8008384:	683a      	ldr	r2, [r7, #0]
 8008386:	b2d2      	uxtb	r2, r2
 8008388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800838a:	4b20      	ldr	r3, [pc, #128]	; (800840c <HAL_RCC_ClockConfig+0x1b8>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0307 	and.w	r3, r3, #7
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	429a      	cmp	r2, r3
 8008396:	d001      	beq.n	800839c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e032      	b.n	8008402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 0304 	and.w	r3, r3, #4
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d008      	beq.n	80083ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083a8:	4b19      	ldr	r3, [pc, #100]	; (8008410 <HAL_RCC_ClockConfig+0x1bc>)
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	4916      	ldr	r1, [pc, #88]	; (8008410 <HAL_RCC_ClockConfig+0x1bc>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 0308 	and.w	r3, r3, #8
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d009      	beq.n	80083da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083c6:	4b12      	ldr	r3, [pc, #72]	; (8008410 <HAL_RCC_ClockConfig+0x1bc>)
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	00db      	lsls	r3, r3, #3
 80083d4:	490e      	ldr	r1, [pc, #56]	; (8008410 <HAL_RCC_ClockConfig+0x1bc>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80083da:	f000 f821 	bl	8008420 <HAL_RCC_GetSysClockFreq>
 80083de:	4602      	mov	r2, r0
 80083e0:	4b0b      	ldr	r3, [pc, #44]	; (8008410 <HAL_RCC_ClockConfig+0x1bc>)
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	091b      	lsrs	r3, r3, #4
 80083e6:	f003 030f 	and.w	r3, r3, #15
 80083ea:	490a      	ldr	r1, [pc, #40]	; (8008414 <HAL_RCC_ClockConfig+0x1c0>)
 80083ec:	5ccb      	ldrb	r3, [r1, r3]
 80083ee:	fa22 f303 	lsr.w	r3, r2, r3
 80083f2:	4a09      	ldr	r2, [pc, #36]	; (8008418 <HAL_RCC_ClockConfig+0x1c4>)
 80083f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80083f6:	4b09      	ldr	r3, [pc, #36]	; (800841c <HAL_RCC_ClockConfig+0x1c8>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fa fcdc 	bl	8002db8 <HAL_InitTick>

  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	40023c00 	.word	0x40023c00
 8008410:	40023800 	.word	0x40023800
 8008414:	080130b8 	.word	0x080130b8
 8008418:	2000007c 	.word	0x2000007c
 800841c:	20000084 	.word	0x20000084

08008420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008424:	b094      	sub	sp, #80	; 0x50
 8008426:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008428:	2300      	movs	r3, #0
 800842a:	647b      	str	r3, [r7, #68]	; 0x44
 800842c:	2300      	movs	r3, #0
 800842e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008430:	2300      	movs	r3, #0
 8008432:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008434:	2300      	movs	r3, #0
 8008436:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008438:	4b79      	ldr	r3, [pc, #484]	; (8008620 <HAL_RCC_GetSysClockFreq+0x200>)
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f003 030c 	and.w	r3, r3, #12
 8008440:	2b08      	cmp	r3, #8
 8008442:	d00d      	beq.n	8008460 <HAL_RCC_GetSysClockFreq+0x40>
 8008444:	2b08      	cmp	r3, #8
 8008446:	f200 80e1 	bhi.w	800860c <HAL_RCC_GetSysClockFreq+0x1ec>
 800844a:	2b00      	cmp	r3, #0
 800844c:	d002      	beq.n	8008454 <HAL_RCC_GetSysClockFreq+0x34>
 800844e:	2b04      	cmp	r3, #4
 8008450:	d003      	beq.n	800845a <HAL_RCC_GetSysClockFreq+0x3a>
 8008452:	e0db      	b.n	800860c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008454:	4b73      	ldr	r3, [pc, #460]	; (8008624 <HAL_RCC_GetSysClockFreq+0x204>)
 8008456:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008458:	e0db      	b.n	8008612 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800845a:	4b73      	ldr	r3, [pc, #460]	; (8008628 <HAL_RCC_GetSysClockFreq+0x208>)
 800845c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800845e:	e0d8      	b.n	8008612 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008460:	4b6f      	ldr	r3, [pc, #444]	; (8008620 <HAL_RCC_GetSysClockFreq+0x200>)
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008468:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800846a:	4b6d      	ldr	r3, [pc, #436]	; (8008620 <HAL_RCC_GetSysClockFreq+0x200>)
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d063      	beq.n	800853e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008476:	4b6a      	ldr	r3, [pc, #424]	; (8008620 <HAL_RCC_GetSysClockFreq+0x200>)
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	099b      	lsrs	r3, r3, #6
 800847c:	2200      	movs	r2, #0
 800847e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008480:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008488:	633b      	str	r3, [r7, #48]	; 0x30
 800848a:	2300      	movs	r3, #0
 800848c:	637b      	str	r3, [r7, #52]	; 0x34
 800848e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008492:	4622      	mov	r2, r4
 8008494:	462b      	mov	r3, r5
 8008496:	f04f 0000 	mov.w	r0, #0
 800849a:	f04f 0100 	mov.w	r1, #0
 800849e:	0159      	lsls	r1, r3, #5
 80084a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80084a4:	0150      	lsls	r0, r2, #5
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4621      	mov	r1, r4
 80084ac:	1a51      	subs	r1, r2, r1
 80084ae:	6139      	str	r1, [r7, #16]
 80084b0:	4629      	mov	r1, r5
 80084b2:	eb63 0301 	sbc.w	r3, r3, r1
 80084b6:	617b      	str	r3, [r7, #20]
 80084b8:	f04f 0200 	mov.w	r2, #0
 80084bc:	f04f 0300 	mov.w	r3, #0
 80084c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80084c4:	4659      	mov	r1, fp
 80084c6:	018b      	lsls	r3, r1, #6
 80084c8:	4651      	mov	r1, sl
 80084ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80084ce:	4651      	mov	r1, sl
 80084d0:	018a      	lsls	r2, r1, #6
 80084d2:	4651      	mov	r1, sl
 80084d4:	ebb2 0801 	subs.w	r8, r2, r1
 80084d8:	4659      	mov	r1, fp
 80084da:	eb63 0901 	sbc.w	r9, r3, r1
 80084de:	f04f 0200 	mov.w	r2, #0
 80084e2:	f04f 0300 	mov.w	r3, #0
 80084e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80084ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80084ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80084f2:	4690      	mov	r8, r2
 80084f4:	4699      	mov	r9, r3
 80084f6:	4623      	mov	r3, r4
 80084f8:	eb18 0303 	adds.w	r3, r8, r3
 80084fc:	60bb      	str	r3, [r7, #8]
 80084fe:	462b      	mov	r3, r5
 8008500:	eb49 0303 	adc.w	r3, r9, r3
 8008504:	60fb      	str	r3, [r7, #12]
 8008506:	f04f 0200 	mov.w	r2, #0
 800850a:	f04f 0300 	mov.w	r3, #0
 800850e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008512:	4629      	mov	r1, r5
 8008514:	024b      	lsls	r3, r1, #9
 8008516:	4621      	mov	r1, r4
 8008518:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800851c:	4621      	mov	r1, r4
 800851e:	024a      	lsls	r2, r1, #9
 8008520:	4610      	mov	r0, r2
 8008522:	4619      	mov	r1, r3
 8008524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008526:	2200      	movs	r2, #0
 8008528:	62bb      	str	r3, [r7, #40]	; 0x28
 800852a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800852c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008530:	f7f7 fe52 	bl	80001d8 <__aeabi_uldivmod>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	4613      	mov	r3, r2
 800853a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800853c:	e058      	b.n	80085f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800853e:	4b38      	ldr	r3, [pc, #224]	; (8008620 <HAL_RCC_GetSysClockFreq+0x200>)
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	099b      	lsrs	r3, r3, #6
 8008544:	2200      	movs	r2, #0
 8008546:	4618      	mov	r0, r3
 8008548:	4611      	mov	r1, r2
 800854a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800854e:	623b      	str	r3, [r7, #32]
 8008550:	2300      	movs	r3, #0
 8008552:	627b      	str	r3, [r7, #36]	; 0x24
 8008554:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008558:	4642      	mov	r2, r8
 800855a:	464b      	mov	r3, r9
 800855c:	f04f 0000 	mov.w	r0, #0
 8008560:	f04f 0100 	mov.w	r1, #0
 8008564:	0159      	lsls	r1, r3, #5
 8008566:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800856a:	0150      	lsls	r0, r2, #5
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	4641      	mov	r1, r8
 8008572:	ebb2 0a01 	subs.w	sl, r2, r1
 8008576:	4649      	mov	r1, r9
 8008578:	eb63 0b01 	sbc.w	fp, r3, r1
 800857c:	f04f 0200 	mov.w	r2, #0
 8008580:	f04f 0300 	mov.w	r3, #0
 8008584:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008588:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800858c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008590:	ebb2 040a 	subs.w	r4, r2, sl
 8008594:	eb63 050b 	sbc.w	r5, r3, fp
 8008598:	f04f 0200 	mov.w	r2, #0
 800859c:	f04f 0300 	mov.w	r3, #0
 80085a0:	00eb      	lsls	r3, r5, #3
 80085a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085a6:	00e2      	lsls	r2, r4, #3
 80085a8:	4614      	mov	r4, r2
 80085aa:	461d      	mov	r5, r3
 80085ac:	4643      	mov	r3, r8
 80085ae:	18e3      	adds	r3, r4, r3
 80085b0:	603b      	str	r3, [r7, #0]
 80085b2:	464b      	mov	r3, r9
 80085b4:	eb45 0303 	adc.w	r3, r5, r3
 80085b8:	607b      	str	r3, [r7, #4]
 80085ba:	f04f 0200 	mov.w	r2, #0
 80085be:	f04f 0300 	mov.w	r3, #0
 80085c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80085c6:	4629      	mov	r1, r5
 80085c8:	028b      	lsls	r3, r1, #10
 80085ca:	4621      	mov	r1, r4
 80085cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80085d0:	4621      	mov	r1, r4
 80085d2:	028a      	lsls	r2, r1, #10
 80085d4:	4610      	mov	r0, r2
 80085d6:	4619      	mov	r1, r3
 80085d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085da:	2200      	movs	r2, #0
 80085dc:	61bb      	str	r3, [r7, #24]
 80085de:	61fa      	str	r2, [r7, #28]
 80085e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085e4:	f7f7 fdf8 	bl	80001d8 <__aeabi_uldivmod>
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	4613      	mov	r3, r2
 80085ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80085f0:	4b0b      	ldr	r3, [pc, #44]	; (8008620 <HAL_RCC_GetSysClockFreq+0x200>)
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	0c1b      	lsrs	r3, r3, #16
 80085f6:	f003 0303 	and.w	r3, r3, #3
 80085fa:	3301      	adds	r3, #1
 80085fc:	005b      	lsls	r3, r3, #1
 80085fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008600:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008604:	fbb2 f3f3 	udiv	r3, r2, r3
 8008608:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800860a:	e002      	b.n	8008612 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800860c:	4b05      	ldr	r3, [pc, #20]	; (8008624 <HAL_RCC_GetSysClockFreq+0x204>)
 800860e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008614:	4618      	mov	r0, r3
 8008616:	3750      	adds	r7, #80	; 0x50
 8008618:	46bd      	mov	sp, r7
 800861a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800861e:	bf00      	nop
 8008620:	40023800 	.word	0x40023800
 8008624:	00f42400 	.word	0x00f42400
 8008628:	007a1200 	.word	0x007a1200

0800862c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800862c:	b480      	push	{r7}
 800862e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008630:	4b03      	ldr	r3, [pc, #12]	; (8008640 <HAL_RCC_GetHCLKFreq+0x14>)
 8008632:	681b      	ldr	r3, [r3, #0]
}
 8008634:	4618      	mov	r0, r3
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	2000007c 	.word	0x2000007c

08008644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008648:	f7ff fff0 	bl	800862c <HAL_RCC_GetHCLKFreq>
 800864c:	4602      	mov	r2, r0
 800864e:	4b05      	ldr	r3, [pc, #20]	; (8008664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	0a9b      	lsrs	r3, r3, #10
 8008654:	f003 0307 	and.w	r3, r3, #7
 8008658:	4903      	ldr	r1, [pc, #12]	; (8008668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800865a:	5ccb      	ldrb	r3, [r1, r3]
 800865c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008660:	4618      	mov	r0, r3
 8008662:	bd80      	pop	{r7, pc}
 8008664:	40023800 	.word	0x40023800
 8008668:	080130c8 	.word	0x080130c8

0800866c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008670:	f7ff ffdc 	bl	800862c <HAL_RCC_GetHCLKFreq>
 8008674:	4602      	mov	r2, r0
 8008676:	4b05      	ldr	r3, [pc, #20]	; (800868c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	0b5b      	lsrs	r3, r3, #13
 800867c:	f003 0307 	and.w	r3, r3, #7
 8008680:	4903      	ldr	r1, [pc, #12]	; (8008690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008682:	5ccb      	ldrb	r3, [r1, r3]
 8008684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008688:	4618      	mov	r0, r3
 800868a:	bd80      	pop	{r7, pc}
 800868c:	40023800 	.word	0x40023800
 8008690:	080130c8 	.word	0x080130c8

08008694 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800869c:	2300      	movs	r3, #0
 800869e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80086a0:	2300      	movs	r3, #0
 80086a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d105      	bne.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d038      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80086bc:	4b68      	ldr	r3, [pc, #416]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80086be:	2200      	movs	r2, #0
 80086c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80086c2:	f7fa fbbd 	bl	8002e40 <HAL_GetTick>
 80086c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80086c8:	e008      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80086ca:	f7fa fbb9 	bl	8002e40 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d901      	bls.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e0bd      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80086dc:	4b61      	ldr	r3, [pc, #388]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1f0      	bne.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	019b      	lsls	r3, r3, #6
 80086f2:	431a      	orrs	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	071b      	lsls	r3, r3, #28
 80086fa:	495a      	ldr	r1, [pc, #360]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008702:	4b57      	ldr	r3, [pc, #348]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008704:	2201      	movs	r2, #1
 8008706:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008708:	f7fa fb9a 	bl	8002e40 <HAL_GetTick>
 800870c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800870e:	e008      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008710:	f7fa fb96 	bl	8002e40 <HAL_GetTick>
 8008714:	4602      	mov	r2, r0
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	2b02      	cmp	r3, #2
 800871c:	d901      	bls.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	e09a      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008722:	4b50      	ldr	r3, [pc, #320]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d0f0      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b00      	cmp	r3, #0
 8008738:	f000 8083 	beq.w	8008842 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800873c:	2300      	movs	r3, #0
 800873e:	60fb      	str	r3, [r7, #12]
 8008740:	4b48      	ldr	r3, [pc, #288]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008744:	4a47      	ldr	r2, [pc, #284]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800874a:	6413      	str	r3, [r2, #64]	; 0x40
 800874c:	4b45      	ldr	r3, [pc, #276]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800874e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008754:	60fb      	str	r3, [r7, #12]
 8008756:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008758:	4b43      	ldr	r3, [pc, #268]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a42      	ldr	r2, [pc, #264]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800875e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008762:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008764:	f7fa fb6c 	bl	8002e40 <HAL_GetTick>
 8008768:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800876a:	e008      	b.n	800877e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800876c:	f7fa fb68 	bl	8002e40 <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	2b02      	cmp	r3, #2
 8008778:	d901      	bls.n	800877e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e06c      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800877e:	4b3a      	ldr	r3, [pc, #232]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008786:	2b00      	cmp	r3, #0
 8008788:	d0f0      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800878a:	4b36      	ldr	r3, [pc, #216]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800878c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800878e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008792:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d02f      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x166>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d028      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80087a8:	4b2e      	ldr	r3, [pc, #184]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087b0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80087b2:	4b2e      	ldr	r3, [pc, #184]	; (800886c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80087b4:	2201      	movs	r2, #1
 80087b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80087b8:	4b2c      	ldr	r3, [pc, #176]	; (800886c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80087be:	4a29      	ldr	r2, [pc, #164]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80087c4:	4b27      	ldr	r3, [pc, #156]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c8:	f003 0301 	and.w	r3, r3, #1
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d114      	bne.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80087d0:	f7fa fb36 	bl	8002e40 <HAL_GetTick>
 80087d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087d6:	e00a      	b.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087d8:	f7fa fb32 	bl	8002e40 <HAL_GetTick>
 80087dc:	4602      	mov	r2, r0
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d901      	bls.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e034      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087ee:	4b1d      	ldr	r3, [pc, #116]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d0ee      	beq.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008806:	d10d      	bne.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8008808:	4b16      	ldr	r3, [pc, #88]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800881c:	4911      	ldr	r1, [pc, #68]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800881e:	4313      	orrs	r3, r2
 8008820:	608b      	str	r3, [r1, #8]
 8008822:	e005      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8008824:	4b0f      	ldr	r3, [pc, #60]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	4a0e      	ldr	r2, [pc, #56]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800882a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800882e:	6093      	str	r3, [r2, #8]
 8008830:	4b0c      	ldr	r3, [pc, #48]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008832:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800883c:	4909      	ldr	r1, [pc, #36]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800883e:	4313      	orrs	r3, r2
 8008840:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 0308 	and.w	r3, r3, #8
 800884a:	2b00      	cmp	r3, #0
 800884c:	d003      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	7d1a      	ldrb	r2, [r3, #20]
 8008852:	4b07      	ldr	r3, [pc, #28]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8008854:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3718      	adds	r7, #24
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	42470068 	.word	0x42470068
 8008864:	40023800 	.word	0x40023800
 8008868:	40007000 	.word	0x40007000
 800886c:	42470e40 	.word	0x42470e40
 8008870:	424711e0 	.word	0x424711e0

08008874 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2203      	movs	r2, #3
 8008880:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8008882:	4b1c      	ldr	r3, [pc, #112]	; (80088f4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008888:	099b      	lsrs	r3, r3, #6
 800888a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008892:	4b18      	ldr	r3, [pc, #96]	; (80088f4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008898:	0f1b      	lsrs	r3, r3, #28
 800889a:	f003 0207 	and.w	r2, r3, #7
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 80088a2:	4b14      	ldr	r3, [pc, #80]	; (80088f4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80088a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80088b0:	4b10      	ldr	r3, [pc, #64]	; (80088f4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80088b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80088ba:	4b0e      	ldr	r3, [pc, #56]	; (80088f4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80088bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088be:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	431a      	orrs	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 80088ca:	4b0a      	ldr	r3, [pc, #40]	; (80088f4 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80088cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d103      	bne.n	80088e0 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80088de:	e002      	b.n	80088e6 <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	751a      	strb	r2, [r3, #20]
}
 80088e6:	bf00      	nop
 80088e8:	3714      	adds	r7, #20
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	40023800 	.word	0x40023800

080088f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008900:	2300      	movs	r3, #0
 8008902:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008904:	2300      	movs	r3, #0
 8008906:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008908:	2300      	movs	r3, #0
 800890a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800890c:	2300      	movs	r3, #0
 800890e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d140      	bne.n	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008916:	4b24      	ldr	r3, [pc, #144]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800891e:	60fb      	str	r3, [r7, #12]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d005      	beq.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d131      	bne.n	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800892c:	4b1f      	ldr	r3, [pc, #124]	; (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800892e:	617b      	str	r3, [r7, #20]
          break;
 8008930:	e031      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008932:	4b1d      	ldr	r3, [pc, #116]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800893a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800893e:	d109      	bne.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008940:	4b19      	ldr	r3, [pc, #100]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008946:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800894a:	4a19      	ldr	r2, [pc, #100]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800894c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008950:	613b      	str	r3, [r7, #16]
 8008952:	e008      	b.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008954:	4b14      	ldr	r3, [pc, #80]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800895a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800895e:	4a15      	ldr	r2, [pc, #84]	; (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8008960:	fbb2 f3f3 	udiv	r3, r2, r3
 8008964:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008966:	4b10      	ldr	r3, [pc, #64]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800896c:	099b      	lsrs	r3, r3, #6
 800896e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	fb02 f303 	mul.w	r3, r2, r3
 8008978:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800897a:	4b0b      	ldr	r3, [pc, #44]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800897c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008980:	0f1b      	lsrs	r3, r3, #28
 8008982:	f003 0307 	and.w	r3, r3, #7
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	fbb2 f3f3 	udiv	r3, r2, r3
 800898c:	617b      	str	r3, [r7, #20]
          break;
 800898e:	e002      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008990:	2300      	movs	r3, #0
 8008992:	617b      	str	r3, [r7, #20]
          break;
 8008994:	bf00      	nop
        }
      }
      break;
 8008996:	bf00      	nop
    }
  }
  return frequency;
 8008998:	697b      	ldr	r3, [r7, #20]
}
 800899a:	4618      	mov	r0, r3
 800899c:	371c      	adds	r7, #28
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	40023800 	.word	0x40023800
 80089ac:	00bb8000 	.word	0x00bb8000
 80089b0:	007a1200 	.word	0x007a1200
 80089b4:	00f42400 	.word	0x00f42400

080089b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e03f      	b.n	8008a4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d106      	bne.n	80089e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f7f9 feea 	bl	80027b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2224      	movs	r2, #36	; 0x24
 80089e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68da      	ldr	r2, [r3, #12]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fcdf 	bl	80093c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	691a      	ldr	r2, [r3, #16]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	695a      	ldr	r2, [r3, #20]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68da      	ldr	r2, [r3, #12]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2220      	movs	r2, #32
 8008a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2220      	movs	r2, #32
 8008a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b084      	sub	sp, #16
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	60f8      	str	r0, [r7, #12]
 8008a5a:	60b9      	str	r1, [r7, #8]
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b20      	cmp	r3, #32
 8008a6a:	d11d      	bne.n	8008aa8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d002      	beq.n	8008a78 <HAL_UART_Receive_IT+0x26>
 8008a72:	88fb      	ldrh	r3, [r7, #6]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d101      	bne.n	8008a7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e016      	b.n	8008aaa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d101      	bne.n	8008a8a <HAL_UART_Receive_IT+0x38>
 8008a86:	2302      	movs	r3, #2
 8008a88:	e00f      	b.n	8008aaa <HAL_UART_Receive_IT+0x58>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a98:	88fb      	ldrh	r3, [r7, #6]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	68b9      	ldr	r1, [r7, #8]
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f000 fab6 	bl	8009010 <UART_Start_Receive_IT>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	e000      	b.n	8008aaa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008aa8:	2302      	movs	r3, #2
  }
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
	...

08008ab4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b0ba      	sub	sp, #232	; 0xe8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008ada:	2300      	movs	r3, #0
 8008adc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aea:	f003 030f 	and.w	r3, r3, #15
 8008aee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008af2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10f      	bne.n	8008b1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008afe:	f003 0320 	and.w	r3, r3, #32
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d009      	beq.n	8008b1a <HAL_UART_IRQHandler+0x66>
 8008b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b0a:	f003 0320 	and.w	r3, r3, #32
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d003      	beq.n	8008b1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fb99 	bl	800924a <UART_Receive_IT>
      return;
 8008b18:	e256      	b.n	8008fc8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008b1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 80de 	beq.w	8008ce0 <HAL_UART_IRQHandler+0x22c>
 8008b24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b28:	f003 0301 	and.w	r3, r3, #1
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d106      	bne.n	8008b3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 80d1 	beq.w	8008ce0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00b      	beq.n	8008b62 <HAL_UART_IRQHandler+0xae>
 8008b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d005      	beq.n	8008b62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5a:	f043 0201 	orr.w	r2, r3, #1
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b66:	f003 0304 	and.w	r3, r3, #4
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00b      	beq.n	8008b86 <HAL_UART_IRQHandler+0xd2>
 8008b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b72:	f003 0301 	and.w	r3, r3, #1
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d005      	beq.n	8008b86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7e:	f043 0202 	orr.w	r2, r3, #2
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b8a:	f003 0302 	and.w	r3, r3, #2
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00b      	beq.n	8008baa <HAL_UART_IRQHandler+0xf6>
 8008b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d005      	beq.n	8008baa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba2:	f043 0204 	orr.w	r2, r3, #4
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bae:	f003 0308 	and.w	r3, r3, #8
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d011      	beq.n	8008bda <HAL_UART_IRQHandler+0x126>
 8008bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bba:	f003 0320 	and.w	r3, r3, #32
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d105      	bne.n	8008bce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d005      	beq.n	8008bda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd2:	f043 0208 	orr.w	r2, r3, #8
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	f000 81ed 	beq.w	8008fbe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008be8:	f003 0320 	and.w	r3, r3, #32
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d008      	beq.n	8008c02 <HAL_UART_IRQHandler+0x14e>
 8008bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bf4:	f003 0320 	and.w	r3, r3, #32
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d002      	beq.n	8008c02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fb24 	bl	800924a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0c:	2b40      	cmp	r3, #64	; 0x40
 8008c0e:	bf0c      	ite	eq
 8008c10:	2301      	moveq	r3, #1
 8008c12:	2300      	movne	r3, #0
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1e:	f003 0308 	and.w	r3, r3, #8
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d103      	bne.n	8008c2e <HAL_UART_IRQHandler+0x17a>
 8008c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d04f      	beq.n	8008cce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fa2c 	bl	800908c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	695b      	ldr	r3, [r3, #20]
 8008c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c3e:	2b40      	cmp	r3, #64	; 0x40
 8008c40:	d141      	bne.n	8008cc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	3314      	adds	r3, #20
 8008c48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c50:	e853 3f00 	ldrex	r3, [r3]
 8008c54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008c58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	3314      	adds	r3, #20
 8008c6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008c6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008c7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008c7e:	e841 2300 	strex	r3, r2, [r1]
 8008c82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008c86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1d9      	bne.n	8008c42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d013      	beq.n	8008cbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9a:	4a7d      	ldr	r2, [pc, #500]	; (8008e90 <HAL_UART_IRQHandler+0x3dc>)
 8008c9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fa fbe2 	bl	800346c <HAL_DMA_Abort_IT>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d016      	beq.n	8008cdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008cb8:	4610      	mov	r0, r2
 8008cba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cbc:	e00e      	b.n	8008cdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f990 	bl	8008fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cc4:	e00a      	b.n	8008cdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f98c 	bl	8008fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ccc:	e006      	b.n	8008cdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f988 	bl	8008fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008cda:	e170      	b.n	8008fbe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cdc:	bf00      	nop
    return;
 8008cde:	e16e      	b.n	8008fbe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	f040 814a 	bne.w	8008f7e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cee:	f003 0310 	and.w	r3, r3, #16
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f000 8143 	beq.w	8008f7e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cfc:	f003 0310 	and.w	r3, r3, #16
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f000 813c 	beq.w	8008f7e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d06:	2300      	movs	r3, #0
 8008d08:	60bb      	str	r3, [r7, #8]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	60bb      	str	r3, [r7, #8]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	60bb      	str	r3, [r7, #8]
 8008d1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d26:	2b40      	cmp	r3, #64	; 0x40
 8008d28:	f040 80b4 	bne.w	8008e94 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008d38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 8140 	beq.w	8008fc2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	f080 8139 	bcs.w	8008fc2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008d56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5c:	69db      	ldr	r3, [r3, #28]
 8008d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d62:	f000 8088 	beq.w	8008e76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	330c      	adds	r3, #12
 8008d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d74:	e853 3f00 	ldrex	r3, [r3]
 8008d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	330c      	adds	r3, #12
 8008d8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008d92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008d96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008d9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008da2:	e841 2300 	strex	r3, r2, [r1]
 8008da6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1d9      	bne.n	8008d66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3314      	adds	r3, #20
 8008db8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dbc:	e853 3f00 	ldrex	r3, [r3]
 8008dc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008dc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008dc4:	f023 0301 	bic.w	r3, r3, #1
 8008dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3314      	adds	r3, #20
 8008dd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008dd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008dda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ddc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008dde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008de2:	e841 2300 	strex	r3, r2, [r1]
 8008de6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1e1      	bne.n	8008db2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	3314      	adds	r3, #20
 8008df4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008df8:	e853 3f00 	ldrex	r3, [r3]
 8008dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3314      	adds	r3, #20
 8008e0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008e12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008e14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008e18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008e1a:	e841 2300 	strex	r3, r2, [r1]
 8008e1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1e3      	bne.n	8008dee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2220      	movs	r2, #32
 8008e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	330c      	adds	r3, #12
 8008e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e3e:	e853 3f00 	ldrex	r3, [r3]
 8008e42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e46:	f023 0310 	bic.w	r3, r3, #16
 8008e4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	330c      	adds	r3, #12
 8008e54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008e58:	65ba      	str	r2, [r7, #88]	; 0x58
 8008e5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e60:	e841 2300 	strex	r3, r2, [r1]
 8008e64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1e3      	bne.n	8008e34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7fa fa8b 	bl	800338c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	4619      	mov	r1, r3
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f8b6 	bl	8008ff8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e8c:	e099      	b.n	8008fc2 <HAL_UART_IRQHandler+0x50e>
 8008e8e:	bf00      	nop
 8008e90:	08009153 	.word	0x08009153
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	1ad3      	subs	r3, r2, r3
 8008ea0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f000 808b 	beq.w	8008fc6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008eb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f000 8086 	beq.w	8008fc6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	330c      	adds	r3, #12
 8008ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec4:	e853 3f00 	ldrex	r3, [r3]
 8008ec8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ecc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ed0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	330c      	adds	r3, #12
 8008eda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008ede:	647a      	str	r2, [r7, #68]	; 0x44
 8008ee0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ee6:	e841 2300 	strex	r3, r2, [r1]
 8008eea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1e3      	bne.n	8008eba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	3314      	adds	r3, #20
 8008ef8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	e853 3f00 	ldrex	r3, [r3]
 8008f00:	623b      	str	r3, [r7, #32]
   return(result);
 8008f02:	6a3b      	ldr	r3, [r7, #32]
 8008f04:	f023 0301 	bic.w	r3, r3, #1
 8008f08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	3314      	adds	r3, #20
 8008f12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f16:	633a      	str	r2, [r7, #48]	; 0x30
 8008f18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f1e:	e841 2300 	strex	r3, r2, [r1]
 8008f22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1e3      	bne.n	8008ef2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2220      	movs	r2, #32
 8008f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	330c      	adds	r3, #12
 8008f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	e853 3f00 	ldrex	r3, [r3]
 8008f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f023 0310 	bic.w	r3, r3, #16
 8008f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	330c      	adds	r3, #12
 8008f58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008f5c:	61fa      	str	r2, [r7, #28]
 8008f5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f60:	69b9      	ldr	r1, [r7, #24]
 8008f62:	69fa      	ldr	r2, [r7, #28]
 8008f64:	e841 2300 	strex	r3, r2, [r1]
 8008f68:	617b      	str	r3, [r7, #20]
   return(result);
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1e3      	bne.n	8008f38 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f83e 	bl	8008ff8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f7c:	e023      	b.n	8008fc6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d009      	beq.n	8008f9e <HAL_UART_IRQHandler+0x4ea>
 8008f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d003      	beq.n	8008f9e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f8ef 	bl	800917a <UART_Transmit_IT>
    return;
 8008f9c:	e014      	b.n	8008fc8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00e      	beq.n	8008fc8 <HAL_UART_IRQHandler+0x514>
 8008faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d008      	beq.n	8008fc8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f92f 	bl	800921a <UART_EndTransmit_IT>
    return;
 8008fbc:	e004      	b.n	8008fc8 <HAL_UART_IRQHandler+0x514>
    return;
 8008fbe:	bf00      	nop
 8008fc0:	e002      	b.n	8008fc8 <HAL_UART_IRQHandler+0x514>
      return;
 8008fc2:	bf00      	nop
 8008fc4:	e000      	b.n	8008fc8 <HAL_UART_IRQHandler+0x514>
      return;
 8008fc6:	bf00      	nop
  }
}
 8008fc8:	37e8      	adds	r7, #232	; 0xe8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop

08008fd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009004:	bf00      	nop
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	4613      	mov	r3, r2
 800901c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	68ba      	ldr	r2, [r7, #8]
 8009022:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	88fa      	ldrh	r2, [r7, #6]
 8009028:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	88fa      	ldrh	r2, [r7, #6]
 800902e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2222      	movs	r2, #34	; 0x22
 800903a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d007      	beq.n	800905e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68da      	ldr	r2, [r3, #12]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800905c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	695a      	ldr	r2, [r3, #20]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f042 0201 	orr.w	r2, r2, #1
 800906c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68da      	ldr	r2, [r3, #12]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f042 0220 	orr.w	r2, r2, #32
 800907c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800908c:	b480      	push	{r7}
 800908e:	b095      	sub	sp, #84	; 0x54
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	330c      	adds	r3, #12
 800909a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800909e:	e853 3f00 	ldrex	r3, [r3]
 80090a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80090a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	330c      	adds	r3, #12
 80090b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090b4:	643a      	str	r2, [r7, #64]	; 0x40
 80090b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090bc:	e841 2300 	strex	r3, r2, [r1]
 80090c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d1e5      	bne.n	8009094 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	3314      	adds	r3, #20
 80090ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	e853 3f00 	ldrex	r3, [r3]
 80090d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	f023 0301 	bic.w	r3, r3, #1
 80090de:	64bb      	str	r3, [r7, #72]	; 0x48
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3314      	adds	r3, #20
 80090e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090f0:	e841 2300 	strex	r3, r2, [r1]
 80090f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d1e5      	bne.n	80090c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009100:	2b01      	cmp	r3, #1
 8009102:	d119      	bne.n	8009138 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	330c      	adds	r3, #12
 800910a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	e853 3f00 	ldrex	r3, [r3]
 8009112:	60bb      	str	r3, [r7, #8]
   return(result);
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	f023 0310 	bic.w	r3, r3, #16
 800911a:	647b      	str	r3, [r7, #68]	; 0x44
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	330c      	adds	r3, #12
 8009122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009124:	61ba      	str	r2, [r7, #24]
 8009126:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009128:	6979      	ldr	r1, [r7, #20]
 800912a:	69ba      	ldr	r2, [r7, #24]
 800912c:	e841 2300 	strex	r3, r2, [r1]
 8009130:	613b      	str	r3, [r7, #16]
   return(result);
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d1e5      	bne.n	8009104 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2220      	movs	r2, #32
 800913c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009146:	bf00      	nop
 8009148:	3754      	adds	r7, #84	; 0x54
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b084      	sub	sp, #16
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2200      	movs	r2, #0
 8009164:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f7ff ff39 	bl	8008fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009172:	bf00      	nop
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800917a:	b480      	push	{r7}
 800917c:	b085      	sub	sp, #20
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b21      	cmp	r3, #33	; 0x21
 800918c:	d13e      	bne.n	800920c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009196:	d114      	bne.n	80091c2 <UART_Transmit_IT+0x48>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d110      	bne.n	80091c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a1b      	ldr	r3, [r3, #32]
 80091a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	881b      	ldrh	r3, [r3, #0]
 80091aa:	461a      	mov	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a1b      	ldr	r3, [r3, #32]
 80091ba:	1c9a      	adds	r2, r3, #2
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	621a      	str	r2, [r3, #32]
 80091c0:	e008      	b.n	80091d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a1b      	ldr	r3, [r3, #32]
 80091c6:	1c59      	adds	r1, r3, #1
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	6211      	str	r1, [r2, #32]
 80091cc:	781a      	ldrb	r2, [r3, #0]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091d8:	b29b      	uxth	r3, r3
 80091da:	3b01      	subs	r3, #1
 80091dc:	b29b      	uxth	r3, r3
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	4619      	mov	r1, r3
 80091e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10f      	bne.n	8009208 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	68da      	ldr	r2, [r3, #12]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68da      	ldr	r2, [r3, #12]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009206:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	e000      	b.n	800920e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800920c:	2302      	movs	r3, #2
  }
}
 800920e:	4618      	mov	r0, r3
 8009210:	3714      	adds	r7, #20
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr

0800921a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b082      	sub	sp, #8
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68da      	ldr	r2, [r3, #12]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009230:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2220      	movs	r2, #32
 8009236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f7ff fec8 	bl	8008fd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3708      	adds	r7, #8
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b08c      	sub	sp, #48	; 0x30
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009258:	b2db      	uxtb	r3, r3
 800925a:	2b22      	cmp	r3, #34	; 0x22
 800925c:	f040 80ab 	bne.w	80093b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009268:	d117      	bne.n	800929a <UART_Receive_IT+0x50>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d113      	bne.n	800929a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009272:	2300      	movs	r3, #0
 8009274:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	b29b      	uxth	r3, r3
 8009284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009288:	b29a      	uxth	r2, r3
 800928a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009292:	1c9a      	adds	r2, r3, #2
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	629a      	str	r2, [r3, #40]	; 0x28
 8009298:	e026      	b.n	80092e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80092a0:	2300      	movs	r3, #0
 80092a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092ac:	d007      	beq.n	80092be <UART_Receive_IT+0x74>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10a      	bne.n	80092cc <UART_Receive_IT+0x82>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d106      	bne.n	80092cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c8:	701a      	strb	r2, [r3, #0]
 80092ca:	e008      	b.n	80092de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092d8:	b2da      	uxtb	r2, r3
 80092da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e2:	1c5a      	adds	r2, r3, #1
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	3b01      	subs	r3, #1
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	4619      	mov	r1, r3
 80092f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d15a      	bne.n	80093b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68da      	ldr	r2, [r3, #12]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f022 0220 	bic.w	r2, r2, #32
 800930a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68da      	ldr	r2, [r3, #12]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800931a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	695a      	ldr	r2, [r3, #20]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f022 0201 	bic.w	r2, r2, #1
 800932a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2220      	movs	r2, #32
 8009330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009338:	2b01      	cmp	r3, #1
 800933a:	d135      	bne.n	80093a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	330c      	adds	r3, #12
 8009348:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	e853 3f00 	ldrex	r3, [r3]
 8009350:	613b      	str	r3, [r7, #16]
   return(result);
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	f023 0310 	bic.w	r3, r3, #16
 8009358:	627b      	str	r3, [r7, #36]	; 0x24
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	330c      	adds	r3, #12
 8009360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009362:	623a      	str	r2, [r7, #32]
 8009364:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009366:	69f9      	ldr	r1, [r7, #28]
 8009368:	6a3a      	ldr	r2, [r7, #32]
 800936a:	e841 2300 	strex	r3, r2, [r1]
 800936e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1e5      	bne.n	8009342 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 0310 	and.w	r3, r3, #16
 8009380:	2b10      	cmp	r3, #16
 8009382:	d10a      	bne.n	800939a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009384:	2300      	movs	r3, #0
 8009386:	60fb      	str	r3, [r7, #12]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	60fb      	str	r3, [r7, #12]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	60fb      	str	r3, [r7, #12]
 8009398:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f7ff fe29 	bl	8008ff8 <HAL_UARTEx_RxEventCallback>
 80093a6:	e002      	b.n	80093ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7f8 fd9b 	bl	8001ee4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80093ae:	2300      	movs	r3, #0
 80093b0:	e002      	b.n	80093b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	e000      	b.n	80093b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80093b6:	2302      	movs	r3, #2
  }
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3730      	adds	r7, #48	; 0x30
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093c4:	b0c0      	sub	sp, #256	; 0x100
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80093d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093dc:	68d9      	ldr	r1, [r3, #12]
 80093de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	ea40 0301 	orr.w	r3, r0, r1
 80093e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80093ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ee:	689a      	ldr	r2, [r3, #8]
 80093f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	431a      	orrs	r2, r3
 80093f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	431a      	orrs	r2, r3
 8009400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009404:	69db      	ldr	r3, [r3, #28]
 8009406:	4313      	orrs	r3, r2
 8009408:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800940c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009418:	f021 010c 	bic.w	r1, r1, #12
 800941c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009426:	430b      	orrs	r3, r1
 8009428:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800942a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	695b      	ldr	r3, [r3, #20]
 8009432:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800943a:	6999      	ldr	r1, [r3, #24]
 800943c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	ea40 0301 	orr.w	r3, r0, r1
 8009446:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	4b8f      	ldr	r3, [pc, #572]	; (800968c <UART_SetConfig+0x2cc>)
 8009450:	429a      	cmp	r2, r3
 8009452:	d005      	beq.n	8009460 <UART_SetConfig+0xa0>
 8009454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	4b8d      	ldr	r3, [pc, #564]	; (8009690 <UART_SetConfig+0x2d0>)
 800945c:	429a      	cmp	r2, r3
 800945e:	d104      	bne.n	800946a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009460:	f7ff f904 	bl	800866c <HAL_RCC_GetPCLK2Freq>
 8009464:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009468:	e003      	b.n	8009472 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800946a:	f7ff f8eb 	bl	8008644 <HAL_RCC_GetPCLK1Freq>
 800946e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009476:	69db      	ldr	r3, [r3, #28]
 8009478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800947c:	f040 810c 	bne.w	8009698 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009484:	2200      	movs	r2, #0
 8009486:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800948a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800948e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009492:	4622      	mov	r2, r4
 8009494:	462b      	mov	r3, r5
 8009496:	1891      	adds	r1, r2, r2
 8009498:	65b9      	str	r1, [r7, #88]	; 0x58
 800949a:	415b      	adcs	r3, r3
 800949c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800949e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80094a2:	4621      	mov	r1, r4
 80094a4:	eb12 0801 	adds.w	r8, r2, r1
 80094a8:	4629      	mov	r1, r5
 80094aa:	eb43 0901 	adc.w	r9, r3, r1
 80094ae:	f04f 0200 	mov.w	r2, #0
 80094b2:	f04f 0300 	mov.w	r3, #0
 80094b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80094ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80094be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80094c2:	4690      	mov	r8, r2
 80094c4:	4699      	mov	r9, r3
 80094c6:	4623      	mov	r3, r4
 80094c8:	eb18 0303 	adds.w	r3, r8, r3
 80094cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80094d0:	462b      	mov	r3, r5
 80094d2:	eb49 0303 	adc.w	r3, r9, r3
 80094d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80094da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80094e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80094ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80094ee:	460b      	mov	r3, r1
 80094f0:	18db      	adds	r3, r3, r3
 80094f2:	653b      	str	r3, [r7, #80]	; 0x50
 80094f4:	4613      	mov	r3, r2
 80094f6:	eb42 0303 	adc.w	r3, r2, r3
 80094fa:	657b      	str	r3, [r7, #84]	; 0x54
 80094fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009500:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009504:	f7f6 fe68 	bl	80001d8 <__aeabi_uldivmod>
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	4b61      	ldr	r3, [pc, #388]	; (8009694 <UART_SetConfig+0x2d4>)
 800950e:	fba3 2302 	umull	r2, r3, r3, r2
 8009512:	095b      	lsrs	r3, r3, #5
 8009514:	011c      	lsls	r4, r3, #4
 8009516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800951a:	2200      	movs	r2, #0
 800951c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009520:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009524:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009528:	4642      	mov	r2, r8
 800952a:	464b      	mov	r3, r9
 800952c:	1891      	adds	r1, r2, r2
 800952e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009530:	415b      	adcs	r3, r3
 8009532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009534:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009538:	4641      	mov	r1, r8
 800953a:	eb12 0a01 	adds.w	sl, r2, r1
 800953e:	4649      	mov	r1, r9
 8009540:	eb43 0b01 	adc.w	fp, r3, r1
 8009544:	f04f 0200 	mov.w	r2, #0
 8009548:	f04f 0300 	mov.w	r3, #0
 800954c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009550:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009554:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009558:	4692      	mov	sl, r2
 800955a:	469b      	mov	fp, r3
 800955c:	4643      	mov	r3, r8
 800955e:	eb1a 0303 	adds.w	r3, sl, r3
 8009562:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009566:	464b      	mov	r3, r9
 8009568:	eb4b 0303 	adc.w	r3, fp, r3
 800956c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800957c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009580:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009584:	460b      	mov	r3, r1
 8009586:	18db      	adds	r3, r3, r3
 8009588:	643b      	str	r3, [r7, #64]	; 0x40
 800958a:	4613      	mov	r3, r2
 800958c:	eb42 0303 	adc.w	r3, r2, r3
 8009590:	647b      	str	r3, [r7, #68]	; 0x44
 8009592:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009596:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800959a:	f7f6 fe1d 	bl	80001d8 <__aeabi_uldivmod>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	4611      	mov	r1, r2
 80095a4:	4b3b      	ldr	r3, [pc, #236]	; (8009694 <UART_SetConfig+0x2d4>)
 80095a6:	fba3 2301 	umull	r2, r3, r3, r1
 80095aa:	095b      	lsrs	r3, r3, #5
 80095ac:	2264      	movs	r2, #100	; 0x64
 80095ae:	fb02 f303 	mul.w	r3, r2, r3
 80095b2:	1acb      	subs	r3, r1, r3
 80095b4:	00db      	lsls	r3, r3, #3
 80095b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80095ba:	4b36      	ldr	r3, [pc, #216]	; (8009694 <UART_SetConfig+0x2d4>)
 80095bc:	fba3 2302 	umull	r2, r3, r3, r2
 80095c0:	095b      	lsrs	r3, r3, #5
 80095c2:	005b      	lsls	r3, r3, #1
 80095c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80095c8:	441c      	add	r4, r3
 80095ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095ce:	2200      	movs	r2, #0
 80095d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80095d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80095d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80095dc:	4642      	mov	r2, r8
 80095de:	464b      	mov	r3, r9
 80095e0:	1891      	adds	r1, r2, r2
 80095e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80095e4:	415b      	adcs	r3, r3
 80095e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80095ec:	4641      	mov	r1, r8
 80095ee:	1851      	adds	r1, r2, r1
 80095f0:	6339      	str	r1, [r7, #48]	; 0x30
 80095f2:	4649      	mov	r1, r9
 80095f4:	414b      	adcs	r3, r1
 80095f6:	637b      	str	r3, [r7, #52]	; 0x34
 80095f8:	f04f 0200 	mov.w	r2, #0
 80095fc:	f04f 0300 	mov.w	r3, #0
 8009600:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009604:	4659      	mov	r1, fp
 8009606:	00cb      	lsls	r3, r1, #3
 8009608:	4651      	mov	r1, sl
 800960a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800960e:	4651      	mov	r1, sl
 8009610:	00ca      	lsls	r2, r1, #3
 8009612:	4610      	mov	r0, r2
 8009614:	4619      	mov	r1, r3
 8009616:	4603      	mov	r3, r0
 8009618:	4642      	mov	r2, r8
 800961a:	189b      	adds	r3, r3, r2
 800961c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009620:	464b      	mov	r3, r9
 8009622:	460a      	mov	r2, r1
 8009624:	eb42 0303 	adc.w	r3, r2, r3
 8009628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800962c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009638:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800963c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009640:	460b      	mov	r3, r1
 8009642:	18db      	adds	r3, r3, r3
 8009644:	62bb      	str	r3, [r7, #40]	; 0x28
 8009646:	4613      	mov	r3, r2
 8009648:	eb42 0303 	adc.w	r3, r2, r3
 800964c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800964e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009652:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009656:	f7f6 fdbf 	bl	80001d8 <__aeabi_uldivmod>
 800965a:	4602      	mov	r2, r0
 800965c:	460b      	mov	r3, r1
 800965e:	4b0d      	ldr	r3, [pc, #52]	; (8009694 <UART_SetConfig+0x2d4>)
 8009660:	fba3 1302 	umull	r1, r3, r3, r2
 8009664:	095b      	lsrs	r3, r3, #5
 8009666:	2164      	movs	r1, #100	; 0x64
 8009668:	fb01 f303 	mul.w	r3, r1, r3
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	00db      	lsls	r3, r3, #3
 8009670:	3332      	adds	r3, #50	; 0x32
 8009672:	4a08      	ldr	r2, [pc, #32]	; (8009694 <UART_SetConfig+0x2d4>)
 8009674:	fba2 2303 	umull	r2, r3, r2, r3
 8009678:	095b      	lsrs	r3, r3, #5
 800967a:	f003 0207 	and.w	r2, r3, #7
 800967e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4422      	add	r2, r4
 8009686:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009688:	e106      	b.n	8009898 <UART_SetConfig+0x4d8>
 800968a:	bf00      	nop
 800968c:	40011000 	.word	0x40011000
 8009690:	40011400 	.word	0x40011400
 8009694:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800969c:	2200      	movs	r2, #0
 800969e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80096a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80096a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80096aa:	4642      	mov	r2, r8
 80096ac:	464b      	mov	r3, r9
 80096ae:	1891      	adds	r1, r2, r2
 80096b0:	6239      	str	r1, [r7, #32]
 80096b2:	415b      	adcs	r3, r3
 80096b4:	627b      	str	r3, [r7, #36]	; 0x24
 80096b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80096ba:	4641      	mov	r1, r8
 80096bc:	1854      	adds	r4, r2, r1
 80096be:	4649      	mov	r1, r9
 80096c0:	eb43 0501 	adc.w	r5, r3, r1
 80096c4:	f04f 0200 	mov.w	r2, #0
 80096c8:	f04f 0300 	mov.w	r3, #0
 80096cc:	00eb      	lsls	r3, r5, #3
 80096ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80096d2:	00e2      	lsls	r2, r4, #3
 80096d4:	4614      	mov	r4, r2
 80096d6:	461d      	mov	r5, r3
 80096d8:	4643      	mov	r3, r8
 80096da:	18e3      	adds	r3, r4, r3
 80096dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80096e0:	464b      	mov	r3, r9
 80096e2:	eb45 0303 	adc.w	r3, r5, r3
 80096e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80096ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80096f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80096fa:	f04f 0200 	mov.w	r2, #0
 80096fe:	f04f 0300 	mov.w	r3, #0
 8009702:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009706:	4629      	mov	r1, r5
 8009708:	008b      	lsls	r3, r1, #2
 800970a:	4621      	mov	r1, r4
 800970c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009710:	4621      	mov	r1, r4
 8009712:	008a      	lsls	r2, r1, #2
 8009714:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009718:	f7f6 fd5e 	bl	80001d8 <__aeabi_uldivmod>
 800971c:	4602      	mov	r2, r0
 800971e:	460b      	mov	r3, r1
 8009720:	4b60      	ldr	r3, [pc, #384]	; (80098a4 <UART_SetConfig+0x4e4>)
 8009722:	fba3 2302 	umull	r2, r3, r3, r2
 8009726:	095b      	lsrs	r3, r3, #5
 8009728:	011c      	lsls	r4, r3, #4
 800972a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800972e:	2200      	movs	r2, #0
 8009730:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009734:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009738:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800973c:	4642      	mov	r2, r8
 800973e:	464b      	mov	r3, r9
 8009740:	1891      	adds	r1, r2, r2
 8009742:	61b9      	str	r1, [r7, #24]
 8009744:	415b      	adcs	r3, r3
 8009746:	61fb      	str	r3, [r7, #28]
 8009748:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800974c:	4641      	mov	r1, r8
 800974e:	1851      	adds	r1, r2, r1
 8009750:	6139      	str	r1, [r7, #16]
 8009752:	4649      	mov	r1, r9
 8009754:	414b      	adcs	r3, r1
 8009756:	617b      	str	r3, [r7, #20]
 8009758:	f04f 0200 	mov.w	r2, #0
 800975c:	f04f 0300 	mov.w	r3, #0
 8009760:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009764:	4659      	mov	r1, fp
 8009766:	00cb      	lsls	r3, r1, #3
 8009768:	4651      	mov	r1, sl
 800976a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800976e:	4651      	mov	r1, sl
 8009770:	00ca      	lsls	r2, r1, #3
 8009772:	4610      	mov	r0, r2
 8009774:	4619      	mov	r1, r3
 8009776:	4603      	mov	r3, r0
 8009778:	4642      	mov	r2, r8
 800977a:	189b      	adds	r3, r3, r2
 800977c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009780:	464b      	mov	r3, r9
 8009782:	460a      	mov	r2, r1
 8009784:	eb42 0303 	adc.w	r3, r2, r3
 8009788:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800978c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	67bb      	str	r3, [r7, #120]	; 0x78
 8009796:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009798:	f04f 0200 	mov.w	r2, #0
 800979c:	f04f 0300 	mov.w	r3, #0
 80097a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80097a4:	4649      	mov	r1, r9
 80097a6:	008b      	lsls	r3, r1, #2
 80097a8:	4641      	mov	r1, r8
 80097aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097ae:	4641      	mov	r1, r8
 80097b0:	008a      	lsls	r2, r1, #2
 80097b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80097b6:	f7f6 fd0f 	bl	80001d8 <__aeabi_uldivmod>
 80097ba:	4602      	mov	r2, r0
 80097bc:	460b      	mov	r3, r1
 80097be:	4611      	mov	r1, r2
 80097c0:	4b38      	ldr	r3, [pc, #224]	; (80098a4 <UART_SetConfig+0x4e4>)
 80097c2:	fba3 2301 	umull	r2, r3, r3, r1
 80097c6:	095b      	lsrs	r3, r3, #5
 80097c8:	2264      	movs	r2, #100	; 0x64
 80097ca:	fb02 f303 	mul.w	r3, r2, r3
 80097ce:	1acb      	subs	r3, r1, r3
 80097d0:	011b      	lsls	r3, r3, #4
 80097d2:	3332      	adds	r3, #50	; 0x32
 80097d4:	4a33      	ldr	r2, [pc, #204]	; (80098a4 <UART_SetConfig+0x4e4>)
 80097d6:	fba2 2303 	umull	r2, r3, r2, r3
 80097da:	095b      	lsrs	r3, r3, #5
 80097dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097e0:	441c      	add	r4, r3
 80097e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097e6:	2200      	movs	r2, #0
 80097e8:	673b      	str	r3, [r7, #112]	; 0x70
 80097ea:	677a      	str	r2, [r7, #116]	; 0x74
 80097ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80097f0:	4642      	mov	r2, r8
 80097f2:	464b      	mov	r3, r9
 80097f4:	1891      	adds	r1, r2, r2
 80097f6:	60b9      	str	r1, [r7, #8]
 80097f8:	415b      	adcs	r3, r3
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009800:	4641      	mov	r1, r8
 8009802:	1851      	adds	r1, r2, r1
 8009804:	6039      	str	r1, [r7, #0]
 8009806:	4649      	mov	r1, r9
 8009808:	414b      	adcs	r3, r1
 800980a:	607b      	str	r3, [r7, #4]
 800980c:	f04f 0200 	mov.w	r2, #0
 8009810:	f04f 0300 	mov.w	r3, #0
 8009814:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009818:	4659      	mov	r1, fp
 800981a:	00cb      	lsls	r3, r1, #3
 800981c:	4651      	mov	r1, sl
 800981e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009822:	4651      	mov	r1, sl
 8009824:	00ca      	lsls	r2, r1, #3
 8009826:	4610      	mov	r0, r2
 8009828:	4619      	mov	r1, r3
 800982a:	4603      	mov	r3, r0
 800982c:	4642      	mov	r2, r8
 800982e:	189b      	adds	r3, r3, r2
 8009830:	66bb      	str	r3, [r7, #104]	; 0x68
 8009832:	464b      	mov	r3, r9
 8009834:	460a      	mov	r2, r1
 8009836:	eb42 0303 	adc.w	r3, r2, r3
 800983a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800983c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	663b      	str	r3, [r7, #96]	; 0x60
 8009846:	667a      	str	r2, [r7, #100]	; 0x64
 8009848:	f04f 0200 	mov.w	r2, #0
 800984c:	f04f 0300 	mov.w	r3, #0
 8009850:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009854:	4649      	mov	r1, r9
 8009856:	008b      	lsls	r3, r1, #2
 8009858:	4641      	mov	r1, r8
 800985a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800985e:	4641      	mov	r1, r8
 8009860:	008a      	lsls	r2, r1, #2
 8009862:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009866:	f7f6 fcb7 	bl	80001d8 <__aeabi_uldivmod>
 800986a:	4602      	mov	r2, r0
 800986c:	460b      	mov	r3, r1
 800986e:	4b0d      	ldr	r3, [pc, #52]	; (80098a4 <UART_SetConfig+0x4e4>)
 8009870:	fba3 1302 	umull	r1, r3, r3, r2
 8009874:	095b      	lsrs	r3, r3, #5
 8009876:	2164      	movs	r1, #100	; 0x64
 8009878:	fb01 f303 	mul.w	r3, r1, r3
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	011b      	lsls	r3, r3, #4
 8009880:	3332      	adds	r3, #50	; 0x32
 8009882:	4a08      	ldr	r2, [pc, #32]	; (80098a4 <UART_SetConfig+0x4e4>)
 8009884:	fba2 2303 	umull	r2, r3, r2, r3
 8009888:	095b      	lsrs	r3, r3, #5
 800988a:	f003 020f 	and.w	r2, r3, #15
 800988e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4422      	add	r2, r4
 8009896:	609a      	str	r2, [r3, #8]
}
 8009898:	bf00      	nop
 800989a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800989e:	46bd      	mov	sp, r7
 80098a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098a4:	51eb851f 	.word	0x51eb851f

080098a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80098a8:	b084      	sub	sp, #16
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b084      	sub	sp, #16
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	f107 001c 	add.w	r0, r7, #28
 80098b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80098ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d122      	bne.n	8009906 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80098d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80098e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d105      	bne.n	80098fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f9c0 	bl	8009c80 <USB_CoreReset>
 8009900:	4603      	mov	r3, r0
 8009902:	73fb      	strb	r3, [r7, #15]
 8009904:	e01a      	b.n	800993c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f9b4 	bl	8009c80 <USB_CoreReset>
 8009918:	4603      	mov	r3, r0
 800991a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800991c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800991e:	2b00      	cmp	r3, #0
 8009920:	d106      	bne.n	8009930 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009926:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	639a      	str	r2, [r3, #56]	; 0x38
 800992e:	e005      	b.n	800993c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009934:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800993c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993e:	2b01      	cmp	r3, #1
 8009940:	d10b      	bne.n	800995a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	f043 0206 	orr.w	r2, r3, #6
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	f043 0220 	orr.w	r2, r3, #32
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800995a:	7bfb      	ldrb	r3, [r7, #15]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009966:	b004      	add	sp, #16
 8009968:	4770      	bx	lr

0800996a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800996a:	b480      	push	{r7}
 800996c:	b083      	sub	sp, #12
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	f043 0201 	orr.w	r2, r3, #1
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	f023 0201 	bic.w	r2, r3, #1
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	370c      	adds	r7, #12
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b084      	sub	sp, #16
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	460b      	mov	r3, r1
 80099b8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80099ba:	2300      	movs	r3, #0
 80099bc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80099ca:	78fb      	ldrb	r3, [r7, #3]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d115      	bne.n	80099fc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80099dc:	2001      	movs	r0, #1
 80099de:	f7f9 fa3b 	bl	8002e58 <HAL_Delay>
      ms++;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	3301      	adds	r3, #1
 80099e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 f93a 	bl	8009c62 <USB_GetMode>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d01e      	beq.n	8009a32 <USB_SetCurrentMode+0x84>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2b31      	cmp	r3, #49	; 0x31
 80099f8:	d9f0      	bls.n	80099dc <USB_SetCurrentMode+0x2e>
 80099fa:	e01a      	b.n	8009a32 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80099fc:	78fb      	ldrb	r3, [r7, #3]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d115      	bne.n	8009a2e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009a0e:	2001      	movs	r0, #1
 8009a10:	f7f9 fa22 	bl	8002e58 <HAL_Delay>
      ms++;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	3301      	adds	r3, #1
 8009a18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f921 	bl	8009c62 <USB_GetMode>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d005      	beq.n	8009a32 <USB_SetCurrentMode+0x84>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2b31      	cmp	r3, #49	; 0x31
 8009a2a:	d9f0      	bls.n	8009a0e <USB_SetCurrentMode+0x60>
 8009a2c:	e001      	b.n	8009a32 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e005      	b.n	8009a3e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2b32      	cmp	r3, #50	; 0x32
 8009a36:	d101      	bne.n	8009a3c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e000      	b.n	8009a3e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
	...

08009a48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a52:	2300      	movs	r3, #0
 8009a54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	4a13      	ldr	r2, [pc, #76]	; (8009aac <USB_FlushTxFifo+0x64>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d901      	bls.n	8009a68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e01b      	b.n	8009aa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	daf2      	bge.n	8009a56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009a70:	2300      	movs	r3, #0
 8009a72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	019b      	lsls	r3, r3, #6
 8009a78:	f043 0220 	orr.w	r2, r3, #32
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	3301      	adds	r3, #1
 8009a84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	4a08      	ldr	r2, [pc, #32]	; (8009aac <USB_FlushTxFifo+0x64>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d901      	bls.n	8009a92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	e006      	b.n	8009aa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	f003 0320 	and.w	r3, r3, #32
 8009a9a:	2b20      	cmp	r3, #32
 8009a9c:	d0f0      	beq.n	8009a80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3714      	adds	r7, #20
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr
 8009aac:	00030d40 	.word	0x00030d40

08009ab0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	4a11      	ldr	r2, [pc, #68]	; (8009b0c <USB_FlushRxFifo+0x5c>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d901      	bls.n	8009ace <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009aca:	2303      	movs	r3, #3
 8009acc:	e018      	b.n	8009b00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	daf2      	bge.n	8009abc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2210      	movs	r2, #16
 8009ade:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	4a08      	ldr	r2, [pc, #32]	; (8009b0c <USB_FlushRxFifo+0x5c>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d901      	bls.n	8009af2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009aee:	2303      	movs	r3, #3
 8009af0:	e006      	b.n	8009b00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	f003 0310 	and.w	r3, r3, #16
 8009afa:	2b10      	cmp	r3, #16
 8009afc:	d0f0      	beq.n	8009ae0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3714      	adds	r7, #20
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr
 8009b0c:	00030d40 	.word	0x00030d40

08009b10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b089      	sub	sp, #36	; 0x24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	4611      	mov	r1, r2
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	460b      	mov	r3, r1
 8009b20:	71fb      	strb	r3, [r7, #7]
 8009b22:	4613      	mov	r3, r2
 8009b24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009b2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d123      	bne.n	8009b7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009b36:	88bb      	ldrh	r3, [r7, #4]
 8009b38:	3303      	adds	r3, #3
 8009b3a:	089b      	lsrs	r3, r3, #2
 8009b3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009b3e:	2300      	movs	r3, #0
 8009b40:	61bb      	str	r3, [r7, #24]
 8009b42:	e018      	b.n	8009b76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009b44:	79fb      	ldrb	r3, [r7, #7]
 8009b46:	031a      	lsls	r2, r3, #12
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b50:	461a      	mov	r2, r3
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	3301      	adds	r3, #1
 8009b62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	3301      	adds	r3, #1
 8009b68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	3301      	adds	r3, #1
 8009b74:	61bb      	str	r3, [r7, #24]
 8009b76:	69ba      	ldr	r2, [r7, #24]
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d3e2      	bcc.n	8009b44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3724      	adds	r7, #36	; 0x24
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b08b      	sub	sp, #44	; 0x2c
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	4613      	mov	r3, r2
 8009b98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009ba2:	88fb      	ldrh	r3, [r7, #6]
 8009ba4:	089b      	lsrs	r3, r3, #2
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009baa:	88fb      	ldrh	r3, [r7, #6]
 8009bac:	f003 0303 	and.w	r3, r3, #3
 8009bb0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	623b      	str	r3, [r7, #32]
 8009bb6:	e014      	b.n	8009be2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	601a      	str	r2, [r3, #0]
    pDest++;
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bcc:	3301      	adds	r3, #1
 8009bce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd8:	3301      	adds	r3, #1
 8009bda:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009bdc:	6a3b      	ldr	r3, [r7, #32]
 8009bde:	3301      	adds	r3, #1
 8009be0:	623b      	str	r3, [r7, #32]
 8009be2:	6a3a      	ldr	r2, [r7, #32]
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d3e6      	bcc.n	8009bb8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009bea:	8bfb      	ldrh	r3, [r7, #30]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d01e      	beq.n	8009c2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	f107 0310 	add.w	r3, r7, #16
 8009c00:	6812      	ldr	r2, [r2, #0]
 8009c02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	6a3b      	ldr	r3, [r7, #32]
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	00db      	lsls	r3, r3, #3
 8009c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c14:	701a      	strb	r2, [r3, #0]
      i++;
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	623b      	str	r3, [r7, #32]
      pDest++;
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1e:	3301      	adds	r3, #1
 8009c20:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009c22:	8bfb      	ldrh	r3, [r7, #30]
 8009c24:	3b01      	subs	r3, #1
 8009c26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009c28:	8bfb      	ldrh	r3, [r7, #30]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1ea      	bne.n	8009c04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	372c      	adds	r7, #44	; 0x2c
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b085      	sub	sp, #20
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	695b      	ldr	r3, [r3, #20]
 8009c48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	4013      	ands	r3, r2
 8009c52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009c54:	68fb      	ldr	r3, [r7, #12]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr

08009c62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009c62:	b480      	push	{r7}
 8009c64:	b083      	sub	sp, #12
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	695b      	ldr	r3, [r3, #20]
 8009c6e:	f003 0301 	and.w	r3, r3, #1
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	370c      	adds	r7, #12
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr
	...

08009c80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	4a13      	ldr	r2, [pc, #76]	; (8009ce4 <USB_CoreReset+0x64>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d901      	bls.n	8009c9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	e01b      	b.n	8009cd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	daf2      	bge.n	8009c8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	f043 0201 	orr.w	r2, r3, #1
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	4a09      	ldr	r2, [pc, #36]	; (8009ce4 <USB_CoreReset+0x64>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d901      	bls.n	8009cc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	e006      	b.n	8009cd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	691b      	ldr	r3, [r3, #16]
 8009ccc:	f003 0301 	and.w	r3, r3, #1
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d0f0      	beq.n	8009cb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	00030d40 	.word	0x00030d40

08009ce8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ce8:	b084      	sub	sp, #16
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b086      	sub	sp, #24
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
 8009cf2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009cf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d08:	461a      	mov	r2, r3
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d018      	beq.n	8009d70 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d10a      	bne.n	8009d5a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d52:	f043 0304 	orr.w	r3, r3, #4
 8009d56:	6013      	str	r3, [r2, #0]
 8009d58:	e014      	b.n	8009d84 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	68fa      	ldr	r2, [r7, #12]
 8009d64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d68:	f023 0304 	bic.w	r3, r3, #4
 8009d6c:	6013      	str	r3, [r2, #0]
 8009d6e:	e009      	b.n	8009d84 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d7e:	f023 0304 	bic.w	r3, r3, #4
 8009d82:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009d84:	2110      	movs	r1, #16
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f7ff fe5e 	bl	8009a48 <USB_FlushTxFifo>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d001      	beq.n	8009d96 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f7ff fe8a 	bl	8009ab0 <USB_FlushRxFifo>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d001      	beq.n	8009da6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009da6:	2300      	movs	r3, #0
 8009da8:	613b      	str	r3, [r7, #16]
 8009daa:	e015      	b.n	8009dd8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	015a      	lsls	r2, r3, #5
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	4413      	add	r3, r2
 8009db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009db8:	461a      	mov	r2, r3
 8009dba:	f04f 33ff 	mov.w	r3, #4294967295
 8009dbe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	015a      	lsls	r2, r3, #5
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dcc:	461a      	mov	r2, r3
 8009dce:	2300      	movs	r3, #0
 8009dd0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	613b      	str	r3, [r7, #16]
 8009dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dda:	693a      	ldr	r2, [r7, #16]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d3e5      	bcc.n	8009dac <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f04f 32ff 	mov.w	r2, #4294967295
 8009dec:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00b      	beq.n	8009e12 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e00:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a13      	ldr	r2, [pc, #76]	; (8009e54 <USB_HostInit+0x16c>)
 8009e06:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a13      	ldr	r2, [pc, #76]	; (8009e58 <USB_HostInit+0x170>)
 8009e0c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009e10:	e009      	b.n	8009e26 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2280      	movs	r2, #128	; 0x80
 8009e16:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a10      	ldr	r2, [pc, #64]	; (8009e5c <USB_HostInit+0x174>)
 8009e1c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a0f      	ldr	r2, [pc, #60]	; (8009e60 <USB_HostInit+0x178>)
 8009e22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d105      	bne.n	8009e38 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	f043 0210 	orr.w	r2, r3, #16
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	699a      	ldr	r2, [r3, #24]
 8009e3c:	4b09      	ldr	r3, [pc, #36]	; (8009e64 <USB_HostInit+0x17c>)
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3718      	adds	r7, #24
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e50:	b004      	add	sp, #16
 8009e52:	4770      	bx	lr
 8009e54:	01000200 	.word	0x01000200
 8009e58:	00e00300 	.word	0x00e00300
 8009e5c:	00600080 	.word	0x00600080
 8009e60:	004000e0 	.word	0x004000e0
 8009e64:	a3200008 	.word	0xa3200008

08009e68 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	460b      	mov	r3, r1
 8009e72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e86:	f023 0303 	bic.w	r3, r3, #3
 8009e8a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	78fb      	ldrb	r3, [r7, #3]
 8009e96:	f003 0303 	and.w	r3, r3, #3
 8009e9a:	68f9      	ldr	r1, [r7, #12]
 8009e9c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009ea4:	78fb      	ldrb	r3, [r7, #3]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d107      	bne.n	8009eba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009eb6:	6053      	str	r3, [r2, #4]
 8009eb8:	e009      	b.n	8009ece <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009eba:	78fb      	ldrb	r3, [r7, #3]
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d106      	bne.n	8009ece <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	f241 7370 	movw	r3, #6000	; 0x1770
 8009ecc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3714      	adds	r7, #20
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009efc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f0a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009f0c:	2064      	movs	r0, #100	; 0x64
 8009f0e:	f7f8 ffa3 	bl	8002e58 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009f1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f1e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009f20:	200a      	movs	r0, #10
 8009f22:	f7f8 ff99 	bl	8002e58 <HAL_Delay>

  return HAL_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	460b      	mov	r3, r1
 8009f3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009f40:	2300      	movs	r3, #0
 8009f42:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009f54:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d109      	bne.n	8009f74 <USB_DriveVbus+0x44>
 8009f60:	78fb      	ldrb	r3, [r7, #3]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d106      	bne.n	8009f74 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009f6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009f72:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f7e:	d109      	bne.n	8009f94 <USB_DriveVbus+0x64>
 8009f80:	78fb      	ldrb	r3, [r7, #3]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d106      	bne.n	8009f94 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009f8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f92:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3714      	adds	r7, #20
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr

08009fa2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	b085      	sub	sp, #20
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	0c5b      	lsrs	r3, r3, #17
 8009fc0:	f003 0303 	and.w	r3, r3, #3
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3714      	adds	r7, #20
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	b29b      	uxth	r3, r3
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
	...

08009ff4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b088      	sub	sp, #32
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	4608      	mov	r0, r1
 8009ffe:	4611      	mov	r1, r2
 800a000:	461a      	mov	r2, r3
 800a002:	4603      	mov	r3, r0
 800a004:	70fb      	strb	r3, [r7, #3]
 800a006:	460b      	mov	r3, r1
 800a008:	70bb      	strb	r3, [r7, #2]
 800a00a:	4613      	mov	r3, r2
 800a00c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a00e:	2300      	movs	r3, #0
 800a010:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a016:	78fb      	ldrb	r3, [r7, #3]
 800a018:	015a      	lsls	r2, r3, #5
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	4413      	add	r3, r2
 800a01e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a022:	461a      	mov	r2, r3
 800a024:	f04f 33ff 	mov.w	r3, #4294967295
 800a028:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a02a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a02e:	2b03      	cmp	r3, #3
 800a030:	d87e      	bhi.n	800a130 <USB_HC_Init+0x13c>
 800a032:	a201      	add	r2, pc, #4	; (adr r2, 800a038 <USB_HC_Init+0x44>)
 800a034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a038:	0800a049 	.word	0x0800a049
 800a03c:	0800a0f3 	.word	0x0800a0f3
 800a040:	0800a049 	.word	0x0800a049
 800a044:	0800a0b5 	.word	0x0800a0b5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a048:	78fb      	ldrb	r3, [r7, #3]
 800a04a:	015a      	lsls	r2, r3, #5
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	4413      	add	r3, r2
 800a050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a054:	461a      	mov	r2, r3
 800a056:	f240 439d 	movw	r3, #1181	; 0x49d
 800a05a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a05c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a060:	2b00      	cmp	r3, #0
 800a062:	da10      	bge.n	800a086 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a064:	78fb      	ldrb	r3, [r7, #3]
 800a066:	015a      	lsls	r2, r3, #5
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	4413      	add	r3, r2
 800a06c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	78fa      	ldrb	r2, [r7, #3]
 800a074:	0151      	lsls	r1, r2, #5
 800a076:	693a      	ldr	r2, [r7, #16]
 800a078:	440a      	add	r2, r1
 800a07a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a07e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a082:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800a084:	e057      	b.n	800a136 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a08a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d051      	beq.n	800a136 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a092:	78fb      	ldrb	r3, [r7, #3]
 800a094:	015a      	lsls	r2, r3, #5
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	4413      	add	r3, r2
 800a09a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	78fa      	ldrb	r2, [r7, #3]
 800a0a2:	0151      	lsls	r1, r2, #5
 800a0a4:	693a      	ldr	r2, [r7, #16]
 800a0a6:	440a      	add	r2, r1
 800a0a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a0b0:	60d3      	str	r3, [r2, #12]
      break;
 800a0b2:	e040      	b.n	800a136 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a0b4:	78fb      	ldrb	r3, [r7, #3]
 800a0b6:	015a      	lsls	r2, r3, #5
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	f240 639d 	movw	r3, #1693	; 0x69d
 800a0c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a0c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	da34      	bge.n	800a13a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a0d0:	78fb      	ldrb	r3, [r7, #3]
 800a0d2:	015a      	lsls	r2, r3, #5
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	78fa      	ldrb	r2, [r7, #3]
 800a0e0:	0151      	lsls	r1, r2, #5
 800a0e2:	693a      	ldr	r2, [r7, #16]
 800a0e4:	440a      	add	r2, r1
 800a0e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0ee:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a0f0:	e023      	b.n	800a13a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a0f2:	78fb      	ldrb	r3, [r7, #3]
 800a0f4:	015a      	lsls	r2, r3, #5
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0fe:	461a      	mov	r2, r3
 800a100:	f240 2325 	movw	r3, #549	; 0x225
 800a104:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a106:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	da17      	bge.n	800a13e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a10e:	78fb      	ldrb	r3, [r7, #3]
 800a110:	015a      	lsls	r2, r3, #5
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	4413      	add	r3, r2
 800a116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	78fa      	ldrb	r2, [r7, #3]
 800a11e:	0151      	lsls	r1, r2, #5
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	440a      	add	r2, r1
 800a124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a128:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a12c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a12e:	e006      	b.n	800a13e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	77fb      	strb	r3, [r7, #31]
      break;
 800a134:	e004      	b.n	800a140 <USB_HC_Init+0x14c>
      break;
 800a136:	bf00      	nop
 800a138:	e002      	b.n	800a140 <USB_HC_Init+0x14c>
      break;
 800a13a:	bf00      	nop
 800a13c:	e000      	b.n	800a140 <USB_HC_Init+0x14c>
      break;
 800a13e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a140:	78fb      	ldrb	r3, [r7, #3]
 800a142:	015a      	lsls	r2, r3, #5
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	4413      	add	r3, r2
 800a148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	78fa      	ldrb	r2, [r7, #3]
 800a150:	0151      	lsls	r1, r2, #5
 800a152:	693a      	ldr	r2, [r7, #16]
 800a154:	440a      	add	r2, r1
 800a156:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a15a:	f043 0302 	orr.w	r3, r3, #2
 800a15e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a166:	699a      	ldr	r2, [r3, #24]
 800a168:	78fb      	ldrb	r3, [r7, #3]
 800a16a:	f003 030f 	and.w	r3, r3, #15
 800a16e:	2101      	movs	r1, #1
 800a170:	fa01 f303 	lsl.w	r3, r1, r3
 800a174:	6939      	ldr	r1, [r7, #16]
 800a176:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a17a:	4313      	orrs	r3, r2
 800a17c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a18a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	da03      	bge.n	800a19a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a196:	61bb      	str	r3, [r7, #24]
 800a198:	e001      	b.n	800a19e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800a19a:	2300      	movs	r3, #0
 800a19c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f7ff feff 	bl	8009fa2 <USB_GetHostSpeed>
 800a1a4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a1a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d106      	bne.n	800a1bc <USB_HC_Init+0x1c8>
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d003      	beq.n	800a1bc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a1b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a1b8:	617b      	str	r3, [r7, #20]
 800a1ba:	e001      	b.n	800a1c0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a1c0:	787b      	ldrb	r3, [r7, #1]
 800a1c2:	059b      	lsls	r3, r3, #22
 800a1c4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a1c8:	78bb      	ldrb	r3, [r7, #2]
 800a1ca:	02db      	lsls	r3, r3, #11
 800a1cc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a1d0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a1d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a1d6:	049b      	lsls	r3, r3, #18
 800a1d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a1dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a1de:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a1e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a1e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a1ea:	78fb      	ldrb	r3, [r7, #3]
 800a1ec:	0159      	lsls	r1, r3, #5
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	440b      	add	r3, r1
 800a1f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1f6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a1fc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a1fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a202:	2b03      	cmp	r3, #3
 800a204:	d003      	beq.n	800a20e <USB_HC_Init+0x21a>
 800a206:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d10f      	bne.n	800a22e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a20e:	78fb      	ldrb	r3, [r7, #3]
 800a210:	015a      	lsls	r2, r3, #5
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	4413      	add	r3, r2
 800a216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	78fa      	ldrb	r2, [r7, #3]
 800a21e:	0151      	lsls	r1, r2, #5
 800a220:	693a      	ldr	r2, [r7, #16]
 800a222:	440a      	add	r2, r1
 800a224:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a228:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a22c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a22e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3720      	adds	r7, #32
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b08c      	sub	sp, #48	; 0x30
 800a23c:	af02      	add	r7, sp, #8
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	4613      	mov	r3, r2
 800a244:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	785b      	ldrb	r3, [r3, #1]
 800a24e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a250:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a254:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a25a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d02d      	beq.n	800a2be <USB_HC_StartXfer+0x86>
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	791b      	ldrb	r3, [r3, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d129      	bne.n	800a2be <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800a26a:	79fb      	ldrb	r3, [r7, #7]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d117      	bne.n	800a2a0 <USB_HC_StartXfer+0x68>
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	79db      	ldrb	r3, [r3, #7]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d003      	beq.n	800a280 <USB_HC_StartXfer+0x48>
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	79db      	ldrb	r3, [r3, #7]
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d10f      	bne.n	800a2a0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	015a      	lsls	r2, r3, #5
 800a284:	6a3b      	ldr	r3, [r7, #32]
 800a286:	4413      	add	r3, r2
 800a288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	69fa      	ldr	r2, [r7, #28]
 800a290:	0151      	lsls	r1, r2, #5
 800a292:	6a3a      	ldr	r2, [r7, #32]
 800a294:	440a      	add	r2, r1
 800a296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a29a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a29e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800a2a0:	79fb      	ldrb	r3, [r7, #7]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d10b      	bne.n	800a2be <USB_HC_StartXfer+0x86>
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	795b      	ldrb	r3, [r3, #5]
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d107      	bne.n	800a2be <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	785b      	ldrb	r3, [r3, #1]
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f000 fa0f 	bl	800a6d8 <USB_DoPing>
      return HAL_OK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	e0f8      	b.n	800a4b0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d018      	beq.n	800a2f8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	695b      	ldr	r3, [r3, #20]
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	8912      	ldrh	r2, [r2, #8]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	8912      	ldrh	r2, [r2, #8]
 800a2d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2da:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a2dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a2de:	8b7b      	ldrh	r3, [r7, #26]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d90b      	bls.n	800a2fc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800a2e4:	8b7b      	ldrh	r3, [r7, #26]
 800a2e6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a2e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a2ea:	68ba      	ldr	r2, [r7, #8]
 800a2ec:	8912      	ldrh	r2, [r2, #8]
 800a2ee:	fb03 f202 	mul.w	r2, r3, r2
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	611a      	str	r2, [r3, #16]
 800a2f6:	e001      	b.n	800a2fc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	78db      	ldrb	r3, [r3, #3]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d007      	beq.n	800a314 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a304:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a306:	68ba      	ldr	r2, [r7, #8]
 800a308:	8912      	ldrh	r2, [r2, #8]
 800a30a:	fb03 f202 	mul.w	r2, r3, r2
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	611a      	str	r2, [r3, #16]
 800a312:	e003      	b.n	800a31c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	695a      	ldr	r2, [r3, #20]
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a324:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a326:	04d9      	lsls	r1, r3, #19
 800a328:	4b63      	ldr	r3, [pc, #396]	; (800a4b8 <USB_HC_StartXfer+0x280>)
 800a32a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a32c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	7a9b      	ldrb	r3, [r3, #10]
 800a332:	075b      	lsls	r3, r3, #29
 800a334:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a338:	69f9      	ldr	r1, [r7, #28]
 800a33a:	0148      	lsls	r0, r1, #5
 800a33c:	6a39      	ldr	r1, [r7, #32]
 800a33e:	4401      	add	r1, r0
 800a340:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a344:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a346:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a348:	79fb      	ldrb	r3, [r7, #7]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d009      	beq.n	800a362 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	68d9      	ldr	r1, [r3, #12]
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	015a      	lsls	r2, r3, #5
 800a356:	6a3b      	ldr	r3, [r7, #32]
 800a358:	4413      	add	r3, r2
 800a35a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a35e:	460a      	mov	r2, r1
 800a360:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a362:	6a3b      	ldr	r3, [r7, #32]
 800a364:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	f003 0301 	and.w	r3, r3, #1
 800a36e:	2b00      	cmp	r3, #0
 800a370:	bf0c      	ite	eq
 800a372:	2301      	moveq	r3, #1
 800a374:	2300      	movne	r3, #0
 800a376:	b2db      	uxtb	r3, r3
 800a378:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	015a      	lsls	r2, r3, #5
 800a37e:	6a3b      	ldr	r3, [r7, #32]
 800a380:	4413      	add	r3, r2
 800a382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	69fa      	ldr	r2, [r7, #28]
 800a38a:	0151      	lsls	r1, r2, #5
 800a38c:	6a3a      	ldr	r2, [r7, #32]
 800a38e:	440a      	add	r2, r1
 800a390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a394:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a398:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	015a      	lsls	r2, r3, #5
 800a39e:	6a3b      	ldr	r3, [r7, #32]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	7e7b      	ldrb	r3, [r7, #25]
 800a3aa:	075b      	lsls	r3, r3, #29
 800a3ac:	69f9      	ldr	r1, [r7, #28]
 800a3ae:	0148      	lsls	r0, r1, #5
 800a3b0:	6a39      	ldr	r1, [r7, #32]
 800a3b2:	4401      	add	r1, r0
 800a3b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	015a      	lsls	r2, r3, #5
 800a3c0:	6a3b      	ldr	r3, [r7, #32]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a3d2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	78db      	ldrb	r3, [r3, #3]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d004      	beq.n	800a3e6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3e2:	613b      	str	r3, [r7, #16]
 800a3e4:	e003      	b.n	800a3ee <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a3ec:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a3f4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	015a      	lsls	r2, r3, #5
 800a3fa:	6a3b      	ldr	r3, [r7, #32]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a402:	461a      	mov	r2, r3
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a408:	79fb      	ldrb	r3, [r7, #7]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d001      	beq.n	800a412 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a40e:	2300      	movs	r3, #0
 800a410:	e04e      	b.n	800a4b0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	78db      	ldrb	r3, [r3, #3]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d149      	bne.n	800a4ae <USB_HC_StartXfer+0x276>
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	695b      	ldr	r3, [r3, #20]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d045      	beq.n	800a4ae <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	79db      	ldrb	r3, [r3, #7]
 800a426:	2b03      	cmp	r3, #3
 800a428:	d830      	bhi.n	800a48c <USB_HC_StartXfer+0x254>
 800a42a:	a201      	add	r2, pc, #4	; (adr r2, 800a430 <USB_HC_StartXfer+0x1f8>)
 800a42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a430:	0800a441 	.word	0x0800a441
 800a434:	0800a465 	.word	0x0800a465
 800a438:	0800a441 	.word	0x0800a441
 800a43c:	0800a465 	.word	0x0800a465
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	695b      	ldr	r3, [r3, #20]
 800a444:	3303      	adds	r3, #3
 800a446:	089b      	lsrs	r3, r3, #2
 800a448:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a44a:	8afa      	ldrh	r2, [r7, #22]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a450:	b29b      	uxth	r3, r3
 800a452:	429a      	cmp	r2, r3
 800a454:	d91c      	bls.n	800a490 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	f043 0220 	orr.w	r2, r3, #32
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	619a      	str	r2, [r3, #24]
        }
        break;
 800a462:	e015      	b.n	800a490 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	695b      	ldr	r3, [r3, #20]
 800a468:	3303      	adds	r3, #3
 800a46a:	089b      	lsrs	r3, r3, #2
 800a46c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a46e:	8afa      	ldrh	r2, [r7, #22]
 800a470:	6a3b      	ldr	r3, [r7, #32]
 800a472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	b29b      	uxth	r3, r3
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d90a      	bls.n	800a494 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	619a      	str	r2, [r3, #24]
        }
        break;
 800a48a:	e003      	b.n	800a494 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a48c:	bf00      	nop
 800a48e:	e002      	b.n	800a496 <USB_HC_StartXfer+0x25e>
        break;
 800a490:	bf00      	nop
 800a492:	e000      	b.n	800a496 <USB_HC_StartXfer+0x25e>
        break;
 800a494:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	68d9      	ldr	r1, [r3, #12]
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	785a      	ldrb	r2, [r3, #1]
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	695b      	ldr	r3, [r3, #20]
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	9000      	str	r0, [sp, #0]
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f7ff fb31 	bl	8009b10 <USB_WritePacket>
  }

  return HAL_OK;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3728      	adds	r7, #40	; 0x28
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	1ff80000 	.word	0x1ff80000

0800a4bc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b085      	sub	sp, #20
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4ce:	695b      	ldr	r3, [r3, #20]
 800a4d0:	b29b      	uxth	r3, r3
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3714      	adds	r7, #20
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr

0800a4de <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b089      	sub	sp, #36	; 0x24
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a4ee:	78fb      	ldrb	r3, [r7, #3]
 800a4f0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	015a      	lsls	r2, r3, #5
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	0c9b      	lsrs	r3, r3, #18
 800a506:	f003 0303 	and.w	r3, r3, #3
 800a50a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	015a      	lsls	r2, r3, #5
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	4413      	add	r3, r2
 800a514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	0fdb      	lsrs	r3, r3, #31
 800a51c:	f003 0301 	and.w	r3, r3, #1
 800a520:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	f003 0320 	and.w	r3, r3, #32
 800a52a:	2b20      	cmp	r3, #32
 800a52c:	d104      	bne.n	800a538 <USB_HC_Halt+0x5a>
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800a534:	2300      	movs	r3, #0
 800a536:	e0c8      	b.n	800a6ca <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d002      	beq.n	800a544 <USB_HC_Halt+0x66>
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	2b02      	cmp	r3, #2
 800a542:	d163      	bne.n	800a60c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	015a      	lsls	r2, r3, #5
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	4413      	add	r3, r2
 800a54c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	69ba      	ldr	r2, [r7, #24]
 800a554:	0151      	lsls	r1, r2, #5
 800a556:	69fa      	ldr	r2, [r7, #28]
 800a558:	440a      	add	r2, r1
 800a55a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a55e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a562:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	f003 0320 	and.w	r3, r3, #32
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f040 80ab 	bne.w	800a6c8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a576:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d133      	bne.n	800a5e6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	015a      	lsls	r2, r3, #5
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	4413      	add	r3, r2
 800a586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	69ba      	ldr	r2, [r7, #24]
 800a58e:	0151      	lsls	r1, r2, #5
 800a590:	69fa      	ldr	r2, [r7, #28]
 800a592:	440a      	add	r2, r1
 800a594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a598:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a59c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	015a      	lsls	r2, r3, #5
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	69ba      	ldr	r2, [r7, #24]
 800a5ae:	0151      	lsls	r1, r2, #5
 800a5b0:	69fa      	ldr	r2, [r7, #28]
 800a5b2:	440a      	add	r2, r1
 800a5b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5bc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5ca:	d81d      	bhi.n	800a608 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	015a      	lsls	r2, r3, #5
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5e2:	d0ec      	beq.n	800a5be <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a5e4:	e070      	b.n	800a6c8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a5e6:	69bb      	ldr	r3, [r7, #24]
 800a5e8:	015a      	lsls	r2, r3, #5
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	69ba      	ldr	r2, [r7, #24]
 800a5f6:	0151      	lsls	r1, r2, #5
 800a5f8:	69fa      	ldr	r2, [r7, #28]
 800a5fa:	440a      	add	r2, r1
 800a5fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a600:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a604:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a606:	e05f      	b.n	800a6c8 <USB_HC_Halt+0x1ea>
            break;
 800a608:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a60a:	e05d      	b.n	800a6c8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	015a      	lsls	r2, r3, #5
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	4413      	add	r3, r2
 800a614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	69ba      	ldr	r2, [r7, #24]
 800a61c:	0151      	lsls	r1, r2, #5
 800a61e:	69fa      	ldr	r2, [r7, #28]
 800a620:	440a      	add	r2, r1
 800a622:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a626:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a62a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d133      	bne.n	800a6a4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	015a      	lsls	r2, r3, #5
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	4413      	add	r3, r2
 800a644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	69ba      	ldr	r2, [r7, #24]
 800a64c:	0151      	lsls	r1, r2, #5
 800a64e:	69fa      	ldr	r2, [r7, #28]
 800a650:	440a      	add	r2, r1
 800a652:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a65a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	015a      	lsls	r2, r3, #5
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	4413      	add	r3, r2
 800a664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	69ba      	ldr	r2, [r7, #24]
 800a66c:	0151      	lsls	r1, r2, #5
 800a66e:	69fa      	ldr	r2, [r7, #28]
 800a670:	440a      	add	r2, r1
 800a672:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a676:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a67a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	3301      	adds	r3, #1
 800a680:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a688:	d81d      	bhi.n	800a6c6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	015a      	lsls	r2, r3, #5
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	4413      	add	r3, r2
 800a692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a69c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6a0:	d0ec      	beq.n	800a67c <USB_HC_Halt+0x19e>
 800a6a2:	e011      	b.n	800a6c8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	015a      	lsls	r2, r3, #5
 800a6a8:	69fb      	ldr	r3, [r7, #28]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	69ba      	ldr	r2, [r7, #24]
 800a6b4:	0151      	lsls	r1, r2, #5
 800a6b6:	69fa      	ldr	r2, [r7, #28]
 800a6b8:	440a      	add	r2, r1
 800a6ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a6c2:	6013      	str	r3, [r2, #0]
 800a6c4:	e000      	b.n	800a6c8 <USB_HC_Halt+0x1ea>
          break;
 800a6c6:	bf00      	nop
    }
  }

  return HAL_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3724      	adds	r7, #36	; 0x24
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr
	...

0800a6d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b087      	sub	sp, #28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a6e8:	78fb      	ldrb	r3, [r7, #3]
 800a6ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	04da      	lsls	r2, r3, #19
 800a6f4:	4b15      	ldr	r3, [pc, #84]	; (800a74c <USB_DoPing+0x74>)
 800a6f6:	4013      	ands	r3, r2
 800a6f8:	693a      	ldr	r2, [r7, #16]
 800a6fa:	0151      	lsls	r1, r2, #5
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	440a      	add	r2, r1
 800a700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a704:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a708:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	015a      	lsls	r2, r3, #5
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	4413      	add	r3, r2
 800a712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a720:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a728:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	015a      	lsls	r2, r3, #5
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	4413      	add	r3, r2
 800a732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a736:	461a      	mov	r2, r3
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	371c      	adds	r7, #28
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	1ff80000 	.word	0x1ff80000

0800a750 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b088      	sub	sp, #32
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a758:	2300      	movs	r3, #0
 800a75a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a760:	2300      	movs	r3, #0
 800a762:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7ff f911 	bl	800998c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a76a:	2110      	movs	r1, #16
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f7ff f96b 	bl	8009a48 <USB_FlushTxFifo>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d001      	beq.n	800a77c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f7ff f997 	bl	8009ab0 <USB_FlushRxFifo>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d001      	beq.n	800a78c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a788:	2301      	movs	r3, #1
 800a78a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a78c:	2300      	movs	r3, #0
 800a78e:	61bb      	str	r3, [r7, #24]
 800a790:	e01f      	b.n	800a7d2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	015a      	lsls	r2, r3, #5
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	4413      	add	r3, r2
 800a79a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a7b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	015a      	lsls	r2, r3, #5
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	61bb      	str	r3, [r7, #24]
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	2b0f      	cmp	r3, #15
 800a7d6:	d9dc      	bls.n	800a792 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a7d8:	2300      	movs	r3, #0
 800a7da:	61bb      	str	r3, [r7, #24]
 800a7dc:	e034      	b.n	800a848 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	015a      	lsls	r2, r3, #5
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a7fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a804:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	015a      	lsls	r2, r3, #5
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	4413      	add	r3, r2
 800a80e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a812:	461a      	mov	r2, r3
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	3301      	adds	r3, #1
 800a81c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a824:	d80c      	bhi.n	800a840 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a826:	69bb      	ldr	r3, [r7, #24]
 800a828:	015a      	lsls	r2, r3, #5
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	4413      	add	r3, r2
 800a82e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a838:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a83c:	d0ec      	beq.n	800a818 <USB_StopHost+0xc8>
 800a83e:	e000      	b.n	800a842 <USB_StopHost+0xf2>
        break;
 800a840:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	3301      	adds	r3, #1
 800a846:	61bb      	str	r3, [r7, #24]
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	2b0f      	cmp	r3, #15
 800a84c:	d9c7      	bls.n	800a7de <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a854:	461a      	mov	r2, r3
 800a856:	f04f 33ff 	mov.w	r3, #4294967295
 800a85a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f04f 32ff 	mov.w	r2, #4294967295
 800a862:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f7ff f880 	bl	800996a <USB_EnableGlobalInt>

  return ret;
 800a86a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3720      	adds	r7, #32
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800a878:	4904      	ldr	r1, [pc, #16]	; (800a88c <MX_FATFS_Init+0x18>)
 800a87a:	4805      	ldr	r0, [pc, #20]	; (800a890 <MX_FATFS_Init+0x1c>)
 800a87c:	f006 fb36 	bl	8010eec <FATFS_LinkDriver>
 800a880:	4603      	mov	r3, r0
 800a882:	461a      	mov	r2, r3
 800a884:	4b03      	ldr	r3, [pc, #12]	; (800a894 <MX_FATFS_Init+0x20>)
 800a886:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a888:	bf00      	nop
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	20002080 	.word	0x20002080
 800a890:	080130d8 	.word	0x080130d8
 800a894:	2000207c 	.word	0x2000207c

0800a898 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a898:	b480      	push	{r7}
 800a89a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a89c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800a8ce:	79fb      	ldrb	r3, [r7, #7]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	4808      	ldr	r0, [pc, #32]	; (800a8f4 <USBH_status+0x34>)
 800a8d4:	f000 fe32 	bl	800b53c <USBH_MSC_UnitIsReady>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d002      	beq.n	800a8e4 <USBH_status+0x24>
  {
    res = RES_OK;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	73fb      	strb	r3, [r7, #15]
 800a8e2:	e001      	b.n	800a8e8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	200024ec 	.word	0x200024ec

0800a8f8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b094      	sub	sp, #80	; 0x50
 800a8fc:	af02      	add	r7, sp, #8
 800a8fe:	60b9      	str	r1, [r7, #8]
 800a900:	607a      	str	r2, [r7, #4]
 800a902:	603b      	str	r3, [r7, #0]
 800a904:	4603      	mov	r3, r0
 800a906:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800a90e:	7bf9      	ldrb	r1, [r7, #15]
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	4813      	ldr	r0, [pc, #76]	; (800a968 <USBH_read+0x70>)
 800a91a:	f000 fe59 	bl	800b5d0 <USBH_MSC_Read>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d103      	bne.n	800a92c <USBH_read+0x34>
  {
    res = RES_OK;
 800a924:	2300      	movs	r3, #0
 800a926:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a92a:	e017      	b.n	800a95c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a92c:	f107 0210 	add.w	r2, r7, #16
 800a930:	7bfb      	ldrb	r3, [r7, #15]
 800a932:	4619      	mov	r1, r3
 800a934:	480c      	ldr	r0, [pc, #48]	; (800a968 <USBH_read+0x70>)
 800a936:	f000 fe27 	bl	800b588 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a93a:	7f7b      	ldrb	r3, [r7, #29]
 800a93c:	2b3a      	cmp	r3, #58	; 0x3a
 800a93e:	d005      	beq.n	800a94c <USBH_read+0x54>
 800a940:	2b3a      	cmp	r3, #58	; 0x3a
 800a942:	dc07      	bgt.n	800a954 <USBH_read+0x5c>
 800a944:	2b04      	cmp	r3, #4
 800a946:	d001      	beq.n	800a94c <USBH_read+0x54>
 800a948:	2b28      	cmp	r3, #40	; 0x28
 800a94a:	d103      	bne.n	800a954 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a94c:	2303      	movs	r3, #3
 800a94e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a952:	e003      	b.n	800a95c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800a954:	2301      	movs	r3, #1
 800a956:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a95a:	bf00      	nop
    }
  }

  return res;
 800a95c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a960:	4618      	mov	r0, r3
 800a962:	3748      	adds	r7, #72	; 0x48
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	200024ec 	.word	0x200024ec

0800a96c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b094      	sub	sp, #80	; 0x50
 800a970:	af02      	add	r7, sp, #8
 800a972:	60b9      	str	r1, [r7, #8]
 800a974:	607a      	str	r2, [r7, #4]
 800a976:	603b      	str	r3, [r7, #0]
 800a978:	4603      	mov	r3, r0
 800a97a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a97c:	2301      	movs	r3, #1
 800a97e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800a982:	7bf9      	ldrb	r1, [r7, #15]
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	9300      	str	r3, [sp, #0]
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	4817      	ldr	r0, [pc, #92]	; (800a9ec <USBH_write+0x80>)
 800a98e:	f000 fe88 	bl	800b6a2 <USBH_MSC_Write>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d103      	bne.n	800a9a0 <USBH_write+0x34>
  {
    res = RES_OK;
 800a998:	2300      	movs	r3, #0
 800a99a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a99e:	e01f      	b.n	800a9e0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a9a0:	f107 0210 	add.w	r2, r7, #16
 800a9a4:	7bfb      	ldrb	r3, [r7, #15]
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	4810      	ldr	r0, [pc, #64]	; (800a9ec <USBH_write+0x80>)
 800a9aa:	f000 fded 	bl	800b588 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a9ae:	7f7b      	ldrb	r3, [r7, #29]
 800a9b0:	2b3a      	cmp	r3, #58	; 0x3a
 800a9b2:	d00d      	beq.n	800a9d0 <USBH_write+0x64>
 800a9b4:	2b3a      	cmp	r3, #58	; 0x3a
 800a9b6:	dc0f      	bgt.n	800a9d8 <USBH_write+0x6c>
 800a9b8:	2b28      	cmp	r3, #40	; 0x28
 800a9ba:	d009      	beq.n	800a9d0 <USBH_write+0x64>
 800a9bc:	2b28      	cmp	r3, #40	; 0x28
 800a9be:	dc0b      	bgt.n	800a9d8 <USBH_write+0x6c>
 800a9c0:	2b04      	cmp	r3, #4
 800a9c2:	d005      	beq.n	800a9d0 <USBH_write+0x64>
 800a9c4:	2b27      	cmp	r3, #39	; 0x27
 800a9c6:	d107      	bne.n	800a9d8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a9ce:	e007      	b.n	800a9e0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a9d6:	e003      	b.n	800a9e0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a9de:	bf00      	nop
    }
  }

  return res;
 800a9e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3748      	adds	r7, #72	; 0x48
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	200024ec 	.word	0x200024ec

0800a9f0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b090      	sub	sp, #64	; 0x40
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	603a      	str	r2, [r7, #0]
 800a9fa:	71fb      	strb	r3, [r7, #7]
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800aa00:	2301      	movs	r3, #1
 800aa02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800aa06:	79bb      	ldrb	r3, [r7, #6]
 800aa08:	2b03      	cmp	r3, #3
 800aa0a:	d852      	bhi.n	800aab2 <USBH_ioctl+0xc2>
 800aa0c:	a201      	add	r2, pc, #4	; (adr r2, 800aa14 <USBH_ioctl+0x24>)
 800aa0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa12:	bf00      	nop
 800aa14:	0800aa25 	.word	0x0800aa25
 800aa18:	0800aa2d 	.word	0x0800aa2d
 800aa1c:	0800aa57 	.word	0x0800aa57
 800aa20:	0800aa83 	.word	0x0800aa83
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800aa24:	2300      	movs	r3, #0
 800aa26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800aa2a:	e045      	b.n	800aab8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800aa2c:	f107 0208 	add.w	r2, r7, #8
 800aa30:	79fb      	ldrb	r3, [r7, #7]
 800aa32:	4619      	mov	r1, r3
 800aa34:	4823      	ldr	r0, [pc, #140]	; (800aac4 <USBH_ioctl+0xd4>)
 800aa36:	f000 fda7 	bl	800b588 <USBH_MSC_GetLUNInfo>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d106      	bne.n	800aa4e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800aa46:	2300      	movs	r3, #0
 800aa48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800aa4c:	e034      	b.n	800aab8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800aa54:	e030      	b.n	800aab8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800aa56:	f107 0208 	add.w	r2, r7, #8
 800aa5a:	79fb      	ldrb	r3, [r7, #7]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	4819      	ldr	r0, [pc, #100]	; (800aac4 <USBH_ioctl+0xd4>)
 800aa60:	f000 fd92 	bl	800b588 <USBH_MSC_GetLUNInfo>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d107      	bne.n	800aa7a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800aa6a:	8a3b      	ldrh	r3, [r7, #16]
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800aa72:	2300      	movs	r3, #0
 800aa74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800aa78:	e01e      	b.n	800aab8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800aa80:	e01a      	b.n	800aab8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800aa82:	f107 0208 	add.w	r2, r7, #8
 800aa86:	79fb      	ldrb	r3, [r7, #7]
 800aa88:	4619      	mov	r1, r3
 800aa8a:	480e      	ldr	r0, [pc, #56]	; (800aac4 <USBH_ioctl+0xd4>)
 800aa8c:	f000 fd7c 	bl	800b588 <USBH_MSC_GetLUNInfo>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d109      	bne.n	800aaaa <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800aa96:	8a3b      	ldrh	r3, [r7, #16]
 800aa98:	0a5b      	lsrs	r3, r3, #9
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800aaa8:	e006      	b.n	800aab8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800aab0:	e002      	b.n	800aab8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800aab2:	2304      	movs	r3, #4
 800aab4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800aab8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3740      	adds	r7, #64	; 0x40
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	200024ec 	.word	0x200024ec

0800aac8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800aac8:	b590      	push	{r4, r7, lr}
 800aaca:	b089      	sub	sp, #36	; 0x24
 800aacc:	af04      	add	r7, sp, #16
 800aace:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aad6:	7919      	ldrb	r1, [r3, #4]
 800aad8:	2350      	movs	r3, #80	; 0x50
 800aada:	2206      	movs	r2, #6
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f001 fc6b 	bl	800c3b8 <USBH_FindInterface>
 800aae2:	4603      	mov	r3, r0
 800aae4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800aae6:	7bfb      	ldrb	r3, [r7, #15]
 800aae8:	2bff      	cmp	r3, #255	; 0xff
 800aaea:	d002      	beq.n	800aaf2 <USBH_MSC_InterfaceInit+0x2a>
 800aaec:	7bfb      	ldrb	r3, [r7, #15]
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d901      	bls.n	800aaf6 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800aaf2:	2302      	movs	r3, #2
 800aaf4:	e106      	b.n	800ad04 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800aaf6:	7bfb      	ldrb	r3, [r7, #15]
 800aaf8:	4619      	mov	r1, r3
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f001 fc40 	bl	800c380 <USBH_SelectInterface>
 800ab00:	4603      	mov	r3, r0
 800ab02:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ab04:	7bbb      	ldrb	r3, [r7, #14]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d001      	beq.n	800ab0e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	e0fa      	b.n	800ad04 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800ab14:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ab18:	f006 fdf6 	bl	8011708 <malloc>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab26:	69db      	ldr	r3, [r3, #28]
 800ab28:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d101      	bne.n	800ab34 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800ab30:	2302      	movs	r3, #2
 800ab32:	e0e7      	b.n	800ad04 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800ab34:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab38:	2100      	movs	r1, #0
 800ab3a:	68b8      	ldr	r0, [r7, #8]
 800ab3c:	f006 fea0 	bl	8011880 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	211a      	movs	r1, #26
 800ab46:	fb01 f303 	mul.w	r3, r1, r3
 800ab4a:	4413      	add	r3, r2
 800ab4c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	b25b      	sxtb	r3, r3
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	da16      	bge.n	800ab86 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800ab58:	7bfb      	ldrb	r3, [r7, #15]
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	211a      	movs	r1, #26
 800ab5e:	fb01 f303 	mul.w	r3, r1, r3
 800ab62:	4413      	add	r3, r2
 800ab64:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ab68:	781a      	ldrb	r2, [r3, #0]
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ab6e:	7bfb      	ldrb	r3, [r7, #15]
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	211a      	movs	r1, #26
 800ab74:	fb01 f303 	mul.w	r3, r1, r3
 800ab78:	4413      	add	r3, r2
 800ab7a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ab7e:	881a      	ldrh	r2, [r3, #0]
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	815a      	strh	r2, [r3, #10]
 800ab84:	e015      	b.n	800abb2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800ab86:	7bfb      	ldrb	r3, [r7, #15]
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	211a      	movs	r1, #26
 800ab8c:	fb01 f303 	mul.w	r3, r1, r3
 800ab90:	4413      	add	r3, r2
 800ab92:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ab96:	781a      	ldrb	r2, [r3, #0]
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	211a      	movs	r1, #26
 800aba2:	fb01 f303 	mul.w	r3, r1, r3
 800aba6:	4413      	add	r3, r2
 800aba8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800abac:	881a      	ldrh	r2, [r3, #0]
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800abb2:	7bfb      	ldrb	r3, [r7, #15]
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	211a      	movs	r1, #26
 800abb8:	fb01 f303 	mul.w	r3, r1, r3
 800abbc:	4413      	add	r3, r2
 800abbe:	f203 3356 	addw	r3, r3, #854	; 0x356
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	b25b      	sxtb	r3, r3
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	da16      	bge.n	800abf8 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800abca:	7bfb      	ldrb	r3, [r7, #15]
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	211a      	movs	r1, #26
 800abd0:	fb01 f303 	mul.w	r3, r1, r3
 800abd4:	4413      	add	r3, r2
 800abd6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800abda:	781a      	ldrb	r2, [r3, #0]
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800abe0:	7bfb      	ldrb	r3, [r7, #15]
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	211a      	movs	r1, #26
 800abe6:	fb01 f303 	mul.w	r3, r1, r3
 800abea:	4413      	add	r3, r2
 800abec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800abf0:	881a      	ldrh	r2, [r3, #0]
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	815a      	strh	r2, [r3, #10]
 800abf6:	e015      	b.n	800ac24 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800abf8:	7bfb      	ldrb	r3, [r7, #15]
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	211a      	movs	r1, #26
 800abfe:	fb01 f303 	mul.w	r3, r1, r3
 800ac02:	4413      	add	r3, r2
 800ac04:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ac08:	781a      	ldrb	r2, [r3, #0]
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ac0e:	7bfb      	ldrb	r3, [r7, #15]
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	211a      	movs	r1, #26
 800ac14:	fb01 f303 	mul.w	r3, r1, r3
 800ac18:	4413      	add	r3, r2
 800ac1a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ac1e:	881a      	ldrh	r2, [r3, #0]
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	2200      	movs	r2, #0
 800ac28:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	2200      	movs	r2, #0
 800ac34:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	799b      	ldrb	r3, [r3, #6]
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f002 fed8 	bl	800d9f2 <USBH_AllocPipe>
 800ac42:	4603      	mov	r3, r0
 800ac44:	461a      	mov	r2, r3
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	79db      	ldrb	r3, [r3, #7]
 800ac4e:	4619      	mov	r1, r3
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f002 fece 	bl	800d9f2 <USBH_AllocPipe>
 800ac56:	4603      	mov	r3, r0
 800ac58:	461a      	mov	r2, r3
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fdc4 	bl	800b7ec <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	799b      	ldrb	r3, [r3, #6]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d01e      	beq.n	800acaa <USBH_MSC_InterfaceInit+0x1e2>
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	891b      	ldrh	r3, [r3, #8]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d01a      	beq.n	800acaa <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	7959      	ldrb	r1, [r3, #5]
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	7998      	ldrb	r0, [r3, #6]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ac88:	68ba      	ldr	r2, [r7, #8]
 800ac8a:	8912      	ldrh	r2, [r2, #8]
 800ac8c:	9202      	str	r2, [sp, #8]
 800ac8e:	2202      	movs	r2, #2
 800ac90:	9201      	str	r2, [sp, #4]
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	4623      	mov	r3, r4
 800ac96:	4602      	mov	r2, r0
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f002 fe7b 	bl	800d994 <USBH_OpenPipe>
 800ac9e:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	79db      	ldrb	r3, [r3, #7]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d02c      	beq.n	800ad02 <USBH_MSC_InterfaceInit+0x23a>
 800aca8:	e001      	b.n	800acae <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800acaa:	2303      	movs	r3, #3
 800acac:	e02a      	b.n	800ad04 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	895b      	ldrh	r3, [r3, #10]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d025      	beq.n	800ad02 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	7919      	ldrb	r1, [r3, #4]
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	79d8      	ldrb	r0, [r3, #7]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800acca:	68ba      	ldr	r2, [r7, #8]
 800accc:	8952      	ldrh	r2, [r2, #10]
 800acce:	9202      	str	r2, [sp, #8]
 800acd0:	2202      	movs	r2, #2
 800acd2:	9201      	str	r2, [sp, #4]
 800acd4:	9300      	str	r3, [sp, #0]
 800acd6:	4623      	mov	r3, r4
 800acd8:	4602      	mov	r2, r0
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f002 fe5a 	bl	800d994 <USBH_OpenPipe>
 800ace0:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	791b      	ldrb	r3, [r3, #4]
 800ace6:	2200      	movs	r2, #0
 800ace8:	4619      	mov	r1, r3
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f006 fc58 	bl	80115a0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	795b      	ldrb	r3, [r3, #5]
 800acf4:	2200      	movs	r2, #0
 800acf6:	4619      	mov	r1, r3
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f006 fc51 	bl	80115a0 <USBH_LL_SetToggle>

  return USBH_OK;
 800acfe:	2300      	movs	r3, #0
 800ad00:	e000      	b.n	800ad04 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800ad02:	2303      	movs	r3, #3
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3714      	adds	r7, #20
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd90      	pop	{r4, r7, pc}

0800ad0c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad1a:	69db      	ldr	r3, [r3, #28]
 800ad1c:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	795b      	ldrb	r3, [r3, #5]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00e      	beq.n	800ad44 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	795b      	ldrb	r3, [r3, #5]
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f002 fe50 	bl	800d9d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	795b      	ldrb	r3, [r3, #5]
 800ad36:	4619      	mov	r1, r3
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f002 fe7b 	bl	800da34 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2200      	movs	r2, #0
 800ad42:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	791b      	ldrb	r3, [r3, #4]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00e      	beq.n	800ad6a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	791b      	ldrb	r3, [r3, #4]
 800ad50:	4619      	mov	r1, r3
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f002 fe3d 	bl	800d9d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	791b      	ldrb	r3, [r3, #4]
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f002 fe68 	bl	800da34 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2200      	movs	r2, #0
 800ad68:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad70:	69db      	ldr	r3, [r3, #28]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00b      	beq.n	800ad8e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad7c:	69db      	ldr	r3, [r3, #28]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f006 fcca 	bl	8011718 <free>
    phost->pActiveClass->pData = 0U;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3710      	adds	r7, #16
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ada6:	69db      	ldr	r3, [r3, #28]
 800ada8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800adaa:	2301      	movs	r3, #1
 800adac:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	7b9b      	ldrb	r3, [r3, #14]
 800adb2:	2b03      	cmp	r3, #3
 800adb4:	d041      	beq.n	800ae3a <USBH_MSC_ClassRequest+0xa2>
 800adb6:	2b03      	cmp	r3, #3
 800adb8:	dc4b      	bgt.n	800ae52 <USBH_MSC_ClassRequest+0xba>
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d001      	beq.n	800adc2 <USBH_MSC_ClassRequest+0x2a>
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d147      	bne.n	800ae52 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	4619      	mov	r1, r3
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fcf1 	bl	800b7ae <USBH_MSC_BOT_REQ_GetMaxLUN>
 800adcc:	4603      	mov	r3, r0
 800adce:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800add0:	7bfb      	ldrb	r3, [r7, #15]
 800add2:	2b03      	cmp	r3, #3
 800add4:	d104      	bne.n	800ade0 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	2200      	movs	r2, #0
 800adda:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800addc:	2300      	movs	r3, #0
 800adde:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d137      	bne.n	800ae56 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	2b02      	cmp	r3, #2
 800adec:	d804      	bhi.n	800adf8 <USBH_MSC_ClassRequest+0x60>
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	3301      	adds	r3, #1
 800adf4:	b2da      	uxtb	r2, r3
 800adf6:	e000      	b.n	800adfa <USBH_MSC_ClassRequest+0x62>
 800adf8:	2202      	movs	r2, #2
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800adfe:	2300      	movs	r3, #0
 800ae00:	73bb      	strb	r3, [r7, #14]
 800ae02:	e014      	b.n	800ae2e <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800ae04:	7bbb      	ldrb	r3, [r7, #14]
 800ae06:	68ba      	ldr	r2, [r7, #8]
 800ae08:	2134      	movs	r1, #52	; 0x34
 800ae0a:	fb01 f303 	mul.w	r3, r1, r3
 800ae0e:	4413      	add	r3, r2
 800ae10:	3392      	adds	r3, #146	; 0x92
 800ae12:	2202      	movs	r2, #2
 800ae14:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800ae16:	7bbb      	ldrb	r3, [r7, #14]
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	2134      	movs	r1, #52	; 0x34
 800ae1c:	fb01 f303 	mul.w	r3, r1, r3
 800ae20:	4413      	add	r3, r2
 800ae22:	33c1      	adds	r3, #193	; 0xc1
 800ae24:	2200      	movs	r2, #0
 800ae26:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800ae28:	7bbb      	ldrb	r3, [r7, #14]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	73bb      	strb	r3, [r7, #14]
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	7bba      	ldrb	r2, [r7, #14]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d3e5      	bcc.n	800ae04 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800ae38:	e00d      	b.n	800ae56 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f002 f888 	bl	800cf52 <USBH_ClrFeature>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d108      	bne.n	800ae5a <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	7bda      	ldrb	r2, [r3, #15]
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	739a      	strb	r2, [r3, #14]
      }
      break;
 800ae50:	e003      	b.n	800ae5a <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800ae52:	bf00      	nop
 800ae54:	e002      	b.n	800ae5c <USBH_MSC_ClassRequest+0xc4>
      break;
 800ae56:	bf00      	nop
 800ae58:	e000      	b.n	800ae5c <USBH_MSC_ClassRequest+0xc4>
      break;
 800ae5a:	bf00      	nop
  }

  return status;
 800ae5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3710      	adds	r7, #16
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
	...

0800ae68 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b086      	sub	sp, #24
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae76:	69db      	ldr	r3, [r3, #28]
 800ae78:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800ae82:	2301      	movs	r3, #1
 800ae84:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	7b1b      	ldrb	r3, [r3, #12]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d003      	beq.n	800ae96 <USBH_MSC_Process+0x2e>
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	f000 8271 	beq.w	800b376 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800ae94:	e272      	b.n	800b37c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	429a      	cmp	r2, r3
 800aea4:	f080 824f 	bcs.w	800b346 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aeae:	4619      	mov	r1, r3
 800aeb0:	693a      	ldr	r2, [r7, #16]
 800aeb2:	2334      	movs	r3, #52	; 0x34
 800aeb4:	fb01 f303 	mul.w	r3, r1, r3
 800aeb8:	4413      	add	r3, r2
 800aeba:	3391      	adds	r3, #145	; 0x91
 800aebc:	2201      	movs	r2, #1
 800aebe:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aec6:	4619      	mov	r1, r3
 800aec8:	693a      	ldr	r2, [r7, #16]
 800aeca:	2334      	movs	r3, #52	; 0x34
 800aecc:	fb01 f303 	mul.w	r3, r1, r3
 800aed0:	4413      	add	r3, r2
 800aed2:	3390      	adds	r3, #144	; 0x90
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	2b08      	cmp	r3, #8
 800aed8:	f200 8243 	bhi.w	800b362 <USBH_MSC_Process+0x4fa>
 800aedc:	a201      	add	r2, pc, #4	; (adr r2, 800aee4 <USBH_MSC_Process+0x7c>)
 800aede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee2:	bf00      	nop
 800aee4:	0800af09 	.word	0x0800af09
 800aee8:	0800b363 	.word	0x0800b363
 800aeec:	0800afd1 	.word	0x0800afd1
 800aef0:	0800b155 	.word	0x0800b155
 800aef4:	0800af2f 	.word	0x0800af2f
 800aef8:	0800b221 	.word	0x0800b221
 800aefc:	0800b363 	.word	0x0800b363
 800af00:	0800b363 	.word	0x0800b363
 800af04:	0800b335 	.word	0x0800b335
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af0e:	4619      	mov	r1, r3
 800af10:	693a      	ldr	r2, [r7, #16]
 800af12:	2334      	movs	r3, #52	; 0x34
 800af14:	fb01 f303 	mul.w	r3, r1, r3
 800af18:	4413      	add	r3, r2
 800af1a:	3390      	adds	r3, #144	; 0x90
 800af1c:	2204      	movs	r2, #4
 800af1e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800af2c:	e222      	b.n	800b374 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af34:	b2d9      	uxtb	r1, r3
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af3c:	461a      	mov	r2, r3
 800af3e:	2334      	movs	r3, #52	; 0x34
 800af40:	fb02 f303 	mul.w	r3, r2, r3
 800af44:	3398      	adds	r3, #152	; 0x98
 800af46:	693a      	ldr	r2, [r7, #16]
 800af48:	4413      	add	r3, r2
 800af4a:	3307      	adds	r3, #7
 800af4c:	461a      	mov	r2, r3
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 ff6a 	bl	800be28 <USBH_MSC_SCSI_Inquiry>
 800af54:	4603      	mov	r3, r0
 800af56:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800af58:	7bfb      	ldrb	r3, [r7, #15]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d10b      	bne.n	800af76 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af64:	4619      	mov	r1, r3
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	2334      	movs	r3, #52	; 0x34
 800af6a:	fb01 f303 	mul.w	r3, r1, r3
 800af6e:	4413      	add	r3, r2
 800af70:	3390      	adds	r3, #144	; 0x90
 800af72:	2202      	movs	r2, #2
 800af74:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800af76:	7bfb      	ldrb	r3, [r7, #15]
 800af78:	2b02      	cmp	r3, #2
 800af7a:	d10c      	bne.n	800af96 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af82:	4619      	mov	r1, r3
 800af84:	693a      	ldr	r2, [r7, #16]
 800af86:	2334      	movs	r3, #52	; 0x34
 800af88:	fb01 f303 	mul.w	r3, r1, r3
 800af8c:	4413      	add	r3, r2
 800af8e:	3390      	adds	r3, #144	; 0x90
 800af90:	2205      	movs	r2, #5
 800af92:	701a      	strb	r2, [r3, #0]
            break;
 800af94:	e1e7      	b.n	800b366 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800af96:	7bfb      	ldrb	r3, [r7, #15]
 800af98:	2b04      	cmp	r3, #4
 800af9a:	f040 81e4 	bne.w	800b366 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afa4:	4619      	mov	r1, r3
 800afa6:	693a      	ldr	r2, [r7, #16]
 800afa8:	2334      	movs	r3, #52	; 0x34
 800afaa:	fb01 f303 	mul.w	r3, r1, r3
 800afae:	4413      	add	r3, r2
 800afb0:	3390      	adds	r3, #144	; 0x90
 800afb2:	2201      	movs	r2, #1
 800afb4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afbc:	4619      	mov	r1, r3
 800afbe:	693a      	ldr	r2, [r7, #16]
 800afc0:	2334      	movs	r3, #52	; 0x34
 800afc2:	fb01 f303 	mul.w	r3, r1, r3
 800afc6:	4413      	add	r3, r2
 800afc8:	3391      	adds	r3, #145	; 0x91
 800afca:	2202      	movs	r2, #2
 800afcc:	701a      	strb	r2, [r3, #0]
            break;
 800afce:	e1ca      	b.n	800b366 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	4619      	mov	r1, r3
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 fe66 	bl	800bcac <USBH_MSC_SCSI_TestUnitReady>
 800afe0:	4603      	mov	r3, r0
 800afe2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800afe4:	7bbb      	ldrb	r3, [r7, #14]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d149      	bne.n	800b07e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aff0:	4619      	mov	r1, r3
 800aff2:	693a      	ldr	r2, [r7, #16]
 800aff4:	2334      	movs	r3, #52	; 0x34
 800aff6:	fb01 f303 	mul.w	r3, r1, r3
 800affa:	4413      	add	r3, r2
 800affc:	3392      	adds	r3, #146	; 0x92
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00c      	beq.n	800b01e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b00a:	4619      	mov	r1, r3
 800b00c:	693a      	ldr	r2, [r7, #16]
 800b00e:	2334      	movs	r3, #52	; 0x34
 800b010:	fb01 f303 	mul.w	r3, r1, r3
 800b014:	4413      	add	r3, r2
 800b016:	33c1      	adds	r3, #193	; 0xc1
 800b018:	2201      	movs	r2, #1
 800b01a:	701a      	strb	r2, [r3, #0]
 800b01c:	e00b      	b.n	800b036 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b024:	4619      	mov	r1, r3
 800b026:	693a      	ldr	r2, [r7, #16]
 800b028:	2334      	movs	r3, #52	; 0x34
 800b02a:	fb01 f303 	mul.w	r3, r1, r3
 800b02e:	4413      	add	r3, r2
 800b030:	33c1      	adds	r3, #193	; 0xc1
 800b032:	2200      	movs	r2, #0
 800b034:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b03c:	4619      	mov	r1, r3
 800b03e:	693a      	ldr	r2, [r7, #16]
 800b040:	2334      	movs	r3, #52	; 0x34
 800b042:	fb01 f303 	mul.w	r3, r1, r3
 800b046:	4413      	add	r3, r2
 800b048:	3390      	adds	r3, #144	; 0x90
 800b04a:	2203      	movs	r2, #3
 800b04c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b054:	4619      	mov	r1, r3
 800b056:	693a      	ldr	r2, [r7, #16]
 800b058:	2334      	movs	r3, #52	; 0x34
 800b05a:	fb01 f303 	mul.w	r3, r1, r3
 800b05e:	4413      	add	r3, r2
 800b060:	3391      	adds	r3, #145	; 0x91
 800b062:	2200      	movs	r2, #0
 800b064:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b06c:	4619      	mov	r1, r3
 800b06e:	693a      	ldr	r2, [r7, #16]
 800b070:	2334      	movs	r3, #52	; 0x34
 800b072:	fb01 f303 	mul.w	r3, r1, r3
 800b076:	4413      	add	r3, r2
 800b078:	3392      	adds	r3, #146	; 0x92
 800b07a:	2200      	movs	r2, #0
 800b07c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800b07e:	7bbb      	ldrb	r3, [r7, #14]
 800b080:	2b02      	cmp	r3, #2
 800b082:	d14a      	bne.n	800b11a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b08a:	4619      	mov	r1, r3
 800b08c:	693a      	ldr	r2, [r7, #16]
 800b08e:	2334      	movs	r3, #52	; 0x34
 800b090:	fb01 f303 	mul.w	r3, r1, r3
 800b094:	4413      	add	r3, r2
 800b096:	3392      	adds	r3, #146	; 0x92
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	d00c      	beq.n	800b0b8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	693a      	ldr	r2, [r7, #16]
 800b0a8:	2334      	movs	r3, #52	; 0x34
 800b0aa:	fb01 f303 	mul.w	r3, r1, r3
 800b0ae:	4413      	add	r3, r2
 800b0b0:	33c1      	adds	r3, #193	; 0xc1
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	701a      	strb	r2, [r3, #0]
 800b0b6:	e00b      	b.n	800b0d0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0be:	4619      	mov	r1, r3
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	2334      	movs	r3, #52	; 0x34
 800b0c4:	fb01 f303 	mul.w	r3, r1, r3
 800b0c8:	4413      	add	r3, r2
 800b0ca:	33c1      	adds	r3, #193	; 0xc1
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	693a      	ldr	r2, [r7, #16]
 800b0da:	2334      	movs	r3, #52	; 0x34
 800b0dc:	fb01 f303 	mul.w	r3, r1, r3
 800b0e0:	4413      	add	r3, r2
 800b0e2:	3390      	adds	r3, #144	; 0x90
 800b0e4:	2205      	movs	r2, #5
 800b0e6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	693a      	ldr	r2, [r7, #16]
 800b0f2:	2334      	movs	r3, #52	; 0x34
 800b0f4:	fb01 f303 	mul.w	r3, r1, r3
 800b0f8:	4413      	add	r3, r2
 800b0fa:	3391      	adds	r3, #145	; 0x91
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b106:	4619      	mov	r1, r3
 800b108:	693a      	ldr	r2, [r7, #16]
 800b10a:	2334      	movs	r3, #52	; 0x34
 800b10c:	fb01 f303 	mul.w	r3, r1, r3
 800b110:	4413      	add	r3, r2
 800b112:	3392      	adds	r3, #146	; 0x92
 800b114:	2202      	movs	r2, #2
 800b116:	701a      	strb	r2, [r3, #0]
            break;
 800b118:	e127      	b.n	800b36a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800b11a:	7bbb      	ldrb	r3, [r7, #14]
 800b11c:	2b04      	cmp	r3, #4
 800b11e:	f040 8124 	bne.w	800b36a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b128:	4619      	mov	r1, r3
 800b12a:	693a      	ldr	r2, [r7, #16]
 800b12c:	2334      	movs	r3, #52	; 0x34
 800b12e:	fb01 f303 	mul.w	r3, r1, r3
 800b132:	4413      	add	r3, r2
 800b134:	3390      	adds	r3, #144	; 0x90
 800b136:	2201      	movs	r2, #1
 800b138:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b140:	4619      	mov	r1, r3
 800b142:	693a      	ldr	r2, [r7, #16]
 800b144:	2334      	movs	r3, #52	; 0x34
 800b146:	fb01 f303 	mul.w	r3, r1, r3
 800b14a:	4413      	add	r3, r2
 800b14c:	3391      	adds	r3, #145	; 0x91
 800b14e:	2202      	movs	r2, #2
 800b150:	701a      	strb	r2, [r3, #0]
            break;
 800b152:	e10a      	b.n	800b36a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b15a:	b2d9      	uxtb	r1, r3
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b162:	461a      	mov	r2, r3
 800b164:	2334      	movs	r3, #52	; 0x34
 800b166:	fb02 f303 	mul.w	r3, r2, r3
 800b16a:	3390      	adds	r3, #144	; 0x90
 800b16c:	693a      	ldr	r2, [r7, #16]
 800b16e:	4413      	add	r3, r2
 800b170:	3304      	adds	r3, #4
 800b172:	461a      	mov	r2, r3
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 fddc 	bl	800bd32 <USBH_MSC_SCSI_ReadCapacity>
 800b17a:	4603      	mov	r3, r0
 800b17c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b17e:	7bfb      	ldrb	r3, [r7, #15]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d120      	bne.n	800b1c6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b18a:	4619      	mov	r1, r3
 800b18c:	693a      	ldr	r2, [r7, #16]
 800b18e:	2334      	movs	r3, #52	; 0x34
 800b190:	fb01 f303 	mul.w	r3, r1, r3
 800b194:	4413      	add	r3, r2
 800b196:	3390      	adds	r3, #144	; 0x90
 800b198:	2201      	movs	r2, #1
 800b19a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	693a      	ldr	r2, [r7, #16]
 800b1a6:	2334      	movs	r3, #52	; 0x34
 800b1a8:	fb01 f303 	mul.w	r3, r1, r3
 800b1ac:	4413      	add	r3, r2
 800b1ae:	3391      	adds	r3, #145	; 0x91
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b1c4:	e0d3      	b.n	800b36e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800b1c6:	7bfb      	ldrb	r3, [r7, #15]
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	d10c      	bne.n	800b1e6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	693a      	ldr	r2, [r7, #16]
 800b1d6:	2334      	movs	r3, #52	; 0x34
 800b1d8:	fb01 f303 	mul.w	r3, r1, r3
 800b1dc:	4413      	add	r3, r2
 800b1de:	3390      	adds	r3, #144	; 0x90
 800b1e0:	2205      	movs	r2, #5
 800b1e2:	701a      	strb	r2, [r3, #0]
            break;
 800b1e4:	e0c3      	b.n	800b36e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b1e6:	7bfb      	ldrb	r3, [r7, #15]
 800b1e8:	2b04      	cmp	r3, #4
 800b1ea:	f040 80c0 	bne.w	800b36e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	693a      	ldr	r2, [r7, #16]
 800b1f8:	2334      	movs	r3, #52	; 0x34
 800b1fa:	fb01 f303 	mul.w	r3, r1, r3
 800b1fe:	4413      	add	r3, r2
 800b200:	3390      	adds	r3, #144	; 0x90
 800b202:	2201      	movs	r2, #1
 800b204:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b20c:	4619      	mov	r1, r3
 800b20e:	693a      	ldr	r2, [r7, #16]
 800b210:	2334      	movs	r3, #52	; 0x34
 800b212:	fb01 f303 	mul.w	r3, r1, r3
 800b216:	4413      	add	r3, r2
 800b218:	3391      	adds	r3, #145	; 0x91
 800b21a:	2202      	movs	r2, #2
 800b21c:	701a      	strb	r2, [r3, #0]
            break;
 800b21e:	e0a6      	b.n	800b36e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b226:	b2d9      	uxtb	r1, r3
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b22e:	461a      	mov	r2, r3
 800b230:	2334      	movs	r3, #52	; 0x34
 800b232:	fb02 f303 	mul.w	r3, r2, r3
 800b236:	3398      	adds	r3, #152	; 0x98
 800b238:	693a      	ldr	r2, [r7, #16]
 800b23a:	4413      	add	r3, r2
 800b23c:	3304      	adds	r3, #4
 800b23e:	461a      	mov	r2, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 fe96 	bl	800bf72 <USBH_MSC_SCSI_RequestSense>
 800b246:	4603      	mov	r3, r0
 800b248:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b24a:	7bfb      	ldrb	r3, [r7, #15]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d145      	bne.n	800b2dc <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b256:	4619      	mov	r1, r3
 800b258:	693a      	ldr	r2, [r7, #16]
 800b25a:	2334      	movs	r3, #52	; 0x34
 800b25c:	fb01 f303 	mul.w	r3, r1, r3
 800b260:	4413      	add	r3, r2
 800b262:	339c      	adds	r3, #156	; 0x9c
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	2b06      	cmp	r3, #6
 800b268:	d00c      	beq.n	800b284 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b270:	4619      	mov	r1, r3
 800b272:	693a      	ldr	r2, [r7, #16]
 800b274:	2334      	movs	r3, #52	; 0x34
 800b276:	fb01 f303 	mul.w	r3, r1, r3
 800b27a:	4413      	add	r3, r2
 800b27c:	339c      	adds	r3, #156	; 0x9c
 800b27e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b280:	2b02      	cmp	r3, #2
 800b282:	d117      	bne.n	800b2b4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b290:	1ad3      	subs	r3, r2, r3
 800b292:	f242 720f 	movw	r2, #9999	; 0x270f
 800b296:	4293      	cmp	r3, r2
 800b298:	d80c      	bhi.n	800b2b4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	693a      	ldr	r2, [r7, #16]
 800b2a4:	2334      	movs	r3, #52	; 0x34
 800b2a6:	fb01 f303 	mul.w	r3, r1, r3
 800b2aa:	4413      	add	r3, r2
 800b2ac:	3390      	adds	r3, #144	; 0x90
 800b2ae:	2202      	movs	r2, #2
 800b2b0:	701a      	strb	r2, [r3, #0]
                  break;
 800b2b2:	e05f      	b.n	800b374 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	693a      	ldr	r2, [r7, #16]
 800b2be:	2334      	movs	r3, #52	; 0x34
 800b2c0:	fb01 f303 	mul.w	r3, r1, r3
 800b2c4:	4413      	add	r3, r2
 800b2c6:	3390      	adds	r3, #144	; 0x90
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	b29a      	uxth	r2, r3
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800b2dc:	7bfb      	ldrb	r3, [r7, #15]
 800b2de:	2b02      	cmp	r3, #2
 800b2e0:	d10c      	bne.n	800b2fc <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	693a      	ldr	r2, [r7, #16]
 800b2ec:	2334      	movs	r3, #52	; 0x34
 800b2ee:	fb01 f303 	mul.w	r3, r1, r3
 800b2f2:	4413      	add	r3, r2
 800b2f4:	3390      	adds	r3, #144	; 0x90
 800b2f6:	2208      	movs	r2, #8
 800b2f8:	701a      	strb	r2, [r3, #0]
            break;
 800b2fa:	e03a      	b.n	800b372 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b2fc:	7bfb      	ldrb	r3, [r7, #15]
 800b2fe:	2b04      	cmp	r3, #4
 800b300:	d137      	bne.n	800b372 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b308:	4619      	mov	r1, r3
 800b30a:	693a      	ldr	r2, [r7, #16]
 800b30c:	2334      	movs	r3, #52	; 0x34
 800b30e:	fb01 f303 	mul.w	r3, r1, r3
 800b312:	4413      	add	r3, r2
 800b314:	3390      	adds	r3, #144	; 0x90
 800b316:	2201      	movs	r2, #1
 800b318:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b320:	4619      	mov	r1, r3
 800b322:	693a      	ldr	r2, [r7, #16]
 800b324:	2334      	movs	r3, #52	; 0x34
 800b326:	fb01 f303 	mul.w	r3, r1, r3
 800b32a:	4413      	add	r3, r2
 800b32c:	3391      	adds	r3, #145	; 0x91
 800b32e:	2202      	movs	r2, #2
 800b330:	701a      	strb	r2, [r3, #0]
            break;
 800b332:	e01e      	b.n	800b372 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b33a:	3301      	adds	r3, #1
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b344:	e016      	b.n	800b374 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	2200      	movs	r2, #0
 800b34a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	2201      	movs	r2, #1
 800b352:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b35a:	2102      	movs	r1, #2
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	4798      	blx	r3
      break;
 800b360:	e00c      	b.n	800b37c <USBH_MSC_Process+0x514>
            break;
 800b362:	bf00      	nop
 800b364:	e00a      	b.n	800b37c <USBH_MSC_Process+0x514>
            break;
 800b366:	bf00      	nop
 800b368:	e008      	b.n	800b37c <USBH_MSC_Process+0x514>
            break;
 800b36a:	bf00      	nop
 800b36c:	e006      	b.n	800b37c <USBH_MSC_Process+0x514>
            break;
 800b36e:	bf00      	nop
 800b370:	e004      	b.n	800b37c <USBH_MSC_Process+0x514>
            break;
 800b372:	bf00      	nop
      break;
 800b374:	e002      	b.n	800b37c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	75fb      	strb	r3, [r7, #23]
      break;
 800b37a:	bf00      	nop
  }
  return error;
 800b37c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3718      	adds	r7, #24
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop

0800b388 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b390:	2300      	movs	r3, #0
}
 800b392:	4618      	mov	r0, r3
 800b394:	370c      	adds	r7, #12
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b088      	sub	sp, #32
 800b3a2:	af02      	add	r7, sp, #8
 800b3a4:	6078      	str	r0, [r7, #4]
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3b0:	69db      	ldr	r3, [r3, #28]
 800b3b2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800b3bc:	78fb      	ldrb	r3, [r7, #3]
 800b3be:	693a      	ldr	r2, [r7, #16]
 800b3c0:	2134      	movs	r1, #52	; 0x34
 800b3c2:	fb01 f303 	mul.w	r3, r1, r3
 800b3c6:	4413      	add	r3, r2
 800b3c8:	3390      	adds	r3, #144	; 0x90
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	2b07      	cmp	r3, #7
 800b3ce:	d03c      	beq.n	800b44a <USBH_MSC_RdWrProcess+0xac>
 800b3d0:	2b07      	cmp	r3, #7
 800b3d2:	f300 80a7 	bgt.w	800b524 <USBH_MSC_RdWrProcess+0x186>
 800b3d6:	2b05      	cmp	r3, #5
 800b3d8:	d06c      	beq.n	800b4b4 <USBH_MSC_RdWrProcess+0x116>
 800b3da:	2b06      	cmp	r3, #6
 800b3dc:	f040 80a2 	bne.w	800b524 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800b3e0:	78f9      	ldrb	r1, [r7, #3]
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	9300      	str	r3, [sp, #0]
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fea5 	bl	800c13a <USBH_MSC_SCSI_Read>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b3f4:	7bfb      	ldrb	r3, [r7, #15]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d10b      	bne.n	800b412 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b3fa:	78fb      	ldrb	r3, [r7, #3]
 800b3fc:	693a      	ldr	r2, [r7, #16]
 800b3fe:	2134      	movs	r1, #52	; 0x34
 800b400:	fb01 f303 	mul.w	r3, r1, r3
 800b404:	4413      	add	r3, r2
 800b406:	3390      	adds	r3, #144	; 0x90
 800b408:	2201      	movs	r2, #1
 800b40a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b40c:	2300      	movs	r3, #0
 800b40e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b410:	e08a      	b.n	800b528 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800b412:	7bfb      	ldrb	r3, [r7, #15]
 800b414:	2b02      	cmp	r3, #2
 800b416:	d109      	bne.n	800b42c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b418:	78fb      	ldrb	r3, [r7, #3]
 800b41a:	693a      	ldr	r2, [r7, #16]
 800b41c:	2134      	movs	r1, #52	; 0x34
 800b41e:	fb01 f303 	mul.w	r3, r1, r3
 800b422:	4413      	add	r3, r2
 800b424:	3390      	adds	r3, #144	; 0x90
 800b426:	2205      	movs	r2, #5
 800b428:	701a      	strb	r2, [r3, #0]
      break;
 800b42a:	e07d      	b.n	800b528 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b42c:	7bfb      	ldrb	r3, [r7, #15]
 800b42e:	2b04      	cmp	r3, #4
 800b430:	d17a      	bne.n	800b528 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b432:	78fb      	ldrb	r3, [r7, #3]
 800b434:	693a      	ldr	r2, [r7, #16]
 800b436:	2134      	movs	r1, #52	; 0x34
 800b438:	fb01 f303 	mul.w	r3, r1, r3
 800b43c:	4413      	add	r3, r2
 800b43e:	3390      	adds	r3, #144	; 0x90
 800b440:	2208      	movs	r2, #8
 800b442:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b444:	2302      	movs	r3, #2
 800b446:	75fb      	strb	r3, [r7, #23]
      break;
 800b448:	e06e      	b.n	800b528 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800b44a:	78f9      	ldrb	r1, [r7, #3]
 800b44c:	2300      	movs	r3, #0
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	2300      	movs	r3, #0
 800b452:	2200      	movs	r2, #0
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 fe05 	bl	800c064 <USBH_MSC_SCSI_Write>
 800b45a:	4603      	mov	r3, r0
 800b45c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b45e:	7bfb      	ldrb	r3, [r7, #15]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d10b      	bne.n	800b47c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b464:	78fb      	ldrb	r3, [r7, #3]
 800b466:	693a      	ldr	r2, [r7, #16]
 800b468:	2134      	movs	r1, #52	; 0x34
 800b46a:	fb01 f303 	mul.w	r3, r1, r3
 800b46e:	4413      	add	r3, r2
 800b470:	3390      	adds	r3, #144	; 0x90
 800b472:	2201      	movs	r2, #1
 800b474:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b476:	2300      	movs	r3, #0
 800b478:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b47a:	e057      	b.n	800b52c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800b47c:	7bfb      	ldrb	r3, [r7, #15]
 800b47e:	2b02      	cmp	r3, #2
 800b480:	d109      	bne.n	800b496 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b482:	78fb      	ldrb	r3, [r7, #3]
 800b484:	693a      	ldr	r2, [r7, #16]
 800b486:	2134      	movs	r1, #52	; 0x34
 800b488:	fb01 f303 	mul.w	r3, r1, r3
 800b48c:	4413      	add	r3, r2
 800b48e:	3390      	adds	r3, #144	; 0x90
 800b490:	2205      	movs	r2, #5
 800b492:	701a      	strb	r2, [r3, #0]
      break;
 800b494:	e04a      	b.n	800b52c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b496:	7bfb      	ldrb	r3, [r7, #15]
 800b498:	2b04      	cmp	r3, #4
 800b49a:	d147      	bne.n	800b52c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b49c:	78fb      	ldrb	r3, [r7, #3]
 800b49e:	693a      	ldr	r2, [r7, #16]
 800b4a0:	2134      	movs	r1, #52	; 0x34
 800b4a2:	fb01 f303 	mul.w	r3, r1, r3
 800b4a6:	4413      	add	r3, r2
 800b4a8:	3390      	adds	r3, #144	; 0x90
 800b4aa:	2208      	movs	r2, #8
 800b4ac:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b4ae:	2302      	movs	r3, #2
 800b4b0:	75fb      	strb	r3, [r7, #23]
      break;
 800b4b2:	e03b      	b.n	800b52c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800b4b4:	78fb      	ldrb	r3, [r7, #3]
 800b4b6:	2234      	movs	r2, #52	; 0x34
 800b4b8:	fb02 f303 	mul.w	r3, r2, r3
 800b4bc:	3398      	adds	r3, #152	; 0x98
 800b4be:	693a      	ldr	r2, [r7, #16]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	1d1a      	adds	r2, r3, #4
 800b4c4:	78fb      	ldrb	r3, [r7, #3]
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 fd52 	bl	800bf72 <USBH_MSC_SCSI_RequestSense>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b4d2:	7bfb      	ldrb	r3, [r7, #15]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d113      	bne.n	800b500 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b4d8:	78fb      	ldrb	r3, [r7, #3]
 800b4da:	693a      	ldr	r2, [r7, #16]
 800b4dc:	2134      	movs	r1, #52	; 0x34
 800b4de:	fb01 f303 	mul.w	r3, r1, r3
 800b4e2:	4413      	add	r3, r2
 800b4e4:	3390      	adds	r3, #144	; 0x90
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800b4ea:	78fb      	ldrb	r3, [r7, #3]
 800b4ec:	693a      	ldr	r2, [r7, #16]
 800b4ee:	2134      	movs	r1, #52	; 0x34
 800b4f0:	fb01 f303 	mul.w	r3, r1, r3
 800b4f4:	4413      	add	r3, r2
 800b4f6:	3391      	adds	r3, #145	; 0x91
 800b4f8:	2202      	movs	r2, #2
 800b4fa:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800b4fc:	2302      	movs	r3, #2
 800b4fe:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800b500:	7bfb      	ldrb	r3, [r7, #15]
 800b502:	2b02      	cmp	r3, #2
 800b504:	d014      	beq.n	800b530 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b506:	7bfb      	ldrb	r3, [r7, #15]
 800b508:	2b04      	cmp	r3, #4
 800b50a:	d111      	bne.n	800b530 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b50c:	78fb      	ldrb	r3, [r7, #3]
 800b50e:	693a      	ldr	r2, [r7, #16]
 800b510:	2134      	movs	r1, #52	; 0x34
 800b512:	fb01 f303 	mul.w	r3, r1, r3
 800b516:	4413      	add	r3, r2
 800b518:	3390      	adds	r3, #144	; 0x90
 800b51a:	2208      	movs	r2, #8
 800b51c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b51e:	2302      	movs	r3, #2
 800b520:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b522:	e005      	b.n	800b530 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800b524:	bf00      	nop
 800b526:	e004      	b.n	800b532 <USBH_MSC_RdWrProcess+0x194>
      break;
 800b528:	bf00      	nop
 800b52a:	e002      	b.n	800b532 <USBH_MSC_RdWrProcess+0x194>
      break;
 800b52c:	bf00      	nop
 800b52e:	e000      	b.n	800b532 <USBH_MSC_RdWrProcess+0x194>
      break;
 800b530:	bf00      	nop

  }
  return error;
 800b532:	7dfb      	ldrb	r3, [r7, #23]
}
 800b534:	4618      	mov	r0, r3
 800b536:	3718      	adds	r7, #24
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b085      	sub	sp, #20
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	460b      	mov	r3, r1
 800b546:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b54e:	69db      	ldr	r3, [r3, #28]
 800b550:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	b2db      	uxtb	r3, r3
 800b558:	2b0b      	cmp	r3, #11
 800b55a:	d10c      	bne.n	800b576 <USBH_MSC_UnitIsReady+0x3a>
 800b55c:	78fb      	ldrb	r3, [r7, #3]
 800b55e:	68ba      	ldr	r2, [r7, #8]
 800b560:	2134      	movs	r1, #52	; 0x34
 800b562:	fb01 f303 	mul.w	r3, r1, r3
 800b566:	4413      	add	r3, r2
 800b568:	3391      	adds	r3, #145	; 0x91
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d102      	bne.n	800b576 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800b570:	2301      	movs	r3, #1
 800b572:	73fb      	strb	r3, [r7, #15]
 800b574:	e001      	b.n	800b57a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800b576:	2300      	movs	r3, #0
 800b578:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b57a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3714      	adds	r7, #20
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b086      	sub	sp, #24
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	460b      	mov	r3, r1
 800b592:	607a      	str	r2, [r7, #4]
 800b594:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b59c:	69db      	ldr	r3, [r3, #28]
 800b59e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	2b0b      	cmp	r3, #11
 800b5a8:	d10d      	bne.n	800b5c6 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800b5aa:	7afb      	ldrb	r3, [r7, #11]
 800b5ac:	2234      	movs	r2, #52	; 0x34
 800b5ae:	fb02 f303 	mul.w	r3, r2, r3
 800b5b2:	3390      	adds	r3, #144	; 0x90
 800b5b4:	697a      	ldr	r2, [r7, #20]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	2234      	movs	r2, #52	; 0x34
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f006 f9cd 	bl	801195c <memcpy>
    return USBH_OK;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	e000      	b.n	800b5c8 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800b5c6:	2302      	movs	r3, #2
  }
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3718      	adds	r7, #24
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b088      	sub	sp, #32
 800b5d4:	af02      	add	r7, sp, #8
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	607a      	str	r2, [r7, #4]
 800b5da:	603b      	str	r3, [r7, #0]
 800b5dc:	460b      	mov	r3, r1
 800b5de:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5e6:	69db      	ldr	r3, [r3, #28]
 800b5e8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d00e      	beq.n	800b614 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800b5fc:	2b0b      	cmp	r3, #11
 800b5fe:	d109      	bne.n	800b614 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b600:	7afb      	ldrb	r3, [r7, #11]
 800b602:	697a      	ldr	r2, [r7, #20]
 800b604:	2134      	movs	r1, #52	; 0x34
 800b606:	fb01 f303 	mul.w	r3, r1, r3
 800b60a:	4413      	add	r3, r2
 800b60c:	3390      	adds	r3, #144	; 0x90
 800b60e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b610:	2b01      	cmp	r3, #1
 800b612:	d001      	beq.n	800b618 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800b614:	2302      	movs	r3, #2
 800b616:	e040      	b.n	800b69a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	2206      	movs	r2, #6
 800b61c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800b61e:	7afb      	ldrb	r3, [r7, #11]
 800b620:	697a      	ldr	r2, [r7, #20]
 800b622:	2134      	movs	r1, #52	; 0x34
 800b624:	fb01 f303 	mul.w	r3, r1, r3
 800b628:	4413      	add	r3, r2
 800b62a:	3390      	adds	r3, #144	; 0x90
 800b62c:	2206      	movs	r2, #6
 800b62e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800b630:	7afb      	ldrb	r3, [r7, #11]
 800b632:	b29a      	uxth	r2, r3
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800b63a:	7af9      	ldrb	r1, [r7, #11]
 800b63c:	6a3b      	ldr	r3, [r7, #32]
 800b63e:	9300      	str	r3, [sp, #0]
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	f000 fd78 	bl	800c13a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b650:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b652:	e016      	b.n	800b682 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	1ad2      	subs	r2, r2, r3
 800b65e:	6a3b      	ldr	r3, [r7, #32]
 800b660:	f242 7110 	movw	r1, #10000	; 0x2710
 800b664:	fb01 f303 	mul.w	r3, r1, r3
 800b668:	429a      	cmp	r2, r3
 800b66a:	d805      	bhi.n	800b678 <USBH_MSC_Read+0xa8>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b672:	b2db      	uxtb	r3, r3
 800b674:	2b00      	cmp	r3, #0
 800b676:	d104      	bne.n	800b682 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	2201      	movs	r2, #1
 800b67c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b67e:	2302      	movs	r3, #2
 800b680:	e00b      	b.n	800b69a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b682:	7afb      	ldrb	r3, [r7, #11]
 800b684:	4619      	mov	r1, r3
 800b686:	68f8      	ldr	r0, [r7, #12]
 800b688:	f7ff fe89 	bl	800b39e <USBH_MSC_RdWrProcess>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d0e0      	beq.n	800b654 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	2201      	movs	r2, #1
 800b696:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800b698:	2300      	movs	r3, #0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3718      	adds	r7, #24
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b088      	sub	sp, #32
 800b6a6:	af02      	add	r7, sp, #8
 800b6a8:	60f8      	str	r0, [r7, #12]
 800b6aa:	607a      	str	r2, [r7, #4]
 800b6ac:	603b      	str	r3, [r7, #0]
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b6b8:	69db      	ldr	r3, [r3, #28]
 800b6ba:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d00e      	beq.n	800b6e6 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800b6ce:	2b0b      	cmp	r3, #11
 800b6d0:	d109      	bne.n	800b6e6 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b6d2:	7afb      	ldrb	r3, [r7, #11]
 800b6d4:	697a      	ldr	r2, [r7, #20]
 800b6d6:	2134      	movs	r1, #52	; 0x34
 800b6d8:	fb01 f303 	mul.w	r3, r1, r3
 800b6dc:	4413      	add	r3, r2
 800b6de:	3390      	adds	r3, #144	; 0x90
 800b6e0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d001      	beq.n	800b6ea <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800b6e6:	2302      	movs	r3, #2
 800b6e8:	e040      	b.n	800b76c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	2207      	movs	r2, #7
 800b6ee:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800b6f0:	7afb      	ldrb	r3, [r7, #11]
 800b6f2:	697a      	ldr	r2, [r7, #20]
 800b6f4:	2134      	movs	r1, #52	; 0x34
 800b6f6:	fb01 f303 	mul.w	r3, r1, r3
 800b6fa:	4413      	add	r3, r2
 800b6fc:	3390      	adds	r3, #144	; 0x90
 800b6fe:	2207      	movs	r2, #7
 800b700:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800b702:	7afb      	ldrb	r3, [r7, #11]
 800b704:	b29a      	uxth	r2, r3
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800b70c:	7af9      	ldrb	r1, [r7, #11]
 800b70e:	6a3b      	ldr	r3, [r7, #32]
 800b710:	9300      	str	r3, [sp, #0]
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	68f8      	ldr	r0, [r7, #12]
 800b718:	f000 fca4 	bl	800c064 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b722:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b724:	e016      	b.n	800b754 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	1ad2      	subs	r2, r2, r3
 800b730:	6a3b      	ldr	r3, [r7, #32]
 800b732:	f242 7110 	movw	r1, #10000	; 0x2710
 800b736:	fb01 f303 	mul.w	r3, r1, r3
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d805      	bhi.n	800b74a <USBH_MSC_Write+0xa8>
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b744:	b2db      	uxtb	r3, r3
 800b746:	2b00      	cmp	r3, #0
 800b748:	d104      	bne.n	800b754 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	2201      	movs	r2, #1
 800b74e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b750:	2302      	movs	r3, #2
 800b752:	e00b      	b.n	800b76c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b754:	7afb      	ldrb	r3, [r7, #11]
 800b756:	4619      	mov	r1, r3
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f7ff fe20 	bl	800b39e <USBH_MSC_RdWrProcess>
 800b75e:	4603      	mov	r3, r0
 800b760:	2b01      	cmp	r3, #1
 800b762:	d0e0      	beq.n	800b726 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	2201      	movs	r2, #1
 800b768:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800b76a:	2300      	movs	r3, #0
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3718      	adds	r7, #24
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2221      	movs	r2, #33	; 0x21
 800b780:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	22ff      	movs	r2, #255	; 0xff
 800b786:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2200      	movs	r2, #0
 800b792:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800b79a:	2200      	movs	r2, #0
 800b79c:	2100      	movs	r1, #0
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f001 fea6 	bl	800d4f0 <USBH_CtlReq>
 800b7a4:	4603      	mov	r3, r0
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3708      	adds	r7, #8
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}

0800b7ae <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800b7ae:	b580      	push	{r7, lr}
 800b7b0:	b082      	sub	sp, #8
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
 800b7b6:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	22a1      	movs	r2, #161	; 0xa1
 800b7bc:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	22fe      	movs	r2, #254	; 0xfe
 800b7c2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	6839      	ldr	r1, [r7, #0]
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f001 fe88 	bl	800d4f0 <USBH_CtlReq>
 800b7e0:	4603      	mov	r3, r0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
	...

0800b7ec <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7fa:	69db      	ldr	r3, [r3, #28]
 800b7fc:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	4a09      	ldr	r2, [pc, #36]	; (800b828 <USBH_MSC_BOT_Init+0x3c>)
 800b802:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	4a09      	ldr	r2, [pc, #36]	; (800b82c <USBH_MSC_BOT_Init+0x40>)
 800b808:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2201      	movs	r2, #1
 800b80e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2201      	movs	r2, #1
 800b816:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800b81a:	2300      	movs	r3, #0
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3714      	adds	r7, #20
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr
 800b828:	43425355 	.word	0x43425355
 800b82c:	20304050 	.word	0x20304050

0800b830 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b088      	sub	sp, #32
 800b834:	af02      	add	r7, sp, #8
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	460b      	mov	r3, r1
 800b83a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800b83c:	2301      	movs	r3, #1
 800b83e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800b840:	2301      	movs	r3, #1
 800b842:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800b844:	2301      	movs	r3, #1
 800b846:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b848:	2300      	movs	r3, #0
 800b84a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b852:	69db      	ldr	r3, [r3, #28]
 800b854:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800b856:	2300      	movs	r3, #0
 800b858:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b860:	3b01      	subs	r3, #1
 800b862:	2b0a      	cmp	r3, #10
 800b864:	f200 819e 	bhi.w	800bba4 <USBH_MSC_BOT_Process+0x374>
 800b868:	a201      	add	r2, pc, #4	; (adr r2, 800b870 <USBH_MSC_BOT_Process+0x40>)
 800b86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b86e:	bf00      	nop
 800b870:	0800b89d 	.word	0x0800b89d
 800b874:	0800b8c5 	.word	0x0800b8c5
 800b878:	0800b92f 	.word	0x0800b92f
 800b87c:	0800b94d 	.word	0x0800b94d
 800b880:	0800b9d1 	.word	0x0800b9d1
 800b884:	0800b9f3 	.word	0x0800b9f3
 800b888:	0800ba8b 	.word	0x0800ba8b
 800b88c:	0800baa7 	.word	0x0800baa7
 800b890:	0800baf9 	.word	0x0800baf9
 800b894:	0800bb29 	.word	0x0800bb29
 800b898:	0800bb8b 	.word	0x0800bb8b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	78fa      	ldrb	r2, [r7, #3]
 800b8a0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	2202      	movs	r2, #2
 800b8a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	795b      	ldrb	r3, [r3, #5]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	9200      	str	r2, [sp, #0]
 800b8ba:	221f      	movs	r2, #31
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f002 f826 	bl	800d90e <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800b8c2:	e17e      	b.n	800bbc2 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	795b      	ldrb	r3, [r3, #5]
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f005 fe3e 	bl	801154c <USBH_LL_GetURBState>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b8d4:	7d3b      	ldrb	r3, [r7, #20]
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d118      	bne.n	800b90c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d00f      	beq.n	800b902 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800b8e8:	b25b      	sxtb	r3, r3
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	da04      	bge.n	800b8f8 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	2203      	movs	r2, #3
 800b8f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b8f6:	e157      	b.n	800bba8 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	2205      	movs	r2, #5
 800b8fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b900:	e152      	b.n	800bba8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	2207      	movs	r2, #7
 800b906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b90a:	e14d      	b.n	800bba8 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b90c:	7d3b      	ldrb	r3, [r7, #20]
 800b90e:	2b02      	cmp	r3, #2
 800b910:	d104      	bne.n	800b91c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	2201      	movs	r2, #1
 800b916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b91a:	e145      	b.n	800bba8 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800b91c:	7d3b      	ldrb	r3, [r7, #20]
 800b91e:	2b05      	cmp	r3, #5
 800b920:	f040 8142 	bne.w	800bba8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	220a      	movs	r2, #10
 800b928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b92c:	e13c      	b.n	800bba8 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	895a      	ldrh	r2, [r3, #10]
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	791b      	ldrb	r3, [r3, #4]
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f002 f80b 	bl	800d958 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	2204      	movs	r2, #4
 800b946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800b94a:	e13a      	b.n	800bbc2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	791b      	ldrb	r3, [r3, #4]
 800b950:	4619      	mov	r1, r3
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f005 fdfa 	bl	801154c <USBH_LL_GetURBState>
 800b958:	4603      	mov	r3, r0
 800b95a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b95c:	7d3b      	ldrb	r3, [r7, #20]
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d12d      	bne.n	800b9be <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b966:	693a      	ldr	r2, [r7, #16]
 800b968:	8952      	ldrh	r2, [r2, #10]
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d910      	bls.n	800b990 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b974:	693a      	ldr	r2, [r7, #16]
 800b976:	8952      	ldrh	r2, [r2, #10]
 800b978:	441a      	add	r2, r3
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b984:	693a      	ldr	r2, [r7, #16]
 800b986:	8952      	ldrh	r2, [r2, #10]
 800b988:	1a9a      	subs	r2, r3, r2
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	65da      	str	r2, [r3, #92]	; 0x5c
 800b98e:	e002      	b.n	800b996 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	2200      	movs	r2, #0
 800b994:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00a      	beq.n	800b9b4 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	895a      	ldrh	r2, [r3, #10]
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	791b      	ldrb	r3, [r3, #4]
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f001 ffd3 	bl	800d958 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800b9b2:	e0fb      	b.n	800bbac <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	2207      	movs	r2, #7
 800b9b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b9bc:	e0f6      	b.n	800bbac <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800b9be:	7d3b      	ldrb	r3, [r7, #20]
 800b9c0:	2b05      	cmp	r3, #5
 800b9c2:	f040 80f3 	bne.w	800bbac <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	2209      	movs	r2, #9
 800b9ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b9ce:	e0ed      	b.n	800bbac <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	891a      	ldrh	r2, [r3, #8]
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	795b      	ldrb	r3, [r3, #5]
 800b9de:	2001      	movs	r0, #1
 800b9e0:	9000      	str	r0, [sp, #0]
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f001 ff93 	bl	800d90e <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	2206      	movs	r2, #6
 800b9ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b9f0:	e0e7      	b.n	800bbc2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	795b      	ldrb	r3, [r3, #5]
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f005 fda7 	bl	801154c <USBH_LL_GetURBState>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800ba02:	7d3b      	ldrb	r3, [r7, #20]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d12f      	bne.n	800ba68 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba0c:	693a      	ldr	r2, [r7, #16]
 800ba0e:	8912      	ldrh	r2, [r2, #8]
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d910      	bls.n	800ba36 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba1a:	693a      	ldr	r2, [r7, #16]
 800ba1c:	8912      	ldrh	r2, [r2, #8]
 800ba1e:	441a      	add	r2, r3
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba2a:	693a      	ldr	r2, [r7, #16]
 800ba2c:	8912      	ldrh	r2, [r2, #8]
 800ba2e:	1a9a      	subs	r2, r3, r2
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	65da      	str	r2, [r3, #92]	; 0x5c
 800ba34:	e002      	b.n	800ba3c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d00c      	beq.n	800ba5e <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	891a      	ldrh	r2, [r3, #8]
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	795b      	ldrb	r3, [r3, #5]
 800ba52:	2001      	movs	r0, #1
 800ba54:	9000      	str	r0, [sp, #0]
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f001 ff59 	bl	800d90e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800ba5c:	e0a8      	b.n	800bbb0 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	2207      	movs	r2, #7
 800ba62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ba66:	e0a3      	b.n	800bbb0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ba68:	7d3b      	ldrb	r3, [r7, #20]
 800ba6a:	2b02      	cmp	r3, #2
 800ba6c:	d104      	bne.n	800ba78 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	2205      	movs	r2, #5
 800ba72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ba76:	e09b      	b.n	800bbb0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800ba78:	7d3b      	ldrb	r3, [r7, #20]
 800ba7a:	2b05      	cmp	r3, #5
 800ba7c:	f040 8098 	bne.w	800bbb0 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	220a      	movs	r2, #10
 800ba84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ba88:	e092      	b.n	800bbb0 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	791b      	ldrb	r3, [r3, #4]
 800ba94:	220d      	movs	r2, #13
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f001 ff5e 	bl	800d958 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	2208      	movs	r2, #8
 800baa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800baa4:	e08d      	b.n	800bbc2 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	791b      	ldrb	r3, [r3, #4]
 800baaa:	4619      	mov	r1, r3
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f005 fd4d 	bl	801154c <USBH_LL_GetURBState>
 800bab2:	4603      	mov	r3, r0
 800bab4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800bab6:	7d3b      	ldrb	r3, [r7, #20]
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d115      	bne.n	800bae8 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	2201      	movs	r2, #1
 800bac8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 f8a9 	bl	800bc24 <USBH_MSC_DecodeCSW>
 800bad2:	4603      	mov	r3, r0
 800bad4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800bad6:	7d7b      	ldrb	r3, [r7, #21]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d102      	bne.n	800bae2 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800badc:	2300      	movs	r3, #0
 800bade:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800bae0:	e068      	b.n	800bbb4 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800bae2:	2302      	movs	r3, #2
 800bae4:	75fb      	strb	r3, [r7, #23]
      break;
 800bae6:	e065      	b.n	800bbb4 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800bae8:	7d3b      	ldrb	r3, [r7, #20]
 800baea:	2b05      	cmp	r3, #5
 800baec:	d162      	bne.n	800bbb4 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	2209      	movs	r2, #9
 800baf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800baf6:	e05d      	b.n	800bbb4 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800baf8:	78fb      	ldrb	r3, [r7, #3]
 800bafa:	2200      	movs	r2, #0
 800bafc:	4619      	mov	r1, r3
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 f864 	bl	800bbcc <USBH_MSC_BOT_Abort>
 800bb04:	4603      	mov	r3, r0
 800bb06:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800bb08:	7dbb      	ldrb	r3, [r7, #22]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d104      	bne.n	800bb18 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	2207      	movs	r2, #7
 800bb12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800bb16:	e04f      	b.n	800bbb8 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800bb18:	7dbb      	ldrb	r3, [r7, #22]
 800bb1a:	2b04      	cmp	r3, #4
 800bb1c:	d14c      	bne.n	800bbb8 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	220b      	movs	r2, #11
 800bb22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bb26:	e047      	b.n	800bbb8 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800bb28:	78fb      	ldrb	r3, [r7, #3]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 f84c 	bl	800bbcc <USBH_MSC_BOT_Abort>
 800bb34:	4603      	mov	r3, r0
 800bb36:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800bb38:	7dbb      	ldrb	r3, [r7, #22]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d11d      	bne.n	800bb7a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	795b      	ldrb	r3, [r3, #5]
 800bb42:	4619      	mov	r1, r3
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f005 fd5b 	bl	8011600 <USBH_LL_GetToggle>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	7959      	ldrb	r1, [r3, #5]
 800bb52:	7bfb      	ldrb	r3, [r7, #15]
 800bb54:	f1c3 0301 	rsb	r3, r3, #1
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f005 fd1f 	bl	80115a0 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	791b      	ldrb	r3, [r3, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	4619      	mov	r1, r3
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f005 fd18 	bl	80115a0 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	2209      	movs	r2, #9
 800bb74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800bb78:	e020      	b.n	800bbbc <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800bb7a:	7dbb      	ldrb	r3, [r7, #22]
 800bb7c:	2b04      	cmp	r3, #4
 800bb7e:	d11d      	bne.n	800bbbc <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	220b      	movs	r2, #11
 800bb84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bb88:	e018      	b.n	800bbbc <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f7ff fdf2 	bl	800b774 <USBH_MSC_BOT_REQ_Reset>
 800bb90:	4603      	mov	r3, r0
 800bb92:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800bb94:	7dfb      	ldrb	r3, [r7, #23]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d112      	bne.n	800bbc0 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800bba2:	e00d      	b.n	800bbc0 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800bba4:	bf00      	nop
 800bba6:	e00c      	b.n	800bbc2 <USBH_MSC_BOT_Process+0x392>
      break;
 800bba8:	bf00      	nop
 800bbaa:	e00a      	b.n	800bbc2 <USBH_MSC_BOT_Process+0x392>
      break;
 800bbac:	bf00      	nop
 800bbae:	e008      	b.n	800bbc2 <USBH_MSC_BOT_Process+0x392>
      break;
 800bbb0:	bf00      	nop
 800bbb2:	e006      	b.n	800bbc2 <USBH_MSC_BOT_Process+0x392>
      break;
 800bbb4:	bf00      	nop
 800bbb6:	e004      	b.n	800bbc2 <USBH_MSC_BOT_Process+0x392>
      break;
 800bbb8:	bf00      	nop
 800bbba:	e002      	b.n	800bbc2 <USBH_MSC_BOT_Process+0x392>
      break;
 800bbbc:	bf00      	nop
 800bbbe:	e000      	b.n	800bbc2 <USBH_MSC_BOT_Process+0x392>
      break;
 800bbc0:	bf00      	nop
  }
  return status;
 800bbc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3718      	adds	r7, #24
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	70fb      	strb	r3, [r7, #3]
 800bbd8:	4613      	mov	r3, r2
 800bbda:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800bbdc:	2302      	movs	r3, #2
 800bbde:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbe6:	69db      	ldr	r3, [r3, #28]
 800bbe8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800bbea:	78bb      	ldrb	r3, [r7, #2]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d002      	beq.n	800bbf6 <USBH_MSC_BOT_Abort+0x2a>
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d009      	beq.n	800bc08 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800bbf4:	e011      	b.n	800bc1a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	79db      	ldrb	r3, [r3, #7]
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f001 f9a8 	bl	800cf52 <USBH_ClrFeature>
 800bc02:	4603      	mov	r3, r0
 800bc04:	73fb      	strb	r3, [r7, #15]
      break;
 800bc06:	e008      	b.n	800bc1a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	799b      	ldrb	r3, [r3, #6]
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f001 f99f 	bl	800cf52 <USBH_ClrFeature>
 800bc14:	4603      	mov	r3, r0
 800bc16:	73fb      	strb	r3, [r7, #15]
      break;
 800bc18:	bf00      	nop
  }
  return status;
 800bc1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc32:	69db      	ldr	r3, [r3, #28]
 800bc34:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800bc36:	2301      	movs	r3, #1
 800bc38:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	791b      	ldrb	r3, [r3, #4]
 800bc3e:	4619      	mov	r1, r3
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f005 fbf1 	bl	8011428 <USBH_LL_GetLastXferSize>
 800bc46:	4603      	mov	r3, r0
 800bc48:	2b0d      	cmp	r3, #13
 800bc4a:	d002      	beq.n	800bc52 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800bc4c:	2302      	movs	r3, #2
 800bc4e:	73fb      	strb	r3, [r7, #15]
 800bc50:	e024      	b.n	800bc9c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc56:	4a14      	ldr	r2, [pc, #80]	; (800bca8 <USBH_MSC_DecodeCSW+0x84>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d11d      	bne.n	800bc98 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d119      	bne.n	800bc9c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d102      	bne.n	800bc78 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800bc72:	2300      	movs	r3, #0
 800bc74:	73fb      	strb	r3, [r7, #15]
 800bc76:	e011      	b.n	800bc9c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d102      	bne.n	800bc88 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800bc82:	2301      	movs	r3, #1
 800bc84:	73fb      	strb	r3, [r7, #15]
 800bc86:	e009      	b.n	800bc9c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bc8e:	2b02      	cmp	r3, #2
 800bc90:	d104      	bne.n	800bc9c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800bc92:	2302      	movs	r3, #2
 800bc94:	73fb      	strb	r3, [r7, #15]
 800bc96:	e001      	b.n	800bc9c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800bc98:	2302      	movs	r3, #2
 800bc9a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800bc9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3710      	adds	r7, #16
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	53425355 	.word	0x53425355

0800bcac <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800bcb8:	2302      	movs	r3, #2
 800bcba:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bcc2:	69db      	ldr	r3, [r3, #28]
 800bcc4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d002      	beq.n	800bcd6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800bcd0:	2b02      	cmp	r3, #2
 800bcd2:	d021      	beq.n	800bd18 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800bcd4:	e028      	b.n	800bd28 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	220a      	movs	r2, #10
 800bce8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	3363      	adds	r3, #99	; 0x63
 800bcf0:	2210      	movs	r2, #16
 800bcf2:	2100      	movs	r1, #0
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f005 fdc3 	bl	8011880 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	2201      	movs	r2, #1
 800bd06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	2202      	movs	r2, #2
 800bd0e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800bd12:	2301      	movs	r3, #1
 800bd14:	73fb      	strb	r3, [r7, #15]
      break;
 800bd16:	e007      	b.n	800bd28 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bd18:	78fb      	ldrb	r3, [r7, #3]
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f7ff fd87 	bl	800b830 <USBH_MSC_BOT_Process>
 800bd22:	4603      	mov	r3, r0
 800bd24:	73fb      	strb	r3, [r7, #15]
      break;
 800bd26:	bf00      	nop
  }

  return error;
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b086      	sub	sp, #24
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	60f8      	str	r0, [r7, #12]
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	607a      	str	r2, [r7, #4]
 800bd3e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800bd40:	2301      	movs	r3, #1
 800bd42:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd4a:	69db      	ldr	r3, [r3, #28]
 800bd4c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d002      	beq.n	800bd5e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800bd58:	2b02      	cmp	r3, #2
 800bd5a:	d027      	beq.n	800bdac <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800bd5c:	e05f      	b.n	800be1e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	2208      	movs	r2, #8
 800bd62:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	2280      	movs	r2, #128	; 0x80
 800bd68:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	220a      	movs	r2, #10
 800bd70:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	3363      	adds	r3, #99	; 0x63
 800bd78:	2210      	movs	r2, #16
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f005 fd7f 	bl	8011880 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	2225      	movs	r2, #37	; 0x25
 800bd86:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	2202      	movs	r2, #2
 800bd96:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	f103 0210 	add.w	r2, r3, #16
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bda6:	2301      	movs	r3, #1
 800bda8:	75fb      	strb	r3, [r7, #23]
      break;
 800bdaa:	e038      	b.n	800be1e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bdac:	7afb      	ldrb	r3, [r7, #11]
 800bdae:	4619      	mov	r1, r3
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f7ff fd3d 	bl	800b830 <USBH_MSC_BOT_Process>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800bdba:	7dfb      	ldrb	r3, [r7, #23]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d12d      	bne.n	800be1c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdc6:	3303      	adds	r3, #3
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	461a      	mov	r2, r3
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdd2:	3302      	adds	r3, #2
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	021b      	lsls	r3, r3, #8
 800bdd8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bde0:	3301      	adds	r3, #1
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bde6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	061b      	lsls	r3, r3, #24
 800bdf2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdfe:	3307      	adds	r3, #7
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	b29a      	uxth	r2, r3
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be0a:	3306      	adds	r3, #6
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	b29b      	uxth	r3, r3
 800be10:	021b      	lsls	r3, r3, #8
 800be12:	b29b      	uxth	r3, r3
 800be14:	4313      	orrs	r3, r2
 800be16:	b29a      	uxth	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	809a      	strh	r2, [r3, #4]
      break;
 800be1c:	bf00      	nop
  }

  return error;
 800be1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800be20:	4618      	mov	r0, r3
 800be22:	3718      	adds	r7, #24
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b086      	sub	sp, #24
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	460b      	mov	r3, r1
 800be32:	607a      	str	r2, [r7, #4]
 800be34:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800be36:	2302      	movs	r3, #2
 800be38:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be40:	69db      	ldr	r3, [r3, #28]
 800be42:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d002      	beq.n	800be54 <USBH_MSC_SCSI_Inquiry+0x2c>
 800be4e:	2b02      	cmp	r3, #2
 800be50:	d03d      	beq.n	800bece <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800be52:	e089      	b.n	800bf68 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	2224      	movs	r2, #36	; 0x24
 800be58:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	2280      	movs	r2, #128	; 0x80
 800be5e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	220a      	movs	r2, #10
 800be66:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	3363      	adds	r3, #99	; 0x63
 800be6e:	220a      	movs	r2, #10
 800be70:	2100      	movs	r1, #0
 800be72:	4618      	mov	r0, r3
 800be74:	f005 fd04 	bl	8011880 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	2212      	movs	r2, #18
 800be7c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800be80:	7afb      	ldrb	r3, [r7, #11]
 800be82:	015b      	lsls	r3, r3, #5
 800be84:	b2da      	uxtb	r2, r3
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	2200      	movs	r2, #0
 800be90:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	2200      	movs	r2, #0
 800be98:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	2224      	movs	r2, #36	; 0x24
 800bea0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	2200      	movs	r2, #0
 800bea8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	2201      	movs	r2, #1
 800beb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	2202      	movs	r2, #2
 800beb8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	f103 0210 	add.w	r2, r3, #16
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bec8:	2301      	movs	r3, #1
 800beca:	75fb      	strb	r3, [r7, #23]
      break;
 800becc:	e04c      	b.n	800bf68 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bece:	7afb      	ldrb	r3, [r7, #11]
 800bed0:	4619      	mov	r1, r3
 800bed2:	68f8      	ldr	r0, [r7, #12]
 800bed4:	f7ff fcac 	bl	800b830 <USBH_MSC_BOT_Process>
 800bed8:	4603      	mov	r3, r0
 800beda:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800bedc:	7dfb      	ldrb	r3, [r7, #23]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d141      	bne.n	800bf66 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800bee2:	2222      	movs	r2, #34	; 0x22
 800bee4:	2100      	movs	r1, #0
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f005 fcca 	bl	8011880 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	f003 031f 	and.w	r3, r3, #31
 800bef8:	b2da      	uxtb	r2, r3
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	095b      	lsrs	r3, r3, #5
 800bf08:	b2da      	uxtb	r2, r3
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf14:	3301      	adds	r3, #1
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	b25b      	sxtb	r3, r3
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	da03      	bge.n	800bf26 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2201      	movs	r2, #1
 800bf22:	709a      	strb	r2, [r3, #2]
 800bf24:	e002      	b.n	800bf2c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	1cd8      	adds	r0, r3, #3
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf36:	3308      	adds	r3, #8
 800bf38:	2208      	movs	r2, #8
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	f005 fd0e 	bl	801195c <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f103 000c 	add.w	r0, r3, #12
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf4c:	3310      	adds	r3, #16
 800bf4e:	2210      	movs	r2, #16
 800bf50:	4619      	mov	r1, r3
 800bf52:	f005 fd03 	bl	801195c <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	331d      	adds	r3, #29
 800bf5a:	693a      	ldr	r2, [r7, #16]
 800bf5c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800bf60:	3220      	adds	r2, #32
 800bf62:	6812      	ldr	r2, [r2, #0]
 800bf64:	601a      	str	r2, [r3, #0]
      break;
 800bf66:	bf00      	nop
  }

  return error;
 800bf68:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3718      	adds	r7, #24
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b086      	sub	sp, #24
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	60f8      	str	r0, [r7, #12]
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	607a      	str	r2, [r7, #4]
 800bf7e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800bf80:	2302      	movs	r3, #2
 800bf82:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf8a:	69db      	ldr	r3, [r3, #28]
 800bf8c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d002      	beq.n	800bf9e <USBH_MSC_SCSI_RequestSense+0x2c>
 800bf98:	2b02      	cmp	r3, #2
 800bf9a:	d03d      	beq.n	800c018 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800bf9c:	e05d      	b.n	800c05a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	220e      	movs	r2, #14
 800bfa2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	2280      	movs	r2, #128	; 0x80
 800bfa8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	220a      	movs	r2, #10
 800bfb0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	3363      	adds	r3, #99	; 0x63
 800bfb8:	2210      	movs	r2, #16
 800bfba:	2100      	movs	r1, #0
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f005 fc5f 	bl	8011880 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	2203      	movs	r2, #3
 800bfc6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800bfca:	7afb      	ldrb	r3, [r7, #11]
 800bfcc:	015b      	lsls	r3, r3, #5
 800bfce:	b2da      	uxtb	r2, r3
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	220e      	movs	r2, #14
 800bfea:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	2200      	movs	r2, #0
 800bff2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	2201      	movs	r2, #1
 800bffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	2202      	movs	r2, #2
 800c002:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	f103 0210 	add.w	r2, r3, #16
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c012:	2301      	movs	r3, #1
 800c014:	75fb      	strb	r3, [r7, #23]
      break;
 800c016:	e020      	b.n	800c05a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c018:	7afb      	ldrb	r3, [r7, #11]
 800c01a:	4619      	mov	r1, r3
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	f7ff fc07 	bl	800b830 <USBH_MSC_BOT_Process>
 800c022:	4603      	mov	r3, r0
 800c024:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c026:	7dfb      	ldrb	r3, [r7, #23]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d115      	bne.n	800c058 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c032:	3302      	adds	r3, #2
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	f003 030f 	and.w	r3, r3, #15
 800c03a:	b2da      	uxtb	r2, r3
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c046:	7b1a      	ldrb	r2, [r3, #12]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c052:	7b5a      	ldrb	r2, [r3, #13]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	709a      	strb	r2, [r3, #2]
      break;
 800c058:	bf00      	nop
  }

  return error;
 800c05a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3718      	adds	r7, #24
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	607a      	str	r2, [r7, #4]
 800c06e:	603b      	str	r3, [r7, #0]
 800c070:	460b      	mov	r3, r1
 800c072:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c074:	2302      	movs	r3, #2
 800c076:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c07e:	69db      	ldr	r3, [r3, #28]
 800c080:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d002      	beq.n	800c092 <USBH_MSC_SCSI_Write+0x2e>
 800c08c:	2b02      	cmp	r3, #2
 800c08e:	d047      	beq.n	800c120 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c090:	e04e      	b.n	800c130 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c098:	461a      	mov	r2, r3
 800c09a:	6a3b      	ldr	r3, [r7, #32]
 800c09c:	fb03 f202 	mul.w	r2, r3, r2
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	220a      	movs	r2, #10
 800c0b0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	3363      	adds	r3, #99	; 0x63
 800c0b8:	2210      	movs	r2, #16
 800c0ba:	2100      	movs	r1, #0
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f005 fbdf 	bl	8011880 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	222a      	movs	r2, #42	; 0x2a
 800c0c6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c0ca:	79fa      	ldrb	r2, [r7, #7]
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c0d2:	79ba      	ldrb	r2, [r7, #6]
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c0da:	797a      	ldrb	r2, [r7, #5]
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c0e2:	1d3b      	adds	r3, r7, #4
 800c0e4:	781a      	ldrb	r2, [r3, #0]
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c0ec:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c0f6:	f107 0320 	add.w	r3, r7, #32
 800c0fa:	781a      	ldrb	r2, [r3, #0]
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	2201      	movs	r2, #1
 800c106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	2202      	movs	r2, #2
 800c10e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	683a      	ldr	r2, [r7, #0]
 800c116:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c11a:	2301      	movs	r3, #1
 800c11c:	75fb      	strb	r3, [r7, #23]
      break;
 800c11e:	e007      	b.n	800c130 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c120:	7afb      	ldrb	r3, [r7, #11]
 800c122:	4619      	mov	r1, r3
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	f7ff fb83 	bl	800b830 <USBH_MSC_BOT_Process>
 800c12a:	4603      	mov	r3, r0
 800c12c:	75fb      	strb	r3, [r7, #23]
      break;
 800c12e:	bf00      	nop
  }

  return error;
 800c130:	7dfb      	ldrb	r3, [r7, #23]
}
 800c132:	4618      	mov	r0, r3
 800c134:	3718      	adds	r7, #24
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}

0800c13a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b086      	sub	sp, #24
 800c13e:	af00      	add	r7, sp, #0
 800c140:	60f8      	str	r0, [r7, #12]
 800c142:	607a      	str	r2, [r7, #4]
 800c144:	603b      	str	r3, [r7, #0]
 800c146:	460b      	mov	r3, r1
 800c148:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c14a:	2302      	movs	r3, #2
 800c14c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c154:	69db      	ldr	r3, [r3, #28]
 800c156:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d002      	beq.n	800c168 <USBH_MSC_SCSI_Read+0x2e>
 800c162:	2b02      	cmp	r3, #2
 800c164:	d047      	beq.n	800c1f6 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c166:	e04e      	b.n	800c206 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c16e:	461a      	mov	r2, r3
 800c170:	6a3b      	ldr	r3, [r7, #32]
 800c172:	fb03 f202 	mul.w	r2, r3, r2
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	2280      	movs	r2, #128	; 0x80
 800c17e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	220a      	movs	r2, #10
 800c186:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	3363      	adds	r3, #99	; 0x63
 800c18e:	2210      	movs	r2, #16
 800c190:	2100      	movs	r1, #0
 800c192:	4618      	mov	r0, r3
 800c194:	f005 fb74 	bl	8011880 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	2228      	movs	r2, #40	; 0x28
 800c19c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c1a0:	79fa      	ldrb	r2, [r7, #7]
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c1a8:	79ba      	ldrb	r2, [r7, #6]
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c1b0:	797a      	ldrb	r2, [r7, #5]
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c1b8:	1d3b      	adds	r3, r7, #4
 800c1ba:	781a      	ldrb	r2, [r3, #0]
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c1c2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c1cc:	f107 0320 	add.w	r3, r7, #32
 800c1d0:	781a      	ldrb	r2, [r3, #0]
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	2202      	movs	r2, #2
 800c1e4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	683a      	ldr	r2, [r7, #0]
 800c1ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	75fb      	strb	r3, [r7, #23]
      break;
 800c1f4:	e007      	b.n	800c206 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c1f6:	7afb      	ldrb	r3, [r7, #11]
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	68f8      	ldr	r0, [r7, #12]
 800c1fc:	f7ff fb18 	bl	800b830 <USBH_MSC_BOT_Process>
 800c200:	4603      	mov	r3, r0
 800c202:	75fb      	strb	r3, [r7, #23]
      break;
 800c204:	bf00      	nop
  }

  return error;
 800c206:	7dfb      	ldrb	r3, [r7, #23]
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3718      	adds	r7, #24
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	4613      	mov	r3, r2
 800c21c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d101      	bne.n	800c228 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c224:	2302      	movs	r3, #2
 800c226:	e029      	b.n	800c27c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	79fa      	ldrb	r2, [r7, #7]
 800c22c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2200      	movs	r2, #0
 800c234:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	f000 f81f 	bl	800c284 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2200      	movs	r2, #0
 800c24a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2200      	movs	r2, #0
 800c252:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2200      	movs	r2, #0
 800c25a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2200      	movs	r2, #0
 800c262:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d003      	beq.n	800c274 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	68ba      	ldr	r2, [r7, #8]
 800c270:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c274:	68f8      	ldr	r0, [r7, #12]
 800c276:	f005 f823 	bl	80112c0 <USBH_LL_Init>

  return USBH_OK;
 800c27a:	2300      	movs	r3, #0
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3710      	adds	r7, #16
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c284:	b480      	push	{r7}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c28c:	2300      	movs	r3, #0
 800c28e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c290:	2300      	movs	r3, #0
 800c292:	60fb      	str	r3, [r7, #12]
 800c294:	e009      	b.n	800c2aa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	33e0      	adds	r3, #224	; 0xe0
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	4413      	add	r3, r2
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	60fb      	str	r3, [r7, #12]
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2b0f      	cmp	r3, #15
 800c2ae:	d9f2      	bls.n	800c296 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	60fb      	str	r3, [r7, #12]
 800c2b4:	e009      	b.n	800c2ca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	4413      	add	r3, r2
 800c2bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	60fb      	str	r3, [r7, #12]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2d0:	d3f1      	bcc.n	800c2b6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2240      	movs	r2, #64	; 0x40
 800c2f6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2201      	movs	r2, #1
 800c30a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2200      	movs	r2, #0
 800c312:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2200      	movs	r2, #0
 800c31a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3714      	adds	r7, #20
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b085      	sub	sp, #20
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c336:	2300      	movs	r3, #0
 800c338:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d016      	beq.n	800c36e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c346:	2b00      	cmp	r3, #0
 800c348:	d10e      	bne.n	800c368 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c350:	1c59      	adds	r1, r3, #1
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	33de      	adds	r3, #222	; 0xde
 800c35c:	6839      	ldr	r1, [r7, #0]
 800c35e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c362:	2300      	movs	r3, #0
 800c364:	73fb      	strb	r3, [r7, #15]
 800c366:	e004      	b.n	800c372 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c368:	2302      	movs	r3, #2
 800c36a:	73fb      	strb	r3, [r7, #15]
 800c36c:	e001      	b.n	800c372 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c36e:	2302      	movs	r3, #2
 800c370:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c372:	7bfb      	ldrb	r3, [r7, #15]
}
 800c374:	4618      	mov	r0, r3
 800c376:	3714      	adds	r7, #20
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr

0800c380 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c380:	b480      	push	{r7}
 800c382:	b085      	sub	sp, #20
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	460b      	mov	r3, r1
 800c38a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c38c:	2300      	movs	r3, #0
 800c38e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c396:	78fa      	ldrb	r2, [r7, #3]
 800c398:	429a      	cmp	r2, r3
 800c39a:	d204      	bcs.n	800c3a6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	78fa      	ldrb	r2, [r7, #3]
 800c3a0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c3a4:	e001      	b.n	800c3aa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c3a6:	2302      	movs	r3, #2
 800c3a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3714      	adds	r7, #20
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b087      	sub	sp, #28
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	4608      	mov	r0, r1
 800c3c2:	4611      	mov	r1, r2
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	70fb      	strb	r3, [r7, #3]
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	70bb      	strb	r3, [r7, #2]
 800c3ce:	4613      	mov	r3, r2
 800c3d0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c3e0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c3e2:	e025      	b.n	800c430 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c3e4:	7dfb      	ldrb	r3, [r7, #23]
 800c3e6:	221a      	movs	r2, #26
 800c3e8:	fb02 f303 	mul.w	r3, r2, r3
 800c3ec:	3308      	adds	r3, #8
 800c3ee:	68fa      	ldr	r2, [r7, #12]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	3302      	adds	r3, #2
 800c3f4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	795b      	ldrb	r3, [r3, #5]
 800c3fa:	78fa      	ldrb	r2, [r7, #3]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d002      	beq.n	800c406 <USBH_FindInterface+0x4e>
 800c400:	78fb      	ldrb	r3, [r7, #3]
 800c402:	2bff      	cmp	r3, #255	; 0xff
 800c404:	d111      	bne.n	800c42a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c40a:	78ba      	ldrb	r2, [r7, #2]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d002      	beq.n	800c416 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c410:	78bb      	ldrb	r3, [r7, #2]
 800c412:	2bff      	cmp	r3, #255	; 0xff
 800c414:	d109      	bne.n	800c42a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c41a:	787a      	ldrb	r2, [r7, #1]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d002      	beq.n	800c426 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c420:	787b      	ldrb	r3, [r7, #1]
 800c422:	2bff      	cmp	r3, #255	; 0xff
 800c424:	d101      	bne.n	800c42a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c426:	7dfb      	ldrb	r3, [r7, #23]
 800c428:	e006      	b.n	800c438 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c42a:	7dfb      	ldrb	r3, [r7, #23]
 800c42c:	3301      	adds	r3, #1
 800c42e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c430:	7dfb      	ldrb	r3, [r7, #23]
 800c432:	2b01      	cmp	r3, #1
 800c434:	d9d6      	bls.n	800c3e4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c436:	23ff      	movs	r3, #255	; 0xff
}
 800c438:	4618      	mov	r0, r3
 800c43a:	371c      	adds	r7, #28
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr

0800c444 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f004 ff73 	bl	8011338 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c452:	2101      	movs	r1, #1
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f005 f88c 	bl	8011572 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c45a:	2300      	movs	r3, #0
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3708      	adds	r7, #8
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b088      	sub	sp, #32
 800c468:	af04      	add	r7, sp, #16
 800c46a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c46c:	2302      	movs	r3, #2
 800c46e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c470:	2300      	movs	r3, #0
 800c472:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d102      	bne.n	800c486 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2203      	movs	r2, #3
 800c484:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	2b0b      	cmp	r3, #11
 800c48e:	f200 81be 	bhi.w	800c80e <USBH_Process+0x3aa>
 800c492:	a201      	add	r2, pc, #4	; (adr r2, 800c498 <USBH_Process+0x34>)
 800c494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c498:	0800c4c9 	.word	0x0800c4c9
 800c49c:	0800c4fb 	.word	0x0800c4fb
 800c4a0:	0800c563 	.word	0x0800c563
 800c4a4:	0800c7a9 	.word	0x0800c7a9
 800c4a8:	0800c80f 	.word	0x0800c80f
 800c4ac:	0800c607 	.word	0x0800c607
 800c4b0:	0800c74f 	.word	0x0800c74f
 800c4b4:	0800c63d 	.word	0x0800c63d
 800c4b8:	0800c65d 	.word	0x0800c65d
 800c4bc:	0800c67d 	.word	0x0800c67d
 800c4c0:	0800c6c1 	.word	0x0800c6c1
 800c4c4:	0800c791 	.word	0x0800c791
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	f000 819e 	beq.w	800c812 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c4dc:	20c8      	movs	r0, #200	; 0xc8
 800c4de:	f005 f8bf 	bl	8011660 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f004 ff85 	bl	80113f2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c4f8:	e18b      	b.n	800c812 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c500:	2b01      	cmp	r3, #1
 800c502:	d107      	bne.n	800c514 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2202      	movs	r2, #2
 800c510:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c512:	e18d      	b.n	800c830 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c51a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c51e:	d914      	bls.n	800c54a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c526:	3301      	adds	r3, #1
 800c528:	b2da      	uxtb	r2, r3
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c536:	2b03      	cmp	r3, #3
 800c538:	d903      	bls.n	800c542 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	220d      	movs	r2, #13
 800c53e:	701a      	strb	r2, [r3, #0]
      break;
 800c540:	e176      	b.n	800c830 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2200      	movs	r2, #0
 800c546:	701a      	strb	r2, [r3, #0]
      break;
 800c548:	e172      	b.n	800c830 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c550:	f103 020a 	add.w	r2, r3, #10
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c55a:	200a      	movs	r0, #10
 800c55c:	f005 f880 	bl	8011660 <USBH_Delay>
      break;
 800c560:	e166      	b.n	800c830 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d005      	beq.n	800c578 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c572:	2104      	movs	r1, #4
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c578:	2064      	movs	r0, #100	; 0x64
 800c57a:	f005 f871 	bl	8011660 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f004 ff10 	bl	80113a4 <USBH_LL_GetSpeed>
 800c584:	4603      	mov	r3, r0
 800c586:	461a      	mov	r2, r3
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2205      	movs	r2, #5
 800c592:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c594:	2100      	movs	r1, #0
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f001 fa2b 	bl	800d9f2 <USBH_AllocPipe>
 800c59c:	4603      	mov	r3, r0
 800c59e:	461a      	mov	r2, r3
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c5a4:	2180      	movs	r1, #128	; 0x80
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f001 fa23 	bl	800d9f2 <USBH_AllocPipe>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	7919      	ldrb	r1, [r3, #4]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c5c8:	b292      	uxth	r2, r2
 800c5ca:	9202      	str	r2, [sp, #8]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	9201      	str	r2, [sp, #4]
 800c5d0:	9300      	str	r3, [sp, #0]
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2280      	movs	r2, #128	; 0x80
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f001 f9dc 	bl	800d994 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	7959      	ldrb	r1, [r3, #5]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c5f0:	b292      	uxth	r2, r2
 800c5f2:	9202      	str	r2, [sp, #8]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	9201      	str	r2, [sp, #4]
 800c5f8:	9300      	str	r3, [sp, #0]
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f001 f9c8 	bl	800d994 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c604:	e114      	b.n	800c830 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 f918 	bl	800c83c <USBH_HandleEnum>
 800c60c:	4603      	mov	r3, r0
 800c60e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c610:	7bbb      	ldrb	r3, [r7, #14]
 800c612:	b2db      	uxtb	r3, r3
 800c614:	2b00      	cmp	r3, #0
 800c616:	f040 80fe 	bne.w	800c816 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d103      	bne.n	800c634 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2208      	movs	r2, #8
 800c630:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c632:	e0f0      	b.n	800c816 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2207      	movs	r2, #7
 800c638:	701a      	strb	r2, [r3, #0]
      break;
 800c63a:	e0ec      	b.n	800c816 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c642:	2b00      	cmp	r3, #0
 800c644:	f000 80e9 	beq.w	800c81a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c64e:	2101      	movs	r1, #1
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2208      	movs	r2, #8
 800c658:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800c65a:	e0de      	b.n	800c81a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c662:	b29b      	uxth	r3, r3
 800c664:	4619      	mov	r1, r3
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 fc2c 	bl	800cec4 <USBH_SetCfg>
 800c66c:	4603      	mov	r3, r0
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f040 80d5 	bne.w	800c81e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2209      	movs	r2, #9
 800c678:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c67a:	e0d0      	b.n	800c81e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c682:	f003 0320 	and.w	r3, r3, #32
 800c686:	2b00      	cmp	r3, #0
 800c688:	d016      	beq.n	800c6b8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800c68a:	2101      	movs	r1, #1
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 fc3c 	bl	800cf0a <USBH_SetFeature>
 800c692:	4603      	mov	r3, r0
 800c694:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c696:	7bbb      	ldrb	r3, [r7, #14]
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d103      	bne.n	800c6a6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	220a      	movs	r2, #10
 800c6a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c6a4:	e0bd      	b.n	800c822 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800c6a6:	7bbb      	ldrb	r3, [r7, #14]
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	2b03      	cmp	r3, #3
 800c6ac:	f040 80b9 	bne.w	800c822 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	220a      	movs	r2, #10
 800c6b4:	701a      	strb	r2, [r3, #0]
      break;
 800c6b6:	e0b4      	b.n	800c822 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	220a      	movs	r2, #10
 800c6bc:	701a      	strb	r2, [r3, #0]
      break;
 800c6be:	e0b0      	b.n	800c822 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f000 80ad 	beq.w	800c826 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	73fb      	strb	r3, [r7, #15]
 800c6d8:	e016      	b.n	800c708 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c6da:	7bfa      	ldrb	r2, [r7, #15]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	32de      	adds	r2, #222	; 0xde
 800c6e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6e4:	791a      	ldrb	r2, [r3, #4]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d108      	bne.n	800c702 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c6f0:	7bfa      	ldrb	r2, [r7, #15]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	32de      	adds	r2, #222	; 0xde
 800c6f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c700:	e005      	b.n	800c70e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c702:	7bfb      	ldrb	r3, [r7, #15]
 800c704:	3301      	adds	r3, #1
 800c706:	73fb      	strb	r3, [r7, #15]
 800c708:	7bfb      	ldrb	r3, [r7, #15]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d0e5      	beq.n	800c6da <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c714:	2b00      	cmp	r3, #0
 800c716:	d016      	beq.n	800c746 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	4798      	blx	r3
 800c724:	4603      	mov	r3, r0
 800c726:	2b00      	cmp	r3, #0
 800c728:	d109      	bne.n	800c73e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2206      	movs	r2, #6
 800c72e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c736:	2103      	movs	r1, #3
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c73c:	e073      	b.n	800c826 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	220d      	movs	r2, #13
 800c742:	701a      	strb	r2, [r3, #0]
      break;
 800c744:	e06f      	b.n	800c826 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	220d      	movs	r2, #13
 800c74a:	701a      	strb	r2, [r3, #0]
      break;
 800c74c:	e06b      	b.n	800c826 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c754:	2b00      	cmp	r3, #0
 800c756:	d017      	beq.n	800c788 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c75e:	691b      	ldr	r3, [r3, #16]
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	4798      	blx	r3
 800c764:	4603      	mov	r3, r0
 800c766:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c768:	7bbb      	ldrb	r3, [r7, #14]
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d103      	bne.n	800c778 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	220b      	movs	r2, #11
 800c774:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c776:	e058      	b.n	800c82a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800c778:	7bbb      	ldrb	r3, [r7, #14]
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	d154      	bne.n	800c82a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	220d      	movs	r2, #13
 800c784:	701a      	strb	r2, [r3, #0]
      break;
 800c786:	e050      	b.n	800c82a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	220d      	movs	r2, #13
 800c78c:	701a      	strb	r2, [r3, #0]
      break;
 800c78e:	e04c      	b.n	800c82a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c796:	2b00      	cmp	r3, #0
 800c798:	d049      	beq.n	800c82e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7a0:	695b      	ldr	r3, [r3, #20]
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	4798      	blx	r3
      }
      break;
 800c7a6:	e042      	b.n	800c82e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f7ff fd67 	bl	800c284 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d009      	beq.n	800c7d4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7c6:	68db      	ldr	r3, [r3, #12]
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d005      	beq.n	800c7ea <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c7e4:	2105      	movs	r1, #5
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d107      	bne.n	800c806 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f7ff fe20 	bl	800c444 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c804:	e014      	b.n	800c830 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f004 fd96 	bl	8011338 <USBH_LL_Start>
      break;
 800c80c:	e010      	b.n	800c830 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800c80e:	bf00      	nop
 800c810:	e00e      	b.n	800c830 <USBH_Process+0x3cc>
      break;
 800c812:	bf00      	nop
 800c814:	e00c      	b.n	800c830 <USBH_Process+0x3cc>
      break;
 800c816:	bf00      	nop
 800c818:	e00a      	b.n	800c830 <USBH_Process+0x3cc>
    break;
 800c81a:	bf00      	nop
 800c81c:	e008      	b.n	800c830 <USBH_Process+0x3cc>
      break;
 800c81e:	bf00      	nop
 800c820:	e006      	b.n	800c830 <USBH_Process+0x3cc>
      break;
 800c822:	bf00      	nop
 800c824:	e004      	b.n	800c830 <USBH_Process+0x3cc>
      break;
 800c826:	bf00      	nop
 800c828:	e002      	b.n	800c830 <USBH_Process+0x3cc>
      break;
 800c82a:	bf00      	nop
 800c82c:	e000      	b.n	800c830 <USBH_Process+0x3cc>
      break;
 800c82e:	bf00      	nop
  }
  return USBH_OK;
 800c830:	2300      	movs	r3, #0
}
 800c832:	4618      	mov	r0, r3
 800c834:	3710      	adds	r7, #16
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop

0800c83c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b088      	sub	sp, #32
 800c840:	af04      	add	r7, sp, #16
 800c842:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c844:	2301      	movs	r3, #1
 800c846:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c848:	2301      	movs	r3, #1
 800c84a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	785b      	ldrb	r3, [r3, #1]
 800c850:	2b07      	cmp	r3, #7
 800c852:	f200 81c1 	bhi.w	800cbd8 <USBH_HandleEnum+0x39c>
 800c856:	a201      	add	r2, pc, #4	; (adr r2, 800c85c <USBH_HandleEnum+0x20>)
 800c858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c85c:	0800c87d 	.word	0x0800c87d
 800c860:	0800c93b 	.word	0x0800c93b
 800c864:	0800c9a5 	.word	0x0800c9a5
 800c868:	0800ca33 	.word	0x0800ca33
 800c86c:	0800ca9d 	.word	0x0800ca9d
 800c870:	0800cb0d 	.word	0x0800cb0d
 800c874:	0800cb53 	.word	0x0800cb53
 800c878:	0800cb99 	.word	0x0800cb99
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c87c:	2108      	movs	r1, #8
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 fa50 	bl	800cd24 <USBH_Get_DevDesc>
 800c884:	4603      	mov	r3, r0
 800c886:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c888:	7bbb      	ldrb	r3, [r7, #14]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d130      	bne.n	800c8f0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2201      	movs	r2, #1
 800c89c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	7919      	ldrb	r1, [r3, #4]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c8b2:	b292      	uxth	r2, r2
 800c8b4:	9202      	str	r2, [sp, #8]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	9201      	str	r2, [sp, #4]
 800c8ba:	9300      	str	r3, [sp, #0]
 800c8bc:	4603      	mov	r3, r0
 800c8be:	2280      	movs	r2, #128	; 0x80
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f001 f867 	bl	800d994 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	7959      	ldrb	r1, [r3, #5]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c8da:	b292      	uxth	r2, r2
 800c8dc:	9202      	str	r2, [sp, #8]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	9201      	str	r2, [sp, #4]
 800c8e2:	9300      	str	r3, [sp, #0]
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f001 f853 	bl	800d994 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c8ee:	e175      	b.n	800cbdc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c8f0:	7bbb      	ldrb	r3, [r7, #14]
 800c8f2:	2b03      	cmp	r3, #3
 800c8f4:	f040 8172 	bne.w	800cbdc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c8fe:	3301      	adds	r3, #1
 800c900:	b2da      	uxtb	r2, r3
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c90e:	2b03      	cmp	r3, #3
 800c910:	d903      	bls.n	800c91a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	220d      	movs	r2, #13
 800c916:	701a      	strb	r2, [r3, #0]
      break;
 800c918:	e160      	b.n	800cbdc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	795b      	ldrb	r3, [r3, #5]
 800c91e:	4619      	mov	r1, r3
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f001 f887 	bl	800da34 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	791b      	ldrb	r3, [r3, #4]
 800c92a:	4619      	mov	r1, r3
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f001 f881 	bl	800da34 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2200      	movs	r2, #0
 800c936:	701a      	strb	r2, [r3, #0]
      break;
 800c938:	e150      	b.n	800cbdc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c93a:	2112      	movs	r1, #18
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 f9f1 	bl	800cd24 <USBH_Get_DevDesc>
 800c942:	4603      	mov	r3, r0
 800c944:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c946:	7bbb      	ldrb	r3, [r7, #14]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d103      	bne.n	800c954 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2202      	movs	r2, #2
 800c950:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c952:	e145      	b.n	800cbe0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c954:	7bbb      	ldrb	r3, [r7, #14]
 800c956:	2b03      	cmp	r3, #3
 800c958:	f040 8142 	bne.w	800cbe0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c962:	3301      	adds	r3, #1
 800c964:	b2da      	uxtb	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c972:	2b03      	cmp	r3, #3
 800c974:	d903      	bls.n	800c97e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	220d      	movs	r2, #13
 800c97a:	701a      	strb	r2, [r3, #0]
      break;
 800c97c:	e130      	b.n	800cbe0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	795b      	ldrb	r3, [r3, #5]
 800c982:	4619      	mov	r1, r3
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f001 f855 	bl	800da34 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	791b      	ldrb	r3, [r3, #4]
 800c98e:	4619      	mov	r1, r3
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f001 f84f 	bl	800da34 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2200      	movs	r2, #0
 800c99a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	701a      	strb	r2, [r3, #0]
      break;
 800c9a2:	e11d      	b.n	800cbe0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c9a4:	2101      	movs	r1, #1
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f000 fa68 	bl	800ce7c <USBH_SetAddress>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c9b0:	7bbb      	ldrb	r3, [r7, #14]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d132      	bne.n	800ca1c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c9b6:	2002      	movs	r0, #2
 800c9b8:	f004 fe52 	bl	8011660 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2201      	movs	r2, #1
 800c9c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2203      	movs	r2, #3
 800c9c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	7919      	ldrb	r1, [r3, #4]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c9de:	b292      	uxth	r2, r2
 800c9e0:	9202      	str	r2, [sp, #8]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	9201      	str	r2, [sp, #4]
 800c9e6:	9300      	str	r3, [sp, #0]
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2280      	movs	r2, #128	; 0x80
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f000 ffd1 	bl	800d994 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	7959      	ldrb	r1, [r3, #5]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ca06:	b292      	uxth	r2, r2
 800ca08:	9202      	str	r2, [sp, #8]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	9201      	str	r2, [sp, #4]
 800ca0e:	9300      	str	r3, [sp, #0]
 800ca10:	4603      	mov	r3, r0
 800ca12:	2200      	movs	r2, #0
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 ffbd 	bl	800d994 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ca1a:	e0e3      	b.n	800cbe4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ca1c:	7bbb      	ldrb	r3, [r7, #14]
 800ca1e:	2b03      	cmp	r3, #3
 800ca20:	f040 80e0 	bne.w	800cbe4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	220d      	movs	r2, #13
 800ca28:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	705a      	strb	r2, [r3, #1]
      break;
 800ca30:	e0d8      	b.n	800cbe4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ca32:	2109      	movs	r1, #9
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 f99d 	bl	800cd74 <USBH_Get_CfgDesc>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ca3e:	7bbb      	ldrb	r3, [r7, #14]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d103      	bne.n	800ca4c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2204      	movs	r2, #4
 800ca48:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ca4a:	e0cd      	b.n	800cbe8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ca4c:	7bbb      	ldrb	r3, [r7, #14]
 800ca4e:	2b03      	cmp	r3, #3
 800ca50:	f040 80ca 	bne.w	800cbe8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	b2da      	uxtb	r2, r3
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ca6a:	2b03      	cmp	r3, #3
 800ca6c:	d903      	bls.n	800ca76 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	220d      	movs	r2, #13
 800ca72:	701a      	strb	r2, [r3, #0]
      break;
 800ca74:	e0b8      	b.n	800cbe8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	795b      	ldrb	r3, [r3, #5]
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 ffd9 	bl	800da34 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	791b      	ldrb	r3, [r3, #4]
 800ca86:	4619      	mov	r1, r3
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 ffd3 	bl	800da34 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2200      	movs	r2, #0
 800ca92:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	701a      	strb	r2, [r3, #0]
      break;
 800ca9a:	e0a5      	b.n	800cbe8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800caa2:	4619      	mov	r1, r3
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 f965 	bl	800cd74 <USBH_Get_CfgDesc>
 800caaa:	4603      	mov	r3, r0
 800caac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800caae:	7bbb      	ldrb	r3, [r7, #14]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d103      	bne.n	800cabc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2205      	movs	r2, #5
 800cab8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800caba:	e097      	b.n	800cbec <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cabc:	7bbb      	ldrb	r3, [r7, #14]
 800cabe:	2b03      	cmp	r3, #3
 800cac0:	f040 8094 	bne.w	800cbec <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800caca:	3301      	adds	r3, #1
 800cacc:	b2da      	uxtb	r2, r3
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cada:	2b03      	cmp	r3, #3
 800cadc:	d903      	bls.n	800cae6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	220d      	movs	r2, #13
 800cae2:	701a      	strb	r2, [r3, #0]
      break;
 800cae4:	e082      	b.n	800cbec <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	795b      	ldrb	r3, [r3, #5]
 800caea:	4619      	mov	r1, r3
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f000 ffa1 	bl	800da34 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	791b      	ldrb	r3, [r3, #4]
 800caf6:	4619      	mov	r1, r3
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 ff9b 	bl	800da34 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2200      	movs	r2, #0
 800cb02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2200      	movs	r2, #0
 800cb08:	701a      	strb	r2, [r3, #0]
      break;
 800cb0a:	e06f      	b.n	800cbec <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d019      	beq.n	800cb4a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cb22:	23ff      	movs	r3, #255	; 0xff
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 f949 	bl	800cdbc <USBH_Get_StringDesc>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cb2e:	7bbb      	ldrb	r3, [r7, #14]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d103      	bne.n	800cb3c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2206      	movs	r2, #6
 800cb38:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cb3a:	e059      	b.n	800cbf0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cb3c:	7bbb      	ldrb	r3, [r7, #14]
 800cb3e:	2b03      	cmp	r3, #3
 800cb40:	d156      	bne.n	800cbf0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2206      	movs	r2, #6
 800cb46:	705a      	strb	r2, [r3, #1]
      break;
 800cb48:	e052      	b.n	800cbf0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2206      	movs	r2, #6
 800cb4e:	705a      	strb	r2, [r3, #1]
      break;
 800cb50:	e04e      	b.n	800cbf0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d019      	beq.n	800cb90 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cb68:	23ff      	movs	r3, #255	; 0xff
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f000 f926 	bl	800cdbc <USBH_Get_StringDesc>
 800cb70:	4603      	mov	r3, r0
 800cb72:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cb74:	7bbb      	ldrb	r3, [r7, #14]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d103      	bne.n	800cb82 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2207      	movs	r2, #7
 800cb7e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cb80:	e038      	b.n	800cbf4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cb82:	7bbb      	ldrb	r3, [r7, #14]
 800cb84:	2b03      	cmp	r3, #3
 800cb86:	d135      	bne.n	800cbf4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2207      	movs	r2, #7
 800cb8c:	705a      	strb	r2, [r3, #1]
      break;
 800cb8e:	e031      	b.n	800cbf4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2207      	movs	r2, #7
 800cb94:	705a      	strb	r2, [r3, #1]
      break;
 800cb96:	e02d      	b.n	800cbf4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d017      	beq.n	800cbd2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cbae:	23ff      	movs	r3, #255	; 0xff
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f000 f903 	bl	800cdbc <USBH_Get_StringDesc>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cbba:	7bbb      	ldrb	r3, [r7, #14]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d102      	bne.n	800cbc6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800cbc4:	e018      	b.n	800cbf8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cbc6:	7bbb      	ldrb	r3, [r7, #14]
 800cbc8:	2b03      	cmp	r3, #3
 800cbca:	d115      	bne.n	800cbf8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	73fb      	strb	r3, [r7, #15]
      break;
 800cbd0:	e012      	b.n	800cbf8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	73fb      	strb	r3, [r7, #15]
      break;
 800cbd6:	e00f      	b.n	800cbf8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800cbd8:	bf00      	nop
 800cbda:	e00e      	b.n	800cbfa <USBH_HandleEnum+0x3be>
      break;
 800cbdc:	bf00      	nop
 800cbde:	e00c      	b.n	800cbfa <USBH_HandleEnum+0x3be>
      break;
 800cbe0:	bf00      	nop
 800cbe2:	e00a      	b.n	800cbfa <USBH_HandleEnum+0x3be>
      break;
 800cbe4:	bf00      	nop
 800cbe6:	e008      	b.n	800cbfa <USBH_HandleEnum+0x3be>
      break;
 800cbe8:	bf00      	nop
 800cbea:	e006      	b.n	800cbfa <USBH_HandleEnum+0x3be>
      break;
 800cbec:	bf00      	nop
 800cbee:	e004      	b.n	800cbfa <USBH_HandleEnum+0x3be>
      break;
 800cbf0:	bf00      	nop
 800cbf2:	e002      	b.n	800cbfa <USBH_HandleEnum+0x3be>
      break;
 800cbf4:	bf00      	nop
 800cbf6:	e000      	b.n	800cbfa <USBH_HandleEnum+0x3be>
      break;
 800cbf8:	bf00      	nop
  }
  return Status;
 800cbfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3710      	adds	r7, #16
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	683a      	ldr	r2, [r7, #0]
 800cc12:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800cc16:	bf00      	nop
 800cc18:	370c      	adds	r7, #12
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr

0800cc22 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cc22:	b580      	push	{r7, lr}
 800cc24:	b082      	sub	sp, #8
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cc30:	1c5a      	adds	r2, r3, #1
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f000 f804 	bl	800cc46 <USBH_HandleSof>
}
 800cc3e:	bf00      	nop
 800cc40:	3708      	adds	r7, #8
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b082      	sub	sp, #8
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	2b0b      	cmp	r3, #11
 800cc56:	d10a      	bne.n	800cc6e <USBH_HandleSof+0x28>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d005      	beq.n	800cc6e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc68:	699b      	ldr	r3, [r3, #24]
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	4798      	blx	r3
  }
}
 800cc6e:	bf00      	nop
 800cc70:	3708      	adds	r7, #8
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800cc76:	b480      	push	{r7}
 800cc78:	b083      	sub	sp, #12
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2201      	movs	r2, #1
 800cc82:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800cc86:	bf00      	nop
}
 800cc88:	370c      	adds	r7, #12
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr

0800cc92 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800cc92:	b480      	push	{r7}
 800cc94:	b083      	sub	sp, #12
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800cca2:	bf00      	nop
}
 800cca4:	370c      	adds	r7, #12
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr

0800ccae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ccae:	b480      	push	{r7}
 800ccb0:	b083      	sub	sp, #12
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2201      	movs	r2, #1
 800ccba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ccce:	2300      	movs	r3, #0
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	370c      	adds	r7, #12
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2201      	movs	r2, #1
 800cce8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f004 fb36 	bl	801136e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	791b      	ldrb	r3, [r3, #4]
 800cd06:	4619      	mov	r1, r3
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 fe93 	bl	800da34 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	795b      	ldrb	r3, [r3, #5]
 800cd12:	4619      	mov	r1, r3
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f000 fe8d 	bl	800da34 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800cd1a:	2300      	movs	r3, #0
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3708      	adds	r7, #8
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b086      	sub	sp, #24
 800cd28:	af02      	add	r7, sp, #8
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800cd36:	78fb      	ldrb	r3, [r7, #3]
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	9300      	str	r3, [sp, #0]
 800cd3c:	4613      	mov	r3, r2
 800cd3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd42:	2100      	movs	r1, #0
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f000 f864 	bl	800ce12 <USBH_GetDescriptor>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800cd4e:	7bfb      	ldrb	r3, [r7, #15]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d10a      	bne.n	800cd6a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f203 3026 	addw	r0, r3, #806	; 0x326
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cd60:	78fa      	ldrb	r2, [r7, #3]
 800cd62:	b292      	uxth	r2, r2
 800cd64:	4619      	mov	r1, r3
 800cd66:	f000 f919 	bl	800cf9c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800cd6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3710      	adds	r7, #16
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b086      	sub	sp, #24
 800cd78:	af02      	add	r7, sp, #8
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	460b      	mov	r3, r1
 800cd7e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	331c      	adds	r3, #28
 800cd84:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800cd86:	887b      	ldrh	r3, [r7, #2]
 800cd88:	9300      	str	r3, [sp, #0]
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd90:	2100      	movs	r1, #0
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f000 f83d 	bl	800ce12 <USBH_GetDescriptor>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800cd9c:	7bfb      	ldrb	r3, [r7, #15]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d107      	bne.n	800cdb2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800cda2:	887b      	ldrh	r3, [r7, #2]
 800cda4:	461a      	mov	r2, r3
 800cda6:	68b9      	ldr	r1, [r7, #8]
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 f989 	bl	800d0c0 <USBH_ParseCfgDesc>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cdb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b088      	sub	sp, #32
 800cdc0:	af02      	add	r7, sp, #8
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	607a      	str	r2, [r7, #4]
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	460b      	mov	r3, r1
 800cdca:	72fb      	strb	r3, [r7, #11]
 800cdcc:	4613      	mov	r3, r2
 800cdce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800cdd0:	7afb      	ldrb	r3, [r7, #11]
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800cdd8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800cde0:	893b      	ldrh	r3, [r7, #8]
 800cde2:	9300      	str	r3, [sp, #0]
 800cde4:	460b      	mov	r3, r1
 800cde6:	2100      	movs	r1, #0
 800cde8:	68f8      	ldr	r0, [r7, #12]
 800cdea:	f000 f812 	bl	800ce12 <USBH_GetDescriptor>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800cdf2:	7dfb      	ldrb	r3, [r7, #23]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d107      	bne.n	800ce08 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cdfe:	893a      	ldrh	r2, [r7, #8]
 800ce00:	6879      	ldr	r1, [r7, #4]
 800ce02:	4618      	mov	r0, r3
 800ce04:	f000 fb26 	bl	800d454 <USBH_ParseStringDesc>
  }

  return status;
 800ce08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3718      	adds	r7, #24
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ce12:	b580      	push	{r7, lr}
 800ce14:	b084      	sub	sp, #16
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	60f8      	str	r0, [r7, #12]
 800ce1a:	607b      	str	r3, [r7, #4]
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	72fb      	strb	r3, [r7, #11]
 800ce20:	4613      	mov	r3, r2
 800ce22:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	789b      	ldrb	r3, [r3, #2]
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	d11c      	bne.n	800ce66 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ce2c:	7afb      	ldrb	r3, [r7, #11]
 800ce2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce32:	b2da      	uxtb	r2, r3
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2206      	movs	r2, #6
 800ce3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	893a      	ldrh	r2, [r7, #8]
 800ce42:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ce44:	893b      	ldrh	r3, [r7, #8]
 800ce46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ce4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ce4e:	d104      	bne.n	800ce5a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f240 4209 	movw	r2, #1033	; 0x409
 800ce56:	829a      	strh	r2, [r3, #20]
 800ce58:	e002      	b.n	800ce60 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	8b3a      	ldrh	r2, [r7, #24]
 800ce64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ce66:	8b3b      	ldrh	r3, [r7, #24]
 800ce68:	461a      	mov	r2, r3
 800ce6a:	6879      	ldr	r1, [r7, #4]
 800ce6c:	68f8      	ldr	r0, [r7, #12]
 800ce6e:	f000 fb3f 	bl	800d4f0 <USBH_CtlReq>
 800ce72:	4603      	mov	r3, r0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	460b      	mov	r3, r1
 800ce86:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	789b      	ldrb	r3, [r3, #2]
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d10f      	bne.n	800ceb0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2200      	movs	r2, #0
 800ce94:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2205      	movs	r2, #5
 800ce9a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ce9c:	78fb      	ldrb	r3, [r7, #3]
 800ce9e:	b29a      	uxth	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2200      	movs	r2, #0
 800cea8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2200      	movs	r2, #0
 800ceae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	2100      	movs	r1, #0
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f000 fb1b 	bl	800d4f0 <USBH_CtlReq>
 800ceba:	4603      	mov	r3, r0
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3708      	adds	r7, #8
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b082      	sub	sp, #8
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	460b      	mov	r3, r1
 800cece:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	789b      	ldrb	r3, [r3, #2]
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d10e      	bne.n	800cef6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2209      	movs	r2, #9
 800cee2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	887a      	ldrh	r2, [r7, #2]
 800cee8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2200      	movs	r2, #0
 800ceee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cef6:	2200      	movs	r2, #0
 800cef8:	2100      	movs	r1, #0
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 faf8 	bl	800d4f0 <USBH_CtlReq>
 800cf00:	4603      	mov	r3, r0
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3708      	adds	r7, #8
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}

0800cf0a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800cf0a:	b580      	push	{r7, lr}
 800cf0c:	b082      	sub	sp, #8
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	6078      	str	r0, [r7, #4]
 800cf12:	460b      	mov	r3, r1
 800cf14:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	789b      	ldrb	r3, [r3, #2]
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d10f      	bne.n	800cf3e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2200      	movs	r2, #0
 800cf22:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2203      	movs	r2, #3
 800cf28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800cf2a:	78fb      	ldrb	r3, [r7, #3]
 800cf2c:	b29a      	uxth	r2, r3
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2200      	movs	r2, #0
 800cf36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cf3e:	2200      	movs	r2, #0
 800cf40:	2100      	movs	r1, #0
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 fad4 	bl	800d4f0 <USBH_CtlReq>
 800cf48:	4603      	mov	r3, r0
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3708      	adds	r7, #8
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b082      	sub	sp, #8
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
 800cf5a:	460b      	mov	r3, r1
 800cf5c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	789b      	ldrb	r3, [r3, #2]
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d10f      	bne.n	800cf86 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2202      	movs	r2, #2
 800cf6a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2201      	movs	r2, #1
 800cf70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2200      	movs	r2, #0
 800cf76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800cf78:	78fb      	ldrb	r3, [r7, #3]
 800cf7a:	b29a      	uxth	r2, r3
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2200      	movs	r2, #0
 800cf84:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800cf86:	2200      	movs	r2, #0
 800cf88:	2100      	movs	r1, #0
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f000 fab0 	bl	800d4f0 <USBH_CtlReq>
 800cf90:	4603      	mov	r3, r0
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3708      	adds	r7, #8
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
	...

0800cf9c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b085      	sub	sp, #20
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	60f8      	str	r0, [r7, #12]
 800cfa4:	60b9      	str	r1, [r7, #8]
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	781a      	ldrb	r2, [r3, #0]
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	785a      	ldrb	r2, [r3, #1]
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	3302      	adds	r3, #2
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	b29a      	uxth	r2, r3
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	3303      	adds	r3, #3
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	021b      	lsls	r3, r3, #8
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	b29a      	uxth	r2, r3
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	791a      	ldrb	r2, [r3, #4]
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	795a      	ldrb	r2, [r3, #5]
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	799a      	ldrb	r2, [r3, #6]
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	79da      	ldrb	r2, [r3, #7]
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	79db      	ldrb	r3, [r3, #7]
 800cffa:	2b20      	cmp	r3, #32
 800cffc:	dc0f      	bgt.n	800d01e <USBH_ParseDevDesc+0x82>
 800cffe:	2b08      	cmp	r3, #8
 800d000:	db14      	blt.n	800d02c <USBH_ParseDevDesc+0x90>
 800d002:	3b08      	subs	r3, #8
 800d004:	4a2d      	ldr	r2, [pc, #180]	; (800d0bc <USBH_ParseDevDesc+0x120>)
 800d006:	fa22 f303 	lsr.w	r3, r2, r3
 800d00a:	f003 0301 	and.w	r3, r3, #1
 800d00e:	2b00      	cmp	r3, #0
 800d010:	bf14      	ite	ne
 800d012:	2301      	movne	r3, #1
 800d014:	2300      	moveq	r3, #0
 800d016:	b2db      	uxtb	r3, r3
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d102      	bne.n	800d022 <USBH_ParseDevDesc+0x86>
 800d01c:	e006      	b.n	800d02c <USBH_ParseDevDesc+0x90>
 800d01e:	2b40      	cmp	r3, #64	; 0x40
 800d020:	d104      	bne.n	800d02c <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	79da      	ldrb	r2, [r3, #7]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	71da      	strb	r2, [r3, #7]
      break;
 800d02a:	e003      	b.n	800d034 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2240      	movs	r2, #64	; 0x40
 800d030:	71da      	strb	r2, [r3, #7]
      break;
 800d032:	bf00      	nop
  }

  if (length > 8U)
 800d034:	88fb      	ldrh	r3, [r7, #6]
 800d036:	2b08      	cmp	r3, #8
 800d038:	d939      	bls.n	800d0ae <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	3308      	adds	r3, #8
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	b29a      	uxth	r2, r3
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	3309      	adds	r3, #9
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	b29b      	uxth	r3, r3
 800d04a:	021b      	lsls	r3, r3, #8
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	4313      	orrs	r3, r2
 800d050:	b29a      	uxth	r2, r3
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	330a      	adds	r3, #10
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	b29a      	uxth	r2, r3
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	330b      	adds	r3, #11
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	b29b      	uxth	r3, r3
 800d066:	021b      	lsls	r3, r3, #8
 800d068:	b29b      	uxth	r3, r3
 800d06a:	4313      	orrs	r3, r2
 800d06c:	b29a      	uxth	r2, r3
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	330c      	adds	r3, #12
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	b29a      	uxth	r2, r3
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	330d      	adds	r3, #13
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	b29b      	uxth	r3, r3
 800d082:	021b      	lsls	r3, r3, #8
 800d084:	b29b      	uxth	r3, r3
 800d086:	4313      	orrs	r3, r2
 800d088:	b29a      	uxth	r2, r3
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	7b9a      	ldrb	r2, [r3, #14]
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	7bda      	ldrb	r2, [r3, #15]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	7c1a      	ldrb	r2, [r3, #16]
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	7c5a      	ldrb	r2, [r3, #17]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	745a      	strb	r2, [r3, #17]
  }
}
 800d0ae:	bf00      	nop
 800d0b0:	3714      	adds	r7, #20
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop
 800d0bc:	01000101 	.word	0x01000101

0800d0c0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b08c      	sub	sp, #48	; 0x30
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	4613      	mov	r3, r2
 800d0cc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d0d4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	781a      	ldrb	r2, [r3, #0]
 800d0f4:	6a3b      	ldr	r3, [r7, #32]
 800d0f6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	785a      	ldrb	r2, [r3, #1]
 800d0fc:	6a3b      	ldr	r3, [r7, #32]
 800d0fe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	3302      	adds	r3, #2
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	b29a      	uxth	r2, r3
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	3303      	adds	r3, #3
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	b29b      	uxth	r3, r3
 800d110:	021b      	lsls	r3, r3, #8
 800d112:	b29b      	uxth	r3, r3
 800d114:	4313      	orrs	r3, r2
 800d116:	b29b      	uxth	r3, r3
 800d118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d11c:	bf28      	it	cs
 800d11e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800d122:	b29a      	uxth	r2, r3
 800d124:	6a3b      	ldr	r3, [r7, #32]
 800d126:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	791a      	ldrb	r2, [r3, #4]
 800d12c:	6a3b      	ldr	r3, [r7, #32]
 800d12e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	795a      	ldrb	r2, [r3, #5]
 800d134:	6a3b      	ldr	r3, [r7, #32]
 800d136:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	799a      	ldrb	r2, [r3, #6]
 800d13c:	6a3b      	ldr	r3, [r7, #32]
 800d13e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	79da      	ldrb	r2, [r3, #7]
 800d144:	6a3b      	ldr	r3, [r7, #32]
 800d146:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	7a1a      	ldrb	r2, [r3, #8]
 800d14c:	6a3b      	ldr	r3, [r7, #32]
 800d14e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800d150:	6a3b      	ldr	r3, [r7, #32]
 800d152:	781b      	ldrb	r3, [r3, #0]
 800d154:	2b09      	cmp	r3, #9
 800d156:	d002      	beq.n	800d15e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d158:	6a3b      	ldr	r3, [r7, #32]
 800d15a:	2209      	movs	r2, #9
 800d15c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d15e:	88fb      	ldrh	r3, [r7, #6]
 800d160:	2b09      	cmp	r3, #9
 800d162:	f240 809d 	bls.w	800d2a0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800d166:	2309      	movs	r3, #9
 800d168:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d16a:	2300      	movs	r3, #0
 800d16c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d16e:	e081      	b.n	800d274 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d170:	f107 0316 	add.w	r3, r7, #22
 800d174:	4619      	mov	r1, r3
 800d176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d178:	f000 f99f 	bl	800d4ba <USBH_GetNextDesc>
 800d17c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d180:	785b      	ldrb	r3, [r3, #1]
 800d182:	2b04      	cmp	r3, #4
 800d184:	d176      	bne.n	800d274 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	2b09      	cmp	r3, #9
 800d18c:	d002      	beq.n	800d194 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d190:	2209      	movs	r2, #9
 800d192:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d198:	221a      	movs	r2, #26
 800d19a:	fb02 f303 	mul.w	r3, r2, r3
 800d19e:	3308      	adds	r3, #8
 800d1a0:	6a3a      	ldr	r2, [r7, #32]
 800d1a2:	4413      	add	r3, r2
 800d1a4:	3302      	adds	r3, #2
 800d1a6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d1a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1aa:	69f8      	ldr	r0, [r7, #28]
 800d1ac:	f000 f87e 	bl	800d2ac <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d1ba:	e043      	b.n	800d244 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d1bc:	f107 0316 	add.w	r3, r7, #22
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1c4:	f000 f979 	bl	800d4ba <USBH_GetNextDesc>
 800d1c8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1cc:	785b      	ldrb	r3, [r3, #1]
 800d1ce:	2b05      	cmp	r3, #5
 800d1d0:	d138      	bne.n	800d244 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800d1d2:	69fb      	ldr	r3, [r7, #28]
 800d1d4:	795b      	ldrb	r3, [r3, #5]
 800d1d6:	2b01      	cmp	r3, #1
 800d1d8:	d10f      	bne.n	800d1fa <USBH_ParseCfgDesc+0x13a>
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	799b      	ldrb	r3, [r3, #6]
 800d1de:	2b02      	cmp	r3, #2
 800d1e0:	d10b      	bne.n	800d1fa <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d1e2:	69fb      	ldr	r3, [r7, #28]
 800d1e4:	79db      	ldrb	r3, [r3, #7]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d10f      	bne.n	800d20a <USBH_ParseCfgDesc+0x14a>
 800d1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	2b09      	cmp	r3, #9
 800d1f0:	d00b      	beq.n	800d20a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800d1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f4:	2209      	movs	r2, #9
 800d1f6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d1f8:	e007      	b.n	800d20a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800d1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	2b07      	cmp	r3, #7
 800d200:	d004      	beq.n	800d20c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d204:	2207      	movs	r2, #7
 800d206:	701a      	strb	r2, [r3, #0]
 800d208:	e000      	b.n	800d20c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d20a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d20c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d210:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d214:	3201      	adds	r2, #1
 800d216:	00d2      	lsls	r2, r2, #3
 800d218:	211a      	movs	r1, #26
 800d21a:	fb01 f303 	mul.w	r3, r1, r3
 800d21e:	4413      	add	r3, r2
 800d220:	3308      	adds	r3, #8
 800d222:	6a3a      	ldr	r2, [r7, #32]
 800d224:	4413      	add	r3, r2
 800d226:	3304      	adds	r3, #4
 800d228:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d22a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d22c:	69b9      	ldr	r1, [r7, #24]
 800d22e:	68f8      	ldr	r0, [r7, #12]
 800d230:	f000 f86b 	bl	800d30a <USBH_ParseEPDesc>
 800d234:	4603      	mov	r3, r0
 800d236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800d23a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d23e:	3301      	adds	r3, #1
 800d240:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	791b      	ldrb	r3, [r3, #4]
 800d248:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d204      	bcs.n	800d25a <USBH_ParseCfgDesc+0x19a>
 800d250:	6a3b      	ldr	r3, [r7, #32]
 800d252:	885a      	ldrh	r2, [r3, #2]
 800d254:	8afb      	ldrh	r3, [r7, #22]
 800d256:	429a      	cmp	r2, r3
 800d258:	d8b0      	bhi.n	800d1bc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	791b      	ldrb	r3, [r3, #4]
 800d25e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d262:	429a      	cmp	r2, r3
 800d264:	d201      	bcs.n	800d26a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800d266:	2303      	movs	r3, #3
 800d268:	e01c      	b.n	800d2a4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800d26a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d26e:	3301      	adds	r3, #1
 800d270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d805      	bhi.n	800d288 <USBH_ParseCfgDesc+0x1c8>
 800d27c:	6a3b      	ldr	r3, [r7, #32]
 800d27e:	885a      	ldrh	r2, [r3, #2]
 800d280:	8afb      	ldrh	r3, [r7, #22]
 800d282:	429a      	cmp	r2, r3
 800d284:	f63f af74 	bhi.w	800d170 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d288:	6a3b      	ldr	r3, [r7, #32]
 800d28a:	791b      	ldrb	r3, [r3, #4]
 800d28c:	2b02      	cmp	r3, #2
 800d28e:	bf28      	it	cs
 800d290:	2302      	movcs	r3, #2
 800d292:	b2db      	uxtb	r3, r3
 800d294:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d298:	429a      	cmp	r2, r3
 800d29a:	d201      	bcs.n	800d2a0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800d29c:	2303      	movs	r3, #3
 800d29e:	e001      	b.n	800d2a4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800d2a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3730      	adds	r7, #48	; 0x30
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b083      	sub	sp, #12
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	781a      	ldrb	r2, [r3, #0]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	785a      	ldrb	r2, [r3, #1]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	789a      	ldrb	r2, [r3, #2]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	78da      	ldrb	r2, [r3, #3]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	791a      	ldrb	r2, [r3, #4]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	795a      	ldrb	r2, [r3, #5]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	799a      	ldrb	r2, [r3, #6]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	79da      	ldrb	r2, [r3, #7]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	7a1a      	ldrb	r2, [r3, #8]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	721a      	strb	r2, [r3, #8]
}
 800d2fe:	bf00      	nop
 800d300:	370c      	adds	r7, #12
 800d302:	46bd      	mov	sp, r7
 800d304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d308:	4770      	bx	lr

0800d30a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800d30a:	b480      	push	{r7}
 800d30c:	b087      	sub	sp, #28
 800d30e:	af00      	add	r7, sp, #0
 800d310:	60f8      	str	r0, [r7, #12]
 800d312:	60b9      	str	r1, [r7, #8]
 800d314:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d316:	2300      	movs	r3, #0
 800d318:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	781a      	ldrb	r2, [r3, #0]
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	785a      	ldrb	r2, [r3, #1]
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	789a      	ldrb	r2, [r3, #2]
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	78da      	ldrb	r2, [r3, #3]
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	3304      	adds	r3, #4
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	b29a      	uxth	r2, r3
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	3305      	adds	r3, #5
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	b29b      	uxth	r3, r3
 800d34a:	021b      	lsls	r3, r3, #8
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	4313      	orrs	r3, r2
 800d350:	b29a      	uxth	r2, r3
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	799a      	ldrb	r2, [r3, #6]
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	889b      	ldrh	r3, [r3, #4]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d102      	bne.n	800d36c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800d366:	2303      	movs	r3, #3
 800d368:	75fb      	strb	r3, [r7, #23]
 800d36a:	e033      	b.n	800d3d4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	889b      	ldrh	r3, [r3, #4]
 800d370:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d374:	f023 0307 	bic.w	r3, r3, #7
 800d378:	b29a      	uxth	r2, r3
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	889b      	ldrh	r3, [r3, #4]
 800d382:	b21a      	sxth	r2, r3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	3304      	adds	r3, #4
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	b299      	uxth	r1, r3
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	3305      	adds	r3, #5
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	b29b      	uxth	r3, r3
 800d394:	021b      	lsls	r3, r3, #8
 800d396:	b29b      	uxth	r3, r3
 800d398:	430b      	orrs	r3, r1
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d110      	bne.n	800d3c6 <USBH_ParseEPDesc+0xbc>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	3304      	adds	r3, #4
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	b299      	uxth	r1, r3
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	3305      	adds	r3, #5
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	021b      	lsls	r3, r3, #8
 800d3b6:	b29b      	uxth	r3, r3
 800d3b8:	430b      	orrs	r3, r1
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	b21b      	sxth	r3, r3
 800d3be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3c2:	b21b      	sxth	r3, r3
 800d3c4:	e001      	b.n	800d3ca <USBH_ParseEPDesc+0xc0>
 800d3c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	b21b      	sxth	r3, r3
 800d3ce:	b29a      	uxth	r2, r3
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d116      	bne.n	800d40c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	78db      	ldrb	r3, [r3, #3]
 800d3e2:	f003 0303 	and.w	r3, r3, #3
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	d005      	beq.n	800d3f6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	78db      	ldrb	r3, [r3, #3]
 800d3ee:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d3f2:	2b03      	cmp	r3, #3
 800d3f4:	d127      	bne.n	800d446 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	799b      	ldrb	r3, [r3, #6]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d003      	beq.n	800d406 <USBH_ParseEPDesc+0xfc>
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	799b      	ldrb	r3, [r3, #6]
 800d402:	2b10      	cmp	r3, #16
 800d404:	d91f      	bls.n	800d446 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800d406:	2303      	movs	r3, #3
 800d408:	75fb      	strb	r3, [r7, #23]
 800d40a:	e01c      	b.n	800d446 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	78db      	ldrb	r3, [r3, #3]
 800d410:	f003 0303 	and.w	r3, r3, #3
 800d414:	2b01      	cmp	r3, #1
 800d416:	d10a      	bne.n	800d42e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	799b      	ldrb	r3, [r3, #6]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d003      	beq.n	800d428 <USBH_ParseEPDesc+0x11e>
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	799b      	ldrb	r3, [r3, #6]
 800d424:	2b10      	cmp	r3, #16
 800d426:	d90e      	bls.n	800d446 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800d428:	2303      	movs	r3, #3
 800d42a:	75fb      	strb	r3, [r7, #23]
 800d42c:	e00b      	b.n	800d446 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	78db      	ldrb	r3, [r3, #3]
 800d432:	f003 0303 	and.w	r3, r3, #3
 800d436:	2b03      	cmp	r3, #3
 800d438:	d105      	bne.n	800d446 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	799b      	ldrb	r3, [r3, #6]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d101      	bne.n	800d446 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800d442:	2303      	movs	r3, #3
 800d444:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800d446:	7dfb      	ldrb	r3, [r7, #23]
}
 800d448:	4618      	mov	r0, r3
 800d44a:	371c      	adds	r7, #28
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr

0800d454 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d454:	b480      	push	{r7}
 800d456:	b087      	sub	sp, #28
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	4613      	mov	r3, r2
 800d460:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	3301      	adds	r3, #1
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	2b03      	cmp	r3, #3
 800d46a:	d120      	bne.n	800d4ae <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	1e9a      	subs	r2, r3, #2
 800d472:	88fb      	ldrh	r3, [r7, #6]
 800d474:	4293      	cmp	r3, r2
 800d476:	bf28      	it	cs
 800d478:	4613      	movcs	r3, r2
 800d47a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	3302      	adds	r3, #2
 800d480:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d482:	2300      	movs	r3, #0
 800d484:	82fb      	strh	r3, [r7, #22]
 800d486:	e00b      	b.n	800d4a0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d488:	8afb      	ldrh	r3, [r7, #22]
 800d48a:	68fa      	ldr	r2, [r7, #12]
 800d48c:	4413      	add	r3, r2
 800d48e:	781a      	ldrb	r2, [r3, #0]
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	3301      	adds	r3, #1
 800d498:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d49a:	8afb      	ldrh	r3, [r7, #22]
 800d49c:	3302      	adds	r3, #2
 800d49e:	82fb      	strh	r3, [r7, #22]
 800d4a0:	8afa      	ldrh	r2, [r7, #22]
 800d4a2:	8abb      	ldrh	r3, [r7, #20]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d3ef      	bcc.n	800d488 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	701a      	strb	r2, [r3, #0]
  }
}
 800d4ae:	bf00      	nop
 800d4b0:	371c      	adds	r7, #28
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b8:	4770      	bx	lr

0800d4ba <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d4ba:	b480      	push	{r7}
 800d4bc:	b085      	sub	sp, #20
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	6078      	str	r0, [r7, #4]
 800d4c2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	881a      	ldrh	r2, [r3, #0]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	b29b      	uxth	r3, r3
 800d4ce:	4413      	add	r3, r2
 800d4d0:	b29a      	uxth	r2, r3
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	4413      	add	r3, r2
 800d4e0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3714      	adds	r7, #20
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b086      	sub	sp, #24
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	4613      	mov	r3, r2
 800d4fc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d4fe:	2301      	movs	r3, #1
 800d500:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	789b      	ldrb	r3, [r3, #2]
 800d506:	2b01      	cmp	r3, #1
 800d508:	d002      	beq.n	800d510 <USBH_CtlReq+0x20>
 800d50a:	2b02      	cmp	r3, #2
 800d50c:	d00f      	beq.n	800d52e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d50e:	e027      	b.n	800d560 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	68ba      	ldr	r2, [r7, #8]
 800d514:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	88fa      	ldrh	r2, [r7, #6]
 800d51a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	2201      	movs	r2, #1
 800d520:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2202      	movs	r2, #2
 800d526:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d528:	2301      	movs	r3, #1
 800d52a:	75fb      	strb	r3, [r7, #23]
      break;
 800d52c:	e018      	b.n	800d560 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d52e:	68f8      	ldr	r0, [r7, #12]
 800d530:	f000 f81c 	bl	800d56c <USBH_HandleControl>
 800d534:	4603      	mov	r3, r0
 800d536:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d538:	7dfb      	ldrb	r3, [r7, #23]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d002      	beq.n	800d544 <USBH_CtlReq+0x54>
 800d53e:	7dfb      	ldrb	r3, [r7, #23]
 800d540:	2b03      	cmp	r3, #3
 800d542:	d106      	bne.n	800d552 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2201      	movs	r2, #1
 800d548:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	2200      	movs	r2, #0
 800d54e:	761a      	strb	r2, [r3, #24]
      break;
 800d550:	e005      	b.n	800d55e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d552:	7dfb      	ldrb	r3, [r7, #23]
 800d554:	2b02      	cmp	r3, #2
 800d556:	d102      	bne.n	800d55e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2201      	movs	r2, #1
 800d55c:	709a      	strb	r2, [r3, #2]
      break;
 800d55e:	bf00      	nop
  }
  return status;
 800d560:	7dfb      	ldrb	r3, [r7, #23]
}
 800d562:	4618      	mov	r0, r3
 800d564:	3718      	adds	r7, #24
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
	...

0800d56c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b086      	sub	sp, #24
 800d570:	af02      	add	r7, sp, #8
 800d572:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d574:	2301      	movs	r3, #1
 800d576:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d578:	2300      	movs	r3, #0
 800d57a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	7e1b      	ldrb	r3, [r3, #24]
 800d580:	3b01      	subs	r3, #1
 800d582:	2b0a      	cmp	r3, #10
 800d584:	f200 8156 	bhi.w	800d834 <USBH_HandleControl+0x2c8>
 800d588:	a201      	add	r2, pc, #4	; (adr r2, 800d590 <USBH_HandleControl+0x24>)
 800d58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d58e:	bf00      	nop
 800d590:	0800d5bd 	.word	0x0800d5bd
 800d594:	0800d5d7 	.word	0x0800d5d7
 800d598:	0800d641 	.word	0x0800d641
 800d59c:	0800d667 	.word	0x0800d667
 800d5a0:	0800d69f 	.word	0x0800d69f
 800d5a4:	0800d6c9 	.word	0x0800d6c9
 800d5a8:	0800d71b 	.word	0x0800d71b
 800d5ac:	0800d73d 	.word	0x0800d73d
 800d5b0:	0800d779 	.word	0x0800d779
 800d5b4:	0800d79f 	.word	0x0800d79f
 800d5b8:	0800d7dd 	.word	0x0800d7dd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f103 0110 	add.w	r1, r3, #16
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	795b      	ldrb	r3, [r3, #5]
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 f943 	bl	800d854 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2202      	movs	r2, #2
 800d5d2:	761a      	strb	r2, [r3, #24]
      break;
 800d5d4:	e139      	b.n	800d84a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	795b      	ldrb	r3, [r3, #5]
 800d5da:	4619      	mov	r1, r3
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f003 ffb5 	bl	801154c <USBH_LL_GetURBState>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d5e6:	7bbb      	ldrb	r3, [r7, #14]
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d11e      	bne.n	800d62a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	7c1b      	ldrb	r3, [r3, #16]
 800d5f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d5f4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	8adb      	ldrh	r3, [r3, #22]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d00a      	beq.n	800d614 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d5fe:	7b7b      	ldrb	r3, [r7, #13]
 800d600:	2b80      	cmp	r3, #128	; 0x80
 800d602:	d103      	bne.n	800d60c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2203      	movs	r2, #3
 800d608:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d60a:	e115      	b.n	800d838 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2205      	movs	r2, #5
 800d610:	761a      	strb	r2, [r3, #24]
      break;
 800d612:	e111      	b.n	800d838 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800d614:	7b7b      	ldrb	r3, [r7, #13]
 800d616:	2b80      	cmp	r3, #128	; 0x80
 800d618:	d103      	bne.n	800d622 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2209      	movs	r2, #9
 800d61e:	761a      	strb	r2, [r3, #24]
      break;
 800d620:	e10a      	b.n	800d838 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2207      	movs	r2, #7
 800d626:	761a      	strb	r2, [r3, #24]
      break;
 800d628:	e106      	b.n	800d838 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d62a:	7bbb      	ldrb	r3, [r7, #14]
 800d62c:	2b04      	cmp	r3, #4
 800d62e:	d003      	beq.n	800d638 <USBH_HandleControl+0xcc>
 800d630:	7bbb      	ldrb	r3, [r7, #14]
 800d632:	2b02      	cmp	r3, #2
 800d634:	f040 8100 	bne.w	800d838 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	220b      	movs	r2, #11
 800d63c:	761a      	strb	r2, [r3, #24]
      break;
 800d63e:	e0fb      	b.n	800d838 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d646:	b29a      	uxth	r2, r3
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6899      	ldr	r1, [r3, #8]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	899a      	ldrh	r2, [r3, #12]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	791b      	ldrb	r3, [r3, #4]
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f000 f93a 	bl	800d8d2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2204      	movs	r2, #4
 800d662:	761a      	strb	r2, [r3, #24]
      break;
 800d664:	e0f1      	b.n	800d84a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	791b      	ldrb	r3, [r3, #4]
 800d66a:	4619      	mov	r1, r3
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f003 ff6d 	bl	801154c <USBH_LL_GetURBState>
 800d672:	4603      	mov	r3, r0
 800d674:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d676:	7bbb      	ldrb	r3, [r7, #14]
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d102      	bne.n	800d682 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2209      	movs	r2, #9
 800d680:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d682:	7bbb      	ldrb	r3, [r7, #14]
 800d684:	2b05      	cmp	r3, #5
 800d686:	d102      	bne.n	800d68e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d688:	2303      	movs	r3, #3
 800d68a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d68c:	e0d6      	b.n	800d83c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800d68e:	7bbb      	ldrb	r3, [r7, #14]
 800d690:	2b04      	cmp	r3, #4
 800d692:	f040 80d3 	bne.w	800d83c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	220b      	movs	r2, #11
 800d69a:	761a      	strb	r2, [r3, #24]
      break;
 800d69c:	e0ce      	b.n	800d83c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6899      	ldr	r1, [r3, #8]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	899a      	ldrh	r2, [r3, #12]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	795b      	ldrb	r3, [r3, #5]
 800d6aa:	2001      	movs	r0, #1
 800d6ac:	9000      	str	r0, [sp, #0]
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 f8ea 	bl	800d888 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2206      	movs	r2, #6
 800d6c4:	761a      	strb	r2, [r3, #24]
      break;
 800d6c6:	e0c0      	b.n	800d84a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	795b      	ldrb	r3, [r3, #5]
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f003 ff3c 	bl	801154c <USBH_LL_GetURBState>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d6d8:	7bbb      	ldrb	r3, [r7, #14]
 800d6da:	2b01      	cmp	r3, #1
 800d6dc:	d103      	bne.n	800d6e6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2207      	movs	r2, #7
 800d6e2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d6e4:	e0ac      	b.n	800d840 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800d6e6:	7bbb      	ldrb	r3, [r7, #14]
 800d6e8:	2b05      	cmp	r3, #5
 800d6ea:	d105      	bne.n	800d6f8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	220c      	movs	r2, #12
 800d6f0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d6f2:	2303      	movs	r3, #3
 800d6f4:	73fb      	strb	r3, [r7, #15]
      break;
 800d6f6:	e0a3      	b.n	800d840 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d6f8:	7bbb      	ldrb	r3, [r7, #14]
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	d103      	bne.n	800d706 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2205      	movs	r2, #5
 800d702:	761a      	strb	r2, [r3, #24]
      break;
 800d704:	e09c      	b.n	800d840 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d706:	7bbb      	ldrb	r3, [r7, #14]
 800d708:	2b04      	cmp	r3, #4
 800d70a:	f040 8099 	bne.w	800d840 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	220b      	movs	r2, #11
 800d712:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d714:	2302      	movs	r3, #2
 800d716:	73fb      	strb	r3, [r7, #15]
      break;
 800d718:	e092      	b.n	800d840 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	791b      	ldrb	r3, [r3, #4]
 800d71e:	2200      	movs	r2, #0
 800d720:	2100      	movs	r1, #0
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f000 f8d5 	bl	800d8d2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d72e:	b29a      	uxth	r2, r3
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2208      	movs	r2, #8
 800d738:	761a      	strb	r2, [r3, #24]

      break;
 800d73a:	e086      	b.n	800d84a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	791b      	ldrb	r3, [r3, #4]
 800d740:	4619      	mov	r1, r3
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f003 ff02 	bl	801154c <USBH_LL_GetURBState>
 800d748:	4603      	mov	r3, r0
 800d74a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d74c:	7bbb      	ldrb	r3, [r7, #14]
 800d74e:	2b01      	cmp	r3, #1
 800d750:	d105      	bne.n	800d75e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	220d      	movs	r2, #13
 800d756:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d758:	2300      	movs	r3, #0
 800d75a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d75c:	e072      	b.n	800d844 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800d75e:	7bbb      	ldrb	r3, [r7, #14]
 800d760:	2b04      	cmp	r3, #4
 800d762:	d103      	bne.n	800d76c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	220b      	movs	r2, #11
 800d768:	761a      	strb	r2, [r3, #24]
      break;
 800d76a:	e06b      	b.n	800d844 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800d76c:	7bbb      	ldrb	r3, [r7, #14]
 800d76e:	2b05      	cmp	r3, #5
 800d770:	d168      	bne.n	800d844 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800d772:	2303      	movs	r3, #3
 800d774:	73fb      	strb	r3, [r7, #15]
      break;
 800d776:	e065      	b.n	800d844 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	795b      	ldrb	r3, [r3, #5]
 800d77c:	2201      	movs	r2, #1
 800d77e:	9200      	str	r2, [sp, #0]
 800d780:	2200      	movs	r2, #0
 800d782:	2100      	movs	r1, #0
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 f87f 	bl	800d888 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d790:	b29a      	uxth	r2, r3
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	220a      	movs	r2, #10
 800d79a:	761a      	strb	r2, [r3, #24]
      break;
 800d79c:	e055      	b.n	800d84a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	795b      	ldrb	r3, [r3, #5]
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f003 fed1 	bl	801154c <USBH_LL_GetURBState>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d7ae:	7bbb      	ldrb	r3, [r7, #14]
 800d7b0:	2b01      	cmp	r3, #1
 800d7b2:	d105      	bne.n	800d7c0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	220d      	movs	r2, #13
 800d7bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d7be:	e043      	b.n	800d848 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d7c0:	7bbb      	ldrb	r3, [r7, #14]
 800d7c2:	2b02      	cmp	r3, #2
 800d7c4:	d103      	bne.n	800d7ce <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2209      	movs	r2, #9
 800d7ca:	761a      	strb	r2, [r3, #24]
      break;
 800d7cc:	e03c      	b.n	800d848 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d7ce:	7bbb      	ldrb	r3, [r7, #14]
 800d7d0:	2b04      	cmp	r3, #4
 800d7d2:	d139      	bne.n	800d848 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	220b      	movs	r2, #11
 800d7d8:	761a      	strb	r2, [r3, #24]
      break;
 800d7da:	e035      	b.n	800d848 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	7e5b      	ldrb	r3, [r3, #25]
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	b2da      	uxtb	r2, r3
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	765a      	strb	r2, [r3, #25]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	7e5b      	ldrb	r3, [r3, #25]
 800d7ec:	2b02      	cmp	r3, #2
 800d7ee:	d806      	bhi.n	800d7fe <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d7fc:	e025      	b.n	800d84a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d804:	2106      	movs	r1, #6
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2200      	movs	r2, #0
 800d80e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	795b      	ldrb	r3, [r3, #5]
 800d814:	4619      	mov	r1, r3
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 f90c 	bl	800da34 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	791b      	ldrb	r3, [r3, #4]
 800d820:	4619      	mov	r1, r3
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f000 f906 	bl	800da34 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d82e:	2302      	movs	r3, #2
 800d830:	73fb      	strb	r3, [r7, #15]
      break;
 800d832:	e00a      	b.n	800d84a <USBH_HandleControl+0x2de>

    default:
      break;
 800d834:	bf00      	nop
 800d836:	e008      	b.n	800d84a <USBH_HandleControl+0x2de>
      break;
 800d838:	bf00      	nop
 800d83a:	e006      	b.n	800d84a <USBH_HandleControl+0x2de>
      break;
 800d83c:	bf00      	nop
 800d83e:	e004      	b.n	800d84a <USBH_HandleControl+0x2de>
      break;
 800d840:	bf00      	nop
 800d842:	e002      	b.n	800d84a <USBH_HandleControl+0x2de>
      break;
 800d844:	bf00      	nop
 800d846:	e000      	b.n	800d84a <USBH_HandleControl+0x2de>
      break;
 800d848:	bf00      	nop
  }

  return status;
 800d84a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3710      	adds	r7, #16
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b088      	sub	sp, #32
 800d858:	af04      	add	r7, sp, #16
 800d85a:	60f8      	str	r0, [r7, #12]
 800d85c:	60b9      	str	r1, [r7, #8]
 800d85e:	4613      	mov	r3, r2
 800d860:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d862:	79f9      	ldrb	r1, [r7, #7]
 800d864:	2300      	movs	r3, #0
 800d866:	9303      	str	r3, [sp, #12]
 800d868:	2308      	movs	r3, #8
 800d86a:	9302      	str	r3, [sp, #8]
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	9301      	str	r3, [sp, #4]
 800d870:	2300      	movs	r3, #0
 800d872:	9300      	str	r3, [sp, #0]
 800d874:	2300      	movs	r3, #0
 800d876:	2200      	movs	r2, #0
 800d878:	68f8      	ldr	r0, [r7, #12]
 800d87a:	f003 fe36 	bl	80114ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d87e:	2300      	movs	r3, #0
}
 800d880:	4618      	mov	r0, r3
 800d882:	3710      	adds	r7, #16
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}

0800d888 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b088      	sub	sp, #32
 800d88c:	af04      	add	r7, sp, #16
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	60b9      	str	r1, [r7, #8]
 800d892:	4611      	mov	r1, r2
 800d894:	461a      	mov	r2, r3
 800d896:	460b      	mov	r3, r1
 800d898:	80fb      	strh	r3, [r7, #6]
 800d89a:	4613      	mov	r3, r2
 800d89c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d001      	beq.n	800d8ac <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d8ac:	7979      	ldrb	r1, [r7, #5]
 800d8ae:	7e3b      	ldrb	r3, [r7, #24]
 800d8b0:	9303      	str	r3, [sp, #12]
 800d8b2:	88fb      	ldrh	r3, [r7, #6]
 800d8b4:	9302      	str	r3, [sp, #8]
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	9301      	str	r3, [sp, #4]
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	9300      	str	r3, [sp, #0]
 800d8be:	2300      	movs	r3, #0
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	68f8      	ldr	r0, [r7, #12]
 800d8c4:	f003 fe11 	bl	80114ea <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d8c8:	2300      	movs	r3, #0
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3710      	adds	r7, #16
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b088      	sub	sp, #32
 800d8d6:	af04      	add	r7, sp, #16
 800d8d8:	60f8      	str	r0, [r7, #12]
 800d8da:	60b9      	str	r1, [r7, #8]
 800d8dc:	4611      	mov	r1, r2
 800d8de:	461a      	mov	r2, r3
 800d8e0:	460b      	mov	r3, r1
 800d8e2:	80fb      	strh	r3, [r7, #6]
 800d8e4:	4613      	mov	r3, r2
 800d8e6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d8e8:	7979      	ldrb	r1, [r7, #5]
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	9303      	str	r3, [sp, #12]
 800d8ee:	88fb      	ldrh	r3, [r7, #6]
 800d8f0:	9302      	str	r3, [sp, #8]
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	9301      	str	r3, [sp, #4]
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	9300      	str	r3, [sp, #0]
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	f003 fdf3 	bl	80114ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d904:	2300      	movs	r3, #0

}
 800d906:	4618      	mov	r0, r3
 800d908:	3710      	adds	r7, #16
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}

0800d90e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d90e:	b580      	push	{r7, lr}
 800d910:	b088      	sub	sp, #32
 800d912:	af04      	add	r7, sp, #16
 800d914:	60f8      	str	r0, [r7, #12]
 800d916:	60b9      	str	r1, [r7, #8]
 800d918:	4611      	mov	r1, r2
 800d91a:	461a      	mov	r2, r3
 800d91c:	460b      	mov	r3, r1
 800d91e:	80fb      	strh	r3, [r7, #6]
 800d920:	4613      	mov	r3, r2
 800d922:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d001      	beq.n	800d932 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d92e:	2300      	movs	r3, #0
 800d930:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d932:	7979      	ldrb	r1, [r7, #5]
 800d934:	7e3b      	ldrb	r3, [r7, #24]
 800d936:	9303      	str	r3, [sp, #12]
 800d938:	88fb      	ldrh	r3, [r7, #6]
 800d93a:	9302      	str	r3, [sp, #8]
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	9301      	str	r3, [sp, #4]
 800d940:	2301      	movs	r3, #1
 800d942:	9300      	str	r3, [sp, #0]
 800d944:	2302      	movs	r3, #2
 800d946:	2200      	movs	r2, #0
 800d948:	68f8      	ldr	r0, [r7, #12]
 800d94a:	f003 fdce 	bl	80114ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d94e:	2300      	movs	r3, #0
}
 800d950:	4618      	mov	r0, r3
 800d952:	3710      	adds	r7, #16
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b088      	sub	sp, #32
 800d95c:	af04      	add	r7, sp, #16
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	60b9      	str	r1, [r7, #8]
 800d962:	4611      	mov	r1, r2
 800d964:	461a      	mov	r2, r3
 800d966:	460b      	mov	r3, r1
 800d968:	80fb      	strh	r3, [r7, #6]
 800d96a:	4613      	mov	r3, r2
 800d96c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d96e:	7979      	ldrb	r1, [r7, #5]
 800d970:	2300      	movs	r3, #0
 800d972:	9303      	str	r3, [sp, #12]
 800d974:	88fb      	ldrh	r3, [r7, #6]
 800d976:	9302      	str	r3, [sp, #8]
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	9301      	str	r3, [sp, #4]
 800d97c:	2301      	movs	r3, #1
 800d97e:	9300      	str	r3, [sp, #0]
 800d980:	2302      	movs	r3, #2
 800d982:	2201      	movs	r2, #1
 800d984:	68f8      	ldr	r0, [r7, #12]
 800d986:	f003 fdb0 	bl	80114ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d98a:	2300      	movs	r3, #0
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3710      	adds	r7, #16
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b086      	sub	sp, #24
 800d998:	af04      	add	r7, sp, #16
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	4608      	mov	r0, r1
 800d99e:	4611      	mov	r1, r2
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	70fb      	strb	r3, [r7, #3]
 800d9a6:	460b      	mov	r3, r1
 800d9a8:	70bb      	strb	r3, [r7, #2]
 800d9aa:	4613      	mov	r3, r2
 800d9ac:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d9ae:	7878      	ldrb	r0, [r7, #1]
 800d9b0:	78ba      	ldrb	r2, [r7, #2]
 800d9b2:	78f9      	ldrb	r1, [r7, #3]
 800d9b4:	8b3b      	ldrh	r3, [r7, #24]
 800d9b6:	9302      	str	r3, [sp, #8]
 800d9b8:	7d3b      	ldrb	r3, [r7, #20]
 800d9ba:	9301      	str	r3, [sp, #4]
 800d9bc:	7c3b      	ldrb	r3, [r7, #16]
 800d9be:	9300      	str	r3, [sp, #0]
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f003 fd43 	bl	801144e <USBH_LL_OpenPipe>

  return USBH_OK;
 800d9c8:	2300      	movs	r3, #0
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3708      	adds	r7, #8
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b082      	sub	sp, #8
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
 800d9da:	460b      	mov	r3, r1
 800d9dc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d9de:	78fb      	ldrb	r3, [r7, #3]
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f003 fd62 	bl	80114ac <USBH_LL_ClosePipe>

  return USBH_OK;
 800d9e8:	2300      	movs	r3, #0
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3708      	adds	r7, #8
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}

0800d9f2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d9f2:	b580      	push	{r7, lr}
 800d9f4:	b084      	sub	sp, #16
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 f836 	bl	800da70 <USBH_GetFreePipe>
 800da04:	4603      	mov	r3, r0
 800da06:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800da08:	89fb      	ldrh	r3, [r7, #14]
 800da0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da0e:	4293      	cmp	r3, r2
 800da10:	d00a      	beq.n	800da28 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800da12:	78fa      	ldrb	r2, [r7, #3]
 800da14:	89fb      	ldrh	r3, [r7, #14]
 800da16:	f003 030f 	and.w	r3, r3, #15
 800da1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800da1e:	6879      	ldr	r1, [r7, #4]
 800da20:	33e0      	adds	r3, #224	; 0xe0
 800da22:	009b      	lsls	r3, r3, #2
 800da24:	440b      	add	r3, r1
 800da26:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800da28:	89fb      	ldrh	r3, [r7, #14]
 800da2a:	b2db      	uxtb	r3, r3
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3710      	adds	r7, #16
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800da34:	b480      	push	{r7}
 800da36:	b083      	sub	sp, #12
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	460b      	mov	r3, r1
 800da3e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800da40:	78fb      	ldrb	r3, [r7, #3]
 800da42:	2b0f      	cmp	r3, #15
 800da44:	d80d      	bhi.n	800da62 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800da46:	78fb      	ldrb	r3, [r7, #3]
 800da48:	687a      	ldr	r2, [r7, #4]
 800da4a:	33e0      	adds	r3, #224	; 0xe0
 800da4c:	009b      	lsls	r3, r3, #2
 800da4e:	4413      	add	r3, r2
 800da50:	685a      	ldr	r2, [r3, #4]
 800da52:	78fb      	ldrb	r3, [r7, #3]
 800da54:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800da58:	6879      	ldr	r1, [r7, #4]
 800da5a:	33e0      	adds	r3, #224	; 0xe0
 800da5c:	009b      	lsls	r3, r3, #2
 800da5e:	440b      	add	r3, r1
 800da60:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800da62:	2300      	movs	r3, #0
}
 800da64:	4618      	mov	r0, r3
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800da70:	b480      	push	{r7}
 800da72:	b085      	sub	sp, #20
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800da78:	2300      	movs	r3, #0
 800da7a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800da7c:	2300      	movs	r3, #0
 800da7e:	73fb      	strb	r3, [r7, #15]
 800da80:	e00f      	b.n	800daa2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800da82:	7bfb      	ldrb	r3, [r7, #15]
 800da84:	687a      	ldr	r2, [r7, #4]
 800da86:	33e0      	adds	r3, #224	; 0xe0
 800da88:	009b      	lsls	r3, r3, #2
 800da8a:	4413      	add	r3, r2
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da92:	2b00      	cmp	r3, #0
 800da94:	d102      	bne.n	800da9c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800da96:	7bfb      	ldrb	r3, [r7, #15]
 800da98:	b29b      	uxth	r3, r3
 800da9a:	e007      	b.n	800daac <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800da9c:	7bfb      	ldrb	r3, [r7, #15]
 800da9e:	3301      	adds	r3, #1
 800daa0:	73fb      	strb	r3, [r7, #15]
 800daa2:	7bfb      	ldrb	r3, [r7, #15]
 800daa4:	2b0f      	cmp	r3, #15
 800daa6:	d9ec      	bls.n	800da82 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800daa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800daac:	4618      	mov	r0, r3
 800daae:	3714      	adds	r7, #20
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr

0800dab8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	4603      	mov	r3, r0
 800dac0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800dac2:	79fb      	ldrb	r3, [r7, #7]
 800dac4:	4a08      	ldr	r2, [pc, #32]	; (800dae8 <disk_status+0x30>)
 800dac6:	009b      	lsls	r3, r3, #2
 800dac8:	4413      	add	r3, r2
 800daca:	685b      	ldr	r3, [r3, #4]
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	79fa      	ldrb	r2, [r7, #7]
 800dad0:	4905      	ldr	r1, [pc, #20]	; (800dae8 <disk_status+0x30>)
 800dad2:	440a      	add	r2, r1
 800dad4:	7a12      	ldrb	r2, [r2, #8]
 800dad6:	4610      	mov	r0, r2
 800dad8:	4798      	blx	r3
 800dada:	4603      	mov	r3, r0
 800dadc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800dade:	7bfb      	ldrb	r3, [r7, #15]
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3710      	adds	r7, #16
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}
 800dae8:	200024e0 	.word	0x200024e0

0800daec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b084      	sub	sp, #16
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	4603      	mov	r3, r0
 800daf4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800daf6:	2300      	movs	r3, #0
 800daf8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800dafa:	79fb      	ldrb	r3, [r7, #7]
 800dafc:	4a0d      	ldr	r2, [pc, #52]	; (800db34 <disk_initialize+0x48>)
 800dafe:	5cd3      	ldrb	r3, [r2, r3]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d111      	bne.n	800db28 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800db04:	79fb      	ldrb	r3, [r7, #7]
 800db06:	4a0b      	ldr	r2, [pc, #44]	; (800db34 <disk_initialize+0x48>)
 800db08:	2101      	movs	r1, #1
 800db0a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800db0c:	79fb      	ldrb	r3, [r7, #7]
 800db0e:	4a09      	ldr	r2, [pc, #36]	; (800db34 <disk_initialize+0x48>)
 800db10:	009b      	lsls	r3, r3, #2
 800db12:	4413      	add	r3, r2
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	79fa      	ldrb	r2, [r7, #7]
 800db1a:	4906      	ldr	r1, [pc, #24]	; (800db34 <disk_initialize+0x48>)
 800db1c:	440a      	add	r2, r1
 800db1e:	7a12      	ldrb	r2, [r2, #8]
 800db20:	4610      	mov	r0, r2
 800db22:	4798      	blx	r3
 800db24:	4603      	mov	r3, r0
 800db26:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800db28:	7bfb      	ldrb	r3, [r7, #15]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3710      	adds	r7, #16
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	200024e0 	.word	0x200024e0

0800db38 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800db38:	b590      	push	{r4, r7, lr}
 800db3a:	b087      	sub	sp, #28
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	60b9      	str	r1, [r7, #8]
 800db40:	607a      	str	r2, [r7, #4]
 800db42:	603b      	str	r3, [r7, #0]
 800db44:	4603      	mov	r3, r0
 800db46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800db48:	7bfb      	ldrb	r3, [r7, #15]
 800db4a:	4a0a      	ldr	r2, [pc, #40]	; (800db74 <disk_read+0x3c>)
 800db4c:	009b      	lsls	r3, r3, #2
 800db4e:	4413      	add	r3, r2
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	689c      	ldr	r4, [r3, #8]
 800db54:	7bfb      	ldrb	r3, [r7, #15]
 800db56:	4a07      	ldr	r2, [pc, #28]	; (800db74 <disk_read+0x3c>)
 800db58:	4413      	add	r3, r2
 800db5a:	7a18      	ldrb	r0, [r3, #8]
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	68b9      	ldr	r1, [r7, #8]
 800db62:	47a0      	blx	r4
 800db64:	4603      	mov	r3, r0
 800db66:	75fb      	strb	r3, [r7, #23]
  return res;
 800db68:	7dfb      	ldrb	r3, [r7, #23]
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	371c      	adds	r7, #28
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd90      	pop	{r4, r7, pc}
 800db72:	bf00      	nop
 800db74:	200024e0 	.word	0x200024e0

0800db78 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800db78:	b590      	push	{r4, r7, lr}
 800db7a:	b087      	sub	sp, #28
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	60b9      	str	r1, [r7, #8]
 800db80:	607a      	str	r2, [r7, #4]
 800db82:	603b      	str	r3, [r7, #0]
 800db84:	4603      	mov	r3, r0
 800db86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800db88:	7bfb      	ldrb	r3, [r7, #15]
 800db8a:	4a0a      	ldr	r2, [pc, #40]	; (800dbb4 <disk_write+0x3c>)
 800db8c:	009b      	lsls	r3, r3, #2
 800db8e:	4413      	add	r3, r2
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	68dc      	ldr	r4, [r3, #12]
 800db94:	7bfb      	ldrb	r3, [r7, #15]
 800db96:	4a07      	ldr	r2, [pc, #28]	; (800dbb4 <disk_write+0x3c>)
 800db98:	4413      	add	r3, r2
 800db9a:	7a18      	ldrb	r0, [r3, #8]
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	68b9      	ldr	r1, [r7, #8]
 800dba2:	47a0      	blx	r4
 800dba4:	4603      	mov	r3, r0
 800dba6:	75fb      	strb	r3, [r7, #23]
  return res;
 800dba8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	371c      	adds	r7, #28
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd90      	pop	{r4, r7, pc}
 800dbb2:	bf00      	nop
 800dbb4:	200024e0 	.word	0x200024e0

0800dbb8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b084      	sub	sp, #16
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	603a      	str	r2, [r7, #0]
 800dbc2:	71fb      	strb	r3, [r7, #7]
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800dbc8:	79fb      	ldrb	r3, [r7, #7]
 800dbca:	4a09      	ldr	r2, [pc, #36]	; (800dbf0 <disk_ioctl+0x38>)
 800dbcc:	009b      	lsls	r3, r3, #2
 800dbce:	4413      	add	r3, r2
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	691b      	ldr	r3, [r3, #16]
 800dbd4:	79fa      	ldrb	r2, [r7, #7]
 800dbd6:	4906      	ldr	r1, [pc, #24]	; (800dbf0 <disk_ioctl+0x38>)
 800dbd8:	440a      	add	r2, r1
 800dbda:	7a10      	ldrb	r0, [r2, #8]
 800dbdc:	79b9      	ldrb	r1, [r7, #6]
 800dbde:	683a      	ldr	r2, [r7, #0]
 800dbe0:	4798      	blx	r3
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	73fb      	strb	r3, [r7, #15]
  return res;
 800dbe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3710      	adds	r7, #16
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	200024e0 	.word	0x200024e0

0800dbf4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b085      	sub	sp, #20
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	3301      	adds	r3, #1
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800dc04:	89fb      	ldrh	r3, [r7, #14]
 800dc06:	021b      	lsls	r3, r3, #8
 800dc08:	b21a      	sxth	r2, r3
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	b21b      	sxth	r3, r3
 800dc10:	4313      	orrs	r3, r2
 800dc12:	b21b      	sxth	r3, r3
 800dc14:	81fb      	strh	r3, [r7, #14]
	return rv;
 800dc16:	89fb      	ldrh	r3, [r7, #14]
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3714      	adds	r7, #20
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800dc24:	b480      	push	{r7}
 800dc26:	b085      	sub	sp, #20
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	3303      	adds	r3, #3
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	021b      	lsls	r3, r3, #8
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	3202      	adds	r2, #2
 800dc3c:	7812      	ldrb	r2, [r2, #0]
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	021b      	lsls	r3, r3, #8
 800dc46:	687a      	ldr	r2, [r7, #4]
 800dc48:	3201      	adds	r2, #1
 800dc4a:	7812      	ldrb	r2, [r2, #0]
 800dc4c:	4313      	orrs	r3, r2
 800dc4e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	021b      	lsls	r3, r3, #8
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	7812      	ldrb	r2, [r2, #0]
 800dc58:	4313      	orrs	r3, r2
 800dc5a:	60fb      	str	r3, [r7, #12]
	return rv;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3714      	adds	r7, #20
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr

0800dc6a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800dc6a:	b480      	push	{r7}
 800dc6c:	b083      	sub	sp, #12
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	6078      	str	r0, [r7, #4]
 800dc72:	460b      	mov	r3, r1
 800dc74:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	1c5a      	adds	r2, r3, #1
 800dc7a:	607a      	str	r2, [r7, #4]
 800dc7c:	887a      	ldrh	r2, [r7, #2]
 800dc7e:	b2d2      	uxtb	r2, r2
 800dc80:	701a      	strb	r2, [r3, #0]
 800dc82:	887b      	ldrh	r3, [r7, #2]
 800dc84:	0a1b      	lsrs	r3, r3, #8
 800dc86:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	1c5a      	adds	r2, r3, #1
 800dc8c:	607a      	str	r2, [r7, #4]
 800dc8e:	887a      	ldrh	r2, [r7, #2]
 800dc90:	b2d2      	uxtb	r2, r2
 800dc92:	701a      	strb	r2, [r3, #0]
}
 800dc94:	bf00      	nop
 800dc96:	370c      	adds	r7, #12
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9e:	4770      	bx	lr

0800dca0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800dca0:	b480      	push	{r7}
 800dca2:	b083      	sub	sp, #12
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	1c5a      	adds	r2, r3, #1
 800dcae:	607a      	str	r2, [r7, #4]
 800dcb0:	683a      	ldr	r2, [r7, #0]
 800dcb2:	b2d2      	uxtb	r2, r2
 800dcb4:	701a      	strb	r2, [r3, #0]
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	0a1b      	lsrs	r3, r3, #8
 800dcba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	1c5a      	adds	r2, r3, #1
 800dcc0:	607a      	str	r2, [r7, #4]
 800dcc2:	683a      	ldr	r2, [r7, #0]
 800dcc4:	b2d2      	uxtb	r2, r2
 800dcc6:	701a      	strb	r2, [r3, #0]
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	0a1b      	lsrs	r3, r3, #8
 800dccc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	1c5a      	adds	r2, r3, #1
 800dcd2:	607a      	str	r2, [r7, #4]
 800dcd4:	683a      	ldr	r2, [r7, #0]
 800dcd6:	b2d2      	uxtb	r2, r2
 800dcd8:	701a      	strb	r2, [r3, #0]
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	0a1b      	lsrs	r3, r3, #8
 800dcde:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	1c5a      	adds	r2, r3, #1
 800dce4:	607a      	str	r2, [r7, #4]
 800dce6:	683a      	ldr	r2, [r7, #0]
 800dce8:	b2d2      	uxtb	r2, r2
 800dcea:	701a      	strb	r2, [r3, #0]
}
 800dcec:	bf00      	nop
 800dcee:	370c      	adds	r7, #12
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr

0800dcf8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800dcf8:	b480      	push	{r7}
 800dcfa:	b087      	sub	sp, #28
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d00d      	beq.n	800dd2e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800dd12:	693a      	ldr	r2, [r7, #16]
 800dd14:	1c53      	adds	r3, r2, #1
 800dd16:	613b      	str	r3, [r7, #16]
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	1c59      	adds	r1, r3, #1
 800dd1c:	6179      	str	r1, [r7, #20]
 800dd1e:	7812      	ldrb	r2, [r2, #0]
 800dd20:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	3b01      	subs	r3, #1
 800dd26:	607b      	str	r3, [r7, #4]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d1f1      	bne.n	800dd12 <mem_cpy+0x1a>
	}
}
 800dd2e:	bf00      	nop
 800dd30:	371c      	adds	r7, #28
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr

0800dd3a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800dd3a:	b480      	push	{r7}
 800dd3c:	b087      	sub	sp, #28
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	60f8      	str	r0, [r7, #12]
 800dd42:	60b9      	str	r1, [r7, #8]
 800dd44:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	1c5a      	adds	r2, r3, #1
 800dd4e:	617a      	str	r2, [r7, #20]
 800dd50:	68ba      	ldr	r2, [r7, #8]
 800dd52:	b2d2      	uxtb	r2, r2
 800dd54:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	3b01      	subs	r3, #1
 800dd5a:	607b      	str	r3, [r7, #4]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d1f3      	bne.n	800dd4a <mem_set+0x10>
}
 800dd62:	bf00      	nop
 800dd64:	bf00      	nop
 800dd66:	371c      	adds	r7, #28
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6e:	4770      	bx	lr

0800dd70 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800dd70:	b480      	push	{r7}
 800dd72:	b089      	sub	sp, #36	; 0x24
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	60f8      	str	r0, [r7, #12]
 800dd78:	60b9      	str	r1, [r7, #8]
 800dd7a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	61fb      	str	r3, [r7, #28]
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800dd84:	2300      	movs	r3, #0
 800dd86:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	1c5a      	adds	r2, r3, #1
 800dd8c:	61fa      	str	r2, [r7, #28]
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	4619      	mov	r1, r3
 800dd92:	69bb      	ldr	r3, [r7, #24]
 800dd94:	1c5a      	adds	r2, r3, #1
 800dd96:	61ba      	str	r2, [r7, #24]
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	1acb      	subs	r3, r1, r3
 800dd9c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	3b01      	subs	r3, #1
 800dda2:	607b      	str	r3, [r7, #4]
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d002      	beq.n	800ddb0 <mem_cmp+0x40>
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d0eb      	beq.n	800dd88 <mem_cmp+0x18>

	return r;
 800ddb0:	697b      	ldr	r3, [r7, #20]
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3724      	adds	r7, #36	; 0x24
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbc:	4770      	bx	lr

0800ddbe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ddbe:	b480      	push	{r7}
 800ddc0:	b083      	sub	sp, #12
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	6078      	str	r0, [r7, #4]
 800ddc6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ddc8:	e002      	b.n	800ddd0 <chk_chr+0x12>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	3301      	adds	r3, #1
 800ddce:	607b      	str	r3, [r7, #4]
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	781b      	ldrb	r3, [r3, #0]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d005      	beq.n	800dde4 <chk_chr+0x26>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	461a      	mov	r2, r3
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d1f2      	bne.n	800ddca <chk_chr+0xc>
	return *str;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	781b      	ldrb	r3, [r3, #0]
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	370c      	adds	r7, #12
 800ddec:	46bd      	mov	sp, r7
 800ddee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf2:	4770      	bx	lr

0800ddf4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b085      	sub	sp, #20
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ddfe:	2300      	movs	r3, #0
 800de00:	60bb      	str	r3, [r7, #8]
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	60fb      	str	r3, [r7, #12]
 800de06:	e029      	b.n	800de5c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800de08:	4a27      	ldr	r2, [pc, #156]	; (800dea8 <chk_lock+0xb4>)
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	011b      	lsls	r3, r3, #4
 800de0e:	4413      	add	r3, r2
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d01d      	beq.n	800de52 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800de16:	4a24      	ldr	r2, [pc, #144]	; (800dea8 <chk_lock+0xb4>)
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	011b      	lsls	r3, r3, #4
 800de1c:	4413      	add	r3, r2
 800de1e:	681a      	ldr	r2, [r3, #0]
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	429a      	cmp	r2, r3
 800de26:	d116      	bne.n	800de56 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800de28:	4a1f      	ldr	r2, [pc, #124]	; (800dea8 <chk_lock+0xb4>)
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	011b      	lsls	r3, r3, #4
 800de2e:	4413      	add	r3, r2
 800de30:	3304      	adds	r3, #4
 800de32:	681a      	ldr	r2, [r3, #0]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800de38:	429a      	cmp	r2, r3
 800de3a:	d10c      	bne.n	800de56 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800de3c:	4a1a      	ldr	r2, [pc, #104]	; (800dea8 <chk_lock+0xb4>)
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	011b      	lsls	r3, r3, #4
 800de42:	4413      	add	r3, r2
 800de44:	3308      	adds	r3, #8
 800de46:	681a      	ldr	r2, [r3, #0]
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d102      	bne.n	800de56 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800de50:	e007      	b.n	800de62 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800de52:	2301      	movs	r3, #1
 800de54:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	3301      	adds	r3, #1
 800de5a:	60fb      	str	r3, [r7, #12]
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2b01      	cmp	r3, #1
 800de60:	d9d2      	bls.n	800de08 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	2b02      	cmp	r3, #2
 800de66:	d109      	bne.n	800de7c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d102      	bne.n	800de74 <chk_lock+0x80>
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	2b02      	cmp	r3, #2
 800de72:	d101      	bne.n	800de78 <chk_lock+0x84>
 800de74:	2300      	movs	r3, #0
 800de76:	e010      	b.n	800de9a <chk_lock+0xa6>
 800de78:	2312      	movs	r3, #18
 800de7a:	e00e      	b.n	800de9a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d108      	bne.n	800de94 <chk_lock+0xa0>
 800de82:	4a09      	ldr	r2, [pc, #36]	; (800dea8 <chk_lock+0xb4>)
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	011b      	lsls	r3, r3, #4
 800de88:	4413      	add	r3, r2
 800de8a:	330c      	adds	r3, #12
 800de8c:	881b      	ldrh	r3, [r3, #0]
 800de8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de92:	d101      	bne.n	800de98 <chk_lock+0xa4>
 800de94:	2310      	movs	r3, #16
 800de96:	e000      	b.n	800de9a <chk_lock+0xa6>
 800de98:	2300      	movs	r3, #0
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3714      	adds	r7, #20
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr
 800dea6:	bf00      	nop
 800dea8:	200022c0 	.word	0x200022c0

0800deac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800deac:	b480      	push	{r7}
 800deae:	b083      	sub	sp, #12
 800deb0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800deb2:	2300      	movs	r3, #0
 800deb4:	607b      	str	r3, [r7, #4]
 800deb6:	e002      	b.n	800debe <enq_lock+0x12>
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	3301      	adds	r3, #1
 800debc:	607b      	str	r3, [r7, #4]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d806      	bhi.n	800ded2 <enq_lock+0x26>
 800dec4:	4a09      	ldr	r2, [pc, #36]	; (800deec <enq_lock+0x40>)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	011b      	lsls	r3, r3, #4
 800deca:	4413      	add	r3, r2
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d1f2      	bne.n	800deb8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2b02      	cmp	r3, #2
 800ded6:	bf14      	ite	ne
 800ded8:	2301      	movne	r3, #1
 800deda:	2300      	moveq	r3, #0
 800dedc:	b2db      	uxtb	r3, r3
}
 800dede:	4618      	mov	r0, r3
 800dee0:	370c      	adds	r7, #12
 800dee2:	46bd      	mov	sp, r7
 800dee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee8:	4770      	bx	lr
 800deea:	bf00      	nop
 800deec:	200022c0 	.word	0x200022c0

0800def0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800def0:	b480      	push	{r7}
 800def2:	b085      	sub	sp, #20
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800defa:	2300      	movs	r3, #0
 800defc:	60fb      	str	r3, [r7, #12]
 800defe:	e01f      	b.n	800df40 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800df00:	4a41      	ldr	r2, [pc, #260]	; (800e008 <inc_lock+0x118>)
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	011b      	lsls	r3, r3, #4
 800df06:	4413      	add	r3, r2
 800df08:	681a      	ldr	r2, [r3, #0]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	429a      	cmp	r2, r3
 800df10:	d113      	bne.n	800df3a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800df12:	4a3d      	ldr	r2, [pc, #244]	; (800e008 <inc_lock+0x118>)
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	011b      	lsls	r3, r3, #4
 800df18:	4413      	add	r3, r2
 800df1a:	3304      	adds	r3, #4
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800df22:	429a      	cmp	r2, r3
 800df24:	d109      	bne.n	800df3a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800df26:	4a38      	ldr	r2, [pc, #224]	; (800e008 <inc_lock+0x118>)
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	011b      	lsls	r3, r3, #4
 800df2c:	4413      	add	r3, r2
 800df2e:	3308      	adds	r3, #8
 800df30:	681a      	ldr	r2, [r3, #0]
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800df36:	429a      	cmp	r2, r3
 800df38:	d006      	beq.n	800df48 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	3301      	adds	r3, #1
 800df3e:	60fb      	str	r3, [r7, #12]
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2b01      	cmp	r3, #1
 800df44:	d9dc      	bls.n	800df00 <inc_lock+0x10>
 800df46:	e000      	b.n	800df4a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800df48:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	2b02      	cmp	r3, #2
 800df4e:	d132      	bne.n	800dfb6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800df50:	2300      	movs	r3, #0
 800df52:	60fb      	str	r3, [r7, #12]
 800df54:	e002      	b.n	800df5c <inc_lock+0x6c>
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	3301      	adds	r3, #1
 800df5a:	60fb      	str	r3, [r7, #12]
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2b01      	cmp	r3, #1
 800df60:	d806      	bhi.n	800df70 <inc_lock+0x80>
 800df62:	4a29      	ldr	r2, [pc, #164]	; (800e008 <inc_lock+0x118>)
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	011b      	lsls	r3, r3, #4
 800df68:	4413      	add	r3, r2
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d1f2      	bne.n	800df56 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2b02      	cmp	r3, #2
 800df74:	d101      	bne.n	800df7a <inc_lock+0x8a>
 800df76:	2300      	movs	r3, #0
 800df78:	e040      	b.n	800dffc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	4922      	ldr	r1, [pc, #136]	; (800e008 <inc_lock+0x118>)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	011b      	lsls	r3, r3, #4
 800df84:	440b      	add	r3, r1
 800df86:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	689a      	ldr	r2, [r3, #8]
 800df8c:	491e      	ldr	r1, [pc, #120]	; (800e008 <inc_lock+0x118>)
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	011b      	lsls	r3, r3, #4
 800df92:	440b      	add	r3, r1
 800df94:	3304      	adds	r3, #4
 800df96:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	695a      	ldr	r2, [r3, #20]
 800df9c:	491a      	ldr	r1, [pc, #104]	; (800e008 <inc_lock+0x118>)
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	011b      	lsls	r3, r3, #4
 800dfa2:	440b      	add	r3, r1
 800dfa4:	3308      	adds	r3, #8
 800dfa6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800dfa8:	4a17      	ldr	r2, [pc, #92]	; (800e008 <inc_lock+0x118>)
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	011b      	lsls	r3, r3, #4
 800dfae:	4413      	add	r3, r2
 800dfb0:	330c      	adds	r3, #12
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d009      	beq.n	800dfd0 <inc_lock+0xe0>
 800dfbc:	4a12      	ldr	r2, [pc, #72]	; (800e008 <inc_lock+0x118>)
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	011b      	lsls	r3, r3, #4
 800dfc2:	4413      	add	r3, r2
 800dfc4:	330c      	adds	r3, #12
 800dfc6:	881b      	ldrh	r3, [r3, #0]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d001      	beq.n	800dfd0 <inc_lock+0xe0>
 800dfcc:	2300      	movs	r3, #0
 800dfce:	e015      	b.n	800dffc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d108      	bne.n	800dfe8 <inc_lock+0xf8>
 800dfd6:	4a0c      	ldr	r2, [pc, #48]	; (800e008 <inc_lock+0x118>)
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	011b      	lsls	r3, r3, #4
 800dfdc:	4413      	add	r3, r2
 800dfde:	330c      	adds	r3, #12
 800dfe0:	881b      	ldrh	r3, [r3, #0]
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	b29a      	uxth	r2, r3
 800dfe6:	e001      	b.n	800dfec <inc_lock+0xfc>
 800dfe8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dfec:	4906      	ldr	r1, [pc, #24]	; (800e008 <inc_lock+0x118>)
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	011b      	lsls	r3, r3, #4
 800dff2:	440b      	add	r3, r1
 800dff4:	330c      	adds	r3, #12
 800dff6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	3301      	adds	r3, #1
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3714      	adds	r7, #20
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr
 800e008:	200022c0 	.word	0x200022c0

0800e00c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b085      	sub	sp, #20
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	3b01      	subs	r3, #1
 800e018:	607b      	str	r3, [r7, #4]
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2b01      	cmp	r3, #1
 800e01e:	d825      	bhi.n	800e06c <dec_lock+0x60>
		n = Files[i].ctr;
 800e020:	4a17      	ldr	r2, [pc, #92]	; (800e080 <dec_lock+0x74>)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	011b      	lsls	r3, r3, #4
 800e026:	4413      	add	r3, r2
 800e028:	330c      	adds	r3, #12
 800e02a:	881b      	ldrh	r3, [r3, #0]
 800e02c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e02e:	89fb      	ldrh	r3, [r7, #14]
 800e030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e034:	d101      	bne.n	800e03a <dec_lock+0x2e>
 800e036:	2300      	movs	r3, #0
 800e038:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e03a:	89fb      	ldrh	r3, [r7, #14]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d002      	beq.n	800e046 <dec_lock+0x3a>
 800e040:	89fb      	ldrh	r3, [r7, #14]
 800e042:	3b01      	subs	r3, #1
 800e044:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e046:	4a0e      	ldr	r2, [pc, #56]	; (800e080 <dec_lock+0x74>)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	011b      	lsls	r3, r3, #4
 800e04c:	4413      	add	r3, r2
 800e04e:	330c      	adds	r3, #12
 800e050:	89fa      	ldrh	r2, [r7, #14]
 800e052:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e054:	89fb      	ldrh	r3, [r7, #14]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d105      	bne.n	800e066 <dec_lock+0x5a>
 800e05a:	4a09      	ldr	r2, [pc, #36]	; (800e080 <dec_lock+0x74>)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	011b      	lsls	r3, r3, #4
 800e060:	4413      	add	r3, r2
 800e062:	2200      	movs	r2, #0
 800e064:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e066:	2300      	movs	r3, #0
 800e068:	737b      	strb	r3, [r7, #13]
 800e06a:	e001      	b.n	800e070 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e06c:	2302      	movs	r3, #2
 800e06e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e070:	7b7b      	ldrb	r3, [r7, #13]
}
 800e072:	4618      	mov	r0, r3
 800e074:	3714      	adds	r7, #20
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop
 800e080:	200022c0 	.word	0x200022c0

0800e084 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e084:	b480      	push	{r7}
 800e086:	b085      	sub	sp, #20
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e08c:	2300      	movs	r3, #0
 800e08e:	60fb      	str	r3, [r7, #12]
 800e090:	e010      	b.n	800e0b4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e092:	4a0d      	ldr	r2, [pc, #52]	; (800e0c8 <clear_lock+0x44>)
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	011b      	lsls	r3, r3, #4
 800e098:	4413      	add	r3, r2
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d105      	bne.n	800e0ae <clear_lock+0x2a>
 800e0a2:	4a09      	ldr	r2, [pc, #36]	; (800e0c8 <clear_lock+0x44>)
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	011b      	lsls	r3, r3, #4
 800e0a8:	4413      	add	r3, r2
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	60fb      	str	r3, [r7, #12]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	d9eb      	bls.n	800e092 <clear_lock+0xe>
	}
}
 800e0ba:	bf00      	nop
 800e0bc:	bf00      	nop
 800e0be:	3714      	adds	r7, #20
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr
 800e0c8:	200022c0 	.word	0x200022c0

0800e0cc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b086      	sub	sp, #24
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	78db      	ldrb	r3, [r3, #3]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d034      	beq.n	800e14a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	7858      	ldrb	r0, [r3, #1]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	697a      	ldr	r2, [r7, #20]
 800e0f4:	f7ff fd40 	bl	800db78 <disk_write>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d002      	beq.n	800e104 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e0fe:	2301      	movs	r3, #1
 800e100:	73fb      	strb	r3, [r7, #15]
 800e102:	e022      	b.n	800e14a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2200      	movs	r2, #0
 800e108:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e10e:	697a      	ldr	r2, [r7, #20]
 800e110:	1ad2      	subs	r2, r2, r3
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	69db      	ldr	r3, [r3, #28]
 800e116:	429a      	cmp	r2, r3
 800e118:	d217      	bcs.n	800e14a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	789b      	ldrb	r3, [r3, #2]
 800e11e:	613b      	str	r3, [r7, #16]
 800e120:	e010      	b.n	800e144 <sync_window+0x78>
					wsect += fs->fsize;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	69db      	ldr	r3, [r3, #28]
 800e126:	697a      	ldr	r2, [r7, #20]
 800e128:	4413      	add	r3, r2
 800e12a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	7858      	ldrb	r0, [r3, #1]
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e136:	2301      	movs	r3, #1
 800e138:	697a      	ldr	r2, [r7, #20]
 800e13a:	f7ff fd1d 	bl	800db78 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	3b01      	subs	r3, #1
 800e142:	613b      	str	r3, [r7, #16]
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	2b01      	cmp	r3, #1
 800e148:	d8eb      	bhi.n	800e122 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3718      	adds	r7, #24
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e15e:	2300      	movs	r3, #0
 800e160:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e166:	683a      	ldr	r2, [r7, #0]
 800e168:	429a      	cmp	r2, r3
 800e16a:	d01b      	beq.n	800e1a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f7ff ffad 	bl	800e0cc <sync_window>
 800e172:	4603      	mov	r3, r0
 800e174:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e176:	7bfb      	ldrb	r3, [r7, #15]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d113      	bne.n	800e1a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	7858      	ldrb	r0, [r3, #1]
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e186:	2301      	movs	r3, #1
 800e188:	683a      	ldr	r2, [r7, #0]
 800e18a:	f7ff fcd5 	bl	800db38 <disk_read>
 800e18e:	4603      	mov	r3, r0
 800e190:	2b00      	cmp	r3, #0
 800e192:	d004      	beq.n	800e19e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e194:	f04f 33ff 	mov.w	r3, #4294967295
 800e198:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e19a:	2301      	movs	r3, #1
 800e19c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	683a      	ldr	r2, [r7, #0]
 800e1a2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800e1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3710      	adds	r7, #16
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
	...

0800e1b0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b084      	sub	sp, #16
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f7ff ff87 	bl	800e0cc <sync_window>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e1c2:	7bfb      	ldrb	r3, [r7, #15]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d158      	bne.n	800e27a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	2b03      	cmp	r3, #3
 800e1ce:	d148      	bne.n	800e262 <sync_fs+0xb2>
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	791b      	ldrb	r3, [r3, #4]
 800e1d4:	2b01      	cmp	r3, #1
 800e1d6:	d144      	bne.n	800e262 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	3334      	adds	r3, #52	; 0x34
 800e1dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e1e0:	2100      	movs	r1, #0
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7ff fda9 	bl	800dd3a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	3334      	adds	r3, #52	; 0x34
 800e1ec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e1f0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f7ff fd38 	bl	800dc6a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	3334      	adds	r3, #52	; 0x34
 800e1fe:	4921      	ldr	r1, [pc, #132]	; (800e284 <sync_fs+0xd4>)
 800e200:	4618      	mov	r0, r3
 800e202:	f7ff fd4d 	bl	800dca0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	3334      	adds	r3, #52	; 0x34
 800e20a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e20e:	491e      	ldr	r1, [pc, #120]	; (800e288 <sync_fs+0xd8>)
 800e210:	4618      	mov	r0, r3
 800e212:	f7ff fd45 	bl	800dca0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	3334      	adds	r3, #52	; 0x34
 800e21a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	695b      	ldr	r3, [r3, #20]
 800e222:	4619      	mov	r1, r3
 800e224:	4610      	mov	r0, r2
 800e226:	f7ff fd3b 	bl	800dca0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	3334      	adds	r3, #52	; 0x34
 800e22e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	691b      	ldr	r3, [r3, #16]
 800e236:	4619      	mov	r1, r3
 800e238:	4610      	mov	r0, r2
 800e23a:	f7ff fd31 	bl	800dca0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6a1b      	ldr	r3, [r3, #32]
 800e242:	1c5a      	adds	r2, r3, #1
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	7858      	ldrb	r0, [r3, #1]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e256:	2301      	movs	r3, #1
 800e258:	f7ff fc8e 	bl	800db78 <disk_write>
			fs->fsi_flag = 0;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2200      	movs	r2, #0
 800e260:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	785b      	ldrb	r3, [r3, #1]
 800e266:	2200      	movs	r2, #0
 800e268:	2100      	movs	r1, #0
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7ff fca4 	bl	800dbb8 <disk_ioctl>
 800e270:	4603      	mov	r3, r0
 800e272:	2b00      	cmp	r3, #0
 800e274:	d001      	beq.n	800e27a <sync_fs+0xca>
 800e276:	2301      	movs	r3, #1
 800e278:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e27a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3710      	adds	r7, #16
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}
 800e284:	41615252 	.word	0x41615252
 800e288:	61417272 	.word	0x61417272

0800e28c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b083      	sub	sp, #12
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	3b02      	subs	r3, #2
 800e29a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	699b      	ldr	r3, [r3, #24]
 800e2a0:	3b02      	subs	r3, #2
 800e2a2:	683a      	ldr	r2, [r7, #0]
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d301      	bcc.n	800e2ac <clust2sect+0x20>
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	e008      	b.n	800e2be <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	895b      	ldrh	r3, [r3, #10]
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	fb03 f202 	mul.w	r2, r3, r2
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2bc:	4413      	add	r3, r2
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	370c      	adds	r7, #12
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c8:	4770      	bx	lr

0800e2ca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e2ca:	b580      	push	{r7, lr}
 800e2cc:	b086      	sub	sp, #24
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
 800e2d2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d904      	bls.n	800e2ea <get_fat+0x20>
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	699b      	ldr	r3, [r3, #24]
 800e2e4:	683a      	ldr	r2, [r7, #0]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d302      	bcc.n	800e2f0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	617b      	str	r3, [r7, #20]
 800e2ee:	e08f      	b.n	800e410 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e2f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e2f4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	781b      	ldrb	r3, [r3, #0]
 800e2fa:	2b03      	cmp	r3, #3
 800e2fc:	d062      	beq.n	800e3c4 <get_fat+0xfa>
 800e2fe:	2b03      	cmp	r3, #3
 800e300:	dc7c      	bgt.n	800e3fc <get_fat+0x132>
 800e302:	2b01      	cmp	r3, #1
 800e304:	d002      	beq.n	800e30c <get_fat+0x42>
 800e306:	2b02      	cmp	r3, #2
 800e308:	d042      	beq.n	800e390 <get_fat+0xc6>
 800e30a:	e077      	b.n	800e3fc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	60fb      	str	r3, [r7, #12]
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	085b      	lsrs	r3, r3, #1
 800e314:	68fa      	ldr	r2, [r7, #12]
 800e316:	4413      	add	r3, r2
 800e318:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	0a5b      	lsrs	r3, r3, #9
 800e322:	4413      	add	r3, r2
 800e324:	4619      	mov	r1, r3
 800e326:	6938      	ldr	r0, [r7, #16]
 800e328:	f7ff ff14 	bl	800e154 <move_window>
 800e32c:	4603      	mov	r3, r0
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d167      	bne.n	800e402 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	1c5a      	adds	r2, r3, #1
 800e336:	60fa      	str	r2, [r7, #12]
 800e338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e33c:	693a      	ldr	r2, [r7, #16]
 800e33e:	4413      	add	r3, r2
 800e340:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e344:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	0a5b      	lsrs	r3, r3, #9
 800e34e:	4413      	add	r3, r2
 800e350:	4619      	mov	r1, r3
 800e352:	6938      	ldr	r0, [r7, #16]
 800e354:	f7ff fefe 	bl	800e154 <move_window>
 800e358:	4603      	mov	r3, r0
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d153      	bne.n	800e406 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e364:	693a      	ldr	r2, [r7, #16]
 800e366:	4413      	add	r3, r2
 800e368:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e36c:	021b      	lsls	r3, r3, #8
 800e36e:	461a      	mov	r2, r3
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	4313      	orrs	r3, r2
 800e374:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	f003 0301 	and.w	r3, r3, #1
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d002      	beq.n	800e386 <get_fat+0xbc>
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	091b      	lsrs	r3, r3, #4
 800e384:	e002      	b.n	800e38c <get_fat+0xc2>
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e38c:	617b      	str	r3, [r7, #20]
			break;
 800e38e:	e03f      	b.n	800e410 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	0a1b      	lsrs	r3, r3, #8
 800e398:	4413      	add	r3, r2
 800e39a:	4619      	mov	r1, r3
 800e39c:	6938      	ldr	r0, [r7, #16]
 800e39e:	f7ff fed9 	bl	800e154 <move_window>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d130      	bne.n	800e40a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	005b      	lsls	r3, r3, #1
 800e3b2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e3b6:	4413      	add	r3, r2
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7ff fc1b 	bl	800dbf4 <ld_word>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	617b      	str	r3, [r7, #20]
			break;
 800e3c2:	e025      	b.n	800e410 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	09db      	lsrs	r3, r3, #7
 800e3cc:	4413      	add	r3, r2
 800e3ce:	4619      	mov	r1, r3
 800e3d0:	6938      	ldr	r0, [r7, #16]
 800e3d2:	f7ff febf 	bl	800e154 <move_window>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d118      	bne.n	800e40e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	009b      	lsls	r3, r3, #2
 800e3e6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e3ea:	4413      	add	r3, r2
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f7ff fc19 	bl	800dc24 <ld_dword>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e3f8:	617b      	str	r3, [r7, #20]
			break;
 800e3fa:	e009      	b.n	800e410 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	617b      	str	r3, [r7, #20]
 800e400:	e006      	b.n	800e410 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e402:	bf00      	nop
 800e404:	e004      	b.n	800e410 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e406:	bf00      	nop
 800e408:	e002      	b.n	800e410 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e40a:	bf00      	nop
 800e40c:	e000      	b.n	800e410 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e40e:	bf00      	nop
		}
	}

	return val;
 800e410:	697b      	ldr	r3, [r7, #20]
}
 800e412:	4618      	mov	r0, r3
 800e414:	3718      	adds	r7, #24
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}

0800e41a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e41a:	b590      	push	{r4, r7, lr}
 800e41c:	b089      	sub	sp, #36	; 0x24
 800e41e:	af00      	add	r7, sp, #0
 800e420:	60f8      	str	r0, [r7, #12]
 800e422:	60b9      	str	r1, [r7, #8]
 800e424:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e426:	2302      	movs	r3, #2
 800e428:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	f240 80d9 	bls.w	800e5e4 <put_fat+0x1ca>
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	699b      	ldr	r3, [r3, #24]
 800e436:	68ba      	ldr	r2, [r7, #8]
 800e438:	429a      	cmp	r2, r3
 800e43a:	f080 80d3 	bcs.w	800e5e4 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	2b03      	cmp	r3, #3
 800e444:	f000 8096 	beq.w	800e574 <put_fat+0x15a>
 800e448:	2b03      	cmp	r3, #3
 800e44a:	f300 80cb 	bgt.w	800e5e4 <put_fat+0x1ca>
 800e44e:	2b01      	cmp	r3, #1
 800e450:	d002      	beq.n	800e458 <put_fat+0x3e>
 800e452:	2b02      	cmp	r3, #2
 800e454:	d06e      	beq.n	800e534 <put_fat+0x11a>
 800e456:	e0c5      	b.n	800e5e4 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	61bb      	str	r3, [r7, #24]
 800e45c:	69bb      	ldr	r3, [r7, #24]
 800e45e:	085b      	lsrs	r3, r3, #1
 800e460:	69ba      	ldr	r2, [r7, #24]
 800e462:	4413      	add	r3, r2
 800e464:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e46a:	69bb      	ldr	r3, [r7, #24]
 800e46c:	0a5b      	lsrs	r3, r3, #9
 800e46e:	4413      	add	r3, r2
 800e470:	4619      	mov	r1, r3
 800e472:	68f8      	ldr	r0, [r7, #12]
 800e474:	f7ff fe6e 	bl	800e154 <move_window>
 800e478:	4603      	mov	r3, r0
 800e47a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e47c:	7ffb      	ldrb	r3, [r7, #31]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	f040 80a9 	bne.w	800e5d6 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e48a:	69bb      	ldr	r3, [r7, #24]
 800e48c:	1c59      	adds	r1, r3, #1
 800e48e:	61b9      	str	r1, [r7, #24]
 800e490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e494:	4413      	add	r3, r2
 800e496:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	f003 0301 	and.w	r3, r3, #1
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d00d      	beq.n	800e4be <put_fat+0xa4>
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	781b      	ldrb	r3, [r3, #0]
 800e4a6:	b25b      	sxtb	r3, r3
 800e4a8:	f003 030f 	and.w	r3, r3, #15
 800e4ac:	b25a      	sxtb	r2, r3
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	b2db      	uxtb	r3, r3
 800e4b2:	011b      	lsls	r3, r3, #4
 800e4b4:	b25b      	sxtb	r3, r3
 800e4b6:	4313      	orrs	r3, r2
 800e4b8:	b25b      	sxtb	r3, r3
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	e001      	b.n	800e4c2 <put_fat+0xa8>
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	b2db      	uxtb	r3, r3
 800e4c2:	697a      	ldr	r2, [r7, #20]
 800e4c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4d0:	69bb      	ldr	r3, [r7, #24]
 800e4d2:	0a5b      	lsrs	r3, r3, #9
 800e4d4:	4413      	add	r3, r2
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	68f8      	ldr	r0, [r7, #12]
 800e4da:	f7ff fe3b 	bl	800e154 <move_window>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e4e2:	7ffb      	ldrb	r3, [r7, #31]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d178      	bne.n	800e5da <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e4ee:	69bb      	ldr	r3, [r7, #24]
 800e4f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4f4:	4413      	add	r3, r2
 800e4f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	f003 0301 	and.w	r3, r3, #1
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d003      	beq.n	800e50a <put_fat+0xf0>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	091b      	lsrs	r3, r3, #4
 800e506:	b2db      	uxtb	r3, r3
 800e508:	e00e      	b.n	800e528 <put_fat+0x10e>
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	781b      	ldrb	r3, [r3, #0]
 800e50e:	b25b      	sxtb	r3, r3
 800e510:	f023 030f 	bic.w	r3, r3, #15
 800e514:	b25a      	sxtb	r2, r3
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	0a1b      	lsrs	r3, r3, #8
 800e51a:	b25b      	sxtb	r3, r3
 800e51c:	f003 030f 	and.w	r3, r3, #15
 800e520:	b25b      	sxtb	r3, r3
 800e522:	4313      	orrs	r3, r2
 800e524:	b25b      	sxtb	r3, r3
 800e526:	b2db      	uxtb	r3, r3
 800e528:	697a      	ldr	r2, [r7, #20]
 800e52a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	2201      	movs	r2, #1
 800e530:	70da      	strb	r2, [r3, #3]
			break;
 800e532:	e057      	b.n	800e5e4 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	0a1b      	lsrs	r3, r3, #8
 800e53c:	4413      	add	r3, r2
 800e53e:	4619      	mov	r1, r3
 800e540:	68f8      	ldr	r0, [r7, #12]
 800e542:	f7ff fe07 	bl	800e154 <move_window>
 800e546:	4603      	mov	r3, r0
 800e548:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e54a:	7ffb      	ldrb	r3, [r7, #31]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d146      	bne.n	800e5de <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	005b      	lsls	r3, r3, #1
 800e55a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e55e:	4413      	add	r3, r2
 800e560:	687a      	ldr	r2, [r7, #4]
 800e562:	b292      	uxth	r2, r2
 800e564:	4611      	mov	r1, r2
 800e566:	4618      	mov	r0, r3
 800e568:	f7ff fb7f 	bl	800dc6a <st_word>
			fs->wflag = 1;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	2201      	movs	r2, #1
 800e570:	70da      	strb	r2, [r3, #3]
			break;
 800e572:	e037      	b.n	800e5e4 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	09db      	lsrs	r3, r3, #7
 800e57c:	4413      	add	r3, r2
 800e57e:	4619      	mov	r1, r3
 800e580:	68f8      	ldr	r0, [r7, #12]
 800e582:	f7ff fde7 	bl	800e154 <move_window>
 800e586:	4603      	mov	r3, r0
 800e588:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e58a:	7ffb      	ldrb	r3, [r7, #31]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d128      	bne.n	800e5e2 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	009b      	lsls	r3, r3, #2
 800e5a0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e5a4:	4413      	add	r3, r2
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7ff fb3c 	bl	800dc24 <ld_dword>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e5b2:	4323      	orrs	r3, r4
 800e5b4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	009b      	lsls	r3, r3, #2
 800e5c0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e5c4:	4413      	add	r3, r2
 800e5c6:	6879      	ldr	r1, [r7, #4]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7ff fb69 	bl	800dca0 <st_dword>
			fs->wflag = 1;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2201      	movs	r2, #1
 800e5d2:	70da      	strb	r2, [r3, #3]
			break;
 800e5d4:	e006      	b.n	800e5e4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e5d6:	bf00      	nop
 800e5d8:	e004      	b.n	800e5e4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e5da:	bf00      	nop
 800e5dc:	e002      	b.n	800e5e4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e5de:	bf00      	nop
 800e5e0:	e000      	b.n	800e5e4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e5e2:	bf00      	nop
		}
	}
	return res;
 800e5e4:	7ffb      	ldrb	r3, [r7, #31]
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3724      	adds	r7, #36	; 0x24
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd90      	pop	{r4, r7, pc}

0800e5ee <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e5ee:	b580      	push	{r7, lr}
 800e5f0:	b088      	sub	sp, #32
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	60f8      	str	r0, [r7, #12]
 800e5f6:	60b9      	str	r1, [r7, #8]
 800e5f8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	2b01      	cmp	r3, #1
 800e608:	d904      	bls.n	800e614 <remove_chain+0x26>
 800e60a:	69bb      	ldr	r3, [r7, #24]
 800e60c:	699b      	ldr	r3, [r3, #24]
 800e60e:	68ba      	ldr	r2, [r7, #8]
 800e610:	429a      	cmp	r2, r3
 800e612:	d301      	bcc.n	800e618 <remove_chain+0x2a>
 800e614:	2302      	movs	r3, #2
 800e616:	e04b      	b.n	800e6b0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d00c      	beq.n	800e638 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e61e:	f04f 32ff 	mov.w	r2, #4294967295
 800e622:	6879      	ldr	r1, [r7, #4]
 800e624:	69b8      	ldr	r0, [r7, #24]
 800e626:	f7ff fef8 	bl	800e41a <put_fat>
 800e62a:	4603      	mov	r3, r0
 800e62c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e62e:	7ffb      	ldrb	r3, [r7, #31]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d001      	beq.n	800e638 <remove_chain+0x4a>
 800e634:	7ffb      	ldrb	r3, [r7, #31]
 800e636:	e03b      	b.n	800e6b0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e638:	68b9      	ldr	r1, [r7, #8]
 800e63a:	68f8      	ldr	r0, [r7, #12]
 800e63c:	f7ff fe45 	bl	800e2ca <get_fat>
 800e640:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d031      	beq.n	800e6ac <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d101      	bne.n	800e652 <remove_chain+0x64>
 800e64e:	2302      	movs	r3, #2
 800e650:	e02e      	b.n	800e6b0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e658:	d101      	bne.n	800e65e <remove_chain+0x70>
 800e65a:	2301      	movs	r3, #1
 800e65c:	e028      	b.n	800e6b0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e65e:	2200      	movs	r2, #0
 800e660:	68b9      	ldr	r1, [r7, #8]
 800e662:	69b8      	ldr	r0, [r7, #24]
 800e664:	f7ff fed9 	bl	800e41a <put_fat>
 800e668:	4603      	mov	r3, r0
 800e66a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e66c:	7ffb      	ldrb	r3, [r7, #31]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d001      	beq.n	800e676 <remove_chain+0x88>
 800e672:	7ffb      	ldrb	r3, [r7, #31]
 800e674:	e01c      	b.n	800e6b0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e676:	69bb      	ldr	r3, [r7, #24]
 800e678:	695a      	ldr	r2, [r3, #20]
 800e67a:	69bb      	ldr	r3, [r7, #24]
 800e67c:	699b      	ldr	r3, [r3, #24]
 800e67e:	3b02      	subs	r3, #2
 800e680:	429a      	cmp	r2, r3
 800e682:	d20b      	bcs.n	800e69c <remove_chain+0xae>
			fs->free_clst++;
 800e684:	69bb      	ldr	r3, [r7, #24]
 800e686:	695b      	ldr	r3, [r3, #20]
 800e688:	1c5a      	adds	r2, r3, #1
 800e68a:	69bb      	ldr	r3, [r7, #24]
 800e68c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e68e:	69bb      	ldr	r3, [r7, #24]
 800e690:	791b      	ldrb	r3, [r3, #4]
 800e692:	f043 0301 	orr.w	r3, r3, #1
 800e696:	b2da      	uxtb	r2, r3
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e6a0:	69bb      	ldr	r3, [r7, #24]
 800e6a2:	699b      	ldr	r3, [r3, #24]
 800e6a4:	68ba      	ldr	r2, [r7, #8]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d3c6      	bcc.n	800e638 <remove_chain+0x4a>
 800e6aa:	e000      	b.n	800e6ae <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e6ac:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e6ae:	2300      	movs	r3, #0
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3720      	adds	r7, #32
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}

0800e6b8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b088      	sub	sp, #32
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d10d      	bne.n	800e6ea <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	691b      	ldr	r3, [r3, #16]
 800e6d2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e6d4:	69bb      	ldr	r3, [r7, #24]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d004      	beq.n	800e6e4 <create_chain+0x2c>
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	699b      	ldr	r3, [r3, #24]
 800e6de:	69ba      	ldr	r2, [r7, #24]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d31b      	bcc.n	800e71c <create_chain+0x64>
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	61bb      	str	r3, [r7, #24]
 800e6e8:	e018      	b.n	800e71c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e6ea:	6839      	ldr	r1, [r7, #0]
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f7ff fdec 	bl	800e2ca <get_fat>
 800e6f2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2b01      	cmp	r3, #1
 800e6f8:	d801      	bhi.n	800e6fe <create_chain+0x46>
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	e070      	b.n	800e7e0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e704:	d101      	bne.n	800e70a <create_chain+0x52>
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	e06a      	b.n	800e7e0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	699b      	ldr	r3, [r3, #24]
 800e70e:	68fa      	ldr	r2, [r7, #12]
 800e710:	429a      	cmp	r2, r3
 800e712:	d201      	bcs.n	800e718 <create_chain+0x60>
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	e063      	b.n	800e7e0 <create_chain+0x128>
		scl = clst;
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e71c:	69bb      	ldr	r3, [r7, #24]
 800e71e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e720:	69fb      	ldr	r3, [r7, #28]
 800e722:	3301      	adds	r3, #1
 800e724:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	699b      	ldr	r3, [r3, #24]
 800e72a:	69fa      	ldr	r2, [r7, #28]
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d307      	bcc.n	800e740 <create_chain+0x88>
				ncl = 2;
 800e730:	2302      	movs	r3, #2
 800e732:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e734:	69fa      	ldr	r2, [r7, #28]
 800e736:	69bb      	ldr	r3, [r7, #24]
 800e738:	429a      	cmp	r2, r3
 800e73a:	d901      	bls.n	800e740 <create_chain+0x88>
 800e73c:	2300      	movs	r3, #0
 800e73e:	e04f      	b.n	800e7e0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e740:	69f9      	ldr	r1, [r7, #28]
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f7ff fdc1 	bl	800e2ca <get_fat>
 800e748:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d00e      	beq.n	800e76e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	2b01      	cmp	r3, #1
 800e754:	d003      	beq.n	800e75e <create_chain+0xa6>
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e75c:	d101      	bne.n	800e762 <create_chain+0xaa>
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	e03e      	b.n	800e7e0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e762:	69fa      	ldr	r2, [r7, #28]
 800e764:	69bb      	ldr	r3, [r7, #24]
 800e766:	429a      	cmp	r2, r3
 800e768:	d1da      	bne.n	800e720 <create_chain+0x68>
 800e76a:	2300      	movs	r3, #0
 800e76c:	e038      	b.n	800e7e0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e76e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e770:	f04f 32ff 	mov.w	r2, #4294967295
 800e774:	69f9      	ldr	r1, [r7, #28]
 800e776:	6938      	ldr	r0, [r7, #16]
 800e778:	f7ff fe4f 	bl	800e41a <put_fat>
 800e77c:	4603      	mov	r3, r0
 800e77e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e780:	7dfb      	ldrb	r3, [r7, #23]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d109      	bne.n	800e79a <create_chain+0xe2>
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d006      	beq.n	800e79a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e78c:	69fa      	ldr	r2, [r7, #28]
 800e78e:	6839      	ldr	r1, [r7, #0]
 800e790:	6938      	ldr	r0, [r7, #16]
 800e792:	f7ff fe42 	bl	800e41a <put_fat>
 800e796:	4603      	mov	r3, r0
 800e798:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e79a:	7dfb      	ldrb	r3, [r7, #23]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d116      	bne.n	800e7ce <create_chain+0x116>
		fs->last_clst = ncl;
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	69fa      	ldr	r2, [r7, #28]
 800e7a4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	695a      	ldr	r2, [r3, #20]
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	699b      	ldr	r3, [r3, #24]
 800e7ae:	3b02      	subs	r3, #2
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d804      	bhi.n	800e7be <create_chain+0x106>
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	695b      	ldr	r3, [r3, #20]
 800e7b8:	1e5a      	subs	r2, r3, #1
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	791b      	ldrb	r3, [r3, #4]
 800e7c2:	f043 0301 	orr.w	r3, r3, #1
 800e7c6:	b2da      	uxtb	r2, r3
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	711a      	strb	r2, [r3, #4]
 800e7cc:	e007      	b.n	800e7de <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e7ce:	7dfb      	ldrb	r3, [r7, #23]
 800e7d0:	2b01      	cmp	r3, #1
 800e7d2:	d102      	bne.n	800e7da <create_chain+0x122>
 800e7d4:	f04f 33ff 	mov.w	r3, #4294967295
 800e7d8:	e000      	b.n	800e7dc <create_chain+0x124>
 800e7da:	2301      	movs	r3, #1
 800e7dc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e7de:	69fb      	ldr	r3, [r7, #28]
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3720      	adds	r7, #32
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b087      	sub	sp, #28
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7fc:	3304      	adds	r3, #4
 800e7fe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	0a5b      	lsrs	r3, r3, #9
 800e804:	68fa      	ldr	r2, [r7, #12]
 800e806:	8952      	ldrh	r2, [r2, #10]
 800e808:	fbb3 f3f2 	udiv	r3, r3, r2
 800e80c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	1d1a      	adds	r2, r3, #4
 800e812:	613a      	str	r2, [r7, #16]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d101      	bne.n	800e822 <clmt_clust+0x3a>
 800e81e:	2300      	movs	r3, #0
 800e820:	e010      	b.n	800e844 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e822:	697a      	ldr	r2, [r7, #20]
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	429a      	cmp	r2, r3
 800e828:	d307      	bcc.n	800e83a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e82a:	697a      	ldr	r2, [r7, #20]
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	1ad3      	subs	r3, r2, r3
 800e830:	617b      	str	r3, [r7, #20]
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	3304      	adds	r3, #4
 800e836:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e838:	e7e9      	b.n	800e80e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e83a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	681a      	ldr	r2, [r3, #0]
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	4413      	add	r3, r2
}
 800e844:	4618      	mov	r0, r3
 800e846:	371c      	adds	r7, #28
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr

0800e850 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b086      	sub	sp, #24
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e866:	d204      	bcs.n	800e872 <dir_sdi+0x22>
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	f003 031f 	and.w	r3, r3, #31
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d001      	beq.n	800e876 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e872:	2302      	movs	r3, #2
 800e874:	e063      	b.n	800e93e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	683a      	ldr	r2, [r7, #0]
 800e87a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	689b      	ldr	r3, [r3, #8]
 800e880:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d106      	bne.n	800e896 <dir_sdi+0x46>
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	2b02      	cmp	r3, #2
 800e88e:	d902      	bls.n	800e896 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e894:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d10c      	bne.n	800e8b6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	095b      	lsrs	r3, r3, #5
 800e8a0:	693a      	ldr	r2, [r7, #16]
 800e8a2:	8912      	ldrh	r2, [r2, #8]
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d301      	bcc.n	800e8ac <dir_sdi+0x5c>
 800e8a8:	2302      	movs	r3, #2
 800e8aa:	e048      	b.n	800e93e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	61da      	str	r2, [r3, #28]
 800e8b4:	e029      	b.n	800e90a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	895b      	ldrh	r3, [r3, #10]
 800e8ba:	025b      	lsls	r3, r3, #9
 800e8bc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e8be:	e019      	b.n	800e8f4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6979      	ldr	r1, [r7, #20]
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f7ff fd00 	bl	800e2ca <get_fat>
 800e8ca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e8cc:	697b      	ldr	r3, [r7, #20]
 800e8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8d2:	d101      	bne.n	800e8d8 <dir_sdi+0x88>
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	e032      	b.n	800e93e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	2b01      	cmp	r3, #1
 800e8dc:	d904      	bls.n	800e8e8 <dir_sdi+0x98>
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	699b      	ldr	r3, [r3, #24]
 800e8e2:	697a      	ldr	r2, [r7, #20]
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d301      	bcc.n	800e8ec <dir_sdi+0x9c>
 800e8e8:	2302      	movs	r3, #2
 800e8ea:	e028      	b.n	800e93e <dir_sdi+0xee>
			ofs -= csz;
 800e8ec:	683a      	ldr	r2, [r7, #0]
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	1ad3      	subs	r3, r2, r3
 800e8f2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e8f4:	683a      	ldr	r2, [r7, #0]
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d2e1      	bcs.n	800e8c0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e8fc:	6979      	ldr	r1, [r7, #20]
 800e8fe:	6938      	ldr	r0, [r7, #16]
 800e900:	f7ff fcc4 	bl	800e28c <clust2sect>
 800e904:	4602      	mov	r2, r0
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	697a      	ldr	r2, [r7, #20]
 800e90e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	69db      	ldr	r3, [r3, #28]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d101      	bne.n	800e91c <dir_sdi+0xcc>
 800e918:	2302      	movs	r3, #2
 800e91a:	e010      	b.n	800e93e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	69da      	ldr	r2, [r3, #28]
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	0a5b      	lsrs	r3, r3, #9
 800e924:	441a      	add	r2, r3
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e936:	441a      	add	r2, r3
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e93c:	2300      	movs	r3, #0
}
 800e93e:	4618      	mov	r0, r3
 800e940:	3718      	adds	r7, #24
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}

0800e946 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e946:	b580      	push	{r7, lr}
 800e948:	b086      	sub	sp, #24
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	6078      	str	r0, [r7, #4]
 800e94e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	695b      	ldr	r3, [r3, #20]
 800e95a:	3320      	adds	r3, #32
 800e95c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	69db      	ldr	r3, [r3, #28]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d003      	beq.n	800e96e <dir_next+0x28>
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e96c:	d301      	bcc.n	800e972 <dir_next+0x2c>
 800e96e:	2304      	movs	r3, #4
 800e970:	e0aa      	b.n	800eac8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e978:	2b00      	cmp	r3, #0
 800e97a:	f040 8098 	bne.w	800eaae <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	69db      	ldr	r3, [r3, #28]
 800e982:	1c5a      	adds	r2, r3, #1
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	699b      	ldr	r3, [r3, #24]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d10b      	bne.n	800e9a8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	095b      	lsrs	r3, r3, #5
 800e994:	68fa      	ldr	r2, [r7, #12]
 800e996:	8912      	ldrh	r2, [r2, #8]
 800e998:	4293      	cmp	r3, r2
 800e99a:	f0c0 8088 	bcc.w	800eaae <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	61da      	str	r2, [r3, #28]
 800e9a4:	2304      	movs	r3, #4
 800e9a6:	e08f      	b.n	800eac8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	0a5b      	lsrs	r3, r3, #9
 800e9ac:	68fa      	ldr	r2, [r7, #12]
 800e9ae:	8952      	ldrh	r2, [r2, #10]
 800e9b0:	3a01      	subs	r2, #1
 800e9b2:	4013      	ands	r3, r2
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d17a      	bne.n	800eaae <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e9b8:	687a      	ldr	r2, [r7, #4]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	699b      	ldr	r3, [r3, #24]
 800e9be:	4619      	mov	r1, r3
 800e9c0:	4610      	mov	r0, r2
 800e9c2:	f7ff fc82 	bl	800e2ca <get_fat>
 800e9c6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	2b01      	cmp	r3, #1
 800e9cc:	d801      	bhi.n	800e9d2 <dir_next+0x8c>
 800e9ce:	2302      	movs	r3, #2
 800e9d0:	e07a      	b.n	800eac8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9d8:	d101      	bne.n	800e9de <dir_next+0x98>
 800e9da:	2301      	movs	r3, #1
 800e9dc:	e074      	b.n	800eac8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	699b      	ldr	r3, [r3, #24]
 800e9e2:	697a      	ldr	r2, [r7, #20]
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d358      	bcc.n	800ea9a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d104      	bne.n	800e9f8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	61da      	str	r2, [r3, #28]
 800e9f4:	2304      	movs	r3, #4
 800e9f6:	e067      	b.n	800eac8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	699b      	ldr	r3, [r3, #24]
 800e9fe:	4619      	mov	r1, r3
 800ea00:	4610      	mov	r0, r2
 800ea02:	f7ff fe59 	bl	800e6b8 <create_chain>
 800ea06:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d101      	bne.n	800ea12 <dir_next+0xcc>
 800ea0e:	2307      	movs	r3, #7
 800ea10:	e05a      	b.n	800eac8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	2b01      	cmp	r3, #1
 800ea16:	d101      	bne.n	800ea1c <dir_next+0xd6>
 800ea18:	2302      	movs	r3, #2
 800ea1a:	e055      	b.n	800eac8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea22:	d101      	bne.n	800ea28 <dir_next+0xe2>
 800ea24:	2301      	movs	r3, #1
 800ea26:	e04f      	b.n	800eac8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ea28:	68f8      	ldr	r0, [r7, #12]
 800ea2a:	f7ff fb4f 	bl	800e0cc <sync_window>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d001      	beq.n	800ea38 <dir_next+0xf2>
 800ea34:	2301      	movs	r3, #1
 800ea36:	e047      	b.n	800eac8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	3334      	adds	r3, #52	; 0x34
 800ea3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea40:	2100      	movs	r1, #0
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7ff f979 	bl	800dd3a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ea48:	2300      	movs	r3, #0
 800ea4a:	613b      	str	r3, [r7, #16]
 800ea4c:	6979      	ldr	r1, [r7, #20]
 800ea4e:	68f8      	ldr	r0, [r7, #12]
 800ea50:	f7ff fc1c 	bl	800e28c <clust2sect>
 800ea54:	4602      	mov	r2, r0
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	631a      	str	r2, [r3, #48]	; 0x30
 800ea5a:	e012      	b.n	800ea82 <dir_next+0x13c>
						fs->wflag = 1;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2201      	movs	r2, #1
 800ea60:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ea62:	68f8      	ldr	r0, [r7, #12]
 800ea64:	f7ff fb32 	bl	800e0cc <sync_window>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d001      	beq.n	800ea72 <dir_next+0x12c>
 800ea6e:	2301      	movs	r3, #1
 800ea70:	e02a      	b.n	800eac8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	3301      	adds	r3, #1
 800ea76:	613b      	str	r3, [r7, #16]
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea7c:	1c5a      	adds	r2, r3, #1
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	631a      	str	r2, [r3, #48]	; 0x30
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	895b      	ldrh	r3, [r3, #10]
 800ea86:	461a      	mov	r2, r3
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	4293      	cmp	r3, r2
 800ea8c:	d3e6      	bcc.n	800ea5c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	1ad2      	subs	r2, r2, r3
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	697a      	ldr	r2, [r7, #20]
 800ea9e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800eaa0:	6979      	ldr	r1, [r7, #20]
 800eaa2:	68f8      	ldr	r0, [r7, #12]
 800eaa4:	f7ff fbf2 	bl	800e28c <clust2sect>
 800eaa8:	4602      	mov	r2, r0
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	68ba      	ldr	r2, [r7, #8]
 800eab2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eac0:	441a      	add	r2, r3
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800eac6:	2300      	movs	r3, #0
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3718      	adds	r7, #24
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b086      	sub	sp, #24
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800eae0:	2100      	movs	r1, #0
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f7ff feb4 	bl	800e850 <dir_sdi>
 800eae8:	4603      	mov	r3, r0
 800eaea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eaec:	7dfb      	ldrb	r3, [r7, #23]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d12b      	bne.n	800eb4a <dir_alloc+0x7a>
		n = 0;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	69db      	ldr	r3, [r3, #28]
 800eafa:	4619      	mov	r1, r3
 800eafc:	68f8      	ldr	r0, [r7, #12]
 800eafe:	f7ff fb29 	bl	800e154 <move_window>
 800eb02:	4603      	mov	r3, r0
 800eb04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eb06:	7dfb      	ldrb	r3, [r7, #23]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d11d      	bne.n	800eb48 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6a1b      	ldr	r3, [r3, #32]
 800eb10:	781b      	ldrb	r3, [r3, #0]
 800eb12:	2be5      	cmp	r3, #229	; 0xe5
 800eb14:	d004      	beq.n	800eb20 <dir_alloc+0x50>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6a1b      	ldr	r3, [r3, #32]
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d107      	bne.n	800eb30 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	3301      	adds	r3, #1
 800eb24:	613b      	str	r3, [r7, #16]
 800eb26:	693a      	ldr	r2, [r7, #16]
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d102      	bne.n	800eb34 <dir_alloc+0x64>
 800eb2e:	e00c      	b.n	800eb4a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800eb30:	2300      	movs	r3, #0
 800eb32:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800eb34:	2101      	movs	r1, #1
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f7ff ff05 	bl	800e946 <dir_next>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800eb40:	7dfb      	ldrb	r3, [r7, #23]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d0d7      	beq.n	800eaf6 <dir_alloc+0x26>
 800eb46:	e000      	b.n	800eb4a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800eb48:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800eb4a:	7dfb      	ldrb	r3, [r7, #23]
 800eb4c:	2b04      	cmp	r3, #4
 800eb4e:	d101      	bne.n	800eb54 <dir_alloc+0x84>
 800eb50:	2307      	movs	r3, #7
 800eb52:	75fb      	strb	r3, [r7, #23]
	return res;
 800eb54:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3718      	adds	r7, #24
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}

0800eb5e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800eb5e:	b580      	push	{r7, lr}
 800eb60:	b084      	sub	sp, #16
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	6078      	str	r0, [r7, #4]
 800eb66:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	331a      	adds	r3, #26
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7ff f841 	bl	800dbf4 <ld_word>
 800eb72:	4603      	mov	r3, r0
 800eb74:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	781b      	ldrb	r3, [r3, #0]
 800eb7a:	2b03      	cmp	r3, #3
 800eb7c:	d109      	bne.n	800eb92 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	3314      	adds	r3, #20
 800eb82:	4618      	mov	r0, r3
 800eb84:	f7ff f836 	bl	800dbf4 <ld_word>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	041b      	lsls	r3, r3, #16
 800eb8c:	68fa      	ldr	r2, [r7, #12]
 800eb8e:	4313      	orrs	r3, r2
 800eb90:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800eb92:	68fb      	ldr	r3, [r7, #12]
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	3710      	adds	r7, #16
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	60b9      	str	r1, [r7, #8]
 800eba6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	331a      	adds	r3, #26
 800ebac:	687a      	ldr	r2, [r7, #4]
 800ebae:	b292      	uxth	r2, r2
 800ebb0:	4611      	mov	r1, r2
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f7ff f859 	bl	800dc6a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	781b      	ldrb	r3, [r3, #0]
 800ebbc:	2b03      	cmp	r3, #3
 800ebbe:	d109      	bne.n	800ebd4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	f103 0214 	add.w	r2, r3, #20
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	0c1b      	lsrs	r3, r3, #16
 800ebca:	b29b      	uxth	r3, r3
 800ebcc:	4619      	mov	r1, r3
 800ebce:	4610      	mov	r0, r2
 800ebd0:	f7ff f84b 	bl	800dc6a <st_word>
	}
}
 800ebd4:	bf00      	nop
 800ebd6:	3710      	adds	r7, #16
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ebdc:	b590      	push	{r4, r7, lr}
 800ebde:	b087      	sub	sp, #28
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	331a      	adds	r3, #26
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7ff f802 	bl	800dbf4 <ld_word>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d001      	beq.n	800ebfa <cmp_lfn+0x1e>
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	e059      	b.n	800ecae <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	781b      	ldrb	r3, [r3, #0]
 800ebfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ec02:	1e5a      	subs	r2, r3, #1
 800ec04:	4613      	mov	r3, r2
 800ec06:	005b      	lsls	r3, r3, #1
 800ec08:	4413      	add	r3, r2
 800ec0a:	009b      	lsls	r3, r3, #2
 800ec0c:	4413      	add	r3, r2
 800ec0e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ec10:	2301      	movs	r3, #1
 800ec12:	81fb      	strh	r3, [r7, #14]
 800ec14:	2300      	movs	r3, #0
 800ec16:	613b      	str	r3, [r7, #16]
 800ec18:	e033      	b.n	800ec82 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ec1a:	4a27      	ldr	r2, [pc, #156]	; (800ecb8 <cmp_lfn+0xdc>)
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	4413      	add	r3, r2
 800ec20:	781b      	ldrb	r3, [r3, #0]
 800ec22:	461a      	mov	r2, r3
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	4413      	add	r3, r2
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7fe ffe3 	bl	800dbf4 <ld_word>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ec32:	89fb      	ldrh	r3, [r7, #14]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d01a      	beq.n	800ec6e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	2bfe      	cmp	r3, #254	; 0xfe
 800ec3c:	d812      	bhi.n	800ec64 <cmp_lfn+0x88>
 800ec3e:	89bb      	ldrh	r3, [r7, #12]
 800ec40:	4618      	mov	r0, r3
 800ec42:	f002 f99f 	bl	8010f84 <ff_wtoupper>
 800ec46:	4603      	mov	r3, r0
 800ec48:	461c      	mov	r4, r3
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	1c5a      	adds	r2, r3, #1
 800ec4e:	617a      	str	r2, [r7, #20]
 800ec50:	005b      	lsls	r3, r3, #1
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	4413      	add	r3, r2
 800ec56:	881b      	ldrh	r3, [r3, #0]
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f002 f993 	bl	8010f84 <ff_wtoupper>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	429c      	cmp	r4, r3
 800ec62:	d001      	beq.n	800ec68 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ec64:	2300      	movs	r3, #0
 800ec66:	e022      	b.n	800ecae <cmp_lfn+0xd2>
			}
			wc = uc;
 800ec68:	89bb      	ldrh	r3, [r7, #12]
 800ec6a:	81fb      	strh	r3, [r7, #14]
 800ec6c:	e006      	b.n	800ec7c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ec6e:	89bb      	ldrh	r3, [r7, #12]
 800ec70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec74:	4293      	cmp	r3, r2
 800ec76:	d001      	beq.n	800ec7c <cmp_lfn+0xa0>
 800ec78:	2300      	movs	r3, #0
 800ec7a:	e018      	b.n	800ecae <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	3301      	adds	r3, #1
 800ec80:	613b      	str	r3, [r7, #16]
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	2b0c      	cmp	r3, #12
 800ec86:	d9c8      	bls.n	800ec1a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	781b      	ldrb	r3, [r3, #0]
 800ec8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d00b      	beq.n	800ecac <cmp_lfn+0xd0>
 800ec94:	89fb      	ldrh	r3, [r7, #14]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d008      	beq.n	800ecac <cmp_lfn+0xd0>
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	005b      	lsls	r3, r3, #1
 800ec9e:	687a      	ldr	r2, [r7, #4]
 800eca0:	4413      	add	r3, r2
 800eca2:	881b      	ldrh	r3, [r3, #0]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d001      	beq.n	800ecac <cmp_lfn+0xd0>
 800eca8:	2300      	movs	r3, #0
 800ecaa:	e000      	b.n	800ecae <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ecac:	2301      	movs	r3, #1
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	371c      	adds	r7, #28
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd90      	pop	{r4, r7, pc}
 800ecb6:	bf00      	nop
 800ecb8:	0801316c 	.word	0x0801316c

0800ecbc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b086      	sub	sp, #24
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	331a      	adds	r3, #26
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7fe ff92 	bl	800dbf4 <ld_word>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d001      	beq.n	800ecda <pick_lfn+0x1e>
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	e04d      	b.n	800ed76 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	781b      	ldrb	r3, [r3, #0]
 800ecde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ece2:	1e5a      	subs	r2, r3, #1
 800ece4:	4613      	mov	r3, r2
 800ece6:	005b      	lsls	r3, r3, #1
 800ece8:	4413      	add	r3, r2
 800ecea:	009b      	lsls	r3, r3, #2
 800ecec:	4413      	add	r3, r2
 800ecee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	81fb      	strh	r3, [r7, #14]
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	613b      	str	r3, [r7, #16]
 800ecf8:	e028      	b.n	800ed4c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ecfa:	4a21      	ldr	r2, [pc, #132]	; (800ed80 <pick_lfn+0xc4>)
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	4413      	add	r3, r2
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	461a      	mov	r2, r3
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	4413      	add	r3, r2
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f7fe ff73 	bl	800dbf4 <ld_word>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ed12:	89fb      	ldrh	r3, [r7, #14]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d00f      	beq.n	800ed38 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	2bfe      	cmp	r3, #254	; 0xfe
 800ed1c:	d901      	bls.n	800ed22 <pick_lfn+0x66>
 800ed1e:	2300      	movs	r3, #0
 800ed20:	e029      	b.n	800ed76 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800ed22:	89bb      	ldrh	r3, [r7, #12]
 800ed24:	81fb      	strh	r3, [r7, #14]
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	1c5a      	adds	r2, r3, #1
 800ed2a:	617a      	str	r2, [r7, #20]
 800ed2c:	005b      	lsls	r3, r3, #1
 800ed2e:	687a      	ldr	r2, [r7, #4]
 800ed30:	4413      	add	r3, r2
 800ed32:	89fa      	ldrh	r2, [r7, #14]
 800ed34:	801a      	strh	r2, [r3, #0]
 800ed36:	e006      	b.n	800ed46 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ed38:	89bb      	ldrh	r3, [r7, #12]
 800ed3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d001      	beq.n	800ed46 <pick_lfn+0x8a>
 800ed42:	2300      	movs	r3, #0
 800ed44:	e017      	b.n	800ed76 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	3301      	adds	r3, #1
 800ed4a:	613b      	str	r3, [r7, #16]
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	2b0c      	cmp	r3, #12
 800ed50:	d9d3      	bls.n	800ecfa <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d00a      	beq.n	800ed74 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	2bfe      	cmp	r3, #254	; 0xfe
 800ed62:	d901      	bls.n	800ed68 <pick_lfn+0xac>
 800ed64:	2300      	movs	r3, #0
 800ed66:	e006      	b.n	800ed76 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	005b      	lsls	r3, r3, #1
 800ed6c:	687a      	ldr	r2, [r7, #4]
 800ed6e:	4413      	add	r3, r2
 800ed70:	2200      	movs	r2, #0
 800ed72:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800ed74:	2301      	movs	r3, #1
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3718      	adds	r7, #24
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	0801316c 	.word	0x0801316c

0800ed84 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b088      	sub	sp, #32
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	60f8      	str	r0, [r7, #12]
 800ed8c:	60b9      	str	r1, [r7, #8]
 800ed8e:	4611      	mov	r1, r2
 800ed90:	461a      	mov	r2, r3
 800ed92:	460b      	mov	r3, r1
 800ed94:	71fb      	strb	r3, [r7, #7]
 800ed96:	4613      	mov	r3, r2
 800ed98:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	330d      	adds	r3, #13
 800ed9e:	79ba      	ldrb	r2, [r7, #6]
 800eda0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	330b      	adds	r3, #11
 800eda6:	220f      	movs	r2, #15
 800eda8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	330c      	adds	r3, #12
 800edae:	2200      	movs	r2, #0
 800edb0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	331a      	adds	r3, #26
 800edb6:	2100      	movs	r1, #0
 800edb8:	4618      	mov	r0, r3
 800edba:	f7fe ff56 	bl	800dc6a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800edbe:	79fb      	ldrb	r3, [r7, #7]
 800edc0:	1e5a      	subs	r2, r3, #1
 800edc2:	4613      	mov	r3, r2
 800edc4:	005b      	lsls	r3, r3, #1
 800edc6:	4413      	add	r3, r2
 800edc8:	009b      	lsls	r3, r3, #2
 800edca:	4413      	add	r3, r2
 800edcc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800edce:	2300      	movs	r3, #0
 800edd0:	82fb      	strh	r3, [r7, #22]
 800edd2:	2300      	movs	r3, #0
 800edd4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800edd6:	8afb      	ldrh	r3, [r7, #22]
 800edd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eddc:	4293      	cmp	r3, r2
 800edde:	d007      	beq.n	800edf0 <put_lfn+0x6c>
 800ede0:	69fb      	ldr	r3, [r7, #28]
 800ede2:	1c5a      	adds	r2, r3, #1
 800ede4:	61fa      	str	r2, [r7, #28]
 800ede6:	005b      	lsls	r3, r3, #1
 800ede8:	68fa      	ldr	r2, [r7, #12]
 800edea:	4413      	add	r3, r2
 800edec:	881b      	ldrh	r3, [r3, #0]
 800edee:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800edf0:	4a17      	ldr	r2, [pc, #92]	; (800ee50 <put_lfn+0xcc>)
 800edf2:	69bb      	ldr	r3, [r7, #24]
 800edf4:	4413      	add	r3, r2
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	461a      	mov	r2, r3
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	4413      	add	r3, r2
 800edfe:	8afa      	ldrh	r2, [r7, #22]
 800ee00:	4611      	mov	r1, r2
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7fe ff31 	bl	800dc6a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ee08:	8afb      	ldrh	r3, [r7, #22]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d102      	bne.n	800ee14 <put_lfn+0x90>
 800ee0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee12:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ee14:	69bb      	ldr	r3, [r7, #24]
 800ee16:	3301      	adds	r3, #1
 800ee18:	61bb      	str	r3, [r7, #24]
 800ee1a:	69bb      	ldr	r3, [r7, #24]
 800ee1c:	2b0c      	cmp	r3, #12
 800ee1e:	d9da      	bls.n	800edd6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ee20:	8afb      	ldrh	r3, [r7, #22]
 800ee22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d006      	beq.n	800ee38 <put_lfn+0xb4>
 800ee2a:	69fb      	ldr	r3, [r7, #28]
 800ee2c:	005b      	lsls	r3, r3, #1
 800ee2e:	68fa      	ldr	r2, [r7, #12]
 800ee30:	4413      	add	r3, r2
 800ee32:	881b      	ldrh	r3, [r3, #0]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d103      	bne.n	800ee40 <put_lfn+0xbc>
 800ee38:	79fb      	ldrb	r3, [r7, #7]
 800ee3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee3e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	79fa      	ldrb	r2, [r7, #7]
 800ee44:	701a      	strb	r2, [r3, #0]
}
 800ee46:	bf00      	nop
 800ee48:	3720      	adds	r7, #32
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}
 800ee4e:	bf00      	nop
 800ee50:	0801316c 	.word	0x0801316c

0800ee54 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b08c      	sub	sp, #48	; 0x30
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	60f8      	str	r0, [r7, #12]
 800ee5c:	60b9      	str	r1, [r7, #8]
 800ee5e:	607a      	str	r2, [r7, #4]
 800ee60:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ee62:	220b      	movs	r2, #11
 800ee64:	68b9      	ldr	r1, [r7, #8]
 800ee66:	68f8      	ldr	r0, [r7, #12]
 800ee68:	f7fe ff46 	bl	800dcf8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	2b05      	cmp	r3, #5
 800ee70:	d92b      	bls.n	800eeca <gen_numname+0x76>
		sr = seq;
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ee76:	e022      	b.n	800eebe <gen_numname+0x6a>
			wc = *lfn++;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	1c9a      	adds	r2, r3, #2
 800ee7c:	607a      	str	r2, [r7, #4]
 800ee7e:	881b      	ldrh	r3, [r3, #0]
 800ee80:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ee82:	2300      	movs	r3, #0
 800ee84:	62bb      	str	r3, [r7, #40]	; 0x28
 800ee86:	e017      	b.n	800eeb8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	005a      	lsls	r2, r3, #1
 800ee8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ee8e:	f003 0301 	and.w	r3, r3, #1
 800ee92:	4413      	add	r3, r2
 800ee94:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ee96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ee98:	085b      	lsrs	r3, r3, #1
 800ee9a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ee9c:	69fb      	ldr	r3, [r7, #28]
 800ee9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d005      	beq.n	800eeb2 <gen_numname+0x5e>
 800eea6:	69fb      	ldr	r3, [r7, #28]
 800eea8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800eeac:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800eeb0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800eeb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb4:	3301      	adds	r3, #1
 800eeb6:	62bb      	str	r3, [r7, #40]	; 0x28
 800eeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeba:	2b0f      	cmp	r3, #15
 800eebc:	d9e4      	bls.n	800ee88 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	881b      	ldrh	r3, [r3, #0]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d1d8      	bne.n	800ee78 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800eec6:	69fb      	ldr	r3, [r7, #28]
 800eec8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800eeca:	2307      	movs	r3, #7
 800eecc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	f003 030f 	and.w	r3, r3, #15
 800eed6:	b2db      	uxtb	r3, r3
 800eed8:	3330      	adds	r3, #48	; 0x30
 800eeda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800eede:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eee2:	2b39      	cmp	r3, #57	; 0x39
 800eee4:	d904      	bls.n	800eef0 <gen_numname+0x9c>
 800eee6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eeea:	3307      	adds	r3, #7
 800eeec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800eef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef2:	1e5a      	subs	r2, r3, #1
 800eef4:	62ba      	str	r2, [r7, #40]	; 0x28
 800eef6:	3330      	adds	r3, #48	; 0x30
 800eef8:	443b      	add	r3, r7
 800eefa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800eefe:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	091b      	lsrs	r3, r3, #4
 800ef06:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d1df      	bne.n	800eece <gen_numname+0x7a>
	ns[i] = '~';
 800ef0e:	f107 0214 	add.w	r2, r7, #20
 800ef12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef14:	4413      	add	r3, r2
 800ef16:	227e      	movs	r2, #126	; 0x7e
 800ef18:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	627b      	str	r3, [r7, #36]	; 0x24
 800ef1e:	e002      	b.n	800ef26 <gen_numname+0xd2>
 800ef20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef22:	3301      	adds	r3, #1
 800ef24:	627b      	str	r3, [r7, #36]	; 0x24
 800ef26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d205      	bcs.n	800ef3a <gen_numname+0xe6>
 800ef2e:	68fa      	ldr	r2, [r7, #12]
 800ef30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef32:	4413      	add	r3, r2
 800ef34:	781b      	ldrb	r3, [r3, #0]
 800ef36:	2b20      	cmp	r3, #32
 800ef38:	d1f2      	bne.n	800ef20 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ef3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef3c:	2b07      	cmp	r3, #7
 800ef3e:	d807      	bhi.n	800ef50 <gen_numname+0xfc>
 800ef40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef42:	1c5a      	adds	r2, r3, #1
 800ef44:	62ba      	str	r2, [r7, #40]	; 0x28
 800ef46:	3330      	adds	r3, #48	; 0x30
 800ef48:	443b      	add	r3, r7
 800ef4a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ef4e:	e000      	b.n	800ef52 <gen_numname+0xfe>
 800ef50:	2120      	movs	r1, #32
 800ef52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef54:	1c5a      	adds	r2, r3, #1
 800ef56:	627a      	str	r2, [r7, #36]	; 0x24
 800ef58:	68fa      	ldr	r2, [r7, #12]
 800ef5a:	4413      	add	r3, r2
 800ef5c:	460a      	mov	r2, r1
 800ef5e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ef60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef62:	2b07      	cmp	r3, #7
 800ef64:	d9e9      	bls.n	800ef3a <gen_numname+0xe6>
}
 800ef66:	bf00      	nop
 800ef68:	bf00      	nop
 800ef6a:	3730      	adds	r7, #48	; 0x30
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ef70:	b480      	push	{r7}
 800ef72:	b085      	sub	sp, #20
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ef7c:	230b      	movs	r3, #11
 800ef7e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ef80:	7bfb      	ldrb	r3, [r7, #15]
 800ef82:	b2da      	uxtb	r2, r3
 800ef84:	0852      	lsrs	r2, r2, #1
 800ef86:	01db      	lsls	r3, r3, #7
 800ef88:	4313      	orrs	r3, r2
 800ef8a:	b2da      	uxtb	r2, r3
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	1c59      	adds	r1, r3, #1
 800ef90:	6079      	str	r1, [r7, #4]
 800ef92:	781b      	ldrb	r3, [r3, #0]
 800ef94:	4413      	add	r3, r2
 800ef96:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	3b01      	subs	r3, #1
 800ef9c:	60bb      	str	r3, [r7, #8]
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d1ed      	bne.n	800ef80 <sum_sfn+0x10>
	return sum;
 800efa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	3714      	adds	r7, #20
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr

0800efb2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800efb2:	b580      	push	{r7, lr}
 800efb4:	b086      	sub	sp, #24
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	6078      	str	r0, [r7, #4]
 800efba:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800efbc:	2304      	movs	r3, #4
 800efbe:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800efc6:	23ff      	movs	r3, #255	; 0xff
 800efc8:	757b      	strb	r3, [r7, #21]
 800efca:	23ff      	movs	r3, #255	; 0xff
 800efcc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800efce:	e081      	b.n	800f0d4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	69db      	ldr	r3, [r3, #28]
 800efd4:	4619      	mov	r1, r3
 800efd6:	6938      	ldr	r0, [r7, #16]
 800efd8:	f7ff f8bc 	bl	800e154 <move_window>
 800efdc:	4603      	mov	r3, r0
 800efde:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800efe0:	7dfb      	ldrb	r3, [r7, #23]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d17c      	bne.n	800f0e0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	6a1b      	ldr	r3, [r3, #32]
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800efee:	7dbb      	ldrb	r3, [r7, #22]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d102      	bne.n	800effa <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800eff4:	2304      	movs	r3, #4
 800eff6:	75fb      	strb	r3, [r7, #23]
 800eff8:	e077      	b.n	800f0ea <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6a1b      	ldr	r3, [r3, #32]
 800effe:	330b      	adds	r3, #11
 800f000:	781b      	ldrb	r3, [r3, #0]
 800f002:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f006:	73fb      	strb	r3, [r7, #15]
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	7bfa      	ldrb	r2, [r7, #15]
 800f00c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f00e:	7dbb      	ldrb	r3, [r7, #22]
 800f010:	2be5      	cmp	r3, #229	; 0xe5
 800f012:	d00e      	beq.n	800f032 <dir_read+0x80>
 800f014:	7dbb      	ldrb	r3, [r7, #22]
 800f016:	2b2e      	cmp	r3, #46	; 0x2e
 800f018:	d00b      	beq.n	800f032 <dir_read+0x80>
 800f01a:	7bfb      	ldrb	r3, [r7, #15]
 800f01c:	f023 0320 	bic.w	r3, r3, #32
 800f020:	2b08      	cmp	r3, #8
 800f022:	bf0c      	ite	eq
 800f024:	2301      	moveq	r3, #1
 800f026:	2300      	movne	r3, #0
 800f028:	b2db      	uxtb	r3, r3
 800f02a:	461a      	mov	r2, r3
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	4293      	cmp	r3, r2
 800f030:	d002      	beq.n	800f038 <dir_read+0x86>
				ord = 0xFF;
 800f032:	23ff      	movs	r3, #255	; 0xff
 800f034:	757b      	strb	r3, [r7, #21]
 800f036:	e044      	b.n	800f0c2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800f038:	7bfb      	ldrb	r3, [r7, #15]
 800f03a:	2b0f      	cmp	r3, #15
 800f03c:	d12f      	bne.n	800f09e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f03e:	7dbb      	ldrb	r3, [r7, #22]
 800f040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f044:	2b00      	cmp	r3, #0
 800f046:	d00d      	beq.n	800f064 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6a1b      	ldr	r3, [r3, #32]
 800f04c:	7b5b      	ldrb	r3, [r3, #13]
 800f04e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800f050:	7dbb      	ldrb	r3, [r7, #22]
 800f052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f056:	75bb      	strb	r3, [r7, #22]
 800f058:	7dbb      	ldrb	r3, [r7, #22]
 800f05a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	695a      	ldr	r2, [r3, #20]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f064:	7dba      	ldrb	r2, [r7, #22]
 800f066:	7d7b      	ldrb	r3, [r7, #21]
 800f068:	429a      	cmp	r2, r3
 800f06a:	d115      	bne.n	800f098 <dir_read+0xe6>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6a1b      	ldr	r3, [r3, #32]
 800f070:	330d      	adds	r3, #13
 800f072:	781b      	ldrb	r3, [r3, #0]
 800f074:	7d3a      	ldrb	r2, [r7, #20]
 800f076:	429a      	cmp	r2, r3
 800f078:	d10e      	bne.n	800f098 <dir_read+0xe6>
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	68da      	ldr	r2, [r3, #12]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6a1b      	ldr	r3, [r3, #32]
 800f082:	4619      	mov	r1, r3
 800f084:	4610      	mov	r0, r2
 800f086:	f7ff fe19 	bl	800ecbc <pick_lfn>
 800f08a:	4603      	mov	r3, r0
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d003      	beq.n	800f098 <dir_read+0xe6>
 800f090:	7d7b      	ldrb	r3, [r7, #21]
 800f092:	3b01      	subs	r3, #1
 800f094:	b2db      	uxtb	r3, r3
 800f096:	e000      	b.n	800f09a <dir_read+0xe8>
 800f098:	23ff      	movs	r3, #255	; 0xff
 800f09a:	757b      	strb	r3, [r7, #21]
 800f09c:	e011      	b.n	800f0c2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800f09e:	7d7b      	ldrb	r3, [r7, #21]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d109      	bne.n	800f0b8 <dir_read+0x106>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6a1b      	ldr	r3, [r3, #32]
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7ff ff61 	bl	800ef70 <sum_sfn>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	7d3b      	ldrb	r3, [r7, #20]
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	d015      	beq.n	800f0e4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f04f 32ff 	mov.w	r2, #4294967295
 800f0be:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800f0c0:	e010      	b.n	800f0e4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f0c2:	2100      	movs	r1, #0
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f7ff fc3e 	bl	800e946 <dir_next>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f0ce:	7dfb      	ldrb	r3, [r7, #23]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d109      	bne.n	800f0e8 <dir_read+0x136>
	while (dp->sect) {
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	69db      	ldr	r3, [r3, #28]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	f47f af79 	bne.w	800efd0 <dir_read+0x1e>
 800f0de:	e004      	b.n	800f0ea <dir_read+0x138>
		if (res != FR_OK) break;
 800f0e0:	bf00      	nop
 800f0e2:	e002      	b.n	800f0ea <dir_read+0x138>
					break;
 800f0e4:	bf00      	nop
 800f0e6:	e000      	b.n	800f0ea <dir_read+0x138>
		if (res != FR_OK) break;
 800f0e8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f0ea:	7dfb      	ldrb	r3, [r7, #23]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d002      	beq.n	800f0f6 <dir_read+0x144>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	61da      	str	r2, [r3, #28]
	return res;
 800f0f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3718      	adds	r7, #24
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}

0800f100 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b086      	sub	sp, #24
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f10e:	2100      	movs	r1, #0
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f7ff fb9d 	bl	800e850 <dir_sdi>
 800f116:	4603      	mov	r3, r0
 800f118:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f11a:	7dfb      	ldrb	r3, [r7, #23]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d001      	beq.n	800f124 <dir_find+0x24>
 800f120:	7dfb      	ldrb	r3, [r7, #23]
 800f122:	e0a9      	b.n	800f278 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f124:	23ff      	movs	r3, #255	; 0xff
 800f126:	753b      	strb	r3, [r7, #20]
 800f128:	7d3b      	ldrb	r3, [r7, #20]
 800f12a:	757b      	strb	r3, [r7, #21]
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f04f 32ff 	mov.w	r2, #4294967295
 800f132:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	69db      	ldr	r3, [r3, #28]
 800f138:	4619      	mov	r1, r3
 800f13a:	6938      	ldr	r0, [r7, #16]
 800f13c:	f7ff f80a 	bl	800e154 <move_window>
 800f140:	4603      	mov	r3, r0
 800f142:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f144:	7dfb      	ldrb	r3, [r7, #23]
 800f146:	2b00      	cmp	r3, #0
 800f148:	f040 8090 	bne.w	800f26c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6a1b      	ldr	r3, [r3, #32]
 800f150:	781b      	ldrb	r3, [r3, #0]
 800f152:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f154:	7dbb      	ldrb	r3, [r7, #22]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d102      	bne.n	800f160 <dir_find+0x60>
 800f15a:	2304      	movs	r3, #4
 800f15c:	75fb      	strb	r3, [r7, #23]
 800f15e:	e08a      	b.n	800f276 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6a1b      	ldr	r3, [r3, #32]
 800f164:	330b      	adds	r3, #11
 800f166:	781b      	ldrb	r3, [r3, #0]
 800f168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f16c:	73fb      	strb	r3, [r7, #15]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	7bfa      	ldrb	r2, [r7, #15]
 800f172:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f174:	7dbb      	ldrb	r3, [r7, #22]
 800f176:	2be5      	cmp	r3, #229	; 0xe5
 800f178:	d007      	beq.n	800f18a <dir_find+0x8a>
 800f17a:	7bfb      	ldrb	r3, [r7, #15]
 800f17c:	f003 0308 	and.w	r3, r3, #8
 800f180:	2b00      	cmp	r3, #0
 800f182:	d009      	beq.n	800f198 <dir_find+0x98>
 800f184:	7bfb      	ldrb	r3, [r7, #15]
 800f186:	2b0f      	cmp	r3, #15
 800f188:	d006      	beq.n	800f198 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f18a:	23ff      	movs	r3, #255	; 0xff
 800f18c:	757b      	strb	r3, [r7, #21]
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f04f 32ff 	mov.w	r2, #4294967295
 800f194:	631a      	str	r2, [r3, #48]	; 0x30
 800f196:	e05e      	b.n	800f256 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f198:	7bfb      	ldrb	r3, [r7, #15]
 800f19a:	2b0f      	cmp	r3, #15
 800f19c:	d136      	bne.n	800f20c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f1a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d154      	bne.n	800f256 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f1ac:	7dbb      	ldrb	r3, [r7, #22]
 800f1ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d00d      	beq.n	800f1d2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6a1b      	ldr	r3, [r3, #32]
 800f1ba:	7b5b      	ldrb	r3, [r3, #13]
 800f1bc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f1be:	7dbb      	ldrb	r3, [r7, #22]
 800f1c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1c4:	75bb      	strb	r3, [r7, #22]
 800f1c6:	7dbb      	ldrb	r3, [r7, #22]
 800f1c8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	695a      	ldr	r2, [r3, #20]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f1d2:	7dba      	ldrb	r2, [r7, #22]
 800f1d4:	7d7b      	ldrb	r3, [r7, #21]
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d115      	bne.n	800f206 <dir_find+0x106>
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6a1b      	ldr	r3, [r3, #32]
 800f1de:	330d      	adds	r3, #13
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	7d3a      	ldrb	r2, [r7, #20]
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d10e      	bne.n	800f206 <dir_find+0x106>
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	68da      	ldr	r2, [r3, #12]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	6a1b      	ldr	r3, [r3, #32]
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	4610      	mov	r0, r2
 800f1f4:	f7ff fcf2 	bl	800ebdc <cmp_lfn>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d003      	beq.n	800f206 <dir_find+0x106>
 800f1fe:	7d7b      	ldrb	r3, [r7, #21]
 800f200:	3b01      	subs	r3, #1
 800f202:	b2db      	uxtb	r3, r3
 800f204:	e000      	b.n	800f208 <dir_find+0x108>
 800f206:	23ff      	movs	r3, #255	; 0xff
 800f208:	757b      	strb	r3, [r7, #21]
 800f20a:	e024      	b.n	800f256 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f20c:	7d7b      	ldrb	r3, [r7, #21]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d109      	bne.n	800f226 <dir_find+0x126>
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6a1b      	ldr	r3, [r3, #32]
 800f216:	4618      	mov	r0, r3
 800f218:	f7ff feaa 	bl	800ef70 <sum_sfn>
 800f21c:	4603      	mov	r3, r0
 800f21e:	461a      	mov	r2, r3
 800f220:	7d3b      	ldrb	r3, [r7, #20]
 800f222:	4293      	cmp	r3, r2
 800f224:	d024      	beq.n	800f270 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f22c:	f003 0301 	and.w	r3, r3, #1
 800f230:	2b00      	cmp	r3, #0
 800f232:	d10a      	bne.n	800f24a <dir_find+0x14a>
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6a18      	ldr	r0, [r3, #32]
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	3324      	adds	r3, #36	; 0x24
 800f23c:	220b      	movs	r2, #11
 800f23e:	4619      	mov	r1, r3
 800f240:	f7fe fd96 	bl	800dd70 <mem_cmp>
 800f244:	4603      	mov	r3, r0
 800f246:	2b00      	cmp	r3, #0
 800f248:	d014      	beq.n	800f274 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f24a:	23ff      	movs	r3, #255	; 0xff
 800f24c:	757b      	strb	r3, [r7, #21]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f04f 32ff 	mov.w	r2, #4294967295
 800f254:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f256:	2100      	movs	r1, #0
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f7ff fb74 	bl	800e946 <dir_next>
 800f25e:	4603      	mov	r3, r0
 800f260:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f262:	7dfb      	ldrb	r3, [r7, #23]
 800f264:	2b00      	cmp	r3, #0
 800f266:	f43f af65 	beq.w	800f134 <dir_find+0x34>
 800f26a:	e004      	b.n	800f276 <dir_find+0x176>
		if (res != FR_OK) break;
 800f26c:	bf00      	nop
 800f26e:	e002      	b.n	800f276 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f270:	bf00      	nop
 800f272:	e000      	b.n	800f276 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f274:	bf00      	nop

	return res;
 800f276:	7dfb      	ldrb	r3, [r7, #23]
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3718      	adds	r7, #24
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b08c      	sub	sp, #48	; 0x30
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f294:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d001      	beq.n	800f2a0 <dir_register+0x20>
 800f29c:	2306      	movs	r3, #6
 800f29e:	e0e0      	b.n	800f462 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	627b      	str	r3, [r7, #36]	; 0x24
 800f2a4:	e002      	b.n	800f2ac <dir_register+0x2c>
 800f2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a8:	3301      	adds	r3, #1
 800f2aa:	627b      	str	r3, [r7, #36]	; 0x24
 800f2ac:	69fb      	ldr	r3, [r7, #28]
 800f2ae:	68da      	ldr	r2, [r3, #12]
 800f2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b2:	005b      	lsls	r3, r3, #1
 800f2b4:	4413      	add	r3, r2
 800f2b6:	881b      	ldrh	r3, [r3, #0]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d1f4      	bne.n	800f2a6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800f2c2:	f107 030c 	add.w	r3, r7, #12
 800f2c6:	220c      	movs	r2, #12
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7fe fd15 	bl	800dcf8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f2ce:	7dfb      	ldrb	r3, [r7, #23]
 800f2d0:	f003 0301 	and.w	r3, r3, #1
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d032      	beq.n	800f33e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2240      	movs	r2, #64	; 0x40
 800f2dc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800f2e4:	e016      	b.n	800f314 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800f2ec:	69fb      	ldr	r3, [r7, #28]
 800f2ee:	68da      	ldr	r2, [r3, #12]
 800f2f0:	f107 010c 	add.w	r1, r7, #12
 800f2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f6:	f7ff fdad 	bl	800ee54 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f7ff ff00 	bl	800f100 <dir_find>
 800f300:	4603      	mov	r3, r0
 800f302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800f306:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d106      	bne.n	800f31c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f310:	3301      	adds	r3, #1
 800f312:	62bb      	str	r3, [r7, #40]	; 0x28
 800f314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f316:	2b63      	cmp	r3, #99	; 0x63
 800f318:	d9e5      	bls.n	800f2e6 <dir_register+0x66>
 800f31a:	e000      	b.n	800f31e <dir_register+0x9e>
			if (res != FR_OK) break;
 800f31c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f320:	2b64      	cmp	r3, #100	; 0x64
 800f322:	d101      	bne.n	800f328 <dir_register+0xa8>
 800f324:	2307      	movs	r3, #7
 800f326:	e09c      	b.n	800f462 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f328:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f32c:	2b04      	cmp	r3, #4
 800f32e:	d002      	beq.n	800f336 <dir_register+0xb6>
 800f330:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f334:	e095      	b.n	800f462 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f336:	7dfa      	ldrb	r2, [r7, #23]
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f33e:	7dfb      	ldrb	r3, [r7, #23]
 800f340:	f003 0302 	and.w	r3, r3, #2
 800f344:	2b00      	cmp	r3, #0
 800f346:	d007      	beq.n	800f358 <dir_register+0xd8>
 800f348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34a:	330c      	adds	r3, #12
 800f34c:	4a47      	ldr	r2, [pc, #284]	; (800f46c <dir_register+0x1ec>)
 800f34e:	fba2 2303 	umull	r2, r3, r2, r3
 800f352:	089b      	lsrs	r3, r3, #2
 800f354:	3301      	adds	r3, #1
 800f356:	e000      	b.n	800f35a <dir_register+0xda>
 800f358:	2301      	movs	r3, #1
 800f35a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f35c:	6a39      	ldr	r1, [r7, #32]
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f7ff fbb6 	bl	800ead0 <dir_alloc>
 800f364:	4603      	mov	r3, r0
 800f366:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f36a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d148      	bne.n	800f404 <dir_register+0x184>
 800f372:	6a3b      	ldr	r3, [r7, #32]
 800f374:	3b01      	subs	r3, #1
 800f376:	623b      	str	r3, [r7, #32]
 800f378:	6a3b      	ldr	r3, [r7, #32]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d042      	beq.n	800f404 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	695a      	ldr	r2, [r3, #20]
 800f382:	6a3b      	ldr	r3, [r7, #32]
 800f384:	015b      	lsls	r3, r3, #5
 800f386:	1ad3      	subs	r3, r2, r3
 800f388:	4619      	mov	r1, r3
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f7ff fa60 	bl	800e850 <dir_sdi>
 800f390:	4603      	mov	r3, r0
 800f392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f396:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d132      	bne.n	800f404 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	3324      	adds	r3, #36	; 0x24
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7ff fde4 	bl	800ef70 <sum_sfn>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	69db      	ldr	r3, [r3, #28]
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	69f8      	ldr	r0, [r7, #28]
 800f3b4:	f7fe fece 	bl	800e154 <move_window>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800f3be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d11d      	bne.n	800f402 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f3c6:	69fb      	ldr	r3, [r7, #28]
 800f3c8:	68d8      	ldr	r0, [r3, #12]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	6a19      	ldr	r1, [r3, #32]
 800f3ce:	6a3b      	ldr	r3, [r7, #32]
 800f3d0:	b2da      	uxtb	r2, r3
 800f3d2:	7efb      	ldrb	r3, [r7, #27]
 800f3d4:	f7ff fcd6 	bl	800ed84 <put_lfn>
				fs->wflag = 1;
 800f3d8:	69fb      	ldr	r3, [r7, #28]
 800f3da:	2201      	movs	r2, #1
 800f3dc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f3de:	2100      	movs	r1, #0
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f7ff fab0 	bl	800e946 <dir_next>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800f3ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d107      	bne.n	800f404 <dir_register+0x184>
 800f3f4:	6a3b      	ldr	r3, [r7, #32]
 800f3f6:	3b01      	subs	r3, #1
 800f3f8:	623b      	str	r3, [r7, #32]
 800f3fa:	6a3b      	ldr	r3, [r7, #32]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d1d5      	bne.n	800f3ac <dir_register+0x12c>
 800f400:	e000      	b.n	800f404 <dir_register+0x184>
				if (res != FR_OK) break;
 800f402:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f404:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d128      	bne.n	800f45e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	69db      	ldr	r3, [r3, #28]
 800f410:	4619      	mov	r1, r3
 800f412:	69f8      	ldr	r0, [r7, #28]
 800f414:	f7fe fe9e 	bl	800e154 <move_window>
 800f418:	4603      	mov	r3, r0
 800f41a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f41e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f422:	2b00      	cmp	r3, #0
 800f424:	d11b      	bne.n	800f45e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6a1b      	ldr	r3, [r3, #32]
 800f42a:	2220      	movs	r2, #32
 800f42c:	2100      	movs	r1, #0
 800f42e:	4618      	mov	r0, r3
 800f430:	f7fe fc83 	bl	800dd3a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6a18      	ldr	r0, [r3, #32]
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	3324      	adds	r3, #36	; 0x24
 800f43c:	220b      	movs	r2, #11
 800f43e:	4619      	mov	r1, r3
 800f440:	f7fe fc5a 	bl	800dcf8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6a1b      	ldr	r3, [r3, #32]
 800f44e:	330c      	adds	r3, #12
 800f450:	f002 0218 	and.w	r2, r2, #24
 800f454:	b2d2      	uxtb	r2, r2
 800f456:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f458:	69fb      	ldr	r3, [r7, #28]
 800f45a:	2201      	movs	r2, #1
 800f45c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f45e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f462:	4618      	mov	r0, r3
 800f464:	3730      	adds	r7, #48	; 0x30
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}
 800f46a:	bf00      	nop
 800f46c:	4ec4ec4f 	.word	0x4ec4ec4f

0800f470 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b088      	sub	sp, #32
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	2200      	movs	r2, #0
 800f484:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	69db      	ldr	r3, [r3, #28]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	f000 80c9 	beq.w	800f622 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f498:	d032      	beq.n	800f500 <get_fileinfo+0x90>
			i = j = 0;
 800f49a:	2300      	movs	r3, #0
 800f49c:	61bb      	str	r3, [r7, #24]
 800f49e:	69bb      	ldr	r3, [r7, #24]
 800f4a0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800f4a2:	e01b      	b.n	800f4dc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800f4a4:	89fb      	ldrh	r3, [r7, #14]
 800f4a6:	2100      	movs	r1, #0
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f001 fd2f 	bl	8010f0c <ff_convert>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800f4b2:	89fb      	ldrh	r3, [r7, #14]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d102      	bne.n	800f4be <get_fileinfo+0x4e>
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	61fb      	str	r3, [r7, #28]
 800f4bc:	e01a      	b.n	800f4f4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800f4be:	69fb      	ldr	r3, [r7, #28]
 800f4c0:	2bfe      	cmp	r3, #254	; 0xfe
 800f4c2:	d902      	bls.n	800f4ca <get_fileinfo+0x5a>
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	61fb      	str	r3, [r7, #28]
 800f4c8:	e014      	b.n	800f4f4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800f4ca:	69fb      	ldr	r3, [r7, #28]
 800f4cc:	1c5a      	adds	r2, r3, #1
 800f4ce:	61fa      	str	r2, [r7, #28]
 800f4d0:	89fa      	ldrh	r2, [r7, #14]
 800f4d2:	b2d1      	uxtb	r1, r2
 800f4d4:	683a      	ldr	r2, [r7, #0]
 800f4d6:	4413      	add	r3, r2
 800f4d8:	460a      	mov	r2, r1
 800f4da:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	68da      	ldr	r2, [r3, #12]
 800f4e0:	69bb      	ldr	r3, [r7, #24]
 800f4e2:	1c59      	adds	r1, r3, #1
 800f4e4:	61b9      	str	r1, [r7, #24]
 800f4e6:	005b      	lsls	r3, r3, #1
 800f4e8:	4413      	add	r3, r2
 800f4ea:	881b      	ldrh	r3, [r3, #0]
 800f4ec:	81fb      	strh	r3, [r7, #14]
 800f4ee:	89fb      	ldrh	r3, [r7, #14]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d1d7      	bne.n	800f4a4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800f4f4:	683a      	ldr	r2, [r7, #0]
 800f4f6:	69fb      	ldr	r3, [r7, #28]
 800f4f8:	4413      	add	r3, r2
 800f4fa:	3316      	adds	r3, #22
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800f500:	2300      	movs	r3, #0
 800f502:	61bb      	str	r3, [r7, #24]
 800f504:	69bb      	ldr	r3, [r7, #24]
 800f506:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800f508:	683a      	ldr	r2, [r7, #0]
 800f50a:	69fb      	ldr	r3, [r7, #28]
 800f50c:	4413      	add	r3, r2
 800f50e:	3316      	adds	r3, #22
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800f514:	e04c      	b.n	800f5b0 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6a1a      	ldr	r2, [r3, #32]
 800f51a:	69fb      	ldr	r3, [r7, #28]
 800f51c:	1c59      	adds	r1, r3, #1
 800f51e:	61f9      	str	r1, [r7, #28]
 800f520:	4413      	add	r3, r2
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800f526:	7dfb      	ldrb	r3, [r7, #23]
 800f528:	2b20      	cmp	r3, #32
 800f52a:	d100      	bne.n	800f52e <get_fileinfo+0xbe>
 800f52c:	e040      	b.n	800f5b0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800f52e:	7dfb      	ldrb	r3, [r7, #23]
 800f530:	2b05      	cmp	r3, #5
 800f532:	d101      	bne.n	800f538 <get_fileinfo+0xc8>
 800f534:	23e5      	movs	r3, #229	; 0xe5
 800f536:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800f538:	69fb      	ldr	r3, [r7, #28]
 800f53a:	2b09      	cmp	r3, #9
 800f53c:	d10f      	bne.n	800f55e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800f53e:	89bb      	ldrh	r3, [r7, #12]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d105      	bne.n	800f550 <get_fileinfo+0xe0>
 800f544:	683a      	ldr	r2, [r7, #0]
 800f546:	69bb      	ldr	r3, [r7, #24]
 800f548:	4413      	add	r3, r2
 800f54a:	3316      	adds	r3, #22
 800f54c:	222e      	movs	r2, #46	; 0x2e
 800f54e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800f550:	69bb      	ldr	r3, [r7, #24]
 800f552:	1c5a      	adds	r2, r3, #1
 800f554:	61ba      	str	r2, [r7, #24]
 800f556:	683a      	ldr	r2, [r7, #0]
 800f558:	4413      	add	r3, r2
 800f55a:	222e      	movs	r2, #46	; 0x2e
 800f55c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800f55e:	683a      	ldr	r2, [r7, #0]
 800f560:	69bb      	ldr	r3, [r7, #24]
 800f562:	4413      	add	r3, r2
 800f564:	3309      	adds	r3, #9
 800f566:	7dfa      	ldrb	r2, [r7, #23]
 800f568:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800f56a:	89bb      	ldrh	r3, [r7, #12]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d11c      	bne.n	800f5aa <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800f570:	7dfb      	ldrb	r3, [r7, #23]
 800f572:	2b40      	cmp	r3, #64	; 0x40
 800f574:	d913      	bls.n	800f59e <get_fileinfo+0x12e>
 800f576:	7dfb      	ldrb	r3, [r7, #23]
 800f578:	2b5a      	cmp	r3, #90	; 0x5a
 800f57a:	d810      	bhi.n	800f59e <get_fileinfo+0x12e>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	6a1b      	ldr	r3, [r3, #32]
 800f580:	330c      	adds	r3, #12
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	461a      	mov	r2, r3
 800f586:	69fb      	ldr	r3, [r7, #28]
 800f588:	2b08      	cmp	r3, #8
 800f58a:	d901      	bls.n	800f590 <get_fileinfo+0x120>
 800f58c:	2310      	movs	r3, #16
 800f58e:	e000      	b.n	800f592 <get_fileinfo+0x122>
 800f590:	2308      	movs	r3, #8
 800f592:	4013      	ands	r3, r2
 800f594:	2b00      	cmp	r3, #0
 800f596:	d002      	beq.n	800f59e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800f598:	7dfb      	ldrb	r3, [r7, #23]
 800f59a:	3320      	adds	r3, #32
 800f59c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800f59e:	683a      	ldr	r2, [r7, #0]
 800f5a0:	69bb      	ldr	r3, [r7, #24]
 800f5a2:	4413      	add	r3, r2
 800f5a4:	3316      	adds	r3, #22
 800f5a6:	7dfa      	ldrb	r2, [r7, #23]
 800f5a8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800f5aa:	69bb      	ldr	r3, [r7, #24]
 800f5ac:	3301      	adds	r3, #1
 800f5ae:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800f5b0:	69fb      	ldr	r3, [r7, #28]
 800f5b2:	2b0a      	cmp	r3, #10
 800f5b4:	d9af      	bls.n	800f516 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800f5b6:	89bb      	ldrh	r3, [r7, #12]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d10d      	bne.n	800f5d8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800f5bc:	683a      	ldr	r2, [r7, #0]
 800f5be:	69bb      	ldr	r3, [r7, #24]
 800f5c0:	4413      	add	r3, r2
 800f5c2:	3316      	adds	r3, #22
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6a1b      	ldr	r3, [r3, #32]
 800f5cc:	330c      	adds	r3, #12
 800f5ce:	781b      	ldrb	r3, [r3, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d101      	bne.n	800f5d8 <get_fileinfo+0x168>
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800f5d8:	683a      	ldr	r2, [r7, #0]
 800f5da:	69bb      	ldr	r3, [r7, #24]
 800f5dc:	4413      	add	r3, r2
 800f5de:	3309      	adds	r3, #9
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6a1b      	ldr	r3, [r3, #32]
 800f5e8:	7ada      	ldrb	r2, [r3, #11]
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6a1b      	ldr	r3, [r3, #32]
 800f5f2:	331c      	adds	r3, #28
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f7fe fb15 	bl	800dc24 <ld_dword>
 800f5fa:	4602      	mov	r2, r0
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6a1b      	ldr	r3, [r3, #32]
 800f604:	3316      	adds	r3, #22
 800f606:	4618      	mov	r0, r3
 800f608:	f7fe fb0c 	bl	800dc24 <ld_dword>
 800f60c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	b29a      	uxth	r2, r3
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	80da      	strh	r2, [r3, #6]
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	0c1b      	lsrs	r3, r3, #16
 800f61a:	b29a      	uxth	r2, r3
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	809a      	strh	r2, [r3, #4]
 800f620:	e000      	b.n	800f624 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f622:	bf00      	nop
}
 800f624:	3720      	adds	r7, #32
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
	...

0800f62c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b08a      	sub	sp, #40	; 0x28
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	613b      	str	r3, [r7, #16]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	68db      	ldr	r3, [r3, #12]
 800f642:	60fb      	str	r3, [r7, #12]
 800f644:	2300      	movs	r3, #0
 800f646:	617b      	str	r3, [r7, #20]
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f64c:	69bb      	ldr	r3, [r7, #24]
 800f64e:	1c5a      	adds	r2, r3, #1
 800f650:	61ba      	str	r2, [r7, #24]
 800f652:	693a      	ldr	r2, [r7, #16]
 800f654:	4413      	add	r3, r2
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f65a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f65c:	2b1f      	cmp	r3, #31
 800f65e:	d940      	bls.n	800f6e2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f660:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f662:	2b2f      	cmp	r3, #47	; 0x2f
 800f664:	d006      	beq.n	800f674 <create_name+0x48>
 800f666:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f668:	2b5c      	cmp	r3, #92	; 0x5c
 800f66a:	d110      	bne.n	800f68e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f66c:	e002      	b.n	800f674 <create_name+0x48>
 800f66e:	69bb      	ldr	r3, [r7, #24]
 800f670:	3301      	adds	r3, #1
 800f672:	61bb      	str	r3, [r7, #24]
 800f674:	693a      	ldr	r2, [r7, #16]
 800f676:	69bb      	ldr	r3, [r7, #24]
 800f678:	4413      	add	r3, r2
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	2b2f      	cmp	r3, #47	; 0x2f
 800f67e:	d0f6      	beq.n	800f66e <create_name+0x42>
 800f680:	693a      	ldr	r2, [r7, #16]
 800f682:	69bb      	ldr	r3, [r7, #24]
 800f684:	4413      	add	r3, r2
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	2b5c      	cmp	r3, #92	; 0x5c
 800f68a:	d0f0      	beq.n	800f66e <create_name+0x42>
			break;
 800f68c:	e02a      	b.n	800f6e4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	2bfe      	cmp	r3, #254	; 0xfe
 800f692:	d901      	bls.n	800f698 <create_name+0x6c>
 800f694:	2306      	movs	r3, #6
 800f696:	e17d      	b.n	800f994 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f69a:	b2db      	uxtb	r3, r3
 800f69c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f69e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6a0:	2101      	movs	r1, #1
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f001 fc32 	bl	8010f0c <ff_convert>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f6ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d101      	bne.n	800f6b6 <create_name+0x8a>
 800f6b2:	2306      	movs	r3, #6
 800f6b4:	e16e      	b.n	800f994 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f6b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6b8:	2b7f      	cmp	r3, #127	; 0x7f
 800f6ba:	d809      	bhi.n	800f6d0 <create_name+0xa4>
 800f6bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6be:	4619      	mov	r1, r3
 800f6c0:	488d      	ldr	r0, [pc, #564]	; (800f8f8 <create_name+0x2cc>)
 800f6c2:	f7fe fb7c 	bl	800ddbe <chk_chr>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d001      	beq.n	800f6d0 <create_name+0xa4>
 800f6cc:	2306      	movs	r3, #6
 800f6ce:	e161      	b.n	800f994 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	1c5a      	adds	r2, r3, #1
 800f6d4:	617a      	str	r2, [r7, #20]
 800f6d6:	005b      	lsls	r3, r3, #1
 800f6d8:	68fa      	ldr	r2, [r7, #12]
 800f6da:	4413      	add	r3, r2
 800f6dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f6de:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f6e0:	e7b4      	b.n	800f64c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f6e2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f6e4:	693a      	ldr	r2, [r7, #16]
 800f6e6:	69bb      	ldr	r3, [r7, #24]
 800f6e8:	441a      	add	r2, r3
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f6ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6f0:	2b1f      	cmp	r3, #31
 800f6f2:	d801      	bhi.n	800f6f8 <create_name+0xcc>
 800f6f4:	2304      	movs	r3, #4
 800f6f6:	e000      	b.n	800f6fa <create_name+0xce>
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f6fe:	e011      	b.n	800f724 <create_name+0xf8>
		w = lfn[di - 1];
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f706:	3b01      	subs	r3, #1
 800f708:	005b      	lsls	r3, r3, #1
 800f70a:	68fa      	ldr	r2, [r7, #12]
 800f70c:	4413      	add	r3, r2
 800f70e:	881b      	ldrh	r3, [r3, #0]
 800f710:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f712:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f714:	2b20      	cmp	r3, #32
 800f716:	d002      	beq.n	800f71e <create_name+0xf2>
 800f718:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f71a:	2b2e      	cmp	r3, #46	; 0x2e
 800f71c:	d106      	bne.n	800f72c <create_name+0x100>
		di--;
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	3b01      	subs	r3, #1
 800f722:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d1ea      	bne.n	800f700 <create_name+0xd4>
 800f72a:	e000      	b.n	800f72e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f72c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	005b      	lsls	r3, r3, #1
 800f732:	68fa      	ldr	r2, [r7, #12]
 800f734:	4413      	add	r3, r2
 800f736:	2200      	movs	r2, #0
 800f738:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d101      	bne.n	800f744 <create_name+0x118>
 800f740:	2306      	movs	r3, #6
 800f742:	e127      	b.n	800f994 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	3324      	adds	r3, #36	; 0x24
 800f748:	220b      	movs	r2, #11
 800f74a:	2120      	movs	r1, #32
 800f74c:	4618      	mov	r0, r3
 800f74e:	f7fe faf4 	bl	800dd3a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f752:	2300      	movs	r3, #0
 800f754:	61bb      	str	r3, [r7, #24]
 800f756:	e002      	b.n	800f75e <create_name+0x132>
 800f758:	69bb      	ldr	r3, [r7, #24]
 800f75a:	3301      	adds	r3, #1
 800f75c:	61bb      	str	r3, [r7, #24]
 800f75e:	69bb      	ldr	r3, [r7, #24]
 800f760:	005b      	lsls	r3, r3, #1
 800f762:	68fa      	ldr	r2, [r7, #12]
 800f764:	4413      	add	r3, r2
 800f766:	881b      	ldrh	r3, [r3, #0]
 800f768:	2b20      	cmp	r3, #32
 800f76a:	d0f5      	beq.n	800f758 <create_name+0x12c>
 800f76c:	69bb      	ldr	r3, [r7, #24]
 800f76e:	005b      	lsls	r3, r3, #1
 800f770:	68fa      	ldr	r2, [r7, #12]
 800f772:	4413      	add	r3, r2
 800f774:	881b      	ldrh	r3, [r3, #0]
 800f776:	2b2e      	cmp	r3, #46	; 0x2e
 800f778:	d0ee      	beq.n	800f758 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f77a:	69bb      	ldr	r3, [r7, #24]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d009      	beq.n	800f794 <create_name+0x168>
 800f780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f784:	f043 0303 	orr.w	r3, r3, #3
 800f788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f78c:	e002      	b.n	800f794 <create_name+0x168>
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	3b01      	subs	r3, #1
 800f792:	617b      	str	r3, [r7, #20]
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d009      	beq.n	800f7ae <create_name+0x182>
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f7a0:	3b01      	subs	r3, #1
 800f7a2:	005b      	lsls	r3, r3, #1
 800f7a4:	68fa      	ldr	r2, [r7, #12]
 800f7a6:	4413      	add	r3, r2
 800f7a8:	881b      	ldrh	r3, [r3, #0]
 800f7aa:	2b2e      	cmp	r3, #46	; 0x2e
 800f7ac:	d1ef      	bne.n	800f78e <create_name+0x162>

	i = b = 0; ni = 8;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	623b      	str	r3, [r7, #32]
 800f7b8:	2308      	movs	r3, #8
 800f7ba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f7bc:	69bb      	ldr	r3, [r7, #24]
 800f7be:	1c5a      	adds	r2, r3, #1
 800f7c0:	61ba      	str	r2, [r7, #24]
 800f7c2:	005b      	lsls	r3, r3, #1
 800f7c4:	68fa      	ldr	r2, [r7, #12]
 800f7c6:	4413      	add	r3, r2
 800f7c8:	881b      	ldrh	r3, [r3, #0]
 800f7ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f7cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	f000 8090 	beq.w	800f8f4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f7d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7d6:	2b20      	cmp	r3, #32
 800f7d8:	d006      	beq.n	800f7e8 <create_name+0x1bc>
 800f7da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7dc:	2b2e      	cmp	r3, #46	; 0x2e
 800f7de:	d10a      	bne.n	800f7f6 <create_name+0x1ca>
 800f7e0:	69ba      	ldr	r2, [r7, #24]
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d006      	beq.n	800f7f6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f7e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7ec:	f043 0303 	orr.w	r3, r3, #3
 800f7f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f7f4:	e07d      	b.n	800f8f2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f7f6:	6a3a      	ldr	r2, [r7, #32]
 800f7f8:	69fb      	ldr	r3, [r7, #28]
 800f7fa:	429a      	cmp	r2, r3
 800f7fc:	d203      	bcs.n	800f806 <create_name+0x1da>
 800f7fe:	69ba      	ldr	r2, [r7, #24]
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	429a      	cmp	r2, r3
 800f804:	d123      	bne.n	800f84e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f806:	69fb      	ldr	r3, [r7, #28]
 800f808:	2b0b      	cmp	r3, #11
 800f80a:	d106      	bne.n	800f81a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f80c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f810:	f043 0303 	orr.w	r3, r3, #3
 800f814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f818:	e075      	b.n	800f906 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f81a:	69ba      	ldr	r2, [r7, #24]
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	429a      	cmp	r2, r3
 800f820:	d005      	beq.n	800f82e <create_name+0x202>
 800f822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f826:	f043 0303 	orr.w	r3, r3, #3
 800f82a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f82e:	69ba      	ldr	r2, [r7, #24]
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	429a      	cmp	r2, r3
 800f834:	d866      	bhi.n	800f904 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	61bb      	str	r3, [r7, #24]
 800f83a:	2308      	movs	r3, #8
 800f83c:	623b      	str	r3, [r7, #32]
 800f83e:	230b      	movs	r3, #11
 800f840:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f842:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f846:	009b      	lsls	r3, r3, #2
 800f848:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f84c:	e051      	b.n	800f8f2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f84e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f850:	2b7f      	cmp	r3, #127	; 0x7f
 800f852:	d914      	bls.n	800f87e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f854:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f856:	2100      	movs	r1, #0
 800f858:	4618      	mov	r0, r3
 800f85a:	f001 fb57 	bl	8010f0c <ff_convert>
 800f85e:	4603      	mov	r3, r0
 800f860:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f862:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f864:	2b00      	cmp	r3, #0
 800f866:	d004      	beq.n	800f872 <create_name+0x246>
 800f868:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f86a:	3b80      	subs	r3, #128	; 0x80
 800f86c:	4a23      	ldr	r2, [pc, #140]	; (800f8fc <create_name+0x2d0>)
 800f86e:	5cd3      	ldrb	r3, [r2, r3]
 800f870:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f872:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f876:	f043 0302 	orr.w	r3, r3, #2
 800f87a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f87e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f880:	2b00      	cmp	r3, #0
 800f882:	d007      	beq.n	800f894 <create_name+0x268>
 800f884:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f886:	4619      	mov	r1, r3
 800f888:	481d      	ldr	r0, [pc, #116]	; (800f900 <create_name+0x2d4>)
 800f88a:	f7fe fa98 	bl	800ddbe <chk_chr>
 800f88e:	4603      	mov	r3, r0
 800f890:	2b00      	cmp	r3, #0
 800f892:	d008      	beq.n	800f8a6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f894:	235f      	movs	r3, #95	; 0x5f
 800f896:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f89c:	f043 0303 	orr.w	r3, r3, #3
 800f8a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f8a4:	e01b      	b.n	800f8de <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f8a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8a8:	2b40      	cmp	r3, #64	; 0x40
 800f8aa:	d909      	bls.n	800f8c0 <create_name+0x294>
 800f8ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8ae:	2b5a      	cmp	r3, #90	; 0x5a
 800f8b0:	d806      	bhi.n	800f8c0 <create_name+0x294>
					b |= 2;
 800f8b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8b6:	f043 0302 	orr.w	r3, r3, #2
 800f8ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f8be:	e00e      	b.n	800f8de <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f8c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8c2:	2b60      	cmp	r3, #96	; 0x60
 800f8c4:	d90b      	bls.n	800f8de <create_name+0x2b2>
 800f8c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8c8:	2b7a      	cmp	r3, #122	; 0x7a
 800f8ca:	d808      	bhi.n	800f8de <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f8cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8d0:	f043 0301 	orr.w	r3, r3, #1
 800f8d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f8d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8da:	3b20      	subs	r3, #32
 800f8dc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f8de:	6a3b      	ldr	r3, [r7, #32]
 800f8e0:	1c5a      	adds	r2, r3, #1
 800f8e2:	623a      	str	r2, [r7, #32]
 800f8e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f8e6:	b2d1      	uxtb	r1, r2
 800f8e8:	687a      	ldr	r2, [r7, #4]
 800f8ea:	4413      	add	r3, r2
 800f8ec:	460a      	mov	r2, r1
 800f8ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f8f2:	e763      	b.n	800f7bc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f8f4:	bf00      	nop
 800f8f6:	e006      	b.n	800f906 <create_name+0x2da>
 800f8f8:	08011b48 	.word	0x08011b48
 800f8fc:	080130ec 	.word	0x080130ec
 800f900:	08011b54 	.word	0x08011b54
			if (si > di) break;			/* No extension */
 800f904:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f90c:	2be5      	cmp	r3, #229	; 0xe5
 800f90e:	d103      	bne.n	800f918 <create_name+0x2ec>
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2205      	movs	r2, #5
 800f914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f918:	69fb      	ldr	r3, [r7, #28]
 800f91a:	2b08      	cmp	r3, #8
 800f91c:	d104      	bne.n	800f928 <create_name+0x2fc>
 800f91e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f922:	009b      	lsls	r3, r3, #2
 800f924:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f928:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f92c:	f003 030c 	and.w	r3, r3, #12
 800f930:	2b0c      	cmp	r3, #12
 800f932:	d005      	beq.n	800f940 <create_name+0x314>
 800f934:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f938:	f003 0303 	and.w	r3, r3, #3
 800f93c:	2b03      	cmp	r3, #3
 800f93e:	d105      	bne.n	800f94c <create_name+0x320>
 800f940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f944:	f043 0302 	orr.w	r3, r3, #2
 800f948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f94c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f950:	f003 0302 	and.w	r3, r3, #2
 800f954:	2b00      	cmp	r3, #0
 800f956:	d117      	bne.n	800f988 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f958:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f95c:	f003 0303 	and.w	r3, r3, #3
 800f960:	2b01      	cmp	r3, #1
 800f962:	d105      	bne.n	800f970 <create_name+0x344>
 800f964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f968:	f043 0310 	orr.w	r3, r3, #16
 800f96c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f970:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f974:	f003 030c 	and.w	r3, r3, #12
 800f978:	2b04      	cmp	r3, #4
 800f97a:	d105      	bne.n	800f988 <create_name+0x35c>
 800f97c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f980:	f043 0308 	orr.w	r3, r3, #8
 800f984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f98e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f992:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f994:	4618      	mov	r0, r3
 800f996:	3728      	adds	r7, #40	; 0x28
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b086      	sub	sp, #24
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f9aa:	693b      	ldr	r3, [r7, #16]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f9b0:	e002      	b.n	800f9b8 <follow_path+0x1c>
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	3301      	adds	r3, #1
 800f9b6:	603b      	str	r3, [r7, #0]
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	781b      	ldrb	r3, [r3, #0]
 800f9bc:	2b2f      	cmp	r3, #47	; 0x2f
 800f9be:	d0f8      	beq.n	800f9b2 <follow_path+0x16>
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	2b5c      	cmp	r3, #92	; 0x5c
 800f9c6:	d0f4      	beq.n	800f9b2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f9c8:	693b      	ldr	r3, [r7, #16]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	2b1f      	cmp	r3, #31
 800f9d4:	d80a      	bhi.n	800f9ec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2280      	movs	r2, #128	; 0x80
 800f9da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f9de:	2100      	movs	r1, #0
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f7fe ff35 	bl	800e850 <dir_sdi>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	75fb      	strb	r3, [r7, #23]
 800f9ea:	e043      	b.n	800fa74 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f9ec:	463b      	mov	r3, r7
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f7ff fe1b 	bl	800f62c <create_name>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f9fa:	7dfb      	ldrb	r3, [r7, #23]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d134      	bne.n	800fa6a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f7ff fb7d 	bl	800f100 <dir_find>
 800fa06:	4603      	mov	r3, r0
 800fa08:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fa10:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fa12:	7dfb      	ldrb	r3, [r7, #23]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d00a      	beq.n	800fa2e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fa18:	7dfb      	ldrb	r3, [r7, #23]
 800fa1a:	2b04      	cmp	r3, #4
 800fa1c:	d127      	bne.n	800fa6e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fa1e:	7afb      	ldrb	r3, [r7, #11]
 800fa20:	f003 0304 	and.w	r3, r3, #4
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d122      	bne.n	800fa6e <follow_path+0xd2>
 800fa28:	2305      	movs	r3, #5
 800fa2a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fa2c:	e01f      	b.n	800fa6e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fa2e:	7afb      	ldrb	r3, [r7, #11]
 800fa30:	f003 0304 	and.w	r3, r3, #4
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d11c      	bne.n	800fa72 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	799b      	ldrb	r3, [r3, #6]
 800fa3c:	f003 0310 	and.w	r3, r3, #16
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d102      	bne.n	800fa4a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fa44:	2305      	movs	r3, #5
 800fa46:	75fb      	strb	r3, [r7, #23]
 800fa48:	e014      	b.n	800fa74 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	695b      	ldr	r3, [r3, #20]
 800fa54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa58:	4413      	add	r3, r2
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	68f8      	ldr	r0, [r7, #12]
 800fa5e:	f7ff f87e 	bl	800eb5e <ld_clust>
 800fa62:	4602      	mov	r2, r0
 800fa64:	693b      	ldr	r3, [r7, #16]
 800fa66:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fa68:	e7c0      	b.n	800f9ec <follow_path+0x50>
			if (res != FR_OK) break;
 800fa6a:	bf00      	nop
 800fa6c:	e002      	b.n	800fa74 <follow_path+0xd8>
				break;
 800fa6e:	bf00      	nop
 800fa70:	e000      	b.n	800fa74 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fa72:	bf00      	nop
			}
		}
	}

	return res;
 800fa74:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3718      	adds	r7, #24
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}

0800fa7e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fa7e:	b480      	push	{r7}
 800fa80:	b087      	sub	sp, #28
 800fa82:	af00      	add	r7, sp, #0
 800fa84:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fa86:	f04f 33ff 	mov.w	r3, #4294967295
 800fa8a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d031      	beq.n	800faf8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	617b      	str	r3, [r7, #20]
 800fa9a:	e002      	b.n	800faa2 <get_ldnumber+0x24>
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	3301      	adds	r3, #1
 800faa0:	617b      	str	r3, [r7, #20]
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	781b      	ldrb	r3, [r3, #0]
 800faa6:	2b1f      	cmp	r3, #31
 800faa8:	d903      	bls.n	800fab2 <get_ldnumber+0x34>
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	781b      	ldrb	r3, [r3, #0]
 800faae:	2b3a      	cmp	r3, #58	; 0x3a
 800fab0:	d1f4      	bne.n	800fa9c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	781b      	ldrb	r3, [r3, #0]
 800fab6:	2b3a      	cmp	r3, #58	; 0x3a
 800fab8:	d11c      	bne.n	800faf4 <get_ldnumber+0x76>
			tp = *path;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	1c5a      	adds	r2, r3, #1
 800fac4:	60fa      	str	r2, [r7, #12]
 800fac6:	781b      	ldrb	r3, [r3, #0]
 800fac8:	3b30      	subs	r3, #48	; 0x30
 800faca:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	2b09      	cmp	r3, #9
 800fad0:	d80e      	bhi.n	800faf0 <get_ldnumber+0x72>
 800fad2:	68fa      	ldr	r2, [r7, #12]
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d10a      	bne.n	800faf0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d107      	bne.n	800faf0 <get_ldnumber+0x72>
					vol = (int)i;
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	3301      	adds	r3, #1
 800fae8:	617b      	str	r3, [r7, #20]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	697a      	ldr	r2, [r7, #20]
 800faee:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	e002      	b.n	800fafa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800faf4:	2300      	movs	r3, #0
 800faf6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800faf8:	693b      	ldr	r3, [r7, #16]
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	371c      	adds	r7, #28
 800fafe:	46bd      	mov	sp, r7
 800fb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb04:	4770      	bx	lr
	...

0800fb08 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2200      	movs	r2, #0
 800fb16:	70da      	strb	r2, [r3, #3]
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f04f 32ff 	mov.w	r2, #4294967295
 800fb1e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fb20:	6839      	ldr	r1, [r7, #0]
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f7fe fb16 	bl	800e154 <move_window>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d001      	beq.n	800fb32 <check_fs+0x2a>
 800fb2e:	2304      	movs	r3, #4
 800fb30:	e038      	b.n	800fba4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	3334      	adds	r3, #52	; 0x34
 800fb36:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7fe f85a 	bl	800dbf4 <ld_word>
 800fb40:	4603      	mov	r3, r0
 800fb42:	461a      	mov	r2, r3
 800fb44:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	d001      	beq.n	800fb50 <check_fs+0x48>
 800fb4c:	2303      	movs	r3, #3
 800fb4e:	e029      	b.n	800fba4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fb56:	2be9      	cmp	r3, #233	; 0xe9
 800fb58:	d009      	beq.n	800fb6e <check_fs+0x66>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fb60:	2beb      	cmp	r3, #235	; 0xeb
 800fb62:	d11e      	bne.n	800fba2 <check_fs+0x9a>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800fb6a:	2b90      	cmp	r3, #144	; 0x90
 800fb6c:	d119      	bne.n	800fba2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	3334      	adds	r3, #52	; 0x34
 800fb72:	3336      	adds	r3, #54	; 0x36
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7fe f855 	bl	800dc24 <ld_dword>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fb80:	4a0a      	ldr	r2, [pc, #40]	; (800fbac <check_fs+0xa4>)
 800fb82:	4293      	cmp	r3, r2
 800fb84:	d101      	bne.n	800fb8a <check_fs+0x82>
 800fb86:	2300      	movs	r3, #0
 800fb88:	e00c      	b.n	800fba4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	3334      	adds	r3, #52	; 0x34
 800fb8e:	3352      	adds	r3, #82	; 0x52
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7fe f847 	bl	800dc24 <ld_dword>
 800fb96:	4603      	mov	r3, r0
 800fb98:	4a05      	ldr	r2, [pc, #20]	; (800fbb0 <check_fs+0xa8>)
 800fb9a:	4293      	cmp	r3, r2
 800fb9c:	d101      	bne.n	800fba2 <check_fs+0x9a>
 800fb9e:	2300      	movs	r3, #0
 800fba0:	e000      	b.n	800fba4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fba2:	2302      	movs	r3, #2
}
 800fba4:	4618      	mov	r0, r3
 800fba6:	3708      	adds	r7, #8
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}
 800fbac:	00544146 	.word	0x00544146
 800fbb0:	33544146 	.word	0x33544146

0800fbb4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b096      	sub	sp, #88	; 0x58
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	60f8      	str	r0, [r7, #12]
 800fbbc:	60b9      	str	r1, [r7, #8]
 800fbbe:	4613      	mov	r3, r2
 800fbc0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fbc8:	68f8      	ldr	r0, [r7, #12]
 800fbca:	f7ff ff58 	bl	800fa7e <get_ldnumber>
 800fbce:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fbd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	da01      	bge.n	800fbda <find_volume+0x26>
 800fbd6:	230b      	movs	r3, #11
 800fbd8:	e230      	b.n	801003c <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fbda:	4aa1      	ldr	r2, [pc, #644]	; (800fe60 <find_volume+0x2ac>)
 800fbdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbe2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d101      	bne.n	800fbee <find_volume+0x3a>
 800fbea:	230c      	movs	r3, #12
 800fbec:	e226      	b.n	801003c <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbf2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fbf4:	79fb      	ldrb	r3, [r7, #7]
 800fbf6:	f023 0301 	bic.w	r3, r3, #1
 800fbfa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbfe:	781b      	ldrb	r3, [r3, #0]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d01a      	beq.n	800fc3a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc06:	785b      	ldrb	r3, [r3, #1]
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f7fd ff55 	bl	800dab8 <disk_status>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fc14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc18:	f003 0301 	and.w	r3, r3, #1
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d10c      	bne.n	800fc3a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fc20:	79fb      	ldrb	r3, [r7, #7]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d007      	beq.n	800fc36 <find_volume+0x82>
 800fc26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc2a:	f003 0304 	and.w	r3, r3, #4
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d001      	beq.n	800fc36 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fc32:	230a      	movs	r3, #10
 800fc34:	e202      	b.n	801003c <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800fc36:	2300      	movs	r3, #0
 800fc38:	e200      	b.n	801003c <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fc40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc42:	b2da      	uxtb	r2, r3
 800fc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc46:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc4a:	785b      	ldrb	r3, [r3, #1]
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f7fd ff4d 	bl	800daec <disk_initialize>
 800fc52:	4603      	mov	r3, r0
 800fc54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fc58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc5c:	f003 0301 	and.w	r3, r3, #1
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d001      	beq.n	800fc68 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fc64:	2303      	movs	r3, #3
 800fc66:	e1e9      	b.n	801003c <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fc68:	79fb      	ldrb	r3, [r7, #7]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d007      	beq.n	800fc7e <find_volume+0xca>
 800fc6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc72:	f003 0304 	and.w	r3, r3, #4
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d001      	beq.n	800fc7e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fc7a:	230a      	movs	r3, #10
 800fc7c:	e1de      	b.n	801003c <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fc82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fc86:	f7ff ff3f 	bl	800fb08 <check_fs>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fc90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc94:	2b02      	cmp	r3, #2
 800fc96:	d149      	bne.n	800fd2c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fc98:	2300      	movs	r3, #0
 800fc9a:	643b      	str	r3, [r7, #64]	; 0x40
 800fc9c:	e01e      	b.n	800fcdc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fca6:	011b      	lsls	r3, r3, #4
 800fca8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fcac:	4413      	add	r3, r2
 800fcae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fcb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb2:	3304      	adds	r3, #4
 800fcb4:	781b      	ldrb	r3, [r3, #0]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d006      	beq.n	800fcc8 <find_volume+0x114>
 800fcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcbc:	3308      	adds	r3, #8
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f7fd ffb0 	bl	800dc24 <ld_dword>
 800fcc4:	4602      	mov	r2, r0
 800fcc6:	e000      	b.n	800fcca <find_volume+0x116>
 800fcc8:	2200      	movs	r2, #0
 800fcca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fccc:	009b      	lsls	r3, r3, #2
 800fcce:	3358      	adds	r3, #88	; 0x58
 800fcd0:	443b      	add	r3, r7
 800fcd2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fcd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcd8:	3301      	adds	r3, #1
 800fcda:	643b      	str	r3, [r7, #64]	; 0x40
 800fcdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcde:	2b03      	cmp	r3, #3
 800fce0:	d9dd      	bls.n	800fc9e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fce2:	2300      	movs	r3, #0
 800fce4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d002      	beq.n	800fcf2 <find_volume+0x13e>
 800fcec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcee:	3b01      	subs	r3, #1
 800fcf0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fcf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcf4:	009b      	lsls	r3, r3, #2
 800fcf6:	3358      	adds	r3, #88	; 0x58
 800fcf8:	443b      	add	r3, r7
 800fcfa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fcfe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fd00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d005      	beq.n	800fd12 <find_volume+0x15e>
 800fd06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fd0a:	f7ff fefd 	bl	800fb08 <check_fs>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	e000      	b.n	800fd14 <find_volume+0x160>
 800fd12:	2303      	movs	r3, #3
 800fd14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fd18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	d905      	bls.n	800fd2c <find_volume+0x178>
 800fd20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd22:	3301      	adds	r3, #1
 800fd24:	643b      	str	r3, [r7, #64]	; 0x40
 800fd26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd28:	2b03      	cmp	r3, #3
 800fd2a:	d9e2      	bls.n	800fcf2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fd2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd30:	2b04      	cmp	r3, #4
 800fd32:	d101      	bne.n	800fd38 <find_volume+0x184>
 800fd34:	2301      	movs	r3, #1
 800fd36:	e181      	b.n	801003c <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fd38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd3c:	2b01      	cmp	r3, #1
 800fd3e:	d901      	bls.n	800fd44 <find_volume+0x190>
 800fd40:	230d      	movs	r3, #13
 800fd42:	e17b      	b.n	801003c <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd46:	3334      	adds	r3, #52	; 0x34
 800fd48:	330b      	adds	r3, #11
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f7fd ff52 	bl	800dbf4 <ld_word>
 800fd50:	4603      	mov	r3, r0
 800fd52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd56:	d001      	beq.n	800fd5c <find_volume+0x1a8>
 800fd58:	230d      	movs	r3, #13
 800fd5a:	e16f      	b.n	801003c <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd5e:	3334      	adds	r3, #52	; 0x34
 800fd60:	3316      	adds	r3, #22
 800fd62:	4618      	mov	r0, r3
 800fd64:	f7fd ff46 	bl	800dbf4 <ld_word>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fd6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d106      	bne.n	800fd80 <find_volume+0x1cc>
 800fd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd74:	3334      	adds	r3, #52	; 0x34
 800fd76:	3324      	adds	r3, #36	; 0x24
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f7fd ff53 	bl	800dc24 <ld_dword>
 800fd7e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fd84:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd88:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800fd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd8e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd92:	789b      	ldrb	r3, [r3, #2]
 800fd94:	2b01      	cmp	r3, #1
 800fd96:	d005      	beq.n	800fda4 <find_volume+0x1f0>
 800fd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd9a:	789b      	ldrb	r3, [r3, #2]
 800fd9c:	2b02      	cmp	r3, #2
 800fd9e:	d001      	beq.n	800fda4 <find_volume+0x1f0>
 800fda0:	230d      	movs	r3, #13
 800fda2:	e14b      	b.n	801003c <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda6:	789b      	ldrb	r3, [r3, #2]
 800fda8:	461a      	mov	r2, r3
 800fdaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdac:	fb02 f303 	mul.w	r3, r2, r3
 800fdb0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fdb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fdb8:	b29a      	uxth	r2, r3
 800fdba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdbc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc0:	895b      	ldrh	r3, [r3, #10]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d008      	beq.n	800fdd8 <find_volume+0x224>
 800fdc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc8:	895b      	ldrh	r3, [r3, #10]
 800fdca:	461a      	mov	r2, r3
 800fdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdce:	895b      	ldrh	r3, [r3, #10]
 800fdd0:	3b01      	subs	r3, #1
 800fdd2:	4013      	ands	r3, r2
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d001      	beq.n	800fddc <find_volume+0x228>
 800fdd8:	230d      	movs	r3, #13
 800fdda:	e12f      	b.n	801003c <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdde:	3334      	adds	r3, #52	; 0x34
 800fde0:	3311      	adds	r3, #17
 800fde2:	4618      	mov	r0, r3
 800fde4:	f7fd ff06 	bl	800dbf4 <ld_word>
 800fde8:	4603      	mov	r3, r0
 800fdea:	461a      	mov	r2, r3
 800fdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf2:	891b      	ldrh	r3, [r3, #8]
 800fdf4:	f003 030f 	and.w	r3, r3, #15
 800fdf8:	b29b      	uxth	r3, r3
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d001      	beq.n	800fe02 <find_volume+0x24e>
 800fdfe:	230d      	movs	r3, #13
 800fe00:	e11c      	b.n	801003c <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fe02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe04:	3334      	adds	r3, #52	; 0x34
 800fe06:	3313      	adds	r3, #19
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7fd fef3 	bl	800dbf4 <ld_word>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fe12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d106      	bne.n	800fe26 <find_volume+0x272>
 800fe18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe1a:	3334      	adds	r3, #52	; 0x34
 800fe1c:	3320      	adds	r3, #32
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7fd ff00 	bl	800dc24 <ld_dword>
 800fe24:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fe26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe28:	3334      	adds	r3, #52	; 0x34
 800fe2a:	330e      	adds	r3, #14
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7fd fee1 	bl	800dbf4 <ld_word>
 800fe32:	4603      	mov	r3, r0
 800fe34:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fe36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d101      	bne.n	800fe40 <find_volume+0x28c>
 800fe3c:	230d      	movs	r3, #13
 800fe3e:	e0fd      	b.n	801003c <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fe40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fe42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe44:	4413      	add	r3, r2
 800fe46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe48:	8912      	ldrh	r2, [r2, #8]
 800fe4a:	0912      	lsrs	r2, r2, #4
 800fe4c:	b292      	uxth	r2, r2
 800fe4e:	4413      	add	r3, r2
 800fe50:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fe52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d204      	bcs.n	800fe64 <find_volume+0x2b0>
 800fe5a:	230d      	movs	r3, #13
 800fe5c:	e0ee      	b.n	801003c <find_volume+0x488>
 800fe5e:	bf00      	nop
 800fe60:	200022b8 	.word	0x200022b8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fe64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe68:	1ad3      	subs	r3, r2, r3
 800fe6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe6c:	8952      	ldrh	r2, [r2, #10]
 800fe6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe72:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fe74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d101      	bne.n	800fe7e <find_volume+0x2ca>
 800fe7a:	230d      	movs	r3, #13
 800fe7c:	e0de      	b.n	801003c <find_volume+0x488>
		fmt = FS_FAT32;
 800fe7e:	2303      	movs	r3, #3
 800fe80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fe84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe86:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fe8a:	4293      	cmp	r3, r2
 800fe8c:	d802      	bhi.n	800fe94 <find_volume+0x2e0>
 800fe8e:	2302      	movs	r3, #2
 800fe90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fe94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe96:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fe9a:	4293      	cmp	r3, r2
 800fe9c:	d802      	bhi.n	800fea4 <find_volume+0x2f0>
 800fe9e:	2301      	movs	r3, #1
 800fea0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea6:	1c9a      	adds	r2, r3, #2
 800fea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feaa:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800feac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800feb0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800feb2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800feb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800feb6:	441a      	add	r2, r3
 800feb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feba:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800febc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800febe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec0:	441a      	add	r2, r3
 800fec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800fec6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800feca:	2b03      	cmp	r3, #3
 800fecc:	d11e      	bne.n	800ff0c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed0:	3334      	adds	r3, #52	; 0x34
 800fed2:	332a      	adds	r3, #42	; 0x2a
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7fd fe8d 	bl	800dbf4 <ld_word>
 800feda:	4603      	mov	r3, r0
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d001      	beq.n	800fee4 <find_volume+0x330>
 800fee0:	230d      	movs	r3, #13
 800fee2:	e0ab      	b.n	801003c <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee6:	891b      	ldrh	r3, [r3, #8]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d001      	beq.n	800fef0 <find_volume+0x33c>
 800feec:	230d      	movs	r3, #13
 800feee:	e0a5      	b.n	801003c <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef2:	3334      	adds	r3, #52	; 0x34
 800fef4:	332c      	adds	r3, #44	; 0x2c
 800fef6:	4618      	mov	r0, r3
 800fef8:	f7fd fe94 	bl	800dc24 <ld_dword>
 800fefc:	4602      	mov	r2, r0
 800fefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff00:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ff02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff04:	699b      	ldr	r3, [r3, #24]
 800ff06:	009b      	lsls	r3, r3, #2
 800ff08:	647b      	str	r3, [r7, #68]	; 0x44
 800ff0a:	e01f      	b.n	800ff4c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ff0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff0e:	891b      	ldrh	r3, [r3, #8]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d101      	bne.n	800ff18 <find_volume+0x364>
 800ff14:	230d      	movs	r3, #13
 800ff16:	e091      	b.n	801003c <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ff18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff1e:	441a      	add	r2, r3
 800ff20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff22:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ff24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff28:	2b02      	cmp	r3, #2
 800ff2a:	d103      	bne.n	800ff34 <find_volume+0x380>
 800ff2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2e:	699b      	ldr	r3, [r3, #24]
 800ff30:	005b      	lsls	r3, r3, #1
 800ff32:	e00a      	b.n	800ff4a <find_volume+0x396>
 800ff34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff36:	699a      	ldr	r2, [r3, #24]
 800ff38:	4613      	mov	r3, r2
 800ff3a:	005b      	lsls	r3, r3, #1
 800ff3c:	4413      	add	r3, r2
 800ff3e:	085a      	lsrs	r2, r3, #1
 800ff40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff42:	699b      	ldr	r3, [r3, #24]
 800ff44:	f003 0301 	and.w	r3, r3, #1
 800ff48:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ff4a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ff4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4e:	69da      	ldr	r2, [r3, #28]
 800ff50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff52:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ff56:	0a5b      	lsrs	r3, r3, #9
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d201      	bcs.n	800ff60 <find_volume+0x3ac>
 800ff5c:	230d      	movs	r3, #13
 800ff5e:	e06d      	b.n	801003c <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ff60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff62:	f04f 32ff 	mov.w	r2, #4294967295
 800ff66:	615a      	str	r2, [r3, #20]
 800ff68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff6a:	695a      	ldr	r2, [r3, #20]
 800ff6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff6e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ff70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff72:	2280      	movs	r2, #128	; 0x80
 800ff74:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ff76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff7a:	2b03      	cmp	r3, #3
 800ff7c:	d149      	bne.n	8010012 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ff7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff80:	3334      	adds	r3, #52	; 0x34
 800ff82:	3330      	adds	r3, #48	; 0x30
 800ff84:	4618      	mov	r0, r3
 800ff86:	f7fd fe35 	bl	800dbf4 <ld_word>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	2b01      	cmp	r3, #1
 800ff8e:	d140      	bne.n	8010012 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ff90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff92:	3301      	adds	r3, #1
 800ff94:	4619      	mov	r1, r3
 800ff96:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff98:	f7fe f8dc 	bl	800e154 <move_window>
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d137      	bne.n	8010012 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ffa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ffa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffaa:	3334      	adds	r3, #52	; 0x34
 800ffac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7fd fe1f 	bl	800dbf4 <ld_word>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	461a      	mov	r2, r3
 800ffba:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d127      	bne.n	8010012 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ffc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc4:	3334      	adds	r3, #52	; 0x34
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7fd fe2c 	bl	800dc24 <ld_dword>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	4a1d      	ldr	r2, [pc, #116]	; (8010044 <find_volume+0x490>)
 800ffd0:	4293      	cmp	r3, r2
 800ffd2:	d11e      	bne.n	8010012 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ffd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd6:	3334      	adds	r3, #52	; 0x34
 800ffd8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f7fd fe21 	bl	800dc24 <ld_dword>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	4a18      	ldr	r2, [pc, #96]	; (8010048 <find_volume+0x494>)
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	d113      	bne.n	8010012 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ffea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffec:	3334      	adds	r3, #52	; 0x34
 800ffee:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7fd fe16 	bl	800dc24 <ld_dword>
 800fff8:	4602      	mov	r2, r0
 800fffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fffc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010000:	3334      	adds	r3, #52	; 0x34
 8010002:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010006:	4618      	mov	r0, r3
 8010008:	f7fd fe0c 	bl	800dc24 <ld_dword>
 801000c:	4602      	mov	r2, r0
 801000e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010010:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010014:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010018:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801001a:	4b0c      	ldr	r3, [pc, #48]	; (801004c <find_volume+0x498>)
 801001c:	881b      	ldrh	r3, [r3, #0]
 801001e:	3301      	adds	r3, #1
 8010020:	b29a      	uxth	r2, r3
 8010022:	4b0a      	ldr	r3, [pc, #40]	; (801004c <find_volume+0x498>)
 8010024:	801a      	strh	r2, [r3, #0]
 8010026:	4b09      	ldr	r3, [pc, #36]	; (801004c <find_volume+0x498>)
 8010028:	881a      	ldrh	r2, [r3, #0]
 801002a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801002e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010030:	4a07      	ldr	r2, [pc, #28]	; (8010050 <find_volume+0x49c>)
 8010032:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010034:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010036:	f7fe f825 	bl	800e084 <clear_lock>
#endif
	return FR_OK;
 801003a:	2300      	movs	r3, #0
}
 801003c:	4618      	mov	r0, r3
 801003e:	3758      	adds	r7, #88	; 0x58
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}
 8010044:	41615252 	.word	0x41615252
 8010048:	61417272 	.word	0x61417272
 801004c:	200022bc 	.word	0x200022bc
 8010050:	200022e0 	.word	0x200022e0

08010054 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b084      	sub	sp, #16
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801005e:	2309      	movs	r3, #9
 8010060:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d01c      	beq.n	80100a2 <validate+0x4e>
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d018      	beq.n	80100a2 <validate+0x4e>
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	781b      	ldrb	r3, [r3, #0]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d013      	beq.n	80100a2 <validate+0x4e>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	889a      	ldrh	r2, [r3, #4]
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	88db      	ldrh	r3, [r3, #6]
 8010084:	429a      	cmp	r2, r3
 8010086:	d10c      	bne.n	80100a2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	785b      	ldrb	r3, [r3, #1]
 801008e:	4618      	mov	r0, r3
 8010090:	f7fd fd12 	bl	800dab8 <disk_status>
 8010094:	4603      	mov	r3, r0
 8010096:	f003 0301 	and.w	r3, r3, #1
 801009a:	2b00      	cmp	r3, #0
 801009c:	d101      	bne.n	80100a2 <validate+0x4e>
			res = FR_OK;
 801009e:	2300      	movs	r3, #0
 80100a0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80100a2:	7bfb      	ldrb	r3, [r7, #15]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d102      	bne.n	80100ae <validate+0x5a>
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	e000      	b.n	80100b0 <validate+0x5c>
 80100ae:	2300      	movs	r3, #0
 80100b0:	683a      	ldr	r2, [r7, #0]
 80100b2:	6013      	str	r3, [r2, #0]
	return res;
 80100b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	3710      	adds	r7, #16
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}
	...

080100c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b088      	sub	sp, #32
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	60f8      	str	r0, [r7, #12]
 80100c8:	60b9      	str	r1, [r7, #8]
 80100ca:	4613      	mov	r3, r2
 80100cc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80100d2:	f107 0310 	add.w	r3, r7, #16
 80100d6:	4618      	mov	r0, r3
 80100d8:	f7ff fcd1 	bl	800fa7e <get_ldnumber>
 80100dc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80100de:	69fb      	ldr	r3, [r7, #28]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	da01      	bge.n	80100e8 <f_mount+0x28>
 80100e4:	230b      	movs	r3, #11
 80100e6:	e02b      	b.n	8010140 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80100e8:	4a17      	ldr	r2, [pc, #92]	; (8010148 <f_mount+0x88>)
 80100ea:	69fb      	ldr	r3, [r7, #28]
 80100ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100f0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80100f2:	69bb      	ldr	r3, [r7, #24]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d005      	beq.n	8010104 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80100f8:	69b8      	ldr	r0, [r7, #24]
 80100fa:	f7fd ffc3 	bl	800e084 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80100fe:	69bb      	ldr	r3, [r7, #24]
 8010100:	2200      	movs	r2, #0
 8010102:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d002      	beq.n	8010110 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	2200      	movs	r2, #0
 801010e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010110:	68fa      	ldr	r2, [r7, #12]
 8010112:	490d      	ldr	r1, [pc, #52]	; (8010148 <f_mount+0x88>)
 8010114:	69fb      	ldr	r3, [r7, #28]
 8010116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d002      	beq.n	8010126 <f_mount+0x66>
 8010120:	79fb      	ldrb	r3, [r7, #7]
 8010122:	2b01      	cmp	r3, #1
 8010124:	d001      	beq.n	801012a <f_mount+0x6a>
 8010126:	2300      	movs	r3, #0
 8010128:	e00a      	b.n	8010140 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801012a:	f107 010c 	add.w	r1, r7, #12
 801012e:	f107 0308 	add.w	r3, r7, #8
 8010132:	2200      	movs	r2, #0
 8010134:	4618      	mov	r0, r3
 8010136:	f7ff fd3d 	bl	800fbb4 <find_volume>
 801013a:	4603      	mov	r3, r0
 801013c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801013e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010140:	4618      	mov	r0, r3
 8010142:	3720      	adds	r7, #32
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}
 8010148:	200022b8 	.word	0x200022b8

0801014c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b09a      	sub	sp, #104	; 0x68
 8010150:	af00      	add	r7, sp, #0
 8010152:	60f8      	str	r0, [r7, #12]
 8010154:	60b9      	str	r1, [r7, #8]
 8010156:	4613      	mov	r3, r2
 8010158:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d101      	bne.n	8010164 <f_open+0x18>
 8010160:	2309      	movs	r3, #9
 8010162:	e1ad      	b.n	80104c0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010164:	79fb      	ldrb	r3, [r7, #7]
 8010166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801016a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801016c:	79fa      	ldrb	r2, [r7, #7]
 801016e:	f107 0114 	add.w	r1, r7, #20
 8010172:	f107 0308 	add.w	r3, r7, #8
 8010176:	4618      	mov	r0, r3
 8010178:	f7ff fd1c 	bl	800fbb4 <find_volume>
 801017c:	4603      	mov	r3, r0
 801017e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8010182:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010186:	2b00      	cmp	r3, #0
 8010188:	f040 8191 	bne.w	80104ae <f_open+0x362>
		dj.obj.fs = fs;
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010190:	68ba      	ldr	r2, [r7, #8]
 8010192:	f107 0318 	add.w	r3, r7, #24
 8010196:	4611      	mov	r1, r2
 8010198:	4618      	mov	r0, r3
 801019a:	f7ff fbff 	bl	800f99c <follow_path>
 801019e:	4603      	mov	r3, r0
 80101a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80101a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d11a      	bne.n	80101e2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80101ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80101b0:	b25b      	sxtb	r3, r3
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	da03      	bge.n	80101be <f_open+0x72>
				res = FR_INVALID_NAME;
 80101b6:	2306      	movs	r3, #6
 80101b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80101bc:	e011      	b.n	80101e2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80101be:	79fb      	ldrb	r3, [r7, #7]
 80101c0:	f023 0301 	bic.w	r3, r3, #1
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	bf14      	ite	ne
 80101c8:	2301      	movne	r3, #1
 80101ca:	2300      	moveq	r3, #0
 80101cc:	b2db      	uxtb	r3, r3
 80101ce:	461a      	mov	r2, r3
 80101d0:	f107 0318 	add.w	r3, r7, #24
 80101d4:	4611      	mov	r1, r2
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7fd fe0c 	bl	800ddf4 <chk_lock>
 80101dc:	4603      	mov	r3, r0
 80101de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80101e2:	79fb      	ldrb	r3, [r7, #7]
 80101e4:	f003 031c 	and.w	r3, r3, #28
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d07f      	beq.n	80102ec <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80101ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d017      	beq.n	8010224 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80101f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80101f8:	2b04      	cmp	r3, #4
 80101fa:	d10e      	bne.n	801021a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80101fc:	f7fd fe56 	bl	800deac <enq_lock>
 8010200:	4603      	mov	r3, r0
 8010202:	2b00      	cmp	r3, #0
 8010204:	d006      	beq.n	8010214 <f_open+0xc8>
 8010206:	f107 0318 	add.w	r3, r7, #24
 801020a:	4618      	mov	r0, r3
 801020c:	f7ff f838 	bl	800f280 <dir_register>
 8010210:	4603      	mov	r3, r0
 8010212:	e000      	b.n	8010216 <f_open+0xca>
 8010214:	2312      	movs	r3, #18
 8010216:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801021a:	79fb      	ldrb	r3, [r7, #7]
 801021c:	f043 0308 	orr.w	r3, r3, #8
 8010220:	71fb      	strb	r3, [r7, #7]
 8010222:	e010      	b.n	8010246 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010224:	7fbb      	ldrb	r3, [r7, #30]
 8010226:	f003 0311 	and.w	r3, r3, #17
 801022a:	2b00      	cmp	r3, #0
 801022c:	d003      	beq.n	8010236 <f_open+0xea>
					res = FR_DENIED;
 801022e:	2307      	movs	r3, #7
 8010230:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010234:	e007      	b.n	8010246 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010236:	79fb      	ldrb	r3, [r7, #7]
 8010238:	f003 0304 	and.w	r3, r3, #4
 801023c:	2b00      	cmp	r3, #0
 801023e:	d002      	beq.n	8010246 <f_open+0xfa>
 8010240:	2308      	movs	r3, #8
 8010242:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010246:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801024a:	2b00      	cmp	r3, #0
 801024c:	d168      	bne.n	8010320 <f_open+0x1d4>
 801024e:	79fb      	ldrb	r3, [r7, #7]
 8010250:	f003 0308 	and.w	r3, r3, #8
 8010254:	2b00      	cmp	r3, #0
 8010256:	d063      	beq.n	8010320 <f_open+0x1d4>
				dw = GET_FATTIME();
 8010258:	f7fa fb1e 	bl	800a898 <get_fattime>
 801025c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801025e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010260:	330e      	adds	r3, #14
 8010262:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010264:	4618      	mov	r0, r3
 8010266:	f7fd fd1b 	bl	800dca0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801026a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801026c:	3316      	adds	r3, #22
 801026e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010270:	4618      	mov	r0, r3
 8010272:	f7fd fd15 	bl	800dca0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010278:	330b      	adds	r3, #11
 801027a:	2220      	movs	r2, #32
 801027c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010282:	4611      	mov	r1, r2
 8010284:	4618      	mov	r0, r3
 8010286:	f7fe fc6a 	bl	800eb5e <ld_clust>
 801028a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010290:	2200      	movs	r2, #0
 8010292:	4618      	mov	r0, r3
 8010294:	f7fe fc82 	bl	800eb9c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801029a:	331c      	adds	r3, #28
 801029c:	2100      	movs	r1, #0
 801029e:	4618      	mov	r0, r3
 80102a0:	f7fd fcfe 	bl	800dca0 <st_dword>
					fs->wflag = 1;
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	2201      	movs	r2, #1
 80102a8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80102aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d037      	beq.n	8010320 <f_open+0x1d4>
						dw = fs->winsect;
 80102b0:	697b      	ldr	r3, [r7, #20]
 80102b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102b4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80102b6:	f107 0318 	add.w	r3, r7, #24
 80102ba:	2200      	movs	r2, #0
 80102bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80102be:	4618      	mov	r0, r3
 80102c0:	f7fe f995 	bl	800e5ee <remove_chain>
 80102c4:	4603      	mov	r3, r0
 80102c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80102ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d126      	bne.n	8010320 <f_open+0x1d4>
							res = move_window(fs, dw);
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80102d6:	4618      	mov	r0, r3
 80102d8:	f7fd ff3c 	bl	800e154 <move_window>
 80102dc:	4603      	mov	r3, r0
 80102de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80102e6:	3a01      	subs	r2, #1
 80102e8:	611a      	str	r2, [r3, #16]
 80102ea:	e019      	b.n	8010320 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80102ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d115      	bne.n	8010320 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80102f4:	7fbb      	ldrb	r3, [r7, #30]
 80102f6:	f003 0310 	and.w	r3, r3, #16
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d003      	beq.n	8010306 <f_open+0x1ba>
					res = FR_NO_FILE;
 80102fe:	2304      	movs	r3, #4
 8010300:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010304:	e00c      	b.n	8010320 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010306:	79fb      	ldrb	r3, [r7, #7]
 8010308:	f003 0302 	and.w	r3, r3, #2
 801030c:	2b00      	cmp	r3, #0
 801030e:	d007      	beq.n	8010320 <f_open+0x1d4>
 8010310:	7fbb      	ldrb	r3, [r7, #30]
 8010312:	f003 0301 	and.w	r3, r3, #1
 8010316:	2b00      	cmp	r3, #0
 8010318:	d002      	beq.n	8010320 <f_open+0x1d4>
						res = FR_DENIED;
 801031a:	2307      	movs	r3, #7
 801031c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8010320:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010324:	2b00      	cmp	r3, #0
 8010326:	d128      	bne.n	801037a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010328:	79fb      	ldrb	r3, [r7, #7]
 801032a:	f003 0308 	and.w	r3, r3, #8
 801032e:	2b00      	cmp	r3, #0
 8010330:	d003      	beq.n	801033a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010332:	79fb      	ldrb	r3, [r7, #7]
 8010334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010338:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010348:	79fb      	ldrb	r3, [r7, #7]
 801034a:	f023 0301 	bic.w	r3, r3, #1
 801034e:	2b00      	cmp	r3, #0
 8010350:	bf14      	ite	ne
 8010352:	2301      	movne	r3, #1
 8010354:	2300      	moveq	r3, #0
 8010356:	b2db      	uxtb	r3, r3
 8010358:	461a      	mov	r2, r3
 801035a:	f107 0318 	add.w	r3, r7, #24
 801035e:	4611      	mov	r1, r2
 8010360:	4618      	mov	r0, r3
 8010362:	f7fd fdc5 	bl	800def0 <inc_lock>
 8010366:	4602      	mov	r2, r0
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	691b      	ldr	r3, [r3, #16]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d102      	bne.n	801037a <f_open+0x22e>
 8010374:	2302      	movs	r3, #2
 8010376:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801037a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801037e:	2b00      	cmp	r3, #0
 8010380:	f040 8095 	bne.w	80104ae <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010388:	4611      	mov	r1, r2
 801038a:	4618      	mov	r0, r3
 801038c:	f7fe fbe7 	bl	800eb5e <ld_clust>
 8010390:	4602      	mov	r2, r0
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010398:	331c      	adds	r3, #28
 801039a:	4618      	mov	r0, r3
 801039c:	f7fd fc42 	bl	800dc24 <ld_dword>
 80103a0:	4602      	mov	r2, r0
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	2200      	movs	r2, #0
 80103aa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80103ac:	697a      	ldr	r2, [r7, #20]
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	88da      	ldrh	r2, [r3, #6]
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	79fa      	ldrb	r2, [r7, #7]
 80103be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	2200      	movs	r2, #0
 80103c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	2200      	movs	r2, #0
 80103ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	2200      	movs	r2, #0
 80103d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	3330      	adds	r3, #48	; 0x30
 80103d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80103da:	2100      	movs	r1, #0
 80103dc:	4618      	mov	r0, r3
 80103de:	f7fd fcac 	bl	800dd3a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80103e2:	79fb      	ldrb	r3, [r7, #7]
 80103e4:	f003 0320 	and.w	r3, r3, #32
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d060      	beq.n	80104ae <f_open+0x362>
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	68db      	ldr	r3, [r3, #12]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d05c      	beq.n	80104ae <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	68da      	ldr	r2, [r3, #12]
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	895b      	ldrh	r3, [r3, #10]
 8010400:	025b      	lsls	r3, r3, #9
 8010402:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	689b      	ldr	r3, [r3, #8]
 8010408:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	68db      	ldr	r3, [r3, #12]
 801040e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010410:	e016      	b.n	8010440 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010416:	4618      	mov	r0, r3
 8010418:	f7fd ff57 	bl	800e2ca <get_fat>
 801041c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801041e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010420:	2b01      	cmp	r3, #1
 8010422:	d802      	bhi.n	801042a <f_open+0x2de>
 8010424:	2302      	movs	r3, #2
 8010426:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801042a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801042c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010430:	d102      	bne.n	8010438 <f_open+0x2ec>
 8010432:	2301      	movs	r3, #1
 8010434:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010438:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801043a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801043c:	1ad3      	subs	r3, r2, r3
 801043e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010440:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010444:	2b00      	cmp	r3, #0
 8010446:	d103      	bne.n	8010450 <f_open+0x304>
 8010448:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801044a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801044c:	429a      	cmp	r2, r3
 801044e:	d8e0      	bhi.n	8010412 <f_open+0x2c6>
				}
				fp->clust = clst;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010454:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010456:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801045a:	2b00      	cmp	r3, #0
 801045c:	d127      	bne.n	80104ae <f_open+0x362>
 801045e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010464:	2b00      	cmp	r3, #0
 8010466:	d022      	beq.n	80104ae <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801046c:	4618      	mov	r0, r3
 801046e:	f7fd ff0d 	bl	800e28c <clust2sect>
 8010472:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010476:	2b00      	cmp	r3, #0
 8010478:	d103      	bne.n	8010482 <f_open+0x336>
						res = FR_INT_ERR;
 801047a:	2302      	movs	r3, #2
 801047c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010480:	e015      	b.n	80104ae <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010484:	0a5a      	lsrs	r2, r3, #9
 8010486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010488:	441a      	add	r2, r3
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801048e:	697b      	ldr	r3, [r7, #20]
 8010490:	7858      	ldrb	r0, [r3, #1]
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	6a1a      	ldr	r2, [r3, #32]
 801049c:	2301      	movs	r3, #1
 801049e:	f7fd fb4b 	bl	800db38 <disk_read>
 80104a2:	4603      	mov	r3, r0
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d002      	beq.n	80104ae <f_open+0x362>
 80104a8:	2301      	movs	r3, #1
 80104aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80104ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d002      	beq.n	80104bc <f_open+0x370>
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	2200      	movs	r2, #0
 80104ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80104bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80104c0:	4618      	mov	r0, r3
 80104c2:	3768      	adds	r7, #104	; 0x68
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}

080104c8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b08e      	sub	sp, #56	; 0x38
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	60f8      	str	r0, [r7, #12]
 80104d0:	60b9      	str	r1, [r7, #8]
 80104d2:	607a      	str	r2, [r7, #4]
 80104d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80104da:	683b      	ldr	r3, [r7, #0]
 80104dc:	2200      	movs	r2, #0
 80104de:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	f107 0214 	add.w	r2, r7, #20
 80104e6:	4611      	mov	r1, r2
 80104e8:	4618      	mov	r0, r3
 80104ea:	f7ff fdb3 	bl	8010054 <validate>
 80104ee:	4603      	mov	r3, r0
 80104f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80104f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d107      	bne.n	801050c <f_read+0x44>
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	7d5b      	ldrb	r3, [r3, #21]
 8010500:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010504:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010508:	2b00      	cmp	r3, #0
 801050a:	d002      	beq.n	8010512 <f_read+0x4a>
 801050c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010510:	e115      	b.n	801073e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	7d1b      	ldrb	r3, [r3, #20]
 8010516:	f003 0301 	and.w	r3, r3, #1
 801051a:	2b00      	cmp	r3, #0
 801051c:	d101      	bne.n	8010522 <f_read+0x5a>
 801051e:	2307      	movs	r3, #7
 8010520:	e10d      	b.n	801073e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	68da      	ldr	r2, [r3, #12]
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	699b      	ldr	r3, [r3, #24]
 801052a:	1ad3      	subs	r3, r2, r3
 801052c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801052e:	687a      	ldr	r2, [r7, #4]
 8010530:	6a3b      	ldr	r3, [r7, #32]
 8010532:	429a      	cmp	r2, r3
 8010534:	f240 80fe 	bls.w	8010734 <f_read+0x26c>
 8010538:	6a3b      	ldr	r3, [r7, #32]
 801053a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801053c:	e0fa      	b.n	8010734 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	699b      	ldr	r3, [r3, #24]
 8010542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010546:	2b00      	cmp	r3, #0
 8010548:	f040 80c6 	bne.w	80106d8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	699b      	ldr	r3, [r3, #24]
 8010550:	0a5b      	lsrs	r3, r3, #9
 8010552:	697a      	ldr	r2, [r7, #20]
 8010554:	8952      	ldrh	r2, [r2, #10]
 8010556:	3a01      	subs	r2, #1
 8010558:	4013      	ands	r3, r2
 801055a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801055c:	69fb      	ldr	r3, [r7, #28]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d12f      	bne.n	80105c2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	699b      	ldr	r3, [r3, #24]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d103      	bne.n	8010572 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	689b      	ldr	r3, [r3, #8]
 801056e:	633b      	str	r3, [r7, #48]	; 0x30
 8010570:	e013      	b.n	801059a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010576:	2b00      	cmp	r3, #0
 8010578:	d007      	beq.n	801058a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	699b      	ldr	r3, [r3, #24]
 801057e:	4619      	mov	r1, r3
 8010580:	68f8      	ldr	r0, [r7, #12]
 8010582:	f7fe f931 	bl	800e7e8 <clmt_clust>
 8010586:	6338      	str	r0, [r7, #48]	; 0x30
 8010588:	e007      	b.n	801059a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801058a:	68fa      	ldr	r2, [r7, #12]
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	69db      	ldr	r3, [r3, #28]
 8010590:	4619      	mov	r1, r3
 8010592:	4610      	mov	r0, r2
 8010594:	f7fd fe99 	bl	800e2ca <get_fat>
 8010598:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801059a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801059c:	2b01      	cmp	r3, #1
 801059e:	d804      	bhi.n	80105aa <f_read+0xe2>
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	2202      	movs	r2, #2
 80105a4:	755a      	strb	r2, [r3, #21]
 80105a6:	2302      	movs	r3, #2
 80105a8:	e0c9      	b.n	801073e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80105aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105b0:	d104      	bne.n	80105bc <f_read+0xf4>
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	2201      	movs	r2, #1
 80105b6:	755a      	strb	r2, [r3, #21]
 80105b8:	2301      	movs	r3, #1
 80105ba:	e0c0      	b.n	801073e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105c0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80105c2:	697a      	ldr	r2, [r7, #20]
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	69db      	ldr	r3, [r3, #28]
 80105c8:	4619      	mov	r1, r3
 80105ca:	4610      	mov	r0, r2
 80105cc:	f7fd fe5e 	bl	800e28c <clust2sect>
 80105d0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80105d2:	69bb      	ldr	r3, [r7, #24]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d104      	bne.n	80105e2 <f_read+0x11a>
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	2202      	movs	r2, #2
 80105dc:	755a      	strb	r2, [r3, #21]
 80105de:	2302      	movs	r3, #2
 80105e0:	e0ad      	b.n	801073e <f_read+0x276>
			sect += csect;
 80105e2:	69ba      	ldr	r2, [r7, #24]
 80105e4:	69fb      	ldr	r3, [r7, #28]
 80105e6:	4413      	add	r3, r2
 80105e8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	0a5b      	lsrs	r3, r3, #9
 80105ee:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80105f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d039      	beq.n	801066a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80105f6:	69fa      	ldr	r2, [r7, #28]
 80105f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105fa:	4413      	add	r3, r2
 80105fc:	697a      	ldr	r2, [r7, #20]
 80105fe:	8952      	ldrh	r2, [r2, #10]
 8010600:	4293      	cmp	r3, r2
 8010602:	d905      	bls.n	8010610 <f_read+0x148>
					cc = fs->csize - csect;
 8010604:	697b      	ldr	r3, [r7, #20]
 8010606:	895b      	ldrh	r3, [r3, #10]
 8010608:	461a      	mov	r2, r3
 801060a:	69fb      	ldr	r3, [r7, #28]
 801060c:	1ad3      	subs	r3, r2, r3
 801060e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010610:	697b      	ldr	r3, [r7, #20]
 8010612:	7858      	ldrb	r0, [r3, #1]
 8010614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010616:	69ba      	ldr	r2, [r7, #24]
 8010618:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801061a:	f7fd fa8d 	bl	800db38 <disk_read>
 801061e:	4603      	mov	r3, r0
 8010620:	2b00      	cmp	r3, #0
 8010622:	d004      	beq.n	801062e <f_read+0x166>
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	2201      	movs	r2, #1
 8010628:	755a      	strb	r2, [r3, #21]
 801062a:	2301      	movs	r3, #1
 801062c:	e087      	b.n	801073e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	7d1b      	ldrb	r3, [r3, #20]
 8010632:	b25b      	sxtb	r3, r3
 8010634:	2b00      	cmp	r3, #0
 8010636:	da14      	bge.n	8010662 <f_read+0x19a>
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	6a1a      	ldr	r2, [r3, #32]
 801063c:	69bb      	ldr	r3, [r7, #24]
 801063e:	1ad3      	subs	r3, r2, r3
 8010640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010642:	429a      	cmp	r2, r3
 8010644:	d90d      	bls.n	8010662 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	6a1a      	ldr	r2, [r3, #32]
 801064a:	69bb      	ldr	r3, [r7, #24]
 801064c:	1ad3      	subs	r3, r2, r3
 801064e:	025b      	lsls	r3, r3, #9
 8010650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010652:	18d0      	adds	r0, r2, r3
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	3330      	adds	r3, #48	; 0x30
 8010658:	f44f 7200 	mov.w	r2, #512	; 0x200
 801065c:	4619      	mov	r1, r3
 801065e:	f7fd fb4b 	bl	800dcf8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010664:	025b      	lsls	r3, r3, #9
 8010666:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010668:	e050      	b.n	801070c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	6a1b      	ldr	r3, [r3, #32]
 801066e:	69ba      	ldr	r2, [r7, #24]
 8010670:	429a      	cmp	r2, r3
 8010672:	d02e      	beq.n	80106d2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	7d1b      	ldrb	r3, [r3, #20]
 8010678:	b25b      	sxtb	r3, r3
 801067a:	2b00      	cmp	r3, #0
 801067c:	da18      	bge.n	80106b0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801067e:	697b      	ldr	r3, [r7, #20]
 8010680:	7858      	ldrb	r0, [r3, #1]
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	6a1a      	ldr	r2, [r3, #32]
 801068c:	2301      	movs	r3, #1
 801068e:	f7fd fa73 	bl	800db78 <disk_write>
 8010692:	4603      	mov	r3, r0
 8010694:	2b00      	cmp	r3, #0
 8010696:	d004      	beq.n	80106a2 <f_read+0x1da>
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	2201      	movs	r2, #1
 801069c:	755a      	strb	r2, [r3, #21]
 801069e:	2301      	movs	r3, #1
 80106a0:	e04d      	b.n	801073e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	7d1b      	ldrb	r3, [r3, #20]
 80106a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106aa:	b2da      	uxtb	r2, r3
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	7858      	ldrb	r0, [r3, #1]
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80106ba:	2301      	movs	r3, #1
 80106bc:	69ba      	ldr	r2, [r7, #24]
 80106be:	f7fd fa3b 	bl	800db38 <disk_read>
 80106c2:	4603      	mov	r3, r0
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d004      	beq.n	80106d2 <f_read+0x20a>
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	2201      	movs	r2, #1
 80106cc:	755a      	strb	r2, [r3, #21]
 80106ce:	2301      	movs	r3, #1
 80106d0:	e035      	b.n	801073e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	69ba      	ldr	r2, [r7, #24]
 80106d6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	699b      	ldr	r3, [r3, #24]
 80106dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106e0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80106e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80106e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	429a      	cmp	r2, r3
 80106ec:	d901      	bls.n	80106f2 <f_read+0x22a>
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	699b      	ldr	r3, [r3, #24]
 80106fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010700:	4413      	add	r3, r2
 8010702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010704:	4619      	mov	r1, r3
 8010706:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010708:	f7fd faf6 	bl	800dcf8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801070c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801070e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010710:	4413      	add	r3, r2
 8010712:	627b      	str	r3, [r7, #36]	; 0x24
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	699a      	ldr	r2, [r3, #24]
 8010718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071a:	441a      	add	r2, r3
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	619a      	str	r2, [r3, #24]
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	681a      	ldr	r2, [r3, #0]
 8010724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010726:	441a      	add	r2, r3
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	601a      	str	r2, [r3, #0]
 801072c:	687a      	ldr	r2, [r7, #4]
 801072e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010730:	1ad3      	subs	r3, r2, r3
 8010732:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2b00      	cmp	r3, #0
 8010738:	f47f af01 	bne.w	801053e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801073c:	2300      	movs	r3, #0
}
 801073e:	4618      	mov	r0, r3
 8010740:	3738      	adds	r7, #56	; 0x38
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}

08010746 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010746:	b580      	push	{r7, lr}
 8010748:	b086      	sub	sp, #24
 801074a:	af00      	add	r7, sp, #0
 801074c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f107 0208 	add.w	r2, r7, #8
 8010754:	4611      	mov	r1, r2
 8010756:	4618      	mov	r0, r3
 8010758:	f7ff fc7c 	bl	8010054 <validate>
 801075c:	4603      	mov	r3, r0
 801075e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010760:	7dfb      	ldrb	r3, [r7, #23]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d168      	bne.n	8010838 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	7d1b      	ldrb	r3, [r3, #20]
 801076a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801076e:	2b00      	cmp	r3, #0
 8010770:	d062      	beq.n	8010838 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	7d1b      	ldrb	r3, [r3, #20]
 8010776:	b25b      	sxtb	r3, r3
 8010778:	2b00      	cmp	r3, #0
 801077a:	da15      	bge.n	80107a8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	7858      	ldrb	r0, [r3, #1]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	6a1a      	ldr	r2, [r3, #32]
 801078a:	2301      	movs	r3, #1
 801078c:	f7fd f9f4 	bl	800db78 <disk_write>
 8010790:	4603      	mov	r3, r0
 8010792:	2b00      	cmp	r3, #0
 8010794:	d001      	beq.n	801079a <f_sync+0x54>
 8010796:	2301      	movs	r3, #1
 8010798:	e04f      	b.n	801083a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	7d1b      	ldrb	r3, [r3, #20]
 801079e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107a2:	b2da      	uxtb	r2, r3
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80107a8:	f7fa f876 	bl	800a898 <get_fattime>
 80107ac:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80107ae:	68ba      	ldr	r2, [r7, #8]
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107b4:	4619      	mov	r1, r3
 80107b6:	4610      	mov	r0, r2
 80107b8:	f7fd fccc 	bl	800e154 <move_window>
 80107bc:	4603      	mov	r3, r0
 80107be:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80107c0:	7dfb      	ldrb	r3, [r7, #23]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d138      	bne.n	8010838 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107ca:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	330b      	adds	r3, #11
 80107d0:	781a      	ldrb	r2, [r3, #0]
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	330b      	adds	r3, #11
 80107d6:	f042 0220 	orr.w	r2, r2, #32
 80107da:	b2d2      	uxtb	r2, r2
 80107dc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	6818      	ldr	r0, [r3, #0]
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	689b      	ldr	r3, [r3, #8]
 80107e6:	461a      	mov	r2, r3
 80107e8:	68f9      	ldr	r1, [r7, #12]
 80107ea:	f7fe f9d7 	bl	800eb9c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	f103 021c 	add.w	r2, r3, #28
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	68db      	ldr	r3, [r3, #12]
 80107f8:	4619      	mov	r1, r3
 80107fa:	4610      	mov	r0, r2
 80107fc:	f7fd fa50 	bl	800dca0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	3316      	adds	r3, #22
 8010804:	6939      	ldr	r1, [r7, #16]
 8010806:	4618      	mov	r0, r3
 8010808:	f7fd fa4a 	bl	800dca0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	3312      	adds	r3, #18
 8010810:	2100      	movs	r1, #0
 8010812:	4618      	mov	r0, r3
 8010814:	f7fd fa29 	bl	800dc6a <st_word>
					fs->wflag = 1;
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	2201      	movs	r2, #1
 801081c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	4618      	mov	r0, r3
 8010822:	f7fd fcc5 	bl	800e1b0 <sync_fs>
 8010826:	4603      	mov	r3, r0
 8010828:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	7d1b      	ldrb	r3, [r3, #20]
 801082e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010832:	b2da      	uxtb	r2, r3
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010838:	7dfb      	ldrb	r3, [r7, #23]
}
 801083a:	4618      	mov	r0, r3
 801083c:	3718      	adds	r7, #24
 801083e:	46bd      	mov	sp, r7
 8010840:	bd80      	pop	{r7, pc}

08010842 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010842:	b580      	push	{r7, lr}
 8010844:	b084      	sub	sp, #16
 8010846:	af00      	add	r7, sp, #0
 8010848:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f7ff ff7b 	bl	8010746 <f_sync>
 8010850:	4603      	mov	r3, r0
 8010852:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010854:	7bfb      	ldrb	r3, [r7, #15]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d118      	bne.n	801088c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f107 0208 	add.w	r2, r7, #8
 8010860:	4611      	mov	r1, r2
 8010862:	4618      	mov	r0, r3
 8010864:	f7ff fbf6 	bl	8010054 <validate>
 8010868:	4603      	mov	r3, r0
 801086a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801086c:	7bfb      	ldrb	r3, [r7, #15]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d10c      	bne.n	801088c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	691b      	ldr	r3, [r3, #16]
 8010876:	4618      	mov	r0, r3
 8010878:	f7fd fbc8 	bl	800e00c <dec_lock>
 801087c:	4603      	mov	r3, r0
 801087e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010880:	7bfb      	ldrb	r3, [r7, #15]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d102      	bne.n	801088c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2200      	movs	r2, #0
 801088a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801088c:	7bfb      	ldrb	r3, [r7, #15]
}
 801088e:	4618      	mov	r0, r3
 8010890:	3710      	adds	r7, #16
 8010892:	46bd      	mov	sp, r7
 8010894:	bd80      	pop	{r7, pc}

08010896 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010896:	b580      	push	{r7, lr}
 8010898:	b090      	sub	sp, #64	; 0x40
 801089a:	af00      	add	r7, sp, #0
 801089c:	6078      	str	r0, [r7, #4]
 801089e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f107 0208 	add.w	r2, r7, #8
 80108a6:	4611      	mov	r1, r2
 80108a8:	4618      	mov	r0, r3
 80108aa:	f7ff fbd3 	bl	8010054 <validate>
 80108ae:	4603      	mov	r3, r0
 80108b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80108b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d103      	bne.n	80108c4 <f_lseek+0x2e>
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	7d5b      	ldrb	r3, [r3, #21]
 80108c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80108c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d002      	beq.n	80108d2 <f_lseek+0x3c>
 80108cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80108d0:	e1e6      	b.n	8010ca0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	f000 80d1 	beq.w	8010a7e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108e2:	d15a      	bne.n	801099a <f_lseek+0x104>
			tbl = fp->cltbl;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108e8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80108ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ec:	1d1a      	adds	r2, r3, #4
 80108ee:	627a      	str	r2, [r7, #36]	; 0x24
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	617b      	str	r3, [r7, #20]
 80108f4:	2302      	movs	r3, #2
 80108f6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	689b      	ldr	r3, [r3, #8]
 80108fc:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80108fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010900:	2b00      	cmp	r3, #0
 8010902:	d03a      	beq.n	801097a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010906:	613b      	str	r3, [r7, #16]
 8010908:	2300      	movs	r3, #0
 801090a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801090e:	3302      	adds	r3, #2
 8010910:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010914:	60fb      	str	r3, [r7, #12]
 8010916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010918:	3301      	adds	r3, #1
 801091a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010920:	4618      	mov	r0, r3
 8010922:	f7fd fcd2 	bl	800e2ca <get_fat>
 8010926:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801092a:	2b01      	cmp	r3, #1
 801092c:	d804      	bhi.n	8010938 <f_lseek+0xa2>
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2202      	movs	r2, #2
 8010932:	755a      	strb	r2, [r3, #21]
 8010934:	2302      	movs	r3, #2
 8010936:	e1b3      	b.n	8010ca0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801093a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801093e:	d104      	bne.n	801094a <f_lseek+0xb4>
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2201      	movs	r2, #1
 8010944:	755a      	strb	r2, [r3, #21]
 8010946:	2301      	movs	r3, #1
 8010948:	e1aa      	b.n	8010ca0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	3301      	adds	r3, #1
 801094e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010950:	429a      	cmp	r2, r3
 8010952:	d0de      	beq.n	8010912 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	429a      	cmp	r2, r3
 801095a:	d809      	bhi.n	8010970 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801095e:	1d1a      	adds	r2, r3, #4
 8010960:	627a      	str	r2, [r7, #36]	; 0x24
 8010962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010964:	601a      	str	r2, [r3, #0]
 8010966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010968:	1d1a      	adds	r2, r3, #4
 801096a:	627a      	str	r2, [r7, #36]	; 0x24
 801096c:	693a      	ldr	r2, [r7, #16]
 801096e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	699b      	ldr	r3, [r3, #24]
 8010974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010976:	429a      	cmp	r2, r3
 8010978:	d3c4      	bcc.n	8010904 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801097e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010980:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010984:	697b      	ldr	r3, [r7, #20]
 8010986:	429a      	cmp	r2, r3
 8010988:	d803      	bhi.n	8010992 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801098c:	2200      	movs	r2, #0
 801098e:	601a      	str	r2, [r3, #0]
 8010990:	e184      	b.n	8010c9c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010992:	2311      	movs	r3, #17
 8010994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010998:	e180      	b.n	8010c9c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	68db      	ldr	r3, [r3, #12]
 801099e:	683a      	ldr	r2, [r7, #0]
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d902      	bls.n	80109aa <f_lseek+0x114>
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	68db      	ldr	r3, [r3, #12]
 80109a8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	683a      	ldr	r2, [r7, #0]
 80109ae:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	f000 8172 	beq.w	8010c9c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	3b01      	subs	r3, #1
 80109bc:	4619      	mov	r1, r3
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f7fd ff12 	bl	800e7e8 <clmt_clust>
 80109c4:	4602      	mov	r2, r0
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80109ca:	68ba      	ldr	r2, [r7, #8]
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	69db      	ldr	r3, [r3, #28]
 80109d0:	4619      	mov	r1, r3
 80109d2:	4610      	mov	r0, r2
 80109d4:	f7fd fc5a 	bl	800e28c <clust2sect>
 80109d8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80109da:	69bb      	ldr	r3, [r7, #24]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d104      	bne.n	80109ea <f_lseek+0x154>
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2202      	movs	r2, #2
 80109e4:	755a      	strb	r2, [r3, #21]
 80109e6:	2302      	movs	r3, #2
 80109e8:	e15a      	b.n	8010ca0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	3b01      	subs	r3, #1
 80109ee:	0a5b      	lsrs	r3, r3, #9
 80109f0:	68ba      	ldr	r2, [r7, #8]
 80109f2:	8952      	ldrh	r2, [r2, #10]
 80109f4:	3a01      	subs	r2, #1
 80109f6:	4013      	ands	r3, r2
 80109f8:	69ba      	ldr	r2, [r7, #24]
 80109fa:	4413      	add	r3, r2
 80109fc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	699b      	ldr	r3, [r3, #24]
 8010a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	f000 8148 	beq.w	8010c9c <f_lseek+0x406>
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6a1b      	ldr	r3, [r3, #32]
 8010a10:	69ba      	ldr	r2, [r7, #24]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	f000 8142 	beq.w	8010c9c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	7d1b      	ldrb	r3, [r3, #20]
 8010a1c:	b25b      	sxtb	r3, r3
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	da18      	bge.n	8010a54 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	7858      	ldrb	r0, [r3, #1]
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6a1a      	ldr	r2, [r3, #32]
 8010a30:	2301      	movs	r3, #1
 8010a32:	f7fd f8a1 	bl	800db78 <disk_write>
 8010a36:	4603      	mov	r3, r0
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d004      	beq.n	8010a46 <f_lseek+0x1b0>
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2201      	movs	r2, #1
 8010a40:	755a      	strb	r2, [r3, #21]
 8010a42:	2301      	movs	r3, #1
 8010a44:	e12c      	b.n	8010ca0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	7d1b      	ldrb	r3, [r3, #20]
 8010a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a4e:	b2da      	uxtb	r2, r3
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	7858      	ldrb	r0, [r3, #1]
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a5e:	2301      	movs	r3, #1
 8010a60:	69ba      	ldr	r2, [r7, #24]
 8010a62:	f7fd f869 	bl	800db38 <disk_read>
 8010a66:	4603      	mov	r3, r0
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d004      	beq.n	8010a76 <f_lseek+0x1e0>
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2201      	movs	r2, #1
 8010a70:	755a      	strb	r2, [r3, #21]
 8010a72:	2301      	movs	r3, #1
 8010a74:	e114      	b.n	8010ca0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	69ba      	ldr	r2, [r7, #24]
 8010a7a:	621a      	str	r2, [r3, #32]
 8010a7c:	e10e      	b.n	8010c9c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	68db      	ldr	r3, [r3, #12]
 8010a82:	683a      	ldr	r2, [r7, #0]
 8010a84:	429a      	cmp	r2, r3
 8010a86:	d908      	bls.n	8010a9a <f_lseek+0x204>
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	7d1b      	ldrb	r3, [r3, #20]
 8010a8c:	f003 0302 	and.w	r3, r3, #2
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d102      	bne.n	8010a9a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	68db      	ldr	r3, [r3, #12]
 8010a98:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	699b      	ldr	r3, [r3, #24]
 8010a9e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010aa8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010aaa:	683b      	ldr	r3, [r7, #0]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	f000 80a7 	beq.w	8010c00 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	895b      	ldrh	r3, [r3, #10]
 8010ab6:	025b      	lsls	r3, r3, #9
 8010ab8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010aba:	6a3b      	ldr	r3, [r7, #32]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d01b      	beq.n	8010af8 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	1e5a      	subs	r2, r3, #1
 8010ac4:	69fb      	ldr	r3, [r7, #28]
 8010ac6:	fbb2 f2f3 	udiv	r2, r2, r3
 8010aca:	6a3b      	ldr	r3, [r7, #32]
 8010acc:	1e59      	subs	r1, r3, #1
 8010ace:	69fb      	ldr	r3, [r7, #28]
 8010ad0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	d30f      	bcc.n	8010af8 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010ad8:	6a3b      	ldr	r3, [r7, #32]
 8010ada:	1e5a      	subs	r2, r3, #1
 8010adc:	69fb      	ldr	r3, [r7, #28]
 8010ade:	425b      	negs	r3, r3
 8010ae0:	401a      	ands	r2, r3
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	699b      	ldr	r3, [r3, #24]
 8010aea:	683a      	ldr	r2, [r7, #0]
 8010aec:	1ad3      	subs	r3, r2, r3
 8010aee:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	69db      	ldr	r3, [r3, #28]
 8010af4:	63bb      	str	r3, [r7, #56]	; 0x38
 8010af6:	e022      	b.n	8010b3e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	689b      	ldr	r3, [r3, #8]
 8010afc:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d119      	bne.n	8010b38 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2100      	movs	r1, #0
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f7fd fdd5 	bl	800e6b8 <create_chain>
 8010b0e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b12:	2b01      	cmp	r3, #1
 8010b14:	d104      	bne.n	8010b20 <f_lseek+0x28a>
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2202      	movs	r2, #2
 8010b1a:	755a      	strb	r2, [r3, #21]
 8010b1c:	2302      	movs	r3, #2
 8010b1e:	e0bf      	b.n	8010ca0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b26:	d104      	bne.n	8010b32 <f_lseek+0x29c>
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2201      	movs	r2, #1
 8010b2c:	755a      	strb	r2, [r3, #21]
 8010b2e:	2301      	movs	r3, #1
 8010b30:	e0b6      	b.n	8010ca0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b36:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b3c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d05d      	beq.n	8010c00 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8010b44:	e03a      	b.n	8010bbc <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8010b46:	683a      	ldr	r2, [r7, #0]
 8010b48:	69fb      	ldr	r3, [r7, #28]
 8010b4a:	1ad3      	subs	r3, r2, r3
 8010b4c:	603b      	str	r3, [r7, #0]
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	699a      	ldr	r2, [r3, #24]
 8010b52:	69fb      	ldr	r3, [r7, #28]
 8010b54:	441a      	add	r2, r3
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	7d1b      	ldrb	r3, [r3, #20]
 8010b5e:	f003 0302 	and.w	r3, r3, #2
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d00b      	beq.n	8010b7e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fd fda4 	bl	800e6b8 <create_chain>
 8010b70:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d108      	bne.n	8010b8a <f_lseek+0x2f4>
							ofs = 0; break;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	603b      	str	r3, [r7, #0]
 8010b7c:	e022      	b.n	8010bc4 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7fd fba1 	bl	800e2ca <get_fat>
 8010b88:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b90:	d104      	bne.n	8010b9c <f_lseek+0x306>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2201      	movs	r2, #1
 8010b96:	755a      	strb	r2, [r3, #21]
 8010b98:	2301      	movs	r3, #1
 8010b9a:	e081      	b.n	8010ca0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b9e:	2b01      	cmp	r3, #1
 8010ba0:	d904      	bls.n	8010bac <f_lseek+0x316>
 8010ba2:	68bb      	ldr	r3, [r7, #8]
 8010ba4:	699b      	ldr	r3, [r3, #24]
 8010ba6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010ba8:	429a      	cmp	r2, r3
 8010baa:	d304      	bcc.n	8010bb6 <f_lseek+0x320>
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2202      	movs	r2, #2
 8010bb0:	755a      	strb	r2, [r3, #21]
 8010bb2:	2302      	movs	r3, #2
 8010bb4:	e074      	b.n	8010ca0 <f_lseek+0x40a>
					fp->clust = clst;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010bba:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010bbc:	683a      	ldr	r2, [r7, #0]
 8010bbe:	69fb      	ldr	r3, [r7, #28]
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	d8c0      	bhi.n	8010b46 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	699a      	ldr	r2, [r3, #24]
 8010bc8:	683b      	ldr	r3, [r7, #0]
 8010bca:	441a      	add	r2, r3
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d012      	beq.n	8010c00 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010bde:	4618      	mov	r0, r3
 8010be0:	f7fd fb54 	bl	800e28c <clust2sect>
 8010be4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d104      	bne.n	8010bf6 <f_lseek+0x360>
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2202      	movs	r2, #2
 8010bf0:	755a      	strb	r2, [r3, #21]
 8010bf2:	2302      	movs	r3, #2
 8010bf4:	e054      	b.n	8010ca0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	0a5b      	lsrs	r3, r3, #9
 8010bfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010bfc:	4413      	add	r3, r2
 8010bfe:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	699a      	ldr	r2, [r3, #24]
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	68db      	ldr	r3, [r3, #12]
 8010c08:	429a      	cmp	r2, r3
 8010c0a:	d90a      	bls.n	8010c22 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	699a      	ldr	r2, [r3, #24]
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	7d1b      	ldrb	r3, [r3, #20]
 8010c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c1c:	b2da      	uxtb	r2, r3
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	699b      	ldr	r3, [r3, #24]
 8010c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d036      	beq.n	8010c9c <f_lseek+0x406>
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	6a1b      	ldr	r3, [r3, #32]
 8010c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d031      	beq.n	8010c9c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	7d1b      	ldrb	r3, [r3, #20]
 8010c3c:	b25b      	sxtb	r3, r3
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	da18      	bge.n	8010c74 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	7858      	ldrb	r0, [r3, #1]
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	6a1a      	ldr	r2, [r3, #32]
 8010c50:	2301      	movs	r3, #1
 8010c52:	f7fc ff91 	bl	800db78 <disk_write>
 8010c56:	4603      	mov	r3, r0
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d004      	beq.n	8010c66 <f_lseek+0x3d0>
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	2201      	movs	r2, #1
 8010c60:	755a      	strb	r2, [r3, #21]
 8010c62:	2301      	movs	r3, #1
 8010c64:	e01c      	b.n	8010ca0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	7d1b      	ldrb	r3, [r3, #20]
 8010c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c6e:	b2da      	uxtb	r2, r3
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010c74:	68bb      	ldr	r3, [r7, #8]
 8010c76:	7858      	ldrb	r0, [r3, #1]
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010c7e:	2301      	movs	r3, #1
 8010c80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c82:	f7fc ff59 	bl	800db38 <disk_read>
 8010c86:	4603      	mov	r3, r0
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d004      	beq.n	8010c96 <f_lseek+0x400>
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	2201      	movs	r2, #1
 8010c90:	755a      	strb	r2, [r3, #21]
 8010c92:	2301      	movs	r3, #1
 8010c94:	e004      	b.n	8010ca0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c9a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010c9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3740      	adds	r7, #64	; 0x40
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}

08010ca8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b086      	sub	sp, #24
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d101      	bne.n	8010cbc <f_opendir+0x14>
 8010cb8:	2309      	movs	r3, #9
 8010cba:	e064      	b.n	8010d86 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8010cc0:	f107 010c 	add.w	r1, r7, #12
 8010cc4:	463b      	mov	r3, r7
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7fe ff73 	bl	800fbb4 <find_volume>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010cd2:	7dfb      	ldrb	r3, [r7, #23]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d14f      	bne.n	8010d78 <f_opendir+0xd0>
		obj->fs = fs;
 8010cd8:	68fa      	ldr	r2, [r7, #12]
 8010cda:	693b      	ldr	r3, [r7, #16]
 8010cdc:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	4619      	mov	r1, r3
 8010ce2:	6878      	ldr	r0, [r7, #4]
 8010ce4:	f7fe fe5a 	bl	800f99c <follow_path>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8010cec:	7dfb      	ldrb	r3, [r7, #23]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d13d      	bne.n	8010d6e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010cf8:	b25b      	sxtb	r3, r3
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	db12      	blt.n	8010d24 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8010cfe:	693b      	ldr	r3, [r7, #16]
 8010d00:	799b      	ldrb	r3, [r3, #6]
 8010d02:	f003 0310 	and.w	r3, r3, #16
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d00a      	beq.n	8010d20 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8010d0a:	68fa      	ldr	r2, [r7, #12]
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6a1b      	ldr	r3, [r3, #32]
 8010d10:	4619      	mov	r1, r3
 8010d12:	4610      	mov	r0, r2
 8010d14:	f7fd ff23 	bl	800eb5e <ld_clust>
 8010d18:	4602      	mov	r2, r0
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	609a      	str	r2, [r3, #8]
 8010d1e:	e001      	b.n	8010d24 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8010d20:	2305      	movs	r3, #5
 8010d22:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8010d24:	7dfb      	ldrb	r3, [r7, #23]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d121      	bne.n	8010d6e <f_opendir+0xc6>
				obj->id = fs->id;
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	88da      	ldrh	r2, [r3, #6]
 8010d2e:	693b      	ldr	r3, [r7, #16]
 8010d30:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8010d32:	2100      	movs	r1, #0
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f7fd fd8b 	bl	800e850 <dir_sdi>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8010d3e:	7dfb      	ldrb	r3, [r7, #23]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d114      	bne.n	8010d6e <f_opendir+0xc6>
					if (obj->sclust) {
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	689b      	ldr	r3, [r3, #8]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d00d      	beq.n	8010d68 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8010d4c:	2100      	movs	r1, #0
 8010d4e:	6878      	ldr	r0, [r7, #4]
 8010d50:	f7fd f8ce 	bl	800def0 <inc_lock>
 8010d54:	4602      	mov	r2, r0
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8010d5a:	693b      	ldr	r3, [r7, #16]
 8010d5c:	691b      	ldr	r3, [r3, #16]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d105      	bne.n	8010d6e <f_opendir+0xc6>
 8010d62:	2312      	movs	r3, #18
 8010d64:	75fb      	strb	r3, [r7, #23]
 8010d66:	e002      	b.n	8010d6e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8010d68:	693b      	ldr	r3, [r7, #16]
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010d6e:	7dfb      	ldrb	r3, [r7, #23]
 8010d70:	2b04      	cmp	r3, #4
 8010d72:	d101      	bne.n	8010d78 <f_opendir+0xd0>
 8010d74:	2305      	movs	r3, #5
 8010d76:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8010d78:	7dfb      	ldrb	r3, [r7, #23]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d002      	beq.n	8010d84 <f_opendir+0xdc>
 8010d7e:	693b      	ldr	r3, [r7, #16]
 8010d80:	2200      	movs	r2, #0
 8010d82:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3718      	adds	r7, #24
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}

08010d8e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8010d8e:	b580      	push	{r7, lr}
 8010d90:	b084      	sub	sp, #16
 8010d92:	af00      	add	r7, sp, #0
 8010d94:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f107 0208 	add.w	r2, r7, #8
 8010d9c:	4611      	mov	r1, r2
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7ff f958 	bl	8010054 <validate>
 8010da4:	4603      	mov	r3, r0
 8010da6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010da8:	7bfb      	ldrb	r3, [r7, #15]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d110      	bne.n	8010dd0 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	691b      	ldr	r3, [r3, #16]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d006      	beq.n	8010dc4 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	691b      	ldr	r3, [r3, #16]
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7fd f926 	bl	800e00c <dec_lock>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8010dc4:	7bfb      	ldrb	r3, [r7, #15]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d102      	bne.n	8010dd0 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2200      	movs	r2, #0
 8010dce:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8010dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3710      	adds	r7, #16
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}

08010dda <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010dda:	b580      	push	{r7, lr}
 8010ddc:	b084      	sub	sp, #16
 8010dde:	af00      	add	r7, sp, #0
 8010de0:	6078      	str	r0, [r7, #4]
 8010de2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f107 0208 	add.w	r2, r7, #8
 8010dea:	4611      	mov	r1, r2
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7ff f931 	bl	8010054 <validate>
 8010df2:	4603      	mov	r3, r0
 8010df4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010df6:	7bfb      	ldrb	r3, [r7, #15]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d126      	bne.n	8010e4a <f_readdir+0x70>
		if (!fno) {
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d106      	bne.n	8010e10 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8010e02:	2100      	movs	r1, #0
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f7fd fd23 	bl	800e850 <dir_sdi>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	73fb      	strb	r3, [r7, #15]
 8010e0e:	e01c      	b.n	8010e4a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8010e10:	2100      	movs	r1, #0
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	f7fe f8cd 	bl	800efb2 <dir_read>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8010e1c:	7bfb      	ldrb	r3, [r7, #15]
 8010e1e:	2b04      	cmp	r3, #4
 8010e20:	d101      	bne.n	8010e26 <f_readdir+0x4c>
 8010e22:	2300      	movs	r3, #0
 8010e24:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8010e26:	7bfb      	ldrb	r3, [r7, #15]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d10e      	bne.n	8010e4a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8010e2c:	6839      	ldr	r1, [r7, #0]
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f7fe fb1e 	bl	800f470 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8010e34:	2100      	movs	r1, #0
 8010e36:	6878      	ldr	r0, [r7, #4]
 8010e38:	f7fd fd85 	bl	800e946 <dir_next>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8010e40:	7bfb      	ldrb	r3, [r7, #15]
 8010e42:	2b04      	cmp	r3, #4
 8010e44:	d101      	bne.n	8010e4a <f_readdir+0x70>
 8010e46:	2300      	movs	r3, #0
 8010e48:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8010e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	3710      	adds	r7, #16
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}

08010e54 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010e54:	b480      	push	{r7}
 8010e56:	b087      	sub	sp, #28
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	60f8      	str	r0, [r7, #12]
 8010e5c:	60b9      	str	r1, [r7, #8]
 8010e5e:	4613      	mov	r3, r2
 8010e60:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010e62:	2301      	movs	r3, #1
 8010e64:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010e66:	2300      	movs	r3, #0
 8010e68:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010e6a:	4b1f      	ldr	r3, [pc, #124]	; (8010ee8 <FATFS_LinkDriverEx+0x94>)
 8010e6c:	7a5b      	ldrb	r3, [r3, #9]
 8010e6e:	b2db      	uxtb	r3, r3
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d131      	bne.n	8010ed8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010e74:	4b1c      	ldr	r3, [pc, #112]	; (8010ee8 <FATFS_LinkDriverEx+0x94>)
 8010e76:	7a5b      	ldrb	r3, [r3, #9]
 8010e78:	b2db      	uxtb	r3, r3
 8010e7a:	461a      	mov	r2, r3
 8010e7c:	4b1a      	ldr	r3, [pc, #104]	; (8010ee8 <FATFS_LinkDriverEx+0x94>)
 8010e7e:	2100      	movs	r1, #0
 8010e80:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010e82:	4b19      	ldr	r3, [pc, #100]	; (8010ee8 <FATFS_LinkDriverEx+0x94>)
 8010e84:	7a5b      	ldrb	r3, [r3, #9]
 8010e86:	b2db      	uxtb	r3, r3
 8010e88:	4a17      	ldr	r2, [pc, #92]	; (8010ee8 <FATFS_LinkDriverEx+0x94>)
 8010e8a:	009b      	lsls	r3, r3, #2
 8010e8c:	4413      	add	r3, r2
 8010e8e:	68fa      	ldr	r2, [r7, #12]
 8010e90:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010e92:	4b15      	ldr	r3, [pc, #84]	; (8010ee8 <FATFS_LinkDriverEx+0x94>)
 8010e94:	7a5b      	ldrb	r3, [r3, #9]
 8010e96:	b2db      	uxtb	r3, r3
 8010e98:	461a      	mov	r2, r3
 8010e9a:	4b13      	ldr	r3, [pc, #76]	; (8010ee8 <FATFS_LinkDriverEx+0x94>)
 8010e9c:	4413      	add	r3, r2
 8010e9e:	79fa      	ldrb	r2, [r7, #7]
 8010ea0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010ea2:	4b11      	ldr	r3, [pc, #68]	; (8010ee8 <FATFS_LinkDriverEx+0x94>)
 8010ea4:	7a5b      	ldrb	r3, [r3, #9]
 8010ea6:	b2db      	uxtb	r3, r3
 8010ea8:	1c5a      	adds	r2, r3, #1
 8010eaa:	b2d1      	uxtb	r1, r2
 8010eac:	4a0e      	ldr	r2, [pc, #56]	; (8010ee8 <FATFS_LinkDriverEx+0x94>)
 8010eae:	7251      	strb	r1, [r2, #9]
 8010eb0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010eb2:	7dbb      	ldrb	r3, [r7, #22]
 8010eb4:	3330      	adds	r3, #48	; 0x30
 8010eb6:	b2da      	uxtb	r2, r3
 8010eb8:	68bb      	ldr	r3, [r7, #8]
 8010eba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	3301      	adds	r3, #1
 8010ec0:	223a      	movs	r2, #58	; 0x3a
 8010ec2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	3302      	adds	r3, #2
 8010ec8:	222f      	movs	r2, #47	; 0x2f
 8010eca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	3303      	adds	r3, #3
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	371c      	adds	r7, #28
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee4:	4770      	bx	lr
 8010ee6:	bf00      	nop
 8010ee8:	200024e0 	.word	0x200024e0

08010eec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b082      	sub	sp, #8
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	6839      	ldr	r1, [r7, #0]
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f7ff ffaa 	bl	8010e54 <FATFS_LinkDriverEx>
 8010f00:	4603      	mov	r3, r0
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3708      	adds	r7, #8
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}
	...

08010f0c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	b085      	sub	sp, #20
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	4603      	mov	r3, r0
 8010f14:	6039      	str	r1, [r7, #0]
 8010f16:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010f18:	88fb      	ldrh	r3, [r7, #6]
 8010f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8010f1c:	d802      	bhi.n	8010f24 <ff_convert+0x18>
		c = chr;
 8010f1e:	88fb      	ldrh	r3, [r7, #6]
 8010f20:	81fb      	strh	r3, [r7, #14]
 8010f22:	e025      	b.n	8010f70 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d00b      	beq.n	8010f42 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010f2a:	88fb      	ldrh	r3, [r7, #6]
 8010f2c:	2bff      	cmp	r3, #255	; 0xff
 8010f2e:	d805      	bhi.n	8010f3c <ff_convert+0x30>
 8010f30:	88fb      	ldrh	r3, [r7, #6]
 8010f32:	3b80      	subs	r3, #128	; 0x80
 8010f34:	4a12      	ldr	r2, [pc, #72]	; (8010f80 <ff_convert+0x74>)
 8010f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f3a:	e000      	b.n	8010f3e <ff_convert+0x32>
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	81fb      	strh	r3, [r7, #14]
 8010f40:	e016      	b.n	8010f70 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010f42:	2300      	movs	r3, #0
 8010f44:	81fb      	strh	r3, [r7, #14]
 8010f46:	e009      	b.n	8010f5c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010f48:	89fb      	ldrh	r3, [r7, #14]
 8010f4a:	4a0d      	ldr	r2, [pc, #52]	; (8010f80 <ff_convert+0x74>)
 8010f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f50:	88fa      	ldrh	r2, [r7, #6]
 8010f52:	429a      	cmp	r2, r3
 8010f54:	d006      	beq.n	8010f64 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010f56:	89fb      	ldrh	r3, [r7, #14]
 8010f58:	3301      	adds	r3, #1
 8010f5a:	81fb      	strh	r3, [r7, #14]
 8010f5c:	89fb      	ldrh	r3, [r7, #14]
 8010f5e:	2b7f      	cmp	r3, #127	; 0x7f
 8010f60:	d9f2      	bls.n	8010f48 <ff_convert+0x3c>
 8010f62:	e000      	b.n	8010f66 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010f64:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010f66:	89fb      	ldrh	r3, [r7, #14]
 8010f68:	3380      	adds	r3, #128	; 0x80
 8010f6a:	b29b      	uxth	r3, r3
 8010f6c:	b2db      	uxtb	r3, r3
 8010f6e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010f70:	89fb      	ldrh	r3, [r7, #14]
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3714      	adds	r7, #20
 8010f76:	46bd      	mov	sp, r7
 8010f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7c:	4770      	bx	lr
 8010f7e:	bf00      	nop
 8010f80:	0801317c 	.word	0x0801317c

08010f84 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010f84:	b480      	push	{r7}
 8010f86:	b087      	sub	sp, #28
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010f8e:	88fb      	ldrh	r3, [r7, #6]
 8010f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f94:	d201      	bcs.n	8010f9a <ff_wtoupper+0x16>
 8010f96:	4b3e      	ldr	r3, [pc, #248]	; (8011090 <ff_wtoupper+0x10c>)
 8010f98:	e000      	b.n	8010f9c <ff_wtoupper+0x18>
 8010f9a:	4b3e      	ldr	r3, [pc, #248]	; (8011094 <ff_wtoupper+0x110>)
 8010f9c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	1c9a      	adds	r2, r3, #2
 8010fa2:	617a      	str	r2, [r7, #20]
 8010fa4:	881b      	ldrh	r3, [r3, #0]
 8010fa6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010fa8:	8a7b      	ldrh	r3, [r7, #18]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d068      	beq.n	8011080 <ff_wtoupper+0xfc>
 8010fae:	88fa      	ldrh	r2, [r7, #6]
 8010fb0:	8a7b      	ldrh	r3, [r7, #18]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d364      	bcc.n	8011080 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010fb6:	697b      	ldr	r3, [r7, #20]
 8010fb8:	1c9a      	adds	r2, r3, #2
 8010fba:	617a      	str	r2, [r7, #20]
 8010fbc:	881b      	ldrh	r3, [r3, #0]
 8010fbe:	823b      	strh	r3, [r7, #16]
 8010fc0:	8a3b      	ldrh	r3, [r7, #16]
 8010fc2:	0a1b      	lsrs	r3, r3, #8
 8010fc4:	81fb      	strh	r3, [r7, #14]
 8010fc6:	8a3b      	ldrh	r3, [r7, #16]
 8010fc8:	b2db      	uxtb	r3, r3
 8010fca:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010fcc:	88fa      	ldrh	r2, [r7, #6]
 8010fce:	8a79      	ldrh	r1, [r7, #18]
 8010fd0:	8a3b      	ldrh	r3, [r7, #16]
 8010fd2:	440b      	add	r3, r1
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	da49      	bge.n	801106c <ff_wtoupper+0xe8>
			switch (cmd) {
 8010fd8:	89fb      	ldrh	r3, [r7, #14]
 8010fda:	2b08      	cmp	r3, #8
 8010fdc:	d84f      	bhi.n	801107e <ff_wtoupper+0xfa>
 8010fde:	a201      	add	r2, pc, #4	; (adr r2, 8010fe4 <ff_wtoupper+0x60>)
 8010fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fe4:	08011009 	.word	0x08011009
 8010fe8:	0801101b 	.word	0x0801101b
 8010fec:	08011031 	.word	0x08011031
 8010ff0:	08011039 	.word	0x08011039
 8010ff4:	08011041 	.word	0x08011041
 8010ff8:	08011049 	.word	0x08011049
 8010ffc:	08011051 	.word	0x08011051
 8011000:	08011059 	.word	0x08011059
 8011004:	08011061 	.word	0x08011061
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8011008:	88fa      	ldrh	r2, [r7, #6]
 801100a:	8a7b      	ldrh	r3, [r7, #18]
 801100c:	1ad3      	subs	r3, r2, r3
 801100e:	005b      	lsls	r3, r3, #1
 8011010:	697a      	ldr	r2, [r7, #20]
 8011012:	4413      	add	r3, r2
 8011014:	881b      	ldrh	r3, [r3, #0]
 8011016:	80fb      	strh	r3, [r7, #6]
 8011018:	e027      	b.n	801106a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801101a:	88fa      	ldrh	r2, [r7, #6]
 801101c:	8a7b      	ldrh	r3, [r7, #18]
 801101e:	1ad3      	subs	r3, r2, r3
 8011020:	b29b      	uxth	r3, r3
 8011022:	f003 0301 	and.w	r3, r3, #1
 8011026:	b29b      	uxth	r3, r3
 8011028:	88fa      	ldrh	r2, [r7, #6]
 801102a:	1ad3      	subs	r3, r2, r3
 801102c:	80fb      	strh	r3, [r7, #6]
 801102e:	e01c      	b.n	801106a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8011030:	88fb      	ldrh	r3, [r7, #6]
 8011032:	3b10      	subs	r3, #16
 8011034:	80fb      	strh	r3, [r7, #6]
 8011036:	e018      	b.n	801106a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011038:	88fb      	ldrh	r3, [r7, #6]
 801103a:	3b20      	subs	r3, #32
 801103c:	80fb      	strh	r3, [r7, #6]
 801103e:	e014      	b.n	801106a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8011040:	88fb      	ldrh	r3, [r7, #6]
 8011042:	3b30      	subs	r3, #48	; 0x30
 8011044:	80fb      	strh	r3, [r7, #6]
 8011046:	e010      	b.n	801106a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011048:	88fb      	ldrh	r3, [r7, #6]
 801104a:	3b1a      	subs	r3, #26
 801104c:	80fb      	strh	r3, [r7, #6]
 801104e:	e00c      	b.n	801106a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011050:	88fb      	ldrh	r3, [r7, #6]
 8011052:	3308      	adds	r3, #8
 8011054:	80fb      	strh	r3, [r7, #6]
 8011056:	e008      	b.n	801106a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011058:	88fb      	ldrh	r3, [r7, #6]
 801105a:	3b50      	subs	r3, #80	; 0x50
 801105c:	80fb      	strh	r3, [r7, #6]
 801105e:	e004      	b.n	801106a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011060:	88fb      	ldrh	r3, [r7, #6]
 8011062:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011066:	80fb      	strh	r3, [r7, #6]
 8011068:	bf00      	nop
			}
			break;
 801106a:	e008      	b.n	801107e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801106c:	89fb      	ldrh	r3, [r7, #14]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d195      	bne.n	8010f9e <ff_wtoupper+0x1a>
 8011072:	8a3b      	ldrh	r3, [r7, #16]
 8011074:	005b      	lsls	r3, r3, #1
 8011076:	697a      	ldr	r2, [r7, #20]
 8011078:	4413      	add	r3, r2
 801107a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801107c:	e78f      	b.n	8010f9e <ff_wtoupper+0x1a>
			break;
 801107e:	bf00      	nop
	}

	return chr;
 8011080:	88fb      	ldrh	r3, [r7, #6]
}
 8011082:	4618      	mov	r0, r3
 8011084:	371c      	adds	r7, #28
 8011086:	46bd      	mov	sp, r7
 8011088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108c:	4770      	bx	lr
 801108e:	bf00      	nop
 8011090:	0801327c 	.word	0x0801327c
 8011094:	08013470 	.word	0x08013470

08011098 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801109c:	2201      	movs	r2, #1
 801109e:	490e      	ldr	r1, [pc, #56]	; (80110d8 <MX_USB_HOST_Init+0x40>)
 80110a0:	480e      	ldr	r0, [pc, #56]	; (80110dc <MX_USB_HOST_Init+0x44>)
 80110a2:	f7fb f8b5 	bl	800c210 <USBH_Init>
 80110a6:	4603      	mov	r3, r0
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d001      	beq.n	80110b0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80110ac:	f7f0 ff68 	bl	8001f80 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 80110b0:	490b      	ldr	r1, [pc, #44]	; (80110e0 <MX_USB_HOST_Init+0x48>)
 80110b2:	480a      	ldr	r0, [pc, #40]	; (80110dc <MX_USB_HOST_Init+0x44>)
 80110b4:	f7fb f93a 	bl	800c32c <USBH_RegisterClass>
 80110b8:	4603      	mov	r3, r0
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d001      	beq.n	80110c2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80110be:	f7f0 ff5f 	bl	8001f80 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80110c2:	4806      	ldr	r0, [pc, #24]	; (80110dc <MX_USB_HOST_Init+0x44>)
 80110c4:	f7fb f9be 	bl	800c444 <USBH_Start>
 80110c8:	4603      	mov	r3, r0
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d001      	beq.n	80110d2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80110ce:	f7f0 ff57 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80110d2:	bf00      	nop
 80110d4:	bd80      	pop	{r7, pc}
 80110d6:	bf00      	nop
 80110d8:	080110f9 	.word	0x080110f9
 80110dc:	200024ec 	.word	0x200024ec
 80110e0:	2000008c 	.word	0x2000008c

080110e4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80110e8:	4802      	ldr	r0, [pc, #8]	; (80110f4 <MX_USB_HOST_Process+0x10>)
 80110ea:	f7fb f9bb 	bl	800c464 <USBH_Process>
}
 80110ee:	bf00      	nop
 80110f0:	bd80      	pop	{r7, pc}
 80110f2:	bf00      	nop
 80110f4:	200024ec 	.word	0x200024ec

080110f8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80110f8:	b480      	push	{r7}
 80110fa:	b083      	sub	sp, #12
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
 8011100:	460b      	mov	r3, r1
 8011102:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8011104:	78fb      	ldrb	r3, [r7, #3]
 8011106:	3b01      	subs	r3, #1
 8011108:	2b04      	cmp	r3, #4
 801110a:	d819      	bhi.n	8011140 <USBH_UserProcess+0x48>
 801110c:	a201      	add	r2, pc, #4	; (adr r2, 8011114 <USBH_UserProcess+0x1c>)
 801110e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011112:	bf00      	nop
 8011114:	08011141 	.word	0x08011141
 8011118:	08011131 	.word	0x08011131
 801111c:	08011141 	.word	0x08011141
 8011120:	08011139 	.word	0x08011139
 8011124:	08011129 	.word	0x08011129
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011128:	4b09      	ldr	r3, [pc, #36]	; (8011150 <USBH_UserProcess+0x58>)
 801112a:	2203      	movs	r2, #3
 801112c:	701a      	strb	r2, [r3, #0]
  break;
 801112e:	e008      	b.n	8011142 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8011130:	4b07      	ldr	r3, [pc, #28]	; (8011150 <USBH_UserProcess+0x58>)
 8011132:	2202      	movs	r2, #2
 8011134:	701a      	strb	r2, [r3, #0]
  break;
 8011136:	e004      	b.n	8011142 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011138:	4b05      	ldr	r3, [pc, #20]	; (8011150 <USBH_UserProcess+0x58>)
 801113a:	2201      	movs	r2, #1
 801113c:	701a      	strb	r2, [r3, #0]
  break;
 801113e:	e000      	b.n	8011142 <USBH_UserProcess+0x4a>

  default:
  break;
 8011140:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8011142:	bf00      	nop
 8011144:	370c      	adds	r7, #12
 8011146:	46bd      	mov	sp, r7
 8011148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114c:	4770      	bx	lr
 801114e:	bf00      	nop
 8011150:	200028c4 	.word	0x200028c4

08011154 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b08a      	sub	sp, #40	; 0x28
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801115c:	f107 0314 	add.w	r3, r7, #20
 8011160:	2200      	movs	r2, #0
 8011162:	601a      	str	r2, [r3, #0]
 8011164:	605a      	str	r2, [r3, #4]
 8011166:	609a      	str	r2, [r3, #8]
 8011168:	60da      	str	r2, [r3, #12]
 801116a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011174:	d147      	bne.n	8011206 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011176:	2300      	movs	r3, #0
 8011178:	613b      	str	r3, [r7, #16]
 801117a:	4b25      	ldr	r3, [pc, #148]	; (8011210 <HAL_HCD_MspInit+0xbc>)
 801117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801117e:	4a24      	ldr	r2, [pc, #144]	; (8011210 <HAL_HCD_MspInit+0xbc>)
 8011180:	f043 0301 	orr.w	r3, r3, #1
 8011184:	6313      	str	r3, [r2, #48]	; 0x30
 8011186:	4b22      	ldr	r3, [pc, #136]	; (8011210 <HAL_HCD_MspInit+0xbc>)
 8011188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801118a:	f003 0301 	and.w	r3, r3, #1
 801118e:	613b      	str	r3, [r7, #16]
 8011190:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8011192:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011198:	2300      	movs	r3, #0
 801119a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801119c:	2300      	movs	r3, #0
 801119e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80111a0:	f107 0314 	add.w	r3, r7, #20
 80111a4:	4619      	mov	r1, r3
 80111a6:	481b      	ldr	r0, [pc, #108]	; (8011214 <HAL_HCD_MspInit+0xc0>)
 80111a8:	f7f2 fbec 	bl	8003984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80111ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80111b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80111b2:	2302      	movs	r3, #2
 80111b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80111b6:	2300      	movs	r3, #0
 80111b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80111ba:	2303      	movs	r3, #3
 80111bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80111be:	230a      	movs	r3, #10
 80111c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80111c2:	f107 0314 	add.w	r3, r7, #20
 80111c6:	4619      	mov	r1, r3
 80111c8:	4812      	ldr	r0, [pc, #72]	; (8011214 <HAL_HCD_MspInit+0xc0>)
 80111ca:	f7f2 fbdb 	bl	8003984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80111ce:	4b10      	ldr	r3, [pc, #64]	; (8011210 <HAL_HCD_MspInit+0xbc>)
 80111d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111d2:	4a0f      	ldr	r2, [pc, #60]	; (8011210 <HAL_HCD_MspInit+0xbc>)
 80111d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111d8:	6353      	str	r3, [r2, #52]	; 0x34
 80111da:	2300      	movs	r3, #0
 80111dc:	60fb      	str	r3, [r7, #12]
 80111de:	4b0c      	ldr	r3, [pc, #48]	; (8011210 <HAL_HCD_MspInit+0xbc>)
 80111e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111e2:	4a0b      	ldr	r2, [pc, #44]	; (8011210 <HAL_HCD_MspInit+0xbc>)
 80111e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80111e8:	6453      	str	r3, [r2, #68]	; 0x44
 80111ea:	4b09      	ldr	r3, [pc, #36]	; (8011210 <HAL_HCD_MspInit+0xbc>)
 80111ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80111f2:	60fb      	str	r3, [r7, #12]
 80111f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80111f6:	2200      	movs	r2, #0
 80111f8:	2100      	movs	r1, #0
 80111fa:	2043      	movs	r0, #67	; 0x43
 80111fc:	f7f1 ff2b 	bl	8003056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011200:	2043      	movs	r0, #67	; 0x43
 8011202:	f7f1 ff44 	bl	800308e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011206:	bf00      	nop
 8011208:	3728      	adds	r7, #40	; 0x28
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}
 801120e:	bf00      	nop
 8011210:	40023800 	.word	0x40023800
 8011214:	40020000 	.word	0x40020000

08011218 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011226:	4618      	mov	r0, r3
 8011228:	f7fb fcfb 	bl	800cc22 <USBH_LL_IncTimer>
}
 801122c:	bf00      	nop
 801122e:	3708      	adds	r7, #8
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}

08011234 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b082      	sub	sp, #8
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011242:	4618      	mov	r0, r3
 8011244:	f7fb fd33 	bl	800ccae <USBH_LL_Connect>
}
 8011248:	bf00      	nop
 801124a:	3708      	adds	r7, #8
 801124c:	46bd      	mov	sp, r7
 801124e:	bd80      	pop	{r7, pc}

08011250 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b082      	sub	sp, #8
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801125e:	4618      	mov	r0, r3
 8011260:	f7fb fd3c 	bl	800ccdc <USBH_LL_Disconnect>
}
 8011264:	bf00      	nop
 8011266:	3708      	adds	r7, #8
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}

0801126c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801126c:	b480      	push	{r7}
 801126e:	b083      	sub	sp, #12
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	460b      	mov	r3, r1
 8011276:	70fb      	strb	r3, [r7, #3]
 8011278:	4613      	mov	r3, r2
 801127a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801127c:	bf00      	nop
 801127e:	370c      	adds	r7, #12
 8011280:	46bd      	mov	sp, r7
 8011282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011286:	4770      	bx	lr

08011288 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b082      	sub	sp, #8
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011296:	4618      	mov	r0, r3
 8011298:	f7fb fced 	bl	800cc76 <USBH_LL_PortEnabled>
}
 801129c:	bf00      	nop
 801129e:	3708      	adds	r7, #8
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}

080112a4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b082      	sub	sp, #8
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80112b2:	4618      	mov	r0, r3
 80112b4:	f7fb fced 	bl	800cc92 <USBH_LL_PortDisabled>
}
 80112b8:	bf00      	nop
 80112ba:	3708      	adds	r7, #8
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}

080112c0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b082      	sub	sp, #8
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80112ce:	2b01      	cmp	r3, #1
 80112d0:	d12a      	bne.n	8011328 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80112d2:	4a18      	ldr	r2, [pc, #96]	; (8011334 <USBH_LL_Init+0x74>)
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	4a15      	ldr	r2, [pc, #84]	; (8011334 <USBH_LL_Init+0x74>)
 80112de:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80112e2:	4b14      	ldr	r3, [pc, #80]	; (8011334 <USBH_LL_Init+0x74>)
 80112e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80112e8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80112ea:	4b12      	ldr	r3, [pc, #72]	; (8011334 <USBH_LL_Init+0x74>)
 80112ec:	2208      	movs	r2, #8
 80112ee:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80112f0:	4b10      	ldr	r3, [pc, #64]	; (8011334 <USBH_LL_Init+0x74>)
 80112f2:	2201      	movs	r2, #1
 80112f4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80112f6:	4b0f      	ldr	r3, [pc, #60]	; (8011334 <USBH_LL_Init+0x74>)
 80112f8:	2200      	movs	r2, #0
 80112fa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80112fc:	4b0d      	ldr	r3, [pc, #52]	; (8011334 <USBH_LL_Init+0x74>)
 80112fe:	2202      	movs	r2, #2
 8011300:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011302:	4b0c      	ldr	r3, [pc, #48]	; (8011334 <USBH_LL_Init+0x74>)
 8011304:	2200      	movs	r2, #0
 8011306:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8011308:	480a      	ldr	r0, [pc, #40]	; (8011334 <USBH_LL_Init+0x74>)
 801130a:	f7f2 fdd5 	bl	8003eb8 <HAL_HCD_Init>
 801130e:	4603      	mov	r3, r0
 8011310:	2b00      	cmp	r3, #0
 8011312:	d001      	beq.n	8011318 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8011314:	f7f0 fe34 	bl	8001f80 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8011318:	4806      	ldr	r0, [pc, #24]	; (8011334 <USBH_LL_Init+0x74>)
 801131a:	f7f3 f9b8 	bl	800468e <HAL_HCD_GetCurrentFrame>
 801131e:	4603      	mov	r3, r0
 8011320:	4619      	mov	r1, r3
 8011322:	6878      	ldr	r0, [r7, #4]
 8011324:	f7fb fc6e 	bl	800cc04 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011328:	2300      	movs	r3, #0
}
 801132a:	4618      	mov	r0, r3
 801132c:	3708      	adds	r7, #8
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}
 8011332:	bf00      	nop
 8011334:	200028c8 	.word	0x200028c8

08011338 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b084      	sub	sp, #16
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011340:	2300      	movs	r3, #0
 8011342:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011344:	2300      	movs	r3, #0
 8011346:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801134e:	4618      	mov	r0, r3
 8011350:	f7f3 f927 	bl	80045a2 <HAL_HCD_Start>
 8011354:	4603      	mov	r3, r0
 8011356:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011358:	7bfb      	ldrb	r3, [r7, #15]
 801135a:	4618      	mov	r0, r3
 801135c:	f000 f98c 	bl	8011678 <USBH_Get_USB_Status>
 8011360:	4603      	mov	r3, r0
 8011362:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011364:	7bbb      	ldrb	r3, [r7, #14]
}
 8011366:	4618      	mov	r0, r3
 8011368:	3710      	adds	r7, #16
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}

0801136e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801136e:	b580      	push	{r7, lr}
 8011370:	b084      	sub	sp, #16
 8011372:	af00      	add	r7, sp, #0
 8011374:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011376:	2300      	movs	r3, #0
 8011378:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801137a:	2300      	movs	r3, #0
 801137c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011384:	4618      	mov	r0, r3
 8011386:	f7f3 f92f 	bl	80045e8 <HAL_HCD_Stop>
 801138a:	4603      	mov	r3, r0
 801138c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801138e:	7bfb      	ldrb	r3, [r7, #15]
 8011390:	4618      	mov	r0, r3
 8011392:	f000 f971 	bl	8011678 <USBH_Get_USB_Status>
 8011396:	4603      	mov	r3, r0
 8011398:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801139a:	7bbb      	ldrb	r3, [r7, #14]
}
 801139c:	4618      	mov	r0, r3
 801139e:	3710      	adds	r7, #16
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}

080113a4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b084      	sub	sp, #16
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80113ac:	2301      	movs	r3, #1
 80113ae:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7f3 f977 	bl	80046aa <HAL_HCD_GetCurrentSpeed>
 80113bc:	4603      	mov	r3, r0
 80113be:	2b02      	cmp	r3, #2
 80113c0:	d00c      	beq.n	80113dc <USBH_LL_GetSpeed+0x38>
 80113c2:	2b02      	cmp	r3, #2
 80113c4:	d80d      	bhi.n	80113e2 <USBH_LL_GetSpeed+0x3e>
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d002      	beq.n	80113d0 <USBH_LL_GetSpeed+0x2c>
 80113ca:	2b01      	cmp	r3, #1
 80113cc:	d003      	beq.n	80113d6 <USBH_LL_GetSpeed+0x32>
 80113ce:	e008      	b.n	80113e2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80113d0:	2300      	movs	r3, #0
 80113d2:	73fb      	strb	r3, [r7, #15]
    break;
 80113d4:	e008      	b.n	80113e8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80113d6:	2301      	movs	r3, #1
 80113d8:	73fb      	strb	r3, [r7, #15]
    break;
 80113da:	e005      	b.n	80113e8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80113dc:	2302      	movs	r3, #2
 80113de:	73fb      	strb	r3, [r7, #15]
    break;
 80113e0:	e002      	b.n	80113e8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80113e2:	2301      	movs	r3, #1
 80113e4:	73fb      	strb	r3, [r7, #15]
    break;
 80113e6:	bf00      	nop
  }
  return  speed;
 80113e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80113ea:	4618      	mov	r0, r3
 80113ec:	3710      	adds	r7, #16
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}

080113f2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80113f2:	b580      	push	{r7, lr}
 80113f4:	b084      	sub	sp, #16
 80113f6:	af00      	add	r7, sp, #0
 80113f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113fa:	2300      	movs	r3, #0
 80113fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80113fe:	2300      	movs	r3, #0
 8011400:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011408:	4618      	mov	r0, r3
 801140a:	f7f3 f90a 	bl	8004622 <HAL_HCD_ResetPort>
 801140e:	4603      	mov	r3, r0
 8011410:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011412:	7bfb      	ldrb	r3, [r7, #15]
 8011414:	4618      	mov	r0, r3
 8011416:	f000 f92f 	bl	8011678 <USBH_Get_USB_Status>
 801141a:	4603      	mov	r3, r0
 801141c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801141e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011420:	4618      	mov	r0, r3
 8011422:	3710      	adds	r7, #16
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}

08011428 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b082      	sub	sp, #8
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
 8011430:	460b      	mov	r3, r1
 8011432:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801143a:	78fa      	ldrb	r2, [r7, #3]
 801143c:	4611      	mov	r1, r2
 801143e:	4618      	mov	r0, r3
 8011440:	f7f3 f911 	bl	8004666 <HAL_HCD_HC_GetXferCount>
 8011444:	4603      	mov	r3, r0
}
 8011446:	4618      	mov	r0, r3
 8011448:	3708      	adds	r7, #8
 801144a:	46bd      	mov	sp, r7
 801144c:	bd80      	pop	{r7, pc}

0801144e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801144e:	b590      	push	{r4, r7, lr}
 8011450:	b089      	sub	sp, #36	; 0x24
 8011452:	af04      	add	r7, sp, #16
 8011454:	6078      	str	r0, [r7, #4]
 8011456:	4608      	mov	r0, r1
 8011458:	4611      	mov	r1, r2
 801145a:	461a      	mov	r2, r3
 801145c:	4603      	mov	r3, r0
 801145e:	70fb      	strb	r3, [r7, #3]
 8011460:	460b      	mov	r3, r1
 8011462:	70bb      	strb	r3, [r7, #2]
 8011464:	4613      	mov	r3, r2
 8011466:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011468:	2300      	movs	r3, #0
 801146a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801146c:	2300      	movs	r3, #0
 801146e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011476:	787c      	ldrb	r4, [r7, #1]
 8011478:	78ba      	ldrb	r2, [r7, #2]
 801147a:	78f9      	ldrb	r1, [r7, #3]
 801147c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801147e:	9302      	str	r3, [sp, #8]
 8011480:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011484:	9301      	str	r3, [sp, #4]
 8011486:	f897 3020 	ldrb.w	r3, [r7, #32]
 801148a:	9300      	str	r3, [sp, #0]
 801148c:	4623      	mov	r3, r4
 801148e:	f7f2 fd75 	bl	8003f7c <HAL_HCD_HC_Init>
 8011492:	4603      	mov	r3, r0
 8011494:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011496:	7bfb      	ldrb	r3, [r7, #15]
 8011498:	4618      	mov	r0, r3
 801149a:	f000 f8ed 	bl	8011678 <USBH_Get_USB_Status>
 801149e:	4603      	mov	r3, r0
 80114a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3714      	adds	r7, #20
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd90      	pop	{r4, r7, pc}

080114ac <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b084      	sub	sp, #16
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	460b      	mov	r3, r1
 80114b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114b8:	2300      	movs	r3, #0
 80114ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80114bc:	2300      	movs	r3, #0
 80114be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80114c6:	78fa      	ldrb	r2, [r7, #3]
 80114c8:	4611      	mov	r1, r2
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7f2 fde5 	bl	800409a <HAL_HCD_HC_Halt>
 80114d0:	4603      	mov	r3, r0
 80114d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80114d4:	7bfb      	ldrb	r3, [r7, #15]
 80114d6:	4618      	mov	r0, r3
 80114d8:	f000 f8ce 	bl	8011678 <USBH_Get_USB_Status>
 80114dc:	4603      	mov	r3, r0
 80114de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80114e2:	4618      	mov	r0, r3
 80114e4:	3710      	adds	r7, #16
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bd80      	pop	{r7, pc}

080114ea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80114ea:	b590      	push	{r4, r7, lr}
 80114ec:	b089      	sub	sp, #36	; 0x24
 80114ee:	af04      	add	r7, sp, #16
 80114f0:	6078      	str	r0, [r7, #4]
 80114f2:	4608      	mov	r0, r1
 80114f4:	4611      	mov	r1, r2
 80114f6:	461a      	mov	r2, r3
 80114f8:	4603      	mov	r3, r0
 80114fa:	70fb      	strb	r3, [r7, #3]
 80114fc:	460b      	mov	r3, r1
 80114fe:	70bb      	strb	r3, [r7, #2]
 8011500:	4613      	mov	r3, r2
 8011502:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011504:	2300      	movs	r3, #0
 8011506:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011508:	2300      	movs	r3, #0
 801150a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011512:	787c      	ldrb	r4, [r7, #1]
 8011514:	78ba      	ldrb	r2, [r7, #2]
 8011516:	78f9      	ldrb	r1, [r7, #3]
 8011518:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801151c:	9303      	str	r3, [sp, #12]
 801151e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011520:	9302      	str	r3, [sp, #8]
 8011522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011524:	9301      	str	r3, [sp, #4]
 8011526:	f897 3020 	ldrb.w	r3, [r7, #32]
 801152a:	9300      	str	r3, [sp, #0]
 801152c:	4623      	mov	r3, r4
 801152e:	f7f2 fdd7 	bl	80040e0 <HAL_HCD_HC_SubmitRequest>
 8011532:	4603      	mov	r3, r0
 8011534:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011536:	7bfb      	ldrb	r3, [r7, #15]
 8011538:	4618      	mov	r0, r3
 801153a:	f000 f89d 	bl	8011678 <USBH_Get_USB_Status>
 801153e:	4603      	mov	r3, r0
 8011540:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011542:	7bbb      	ldrb	r3, [r7, #14]
}
 8011544:	4618      	mov	r0, r3
 8011546:	3714      	adds	r7, #20
 8011548:	46bd      	mov	sp, r7
 801154a:	bd90      	pop	{r4, r7, pc}

0801154c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b082      	sub	sp, #8
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
 8011554:	460b      	mov	r3, r1
 8011556:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801155e:	78fa      	ldrb	r2, [r7, #3]
 8011560:	4611      	mov	r1, r2
 8011562:	4618      	mov	r0, r3
 8011564:	f7f3 f86b 	bl	800463e <HAL_HCD_HC_GetURBState>
 8011568:	4603      	mov	r3, r0
}
 801156a:	4618      	mov	r0, r3
 801156c:	3708      	adds	r7, #8
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}

08011572 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8011572:	b580      	push	{r7, lr}
 8011574:	b082      	sub	sp, #8
 8011576:	af00      	add	r7, sp, #0
 8011578:	6078      	str	r0, [r7, #4]
 801157a:	460b      	mov	r3, r1
 801157c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011584:	2b01      	cmp	r3, #1
 8011586:	d103      	bne.n	8011590 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011588:	78fb      	ldrb	r3, [r7, #3]
 801158a:	4618      	mov	r0, r3
 801158c:	f000 f8a0 	bl	80116d0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011590:	20c8      	movs	r0, #200	; 0xc8
 8011592:	f7f1 fc61 	bl	8002e58 <HAL_Delay>
  return USBH_OK;
 8011596:	2300      	movs	r3, #0
}
 8011598:	4618      	mov	r0, r3
 801159a:	3708      	adds	r7, #8
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}

080115a0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80115a0:	b480      	push	{r7}
 80115a2:	b085      	sub	sp, #20
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
 80115a8:	460b      	mov	r3, r1
 80115aa:	70fb      	strb	r3, [r7, #3]
 80115ac:	4613      	mov	r3, r2
 80115ae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80115b6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80115b8:	78fb      	ldrb	r3, [r7, #3]
 80115ba:	68fa      	ldr	r2, [r7, #12]
 80115bc:	212c      	movs	r1, #44	; 0x2c
 80115be:	fb01 f303 	mul.w	r3, r1, r3
 80115c2:	4413      	add	r3, r2
 80115c4:	333b      	adds	r3, #59	; 0x3b
 80115c6:	781b      	ldrb	r3, [r3, #0]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d009      	beq.n	80115e0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80115cc:	78fb      	ldrb	r3, [r7, #3]
 80115ce:	68fa      	ldr	r2, [r7, #12]
 80115d0:	212c      	movs	r1, #44	; 0x2c
 80115d2:	fb01 f303 	mul.w	r3, r1, r3
 80115d6:	4413      	add	r3, r2
 80115d8:	3354      	adds	r3, #84	; 0x54
 80115da:	78ba      	ldrb	r2, [r7, #2]
 80115dc:	701a      	strb	r2, [r3, #0]
 80115de:	e008      	b.n	80115f2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80115e0:	78fb      	ldrb	r3, [r7, #3]
 80115e2:	68fa      	ldr	r2, [r7, #12]
 80115e4:	212c      	movs	r1, #44	; 0x2c
 80115e6:	fb01 f303 	mul.w	r3, r1, r3
 80115ea:	4413      	add	r3, r2
 80115ec:	3355      	adds	r3, #85	; 0x55
 80115ee:	78ba      	ldrb	r2, [r7, #2]
 80115f0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80115f2:	2300      	movs	r3, #0
}
 80115f4:	4618      	mov	r0, r3
 80115f6:	3714      	adds	r7, #20
 80115f8:	46bd      	mov	sp, r7
 80115fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fe:	4770      	bx	lr

08011600 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011600:	b480      	push	{r7}
 8011602:	b085      	sub	sp, #20
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
 8011608:	460b      	mov	r3, r1
 801160a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801160c:	2300      	movs	r3, #0
 801160e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011616:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8011618:	78fb      	ldrb	r3, [r7, #3]
 801161a:	68ba      	ldr	r2, [r7, #8]
 801161c:	212c      	movs	r1, #44	; 0x2c
 801161e:	fb01 f303 	mul.w	r3, r1, r3
 8011622:	4413      	add	r3, r2
 8011624:	333b      	adds	r3, #59	; 0x3b
 8011626:	781b      	ldrb	r3, [r3, #0]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d009      	beq.n	8011640 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801162c:	78fb      	ldrb	r3, [r7, #3]
 801162e:	68ba      	ldr	r2, [r7, #8]
 8011630:	212c      	movs	r1, #44	; 0x2c
 8011632:	fb01 f303 	mul.w	r3, r1, r3
 8011636:	4413      	add	r3, r2
 8011638:	3354      	adds	r3, #84	; 0x54
 801163a:	781b      	ldrb	r3, [r3, #0]
 801163c:	73fb      	strb	r3, [r7, #15]
 801163e:	e008      	b.n	8011652 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8011640:	78fb      	ldrb	r3, [r7, #3]
 8011642:	68ba      	ldr	r2, [r7, #8]
 8011644:	212c      	movs	r1, #44	; 0x2c
 8011646:	fb01 f303 	mul.w	r3, r1, r3
 801164a:	4413      	add	r3, r2
 801164c:	3355      	adds	r3, #85	; 0x55
 801164e:	781b      	ldrb	r3, [r3, #0]
 8011650:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8011652:	7bfb      	ldrb	r3, [r7, #15]
}
 8011654:	4618      	mov	r0, r3
 8011656:	3714      	adds	r7, #20
 8011658:	46bd      	mov	sp, r7
 801165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165e:	4770      	bx	lr

08011660 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b082      	sub	sp, #8
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011668:	6878      	ldr	r0, [r7, #4]
 801166a:	f7f1 fbf5 	bl	8002e58 <HAL_Delay>
}
 801166e:	bf00      	nop
 8011670:	3708      	adds	r7, #8
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}
	...

08011678 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011678:	b480      	push	{r7}
 801167a:	b085      	sub	sp, #20
 801167c:	af00      	add	r7, sp, #0
 801167e:	4603      	mov	r3, r0
 8011680:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011682:	2300      	movs	r3, #0
 8011684:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011686:	79fb      	ldrb	r3, [r7, #7]
 8011688:	2b03      	cmp	r3, #3
 801168a:	d817      	bhi.n	80116bc <USBH_Get_USB_Status+0x44>
 801168c:	a201      	add	r2, pc, #4	; (adr r2, 8011694 <USBH_Get_USB_Status+0x1c>)
 801168e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011692:	bf00      	nop
 8011694:	080116a5 	.word	0x080116a5
 8011698:	080116ab 	.word	0x080116ab
 801169c:	080116b1 	.word	0x080116b1
 80116a0:	080116b7 	.word	0x080116b7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80116a4:	2300      	movs	r3, #0
 80116a6:	73fb      	strb	r3, [r7, #15]
    break;
 80116a8:	e00b      	b.n	80116c2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80116aa:	2302      	movs	r3, #2
 80116ac:	73fb      	strb	r3, [r7, #15]
    break;
 80116ae:	e008      	b.n	80116c2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80116b0:	2301      	movs	r3, #1
 80116b2:	73fb      	strb	r3, [r7, #15]
    break;
 80116b4:	e005      	b.n	80116c2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80116b6:	2302      	movs	r3, #2
 80116b8:	73fb      	strb	r3, [r7, #15]
    break;
 80116ba:	e002      	b.n	80116c2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80116bc:	2302      	movs	r3, #2
 80116be:	73fb      	strb	r3, [r7, #15]
    break;
 80116c0:	bf00      	nop
  }
  return usb_status;
 80116c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	3714      	adds	r7, #20
 80116c8:	46bd      	mov	sp, r7
 80116ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ce:	4770      	bx	lr

080116d0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b084      	sub	sp, #16
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	4603      	mov	r3, r0
 80116d8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80116da:	79fb      	ldrb	r3, [r7, #7]
 80116dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80116de:	79fb      	ldrb	r3, [r7, #7]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d102      	bne.n	80116ea <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80116e4:	2301      	movs	r3, #1
 80116e6:	73fb      	strb	r3, [r7, #15]
 80116e8:	e001      	b.n	80116ee <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80116ea:	2300      	movs	r3, #0
 80116ec:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80116ee:	7bfb      	ldrb	r3, [r7, #15]
 80116f0:	461a      	mov	r2, r3
 80116f2:	2101      	movs	r1, #1
 80116f4:	4803      	ldr	r0, [pc, #12]	; (8011704 <MX_DriverVbusFS+0x34>)
 80116f6:	f7f2 fbad 	bl	8003e54 <HAL_GPIO_WritePin>
}
 80116fa:	bf00      	nop
 80116fc:	3710      	adds	r7, #16
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop
 8011704:	40020800 	.word	0x40020800

08011708 <malloc>:
 8011708:	4b02      	ldr	r3, [pc, #8]	; (8011714 <malloc+0xc>)
 801170a:	4601      	mov	r1, r0
 801170c:	6818      	ldr	r0, [r3, #0]
 801170e:	f000 b82b 	b.w	8011768 <_malloc_r>
 8011712:	bf00      	nop
 8011714:	200000f8 	.word	0x200000f8

08011718 <free>:
 8011718:	4b02      	ldr	r3, [pc, #8]	; (8011724 <free+0xc>)
 801171a:	4601      	mov	r1, r0
 801171c:	6818      	ldr	r0, [r3, #0]
 801171e:	f000 b92b 	b.w	8011978 <_free_r>
 8011722:	bf00      	nop
 8011724:	200000f8 	.word	0x200000f8

08011728 <sbrk_aligned>:
 8011728:	b570      	push	{r4, r5, r6, lr}
 801172a:	4e0e      	ldr	r6, [pc, #56]	; (8011764 <sbrk_aligned+0x3c>)
 801172c:	460c      	mov	r4, r1
 801172e:	6831      	ldr	r1, [r6, #0]
 8011730:	4605      	mov	r5, r0
 8011732:	b911      	cbnz	r1, 801173a <sbrk_aligned+0x12>
 8011734:	f000 f8d6 	bl	80118e4 <_sbrk_r>
 8011738:	6030      	str	r0, [r6, #0]
 801173a:	4621      	mov	r1, r4
 801173c:	4628      	mov	r0, r5
 801173e:	f000 f8d1 	bl	80118e4 <_sbrk_r>
 8011742:	1c43      	adds	r3, r0, #1
 8011744:	d00a      	beq.n	801175c <sbrk_aligned+0x34>
 8011746:	1cc4      	adds	r4, r0, #3
 8011748:	f024 0403 	bic.w	r4, r4, #3
 801174c:	42a0      	cmp	r0, r4
 801174e:	d007      	beq.n	8011760 <sbrk_aligned+0x38>
 8011750:	1a21      	subs	r1, r4, r0
 8011752:	4628      	mov	r0, r5
 8011754:	f000 f8c6 	bl	80118e4 <_sbrk_r>
 8011758:	3001      	adds	r0, #1
 801175a:	d101      	bne.n	8011760 <sbrk_aligned+0x38>
 801175c:	f04f 34ff 	mov.w	r4, #4294967295
 8011760:	4620      	mov	r0, r4
 8011762:	bd70      	pop	{r4, r5, r6, pc}
 8011764:	20002bd0 	.word	0x20002bd0

08011768 <_malloc_r>:
 8011768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801176c:	1ccd      	adds	r5, r1, #3
 801176e:	f025 0503 	bic.w	r5, r5, #3
 8011772:	3508      	adds	r5, #8
 8011774:	2d0c      	cmp	r5, #12
 8011776:	bf38      	it	cc
 8011778:	250c      	movcc	r5, #12
 801177a:	2d00      	cmp	r5, #0
 801177c:	4607      	mov	r7, r0
 801177e:	db01      	blt.n	8011784 <_malloc_r+0x1c>
 8011780:	42a9      	cmp	r1, r5
 8011782:	d905      	bls.n	8011790 <_malloc_r+0x28>
 8011784:	230c      	movs	r3, #12
 8011786:	603b      	str	r3, [r7, #0]
 8011788:	2600      	movs	r6, #0
 801178a:	4630      	mov	r0, r6
 801178c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011790:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011864 <_malloc_r+0xfc>
 8011794:	f000 f868 	bl	8011868 <__malloc_lock>
 8011798:	f8d8 3000 	ldr.w	r3, [r8]
 801179c:	461c      	mov	r4, r3
 801179e:	bb5c      	cbnz	r4, 80117f8 <_malloc_r+0x90>
 80117a0:	4629      	mov	r1, r5
 80117a2:	4638      	mov	r0, r7
 80117a4:	f7ff ffc0 	bl	8011728 <sbrk_aligned>
 80117a8:	1c43      	adds	r3, r0, #1
 80117aa:	4604      	mov	r4, r0
 80117ac:	d155      	bne.n	801185a <_malloc_r+0xf2>
 80117ae:	f8d8 4000 	ldr.w	r4, [r8]
 80117b2:	4626      	mov	r6, r4
 80117b4:	2e00      	cmp	r6, #0
 80117b6:	d145      	bne.n	8011844 <_malloc_r+0xdc>
 80117b8:	2c00      	cmp	r4, #0
 80117ba:	d048      	beq.n	801184e <_malloc_r+0xe6>
 80117bc:	6823      	ldr	r3, [r4, #0]
 80117be:	4631      	mov	r1, r6
 80117c0:	4638      	mov	r0, r7
 80117c2:	eb04 0903 	add.w	r9, r4, r3
 80117c6:	f000 f88d 	bl	80118e4 <_sbrk_r>
 80117ca:	4581      	cmp	r9, r0
 80117cc:	d13f      	bne.n	801184e <_malloc_r+0xe6>
 80117ce:	6821      	ldr	r1, [r4, #0]
 80117d0:	1a6d      	subs	r5, r5, r1
 80117d2:	4629      	mov	r1, r5
 80117d4:	4638      	mov	r0, r7
 80117d6:	f7ff ffa7 	bl	8011728 <sbrk_aligned>
 80117da:	3001      	adds	r0, #1
 80117dc:	d037      	beq.n	801184e <_malloc_r+0xe6>
 80117de:	6823      	ldr	r3, [r4, #0]
 80117e0:	442b      	add	r3, r5
 80117e2:	6023      	str	r3, [r4, #0]
 80117e4:	f8d8 3000 	ldr.w	r3, [r8]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d038      	beq.n	801185e <_malloc_r+0xf6>
 80117ec:	685a      	ldr	r2, [r3, #4]
 80117ee:	42a2      	cmp	r2, r4
 80117f0:	d12b      	bne.n	801184a <_malloc_r+0xe2>
 80117f2:	2200      	movs	r2, #0
 80117f4:	605a      	str	r2, [r3, #4]
 80117f6:	e00f      	b.n	8011818 <_malloc_r+0xb0>
 80117f8:	6822      	ldr	r2, [r4, #0]
 80117fa:	1b52      	subs	r2, r2, r5
 80117fc:	d41f      	bmi.n	801183e <_malloc_r+0xd6>
 80117fe:	2a0b      	cmp	r2, #11
 8011800:	d917      	bls.n	8011832 <_malloc_r+0xca>
 8011802:	1961      	adds	r1, r4, r5
 8011804:	42a3      	cmp	r3, r4
 8011806:	6025      	str	r5, [r4, #0]
 8011808:	bf18      	it	ne
 801180a:	6059      	strne	r1, [r3, #4]
 801180c:	6863      	ldr	r3, [r4, #4]
 801180e:	bf08      	it	eq
 8011810:	f8c8 1000 	streq.w	r1, [r8]
 8011814:	5162      	str	r2, [r4, r5]
 8011816:	604b      	str	r3, [r1, #4]
 8011818:	4638      	mov	r0, r7
 801181a:	f104 060b 	add.w	r6, r4, #11
 801181e:	f000 f829 	bl	8011874 <__malloc_unlock>
 8011822:	f026 0607 	bic.w	r6, r6, #7
 8011826:	1d23      	adds	r3, r4, #4
 8011828:	1af2      	subs	r2, r6, r3
 801182a:	d0ae      	beq.n	801178a <_malloc_r+0x22>
 801182c:	1b9b      	subs	r3, r3, r6
 801182e:	50a3      	str	r3, [r4, r2]
 8011830:	e7ab      	b.n	801178a <_malloc_r+0x22>
 8011832:	42a3      	cmp	r3, r4
 8011834:	6862      	ldr	r2, [r4, #4]
 8011836:	d1dd      	bne.n	80117f4 <_malloc_r+0x8c>
 8011838:	f8c8 2000 	str.w	r2, [r8]
 801183c:	e7ec      	b.n	8011818 <_malloc_r+0xb0>
 801183e:	4623      	mov	r3, r4
 8011840:	6864      	ldr	r4, [r4, #4]
 8011842:	e7ac      	b.n	801179e <_malloc_r+0x36>
 8011844:	4634      	mov	r4, r6
 8011846:	6876      	ldr	r6, [r6, #4]
 8011848:	e7b4      	b.n	80117b4 <_malloc_r+0x4c>
 801184a:	4613      	mov	r3, r2
 801184c:	e7cc      	b.n	80117e8 <_malloc_r+0x80>
 801184e:	230c      	movs	r3, #12
 8011850:	603b      	str	r3, [r7, #0]
 8011852:	4638      	mov	r0, r7
 8011854:	f000 f80e 	bl	8011874 <__malloc_unlock>
 8011858:	e797      	b.n	801178a <_malloc_r+0x22>
 801185a:	6025      	str	r5, [r4, #0]
 801185c:	e7dc      	b.n	8011818 <_malloc_r+0xb0>
 801185e:	605b      	str	r3, [r3, #4]
 8011860:	deff      	udf	#255	; 0xff
 8011862:	bf00      	nop
 8011864:	20002bcc 	.word	0x20002bcc

08011868 <__malloc_lock>:
 8011868:	4801      	ldr	r0, [pc, #4]	; (8011870 <__malloc_lock+0x8>)
 801186a:	f000 b875 	b.w	8011958 <__retarget_lock_acquire_recursive>
 801186e:	bf00      	nop
 8011870:	20002d10 	.word	0x20002d10

08011874 <__malloc_unlock>:
 8011874:	4801      	ldr	r0, [pc, #4]	; (801187c <__malloc_unlock+0x8>)
 8011876:	f000 b870 	b.w	801195a <__retarget_lock_release_recursive>
 801187a:	bf00      	nop
 801187c:	20002d10 	.word	0x20002d10

08011880 <memset>:
 8011880:	4402      	add	r2, r0
 8011882:	4603      	mov	r3, r0
 8011884:	4293      	cmp	r3, r2
 8011886:	d100      	bne.n	801188a <memset+0xa>
 8011888:	4770      	bx	lr
 801188a:	f803 1b01 	strb.w	r1, [r3], #1
 801188e:	e7f9      	b.n	8011884 <memset+0x4>

08011890 <strncpy>:
 8011890:	b510      	push	{r4, lr}
 8011892:	3901      	subs	r1, #1
 8011894:	4603      	mov	r3, r0
 8011896:	b132      	cbz	r2, 80118a6 <strncpy+0x16>
 8011898:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801189c:	f803 4b01 	strb.w	r4, [r3], #1
 80118a0:	3a01      	subs	r2, #1
 80118a2:	2c00      	cmp	r4, #0
 80118a4:	d1f7      	bne.n	8011896 <strncpy+0x6>
 80118a6:	441a      	add	r2, r3
 80118a8:	2100      	movs	r1, #0
 80118aa:	4293      	cmp	r3, r2
 80118ac:	d100      	bne.n	80118b0 <strncpy+0x20>
 80118ae:	bd10      	pop	{r4, pc}
 80118b0:	f803 1b01 	strb.w	r1, [r3], #1
 80118b4:	e7f9      	b.n	80118aa <strncpy+0x1a>

080118b6 <strstr>:
 80118b6:	780a      	ldrb	r2, [r1, #0]
 80118b8:	b570      	push	{r4, r5, r6, lr}
 80118ba:	b96a      	cbnz	r2, 80118d8 <strstr+0x22>
 80118bc:	bd70      	pop	{r4, r5, r6, pc}
 80118be:	429a      	cmp	r2, r3
 80118c0:	d109      	bne.n	80118d6 <strstr+0x20>
 80118c2:	460c      	mov	r4, r1
 80118c4:	4605      	mov	r5, r0
 80118c6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d0f6      	beq.n	80118bc <strstr+0x6>
 80118ce:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80118d2:	429e      	cmp	r6, r3
 80118d4:	d0f7      	beq.n	80118c6 <strstr+0x10>
 80118d6:	3001      	adds	r0, #1
 80118d8:	7803      	ldrb	r3, [r0, #0]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d1ef      	bne.n	80118be <strstr+0x8>
 80118de:	4618      	mov	r0, r3
 80118e0:	e7ec      	b.n	80118bc <strstr+0x6>
	...

080118e4 <_sbrk_r>:
 80118e4:	b538      	push	{r3, r4, r5, lr}
 80118e6:	4d06      	ldr	r5, [pc, #24]	; (8011900 <_sbrk_r+0x1c>)
 80118e8:	2300      	movs	r3, #0
 80118ea:	4604      	mov	r4, r0
 80118ec:	4608      	mov	r0, r1
 80118ee:	602b      	str	r3, [r5, #0]
 80118f0:	f7f0 feec 	bl	80026cc <_sbrk>
 80118f4:	1c43      	adds	r3, r0, #1
 80118f6:	d102      	bne.n	80118fe <_sbrk_r+0x1a>
 80118f8:	682b      	ldr	r3, [r5, #0]
 80118fa:	b103      	cbz	r3, 80118fe <_sbrk_r+0x1a>
 80118fc:	6023      	str	r3, [r4, #0]
 80118fe:	bd38      	pop	{r3, r4, r5, pc}
 8011900:	20002d0c 	.word	0x20002d0c

08011904 <__errno>:
 8011904:	4b01      	ldr	r3, [pc, #4]	; (801190c <__errno+0x8>)
 8011906:	6818      	ldr	r0, [r3, #0]
 8011908:	4770      	bx	lr
 801190a:	bf00      	nop
 801190c:	200000f8 	.word	0x200000f8

08011910 <__libc_init_array>:
 8011910:	b570      	push	{r4, r5, r6, lr}
 8011912:	4d0d      	ldr	r5, [pc, #52]	; (8011948 <__libc_init_array+0x38>)
 8011914:	4c0d      	ldr	r4, [pc, #52]	; (801194c <__libc_init_array+0x3c>)
 8011916:	1b64      	subs	r4, r4, r5
 8011918:	10a4      	asrs	r4, r4, #2
 801191a:	2600      	movs	r6, #0
 801191c:	42a6      	cmp	r6, r4
 801191e:	d109      	bne.n	8011934 <__libc_init_array+0x24>
 8011920:	4d0b      	ldr	r5, [pc, #44]	; (8011950 <__libc_init_array+0x40>)
 8011922:	4c0c      	ldr	r4, [pc, #48]	; (8011954 <__libc_init_array+0x44>)
 8011924:	f000 f874 	bl	8011a10 <_init>
 8011928:	1b64      	subs	r4, r4, r5
 801192a:	10a4      	asrs	r4, r4, #2
 801192c:	2600      	movs	r6, #0
 801192e:	42a6      	cmp	r6, r4
 8011930:	d105      	bne.n	801193e <__libc_init_array+0x2e>
 8011932:	bd70      	pop	{r4, r5, r6, pc}
 8011934:	f855 3b04 	ldr.w	r3, [r5], #4
 8011938:	4798      	blx	r3
 801193a:	3601      	adds	r6, #1
 801193c:	e7ee      	b.n	801191c <__libc_init_array+0xc>
 801193e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011942:	4798      	blx	r3
 8011944:	3601      	adds	r6, #1
 8011946:	e7f2      	b.n	801192e <__libc_init_array+0x1e>
 8011948:	08013534 	.word	0x08013534
 801194c:	08013534 	.word	0x08013534
 8011950:	08013534 	.word	0x08013534
 8011954:	08013538 	.word	0x08013538

08011958 <__retarget_lock_acquire_recursive>:
 8011958:	4770      	bx	lr

0801195a <__retarget_lock_release_recursive>:
 801195a:	4770      	bx	lr

0801195c <memcpy>:
 801195c:	440a      	add	r2, r1
 801195e:	4291      	cmp	r1, r2
 8011960:	f100 33ff 	add.w	r3, r0, #4294967295
 8011964:	d100      	bne.n	8011968 <memcpy+0xc>
 8011966:	4770      	bx	lr
 8011968:	b510      	push	{r4, lr}
 801196a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801196e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011972:	4291      	cmp	r1, r2
 8011974:	d1f9      	bne.n	801196a <memcpy+0xe>
 8011976:	bd10      	pop	{r4, pc}

08011978 <_free_r>:
 8011978:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801197a:	2900      	cmp	r1, #0
 801197c:	d044      	beq.n	8011a08 <_free_r+0x90>
 801197e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011982:	9001      	str	r0, [sp, #4]
 8011984:	2b00      	cmp	r3, #0
 8011986:	f1a1 0404 	sub.w	r4, r1, #4
 801198a:	bfb8      	it	lt
 801198c:	18e4      	addlt	r4, r4, r3
 801198e:	f7ff ff6b 	bl	8011868 <__malloc_lock>
 8011992:	4a1e      	ldr	r2, [pc, #120]	; (8011a0c <_free_r+0x94>)
 8011994:	9801      	ldr	r0, [sp, #4]
 8011996:	6813      	ldr	r3, [r2, #0]
 8011998:	b933      	cbnz	r3, 80119a8 <_free_r+0x30>
 801199a:	6063      	str	r3, [r4, #4]
 801199c:	6014      	str	r4, [r2, #0]
 801199e:	b003      	add	sp, #12
 80119a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119a4:	f7ff bf66 	b.w	8011874 <__malloc_unlock>
 80119a8:	42a3      	cmp	r3, r4
 80119aa:	d908      	bls.n	80119be <_free_r+0x46>
 80119ac:	6825      	ldr	r5, [r4, #0]
 80119ae:	1961      	adds	r1, r4, r5
 80119b0:	428b      	cmp	r3, r1
 80119b2:	bf01      	itttt	eq
 80119b4:	6819      	ldreq	r1, [r3, #0]
 80119b6:	685b      	ldreq	r3, [r3, #4]
 80119b8:	1949      	addeq	r1, r1, r5
 80119ba:	6021      	streq	r1, [r4, #0]
 80119bc:	e7ed      	b.n	801199a <_free_r+0x22>
 80119be:	461a      	mov	r2, r3
 80119c0:	685b      	ldr	r3, [r3, #4]
 80119c2:	b10b      	cbz	r3, 80119c8 <_free_r+0x50>
 80119c4:	42a3      	cmp	r3, r4
 80119c6:	d9fa      	bls.n	80119be <_free_r+0x46>
 80119c8:	6811      	ldr	r1, [r2, #0]
 80119ca:	1855      	adds	r5, r2, r1
 80119cc:	42a5      	cmp	r5, r4
 80119ce:	d10b      	bne.n	80119e8 <_free_r+0x70>
 80119d0:	6824      	ldr	r4, [r4, #0]
 80119d2:	4421      	add	r1, r4
 80119d4:	1854      	adds	r4, r2, r1
 80119d6:	42a3      	cmp	r3, r4
 80119d8:	6011      	str	r1, [r2, #0]
 80119da:	d1e0      	bne.n	801199e <_free_r+0x26>
 80119dc:	681c      	ldr	r4, [r3, #0]
 80119de:	685b      	ldr	r3, [r3, #4]
 80119e0:	6053      	str	r3, [r2, #4]
 80119e2:	440c      	add	r4, r1
 80119e4:	6014      	str	r4, [r2, #0]
 80119e6:	e7da      	b.n	801199e <_free_r+0x26>
 80119e8:	d902      	bls.n	80119f0 <_free_r+0x78>
 80119ea:	230c      	movs	r3, #12
 80119ec:	6003      	str	r3, [r0, #0]
 80119ee:	e7d6      	b.n	801199e <_free_r+0x26>
 80119f0:	6825      	ldr	r5, [r4, #0]
 80119f2:	1961      	adds	r1, r4, r5
 80119f4:	428b      	cmp	r3, r1
 80119f6:	bf04      	itt	eq
 80119f8:	6819      	ldreq	r1, [r3, #0]
 80119fa:	685b      	ldreq	r3, [r3, #4]
 80119fc:	6063      	str	r3, [r4, #4]
 80119fe:	bf04      	itt	eq
 8011a00:	1949      	addeq	r1, r1, r5
 8011a02:	6021      	streq	r1, [r4, #0]
 8011a04:	6054      	str	r4, [r2, #4]
 8011a06:	e7ca      	b.n	801199e <_free_r+0x26>
 8011a08:	b003      	add	sp, #12
 8011a0a:	bd30      	pop	{r4, r5, pc}
 8011a0c:	20002bcc 	.word	0x20002bcc

08011a10 <_init>:
 8011a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a12:	bf00      	nop
 8011a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a16:	bc08      	pop	{r3}
 8011a18:	469e      	mov	lr, r3
 8011a1a:	4770      	bx	lr

08011a1c <_fini>:
 8011a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a1e:	bf00      	nop
 8011a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a22:	bc08      	pop	{r3}
 8011a24:	469e      	mov	lr, r3
 8011a26:	4770      	bx	lr
