
EugenioProyect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000117e4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b04  0801197c  0801197c  0002197c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013480  08013480  000300fc  2**0
                  CONTENTS
  4 .ARM          00000008  08013480  08013480  00023480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013488  08013488  000300fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013488  08013488  00023488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801348c  0801348c  0002348c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08013490  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a18  200000fc  0801358c  000300fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002b14  0801358c  00032b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024207  00000000  00000000  0003016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000066f5  00000000  00000000  00054376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019c8  00000000  00000000  0005aa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001390  00000000  00000000  0005c438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e3bf  00000000  00000000  0005d7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b92d  00000000  00000000  0007bb87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009278c  00000000  00000000  000a74b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069d4  00000000  00000000  00139c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00140614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08011964 	.word	0x08011964

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08011964 	.word	0x08011964

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	603a      	str	r2, [r7, #0]
 80004de:	80fb      	strh	r3, [r7, #6]
 80004e0:	460b      	mov	r3, r1
 80004e2:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 80004e4:	2300      	movs	r3, #0
 80004e6:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80004e8:	2200      	movs	r2, #0
 80004ea:	6839      	ldr	r1, [r7, #0]
 80004ec:	481c      	ldr	r0, [pc, #112]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 80004ee:	f000 f8f9 	bl	80006e4 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 80004f4:	4a1b      	ldr	r2, [pc, #108]	; (8000564 <AUDIO_OUT_Init+0x90>)
 80004f6:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80004f8:	4819      	ldr	r0, [pc, #100]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 80004fa:	f006 ffff 	bl	80074fc <HAL_I2S_GetState>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d103      	bne.n	800050c <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8000504:	2100      	movs	r1, #0
 8000506:	4816      	ldr	r0, [pc, #88]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 8000508:	f000 f94a 	bl	80007a0 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 800050c:	6838      	ldr	r0, [r7, #0]
 800050e:	f000 fa0f 	bl	8000930 <I2S3_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 8000518:	2301      	movs	r3, #1
 800051a:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d10e      	bne.n	8000540 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <AUDIO_OUT_Init+0x94>)
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	2094      	movs	r0, #148	; 0x94
 8000528:	4798      	blx	r3
 800052a:	4603      	mov	r3, r0
 800052c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000530:	2be0      	cmp	r3, #224	; 0xe0
 8000532:	d103      	bne.n	800053c <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <AUDIO_OUT_Init+0x98>)
 8000536:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <AUDIO_OUT_Init+0x94>)
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	e001      	b.n	8000540 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 800053c:	2301      	movs	r3, #1
 800053e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d107      	bne.n	8000556 <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <AUDIO_OUT_Init+0x98>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	681c      	ldr	r4, [r3, #0]
 800054c:	797a      	ldrb	r2, [r7, #5]
 800054e:	88f9      	ldrh	r1, [r7, #6]
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	2094      	movs	r0, #148	; 0x94
 8000554:	47a0      	blx	r4
  }
  
  return ret;
 8000556:	7bfb      	ldrb	r3, [r7, #15]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	2000011c 	.word	0x2000011c
 8000564:	40003c00 	.word	0x40003c00
 8000568:	20000004 	.word	0x20000004
 800056c:	20000118 	.word	0x20000118

08000570 <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <AUDIO_OUT_Play+0x4c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	b292      	uxth	r2, r2
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	2094      	movs	r0, #148	; 0x94
 8000588:	4798      	blx	r3
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8000590:	2301      	movs	r3, #1
 8000592:	e00f      	b.n	80005b4 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800059a:	d203      	bcs.n	80005a4 <AUDIO_OUT_Play+0x34>
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	085b      	lsrs	r3, r3, #1
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	e001      	b.n	80005a8 <AUDIO_OUT_Play+0x38>
 80005a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a8:	461a      	mov	r2, r3
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <AUDIO_OUT_Play+0x50>)
 80005ae:	f006 fc23 	bl	8006df8 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005b2:	2300      	movs	r3, #0
  }
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000118 	.word	0x20000118
 80005c0:	2000011c 	.word	0x2000011c

080005c4 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <AUDIO_OUT_Pause+0x24>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	691b      	ldr	r3, [r3, #16]
 80005ce:	2094      	movs	r0, #148	; 0x94
 80005d0:	4798      	blx	r3
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 80005d8:	2301      	movs	r3, #1
 80005da:	e003      	b.n	80005e4 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <AUDIO_OUT_Pause+0x28>)
 80005de:	f006 fcb3 	bl	8006f48 <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005e2:	2300      	movs	r3, #0
  }
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000118 	.word	0x20000118
 80005ec:	2000011c 	.word	0x2000011c

080005f0 <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <AUDIO_OUT_Resume+0x24>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	2094      	movs	r0, #148	; 0x94
 80005fc:	4798      	blx	r3
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	e003      	b.n	8000610 <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 8000608:	4803      	ldr	r0, [pc, #12]	; (8000618 <AUDIO_OUT_Resume+0x28>)
 800060a:	f006 fcff 	bl	800700c <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800060e:	2300      	movs	r3, #0
  }
}
 8000610:	4618      	mov	r0, r3
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000118 	.word	0x20000118
 8000618:	2000011c 	.word	0x2000011c

0800061c <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8000624:	480e      	ldr	r0, [pc, #56]	; (8000660 <AUDIO_OUT_Stop+0x44>)
 8000626:	f006 fd85 	bl	8007134 <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <AUDIO_OUT_Stop+0x48>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	2094      	movs	r0, #148	; 0x94
 8000634:	4798      	blx	r3
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 800063c:	2301      	movs	r3, #1
 800063e:	e00b      	b.n	8000658 <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d107      	bne.n	8000656 <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(1);
 8000646:	2001      	movs	r0, #1
 8000648:	f002 fbb0 	bl	8002dac <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2110      	movs	r1, #16
 8000650:	4805      	ldr	r0, [pc, #20]	; (8000668 <AUDIO_OUT_Stop+0x4c>)
 8000652:	f003 fba9 	bl	8003da8 <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000656:	2300      	movs	r3, #0
  }
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	2000011c 	.word	0x2000011c
 8000664:	20000118 	.word	0x20000118
 8000668:	40020c00 	.word	0x40020c00

0800066c <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <AUDIO_OUT_SetVolume+0x2c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	6a1b      	ldr	r3, [r3, #32]
 800067c:	79fa      	ldrb	r2, [r7, #7]
 800067e:	4611      	mov	r1, r2
 8000680:	2094      	movs	r0, #148	; 0x94
 8000682:	4798      	blx	r3
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	e000      	b.n	8000690 <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800068e:	2300      	movs	r3, #0
  }
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000118 	.word	0x20000118

0800069c <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <HAL_I2S_TxCpltCallback+0x20>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d101      	bne.n	80006b2 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 80006ae:	f002 fab9 	bl	8002c24 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40003c00 	.word	0x40003c00

080006c0 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d101      	bne.n	80006d6 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 80006d2:	f002 fabb 	bl	8002c4c <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40003c00 	.word	0x40003c00

080006e4 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80006f6:	23ff      	movs	r3, #255	; 0xff
 80006f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  
  for(index = 0; index < 8; index++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000702:	e010      	b.n	8000726 <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 8000704:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000708:	4a22      	ldr	r2, [pc, #136]	; (8000794 <AUDIO_OUT_ClockConfig+0xb0>)
 800070a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	429a      	cmp	r2, r3
 8000712:	d103      	bne.n	800071c <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 8000714:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000718:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  for(index = 0; index < 8; index++)
 800071c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000720:	3301      	adds	r3, #1
 8000722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000726:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800072a:	2b07      	cmp	r3, #7
 800072c:	d9ea      	bls.n	8000704 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4618      	mov	r0, r3
 8000734:	f008 f848 	bl	80087c8 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000738:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800073c:	f003 0307 	and.w	r3, r3, #7
 8000740:	2b00      	cmp	r3, #0
 8000742:	d115      	bne.n	8000770 <AUDIO_OUT_ClockConfig+0x8c>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000744:	2301      	movs	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8000748:	2308      	movs	r3, #8
 800074a:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 800074c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <AUDIO_OUT_ClockConfig+0xb4>)
 8000752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000756:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000758:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800075c:	4a0f      	ldr	r2, [pc, #60]	; (800079c <AUDIO_OUT_ClockConfig+0xb8>)
 800075e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000762:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4618      	mov	r0, r3
 800076a:	f007 ff3d 	bl	80085e8 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 800076e:	e00d      	b.n	800078c <AUDIO_OUT_ClockConfig+0xa8>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000770:	2301      	movs	r3, #1
 8000772:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8000774:	2308      	movs	r3, #8
 8000776:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000778:	f44f 7381 	mov.w	r3, #258	; 0x102
 800077c:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 800077e:	2303      	movs	r3, #3
 8000780:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4618      	mov	r0, r3
 8000788:	f007 ff2e 	bl	80085e8 <HAL_RCCEx_PeriphCLKConfig>
}
 800078c:	bf00      	nop
 800078e:	3730      	adds	r7, #48	; 0x30
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	08011ae4 	.word	0x08011ae4
 8000798:	08011b04 	.word	0x08011b04
 800079c:	08011b24 	.word	0x08011b24

080007a0 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	4b56      	ldr	r3, [pc, #344]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	4a55      	ldr	r2, [pc, #340]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007b8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ba:	4b53      	ldr	r3, [pc, #332]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	4b4f      	ldr	r3, [pc, #316]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a4e      	ldr	r2, [pc, #312]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b4c      	ldr	r3, [pc, #304]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b48      	ldr	r3, [pc, #288]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a47      	ldr	r2, [pc, #284]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b45      	ldr	r3, [pc, #276]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80007fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 800080c:	2302      	movs	r3, #2
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8000810:	2306      	movs	r3, #6
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	483c      	ldr	r0, [pc, #240]	; (800090c <AUDIO_OUT_MspInit+0x16c>)
 800081c:	f003 f85c 	bl	80038d8 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8000820:	2310      	movs	r3, #16
 8000822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4839      	ldr	r0, [pc, #228]	; (8000910 <AUDIO_OUT_MspInit+0x170>)
 800082c:	f003 f854 	bl	80038d8 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	4b34      	ldr	r3, [pc, #208]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000838:	4a33      	ldr	r2, [pc, #204]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	6313      	str	r3, [r2, #48]	; 0x30
 8000840:	4b31      	ldr	r3, [pc, #196]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	482d      	ldr	r0, [pc, #180]	; (800090c <AUDIO_OUT_MspInit+0x16c>)
 8000858:	f003 f83e 	bl	80038d8 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	4b29      	ldr	r3, [pc, #164]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	4a28      	ldr	r2, [pc, #160]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 8000866:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800086a:	6313      	str	r3, [r2, #48]	; 0x30
 800086c:	4b26      	ldr	r3, [pc, #152]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a25      	ldr	r2, [pc, #148]	; (8000914 <AUDIO_OUT_MspInit+0x174>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d136      	bne.n	80008f0 <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8000882:	4b25      	ldr	r3, [pc, #148]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000888:	4b23      	ldr	r3, [pc, #140]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 800088a:	2240      	movs	r2, #64	; 0x40
 800088c:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800088e:	4b22      	ldr	r3, [pc, #136]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8000894:	4b20      	ldr	r3, [pc, #128]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 8000896:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800089a:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 800089e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008a2:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008aa:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008b8:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008bc:	2204      	movs	r2, #4
 80008be:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008c2:	2203      	movs	r2, #3
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008d4:	4a11      	ldr	r2, [pc, #68]	; (800091c <AUDIO_OUT_MspInit+0x17c>)
 80008d6:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008dc:	639a      	str	r2, [r3, #56]	; 0x38
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008e6:	f002 fc45 	bl	8003174 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 80008ea:	480b      	ldr	r0, [pc, #44]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008ec:	f002 fb94 	bl	8003018 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	210e      	movs	r1, #14
 80008f4:	202f      	movs	r0, #47	; 0x2f
 80008f6:	f002 fb58 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80008fa:	202f      	movs	r0, #47	; 0x2f
 80008fc:	f002 fb71 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
}
 8000900:	bf00      	nop
 8000902:	3730      	adds	r7, #48	; 0x30
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40020800 	.word	0x40020800
 8000910:	40020000 	.word	0x40020000
 8000914:	40003c00 	.word	0x40003c00
 8000918:	20000164 	.word	0x20000164
 800091c:	400260b8 	.word	0x400260b8

08000920 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <I2S3_Init+0x68>)
 800093a:	4a18      	ldr	r2, [pc, #96]	; (800099c <I2S3_Init+0x6c>)
 800093c:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <I2S3_Init+0x68>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	69da      	ldr	r2, [r3, #28]
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <I2S3_Init+0x68>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800094c:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <I2S3_Init+0x68>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <I2S3_Init+0x68>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <I2S3_Init+0x68>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <I2S3_Init+0x68>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <I2S3_Init+0x68>)
 8000968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800096c:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <I2S3_Init+0x68>)
 8000970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000974:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <I2S3_Init+0x68>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 800097c:	4806      	ldr	r0, [pc, #24]	; (8000998 <I2S3_Init+0x68>)
 800097e:	f006 f8fb 	bl	8006b78 <HAL_I2S_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 8000988:	2301      	movs	r3, #1
 800098a:	e000      	b.n	800098e <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 800098c:	2300      	movs	r3, #0
  }
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2000011c 	.word	0x2000011c
 800099c:	40003c00 	.word	0x40003c00

080009a0 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_I2S_ErrorCallback+0x20>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d101      	bne.n	80009b6 <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 80009b2:	f7ff ffb5 	bl	8000920 <AUDIO_OUT_Error_CallBack>
  }
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40003c00 	.word	0x40003c00

080009c4 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80009c8:	4814      	ldr	r0, [pc, #80]	; (8000a1c <I2Cx_Init+0x58>)
 80009ca:	f005 fce9 	bl	80063a0 <HAL_I2C_GetState>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d121      	bne.n	8000a18 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <I2Cx_Init+0x58>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <I2Cx_Init+0x5c>)
 80009d8:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <I2Cx_Init+0x58>)
 80009dc:	2243      	movs	r2, #67	; 0x43
 80009de:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <I2Cx_Init+0x58>)
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <I2Cx_Init+0x60>)
 80009e4:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <I2Cx_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <I2Cx_Init+0x58>)
 80009ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009f2:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <I2Cx_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <I2Cx_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <I2Cx_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <I2Cx_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <I2Cx_Init+0x58>)
 8000a0e:	f000 f86b 	bl	8000ae8 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000a12:	4802      	ldr	r0, [pc, #8]	; (8000a1c <I2Cx_Init+0x58>)
 8000a14:	f004 fe04 	bl	8005620 <HAL_I2C_Init>
  }
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200001c4 	.word	0x200001c4
 8000a20:	40005400 	.word	0x40005400
 8000a24:	000186a0 	.word	0x000186a0

08000a28 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af04      	add	r7, sp, #16
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80fb      	strh	r3, [r7, #6]
 8000a32:	460b      	mov	r3, r1
 8000a34:	717b      	strb	r3, [r7, #5]
 8000a36:	4613      	mov	r3, r2
 8000a38:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000a3e:	797b      	ldrb	r3, [r7, #5]
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <I2Cx_WriteData+0x48>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	88f9      	ldrh	r1, [r7, #6]
 8000a48:	9302      	str	r3, [sp, #8]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2301      	movs	r3, #1
 8000a54:	4807      	ldr	r0, [pc, #28]	; (8000a74 <I2Cx_WriteData+0x4c>)
 8000a56:	f005 f855 	bl	8005b04 <HAL_I2C_Mem_Write>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000a64:	f000 f834 	bl	8000ad0 <I2Cx_Error>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000000 	.word	0x20000000
 8000a74:	200001c4 	.word	0x200001c4

08000a78 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af04      	add	r7, sp, #16
 8000a7e:	4603      	mov	r3, r0
 8000a80:	460a      	mov	r2, r1
 8000a82:	80fb      	strh	r3, [r7, #6]
 8000a84:	4613      	mov	r3, r2
 8000a86:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000a90:	797b      	ldrb	r3, [r7, #5]
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <I2Cx_ReadData+0x50>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	88f9      	ldrh	r1, [r7, #6]
 8000a9a:	9302      	str	r3, [sp, #8]
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	f107 030e 	add.w	r3, r7, #14
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	4808      	ldr	r0, [pc, #32]	; (8000acc <I2Cx_ReadData+0x54>)
 8000aaa:	f005 f925 	bl	8005cf8 <HAL_I2C_Mem_Read>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000ab8:	f000 f80a 	bl	8000ad0 <I2Cx_Error>
  }
  return value;
 8000abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	200001c4 	.word	0x200001c4

08000ad0 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000ad4:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <I2Cx_Error+0x14>)
 8000ad6:	f004 fee7 	bl	80058a8 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000ada:	f7ff ff73 	bl	80009c4 <I2Cx_Init>
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200001c4 	.word	0x200001c4

08000ae8 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a24      	ldr	r2, [pc, #144]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000afa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000b28:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000b2e:	2312      	movs	r3, #18
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000b36:	2302      	movs	r3, #2
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4812      	ldr	r0, [pc, #72]	; (8000b90 <I2Cx_MspInit+0xa8>)
 8000b46:	f002 fec7 	bl	80038d8 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b4c:	6a1b      	ldr	r3, [r3, #32]
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b54:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b58:	6a1b      	ldr	r3, [r3, #32]
 8000b5a:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b60:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	210f      	movs	r1, #15
 8000b66:	201f      	movs	r0, #31
 8000b68:	f002 fa1f 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000b6c:	201f      	movs	r0, #31
 8000b6e:	f002 fa38 	bl	8002fe2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	210f      	movs	r1, #15
 8000b76:	2020      	movs	r0, #32
 8000b78:	f002 fa17 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000b7c:	2020      	movs	r0, #32
 8000b7e:	f002 fa30 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020400 	.word	0x40020400

08000b94 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <AUDIO_IO_Init+0x68>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a16      	ldr	r2, [pc, #88]	; (8000bfc <AUDIO_IO_Init+0x68>)
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <AUDIO_IO_Init+0x68>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000bb6:	2310      	movs	r3, #16
 8000bb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <AUDIO_IO_Init+0x6c>)
 8000bcc:	f002 fe84 	bl	80038d8 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000bd0:	f7ff fef8 	bl	80009c4 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <AUDIO_IO_Init+0x6c>)
 8000bda:	f003 f8e5 	bl	8003da8 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bde:	2005      	movs	r0, #5
 8000be0:	f002 f8e4 	bl	8002dac <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000be4:	2201      	movs	r2, #1
 8000be6:	2110      	movs	r1, #16
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <AUDIO_IO_Init+0x6c>)
 8000bea:	f003 f8dd 	bl	8003da8 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bee:	2005      	movs	r0, #5
 8000bf0:	f002 f8dc 	bl	8002dac <HAL_Delay>
}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020c00 	.word	0x40020c00

08000c04 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	71bb      	strb	r3, [r7, #6]
 8000c20:	4613      	mov	r3, r2
 8000c22:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	797a      	ldrb	r2, [r7, #5]
 8000c2a:	79b9      	ldrb	r1, [r7, #6]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fefb 	bl	8000a28 <I2Cx_WriteData>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	460a      	mov	r2, r1
 8000c44:	71fb      	strb	r3, [r7, #7]
 8000c46:	4613      	mov	r3, r2
 8000c48:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	79ba      	ldrb	r2, [r7, #6]
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ff10 	bl	8000a78 <I2Cx_ReadData>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <AUDIO_StorageParse>:

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b0d6      	sub	sp, #344	; 0x158
 8000c68:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USBHPath);
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	4945      	ldr	r1, [pc, #276]	; (8000d88 <AUDIO_StorageParse+0x124>)
 8000c74:	4618      	mov	r0, r3
 8000c76:	f00f ffc1 	bl	8010bfc <f_opendir>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FileList.ptr = 0;
 8000c80:	4b42      	ldr	r3, [pc, #264]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8

  if(res == FR_OK)
 8000c88:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d16b      	bne.n	8000d68 <AUDIO_StorageParse+0x104>
  {
    while(Appli_state == APPLICATION_READY)
 8000c90:	e066      	b.n	8000d60 <AUDIO_StorageParse+0xfc>
    {
      res = f_readdir(&dir, &fno);
 8000c92:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f010 f847 	bl	8010d2e <f_readdir>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if(res != FR_OK || fno.fname[0] == 0)
 8000ca6:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d15c      	bne.n	8000d68 <AUDIO_StorageParse+0x104>
 8000cae:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000cb2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cb6:	7d9b      	ldrb	r3, [r3, #22]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d055      	beq.n	8000d68 <AUDIO_StorageParse+0x104>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000cbc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000cc0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cc4:	7d9b      	ldrb	r3, [r3, #22]
 8000cc6:	2b2e      	cmp	r3, #46	; 0x2e
 8000cc8:	d100      	bne.n	8000ccc <AUDIO_StorageParse+0x68>
      {
        continue;
 8000cca:	e049      	b.n	8000d60 <AUDIO_StorageParse+0xfc>
      }

      fn = fno.fname;
 8000ccc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cd0:	3316      	adds	r3, #22
 8000cd2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000cd6:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000cd8:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000cdc:	2b17      	cmp	r3, #23
 8000cde:	d83f      	bhi.n	8000d60 <AUDIO_StorageParse+0xfc>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000ce0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000ce4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ce8:	7a1b      	ldrb	r3, [r3, #8]
 8000cea:	f003 0310 	and.w	r3, r3, #16
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d136      	bne.n	8000d60 <AUDIO_StorageParse+0xfc>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000cf2:	4927      	ldr	r1, [pc, #156]	; (8000d90 <AUDIO_StorageParse+0x12c>)
 8000cf4:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000cf8:	f010 fd87 	bl	801180a <strstr>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d107      	bne.n	8000d12 <AUDIO_StorageParse+0xae>
 8000d02:	4924      	ldr	r1, [pc, #144]	; (8000d94 <AUDIO_StorageParse+0x130>)
 8000d04:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000d08:	f010 fd7f 	bl	801180a <strstr>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d026      	beq.n	8000d60 <AUDIO_StorageParse+0xfc>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d14:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	4413      	add	r3, r2
 8000d24:	4a19      	ldr	r2, [pc, #100]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d26:	4413      	add	r3, r2
 8000d28:	3301      	adds	r3, #1
 8000d2a:	2228      	movs	r2, #40	; 0x28
 8000d2c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8000d30:	4618      	mov	r0, r3
 8000d32:	f010 fd57 	bl	80117e4 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d38:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4913      	ldr	r1, [pc, #76]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	4413      	add	r3, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d52:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d56:	3301      	adds	r3, #1
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d5c:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
    while(Appli_state == APPLICATION_READY)
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <AUDIO_StorageParse+0x134>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d094      	beq.n	8000c92 <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d6a:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	; 0x3d8
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <AUDIO_StorageParse+0x138>)
 8000d70:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	4618      	mov	r0, r3
 8000d76:	f00f ffb4 	bl	8010ce2 <f_closedir>
  return res;
 8000d7a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20001e80 	.word	0x20001e80
 8000d8c:	20001840 	.word	0x20001840
 8000d90:	0801197c 	.word	0x0801197c
 8000d94:	08011980 	.word	0x08011980
 8000d98:	200026c4 	.word	0x200026c4
 8000d9c:	2000021a 	.word	0x2000021a

08000da0 <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK) return NumObs;
 8000da4:	f7ff ff5e 	bl	8000c64 <AUDIO_StorageParse>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d102      	bne.n	8000db4 <AUDIO_GetWavObjectNumber+0x14>
 8000dae:	4b02      	ldr	r3, [pc, #8]	; (8000db8 <AUDIO_GetWavObjectNumber+0x18>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	e7ff      	b.n	8000db4 <AUDIO_GetWavObjectNumber+0x14>
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	2000021a 	.word	0x2000021a

08000dbc <Mount_USB>:

void Mount_USB (void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4905      	ldr	r1, [pc, #20]	; (8000dd8 <Mount_USB+0x1c>)
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <Mount_USB+0x20>)
 8000dc6:	f00f f925 	bl	8010014 <f_mount>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <Mount_USB+0x24>)
 8000dd0:	701a      	strb	r2, [r3, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20001e80 	.word	0x20001e80
 8000ddc:	20001e84 	.word	0x20001e84
 8000de0:	20000218 	.word	0x20000218

08000de4 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	4603      	mov	r3, r0
 8000dee:	81fb      	strh	r3, [r7, #14]
 8000df0:	460b      	mov	r3, r1
 8000df2:	81bb      	strh	r3, [r7, #12]
 8000df4:	4613      	mov	r3, r2
 8000df6:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000dfc:	f7ff feca 	bl	8000b94 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000e00:	89fb      	ldrh	r3, [r7, #14]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2201      	movs	r2, #1
 8000e06:	2102      	movs	r1, #2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 fb01 	bl	8001410 <CODEC_IO_Write>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	461a      	mov	r2, r3
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	4413      	add	r3, r2
 8000e16:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000e18:	89bb      	ldrh	r3, [r7, #12]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	d81b      	bhi.n	8000e58 <cs43l22_Init+0x74>
 8000e20:	a201      	add	r2, pc, #4	; (adr r2, 8000e28 <cs43l22_Init+0x44>)
 8000e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e26:	bf00      	nop
 8000e28:	08000e39 	.word	0x08000e39
 8000e2c:	08000e41 	.word	0x08000e41
 8000e30:	08000e49 	.word	0x08000e49
 8000e34:	08000e51 	.word	0x08000e51
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000e38:	4b5b      	ldr	r3, [pc, #364]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e3a:	22fa      	movs	r2, #250	; 0xfa
 8000e3c:	701a      	strb	r2, [r3, #0]
    break;
 8000e3e:	e00f      	b.n	8000e60 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000e40:	4b59      	ldr	r3, [pc, #356]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e42:	22af      	movs	r2, #175	; 0xaf
 8000e44:	701a      	strb	r2, [r3, #0]
    break;
 8000e46:	e00b      	b.n	8000e60 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000e48:	4b57      	ldr	r3, [pc, #348]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e4a:	22aa      	movs	r2, #170	; 0xaa
 8000e4c:	701a      	strb	r2, [r3, #0]
    break;
 8000e4e:	e007      	b.n	8000e60 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000e50:	4b55      	ldr	r3, [pc, #340]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e52:	2205      	movs	r2, #5
 8000e54:	701a      	strb	r2, [r3, #0]
    break;    
 8000e56:	e003      	b.n	8000e60 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000e58:	4b53      	ldr	r3, [pc, #332]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e5a:	2205      	movs	r2, #5
 8000e5c:	701a      	strb	r2, [r3, #0]
    break;    
 8000e5e:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000e60:	89fb      	ldrh	r3, [r7, #14]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	4a50      	ldr	r2, [pc, #320]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e66:	7812      	ldrb	r2, [r2, #0]
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 facf 	bl	8001410 <CODEC_IO_Write>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	4413      	add	r3, r2
 8000e7a:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000e7c:	89fb      	ldrh	r3, [r7, #14]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2281      	movs	r2, #129	; 0x81
 8000e82:	2105      	movs	r1, #5
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 fac3 	bl	8001410 <CODEC_IO_Write>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	4413      	add	r3, r2
 8000e92:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000e94:	89fb      	ldrh	r3, [r7, #14]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2204      	movs	r2, #4
 8000e9a:	2106      	movs	r1, #6
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fab7 	bl	8001410 <CODEC_IO_Write>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000eac:	7afa      	ldrb	r2, [r7, #11]
 8000eae:	89fb      	ldrh	r3, [r7, #14]
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f964 	bl	8001180 <cs43l22_SetVolume>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000ec0:	89bb      	ldrh	r3, [r7, #12]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d023      	beq.n	8000f0e <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000ec6:	89fb      	ldrh	r3, [r7, #14]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2206      	movs	r2, #6
 8000ecc:	210f      	movs	r1, #15
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fa9e 	bl	8001410 <CODEC_IO_Write>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	4413      	add	r3, r2
 8000edc:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000ede:	89fb      	ldrh	r3, [r7, #14]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2124      	movs	r1, #36	; 0x24
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fa92 	bl	8001410 <CODEC_IO_Write>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000ef6:	89fb      	ldrh	r3, [r7, #14]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2200      	movs	r2, #0
 8000efc:	2125      	movs	r1, #37	; 0x25
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fa86 	bl	8001410 <CODEC_IO_Write>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000f0e:	89fb      	ldrh	r3, [r7, #14]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2200      	movs	r2, #0
 8000f14:	210a      	movs	r1, #10
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fa7a 	bl	8001410 <CODEC_IO_Write>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	4413      	add	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000f26:	89fb      	ldrh	r3, [r7, #14]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	210e      	movs	r1, #14
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fa6e 	bl	8001410 <CODEC_IO_Write>
 8000f34:	4603      	mov	r3, r0
 8000f36:	461a      	mov	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000f3e:	89fb      	ldrh	r3, [r7, #14]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2200      	movs	r2, #0
 8000f44:	2127      	movs	r1, #39	; 0x27
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fa62 	bl	8001410 <CODEC_IO_Write>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	4413      	add	r3, r2
 8000f54:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	211f      	movs	r1, #31
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fa56 	bl	8001410 <CODEC_IO_Write>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000f6e:	89fb      	ldrh	r3, [r7, #14]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	220a      	movs	r2, #10
 8000f74:	211a      	movs	r1, #26
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fa4a 	bl	8001410 <CODEC_IO_Write>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	4413      	add	r3, r2
 8000f84:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000f86:	89fb      	ldrh	r3, [r7, #14]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	220a      	movs	r2, #10
 8000f8c:	211b      	movs	r1, #27
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fa3e 	bl	8001410 <CODEC_IO_Write>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000f9e:	697b      	ldr	r3, [r7, #20]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	2000021c 	.word	0x2000021c

08000fac <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000fb0:	f7ff fe28 	bl	8000c04 <AUDIO_IO_DeInit>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000fc2:	f7ff fde7 	bl	8000b94 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2101      	movs	r1, #1
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fe34 	bl	8000c3a <AUDIO_IO_Read>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	f023 0307 	bic.w	r3, r3, #7
 8000fdc:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	80fb      	strh	r3, [r7, #6]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <cs43l22_Play+0x70>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d123      	bne.n	800104c <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2206      	movs	r2, #6
 800100a:	210e      	movs	r1, #14
 800100c:	4618      	mov	r0, r3
 800100e:	f000 f9ff 	bl	8001410 <CODEC_IO_Write>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4413      	add	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f919 	bl	8001258 <cs43l22_SetMute>
 8001026:	4602      	mov	r2, r0
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	229e      	movs	r2, #158	; 0x9e
 8001034:	2102      	movs	r1, #2
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f9ea 	bl	8001410 <CODEC_IO_Write>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <cs43l22_Play+0x70>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 800104c:	68fb      	ldr	r3, [r7, #12]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000034 	.word	0x20000034

0800105c <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	2101      	movs	r1, #1
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f8f2 	bl	8001258 <cs43l22_SetMute>
 8001074:	4602      	mov	r2, r0
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4413      	add	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2201      	movs	r2, #1
 8001082:	2102      	movs	r1, #2
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f9c3 	bl	8001410 <CODEC_IO_Write>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4413      	add	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001094:	68fb      	ldr	r3, [r7, #12]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f8ce 	bl	8001258 <cs43l22_SetMute>
 80010bc:	4602      	mov	r2, r0
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4413      	add	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	e002      	b.n	80010d0 <cs43l22_Resume+0x30>
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3301      	adds	r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2bfe      	cmp	r3, #254	; 0xfe
 80010d4:	d9f9      	bls.n	80010ca <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <cs43l22_Resume+0x74>)
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	2104      	movs	r1, #4
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f994 	bl	8001410 <CODEC_IO_Write>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	229e      	movs	r2, #158	; 0x9e
 80010f8:	2102      	movs	r1, #2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f988 	bl	8001410 <CODEC_IO_Write>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000021c 	.word	0x2000021c

08001118 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	2101      	movs	r1, #1
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f893 	bl	8001258 <cs43l22_SetMute>
 8001132:	4602      	mov	r2, r0
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2204      	movs	r2, #4
 8001140:	210e      	movs	r1, #14
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f964 	bl	8001410 <CODEC_IO_Write>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	229f      	movs	r2, #159	; 0x9f
 8001158:	2102      	movs	r1, #2
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f958 	bl	8001410 <CODEC_IO_Write>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <cs43l22_Stop+0x64>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001170:	68fb      	ldr	r3, [r7, #12]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000034 	.word	0x20000034

08001180 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	460a      	mov	r2, r1
 800118a:	80fb      	strh	r3, [r7, #6]
 800118c:	4613      	mov	r3, r2
 800118e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001194:	797b      	ldrb	r3, [r7, #5]
 8001196:	2b64      	cmp	r3, #100	; 0x64
 8001198:	d80b      	bhi.n	80011b2 <cs43l22_SetVolume+0x32>
 800119a:	797a      	ldrb	r2, [r7, #5]
 800119c:	4613      	mov	r3, r2
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	1a9b      	subs	r3, r3, r2
 80011a2:	4a25      	ldr	r2, [pc, #148]	; (8001238 <cs43l22_SetVolume+0xb8>)
 80011a4:	fb82 1203 	smull	r1, r2, r2, r3
 80011a8:	1152      	asrs	r2, r2, #5
 80011aa:	17db      	asrs	r3, r3, #31
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	e000      	b.n	80011b4 <cs43l22_SetVolume+0x34>
 80011b2:	23ff      	movs	r3, #255	; 0xff
 80011b4:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80011b6:	7afb      	ldrb	r3, [r7, #11]
 80011b8:	2be6      	cmp	r3, #230	; 0xe6
 80011ba:	d91c      	bls.n	80011f6 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	b2d8      	uxtb	r0, r3
 80011c0:	7afb      	ldrb	r3, [r7, #11]
 80011c2:	3319      	adds	r3, #25
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	2120      	movs	r1, #32
 80011ca:	f000 f921 	bl	8001410 <CODEC_IO_Write>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4413      	add	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	b2d8      	uxtb	r0, r3
 80011dc:	7afb      	ldrb	r3, [r7, #11]
 80011de:	3319      	adds	r3, #25
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	2121      	movs	r1, #33	; 0x21
 80011e6:	f000 f913 	bl	8001410 <CODEC_IO_Write>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4413      	add	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e01b      	b.n	800122e <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	b2d8      	uxtb	r0, r3
 80011fa:	7afb      	ldrb	r3, [r7, #11]
 80011fc:	3319      	adds	r3, #25
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	461a      	mov	r2, r3
 8001202:	2120      	movs	r1, #32
 8001204:	f000 f904 	bl	8001410 <CODEC_IO_Write>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	b2d8      	uxtb	r0, r3
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	3319      	adds	r3, #25
 800121a:	b2db      	uxtb	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	2121      	movs	r1, #33	; 0x21
 8001220:	f000 f8f6 	bl	8001410 <CODEC_IO_Write>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	51eb851f 	.word	0x51eb851f

0800123c <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d124      	bne.n	80012b8 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	22ff      	movs	r2, #255	; 0xff
 8001274:	2104      	movs	r1, #4
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f8ca 	bl	8001410 <CODEC_IO_Write>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2201      	movs	r2, #1
 800128c:	2122      	movs	r1, #34	; 0x22
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f8be 	bl	8001410 <CODEC_IO_Write>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2201      	movs	r2, #1
 80012a4:	2123      	movs	r1, #35	; 0x23
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f8b2 	bl	8001410 <CODEC_IO_Write>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	e025      	b.n	8001304 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2200      	movs	r2, #0
 80012be:	2122      	movs	r1, #34	; 0x22
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f8a5 	bl	8001410 <CODEC_IO_Write>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2200      	movs	r2, #0
 80012d6:	2123      	movs	r1, #35	; 0x23
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f899 	bl	8001410 <CODEC_IO_Write>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4a08      	ldr	r2, [pc, #32]	; (8001310 <cs43l22_SetMute+0xb8>)
 80012ee:	7812      	ldrb	r2, [r2, #0]
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	2104      	movs	r1, #4
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 f88b 	bl	8001410 <CODEC_IO_Write>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4413      	add	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001304:	68fb      	ldr	r3, [r7, #12]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000021c 	.word	0x2000021c

08001314 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	460a      	mov	r2, r1
 800131e:	80fb      	strh	r3, [r7, #6]
 8001320:	4613      	mov	r3, r2
 8001322:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001328:	797b      	ldrb	r3, [r7, #5]
 800132a:	3b01      	subs	r3, #1
 800132c:	2b03      	cmp	r3, #3
 800132e:	d84b      	bhi.n	80013c8 <cs43l22_SetOutputMode+0xb4>
 8001330:	a201      	add	r2, pc, #4	; (adr r2, 8001338 <cs43l22_SetOutputMode+0x24>)
 8001332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001336:	bf00      	nop
 8001338:	08001349 	.word	0x08001349
 800133c:	08001369 	.word	0x08001369
 8001340:	08001389 	.word	0x08001389
 8001344:	080013a9 	.word	0x080013a9
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	22fa      	movs	r2, #250	; 0xfa
 800134e:	2104      	movs	r1, #4
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f85d 	bl	8001410 <CODEC_IO_Write>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4413      	add	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001360:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 8001362:	22fa      	movs	r2, #250	; 0xfa
 8001364:	701a      	strb	r2, [r3, #0]
      break;
 8001366:	e03f      	b.n	80013e8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	22af      	movs	r2, #175	; 0xaf
 800136e:	2104      	movs	r1, #4
 8001370:	4618      	mov	r0, r3
 8001372:	f000 f84d 	bl	8001410 <CODEC_IO_Write>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4413      	add	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 8001382:	22af      	movs	r2, #175	; 0xaf
 8001384:	701a      	strb	r2, [r3, #0]
      break;
 8001386:	e02f      	b.n	80013e8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	22aa      	movs	r2, #170	; 0xaa
 800138e:	2104      	movs	r1, #4
 8001390:	4618      	mov	r0, r3
 8001392:	f000 f83d 	bl	8001410 <CODEC_IO_Write>
 8001396:	4603      	mov	r3, r0
 8001398:	461a      	mov	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4413      	add	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 80013a2:	22aa      	movs	r2, #170	; 0xaa
 80013a4:	701a      	strb	r2, [r3, #0]
      break;
 80013a6:	e01f      	b.n	80013e8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2205      	movs	r2, #5
 80013ae:	2104      	movs	r1, #4
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f82d 	bl	8001410 <CODEC_IO_Write>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4413      	add	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 80013c2:	2205      	movs	r2, #5
 80013c4:	701a      	strb	r2, [r3, #0]
      break;    
 80013c6:	e00f      	b.n	80013e8 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2205      	movs	r2, #5
 80013ce:	2104      	movs	r1, #4
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f81d 	bl	8001410 <CODEC_IO_Write>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4413      	add	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 80013e2:	2205      	movs	r2, #5
 80013e4:	701a      	strb	r2, [r3, #0]
      break;
 80013e6:	bf00      	nop
  }  
  return counter;
 80013e8:	68fb      	ldr	r3, [r7, #12]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000021c 	.word	0x2000021c

080013f8 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	460b      	mov	r3, r1
 800141c:	71bb      	strb	r3, [r7, #6]
 800141e:	4613      	mov	r3, r2
 8001420:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001426:	797a      	ldrb	r2, [r7, #5]
 8001428:	79b9      	ldrb	r1, [r7, #6]
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fbf0 	bl	8000c12 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	b2db      	uxtb	r3, r3
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <display_cancion>:
	SSD1306_Puts("* CI:Silencio ", &Font_7x10, WHITE);
	SSD1306_UpdateScreen();
}

void display_cancion(int idx)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	switch(idx){
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b03      	cmp	r3, #3
 800144c:	f200 80a7 	bhi.w	800159e <display_cancion+0x15e>
 8001450:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <display_cancion+0x18>)
 8001452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001456:	bf00      	nop
 8001458:	08001469 	.word	0x08001469
 800145c:	080014bb 	.word	0x080014bb
 8001460:	0800150d 	.word	0x0800150d
 8001464:	0800155f 	.word	0x0800155f

	case 0:
		SSD1306_Clear();
 8001468:	f000 ff99 	bl	800239e <SSD1306_Clear>
		SSD1306_GotoXY(30,0);
 800146c:	2100      	movs	r1, #0
 800146e:	201e      	movs	r0, #30
 8001470:	f000 feda 	bl	8002228 <SSD1306_GotoXY>
		SSD1306_Puts("STATUS", &Font_11x18, WHITE);
 8001474:	2201      	movs	r2, #1
 8001476:	494c      	ldr	r1, [pc, #304]	; (80015a8 <display_cancion+0x168>)
 8001478:	484c      	ldr	r0, [pc, #304]	; (80015ac <display_cancion+0x16c>)
 800147a:	f000 ff6b 	bl	8002354 <SSD1306_Puts>
		SSD1306_GotoXY(8,25);
 800147e:	2119      	movs	r1, #25
 8001480:	2008      	movs	r0, #8
 8001482:	f000 fed1 	bl	8002228 <SSD1306_GotoXY>
		SSD1306_Puts("Reproduciendo...", &Font_7x10, WHITE);
 8001486:	2201      	movs	r2, #1
 8001488:	4949      	ldr	r1, [pc, #292]	; (80015b0 <display_cancion+0x170>)
 800148a:	484a      	ldr	r0, [pc, #296]	; (80015b4 <display_cancion+0x174>)
 800148c:	f000 ff62 	bl	8002354 <SSD1306_Puts>
		SSD1306_GotoXY(18,40);
 8001490:	2128      	movs	r1, #40	; 0x28
 8001492:	2012      	movs	r0, #18
 8001494:	f000 fec8 	bl	8002228 <SSD1306_GotoXY>
		SSD1306_Puts("* CD:Musica ", &Font_7x10, WHITE);
 8001498:	2201      	movs	r2, #1
 800149a:	4945      	ldr	r1, [pc, #276]	; (80015b0 <display_cancion+0x170>)
 800149c:	4846      	ldr	r0, [pc, #280]	; (80015b8 <display_cancion+0x178>)
 800149e:	f000 ff59 	bl	8002354 <SSD1306_Puts>
		SSD1306_GotoXY(18,50);
 80014a2:	2132      	movs	r1, #50	; 0x32
 80014a4:	2012      	movs	r0, #18
 80014a6:	f000 febf 	bl	8002228 <SSD1306_GotoXY>
		SSD1306_Puts("* CI:Silencio ", &Font_7x10, WHITE);
 80014aa:	2201      	movs	r2, #1
 80014ac:	4940      	ldr	r1, [pc, #256]	; (80015b0 <display_cancion+0x170>)
 80014ae:	4843      	ldr	r0, [pc, #268]	; (80015bc <display_cancion+0x17c>)
 80014b0:	f000 ff50 	bl	8002354 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80014b4:	f000 fe12 	bl	80020dc <SSD1306_UpdateScreen>
		break;
 80014b8:	e071      	b.n	800159e <display_cancion+0x15e>


	case 1:
		SSD1306_Clear();
 80014ba:	f000 ff70 	bl	800239e <SSD1306_Clear>
		SSD1306_GotoXY(30,0);
 80014be:	2100      	movs	r1, #0
 80014c0:	201e      	movs	r0, #30
 80014c2:	f000 feb1 	bl	8002228 <SSD1306_GotoXY>
		SSD1306_Puts("STATUS", &Font_11x18, WHITE);
 80014c6:	2201      	movs	r2, #1
 80014c8:	4937      	ldr	r1, [pc, #220]	; (80015a8 <display_cancion+0x168>)
 80014ca:	4838      	ldr	r0, [pc, #224]	; (80015ac <display_cancion+0x16c>)
 80014cc:	f000 ff42 	bl	8002354 <SSD1306_Puts>
		SSD1306_GotoXY(8,25);
 80014d0:	2119      	movs	r1, #25
 80014d2:	2008      	movs	r0, #8
 80014d4:	f000 fea8 	bl	8002228 <SSD1306_GotoXY>
		SSD1306_Puts("Reproduciendo...", &Font_7x10, WHITE);
 80014d8:	2201      	movs	r2, #1
 80014da:	4935      	ldr	r1, [pc, #212]	; (80015b0 <display_cancion+0x170>)
 80014dc:	4835      	ldr	r0, [pc, #212]	; (80015b4 <display_cancion+0x174>)
 80014de:	f000 ff39 	bl	8002354 <SSD1306_Puts>
		SSD1306_GotoXY(18,40);
 80014e2:	2128      	movs	r1, #40	; 0x28
 80014e4:	2012      	movs	r0, #18
 80014e6:	f000 fe9f 	bl	8002228 <SSD1306_GotoXY>
		SSD1306_Puts("* CD:Electronica", &Font_7x10, WHITE);
 80014ea:	2201      	movs	r2, #1
 80014ec:	4930      	ldr	r1, [pc, #192]	; (80015b0 <display_cancion+0x170>)
 80014ee:	4834      	ldr	r0, [pc, #208]	; (80015c0 <display_cancion+0x180>)
 80014f0:	f000 ff30 	bl	8002354 <SSD1306_Puts>
		SSD1306_GotoXY(18,50);
 80014f4:	2132      	movs	r1, #50	; 0x32
 80014f6:	2012      	movs	r0, #18
 80014f8:	f000 fe96 	bl	8002228 <SSD1306_GotoXY>
		SSD1306_Puts("* CI:The Strokes", &Font_7x10, WHITE);
 80014fc:	2201      	movs	r2, #1
 80014fe:	492c      	ldr	r1, [pc, #176]	; (80015b0 <display_cancion+0x170>)
 8001500:	4830      	ldr	r0, [pc, #192]	; (80015c4 <display_cancion+0x184>)
 8001502:	f000 ff27 	bl	8002354 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001506:	f000 fde9 	bl	80020dc <SSD1306_UpdateScreen>
		break;
 800150a:	e048      	b.n	800159e <display_cancion+0x15e>

	case 2:
		SSD1306_Clear();
 800150c:	f000 ff47 	bl	800239e <SSD1306_Clear>
		SSD1306_GotoXY(30,0);
 8001510:	2100      	movs	r1, #0
 8001512:	201e      	movs	r0, #30
 8001514:	f000 fe88 	bl	8002228 <SSD1306_GotoXY>
		SSD1306_Puts("STATUS", &Font_11x18, WHITE);
 8001518:	2201      	movs	r2, #1
 800151a:	4923      	ldr	r1, [pc, #140]	; (80015a8 <display_cancion+0x168>)
 800151c:	4823      	ldr	r0, [pc, #140]	; (80015ac <display_cancion+0x16c>)
 800151e:	f000 ff19 	bl	8002354 <SSD1306_Puts>
		SSD1306_GotoXY(8,25);
 8001522:	2119      	movs	r1, #25
 8001524:	2008      	movs	r0, #8
 8001526:	f000 fe7f 	bl	8002228 <SSD1306_GotoXY>
		SSD1306_Puts("Reproduciendo...", &Font_7x10, WHITE);
 800152a:	2201      	movs	r2, #1
 800152c:	4920      	ldr	r1, [pc, #128]	; (80015b0 <display_cancion+0x170>)
 800152e:	4821      	ldr	r0, [pc, #132]	; (80015b4 <display_cancion+0x174>)
 8001530:	f000 ff10 	bl	8002354 <SSD1306_Puts>
		SSD1306_GotoXY(18,40);
 8001534:	2128      	movs	r1, #40	; 0x28
 8001536:	2012      	movs	r0, #18
 8001538:	f000 fe76 	bl	8002228 <SSD1306_GotoXY>
		SSD1306_Puts("* CD:Murmullo ", &Font_7x10, WHITE);
 800153c:	2201      	movs	r2, #1
 800153e:	491c      	ldr	r1, [pc, #112]	; (80015b0 <display_cancion+0x170>)
 8001540:	4821      	ldr	r0, [pc, #132]	; (80015c8 <display_cancion+0x188>)
 8001542:	f000 ff07 	bl	8002354 <SSD1306_Puts>
		SSD1306_GotoXY(18,50);
 8001546:	2132      	movs	r1, #50	; 0x32
 8001548:	2012      	movs	r0, #18
 800154a:	f000 fe6d 	bl	8002228 <SSD1306_GotoXY>
		SSD1306_Puts("* CI:Normal ", &Font_7x10, WHITE);
 800154e:	2201      	movs	r2, #1
 8001550:	4917      	ldr	r1, [pc, #92]	; (80015b0 <display_cancion+0x170>)
 8001552:	481e      	ldr	r0, [pc, #120]	; (80015cc <display_cancion+0x18c>)
 8001554:	f000 fefe 	bl	8002354 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001558:	f000 fdc0 	bl	80020dc <SSD1306_UpdateScreen>
		break;
 800155c:	e01f      	b.n	800159e <display_cancion+0x15e>



	case 3:
		SSD1306_Clear();
 800155e:	f000 ff1e 	bl	800239e <SSD1306_Clear>
		SSD1306_GotoXY(30,0);
 8001562:	2100      	movs	r1, #0
 8001564:	201e      	movs	r0, #30
 8001566:	f000 fe5f 	bl	8002228 <SSD1306_GotoXY>
		SSD1306_Puts("STATUS", &Font_11x18, WHITE);
 800156a:	2201      	movs	r2, #1
 800156c:	490e      	ldr	r1, [pc, #56]	; (80015a8 <display_cancion+0x168>)
 800156e:	480f      	ldr	r0, [pc, #60]	; (80015ac <display_cancion+0x16c>)
 8001570:	f000 fef0 	bl	8002354 <SSD1306_Puts>
		SSD1306_GotoXY(8,25);
 8001574:	2119      	movs	r1, #25
 8001576:	2008      	movs	r0, #8
 8001578:	f000 fe56 	bl	8002228 <SSD1306_GotoXY>
		SSD1306_Puts("Reproduciendo...", &Font_7x10, WHITE);
 800157c:	2201      	movs	r2, #1
 800157e:	490c      	ldr	r1, [pc, #48]	; (80015b0 <display_cancion+0x170>)
 8001580:	480c      	ldr	r0, [pc, #48]	; (80015b4 <display_cancion+0x174>)
 8001582:	f000 fee7 	bl	8002354 <SSD1306_Puts>
		SSD1306_GotoXY(18,40);
 8001586:	2128      	movs	r1, #40	; 0x28
 8001588:	2012      	movs	r0, #18
 800158a:	f000 fe4d 	bl	8002228 <SSD1306_GotoXY>
		SSD1306_Puts("* Cancion", &Font_7x10, WHITE);
 800158e:	2201      	movs	r2, #1
 8001590:	4907      	ldr	r1, [pc, #28]	; (80015b0 <display_cancion+0x170>)
 8001592:	480f      	ldr	r0, [pc, #60]	; (80015d0 <display_cancion+0x190>)
 8001594:	f000 fede 	bl	8002354 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001598:	f000 fda0 	bl	80020dc <SSD1306_UpdateScreen>

	}

}
 800159c:	e7ff      	b.n	800159e <display_cancion+0x15e>
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000040 	.word	0x20000040
 80015ac:	08011a08 	.word	0x08011a08
 80015b0:	20000038 	.word	0x20000038
 80015b4:	08011a10 	.word	0x08011a10
 80015b8:	08011a24 	.word	0x08011a24
 80015bc:	08011a34 	.word	0x08011a34
 80015c0:	08011a44 	.word	0x08011a44
 80015c4:	08011a58 	.word	0x08011a58
 80015c8:	08011a6c 	.word	0x08011a6c
 80015cc:	08011a7c 	.word	0x08011a7c
 80015d0:	08011a8c 	.word	0x08011a8c

080015d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b1b      	ldr	r3, [pc, #108]	; (800164c <MX_DMA_Init+0x78>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a1a      	ldr	r2, [pc, #104]	; (800164c <MX_DMA_Init+0x78>)
 80015e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_DMA_Init+0x78>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	4b14      	ldr	r3, [pc, #80]	; (800164c <MX_DMA_Init+0x78>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a13      	ldr	r2, [pc, #76]	; (800164c <MX_DMA_Init+0x78>)
 8001600:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_DMA_Init+0x78>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	2010      	movs	r0, #16
 8001618:	f001 fcc7 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800161c:	2010      	movs	r0, #16
 800161e:	f001 fce0 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	203a      	movs	r0, #58	; 0x3a
 8001628:	f001 fcbf 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800162c:	203a      	movs	r0, #58	; 0x3a
 800162e:	f001 fcd8 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2046      	movs	r0, #70	; 0x46
 8001638:	f001 fcb7 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800163c:	2046      	movs	r0, #70	; 0x46
 800163e:	f001 fcd0 	bl	8002fe2 <HAL_NVIC_EnableIRQ>

}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800

08001650 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	4b59      	ldr	r3, [pc, #356]	; (80017d0 <MX_GPIO_Init+0x180>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <MX_GPIO_Init+0x180>)
 8001670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b56      	ldr	r3, [pc, #344]	; (80017d0 <MX_GPIO_Init+0x180>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b52      	ldr	r3, [pc, #328]	; (80017d0 <MX_GPIO_Init+0x180>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a51      	ldr	r2, [pc, #324]	; (80017d0 <MX_GPIO_Init+0x180>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b4f      	ldr	r3, [pc, #316]	; (80017d0 <MX_GPIO_Init+0x180>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	4b4b      	ldr	r3, [pc, #300]	; (80017d0 <MX_GPIO_Init+0x180>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a4a      	ldr	r2, [pc, #296]	; (80017d0 <MX_GPIO_Init+0x180>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b48      	ldr	r3, [pc, #288]	; (80017d0 <MX_GPIO_Init+0x180>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b44      	ldr	r3, [pc, #272]	; (80017d0 <MX_GPIO_Init+0x180>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a43      	ldr	r2, [pc, #268]	; (80017d0 <MX_GPIO_Init+0x180>)
 80016c4:	f043 0308 	orr.w	r3, r3, #8
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <MX_GPIO_Init+0x180>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4b3d      	ldr	r3, [pc, #244]	; (80017d0 <MX_GPIO_Init+0x180>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a3c      	ldr	r2, [pc, #240]	; (80017d0 <MX_GPIO_Init+0x180>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b3a      	ldr	r3, [pc, #232]	; (80017d0 <MX_GPIO_Init+0x180>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|PC1_Pin|PC3_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	210b      	movs	r1, #11
 80016f6:	4837      	ldr	r0, [pc, #220]	; (80017d4 <MX_GPIO_Init+0x184>)
 80016f8:	f002 fb56 	bl	8003da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA1_Pin|PA3_Pin|PA5_Pin|PA7_Pin, GPIO_PIN_SET);
 80016fc:	2201      	movs	r2, #1
 80016fe:	21aa      	movs	r1, #170	; 0xaa
 8001700:	4835      	ldr	r0, [pc, #212]	; (80017d8 <MX_GPIO_Init+0x188>)
 8001702:	f002 fb51 	bl	8003da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PC1_Pin|PC3_Pin;
 8001706:	230b      	movs	r3, #11
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	482d      	ldr	r0, [pc, #180]	; (80017d4 <MX_GPIO_Init+0x184>)
 800171e:	f002 f8db 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001722:	2301      	movs	r3, #1
 8001724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001726:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800172a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800172c:	2302      	movs	r3, #2
 800172e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	4828      	ldr	r0, [pc, #160]	; (80017d8 <MX_GPIO_Init+0x188>)
 8001738:	f002 f8ce 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PA1_Pin|PA3_Pin|PA5_Pin|PA7_Pin;
 800173c:	23aa      	movs	r3, #170	; 0xaa
 800173e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001740:	2301      	movs	r3, #1
 8001742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	4619      	mov	r1, r3
 8001752:	4821      	ldr	r0, [pc, #132]	; (80017d8 <MX_GPIO_Init+0x188>)
 8001754:	f002 f8c0 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PD9_Pin|PD11_Pin|PD13_Pin|PD15_Pin;
 8001758:	f44f 432a 	mov.w	r3, #43520	; 0xaa00
 800175c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800175e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001764:	2301      	movs	r3, #1
 8001766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	481b      	ldr	r0, [pc, #108]	; (80017dc <MX_GPIO_Init+0x18c>)
 8001770:	f002 f8b2 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001774:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800177a:	2312      	movs	r3, #18
 800177c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800177e:	2301      	movs	r3, #1
 8001780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001786:	2304      	movs	r3, #4
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <MX_GPIO_Init+0x190>)
 8001792:	f002 f8a1 	bl	80038d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	2006      	movs	r0, #6
 800179c:	f001 fc05 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017a0:	2006      	movs	r0, #6
 80017a2:	f001 fc1e 	bl	8002fe2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	2017      	movs	r0, #23
 80017ac:	f001 fbfd 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017b0:	2017      	movs	r0, #23
 80017b2:	f001 fc16 	bl	8002fe2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	2028      	movs	r0, #40	; 0x28
 80017bc:	f001 fbf5 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017c0:	2028      	movs	r0, #40	; 0x28
 80017c2:	f001 fc0e 	bl	8002fe2 <HAL_NVIC_EnableIRQ>

}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	; 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40020000 	.word	0x40020000
 80017dc:	40020c00 	.word	0x40020c00
 80017e0:	40020400 	.word	0x40020400

080017e4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <MX_I2C3_Init+0x50>)
 80017ea:	4a13      	ldr	r2, [pc, #76]	; (8001838 <MX_I2C3_Init+0x54>)
 80017ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_I2C3_Init+0x50>)
 80017f0:	4a12      	ldr	r2, [pc, #72]	; (800183c <MX_I2C3_Init+0x58>)
 80017f2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <MX_I2C3_Init+0x50>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_I2C3_Init+0x50>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_I2C3_Init+0x50>)
 8001802:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001806:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <MX_I2C3_Init+0x50>)
 800180a:	2200      	movs	r2, #0
 800180c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_I2C3_Init+0x50>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <MX_I2C3_Init+0x50>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_I2C3_Init+0x50>)
 800181c:	2200      	movs	r2, #0
 800181e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <MX_I2C3_Init+0x50>)
 8001822:	f003 fefd 	bl	8005620 <HAL_I2C_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800182c:	f000 fb58 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000220 	.word	0x20000220
 8001838:	40005c00 	.word	0x40005c00
 800183c:	00061a80 	.word	0x00061a80

08001840 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a29      	ldr	r2, [pc, #164]	; (8001904 <HAL_I2C_MspInit+0xc4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d14b      	bne.n	80018fa <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b28      	ldr	r3, [pc, #160]	; (8001908 <HAL_I2C_MspInit+0xc8>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a27      	ldr	r2, [pc, #156]	; (8001908 <HAL_I2C_MspInit+0xc8>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b25      	ldr	r3, [pc, #148]	; (8001908 <HAL_I2C_MspInit+0xc8>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b21      	ldr	r3, [pc, #132]	; (8001908 <HAL_I2C_MspInit+0xc8>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a20      	ldr	r2, [pc, #128]	; (8001908 <HAL_I2C_MspInit+0xc8>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <HAL_I2C_MspInit+0xc8>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800189a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800189e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a0:	2312      	movs	r3, #18
 80018a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018ac:	2304      	movs	r3, #4
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4815      	ldr	r0, [pc, #84]	; (800190c <HAL_I2C_MspInit+0xcc>)
 80018b8:	f002 f80e 	bl	80038d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c2:	2312      	movs	r3, #18
 80018c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ca:	2303      	movs	r3, #3
 80018cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018ce:	2304      	movs	r3, #4
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	480d      	ldr	r0, [pc, #52]	; (8001910 <HAL_I2C_MspInit+0xd0>)
 80018da:	f001 fffd 	bl	80038d8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_I2C_MspInit+0xc8>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a08      	ldr	r2, [pc, #32]	; (8001908 <HAL_I2C_MspInit+0xc8>)
 80018e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_I2C_MspInit+0xc8>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80018fa:	bf00      	nop
 80018fc:	3728      	adds	r7, #40	; 0x28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40005c00 	.word	0x40005c00
 8001908:	40023800 	.word	0x40023800
 800190c:	40020800 	.word	0x40020800
 8001910:	40020000 	.word	0x40020000

08001914 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <HAL_I2C_MspDeInit+0x3c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d10f      	bne.n	8001946 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_I2C_MspDeInit+0x40>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <HAL_I2C_MspDeInit+0x40>)
 800192c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001930:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8001932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001936:	4808      	ldr	r0, [pc, #32]	; (8001958 <HAL_I2C_MspDeInit+0x44>)
 8001938:	f002 f952 	bl	8003be0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 800193c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001940:	4806      	ldr	r0, [pc, #24]	; (800195c <HAL_I2C_MspDeInit+0x48>)
 8001942:	f002 f94d 	bl	8003be0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40005c00 	.word	0x40005c00
 8001954:	40023800 	.word	0x40023800
 8001958:	40020800 	.word	0x40020800
 800195c:	40020000 	.word	0x40020000

08001960 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <MX_I2S3_Init+0x54>)
 8001966:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <MX_I2S3_Init+0x58>)
 8001968:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <MX_I2S3_Init+0x54>)
 800196c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001970:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <MX_I2S3_Init+0x54>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <MX_I2S3_Init+0x54>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <MX_I2S3_Init+0x54>)
 8001980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001984:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <MX_I2S3_Init+0x54>)
 8001988:	f64a 4244 	movw	r2, #44100	; 0xac44
 800198c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_I2S3_Init+0x54>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <MX_I2S3_Init+0x54>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_I2S3_Init+0x54>)
 800199c:	2200      	movs	r2, #0
 800199e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80019a0:	4804      	ldr	r0, [pc, #16]	; (80019b4 <MX_I2S3_Init+0x54>)
 80019a2:	f005 f8e9 	bl	8006b78 <HAL_I2S_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80019ac:	f000 fa98 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000274 	.word	0x20000274
 80019b8:	40003c00 	.word	0x40003c00

080019bc <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b090      	sub	sp, #64	; 0x40
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
 80019e4:	615a      	str	r2, [r3, #20]
  if(i2sHandle->Instance==SPI3)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a4f      	ldr	r2, [pc, #316]	; (8001b28 <HAL_I2S_MspInit+0x16c>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	f040 8097 	bne.w	8001b20 <HAL_I2S_MspInit+0x164>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80019f2:	2301      	movs	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80019f6:	23c8      	movs	r3, #200	; 0xc8
 80019f8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80019fa:	2305      	movs	r3, #5
 80019fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80019fe:	2302      	movs	r3, #2
 8001a00:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4618      	mov	r0, r3
 8001a08:	f006 fdee 	bl	80085e8 <HAL_RCCEx_PeriphCLKConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8001a12:	f000 fa65 	bl	8001ee0 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b44      	ldr	r3, [pc, #272]	; (8001b2c <HAL_I2S_MspInit+0x170>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	4a43      	ldr	r2, [pc, #268]	; (8001b2c <HAL_I2S_MspInit+0x170>)
 8001a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a24:	6413      	str	r3, [r2, #64]	; 0x40
 8001a26:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <HAL_I2S_MspInit+0x170>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <HAL_I2S_MspInit+0x170>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a3c      	ldr	r2, [pc, #240]	; (8001b2c <HAL_I2S_MspInit+0x170>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <HAL_I2S_MspInit+0x170>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	4b36      	ldr	r3, [pc, #216]	; (8001b2c <HAL_I2S_MspInit+0x170>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a35      	ldr	r2, [pc, #212]	; (8001b2c <HAL_I2S_MspInit+0x170>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <HAL_I2S_MspInit+0x170>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a6a:	2310      	movs	r3, #16
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a7a:	2306      	movs	r3, #6
 8001a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a82:	4619      	mov	r1, r3
 8001a84:	482a      	ldr	r0, [pc, #168]	; (8001b30 <HAL_I2S_MspInit+0x174>)
 8001a86:	f001 ff27 	bl	80038d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001a8a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a9c:	2306      	movs	r3, #6
 8001a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4823      	ldr	r0, [pc, #140]	; (8001b34 <HAL_I2S_MspInit+0x178>)
 8001aa8:	f001 ff16 	bl	80038d8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001aac:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001aae:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <HAL_I2S_MspInit+0x180>)
 8001ab0:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001ab2:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001aba:	2240      	movs	r2, #64	; 0x40
 8001abc:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001abe:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001ac6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aca:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001ace:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ad2:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001ad6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ada:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001adc:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ae2:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001ae6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001aea:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001aee:	2204      	movs	r2, #4
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001af4:	2203      	movs	r2, #3
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001b04:	480c      	ldr	r0, [pc, #48]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001b06:	f001 fa87 	bl	8003018 <HAL_DMA_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_I2S_MspInit+0x158>
    {
      Error_Handler();
 8001b10:	f000 f9e6 	bl	8001ee0 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a08      	ldr	r2, [pc, #32]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001b18:	639a      	str	r2, [r3, #56]	; 0x38
 8001b1a:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_I2S_MspInit+0x17c>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001b20:	bf00      	nop
 8001b22:	3740      	adds	r7, #64	; 0x40
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40003c00 	.word	0x40003c00
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40020800 	.word	0x40020800
 8001b38:	200002bc 	.word	0x200002bc
 8001b3c:	40026088 	.word	0x40026088

08001b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b46:	f001 f8bf 	bl	8002cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b4a:	f000 f913 	bl	8001d74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b4e:	f7ff fd7f 	bl	8001650 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b52:	f7ff fd3f 	bl	80015d4 <MX_DMA_Init>
  MX_I2S3_Init();
 8001b56:	f7ff ff03 	bl	8001960 <MX_I2S3_Init>
  MX_FATFS_Init();
 8001b5a:	f008 fe35 	bl	800a7c8 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001b5e:	f00f fa45 	bl	8010fec <MX_USB_HOST_Init>
  MX_USART1_UART_Init();
 8001b62:	f000 fdaf 	bl	80026c4 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8001b66:	f7ff fe3d 	bl	80017e4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8001b6a:	f000 f9f3 	bl	8001f54 <SSD1306_Init>
  HAL_UART_Receive_IT(&huart1, &uart_rx_byte, 1);
 8001b6e:	2201      	movs	r2, #1
 8001b70:	4974      	ldr	r1, [pc, #464]	; (8001d44 <main+0x204>)
 8001b72:	4875      	ldr	r0, [pc, #468]	; (8001d48 <main+0x208>)
 8001b74:	f006 ff17 	bl	80089a6 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001b78:	f00f fa5e 	bl	8011038 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

   	    if (Appli_state == APPLICATION_READY)
 8001b7c:	4b73      	ldr	r3, [pc, #460]	; (8001d4c <main+0x20c>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d1f9      	bne.n	8001b78 <main+0x38>
   	    {
   	    	Mount_USB();
 8001b84:	f7ff f91a 	bl	8000dbc <Mount_USB>
   	    	AUDIO_PLAYER_Start(idx);
 8001b88:	4b71      	ldr	r3, [pc, #452]	; (8001d50 <main+0x210>)
 8001b8a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 feaf 	bl	80028f4 <AUDIO_PLAYER_Start>
   	    	display_cancion(idx);
 8001b96:	4b6e      	ldr	r3, [pc, #440]	; (8001d50 <main+0x210>)
 8001b98:	f993 3000 	ldrsb.w	r3, [r3]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fc4f 	bl	8001440 <display_cancion>
   	    	Activar_Parlante(idS);
 8001ba2:	4b6c      	ldr	r3, [pc, #432]	; (8001d54 <main+0x214>)
 8001ba4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 f99e 	bl	8001eec <Activar_Parlante>
   	    	while (1)
   	    	{
   	    		AUDIO_PLAYER_Process(TRUE,idx);
 8001bb0:	4b67      	ldr	r3, [pc, #412]	; (8001d50 <main+0x210>)
 8001bb2:	f993 3000 	ldrsb.w	r3, [r3]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	4619      	mov	r1, r3
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f000 fefa 	bl	80029b4 <AUDIO_PLAYER_Process>


   	    		if (uart_cmd_received)
 8001bc0:	4b65      	ldr	r3, [pc, #404]	; (8001d58 <main+0x218>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d021      	beq.n	8001c0e <main+0xce>
   	    		{
   	    		    uart_cmd_received = false;
 8001bca:	4b63      	ldr	r3, [pc, #396]	; (8001d58 <main+0x218>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]

   	    		    if (uart_rx_byte >= '0' && uart_rx_byte <= '9')
 8001bd0:	4b5c      	ldr	r3, [pc, #368]	; (8001d44 <main+0x204>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b2f      	cmp	r3, #47	; 0x2f
 8001bd6:	d91a      	bls.n	8001c0e <main+0xce>
 8001bd8:	4b5a      	ldr	r3, [pc, #360]	; (8001d44 <main+0x204>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b39      	cmp	r3, #57	; 0x39
 8001bde:	d816      	bhi.n	8001c0e <main+0xce>
   	    		    {
   	    		        int nuevo_idx = uart_rx_byte - '0';
 8001be0:	4b58      	ldr	r3, [pc, #352]	; (8001d44 <main+0x204>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	3b30      	subs	r3, #48	; 0x30
 8001be6:	607b      	str	r3, [r7, #4]
   	    		        if (nuevo_idx < cantidad_wavs)
 8001be8:	4b5c      	ldr	r3, [pc, #368]	; (8001d5c <main+0x21c>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	da0c      	bge.n	8001c0e <main+0xce>
   	    		        {
   	    		            idx = nuevo_idx;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	b25a      	sxtb	r2, r3
 8001bf8:	4b55      	ldr	r3, [pc, #340]	; (8001d50 <main+0x210>)
 8001bfa:	701a      	strb	r2, [r3, #0]
   	    		            AudioState = AUDIO_STATE_NEXT;
 8001bfc:	4b58      	ldr	r3, [pc, #352]	; (8001d60 <main+0x220>)
 8001bfe:	2205      	movs	r2, #5
 8001c00:	701a      	strb	r2, [r3, #0]
   	    		            display_cancion(idx);
 8001c02:	4b53      	ldr	r3, [pc, #332]	; (8001d50 <main+0x210>)
 8001c04:	f993 3000 	ldrsb.w	r3, [r3]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fc19 	bl	8001440 <display_cancion>
   	    		        }
   	    		    }
   	    		}

   	    		if (next_song)
 8001c0e:	4b55      	ldr	r3, [pc, #340]	; (8001d64 <main+0x224>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d022      	beq.n	8001c5c <main+0x11c>
   	    		{
   	    			AudioState = AUDIO_STATE_PAUSE;
 8001c16:	4b52      	ldr	r3, [pc, #328]	; (8001d60 <main+0x220>)
 8001c18:	220a      	movs	r2, #10
 8001c1a:	701a      	strb	r2, [r3, #0]
   	    			idx = idx + 1;
 8001c1c:	4b4c      	ldr	r3, [pc, #304]	; (8001d50 <main+0x210>)
 8001c1e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	3301      	adds	r3, #1
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	b25a      	sxtb	r2, r3
 8001c2a:	4b49      	ldr	r3, [pc, #292]	; (8001d50 <main+0x210>)
 8001c2c:	701a      	strb	r2, [r3, #0]
   	    			/* Control de indice */
   	    			if(idx>(cantidad_wavs-1))
 8001c2e:	4b4b      	ldr	r3, [pc, #300]	; (8001d5c <main+0x21c>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b46      	ldr	r3, [pc, #280]	; (8001d50 <main+0x210>)
 8001c36:	f993 3000 	ldrsb.w	r3, [r3]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	dc02      	bgt.n	8001c44 <main+0x104>
   	    			{
   	    				idx = 0;
 8001c3e:	4b44      	ldr	r3, [pc, #272]	; (8001d50 <main+0x210>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
   	    			}
   	    			next_song = false;
 8001c44:	4b47      	ldr	r3, [pc, #284]	; (8001d64 <main+0x224>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
   	    			display_cancion(idx);
 8001c4a:	4b41      	ldr	r3, [pc, #260]	; (8001d50 <main+0x210>)
 8001c4c:	f993 3000 	ldrsb.w	r3, [r3]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fbf5 	bl	8001440 <display_cancion>
   	    			AudioState = AUDIO_STATE_NEXT;
 8001c56:	4b42      	ldr	r3, [pc, #264]	; (8001d60 <main+0x220>)
 8001c58:	2205      	movs	r2, #5
 8001c5a:	701a      	strb	r2, [r3, #0]
      	    		};

   	    		if (next_speaker)
 8001c5c:	4b42      	ldr	r3, [pc, #264]	; (8001d68 <main+0x228>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d023      	beq.n	8001cac <main+0x16c>
   	    		{
   	    			idS = idS + 1;
 8001c64:	4b3b      	ldr	r3, [pc, #236]	; (8001d54 <main+0x214>)
 8001c66:	f993 3000 	ldrsb.w	r3, [r3]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	b25a      	sxtb	r2, r3
 8001c72:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <main+0x214>)
 8001c74:	701a      	strb	r2, [r3, #0]
   	    			/* Control de indice */
   	    			if(idS>NUM_PARLANTES - 1)
 8001c76:	4b37      	ldr	r3, [pc, #220]	; (8001d54 <main+0x214>)
 8001c78:	f993 3000 	ldrsb.w	r3, [r3]
 8001c7c:	2b05      	cmp	r3, #5
 8001c7e:	dd02      	ble.n	8001c86 <main+0x146>
   	    			{
   	    				idS = 0;
 8001c80:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <main+0x214>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
   	    			}
   	    			Activar_Parlante(idS);
 8001c86:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <main+0x214>)
 8001c88:	f993 3000 	ldrsb.w	r3, [r3]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f92c 	bl	8001eec <Activar_Parlante>
   	    			next_speaker = false;
 8001c94:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <main+0x228>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
   	    			display_cancion(idx);
 8001c9a:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <main+0x210>)
 8001c9c:	f993 3000 	ldrsb.w	r3, [r3]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fbcd 	bl	8001440 <display_cancion>
   	    			AudioState = AUDIO_STATE_PLAY;
 8001ca6:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <main+0x220>)
 8001ca8:	2203      	movs	r2, #3
 8001caa:	701a      	strb	r2, [r3, #0]
   	    		}

   	    		if (prev_song)
 8001cac:	4b2f      	ldr	r3, [pc, #188]	; (8001d6c <main+0x22c>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d020      	beq.n	8001cf6 <main+0x1b6>
   	    		{
   	    			idx = idx - 1;
 8001cb4:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <main+0x210>)
 8001cb6:	f993 3000 	ldrsb.w	r3, [r3]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	b25a      	sxtb	r2, r3
 8001cc2:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <main+0x210>)
 8001cc4:	701a      	strb	r2, [r3, #0]
   	    			/* Control de indice */
   	    			if(idx<0)
 8001cc6:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <main+0x210>)
 8001cc8:	f993 3000 	ldrsb.w	r3, [r3]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	da06      	bge.n	8001cde <main+0x19e>
   	    			{
   	    				idx = cantidad_wavs-1;
 8001cd0:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <main+0x21c>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	b25a      	sxtb	r2, r3
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <main+0x210>)
 8001cdc:	701a      	strb	r2, [r3, #0]
   	    			}
   	    			AudioState = AUDIO_STATE_PREVIOUS;
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <main+0x220>)
 8001ce0:	2206      	movs	r2, #6
 8001ce2:	701a      	strb	r2, [r3, #0]
   	    			prev_song = false;
 8001ce4:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <main+0x22c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
   	    			display_cancion(idx);
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <main+0x210>)
 8001cec:	f993 3000 	ldrsb.w	r3, [r3]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fba5 	bl	8001440 <display_cancion>
   	    		};

   	    		if (prev_speaker)
 8001cf6:	4b1e      	ldr	r3, [pc, #120]	; (8001d70 <main+0x230>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f43f af58 	beq.w	8001bb0 <main+0x70>

   	    		{
   	    			idS = idS - 1;
 8001d00:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <main+0x214>)
 8001d02:	f993 3000 	ldrsb.w	r3, [r3]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	b25a      	sxtb	r2, r3
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <main+0x214>)
 8001d10:	701a      	strb	r2, [r3, #0]
   	    			/* Control de indice */
   	    			if(idS<0)
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <main+0x214>)
 8001d14:	f993 3000 	ldrsb.w	r3, [r3]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	da02      	bge.n	8001d22 <main+0x1e2>
   	    			{
   	    				idS = NUM_PARLANTES - 1;
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <main+0x214>)
 8001d1e:	2205      	movs	r2, #5
 8001d20:	701a      	strb	r2, [r3, #0]
   	    			}
   	    			Activar_Parlante(idS);
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <main+0x214>)
 8001d24:	f993 3000 	ldrsb.w	r3, [r3]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f8de 	bl	8001eec <Activar_Parlante>
   	    			prev_speaker = false;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <main+0x230>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
   	    			display_cancion(idx);
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <main+0x210>)
 8001d38:	f993 3000 	ldrsb.w	r3, [r3]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fb7f 	bl	8001440 <display_cancion>
   	    		AUDIO_PLAYER_Process(TRUE,idx);
 8001d42:	e735      	b.n	8001bb0 <main+0x70>
 8001d44:	2000031c 	.word	0x2000031c
 8001d48:	20000730 	.word	0x20000730
 8001d4c:	200026c4 	.word	0x200026c4
 8001d50:	20000322 	.word	0x20000322
 8001d54:	20000323 	.word	0x20000323
 8001d58:	2000031d 	.word	0x2000031d
 8001d5c:	20000048 	.word	0x20000048
 8001d60:	2000183c 	.word	0x2000183c
 8001d64:	2000031e 	.word	0x2000031e
 8001d68:	20000320 	.word	0x20000320
 8001d6c:	2000031f 	.word	0x2000031f
 8001d70:	20000321 	.word	0x20000321

08001d74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b094      	sub	sp, #80	; 0x50
 8001d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d7a:	f107 0320 	add.w	r3, r7, #32
 8001d7e:	2230      	movs	r2, #48	; 0x30
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f00f fd26 	bl	80117d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d88:	f107 030c 	add.w	r3, r7, #12
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	4b27      	ldr	r3, [pc, #156]	; (8001e3c <SystemClock_Config+0xc8>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	4a26      	ldr	r2, [pc, #152]	; (8001e3c <SystemClock_Config+0xc8>)
 8001da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da6:	6413      	str	r3, [r2, #64]	; 0x40
 8001da8:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <SystemClock_Config+0xc8>)
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001db4:	2300      	movs	r3, #0
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <SystemClock_Config+0xcc>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a20      	ldr	r2, [pc, #128]	; (8001e40 <SystemClock_Config+0xcc>)
 8001dbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <SystemClock_Config+0xcc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001de4:	2304      	movs	r3, #4
 8001de6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001de8:	23c0      	movs	r3, #192	; 0xc0
 8001dea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001dec:	2304      	movs	r3, #4
 8001dee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001df0:	2308      	movs	r3, #8
 8001df2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df4:	f107 0320 	add.w	r3, r7, #32
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f005 ff5d 	bl	8007cb8 <HAL_RCC_OscConfig>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e04:	f000 f86c 	bl	8001ee0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e08:	230f      	movs	r3, #15
 8001e0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e1e:	f107 030c 	add.w	r3, r7, #12
 8001e22:	2103      	movs	r1, #3
 8001e24:	4618      	mov	r0, r3
 8001e26:	f006 f9bf 	bl	80081a8 <HAL_RCC_ClockConfig>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e30:	f000 f856 	bl	8001ee0 <Error_Handler>
  }
}
 8001e34:	bf00      	nop
 8001e36:	3750      	adds	r7, #80	; 0x50
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40007000 	.word	0x40007000

08001e44 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)  // Cambiá esto si usás otro UART
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a07      	ldr	r2, [pc, #28]	; (8001e70 <HAL_UART_RxCpltCallback+0x2c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d107      	bne.n	8001e66 <HAL_UART_RxCpltCallback+0x22>
    {
        uart_cmd_received = true;
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <HAL_UART_RxCpltCallback+0x30>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	701a      	strb	r2, [r3, #0]

        // Reinicia la recepción para recibir el próximo byte
        HAL_UART_Receive_IT(&huart1, &uart_rx_byte, 1);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	4906      	ldr	r1, [pc, #24]	; (8001e78 <HAL_UART_RxCpltCallback+0x34>)
 8001e60:	4806      	ldr	r0, [pc, #24]	; (8001e7c <HAL_UART_RxCpltCallback+0x38>)
 8001e62:	f006 fda0 	bl	80089a6 <HAL_UART_Receive_IT>
    }
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40011000 	.word	0x40011000
 8001e74:	2000031d 	.word	0x2000031d
 8001e78:	2000031c 	.word	0x2000031c
 8001e7c:	20000730 	.word	0x20000730

08001e80 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == PD15_Pin)
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e90:	d102      	bne.n	8001e98 <HAL_GPIO_EXTI_Callback+0x18>
	{
		next_song = true;
 8001e92:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x50>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == PD13_Pin)
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e9e:	d102      	bne.n	8001ea6 <HAL_GPIO_EXTI_Callback+0x26>
	{
		next_speaker = true;
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x54>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == PD11_Pin)
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001eac:	d102      	bne.n	8001eb4 <HAL_GPIO_EXTI_Callback+0x34>
	{
		prev_speaker = true;
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == PD9_Pin)
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eba:	d102      	bne.n	8001ec2 <HAL_GPIO_EXTI_Callback+0x42>
	{
		prev_song = true;
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <HAL_GPIO_EXTI_Callback+0x5c>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	701a      	strb	r2, [r3, #0]
	}
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	2000031e 	.word	0x2000031e
 8001ed4:	20000320 	.word	0x20000320
 8001ed8:	20000321 	.word	0x20000321
 8001edc:	2000031f 	.word	0x2000031f

08001ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee4:	b672      	cpsid	i
}
 8001ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <Error_Handler+0x8>
	...

08001eec <Activar_Parlante>:
};


void Parlantes_Init(void) {}

void Activar_Parlante(uint8_t numero) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < NUM_PARLANTES; i++) {
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e021      	b.n	8001f40 <Activar_Parlante+0x54>
        if (i == (numero)) {
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d10d      	bne.n	8001f20 <Activar_Parlante+0x34>
            HAL_GPIO_WritePin(parlantes[i].puerto, parlantes[i].pin, GPIO_PIN_RESET);
 8001f04:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <Activar_Parlante+0x64>)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001f0c:	4a10      	ldr	r2, [pc, #64]	; (8001f50 <Activar_Parlante+0x64>)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4413      	add	r3, r2
 8001f14:	889b      	ldrh	r3, [r3, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f001 ff45 	bl	8003da8 <HAL_GPIO_WritePin>
 8001f1e:	e00c      	b.n	8001f3a <Activar_Parlante+0x4e>
        } else {
            HAL_GPIO_WritePin(parlantes[i].puerto, parlantes[i].pin, GPIO_PIN_SET);
 8001f20:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <Activar_Parlante+0x64>)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001f28:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <Activar_Parlante+0x64>)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4413      	add	r3, r2
 8001f30:	889b      	ldrh	r3, [r3, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	4619      	mov	r1, r3
 8001f36:	f001 ff37 	bl	8003da8 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_PARLANTES; i++) {
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b05      	cmp	r3, #5
 8001f44:	ddda      	ble.n	8001efc <Activar_Parlante+0x10>
        }
    }
}
 8001f46:	bf00      	nop
 8001f48:	bf00      	nop
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	2000004c 	.word	0x2000004c

08001f54 <SSD1306_Init>:
        }
    }
}

uint8_t SSD1306_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
	SSD1306_I2C_Init();
 8001f5a:	f000 fa29 	bl	80023b0 <SSD1306_I2C_Init>
	if(HAL_I2C_IsDeviceReady(&hi2c3, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK){
 8001f5e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001f62:	2201      	movs	r2, #1
 8001f64:	2178      	movs	r1, #120	; 0x78
 8001f66:	485b      	ldr	r0, [pc, #364]	; (80020d4 <SSD1306_Init+0x180>)
 8001f68:	f004 f8ec 	bl	8006144 <HAL_I2C_IsDeviceReady>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <SSD1306_Init+0x22>
		return 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e0a9      	b.n	80020ca <SSD1306_Init+0x176>
	}

	uint32_t p = 2500;
 8001f76:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001f7a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f7c:	e002      	b.n	8001f84 <SSD1306_Init+0x30>
		p--;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f9      	bne.n	8001f7e <SSD1306_Init+0x2a>

	SSD1306_WRITECOMMAND(0xAE);
 8001f8a:	22ae      	movs	r2, #174	; 0xae
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2078      	movs	r0, #120	; 0x78
 8001f90:	f000 fa8a 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8001f94:	2220      	movs	r2, #32
 8001f96:	2100      	movs	r1, #0
 8001f98:	2078      	movs	r0, #120	; 0x78
 8001f9a:	f000 fa85 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001f9e:	2210      	movs	r2, #16
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	2078      	movs	r0, #120	; 0x78
 8001fa4:	f000 fa80 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 8001fa8:	22b0      	movs	r2, #176	; 0xb0
 8001faa:	2100      	movs	r1, #0
 8001fac:	2078      	movs	r0, #120	; 0x78
 8001fae:	f000 fa7b 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 8001fb2:	22c8      	movs	r2, #200	; 0xc8
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2078      	movs	r0, #120	; 0x78
 8001fb8:	f000 fa76 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	2078      	movs	r0, #120	; 0x78
 8001fc2:	f000 fa71 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001fc6:	2210      	movs	r2, #16
 8001fc8:	2100      	movs	r1, #0
 8001fca:	2078      	movs	r0, #120	; 0x78
 8001fcc:	f000 fa6c 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 8001fd0:	2240      	movs	r2, #64	; 0x40
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	2078      	movs	r0, #120	; 0x78
 8001fd6:	f000 fa67 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 8001fda:	2281      	movs	r2, #129	; 0x81
 8001fdc:	2100      	movs	r1, #0
 8001fde:	2078      	movs	r0, #120	; 0x78
 8001fe0:	f000 fa62 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001fe4:	22ff      	movs	r2, #255	; 0xff
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	2078      	movs	r0, #120	; 0x78
 8001fea:	f000 fa5d 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 8001fee:	22a1      	movs	r2, #161	; 0xa1
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	2078      	movs	r0, #120	; 0x78
 8001ff4:	f000 fa58 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 8001ff8:	22a6      	movs	r2, #166	; 0xa6
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	2078      	movs	r0, #120	; 0x78
 8001ffe:	f000 fa53 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 8002002:	22a8      	movs	r2, #168	; 0xa8
 8002004:	2100      	movs	r1, #0
 8002006:	2078      	movs	r0, #120	; 0x78
 8002008:	f000 fa4e 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 800200c:	223f      	movs	r2, #63	; 0x3f
 800200e:	2100      	movs	r1, #0
 8002010:	2078      	movs	r0, #120	; 0x78
 8002012:	f000 fa49 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 8002016:	22a4      	movs	r2, #164	; 0xa4
 8002018:	2100      	movs	r1, #0
 800201a:	2078      	movs	r0, #120	; 0x78
 800201c:	f000 fa44 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 8002020:	22d3      	movs	r2, #211	; 0xd3
 8002022:	2100      	movs	r1, #0
 8002024:	2078      	movs	r0, #120	; 0x78
 8002026:	f000 fa3f 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 800202a:	2200      	movs	r2, #0
 800202c:	2100      	movs	r1, #0
 800202e:	2078      	movs	r0, #120	; 0x78
 8002030:	f000 fa3a 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 8002034:	22d5      	movs	r2, #213	; 0xd5
 8002036:	2100      	movs	r1, #0
 8002038:	2078      	movs	r0, #120	; 0x78
 800203a:	f000 fa35 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 800203e:	22f0      	movs	r2, #240	; 0xf0
 8002040:	2100      	movs	r1, #0
 8002042:	2078      	movs	r0, #120	; 0x78
 8002044:	f000 fa30 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 8002048:	22d9      	movs	r2, #217	; 0xd9
 800204a:	2100      	movs	r1, #0
 800204c:	2078      	movs	r0, #120	; 0x78
 800204e:	f000 fa2b 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 8002052:	2222      	movs	r2, #34	; 0x22
 8002054:	2100      	movs	r1, #0
 8002056:	2078      	movs	r0, #120	; 0x78
 8002058:	f000 fa26 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 800205c:	22da      	movs	r2, #218	; 0xda
 800205e:	2100      	movs	r1, #0
 8002060:	2078      	movs	r0, #120	; 0x78
 8002062:	f000 fa21 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002066:	2212      	movs	r2, #18
 8002068:	2100      	movs	r1, #0
 800206a:	2078      	movs	r0, #120	; 0x78
 800206c:	f000 fa1c 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 8002070:	22db      	movs	r2, #219	; 0xdb
 8002072:	2100      	movs	r1, #0
 8002074:	2078      	movs	r0, #120	; 0x78
 8002076:	f000 fa17 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 800207a:	2220      	movs	r2, #32
 800207c:	2100      	movs	r1, #0
 800207e:	2078      	movs	r0, #120	; 0x78
 8002080:	f000 fa12 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 8002084:	228d      	movs	r2, #141	; 0x8d
 8002086:	2100      	movs	r1, #0
 8002088:	2078      	movs	r0, #120	; 0x78
 800208a:	f000 fa0d 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 800208e:	2214      	movs	r2, #20
 8002090:	2100      	movs	r1, #0
 8002092:	2078      	movs	r0, #120	; 0x78
 8002094:	f000 fa08 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 8002098:	22af      	movs	r2, #175	; 0xaf
 800209a:	2100      	movs	r1, #0
 800209c:	2078      	movs	r0, #120	; 0x78
 800209e:	f000 fa03 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80020a2:	222e      	movs	r2, #46	; 0x2e
 80020a4:	2100      	movs	r1, #0
 80020a6:	2078      	movs	r0, #120	; 0x78
 80020a8:	f000 f9fe 	bl	80024a8 <SSD1306_I2C_Write>
	SSD1306_Fill(BLACK);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f000 f843 	bl	8002138 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80020b2:	f000 f813 	bl	80020dc <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <SSD1306_Init+0x184>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <SSD1306_Init+0x184>)
 80020be:	2200      	movs	r2, #0
 80020c0:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <SSD1306_Init+0x184>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	715a      	strb	r2, [r3, #5]
	return 1;
 80020c8:	2301      	movs	r3, #1
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000220 	.word	0x20000220
 80020d8:	20000724 	.word	0x20000724

080020dc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
	uint8_t m;
	for(m=0; m<8; m++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	71fb      	strb	r3, [r7, #7]
 80020e6:	e01d      	b.n	8002124 <SSD1306_UpdateScreen+0x48>
	{
		SSD1306_WRITECOMMAND(0xB0 + m);
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	3b50      	subs	r3, #80	; 0x50
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	461a      	mov	r2, r3
 80020f0:	2100      	movs	r1, #0
 80020f2:	2078      	movs	r0, #120	; 0x78
 80020f4:	f000 f9d8 	bl	80024a8 <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2100      	movs	r1, #0
 80020fc:	2078      	movs	r0, #120	; 0x78
 80020fe:	f000 f9d3 	bl	80024a8 <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002102:	2210      	movs	r2, #16
 8002104:	2100      	movs	r1, #0
 8002106:	2078      	movs	r0, #120	; 0x78
 8002108:	f000 f9ce 	bl	80024a8 <SSD1306_I2C_Write>
		SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	01db      	lsls	r3, r3, #7
 8002110:	4a08      	ldr	r2, [pc, #32]	; (8002134 <SSD1306_UpdateScreen+0x58>)
 8002112:	441a      	add	r2, r3
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	2140      	movs	r1, #64	; 0x40
 8002118:	2078      	movs	r0, #120	; 0x78
 800211a:	f000 f95f 	bl	80023dc <SSD1306_I2C_WriteMulti>
	for(m=0; m<8; m++)
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	3301      	adds	r3, #1
 8002122:	71fb      	strb	r3, [r7, #7]
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	2b07      	cmp	r3, #7
 8002128:	d9de      	bls.n	80020e8 <SSD1306_UpdateScreen+0xc>
	}
}
 800212a:	bf00      	nop
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000324 	.word	0x20000324

08002138 <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <SSD1306_Fill+0x14>
 8002148:	2300      	movs	r3, #0
 800214a:	e000      	b.n	800214e <SSD1306_Fill+0x16>
 800214c:	23ff      	movs	r3, #255	; 0xff
 800214e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002152:	4619      	mov	r1, r3
 8002154:	4803      	ldr	r0, [pc, #12]	; (8002164 <SSD1306_Fill+0x2c>)
 8002156:	f00f fb3d 	bl	80117d4 <memset>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000324 	.word	0x20000324

08002168 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	80fb      	strh	r3, [r7, #6]
 8002172:	460b      	mov	r3, r1
 8002174:	80bb      	strh	r3, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	70fb      	strb	r3, [r7, #3]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	2b7f      	cmp	r3, #127	; 0x7f
 800217e:	d848      	bhi.n	8002212 <SSD1306_DrawPixel+0xaa>
 8002180:	88bb      	ldrh	r3, [r7, #4]
 8002182:	2b3f      	cmp	r3, #63	; 0x3f
 8002184:	d845      	bhi.n	8002212 <SSD1306_DrawPixel+0xaa>
		return;
	}

	if(SSD1306.Inverted){
 8002186:	4b26      	ldr	r3, [pc, #152]	; (8002220 <SSD1306_DrawPixel+0xb8>)
 8002188:	791b      	ldrb	r3, [r3, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d006      	beq.n	800219c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	70fb      	strb	r3, [r7, #3]
	}

	if(color == WHITE){
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d11a      	bne.n	80021d8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80021a2:	88fa      	ldrh	r2, [r7, #6]
 80021a4:	88bb      	ldrh	r3, [r7, #4]
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	b298      	uxth	r0, r3
 80021aa:	4603      	mov	r3, r0
 80021ac:	01db      	lsls	r3, r3, #7
 80021ae:	4413      	add	r3, r2
 80021b0:	4a1c      	ldr	r2, [pc, #112]	; (8002224 <SSD1306_DrawPixel+0xbc>)
 80021b2:	5cd3      	ldrb	r3, [r2, r3]
 80021b4:	b25a      	sxtb	r2, r3
 80021b6:	88bb      	ldrh	r3, [r7, #4]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	2101      	movs	r1, #1
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	b25b      	sxtb	r3, r3
 80021c4:	4313      	orrs	r3, r2
 80021c6:	b259      	sxtb	r1, r3
 80021c8:	88fa      	ldrh	r2, [r7, #6]
 80021ca:	4603      	mov	r3, r0
 80021cc:	01db      	lsls	r3, r3, #7
 80021ce:	4413      	add	r3, r2
 80021d0:	b2c9      	uxtb	r1, r1
 80021d2:	4a14      	ldr	r2, [pc, #80]	; (8002224 <SSD1306_DrawPixel+0xbc>)
 80021d4:	54d1      	strb	r1, [r2, r3]
 80021d6:	e01d      	b.n	8002214 <SSD1306_DrawPixel+0xac>
	}else{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80021d8:	88fa      	ldrh	r2, [r7, #6]
 80021da:	88bb      	ldrh	r3, [r7, #4]
 80021dc:	08db      	lsrs	r3, r3, #3
 80021de:	b298      	uxth	r0, r3
 80021e0:	4603      	mov	r3, r0
 80021e2:	01db      	lsls	r3, r3, #7
 80021e4:	4413      	add	r3, r2
 80021e6:	4a0f      	ldr	r2, [pc, #60]	; (8002224 <SSD1306_DrawPixel+0xbc>)
 80021e8:	5cd3      	ldrb	r3, [r2, r3]
 80021ea:	b25a      	sxtb	r2, r3
 80021ec:	88bb      	ldrh	r3, [r7, #4]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	2101      	movs	r1, #1
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	b25b      	sxtb	r3, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	b25b      	sxtb	r3, r3
 80021fe:	4013      	ands	r3, r2
 8002200:	b259      	sxtb	r1, r3
 8002202:	88fa      	ldrh	r2, [r7, #6]
 8002204:	4603      	mov	r3, r0
 8002206:	01db      	lsls	r3, r3, #7
 8002208:	4413      	add	r3, r2
 800220a:	b2c9      	uxtb	r1, r1
 800220c:	4a05      	ldr	r2, [pc, #20]	; (8002224 <SSD1306_DrawPixel+0xbc>)
 800220e:	54d1      	strb	r1, [r2, r3]
 8002210:	e000      	b.n	8002214 <SSD1306_DrawPixel+0xac>
		return;
 8002212:	bf00      	nop
	}
}
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000724 	.word	0x20000724
 8002224:	20000324 	.word	0x20000324

08002228 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	460a      	mov	r2, r1
 8002232:	80fb      	strh	r3, [r7, #6]
 8002234:	4613      	mov	r3, r2
 8002236:	80bb      	strh	r3, [r7, #4]
	SSD1306.CurrentX = x;
 8002238:	4a05      	ldr	r2, [pc, #20]	; (8002250 <SSD1306_GotoXY+0x28>)
 800223a:	88fb      	ldrh	r3, [r7, #6]
 800223c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800223e:	4a04      	ldr	r2, [pc, #16]	; (8002250 <SSD1306_GotoXY+0x28>)
 8002240:	88bb      	ldrh	r3, [r7, #4]
 8002242:	8053      	strh	r3, [r2, #2]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	20000724 	.word	0x20000724

08002254 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	6039      	str	r1, [r7, #0]
 800225e:	71fb      	strb	r3, [r7, #7]
 8002260:	4613      	mov	r3, r2
 8002262:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	if(SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) || SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)){
 8002264:	4b3a      	ldr	r3, [pc, #232]	; (8002350 <SSD1306_Putc+0xfc>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	4413      	add	r3, r2
 8002270:	2b7f      	cmp	r3, #127	; 0x7f
 8002272:	dc07      	bgt.n	8002284 <SSD1306_Putc+0x30>
 8002274:	4b36      	ldr	r3, [pc, #216]	; (8002350 <SSD1306_Putc+0xfc>)
 8002276:	885b      	ldrh	r3, [r3, #2]
 8002278:	461a      	mov	r2, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	785b      	ldrb	r3, [r3, #1]
 800227e:	4413      	add	r3, r2
 8002280:	2b3f      	cmp	r3, #63	; 0x3f
 8002282:	dd01      	ble.n	8002288 <SSD1306_Putc+0x34>
		return 0;
 8002284:	2300      	movs	r3, #0
 8002286:	e05e      	b.n	8002346 <SSD1306_Putc+0xf2>
	}

	for(i=0; i<Font->FontHeight; i++){
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	e04b      	b.n	8002326 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	3b20      	subs	r3, #32
 8002296:	6839      	ldr	r1, [r7, #0]
 8002298:	7849      	ldrb	r1, [r1, #1]
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4619      	mov	r1, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	440b      	add	r3, r1
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	4413      	add	r3, r2
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	60fb      	str	r3, [r7, #12]
		for(j=0; j<Font->FontWidth; j++){
 80022ac:	2300      	movs	r3, #0
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	e030      	b.n	8002314 <SSD1306_Putc+0xc0>
			if((b << j) & 0x8000){
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d010      	beq.n	80022e4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80022c2:	4b23      	ldr	r3, [pc, #140]	; (8002350 <SSD1306_Putc+0xfc>)
 80022c4:	881a      	ldrh	r2, [r3, #0]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	b298      	uxth	r0, r3
 80022ce:	4b20      	ldr	r3, [pc, #128]	; (8002350 <SSD1306_Putc+0xfc>)
 80022d0:	885a      	ldrh	r2, [r3, #2]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	b29b      	uxth	r3, r3
 80022da:	79ba      	ldrb	r2, [r7, #6]
 80022dc:	4619      	mov	r1, r3
 80022de:	f7ff ff43 	bl	8002168 <SSD1306_DrawPixel>
 80022e2:	e014      	b.n	800230e <SSD1306_Putc+0xba>
			}else{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80022e4:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <SSD1306_Putc+0xfc>)
 80022e6:	881a      	ldrh	r2, [r3, #0]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	b298      	uxth	r0, r3
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <SSD1306_Putc+0xfc>)
 80022f2:	885a      	ldrh	r2, [r3, #2]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	4413      	add	r3, r2
 80022fa:	b299      	uxth	r1, r3
 80022fc:	79bb      	ldrb	r3, [r7, #6]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bf0c      	ite	eq
 8002302:	2301      	moveq	r3, #1
 8002304:	2300      	movne	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	f7ff ff2d 	bl	8002168 <SSD1306_DrawPixel>
		for(j=0; j<Font->FontWidth; j++){
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	3301      	adds	r3, #1
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4293      	cmp	r3, r2
 800231e:	d3c8      	bcc.n	80022b2 <SSD1306_Putc+0x5e>
	for(i=0; i<Font->FontHeight; i++){
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	3301      	adds	r3, #1
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	785b      	ldrb	r3, [r3, #1]
 800232a:	461a      	mov	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	4293      	cmp	r3, r2
 8002330:	d3ad      	bcc.n	800228e <SSD1306_Putc+0x3a>
			}
		}
	}
	SSD1306.CurrentX += Font->FontWidth;
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <SSD1306_Putc+0xfc>)
 8002334:	881a      	ldrh	r2, [r3, #0]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	4413      	add	r3, r2
 800233e:	b29a      	uxth	r2, r3
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <SSD1306_Putc+0xfc>)
 8002342:	801a      	strh	r2, [r3, #0]
	return ch;
 8002344:	79fb      	ldrb	r3, [r7, #7]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000724 	.word	0x20000724

08002354 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	4613      	mov	r3, r2
 8002360:	71fb      	strb	r3, [r7, #7]
	while(*str)
 8002362:	e012      	b.n	800238a <SSD1306_Puts+0x36>
	{
		if(SSD1306_Putc(*str, Font, color) != *str){
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	79fa      	ldrb	r2, [r7, #7]
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff71 	bl	8002254 <SSD1306_Putc>
 8002372:	4603      	mov	r3, r0
 8002374:	461a      	mov	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d002      	beq.n	8002384 <SSD1306_Puts+0x30>
			return *str;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	e008      	b.n	8002396 <SSD1306_Puts+0x42>
		}
		str++;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3301      	adds	r3, #1
 8002388:	60fb      	str	r3, [r7, #12]
	while(*str)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1e8      	bne.n	8002364 <SSD1306_Puts+0x10>
	}
	return *str;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	781b      	ldrb	r3, [r3, #0]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <SSD1306_Clear>:
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}

void SSD1306_Clear(void)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 80023a2:	2000      	movs	r0, #0
 80023a4:	f7ff fec8 	bl	8002138 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80023a8:	f7ff fe98 	bl	80020dc <SSD1306_UpdateScreen>
}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <SSD1306_I2C_Init>:
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);
}

void SSD1306_I2C_Init(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <SSD1306_I2C_Init+0x28>)
 80023b8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80023ba:	e002      	b.n	80023c2 <SSD1306_I2C_Init+0x12>
		p--;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3b01      	subs	r3, #1
 80023c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f9      	bne.n	80023bc <SSD1306_I2C_Init+0xc>
}
 80023c8:	bf00      	nop
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	0003d090 	.word	0x0003d090

080023dc <SSD1306_I2C_WriteMulti>:

void SSD1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count)
{
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b0c7      	sub	sp, #284	; 0x11c
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	4604      	mov	r4, r0
 80023e4:	4608      	mov	r0, r1
 80023e6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80023ea:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80023ee:	600a      	str	r2, [r1, #0]
 80023f0:	4619      	mov	r1, r3
 80023f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023f6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80023fa:	4622      	mov	r2, r4
 80023fc:	701a      	strb	r2, [r3, #0]
 80023fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002402:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002406:	4602      	mov	r2, r0
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800240e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002412:	460a      	mov	r2, r1
 8002414:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8002416:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800241a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800241e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002422:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002426:	7812      	ldrb	r2, [r2, #0]
 8002428:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 800242a:	2300      	movs	r3, #0
 800242c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002430:	e015      	b.n	800245e <SSD1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 8002432:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002436:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800243a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	441a      	add	r2, r3
 8002442:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002446:	3301      	adds	r3, #1
 8002448:	7811      	ldrb	r1, [r2, #0]
 800244a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800244e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002452:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8002454:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002458:	3301      	adds	r3, #1
 800245a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800245e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002462:	b29b      	uxth	r3, r3
 8002464:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002468:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800246c:	8812      	ldrh	r2, [r2, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d8df      	bhi.n	8002432 <SSD1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c3, address, dt, count+1, 10);
 8002472:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002476:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	b299      	uxth	r1, r3
 800247e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002482:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	3301      	adds	r3, #1
 800248a:	b29b      	uxth	r3, r3
 800248c:	f107 020c 	add.w	r2, r7, #12
 8002490:	200a      	movs	r0, #10
 8002492:	9000      	str	r0, [sp, #0]
 8002494:	4803      	ldr	r0, [pc, #12]	; (80024a4 <SSD1306_I2C_WriteMulti+0xc8>)
 8002496:	f003 fa37 	bl	8005908 <HAL_I2C_Master_Transmit>
}
 800249a:	bf00      	nop
 800249c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd90      	pop	{r4, r7, pc}
 80024a4:	20000220 	.word	0x20000220

080024a8 <SSD1306_I2C_Write>:


void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
 80024b2:	460b      	mov	r3, r1
 80024b4:	71bb      	strb	r3, [r7, #6]
 80024b6:	4613      	mov	r3, r2
 80024b8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80024ba:	79bb      	ldrb	r3, [r7, #6]
 80024bc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80024be:	797b      	ldrb	r3, [r7, #5]
 80024c0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c3, address, dt, 2, 10);
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	b299      	uxth	r1, r3
 80024c6:	f107 020c 	add.w	r2, r7, #12
 80024ca:	230a      	movs	r3, #10
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	2302      	movs	r3, #2
 80024d0:	4803      	ldr	r0, [pc, #12]	; (80024e0 <SSD1306_I2C_Write+0x38>)
 80024d2:	f003 fa19 	bl	8005908 <HAL_I2C_Master_Transmit>
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000220 	.word	0x20000220

080024e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_MspInit+0x4c>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	4a0f      	ldr	r2, [pc, #60]	; (8002530 <HAL_MspInit+0x4c>)
 80024f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f8:	6453      	str	r3, [r2, #68]	; 0x44
 80024fa:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <HAL_MspInit+0x4c>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002502:	607b      	str	r3, [r7, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	603b      	str	r3, [r7, #0]
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <HAL_MspInit+0x4c>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a08      	ldr	r2, [pc, #32]	; (8002530 <HAL_MspInit+0x4c>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_MspInit+0x4c>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002522:	2007      	movs	r0, #7
 8002524:	f000 fd36 	bl	8002f94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40023800 	.word	0x40023800

08002534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002538:	e7fe      	b.n	8002538 <NMI_Handler+0x4>

0800253a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800253e:	e7fe      	b.n	800253e <HardFault_Handler+0x4>

08002540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002544:	e7fe      	b.n	8002544 <MemManage_Handler+0x4>

08002546 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800254a:	e7fe      	b.n	800254a <BusFault_Handler+0x4>

0800254c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002550:	e7fe      	b.n	8002550 <UsageFault_Handler+0x4>

08002552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002580:	f000 fbf4 	bl	8002d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}

08002588 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800258c:	2001      	movs	r0, #1
 800258e:	f001 fc25 	bl	8003ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800259c:	4802      	ldr	r0, [pc, #8]	; (80025a8 <DMA1_Stream5_IRQHandler+0x10>)
 800259e:	f000 ff31 	bl	8003404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	200002bc 	.word	0x200002bc

080025ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PD9_Pin);
 80025b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80025b4:	f001 fc12 	bl	8003ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80025b8:	bf00      	nop
 80025ba:	bd80      	pop	{r7, pc}

080025bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <USART1_IRQHandler+0x10>)
 80025c2:	f006 fa21 	bl	8008a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000730 	.word	0x20000730

080025d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PD11_Pin);
 80025d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80025d8:	f001 fc00 	bl	8003ddc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PD13_Pin);
 80025dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025e0:	f001 fbfc 	bl	8003ddc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PD15_Pin);
 80025e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025e8:	f001 fbf8 	bl	8003ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <DMA2_Stream2_IRQHandler+0x10>)
 80025f6:	f000 ff05 	bl	8003404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20000774 	.word	0x20000774

08002604 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <OTG_FS_IRQHandler+0x10>)
 800260a:	f001 fe69 	bl	80042e0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200026c8 	.word	0x200026c8

08002618 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800261c:	4802      	ldr	r0, [pc, #8]	; (8002628 <DMA2_Stream7_IRQHandler+0x10>)
 800261e:	f000 fef1 	bl	8003404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	200007d4 	.word	0x200007d4

0800262c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002634:	4a14      	ldr	r2, [pc, #80]	; (8002688 <_sbrk+0x5c>)
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <_sbrk+0x60>)
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d102      	bne.n	800264e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <_sbrk+0x64>)
 800264a:	4a12      	ldr	r2, [pc, #72]	; (8002694 <_sbrk+0x68>)
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <_sbrk+0x64>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	429a      	cmp	r2, r3
 800265a:	d207      	bcs.n	800266c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800265c:	f00f f8fc 	bl	8011858 <__errno>
 8002660:	4603      	mov	r3, r0
 8002662:	220c      	movs	r2, #12
 8002664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
 800266a:	e009      	b.n	8002680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <_sbrk+0x64>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <_sbrk+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	4a05      	ldr	r2, [pc, #20]	; (8002690 <_sbrk+0x64>)
 800267c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20020000 	.word	0x20020000
 800268c:	00000400 	.word	0x00000400
 8002690:	2000072c 	.word	0x2000072c
 8002694:	20002b18 	.word	0x20002b18

08002698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800269c:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <SystemInit+0x28>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <SystemInit+0x28>)
 80026a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <SystemInit+0x28>)
 80026ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026b2:	609a      	str	r2, [r3, #8]
#endif
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026c8:	4b11      	ldr	r3, [pc, #68]	; (8002710 <MX_USART1_UART_Init+0x4c>)
 80026ca:	4a12      	ldr	r2, [pc, #72]	; (8002714 <MX_USART1_UART_Init+0x50>)
 80026cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026ce:	4b10      	ldr	r3, [pc, #64]	; (8002710 <MX_USART1_UART_Init+0x4c>)
 80026d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026d6:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <MX_USART1_UART_Init+0x4c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026dc:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <MX_USART1_UART_Init+0x4c>)
 80026de:	2200      	movs	r2, #0
 80026e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <MX_USART1_UART_Init+0x4c>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <MX_USART1_UART_Init+0x4c>)
 80026ea:	220c      	movs	r2, #12
 80026ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <MX_USART1_UART_Init+0x4c>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <MX_USART1_UART_Init+0x4c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026fa:	4805      	ldr	r0, [pc, #20]	; (8002710 <MX_USART1_UART_Init+0x4c>)
 80026fc:	f006 f906 	bl	800890c <HAL_UART_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002706:	f7ff fbeb 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000730 	.word	0x20000730
 8002714:	40011000 	.word	0x40011000

08002718 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08a      	sub	sp, #40	; 0x28
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	f107 0314 	add.w	r3, r7, #20
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a5b      	ldr	r2, [pc, #364]	; (80028a4 <HAL_UART_MspInit+0x18c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	f040 80af 	bne.w	800289a <HAL_UART_MspInit+0x182>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800273c:	2300      	movs	r3, #0
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	4b59      	ldr	r3, [pc, #356]	; (80028a8 <HAL_UART_MspInit+0x190>)
 8002742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002744:	4a58      	ldr	r2, [pc, #352]	; (80028a8 <HAL_UART_MspInit+0x190>)
 8002746:	f043 0310 	orr.w	r3, r3, #16
 800274a:	6453      	str	r3, [r2, #68]	; 0x44
 800274c:	4b56      	ldr	r3, [pc, #344]	; (80028a8 <HAL_UART_MspInit+0x190>)
 800274e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	4b52      	ldr	r3, [pc, #328]	; (80028a8 <HAL_UART_MspInit+0x190>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	4a51      	ldr	r2, [pc, #324]	; (80028a8 <HAL_UART_MspInit+0x190>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6313      	str	r3, [r2, #48]	; 0x30
 8002768:	4b4f      	ldr	r3, [pc, #316]	; (80028a8 <HAL_UART_MspInit+0x190>)
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002774:	2300      	movs	r3, #0
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	4b4b      	ldr	r3, [pc, #300]	; (80028a8 <HAL_UART_MspInit+0x190>)
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277c:	4a4a      	ldr	r2, [pc, #296]	; (80028a8 <HAL_UART_MspInit+0x190>)
 800277e:	f043 0302 	orr.w	r3, r3, #2
 8002782:	6313      	str	r3, [r2, #48]	; 0x30
 8002784:	4b48      	ldr	r3, [pc, #288]	; (80028a8 <HAL_UART_MspInit+0x190>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027a2:	2307      	movs	r3, #7
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a6:	f107 0314 	add.w	r3, r7, #20
 80027aa:	4619      	mov	r1, r3
 80027ac:	483f      	ldr	r0, [pc, #252]	; (80028ac <HAL_UART_MspInit+0x194>)
 80027ae:	f001 f893 	bl	80038d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027b2:	2308      	movs	r3, #8
 80027b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027be:	2303      	movs	r3, #3
 80027c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027c2:	2307      	movs	r3, #7
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c6:	f107 0314 	add.w	r3, r7, #20
 80027ca:	4619      	mov	r1, r3
 80027cc:	4838      	ldr	r0, [pc, #224]	; (80028b0 <HAL_UART_MspInit+0x198>)
 80027ce:	f001 f883 	bl	80038d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80027d2:	4b38      	ldr	r3, [pc, #224]	; (80028b4 <HAL_UART_MspInit+0x19c>)
 80027d4:	4a38      	ldr	r2, [pc, #224]	; (80028b8 <HAL_UART_MspInit+0x1a0>)
 80027d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80027d8:	4b36      	ldr	r3, [pc, #216]	; (80028b4 <HAL_UART_MspInit+0x19c>)
 80027da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027de:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027e0:	4b34      	ldr	r3, [pc, #208]	; (80028b4 <HAL_UART_MspInit+0x19c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027e6:	4b33      	ldr	r3, [pc, #204]	; (80028b4 <HAL_UART_MspInit+0x19c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027ec:	4b31      	ldr	r3, [pc, #196]	; (80028b4 <HAL_UART_MspInit+0x19c>)
 80027ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027f4:	4b2f      	ldr	r3, [pc, #188]	; (80028b4 <HAL_UART_MspInit+0x19c>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027fa:	4b2e      	ldr	r3, [pc, #184]	; (80028b4 <HAL_UART_MspInit+0x19c>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002800:	4b2c      	ldr	r3, [pc, #176]	; (80028b4 <HAL_UART_MspInit+0x19c>)
 8002802:	2200      	movs	r2, #0
 8002804:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002806:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <HAL_UART_MspInit+0x19c>)
 8002808:	2200      	movs	r2, #0
 800280a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800280c:	4b29      	ldr	r3, [pc, #164]	; (80028b4 <HAL_UART_MspInit+0x19c>)
 800280e:	2200      	movs	r2, #0
 8002810:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002812:	4828      	ldr	r0, [pc, #160]	; (80028b4 <HAL_UART_MspInit+0x19c>)
 8002814:	f000 fc00 	bl	8003018 <HAL_DMA_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800281e:	f7ff fb5f 	bl	8001ee0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a23      	ldr	r2, [pc, #140]	; (80028b4 <HAL_UART_MspInit+0x19c>)
 8002826:	639a      	str	r2, [r3, #56]	; 0x38
 8002828:	4a22      	ldr	r2, [pc, #136]	; (80028b4 <HAL_UART_MspInit+0x19c>)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800282e:	4b23      	ldr	r3, [pc, #140]	; (80028bc <HAL_UART_MspInit+0x1a4>)
 8002830:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <HAL_UART_MspInit+0x1a8>)
 8002832:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002834:	4b21      	ldr	r3, [pc, #132]	; (80028bc <HAL_UART_MspInit+0x1a4>)
 8002836:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800283a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800283c:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <HAL_UART_MspInit+0x1a4>)
 800283e:	2240      	movs	r2, #64	; 0x40
 8002840:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002842:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <HAL_UART_MspInit+0x1a4>)
 8002844:	2200      	movs	r2, #0
 8002846:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002848:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <HAL_UART_MspInit+0x1a4>)
 800284a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800284e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002850:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <HAL_UART_MspInit+0x1a4>)
 8002852:	2200      	movs	r2, #0
 8002854:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002856:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_UART_MspInit+0x1a4>)
 8002858:	2200      	movs	r2, #0
 800285a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800285c:	4b17      	ldr	r3, [pc, #92]	; (80028bc <HAL_UART_MspInit+0x1a4>)
 800285e:	2200      	movs	r2, #0
 8002860:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002862:	4b16      	ldr	r3, [pc, #88]	; (80028bc <HAL_UART_MspInit+0x1a4>)
 8002864:	2200      	movs	r2, #0
 8002866:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002868:	4b14      	ldr	r3, [pc, #80]	; (80028bc <HAL_UART_MspInit+0x1a4>)
 800286a:	2200      	movs	r2, #0
 800286c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800286e:	4813      	ldr	r0, [pc, #76]	; (80028bc <HAL_UART_MspInit+0x1a4>)
 8002870:	f000 fbd2 	bl	8003018 <HAL_DMA_Init>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 800287a:	f7ff fb31 	bl	8001ee0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a0e      	ldr	r2, [pc, #56]	; (80028bc <HAL_UART_MspInit+0x1a4>)
 8002882:	635a      	str	r2, [r3, #52]	; 0x34
 8002884:	4a0d      	ldr	r2, [pc, #52]	; (80028bc <HAL_UART_MspInit+0x1a4>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2100      	movs	r1, #0
 800288e:	2025      	movs	r0, #37	; 0x25
 8002890:	f000 fb8b 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002894:	2025      	movs	r0, #37	; 0x25
 8002896:	f000 fba4 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800289a:	bf00      	nop
 800289c:	3728      	adds	r7, #40	; 0x28
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40011000 	.word	0x40011000
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40020000 	.word	0x40020000
 80028b0:	40020400 	.word	0x40020400
 80028b4:	20000774 	.word	0x20000774
 80028b8:	40026440 	.word	0x40026440
 80028bc:	200007d4 	.word	0x200007d4
 80028c0:	400264b8 	.word	0x400264b8

080028c4 <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <PlayerInit+0x2c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	4619      	mov	r1, r3
 80028d6:	2003      	movs	r0, #3
 80028d8:	f7fd fdfc 	bl	80004d4 <AUDIO_OUT_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <PlayerInit+0x22>
	{
		return 1;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 80028e6:	2300      	movs	r3, #0
	}
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000080 	.word	0x20000080

080028f4 <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  UINT bytesread;

  f_close(&WavFile);
 80028fe:	4828      	ldr	r0, [pc, #160]	; (80029a0 <AUDIO_PLAYER_Start+0xac>)
 8002900:	f00d ff49 	bl	8010796 <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8002904:	f7fe fa4c 	bl	8000da0 <AUDIO_GetWavObjectNumber>
 8002908:	4603      	mov	r3, r0
 800290a:	461a      	mov	r2, r3
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	b29b      	uxth	r3, r3
 8002910:	429a      	cmp	r2, r3
 8002912:	d93f      	bls.n	8002994 <AUDIO_PLAYER_Start+0xa0>
  {

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 8002914:	79fa      	ldrb	r2, [r7, #7]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	4a20      	ldr	r2, [pc, #128]	; (80029a4 <AUDIO_PLAYER_Start+0xb0>)
 8002922:	4413      	add	r3, r2
 8002924:	3301      	adds	r3, #1
 8002926:	2201      	movs	r2, #1
 8002928:	4619      	mov	r1, r3
 800292a:	481d      	ldr	r0, [pc, #116]	; (80029a0 <AUDIO_PLAYER_Start+0xac>)
 800292c:	f00d fbb8 	bl	80100a0 <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 8002930:	f107 030c 	add.w	r3, r7, #12
 8002934:	222c      	movs	r2, #44	; 0x2c
 8002936:	491c      	ldr	r1, [pc, #112]	; (80029a8 <AUDIO_PLAYER_Start+0xb4>)
 8002938:	4819      	ldr	r0, [pc, #100]	; (80029a0 <AUDIO_PLAYER_Start+0xac>)
 800293a:	f00d fd6f 	bl	801041c <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 800293e:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <AUDIO_PLAYER_Start+0xb4>)
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff ffbe 	bl	80028c4 <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8002948:	4b18      	ldr	r3, [pc, #96]	; (80029ac <AUDIO_PLAYER_Start+0xb8>)
 800294a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 8002952:	2100      	movs	r1, #0
 8002954:	4812      	ldr	r0, [pc, #72]	; (80029a0 <AUDIO_PLAYER_Start+0xac>)
 8002956:	f00d ff48 	bl	80107ea <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 800295a:	f107 030c 	add.w	r3, r7, #12
 800295e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002962:	4912      	ldr	r1, [pc, #72]	; (80029ac <AUDIO_PLAYER_Start+0xb8>)
 8002964:	480e      	ldr	r0, [pc, #56]	; (80029a0 <AUDIO_PLAYER_Start+0xac>)
 8002966:	f00d fd59 	bl	801041c <f_read>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d111      	bne.n	8002994 <AUDIO_PLAYER_Start+0xa0>
    {
      AudioState = AUDIO_STATE_PLAY;
 8002970:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <AUDIO_PLAYER_Start+0xbc>)
 8002972:	2203      	movs	r2, #3
 8002974:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00b      	beq.n	8002994 <AUDIO_PLAYER_Start+0xa0>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 800297c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002980:	480a      	ldr	r0, [pc, #40]	; (80029ac <AUDIO_PLAYER_Start+0xb8>)
 8002982:	f7fd fdf5 	bl	8000570 <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4a08      	ldr	r2, [pc, #32]	; (80029ac <AUDIO_PLAYER_Start+0xb8>)
 800298a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800298e:	6053      	str	r3, [r2, #4]
          return AUDIO_ERROR_NONE;
 8002990:	2300      	movs	r3, #0
 8002992:	e000      	b.n	8002996 <AUDIO_PLAYER_Start+0xa2>
        }
      }
  }
  return AUDIO_ERROR_IO;
 8002994:	2301      	movs	r3, #1
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20001c48 	.word	0x20001c48
 80029a4:	20001840 	.word	0x20001840
 80029a8:	20001c1c 	.word	0x20001c1c
 80029ac:	20000834 	.word	0x20000834
 80029b0:	2000183c 	.word	0x2000183c

080029b4 <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop, uint8_t idx)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	460a      	mov	r2, r1
 80029be:	71fb      	strb	r3, [r7, #7]
 80029c0:	4613      	mov	r3, r2
 80029c2:	71bb      	strb	r3, [r7, #6]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	73fb      	strb	r3, [r7, #15]
  
  switch(AudioState)
 80029c8:	4b8f      	ldr	r3, [pc, #572]	; (8002c08 <AUDIO_PLAYER_Process+0x254>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	3b03      	subs	r3, #3
 80029ce:	2b0c      	cmp	r3, #12
 80029d0:	f200 8111 	bhi.w	8002bf6 <AUDIO_PLAYER_Process+0x242>
 80029d4:	a201      	add	r2, pc, #4	; (adr r2, 80029dc <AUDIO_PLAYER_Process+0x28>)
 80029d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029da:	bf00      	nop
 80029dc:	08002a11 	.word	0x08002a11
 80029e0:	08002bf7 	.word	0x08002bf7
 80029e4:	08002ad9 	.word	0x08002ad9
 80029e8:	08002b33 	.word	0x08002b33
 80029ec:	08002bf7 	.word	0x08002bf7
 80029f0:	08002bf7 	.word	0x08002bf7
 80029f4:	08002ac7 	.word	0x08002ac7
 80029f8:	08002b75 	.word	0x08002b75
 80029fc:	08002b81 	.word	0x08002b81
 8002a00:	08002b8d 	.word	0x08002b8d
 8002a04:	08002bb3 	.word	0x08002bb3
 8002a08:	08002bd9 	.word	0x08002bd9
 8002a0c:	08002be5 	.word	0x08002be5
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8002a10:	4b7e      	ldr	r3, [pc, #504]	; (8002c0c <AUDIO_PLAYER_Process+0x258>)
 8002a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	4b7d      	ldr	r3, [pc, #500]	; (8002c10 <AUDIO_PLAYER_Process+0x25c>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d306      	bcc.n	8002a2e <AUDIO_PLAYER_Process+0x7a>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002a20:	2002      	movs	r0, #2
 8002a22:	f7fd fdfb 	bl	800061c <AUDIO_OUT_Stop>
      AUDIO_PLAYER_Start(idx);
 8002a26:	79bb      	ldrb	r3, [r7, #6]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff ff63 	bl	80028f4 <AUDIO_PLAYER_Start>
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8002a2e:	4b77      	ldr	r3, [pc, #476]	; (8002c0c <AUDIO_PLAYER_Process+0x258>)
 8002a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d11e      	bne.n	8002a78 <AUDIO_PLAYER_Process+0xc4>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8002a3a:	f107 0308 	add.w	r3, r7, #8
 8002a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a42:	4972      	ldr	r1, [pc, #456]	; (8002c0c <AUDIO_PLAYER_Process+0x258>)
 8002a44:	4873      	ldr	r0, [pc, #460]	; (8002c14 <AUDIO_PLAYER_Process+0x260>)
 8002a46:	f00d fce9 	bl	801041c <f_read>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d004      	beq.n	8002a5a <AUDIO_PLAYER_Process+0xa6>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002a50:	2002      	movs	r0, #2
 8002a52:	f7fd fde3 	bl	800061c <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8002a56:	2301      	movs	r3, #1
 8002a58:	e0d1      	b.n	8002bfe <AUDIO_PLAYER_Process+0x24a>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8002a5a:	4b6c      	ldr	r3, [pc, #432]	; (8002c0c <AUDIO_PLAYER_Process+0x258>)
 8002a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a60:	2200      	movs	r2, #0
 8002a62:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8002a64:	4b69      	ldr	r3, [pc, #420]	; (8002c0c <AUDIO_PLAYER_Process+0x258>)
 8002a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4413      	add	r3, r2
 8002a70:	4a66      	ldr	r2, [pc, #408]	; (8002c0c <AUDIO_PLAYER_Process+0x258>)
 8002a72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a76:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 8002a78:	4b64      	ldr	r3, [pc, #400]	; (8002c0c <AUDIO_PLAYER_Process+0x258>)
 8002a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	f040 80ba 	bne.w	8002bfa <AUDIO_PLAYER_Process+0x246>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8002a86:	f107 0308 	add.w	r3, r7, #8
 8002a8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a8e:	4962      	ldr	r1, [pc, #392]	; (8002c18 <AUDIO_PLAYER_Process+0x264>)
 8002a90:	4860      	ldr	r0, [pc, #384]	; (8002c14 <AUDIO_PLAYER_Process+0x260>)
 8002a92:	f00d fcc3 	bl	801041c <f_read>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d004      	beq.n	8002aa6 <AUDIO_PLAYER_Process+0xf2>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002a9c:	2002      	movs	r0, #2
 8002a9e:	f7fd fdbd 	bl	800061c <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0ab      	b.n	8002bfe <AUDIO_PLAYER_Process+0x24a>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8002aa6:	4b59      	ldr	r3, [pc, #356]	; (8002c0c <AUDIO_PLAYER_Process+0x258>)
 8002aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8002ab0:	4b56      	ldr	r3, [pc, #344]	; (8002c0c <AUDIO_PLAYER_Process+0x258>)
 8002ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4413      	add	r3, r2
 8002abc:	4a53      	ldr	r2, [pc, #332]	; (8002c0c <AUDIO_PLAYER_Process+0x258>)
 8002abe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ac2:	6053      	str	r3, [r2, #4]
    }
    break;
 8002ac4:	e099      	b.n	8002bfa <AUDIO_PLAYER_Process+0x246>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002ac6:	2002      	movs	r0, #2
 8002ac8:	f7fd fda8 	bl	800061c <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 8002acc:	4b4e      	ldr	r3, [pc, #312]	; (8002c08 <AUDIO_PLAYER_Process+0x254>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
    break;
 8002ad6:	e091      	b.n	8002bfc <AUDIO_PLAYER_Process+0x248>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 8002ad8:	4b50      	ldr	r3, [pc, #320]	; (8002c1c <AUDIO_PLAYER_Process+0x268>)
 8002ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	b21a      	sxth	r2, r3
 8002ae6:	4b4d      	ldr	r3, [pc, #308]	; (8002c1c <AUDIO_PLAYER_Process+0x268>)
 8002ae8:	801a      	strh	r2, [r3, #0]
 8002aea:	4b4c      	ldr	r3, [pc, #304]	; (8002c1c <AUDIO_PLAYER_Process+0x268>)
 8002aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af0:	461c      	mov	r4, r3
 8002af2:	f7fe f955 	bl	8000da0 <AUDIO_GetWavObjectNumber>
 8002af6:	4603      	mov	r3, r0
 8002af8:	429c      	cmp	r4, r3
 8002afa:	db09      	blt.n	8002b10 <AUDIO_PLAYER_Process+0x15c>
    {
    	if (isLoop)
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <AUDIO_PLAYER_Process+0x156>
    	{
    		FilePos = 0;
 8002b02:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <AUDIO_PLAYER_Process+0x268>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	801a      	strh	r2, [r3, #0]
 8002b08:	e002      	b.n	8002b10 <AUDIO_PLAYER_Process+0x15c>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 8002b0a:	4b3f      	ldr	r3, [pc, #252]	; (8002c08 <AUDIO_PLAYER_Process+0x254>)
 8002b0c:	2209      	movs	r2, #9
 8002b0e:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002b10:	2002      	movs	r0, #2
 8002b12:	f7fd fd83 	bl	800061c <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8002b16:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <AUDIO_PLAYER_Process+0x268>)
 8002b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fee8 	bl	80028f4 <AUDIO_PLAYER_Start>
	AUDIO_OUT_SetVolume(uwVolume);
 8002b24:	4b3e      	ldr	r3, [pc, #248]	; (8002c20 <AUDIO_PLAYER_Process+0x26c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fd9e 	bl	800066c <AUDIO_OUT_SetVolume>
    break;    
 8002b30:	e064      	b.n	8002bfc <AUDIO_PLAYER_Process+0x248>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8002b32:	4b3a      	ldr	r3, [pc, #232]	; (8002c1c <AUDIO_PLAYER_Process+0x268>)
 8002b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	b21a      	sxth	r2, r3
 8002b40:	4b36      	ldr	r3, [pc, #216]	; (8002c1c <AUDIO_PLAYER_Process+0x268>)
 8002b42:	801a      	strh	r2, [r3, #0]
 8002b44:	4b35      	ldr	r3, [pc, #212]	; (8002c1c <AUDIO_PLAYER_Process+0x268>)
 8002b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	da07      	bge.n	8002b5e <AUDIO_PLAYER_Process+0x1aa>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 8002b4e:	f7fe f927 	bl	8000da0 <AUDIO_GetWavObjectNumber>
 8002b52:	4603      	mov	r3, r0
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	b21a      	sxth	r2, r3
 8002b5a:	4b30      	ldr	r3, [pc, #192]	; (8002c1c <AUDIO_PLAYER_Process+0x268>)
 8002b5c:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002b5e:	2002      	movs	r0, #2
 8002b60:	f7fd fd5c 	bl	800061c <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8002b64:	4b2d      	ldr	r3, [pc, #180]	; (8002c1c <AUDIO_PLAYER_Process+0x268>)
 8002b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fec1 	bl	80028f4 <AUDIO_PLAYER_Start>
    break;   
 8002b72:	e043      	b.n	8002bfc <AUDIO_PLAYER_Process+0x248>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 8002b74:	f7fd fd26 	bl	80005c4 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8002b78:	4b23      	ldr	r3, [pc, #140]	; (8002c08 <AUDIO_PLAYER_Process+0x254>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
    break;
 8002b7e:	e03d      	b.n	8002bfc <AUDIO_PLAYER_Process+0x248>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 8002b80:	f7fd fd36 	bl	80005f0 <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 8002b84:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <AUDIO_PLAYER_Process+0x254>)
 8002b86:	2203      	movs	r2, #3
 8002b88:	701a      	strb	r2, [r3, #0]
    break;
 8002b8a:	e037      	b.n	8002bfc <AUDIO_PLAYER_Process+0x248>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 8002b8c:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <AUDIO_PLAYER_Process+0x26c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b5a      	cmp	r3, #90	; 0x5a
 8002b92:	d804      	bhi.n	8002b9e <AUDIO_PLAYER_Process+0x1ea>
    {
      uwVolume += 10;
 8002b94:	4b22      	ldr	r3, [pc, #136]	; (8002c20 <AUDIO_PLAYER_Process+0x26c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	330a      	adds	r3, #10
 8002b9a:	4a21      	ldr	r2, [pc, #132]	; (8002c20 <AUDIO_PLAYER_Process+0x26c>)
 8002b9c:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8002b9e:	4b20      	ldr	r3, [pc, #128]	; (8002c20 <AUDIO_PLAYER_Process+0x26c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fd fd61 	bl	800066c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8002baa:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <AUDIO_PLAYER_Process+0x254>)
 8002bac:	2203      	movs	r2, #3
 8002bae:	701a      	strb	r2, [r3, #0]
    break;
 8002bb0:	e024      	b.n	8002bfc <AUDIO_PLAYER_Process+0x248>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <AUDIO_PLAYER_Process+0x26c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b09      	cmp	r3, #9
 8002bb8:	d904      	bls.n	8002bc4 <AUDIO_PLAYER_Process+0x210>
    {
      uwVolume -= 10;
 8002bba:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <AUDIO_PLAYER_Process+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	3b0a      	subs	r3, #10
 8002bc0:	4a17      	ldr	r2, [pc, #92]	; (8002c20 <AUDIO_PLAYER_Process+0x26c>)
 8002bc2:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8002bc4:	4b16      	ldr	r3, [pc, #88]	; (8002c20 <AUDIO_PLAYER_Process+0x26c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd fd4e 	bl	800066c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8002bd0:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <AUDIO_PLAYER_Process+0x254>)
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	701a      	strb	r2, [r3, #0]
    break;
 8002bd6:	e011      	b.n	8002bfc <AUDIO_PLAYER_Process+0x248>
    
  case AUDIO_STATE_MUTE:
	AUDIO_OUT_SetVolume(0);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7fd fd47 	bl	800066c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <AUDIO_PLAYER_Process+0x254>)
 8002be0:	2203      	movs	r2, #3
 8002be2:	701a      	strb	r2, [r3, #0]

  case AUDIO_STATE_SET_VOLUME:
	AUDIO_OUT_SetVolume(uwVolume);
 8002be4:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <AUDIO_PLAYER_Process+0x26c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fd fd3e 	bl	800066c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <AUDIO_PLAYER_Process+0x254>)
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	701a      	strb	r2, [r3, #0]
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 8002bf6:	bf00      	nop
 8002bf8:	e000      	b.n	8002bfc <AUDIO_PLAYER_Process+0x248>
    break;
 8002bfa:	bf00      	nop
  }
  return audio_error;
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd90      	pop	{r4, r7, pc}
 8002c06:	bf00      	nop
 8002c08:	2000183c 	.word	0x2000183c
 8002c0c:	20000834 	.word	0x20000834
 8002c10:	20001c1c 	.word	0x20001c1c
 8002c14:	20001c48 	.word	0x20001c48
 8002c18:	20001034 	.word	0x20001034
 8002c1c:	2000183e 	.word	0x2000183e
 8002c20:	20000080 	.word	0x20000080

08002c24 <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d104      	bne.n	8002c3a <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8002c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c36:	2202      	movs	r2, #2
 8002c38:	701a      	strb	r2, [r3, #0]
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	2000183c 	.word	0x2000183c
 8002c48:	20000834 	.word	0x20000834

08002c4c <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d104      	bne.n	8002c62 <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8002c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c5e:	2201      	movs	r2, #1
 8002c60:	701a      	strb	r2, [r3, #0]
  }
}
 8002c62:	bf00      	nop
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	2000183c 	.word	0x2000183c
 8002c70:	20000834 	.word	0x20000834

08002c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c7a:	e003      	b.n	8002c84 <LoopCopyDataInit>

08002c7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c82:	3104      	adds	r1, #4

08002c84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c84:	480b      	ldr	r0, [pc, #44]	; (8002cb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c86:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c8c:	d3f6      	bcc.n	8002c7c <CopyDataInit>
  ldr  r2, =_sbss
 8002c8e:	4a0b      	ldr	r2, [pc, #44]	; (8002cbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c90:	e002      	b.n	8002c98 <LoopFillZerobss>

08002c92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c94:	f842 3b04 	str.w	r3, [r2], #4

08002c98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c98:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c9c:	d3f9      	bcc.n	8002c92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c9e:	f7ff fcfb 	bl	8002698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ca2:	f00e fddf 	bl	8011864 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ca6:	f7fe ff4b 	bl	8001b40 <main>
  bx  lr    
 8002caa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002cb0:	08013490 	.word	0x08013490
  ldr  r0, =_sdata
 8002cb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002cb8:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 8002cbc:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 8002cc0:	20002b14 	.word	0x20002b14

08002cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cc4:	e7fe      	b.n	8002cc4 <ADC_IRQHandler>
	...

08002cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <HAL_Init+0x40>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a0d      	ldr	r2, [pc, #52]	; (8002d08 <HAL_Init+0x40>)
 8002cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_Init+0x40>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0a      	ldr	r2, [pc, #40]	; (8002d08 <HAL_Init+0x40>)
 8002cde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ce4:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <HAL_Init+0x40>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a07      	ldr	r2, [pc, #28]	; (8002d08 <HAL_Init+0x40>)
 8002cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf0:	2003      	movs	r0, #3
 8002cf2:	f000 f94f 	bl	8002f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	f000 f808 	bl	8002d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cfc:	f7ff fbf2 	bl	80024e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40023c00 	.word	0x40023c00

08002d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_InitTick+0x54>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_InitTick+0x58>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f967 	bl	8002ffe <HAL_SYSTICK_Config>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e00e      	b.n	8002d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b0f      	cmp	r3, #15
 8002d3e:	d80a      	bhi.n	8002d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d40:	2200      	movs	r2, #0
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	f04f 30ff 	mov.w	r0, #4294967295
 8002d48:	f000 f92f 	bl	8002faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d4c:	4a06      	ldr	r2, [pc, #24]	; (8002d68 <HAL_InitTick+0x5c>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e000      	b.n	8002d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	2000007c 	.word	0x2000007c
 8002d64:	20000088 	.word	0x20000088
 8002d68:	20000084 	.word	0x20000084

08002d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_IncTick+0x20>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_IncTick+0x24>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <HAL_IncTick+0x24>)
 8002d7e:	6013      	str	r3, [r2, #0]
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000088 	.word	0x20000088
 8002d90:	20001e78 	.word	0x20001e78

08002d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return uwTick;
 8002d98:	4b03      	ldr	r3, [pc, #12]	; (8002da8 <HAL_GetTick+0x14>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	20001e78 	.word	0x20001e78

08002dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002db4:	f7ff ffee 	bl	8002d94 <HAL_GetTick>
 8002db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d005      	beq.n	8002dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <HAL_Delay+0x44>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4413      	add	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dd2:	bf00      	nop
 8002dd4:	f7ff ffde 	bl	8002d94 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d8f7      	bhi.n	8002dd4 <HAL_Delay+0x28>
  {
  }
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000088 	.word	0x20000088

08002df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <__NVIC_SetPriorityGrouping+0x44>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e10:	4013      	ands	r3, r2
 8002e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e26:	4a04      	ldr	r2, [pc, #16]	; (8002e38 <__NVIC_SetPriorityGrouping+0x44>)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	60d3      	str	r3, [r2, #12]
}
 8002e2c:	bf00      	nop
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e40:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <__NVIC_GetPriorityGrouping+0x18>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	f003 0307 	and.w	r3, r3, #7
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	db0b      	blt.n	8002e82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	f003 021f 	and.w	r2, r3, #31
 8002e70:	4907      	ldr	r1, [pc, #28]	; (8002e90 <__NVIC_EnableIRQ+0x38>)
 8002e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	2001      	movs	r0, #1
 8002e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000e100 	.word	0xe000e100

08002e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	6039      	str	r1, [r7, #0]
 8002e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	db0a      	blt.n	8002ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	490c      	ldr	r1, [pc, #48]	; (8002ee0 <__NVIC_SetPriority+0x4c>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	0112      	lsls	r2, r2, #4
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ebc:	e00a      	b.n	8002ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	4908      	ldr	r1, [pc, #32]	; (8002ee4 <__NVIC_SetPriority+0x50>)
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	3b04      	subs	r3, #4
 8002ecc:	0112      	lsls	r2, r2, #4
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	761a      	strb	r2, [r3, #24]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000e100 	.word	0xe000e100
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b089      	sub	sp, #36	; 0x24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f1c3 0307 	rsb	r3, r3, #7
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	bf28      	it	cs
 8002f06:	2304      	movcs	r3, #4
 8002f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	2b06      	cmp	r3, #6
 8002f10:	d902      	bls.n	8002f18 <NVIC_EncodePriority+0x30>
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3b03      	subs	r3, #3
 8002f16:	e000      	b.n	8002f1a <NVIC_EncodePriority+0x32>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43da      	mvns	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	401a      	ands	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f30:	f04f 31ff 	mov.w	r1, #4294967295
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3a:	43d9      	mvns	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	4313      	orrs	r3, r2
         );
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3724      	adds	r7, #36	; 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f60:	d301      	bcc.n	8002f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f62:	2301      	movs	r3, #1
 8002f64:	e00f      	b.n	8002f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f66:	4a0a      	ldr	r2, [pc, #40]	; (8002f90 <SysTick_Config+0x40>)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f6e:	210f      	movs	r1, #15
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	f7ff ff8e 	bl	8002e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f78:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <SysTick_Config+0x40>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f7e:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <SysTick_Config+0x40>)
 8002f80:	2207      	movs	r2, #7
 8002f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	e000e010 	.word	0xe000e010

08002f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ff29 	bl	8002df4 <__NVIC_SetPriorityGrouping>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fbc:	f7ff ff3e 	bl	8002e3c <__NVIC_GetPriorityGrouping>
 8002fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	6978      	ldr	r0, [r7, #20]
 8002fc8:	f7ff ff8e 	bl	8002ee8 <NVIC_EncodePriority>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff5d 	bl	8002e94 <__NVIC_SetPriority>
}
 8002fda:	bf00      	nop
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	4603      	mov	r3, r0
 8002fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ff31 	bl	8002e58 <__NVIC_EnableIRQ>
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff ffa2 	bl	8002f50 <SysTick_Config>
 800300c:	4603      	mov	r3, r0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003024:	f7ff feb6 	bl	8002d94 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e099      	b.n	8003168 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0201 	bic.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003054:	e00f      	b.n	8003076 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003056:	f7ff fe9d 	bl	8002d94 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b05      	cmp	r3, #5
 8003062:	d908      	bls.n	8003076 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2203      	movs	r2, #3
 800306e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e078      	b.n	8003168 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e8      	bne.n	8003056 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4b38      	ldr	r3, [pc, #224]	; (8003170 <HAL_DMA_Init+0x158>)
 8003090:	4013      	ands	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d107      	bne.n	80030e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	4313      	orrs	r3, r2
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f023 0307 	bic.w	r3, r3, #7
 80030f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	2b04      	cmp	r3, #4
 8003108:	d117      	bne.n	800313a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00e      	beq.n	800313a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fb5f 	bl	80037e0 <DMA_CheckFifoParam>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2240      	movs	r2, #64	; 0x40
 800312c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003136:	2301      	movs	r3, #1
 8003138:	e016      	b.n	8003168 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fb16 	bl	8003774 <DMA_CalcBaseAndBitshift>
 8003148:	4603      	mov	r3, r0
 800314a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003150:	223f      	movs	r2, #63	; 0x3f
 8003152:	409a      	lsls	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	f010803f 	.word	0xf010803f

08003174 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e050      	b.n	8003228 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d101      	bne.n	8003196 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003192:	2302      	movs	r3, #2
 8003194:	e048      	b.n	8003228 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2200      	movs	r2, #0
 80031b4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2200      	movs	r2, #0
 80031c4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2200      	movs	r2, #0
 80031cc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2221      	movs	r2, #33	; 0x21
 80031d4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 facc 	bl	8003774 <DMA_CalcBaseAndBitshift>
 80031dc:	4603      	mov	r3, r0
 80031de:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003208:	223f      	movs	r2, #63	; 0x3f
 800320a:	409a      	lsls	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003246:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_DMA_Start_IT+0x26>
 8003252:	2302      	movs	r3, #2
 8003254:	e040      	b.n	80032d8 <HAL_DMA_Start_IT+0xa8>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b01      	cmp	r3, #1
 8003268:	d12f      	bne.n	80032ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2202      	movs	r2, #2
 800326e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68b9      	ldr	r1, [r7, #8]
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 fa4a 	bl	8003718 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003288:	223f      	movs	r2, #63	; 0x3f
 800328a:	409a      	lsls	r2, r3
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0216 	orr.w	r2, r2, #22
 800329e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d007      	beq.n	80032b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0208 	orr.w	r2, r2, #8
 80032b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e005      	b.n	80032d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
 80032d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032ee:	f7ff fd51 	bl	8002d94 <HAL_GetTick>
 80032f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d008      	beq.n	8003312 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2280      	movs	r2, #128	; 0x80
 8003304:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e052      	b.n	80033b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0216 	bic.w	r2, r2, #22
 8003320:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003330:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d103      	bne.n	8003342 <HAL_DMA_Abort+0x62>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800333e:	2b00      	cmp	r3, #0
 8003340:	d007      	beq.n	8003352 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0208 	bic.w	r2, r2, #8
 8003350:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003362:	e013      	b.n	800338c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003364:	f7ff fd16 	bl	8002d94 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b05      	cmp	r3, #5
 8003370:	d90c      	bls.n	800338c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2220      	movs	r2, #32
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2203      	movs	r2, #3
 800337c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e015      	b.n	80033b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1e4      	bne.n	8003364 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339e:	223f      	movs	r2, #63	; 0x3f
 80033a0:	409a      	lsls	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d004      	beq.n	80033de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2280      	movs	r2, #128	; 0x80
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e00c      	b.n	80033f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2205      	movs	r2, #5
 80033e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0201 	bic.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003410:	4b8e      	ldr	r3, [pc, #568]	; (800364c <HAL_DMA_IRQHandler+0x248>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a8e      	ldr	r2, [pc, #568]	; (8003650 <HAL_DMA_IRQHandler+0x24c>)
 8003416:	fba2 2303 	umull	r2, r3, r2, r3
 800341a:	0a9b      	lsrs	r3, r3, #10
 800341c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003422:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342e:	2208      	movs	r2, #8
 8003430:	409a      	lsls	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4013      	ands	r3, r2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d01a      	beq.n	8003470 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d013      	beq.n	8003470 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0204 	bic.w	r2, r2, #4
 8003456:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345c:	2208      	movs	r2, #8
 800345e:	409a      	lsls	r2, r3
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003468:	f043 0201 	orr.w	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003474:	2201      	movs	r2, #1
 8003476:	409a      	lsls	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4013      	ands	r3, r2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d012      	beq.n	80034a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003492:	2201      	movs	r2, #1
 8003494:	409a      	lsls	r2, r3
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349e:	f043 0202 	orr.w	r2, r3, #2
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034aa:	2204      	movs	r2, #4
 80034ac:	409a      	lsls	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d012      	beq.n	80034dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00b      	beq.n	80034dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c8:	2204      	movs	r2, #4
 80034ca:	409a      	lsls	r2, r3
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d4:	f043 0204 	orr.w	r2, r3, #4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e0:	2210      	movs	r2, #16
 80034e2:	409a      	lsls	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d043      	beq.n	8003574 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d03c      	beq.n	8003574 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fe:	2210      	movs	r2, #16
 8003500:	409a      	lsls	r2, r3
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d018      	beq.n	8003546 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d108      	bne.n	8003534 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d024      	beq.n	8003574 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	4798      	blx	r3
 8003532:	e01f      	b.n	8003574 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003538:	2b00      	cmp	r3, #0
 800353a:	d01b      	beq.n	8003574 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	4798      	blx	r3
 8003544:	e016      	b.n	8003574 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d107      	bne.n	8003564 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0208 	bic.w	r2, r2, #8
 8003562:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003578:	2220      	movs	r2, #32
 800357a:	409a      	lsls	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4013      	ands	r3, r2
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 808f 	beq.w	80036a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 8087 	beq.w	80036a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359a:	2220      	movs	r2, #32
 800359c:	409a      	lsls	r2, r3
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b05      	cmp	r3, #5
 80035ac:	d136      	bne.n	800361c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0216 	bic.w	r2, r2, #22
 80035bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d103      	bne.n	80035de <HAL_DMA_IRQHandler+0x1da>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d007      	beq.n	80035ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0208 	bic.w	r2, r2, #8
 80035ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f2:	223f      	movs	r2, #63	; 0x3f
 80035f4:	409a      	lsls	r2, r3
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360e:	2b00      	cmp	r3, #0
 8003610:	d07e      	beq.n	8003710 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	4798      	blx	r3
        }
        return;
 800361a:	e079      	b.n	8003710 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d01d      	beq.n	8003666 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10d      	bne.n	8003654 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363c:	2b00      	cmp	r3, #0
 800363e:	d031      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	4798      	blx	r3
 8003648:	e02c      	b.n	80036a4 <HAL_DMA_IRQHandler+0x2a0>
 800364a:	bf00      	nop
 800364c:	2000007c 	.word	0x2000007c
 8003650:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d023      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	4798      	blx	r3
 8003664:	e01e      	b.n	80036a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10f      	bne.n	8003694 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0210 	bic.w	r2, r2, #16
 8003682:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d032      	beq.n	8003712 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d022      	beq.n	80036fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2205      	movs	r2, #5
 80036bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	3301      	adds	r3, #1
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d307      	bcc.n	80036ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f2      	bne.n	80036d0 <HAL_DMA_IRQHandler+0x2cc>
 80036ea:	e000      	b.n	80036ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d005      	beq.n	8003712 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	4798      	blx	r3
 800370e:	e000      	b.n	8003712 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003710:	bf00      	nop
    }
  }
}
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003734:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	2b40      	cmp	r3, #64	; 0x40
 8003744:	d108      	bne.n	8003758 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003756:	e007      	b.n	8003768 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	60da      	str	r2, [r3, #12]
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	3b10      	subs	r3, #16
 8003784:	4a14      	ldr	r2, [pc, #80]	; (80037d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	091b      	lsrs	r3, r3, #4
 800378c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800378e:	4a13      	ldr	r2, [pc, #76]	; (80037dc <DMA_CalcBaseAndBitshift+0x68>)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4413      	add	r3, r2
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d909      	bls.n	80037b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037aa:	f023 0303 	bic.w	r3, r3, #3
 80037ae:	1d1a      	adds	r2, r3, #4
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	659a      	str	r2, [r3, #88]	; 0x58
 80037b4:	e007      	b.n	80037c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037be:	f023 0303 	bic.w	r3, r3, #3
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	aaaaaaab 	.word	0xaaaaaaab
 80037dc:	08013024 	.word	0x08013024

080037e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d11f      	bne.n	800383a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d856      	bhi.n	80038ae <DMA_CheckFifoParam+0xce>
 8003800:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <DMA_CheckFifoParam+0x28>)
 8003802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003806:	bf00      	nop
 8003808:	08003819 	.word	0x08003819
 800380c:	0800382b 	.word	0x0800382b
 8003810:	08003819 	.word	0x08003819
 8003814:	080038af 	.word	0x080038af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d046      	beq.n	80038b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003828:	e043      	b.n	80038b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003832:	d140      	bne.n	80038b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003838:	e03d      	b.n	80038b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003842:	d121      	bne.n	8003888 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b03      	cmp	r3, #3
 8003848:	d837      	bhi.n	80038ba <DMA_CheckFifoParam+0xda>
 800384a:	a201      	add	r2, pc, #4	; (adr r2, 8003850 <DMA_CheckFifoParam+0x70>)
 800384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003850:	08003861 	.word	0x08003861
 8003854:	08003867 	.word	0x08003867
 8003858:	08003861 	.word	0x08003861
 800385c:	08003879 	.word	0x08003879
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
      break;
 8003864:	e030      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d025      	beq.n	80038be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003876:	e022      	b.n	80038be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003880:	d11f      	bne.n	80038c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003886:	e01c      	b.n	80038c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d903      	bls.n	8003896 <DMA_CheckFifoParam+0xb6>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2b03      	cmp	r3, #3
 8003892:	d003      	beq.n	800389c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003894:	e018      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	73fb      	strb	r3, [r7, #15]
      break;
 800389a:	e015      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00e      	beq.n	80038c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	73fb      	strb	r3, [r7, #15]
      break;
 80038ac:	e00b      	b.n	80038c6 <DMA_CheckFifoParam+0xe6>
      break;
 80038ae:	bf00      	nop
 80038b0:	e00a      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      break;
 80038b2:	bf00      	nop
 80038b4:	e008      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      break;
 80038b6:	bf00      	nop
 80038b8:	e006      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      break;
 80038ba:	bf00      	nop
 80038bc:	e004      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      break;
 80038be:	bf00      	nop
 80038c0:	e002      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      break;
 80038c6:	bf00      	nop
    }
  } 
  
  return status; 
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop

080038d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038d8:	b480      	push	{r7}
 80038da:	b089      	sub	sp, #36	; 0x24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	e159      	b.n	8003ba8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038f4:	2201      	movs	r2, #1
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4013      	ands	r3, r2
 8003906:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	429a      	cmp	r2, r3
 800390e:	f040 8148 	bne.w	8003ba2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	2b01      	cmp	r3, #1
 800391c:	d005      	beq.n	800392a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003926:	2b02      	cmp	r3, #2
 8003928:	d130      	bne.n	800398c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	2203      	movs	r2, #3
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4013      	ands	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003960:	2201      	movs	r2, #1
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	f003 0201 	and.w	r2, r3, #1
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	2b03      	cmp	r3, #3
 8003996:	d017      	beq.n	80039c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	2203      	movs	r2, #3
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d123      	bne.n	8003a1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	08da      	lsrs	r2, r3, #3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3208      	adds	r2, #8
 80039dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	220f      	movs	r2, #15
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4013      	ands	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	08da      	lsrs	r2, r3, #3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3208      	adds	r2, #8
 8003a16:	69b9      	ldr	r1, [r7, #24]
 8003a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	2203      	movs	r2, #3
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 0203 	and.w	r2, r3, #3
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 80a2 	beq.w	8003ba2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	4b57      	ldr	r3, [pc, #348]	; (8003bc0 <HAL_GPIO_Init+0x2e8>)
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	4a56      	ldr	r2, [pc, #344]	; (8003bc0 <HAL_GPIO_Init+0x2e8>)
 8003a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a6e:	4b54      	ldr	r3, [pc, #336]	; (8003bc0 <HAL_GPIO_Init+0x2e8>)
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a7a:	4a52      	ldr	r2, [pc, #328]	; (8003bc4 <HAL_GPIO_Init+0x2ec>)
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	089b      	lsrs	r3, r3, #2
 8003a80:	3302      	adds	r3, #2
 8003a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	220f      	movs	r2, #15
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43db      	mvns	r3, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a49      	ldr	r2, [pc, #292]	; (8003bc8 <HAL_GPIO_Init+0x2f0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d019      	beq.n	8003ada <HAL_GPIO_Init+0x202>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a48      	ldr	r2, [pc, #288]	; (8003bcc <HAL_GPIO_Init+0x2f4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d013      	beq.n	8003ad6 <HAL_GPIO_Init+0x1fe>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a47      	ldr	r2, [pc, #284]	; (8003bd0 <HAL_GPIO_Init+0x2f8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00d      	beq.n	8003ad2 <HAL_GPIO_Init+0x1fa>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a46      	ldr	r2, [pc, #280]	; (8003bd4 <HAL_GPIO_Init+0x2fc>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d007      	beq.n	8003ace <HAL_GPIO_Init+0x1f6>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a45      	ldr	r2, [pc, #276]	; (8003bd8 <HAL_GPIO_Init+0x300>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d101      	bne.n	8003aca <HAL_GPIO_Init+0x1f2>
 8003ac6:	2304      	movs	r3, #4
 8003ac8:	e008      	b.n	8003adc <HAL_GPIO_Init+0x204>
 8003aca:	2307      	movs	r3, #7
 8003acc:	e006      	b.n	8003adc <HAL_GPIO_Init+0x204>
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e004      	b.n	8003adc <HAL_GPIO_Init+0x204>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e002      	b.n	8003adc <HAL_GPIO_Init+0x204>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <HAL_GPIO_Init+0x204>
 8003ada:	2300      	movs	r3, #0
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	f002 0203 	and.w	r2, r2, #3
 8003ae2:	0092      	lsls	r2, r2, #2
 8003ae4:	4093      	lsls	r3, r2
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003aec:	4935      	ldr	r1, [pc, #212]	; (8003bc4 <HAL_GPIO_Init+0x2ec>)
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	089b      	lsrs	r3, r3, #2
 8003af2:	3302      	adds	r3, #2
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003afa:	4b38      	ldr	r3, [pc, #224]	; (8003bdc <HAL_GPIO_Init+0x304>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	43db      	mvns	r3, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4013      	ands	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b1e:	4a2f      	ldr	r2, [pc, #188]	; (8003bdc <HAL_GPIO_Init+0x304>)
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b24:	4b2d      	ldr	r3, [pc, #180]	; (8003bdc <HAL_GPIO_Init+0x304>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4013      	ands	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b48:	4a24      	ldr	r2, [pc, #144]	; (8003bdc <HAL_GPIO_Init+0x304>)
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b4e:	4b23      	ldr	r3, [pc, #140]	; (8003bdc <HAL_GPIO_Init+0x304>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	43db      	mvns	r3, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b72:	4a1a      	ldr	r2, [pc, #104]	; (8003bdc <HAL_GPIO_Init+0x304>)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b78:	4b18      	ldr	r3, [pc, #96]	; (8003bdc <HAL_GPIO_Init+0x304>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b9c:	4a0f      	ldr	r2, [pc, #60]	; (8003bdc <HAL_GPIO_Init+0x304>)
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	61fb      	str	r3, [r7, #28]
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	2b0f      	cmp	r3, #15
 8003bac:	f67f aea2 	bls.w	80038f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	bf00      	nop
 8003bb4:	3724      	adds	r7, #36	; 0x24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	40013800 	.word	0x40013800
 8003bc8:	40020000 	.word	0x40020000
 8003bcc:	40020400 	.word	0x40020400
 8003bd0:	40020800 	.word	0x40020800
 8003bd4:	40020c00 	.word	0x40020c00
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	40013c00 	.word	0x40013c00

08003be0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	e0bb      	b.n	8003d74 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	f040 80ab 	bne.w	8003d6e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003c18:	4a5c      	ldr	r2, [pc, #368]	; (8003d8c <HAL_GPIO_DeInit+0x1ac>)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	089b      	lsrs	r3, r3, #2
 8003c1e:	3302      	adds	r3, #2
 8003c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c24:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	220f      	movs	r2, #15
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	4013      	ands	r3, r2
 8003c38:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a54      	ldr	r2, [pc, #336]	; (8003d90 <HAL_GPIO_DeInit+0x1b0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d019      	beq.n	8003c76 <HAL_GPIO_DeInit+0x96>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a53      	ldr	r2, [pc, #332]	; (8003d94 <HAL_GPIO_DeInit+0x1b4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d013      	beq.n	8003c72 <HAL_GPIO_DeInit+0x92>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a52      	ldr	r2, [pc, #328]	; (8003d98 <HAL_GPIO_DeInit+0x1b8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00d      	beq.n	8003c6e <HAL_GPIO_DeInit+0x8e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a51      	ldr	r2, [pc, #324]	; (8003d9c <HAL_GPIO_DeInit+0x1bc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d007      	beq.n	8003c6a <HAL_GPIO_DeInit+0x8a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a50      	ldr	r2, [pc, #320]	; (8003da0 <HAL_GPIO_DeInit+0x1c0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d101      	bne.n	8003c66 <HAL_GPIO_DeInit+0x86>
 8003c62:	2304      	movs	r3, #4
 8003c64:	e008      	b.n	8003c78 <HAL_GPIO_DeInit+0x98>
 8003c66:	2307      	movs	r3, #7
 8003c68:	e006      	b.n	8003c78 <HAL_GPIO_DeInit+0x98>
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e004      	b.n	8003c78 <HAL_GPIO_DeInit+0x98>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e002      	b.n	8003c78 <HAL_GPIO_DeInit+0x98>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_GPIO_DeInit+0x98>
 8003c76:	2300      	movs	r3, #0
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	f002 0203 	and.w	r2, r2, #3
 8003c7e:	0092      	lsls	r2, r2, #2
 8003c80:	4093      	lsls	r3, r2
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d132      	bne.n	8003cee <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003c88:	4b46      	ldr	r3, [pc, #280]	; (8003da4 <HAL_GPIO_DeInit+0x1c4>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	4944      	ldr	r1, [pc, #272]	; (8003da4 <HAL_GPIO_DeInit+0x1c4>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003c96:	4b43      	ldr	r3, [pc, #268]	; (8003da4 <HAL_GPIO_DeInit+0x1c4>)
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	4941      	ldr	r1, [pc, #260]	; (8003da4 <HAL_GPIO_DeInit+0x1c4>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003ca4:	4b3f      	ldr	r3, [pc, #252]	; (8003da4 <HAL_GPIO_DeInit+0x1c4>)
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	43db      	mvns	r3, r3
 8003cac:	493d      	ldr	r1, [pc, #244]	; (8003da4 <HAL_GPIO_DeInit+0x1c4>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003cb2:	4b3c      	ldr	r3, [pc, #240]	; (8003da4 <HAL_GPIO_DeInit+0x1c4>)
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	493a      	ldr	r1, [pc, #232]	; (8003da4 <HAL_GPIO_DeInit+0x1c4>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	220f      	movs	r2, #15
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003cd0:	4a2e      	ldr	r2, [pc, #184]	; (8003d8c <HAL_GPIO_DeInit+0x1ac>)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	3302      	adds	r3, #2
 8003cd8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	482a      	ldr	r0, [pc, #168]	; (8003d8c <HAL_GPIO_DeInit+0x1ac>)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	089b      	lsrs	r3, r3, #2
 8003ce6:	400a      	ands	r2, r1
 8003ce8:	3302      	adds	r3, #2
 8003cea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	2103      	movs	r1, #3
 8003cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	401a      	ands	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	08da      	lsrs	r2, r3, #3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3208      	adds	r2, #8
 8003d0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	220f      	movs	r2, #15
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	08d2      	lsrs	r2, r2, #3
 8003d24:	4019      	ands	r1, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3208      	adds	r2, #8
 8003d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	2103      	movs	r1, #3
 8003d38:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	401a      	ands	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	2101      	movs	r1, #1
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d50:	43db      	mvns	r3, r3
 8003d52:	401a      	ands	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	2103      	movs	r1, #3
 8003d62:	fa01 f303 	lsl.w	r3, r1, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	401a      	ands	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	3301      	adds	r3, #1
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	2b0f      	cmp	r3, #15
 8003d78:	f67f af40 	bls.w	8003bfc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40013800 	.word	0x40013800
 8003d90:	40020000 	.word	0x40020000
 8003d94:	40020400 	.word	0x40020400
 8003d98:	40020800 	.word	0x40020800
 8003d9c:	40020c00 	.word	0x40020c00
 8003da0:	40021000 	.word	0x40021000
 8003da4:	40013c00 	.word	0x40013c00

08003da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	807b      	strh	r3, [r7, #2]
 8003db4:	4613      	mov	r3, r2
 8003db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003db8:	787b      	ldrb	r3, [r7, #1]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dbe:	887a      	ldrh	r2, [r7, #2]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dc4:	e003      	b.n	8003dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dc6:	887b      	ldrh	r3, [r7, #2]
 8003dc8:	041a      	lsls	r2, r3, #16
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	619a      	str	r2, [r3, #24]
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
	...

08003ddc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003de6:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	88fb      	ldrh	r3, [r7, #6]
 8003dec:	4013      	ands	r3, r2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d006      	beq.n	8003e00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003df2:	4a05      	ldr	r2, [pc, #20]	; (8003e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003df4:	88fb      	ldrh	r3, [r7, #6]
 8003df6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003df8:	88fb      	ldrh	r3, [r7, #6]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fe f840 	bl	8001e80 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40013c00 	.word	0x40013c00

08003e0c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e0e:	b08f      	sub	sp, #60	; 0x3c
 8003e10:	af0a      	add	r7, sp, #40	; 0x28
 8003e12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e054      	b.n	8003ec8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d106      	bne.n	8003e3e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f00d f935 	bl	80110a8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2203      	movs	r2, #3
 8003e42:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d102      	bne.n	8003e58 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f005 fd3f 	bl	80098e0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	687e      	ldr	r6, [r7, #4]
 8003e6a:	466d      	mov	r5, sp
 8003e6c:	f106 0410 	add.w	r4, r6, #16
 8003e70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e80:	1d33      	adds	r3, r6, #4
 8003e82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e84:	6838      	ldr	r0, [r7, #0]
 8003e86:	f005 fcb9 	bl	80097fc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2101      	movs	r1, #1
 8003e90:	4618      	mov	r0, r3
 8003e92:	f005 fd36 	bl	8009902 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	687e      	ldr	r6, [r7, #4]
 8003e9e:	466d      	mov	r5, sp
 8003ea0:	f106 0410 	add.w	r4, r6, #16
 8003ea4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ea6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003eb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003eb4:	1d33      	adds	r3, r6, #4
 8003eb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003eb8:	6838      	ldr	r0, [r7, #0]
 8003eba:	f005 febf 	bl	8009c3c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ed0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003ed0:	b590      	push	{r4, r7, lr}
 8003ed2:	b089      	sub	sp, #36	; 0x24
 8003ed4:	af04      	add	r7, sp, #16
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	4608      	mov	r0, r1
 8003eda:	4611      	mov	r1, r2
 8003edc:	461a      	mov	r2, r3
 8003ede:	4603      	mov	r3, r0
 8003ee0:	70fb      	strb	r3, [r7, #3]
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	70bb      	strb	r3, [r7, #2]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_HCD_HC_Init+0x28>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e076      	b.n	8003fe6 <HAL_HCD_HC_Init+0x116>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003f00:	78fb      	ldrb	r3, [r7, #3]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	212c      	movs	r1, #44	; 0x2c
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	333d      	adds	r3, #61	; 0x3d
 8003f0e:	2200      	movs	r2, #0
 8003f10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	212c      	movs	r1, #44	; 0x2c
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3338      	adds	r3, #56	; 0x38
 8003f20:	787a      	ldrb	r2, [r7, #1]
 8003f22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	212c      	movs	r1, #44	; 0x2c
 8003f2a:	fb01 f303 	mul.w	r3, r1, r3
 8003f2e:	4413      	add	r3, r2
 8003f30:	3340      	adds	r3, #64	; 0x40
 8003f32:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003f34:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003f36:	78fb      	ldrb	r3, [r7, #3]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	212c      	movs	r1, #44	; 0x2c
 8003f3c:	fb01 f303 	mul.w	r3, r1, r3
 8003f40:	4413      	add	r3, r2
 8003f42:	3339      	adds	r3, #57	; 0x39
 8003f44:	78fa      	ldrb	r2, [r7, #3]
 8003f46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003f48:	78fb      	ldrb	r3, [r7, #3]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	212c      	movs	r1, #44	; 0x2c
 8003f4e:	fb01 f303 	mul.w	r3, r1, r3
 8003f52:	4413      	add	r3, r2
 8003f54:	333f      	adds	r3, #63	; 0x3f
 8003f56:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003f5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003f5c:	78fb      	ldrb	r3, [r7, #3]
 8003f5e:	78ba      	ldrb	r2, [r7, #2]
 8003f60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f64:	b2d0      	uxtb	r0, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	212c      	movs	r1, #44	; 0x2c
 8003f6a:	fb01 f303 	mul.w	r3, r1, r3
 8003f6e:	4413      	add	r3, r2
 8003f70:	333a      	adds	r3, #58	; 0x3a
 8003f72:	4602      	mov	r2, r0
 8003f74:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003f76:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	da09      	bge.n	8003f92 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	212c      	movs	r1, #44	; 0x2c
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	4413      	add	r3, r2
 8003f8a:	333b      	adds	r3, #59	; 0x3b
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	e008      	b.n	8003fa4 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	212c      	movs	r1, #44	; 0x2c
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	333b      	adds	r3, #59	; 0x3b
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	212c      	movs	r1, #44	; 0x2c
 8003faa:	fb01 f303 	mul.w	r3, r1, r3
 8003fae:	4413      	add	r3, r2
 8003fb0:	333c      	adds	r3, #60	; 0x3c
 8003fb2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003fb6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6818      	ldr	r0, [r3, #0]
 8003fbc:	787c      	ldrb	r4, [r7, #1]
 8003fbe:	78ba      	ldrb	r2, [r7, #2]
 8003fc0:	78f9      	ldrb	r1, [r7, #3]
 8003fc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003fc4:	9302      	str	r3, [sp, #8]
 8003fc6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	4623      	mov	r3, r4
 8003fd4:	f005 ffb8 	bl	8009f48 <USB_HC_Init>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd90      	pop	{r4, r7, pc}

08003fee <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b084      	sub	sp, #16
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_HCD_HC_Halt+0x1e>
 8004008:	2302      	movs	r3, #2
 800400a:	e00f      	b.n	800402c <HAL_HCD_HC_Halt+0x3e>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	78fa      	ldrb	r2, [r7, #3]
 800401a:	4611      	mov	r1, r2
 800401c:	4618      	mov	r0, r3
 800401e:	f006 fa08 	bl	800a432 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800402a:	7bfb      	ldrb	r3, [r7, #15]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	4608      	mov	r0, r1
 800403e:	4611      	mov	r1, r2
 8004040:	461a      	mov	r2, r3
 8004042:	4603      	mov	r3, r0
 8004044:	70fb      	strb	r3, [r7, #3]
 8004046:	460b      	mov	r3, r1
 8004048:	70bb      	strb	r3, [r7, #2]
 800404a:	4613      	mov	r3, r2
 800404c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800404e:	78fb      	ldrb	r3, [r7, #3]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	212c      	movs	r1, #44	; 0x2c
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	4413      	add	r3, r2
 800405a:	333b      	adds	r3, #59	; 0x3b
 800405c:	78ba      	ldrb	r2, [r7, #2]
 800405e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	212c      	movs	r1, #44	; 0x2c
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	4413      	add	r3, r2
 800406c:	333f      	adds	r3, #63	; 0x3f
 800406e:	787a      	ldrb	r2, [r7, #1]
 8004070:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004072:	7c3b      	ldrb	r3, [r7, #16]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d112      	bne.n	800409e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	212c      	movs	r1, #44	; 0x2c
 800407e:	fb01 f303 	mul.w	r3, r1, r3
 8004082:	4413      	add	r3, r2
 8004084:	3342      	adds	r3, #66	; 0x42
 8004086:	2203      	movs	r2, #3
 8004088:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800408a:	78fb      	ldrb	r3, [r7, #3]
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	212c      	movs	r1, #44	; 0x2c
 8004090:	fb01 f303 	mul.w	r3, r1, r3
 8004094:	4413      	add	r3, r2
 8004096:	333d      	adds	r3, #61	; 0x3d
 8004098:	7f3a      	ldrb	r2, [r7, #28]
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	e008      	b.n	80040b0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800409e:	78fb      	ldrb	r3, [r7, #3]
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	212c      	movs	r1, #44	; 0x2c
 80040a4:	fb01 f303 	mul.w	r3, r1, r3
 80040a8:	4413      	add	r3, r2
 80040aa:	3342      	adds	r3, #66	; 0x42
 80040ac:	2202      	movs	r2, #2
 80040ae:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80040b0:	787b      	ldrb	r3, [r7, #1]
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	f200 80c6 	bhi.w	8004244 <HAL_HCD_HC_SubmitRequest+0x210>
 80040b8:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	080040d1 	.word	0x080040d1
 80040c4:	08004231 	.word	0x08004231
 80040c8:	08004135 	.word	0x08004135
 80040cc:	080041b3 	.word	0x080041b3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80040d0:	7c3b      	ldrb	r3, [r7, #16]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	f040 80b8 	bne.w	8004248 <HAL_HCD_HC_SubmitRequest+0x214>
 80040d8:	78bb      	ldrb	r3, [r7, #2]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f040 80b4 	bne.w	8004248 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80040e0:	8b3b      	ldrh	r3, [r7, #24]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d108      	bne.n	80040f8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	212c      	movs	r1, #44	; 0x2c
 80040ec:	fb01 f303 	mul.w	r3, r1, r3
 80040f0:	4413      	add	r3, r2
 80040f2:	3355      	adds	r3, #85	; 0x55
 80040f4:	2201      	movs	r2, #1
 80040f6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	212c      	movs	r1, #44	; 0x2c
 80040fe:	fb01 f303 	mul.w	r3, r1, r3
 8004102:	4413      	add	r3, r2
 8004104:	3355      	adds	r3, #85	; 0x55
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d109      	bne.n	8004120 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	212c      	movs	r1, #44	; 0x2c
 8004112:	fb01 f303 	mul.w	r3, r1, r3
 8004116:	4413      	add	r3, r2
 8004118:	3342      	adds	r3, #66	; 0x42
 800411a:	2200      	movs	r2, #0
 800411c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800411e:	e093      	b.n	8004248 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	212c      	movs	r1, #44	; 0x2c
 8004126:	fb01 f303 	mul.w	r3, r1, r3
 800412a:	4413      	add	r3, r2
 800412c:	3342      	adds	r3, #66	; 0x42
 800412e:	2202      	movs	r2, #2
 8004130:	701a      	strb	r2, [r3, #0]
      break;
 8004132:	e089      	b.n	8004248 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004134:	78bb      	ldrb	r3, [r7, #2]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d11d      	bne.n	8004176 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800413a:	78fb      	ldrb	r3, [r7, #3]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	212c      	movs	r1, #44	; 0x2c
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	4413      	add	r3, r2
 8004146:	3355      	adds	r3, #85	; 0x55
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	212c      	movs	r1, #44	; 0x2c
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	4413      	add	r3, r2
 800415a:	3342      	adds	r3, #66	; 0x42
 800415c:	2200      	movs	r2, #0
 800415e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004160:	e073      	b.n	800424a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	212c      	movs	r1, #44	; 0x2c
 8004168:	fb01 f303 	mul.w	r3, r1, r3
 800416c:	4413      	add	r3, r2
 800416e:	3342      	adds	r3, #66	; 0x42
 8004170:	2202      	movs	r2, #2
 8004172:	701a      	strb	r2, [r3, #0]
      break;
 8004174:	e069      	b.n	800424a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	212c      	movs	r1, #44	; 0x2c
 800417c:	fb01 f303 	mul.w	r3, r1, r3
 8004180:	4413      	add	r3, r2
 8004182:	3354      	adds	r3, #84	; 0x54
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800418a:	78fb      	ldrb	r3, [r7, #3]
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	212c      	movs	r1, #44	; 0x2c
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	4413      	add	r3, r2
 8004196:	3342      	adds	r3, #66	; 0x42
 8004198:	2200      	movs	r2, #0
 800419a:	701a      	strb	r2, [r3, #0]
      break;
 800419c:	e055      	b.n	800424a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	212c      	movs	r1, #44	; 0x2c
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	3342      	adds	r3, #66	; 0x42
 80041ac:	2202      	movs	r2, #2
 80041ae:	701a      	strb	r2, [r3, #0]
      break;
 80041b0:	e04b      	b.n	800424a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80041b2:	78bb      	ldrb	r3, [r7, #2]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d11d      	bne.n	80041f4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	212c      	movs	r1, #44	; 0x2c
 80041be:	fb01 f303 	mul.w	r3, r1, r3
 80041c2:	4413      	add	r3, r2
 80041c4:	3355      	adds	r3, #85	; 0x55
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d109      	bne.n	80041e0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	212c      	movs	r1, #44	; 0x2c
 80041d2:	fb01 f303 	mul.w	r3, r1, r3
 80041d6:	4413      	add	r3, r2
 80041d8:	3342      	adds	r3, #66	; 0x42
 80041da:	2200      	movs	r2, #0
 80041dc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80041de:	e034      	b.n	800424a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	212c      	movs	r1, #44	; 0x2c
 80041e6:	fb01 f303 	mul.w	r3, r1, r3
 80041ea:	4413      	add	r3, r2
 80041ec:	3342      	adds	r3, #66	; 0x42
 80041ee:	2202      	movs	r2, #2
 80041f0:	701a      	strb	r2, [r3, #0]
      break;
 80041f2:	e02a      	b.n	800424a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	212c      	movs	r1, #44	; 0x2c
 80041fa:	fb01 f303 	mul.w	r3, r1, r3
 80041fe:	4413      	add	r3, r2
 8004200:	3354      	adds	r3, #84	; 0x54
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d109      	bne.n	800421c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	212c      	movs	r1, #44	; 0x2c
 800420e:	fb01 f303 	mul.w	r3, r1, r3
 8004212:	4413      	add	r3, r2
 8004214:	3342      	adds	r3, #66	; 0x42
 8004216:	2200      	movs	r2, #0
 8004218:	701a      	strb	r2, [r3, #0]
      break;
 800421a:	e016      	b.n	800424a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800421c:	78fb      	ldrb	r3, [r7, #3]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	212c      	movs	r1, #44	; 0x2c
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	4413      	add	r3, r2
 8004228:	3342      	adds	r3, #66	; 0x42
 800422a:	2202      	movs	r2, #2
 800422c:	701a      	strb	r2, [r3, #0]
      break;
 800422e:	e00c      	b.n	800424a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	212c      	movs	r1, #44	; 0x2c
 8004236:	fb01 f303 	mul.w	r3, r1, r3
 800423a:	4413      	add	r3, r2
 800423c:	3342      	adds	r3, #66	; 0x42
 800423e:	2200      	movs	r2, #0
 8004240:	701a      	strb	r2, [r3, #0]
      break;
 8004242:	e002      	b.n	800424a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004244:	bf00      	nop
 8004246:	e000      	b.n	800424a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004248:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	212c      	movs	r1, #44	; 0x2c
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	4413      	add	r3, r2
 8004256:	3344      	adds	r3, #68	; 0x44
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	8b3a      	ldrh	r2, [r7, #24]
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	202c      	movs	r0, #44	; 0x2c
 8004264:	fb00 f303 	mul.w	r3, r0, r3
 8004268:	440b      	add	r3, r1
 800426a:	334c      	adds	r3, #76	; 0x4c
 800426c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800426e:	78fb      	ldrb	r3, [r7, #3]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	212c      	movs	r1, #44	; 0x2c
 8004274:	fb01 f303 	mul.w	r3, r1, r3
 8004278:	4413      	add	r3, r2
 800427a:	3360      	adds	r3, #96	; 0x60
 800427c:	2200      	movs	r2, #0
 800427e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	212c      	movs	r1, #44	; 0x2c
 8004286:	fb01 f303 	mul.w	r3, r1, r3
 800428a:	4413      	add	r3, r2
 800428c:	3350      	adds	r3, #80	; 0x50
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	212c      	movs	r1, #44	; 0x2c
 8004298:	fb01 f303 	mul.w	r3, r1, r3
 800429c:	4413      	add	r3, r2
 800429e:	3339      	adds	r3, #57	; 0x39
 80042a0:	78fa      	ldrb	r2, [r7, #3]
 80042a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	212c      	movs	r1, #44	; 0x2c
 80042aa:	fb01 f303 	mul.w	r3, r1, r3
 80042ae:	4413      	add	r3, r2
 80042b0:	3361      	adds	r3, #97	; 0x61
 80042b2:	2200      	movs	r2, #0
 80042b4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	78fb      	ldrb	r3, [r7, #3]
 80042bc:	222c      	movs	r2, #44	; 0x2c
 80042be:	fb02 f303 	mul.w	r3, r2, r3
 80042c2:	3338      	adds	r3, #56	; 0x38
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	18d1      	adds	r1, r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	461a      	mov	r2, r3
 80042d0:	f005 ff5c 	bl	800a18c <USB_HC_StartXfer>
 80042d4:	4603      	mov	r3, r0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop

080042e0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f005 fc5d 	bl	8009bb6 <USB_GetMode>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b01      	cmp	r3, #1
 8004300:	f040 80f6 	bne.w	80044f0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f005 fc41 	bl	8009b90 <USB_ReadInterrupts>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80ec 	beq.w	80044ee <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f005 fc38 	bl	8009b90 <USB_ReadInterrupts>
 8004320:	4603      	mov	r3, r0
 8004322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004326:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800432a:	d104      	bne.n	8004336 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004334:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f005 fc28 	bl	8009b90 <USB_ReadInterrupts>
 8004340:	4603      	mov	r3, r0
 8004342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800434a:	d104      	bne.n	8004356 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004354:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f005 fc18 	bl	8009b90 <USB_ReadInterrupts>
 8004360:	4603      	mov	r3, r0
 8004362:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004366:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800436a:	d104      	bne.n	8004376 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004374:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f005 fc08 	bl	8009b90 <USB_ReadInterrupts>
 8004380:	4603      	mov	r3, r0
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b02      	cmp	r3, #2
 8004388:	d103      	bne.n	8004392 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2202      	movs	r2, #2
 8004390:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f005 fbfa 	bl	8009b90 <USB_ReadInterrupts>
 800439c:	4603      	mov	r3, r0
 800439e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043a6:	d11c      	bne.n	80043e2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80043b0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10f      	bne.n	80043e2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80043c2:	2110      	movs	r1, #16
 80043c4:	6938      	ldr	r0, [r7, #16]
 80043c6:	f005 fae9 	bl	800999c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80043ca:	6938      	ldr	r0, [r7, #16]
 80043cc:	f005 fb1a 	bl	8009a04 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2101      	movs	r1, #1
 80043d6:	4618      	mov	r0, r3
 80043d8:	f005 fcf0 	bl	8009dbc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f00c fee1 	bl	80111a4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f005 fbd2 	bl	8009b90 <USB_ReadInterrupts>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043f6:	d102      	bne.n	80043fe <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f001 f89e 	bl	800553a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f005 fbc4 	bl	8009b90 <USB_ReadInterrupts>
 8004408:	4603      	mov	r3, r0
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b08      	cmp	r3, #8
 8004410:	d106      	bne.n	8004420 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f00c feaa 	bl	801116c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2208      	movs	r2, #8
 800441e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4618      	mov	r0, r3
 8004426:	f005 fbb3 	bl	8009b90 <USB_ReadInterrupts>
 800442a:	4603      	mov	r3, r0
 800442c:	f003 0310 	and.w	r3, r3, #16
 8004430:	2b10      	cmp	r3, #16
 8004432:	d101      	bne.n	8004438 <HAL_HCD_IRQHandler+0x158>
 8004434:	2301      	movs	r3, #1
 8004436:	e000      	b.n	800443a <HAL_HCD_IRQHandler+0x15a>
 8004438:	2300      	movs	r3, #0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d012      	beq.n	8004464 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699a      	ldr	r2, [r3, #24]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0210 	bic.w	r2, r2, #16
 800444c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 ffa1 	bl	8005396 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699a      	ldr	r2, [r3, #24]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0210 	orr.w	r2, r2, #16
 8004462:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f005 fb91 	bl	8009b90 <USB_ReadInterrupts>
 800446e:	4603      	mov	r3, r0
 8004470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004474:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004478:	d13a      	bne.n	80044f0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f005 ffc6 	bl	800a410 <USB_HC_ReadInterrupt>
 8004484:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	e025      	b.n	80044d8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d018      	beq.n	80044d2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b6:	d106      	bne.n	80044c6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	4619      	mov	r1, r3
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f8ab 	bl	800461a <HCD_HC_IN_IRQHandler>
 80044c4:	e005      	b.n	80044d2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	4619      	mov	r1, r3
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fbf9 	bl	8004cc4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	3301      	adds	r3, #1
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d3d4      	bcc.n	800448c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044ea:	615a      	str	r2, [r3, #20]
 80044ec:	e000      	b.n	80044f0 <HAL_HCD_IRQHandler+0x210>
      return;
 80044ee:	bf00      	nop
    }
  }
}
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b082      	sub	sp, #8
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_HCD_Start+0x16>
 8004508:	2302      	movs	r3, #2
 800450a:	e013      	b.n	8004534 <HAL_HCD_Start+0x3e>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2101      	movs	r1, #1
 800451a:	4618      	mov	r0, r3
 800451c:	f005 fcb2 	bl	8009e84 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f005 f9ca 	bl	80098be <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_HCD_Stop+0x16>
 800454e:	2302      	movs	r3, #2
 8004550:	e00d      	b.n	800456e <HAL_HCD_Stop+0x32>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f006 f8a0 	bl	800a6a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b082      	sub	sp, #8
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f005 fc54 	bl	8009e30 <USB_ResetPort>
 8004588:	4603      	mov	r3, r0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	460b      	mov	r3, r1
 800459c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	212c      	movs	r1, #44	; 0x2c
 80045a4:	fb01 f303 	mul.w	r3, r1, r3
 80045a8:	4413      	add	r3, r2
 80045aa:	3360      	adds	r3, #96	; 0x60
 80045ac:	781b      	ldrb	r3, [r3, #0]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	460b      	mov	r3, r1
 80045c4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80045c6:	78fb      	ldrb	r3, [r7, #3]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	212c      	movs	r1, #44	; 0x2c
 80045cc:	fb01 f303 	mul.w	r3, r1, r3
 80045d0:	4413      	add	r3, r2
 80045d2:	3350      	adds	r3, #80	; 0x50
 80045d4:	681b      	ldr	r3, [r3, #0]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f005 fc98 	bl	8009f24 <USB_GetCurrentFrame>
 80045f4:	4603      	mov	r3, r0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f005 fc73 	bl	8009ef6 <USB_GetHostSpeed>
 8004610:	4603      	mov	r3, r0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b086      	sub	sp, #24
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	460b      	mov	r3, r1
 8004624:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	4413      	add	r3, r2
 800463c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	2b04      	cmp	r3, #4
 8004648:	d11a      	bne.n	8004680 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4413      	add	r3, r2
 8004652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004656:	461a      	mov	r2, r3
 8004658:	2304      	movs	r3, #4
 800465a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	212c      	movs	r1, #44	; 0x2c
 8004662:	fb01 f303 	mul.w	r3, r1, r3
 8004666:	4413      	add	r3, r2
 8004668:	3361      	adds	r3, #97	; 0x61
 800466a:	2206      	movs	r2, #6
 800466c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	4611      	mov	r1, r2
 8004678:	4618      	mov	r0, r3
 800467a:	f005 feda 	bl	800a432 <USB_HC_Halt>
 800467e:	e0af      	b.n	80047e0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	4413      	add	r3, r2
 8004688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004696:	d11b      	bne.n	80046d0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a4:	461a      	mov	r2, r3
 80046a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	212c      	movs	r1, #44	; 0x2c
 80046b2:	fb01 f303 	mul.w	r3, r1, r3
 80046b6:	4413      	add	r3, r2
 80046b8:	3361      	adds	r3, #97	; 0x61
 80046ba:	2207      	movs	r2, #7
 80046bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	4611      	mov	r1, r2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f005 feb2 	bl	800a432 <USB_HC_Halt>
 80046ce:	e087      	b.n	80047e0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b20      	cmp	r3, #32
 80046e4:	d109      	bne.n	80046fa <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f2:	461a      	mov	r2, r3
 80046f4:	2320      	movs	r3, #32
 80046f6:	6093      	str	r3, [r2, #8]
 80046f8:	e072      	b.n	80047e0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	4413      	add	r3, r2
 8004702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b08      	cmp	r3, #8
 800470e:	d11a      	bne.n	8004746 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	4413      	add	r3, r2
 8004718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800471c:	461a      	mov	r2, r3
 800471e:	2308      	movs	r3, #8
 8004720:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	212c      	movs	r1, #44	; 0x2c
 8004728:	fb01 f303 	mul.w	r3, r1, r3
 800472c:	4413      	add	r3, r2
 800472e:	3361      	adds	r3, #97	; 0x61
 8004730:	2205      	movs	r2, #5
 8004732:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	4611      	mov	r1, r2
 800473e:	4618      	mov	r0, r3
 8004740:	f005 fe77 	bl	800a432 <USB_HC_Halt>
 8004744:	e04c      	b.n	80047e0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	4413      	add	r3, r2
 800474e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475c:	d11b      	bne.n	8004796 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	4413      	add	r3, r2
 8004766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476a:	461a      	mov	r2, r3
 800476c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004770:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	212c      	movs	r1, #44	; 0x2c
 8004778:	fb01 f303 	mul.w	r3, r1, r3
 800477c:	4413      	add	r3, r2
 800477e:	3361      	adds	r3, #97	; 0x61
 8004780:	2208      	movs	r2, #8
 8004782:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	4611      	mov	r1, r2
 800478e:	4618      	mov	r0, r3
 8004790:	f005 fe4f 	bl	800a432 <USB_HC_Halt>
 8004794:	e024      	b.n	80047e0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	4413      	add	r3, r2
 800479e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a8:	2b80      	cmp	r3, #128	; 0x80
 80047aa:	d119      	bne.n	80047e0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b8:	461a      	mov	r2, r3
 80047ba:	2380      	movs	r3, #128	; 0x80
 80047bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	212c      	movs	r1, #44	; 0x2c
 80047c4:	fb01 f303 	mul.w	r3, r1, r3
 80047c8:	4413      	add	r3, r2
 80047ca:	3361      	adds	r3, #97	; 0x61
 80047cc:	2206      	movs	r2, #6
 80047ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	4611      	mov	r1, r2
 80047da:	4618      	mov	r0, r3
 80047dc:	f005 fe29 	bl	800a432 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f6:	d112      	bne.n	800481e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	4611      	mov	r1, r2
 8004802:	4618      	mov	r0, r3
 8004804:	f005 fe15 	bl	800a432 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4413      	add	r3, r2
 8004810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004814:	461a      	mov	r2, r3
 8004816:	f44f 7300 	mov.w	r3, #512	; 0x200
 800481a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800481c:	e24e      	b.n	8004cbc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	4413      	add	r3, r2
 8004826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b01      	cmp	r3, #1
 8004832:	f040 80df 	bne.w	80049f4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d019      	beq.n	8004872 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	212c      	movs	r1, #44	; 0x2c
 8004844:	fb01 f303 	mul.w	r3, r1, r3
 8004848:	4413      	add	r3, r2
 800484a:	3348      	adds	r3, #72	; 0x48
 800484c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	0159      	lsls	r1, r3, #5
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	440b      	add	r3, r1
 8004856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004860:	1ad2      	subs	r2, r2, r3
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	202c      	movs	r0, #44	; 0x2c
 8004868:	fb00 f303 	mul.w	r3, r0, r3
 800486c:	440b      	add	r3, r1
 800486e:	3350      	adds	r3, #80	; 0x50
 8004870:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	212c      	movs	r1, #44	; 0x2c
 8004878:	fb01 f303 	mul.w	r3, r1, r3
 800487c:	4413      	add	r3, r2
 800487e:	3361      	adds	r3, #97	; 0x61
 8004880:	2201      	movs	r2, #1
 8004882:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	212c      	movs	r1, #44	; 0x2c
 800488a:	fb01 f303 	mul.w	r3, r1, r3
 800488e:	4413      	add	r3, r2
 8004890:	335c      	adds	r3, #92	; 0x5c
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	4413      	add	r3, r2
 800489e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a2:	461a      	mov	r2, r3
 80048a4:	2301      	movs	r3, #1
 80048a6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	212c      	movs	r1, #44	; 0x2c
 80048ae:	fb01 f303 	mul.w	r3, r1, r3
 80048b2:	4413      	add	r3, r2
 80048b4:	333f      	adds	r3, #63	; 0x3f
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d009      	beq.n	80048d0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	212c      	movs	r1, #44	; 0x2c
 80048c2:	fb01 f303 	mul.w	r3, r1, r3
 80048c6:	4413      	add	r3, r2
 80048c8:	333f      	adds	r3, #63	; 0x3f
 80048ca:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d111      	bne.n	80048f4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	4611      	mov	r1, r2
 80048da:	4618      	mov	r0, r3
 80048dc:	f005 fda9 	bl	800a432 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ec:	461a      	mov	r2, r3
 80048ee:	2310      	movs	r3, #16
 80048f0:	6093      	str	r3, [r2, #8]
 80048f2:	e03a      	b.n	800496a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	212c      	movs	r1, #44	; 0x2c
 80048fa:	fb01 f303 	mul.w	r3, r1, r3
 80048fe:	4413      	add	r3, r2
 8004900:	333f      	adds	r3, #63	; 0x3f
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b03      	cmp	r3, #3
 8004906:	d009      	beq.n	800491c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	212c      	movs	r1, #44	; 0x2c
 800490e:	fb01 f303 	mul.w	r3, r1, r3
 8004912:	4413      	add	r3, r2
 8004914:	333f      	adds	r3, #63	; 0x3f
 8004916:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004918:	2b01      	cmp	r3, #1
 800491a:	d126      	bne.n	800496a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	4413      	add	r3, r2
 8004924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	0151      	lsls	r1, r2, #5
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	440a      	add	r2, r1
 8004932:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004936:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800493a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	212c      	movs	r1, #44	; 0x2c
 8004942:	fb01 f303 	mul.w	r3, r1, r3
 8004946:	4413      	add	r3, r2
 8004948:	3360      	adds	r3, #96	; 0x60
 800494a:	2201      	movs	r2, #1
 800494c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	b2d9      	uxtb	r1, r3
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	202c      	movs	r0, #44	; 0x2c
 8004958:	fb00 f303 	mul.w	r3, r0, r3
 800495c:	4413      	add	r3, r2
 800495e:	3360      	adds	r3, #96	; 0x60
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f00c fc2b 	bl	80111c0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d12b      	bne.n	80049ca <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	212c      	movs	r1, #44	; 0x2c
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	4413      	add	r3, r2
 800497e:	3348      	adds	r3, #72	; 0x48
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	202c      	movs	r0, #44	; 0x2c
 8004988:	fb00 f202 	mul.w	r2, r0, r2
 800498c:	440a      	add	r2, r1
 800498e:	3240      	adds	r2, #64	; 0x40
 8004990:	8812      	ldrh	r2, [r2, #0]
 8004992:	fbb3 f3f2 	udiv	r3, r3, r2
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 818e 	beq.w	8004cbc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	212c      	movs	r1, #44	; 0x2c
 80049a6:	fb01 f303 	mul.w	r3, r1, r3
 80049aa:	4413      	add	r3, r2
 80049ac:	3354      	adds	r3, #84	; 0x54
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	f083 0301 	eor.w	r3, r3, #1
 80049b4:	b2d8      	uxtb	r0, r3
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	212c      	movs	r1, #44	; 0x2c
 80049bc:	fb01 f303 	mul.w	r3, r1, r3
 80049c0:	4413      	add	r3, r2
 80049c2:	3354      	adds	r3, #84	; 0x54
 80049c4:	4602      	mov	r2, r0
 80049c6:	701a      	strb	r2, [r3, #0]
}
 80049c8:	e178      	b.n	8004cbc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	212c      	movs	r1, #44	; 0x2c
 80049d0:	fb01 f303 	mul.w	r3, r1, r3
 80049d4:	4413      	add	r3, r2
 80049d6:	3354      	adds	r3, #84	; 0x54
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	f083 0301 	eor.w	r3, r3, #1
 80049de:	b2d8      	uxtb	r0, r3
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	212c      	movs	r1, #44	; 0x2c
 80049e6:	fb01 f303 	mul.w	r3, r1, r3
 80049ea:	4413      	add	r3, r2
 80049ec:	3354      	adds	r3, #84	; 0x54
 80049ee:	4602      	mov	r2, r0
 80049f0:	701a      	strb	r2, [r3, #0]
}
 80049f2:	e163      	b.n	8004cbc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	f040 80f6 	bne.w	8004bf8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	212c      	movs	r1, #44	; 0x2c
 8004a12:	fb01 f303 	mul.w	r3, r1, r3
 8004a16:	4413      	add	r3, r2
 8004a18:	3361      	adds	r3, #97	; 0x61
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d109      	bne.n	8004a34 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	212c      	movs	r1, #44	; 0x2c
 8004a26:	fb01 f303 	mul.w	r3, r1, r3
 8004a2a:	4413      	add	r3, r2
 8004a2c:	3360      	adds	r3, #96	; 0x60
 8004a2e:	2201      	movs	r2, #1
 8004a30:	701a      	strb	r2, [r3, #0]
 8004a32:	e0c9      	b.n	8004bc8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	212c      	movs	r1, #44	; 0x2c
 8004a3a:	fb01 f303 	mul.w	r3, r1, r3
 8004a3e:	4413      	add	r3, r2
 8004a40:	3361      	adds	r3, #97	; 0x61
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b05      	cmp	r3, #5
 8004a46:	d109      	bne.n	8004a5c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	212c      	movs	r1, #44	; 0x2c
 8004a4e:	fb01 f303 	mul.w	r3, r1, r3
 8004a52:	4413      	add	r3, r2
 8004a54:	3360      	adds	r3, #96	; 0x60
 8004a56:	2205      	movs	r2, #5
 8004a58:	701a      	strb	r2, [r3, #0]
 8004a5a:	e0b5      	b.n	8004bc8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	212c      	movs	r1, #44	; 0x2c
 8004a62:	fb01 f303 	mul.w	r3, r1, r3
 8004a66:	4413      	add	r3, r2
 8004a68:	3361      	adds	r3, #97	; 0x61
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	2b06      	cmp	r3, #6
 8004a6e:	d009      	beq.n	8004a84 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	212c      	movs	r1, #44	; 0x2c
 8004a76:	fb01 f303 	mul.w	r3, r1, r3
 8004a7a:	4413      	add	r3, r2
 8004a7c:	3361      	adds	r3, #97	; 0x61
 8004a7e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d150      	bne.n	8004b26 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	212c      	movs	r1, #44	; 0x2c
 8004a8a:	fb01 f303 	mul.w	r3, r1, r3
 8004a8e:	4413      	add	r3, r2
 8004a90:	335c      	adds	r3, #92	; 0x5c
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	6879      	ldr	r1, [r7, #4]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	202c      	movs	r0, #44	; 0x2c
 8004a9c:	fb00 f303 	mul.w	r3, r0, r3
 8004aa0:	440b      	add	r3, r1
 8004aa2:	335c      	adds	r3, #92	; 0x5c
 8004aa4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	212c      	movs	r1, #44	; 0x2c
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	335c      	adds	r3, #92	; 0x5c
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d912      	bls.n	8004ae0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	212c      	movs	r1, #44	; 0x2c
 8004ac0:	fb01 f303 	mul.w	r3, r1, r3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	335c      	adds	r3, #92	; 0x5c
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	212c      	movs	r1, #44	; 0x2c
 8004ad2:	fb01 f303 	mul.w	r3, r1, r3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3360      	adds	r3, #96	; 0x60
 8004ada:	2204      	movs	r2, #4
 8004adc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ade:	e073      	b.n	8004bc8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	212c      	movs	r1, #44	; 0x2c
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
 8004aea:	4413      	add	r3, r2
 8004aec:	3360      	adds	r3, #96	; 0x60
 8004aee:	2202      	movs	r2, #2
 8004af0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b08:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b10:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1e:	461a      	mov	r2, r3
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004b24:	e050      	b.n	8004bc8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	212c      	movs	r1, #44	; 0x2c
 8004b2c:	fb01 f303 	mul.w	r3, r1, r3
 8004b30:	4413      	add	r3, r2
 8004b32:	3361      	adds	r3, #97	; 0x61
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d122      	bne.n	8004b80 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	212c      	movs	r1, #44	; 0x2c
 8004b40:	fb01 f303 	mul.w	r3, r1, r3
 8004b44:	4413      	add	r3, r2
 8004b46:	3360      	adds	r3, #96	; 0x60
 8004b48:	2202      	movs	r2, #2
 8004b4a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b62:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b6a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b78:	461a      	mov	r2, r3
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	e023      	b.n	8004bc8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	212c      	movs	r1, #44	; 0x2c
 8004b86:	fb01 f303 	mul.w	r3, r1, r3
 8004b8a:	4413      	add	r3, r2
 8004b8c:	3361      	adds	r3, #97	; 0x61
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2b07      	cmp	r3, #7
 8004b92:	d119      	bne.n	8004bc8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	212c      	movs	r1, #44	; 0x2c
 8004b9a:	fb01 f303 	mul.w	r3, r1, r3
 8004b9e:	4413      	add	r3, r2
 8004ba0:	335c      	adds	r3, #92	; 0x5c
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	202c      	movs	r0, #44	; 0x2c
 8004bac:	fb00 f303 	mul.w	r3, r0, r3
 8004bb0:	440b      	add	r3, r1
 8004bb2:	335c      	adds	r3, #92	; 0x5c
 8004bb4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	212c      	movs	r1, #44	; 0x2c
 8004bbc:	fb01 f303 	mul.w	r3, r1, r3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3360      	adds	r3, #96	; 0x60
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	b2d9      	uxtb	r1, r3
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	202c      	movs	r0, #44	; 0x2c
 8004be4:	fb00 f303 	mul.w	r3, r0, r3
 8004be8:	4413      	add	r3, r2
 8004bea:	3360      	adds	r3, #96	; 0x60
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f00c fae5 	bl	80111c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004bf6:	e061      	b.n	8004cbc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 0310 	and.w	r3, r3, #16
 8004c0a:	2b10      	cmp	r3, #16
 8004c0c:	d156      	bne.n	8004cbc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	212c      	movs	r1, #44	; 0x2c
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	4413      	add	r3, r2
 8004c1a:	333f      	adds	r3, #63	; 0x3f
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	d111      	bne.n	8004c46 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	212c      	movs	r1, #44	; 0x2c
 8004c28:	fb01 f303 	mul.w	r3, r1, r3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	335c      	adds	r3, #92	; 0x5c
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	4611      	mov	r1, r2
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f005 fbf7 	bl	800a432 <USB_HC_Halt>
 8004c44:	e031      	b.n	8004caa <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	212c      	movs	r1, #44	; 0x2c
 8004c4c:	fb01 f303 	mul.w	r3, r1, r3
 8004c50:	4413      	add	r3, r2
 8004c52:	333f      	adds	r3, #63	; 0x3f
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d009      	beq.n	8004c6e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	212c      	movs	r1, #44	; 0x2c
 8004c60:	fb01 f303 	mul.w	r3, r1, r3
 8004c64:	4413      	add	r3, r2
 8004c66:	333f      	adds	r3, #63	; 0x3f
 8004c68:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d11d      	bne.n	8004caa <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	212c      	movs	r1, #44	; 0x2c
 8004c74:	fb01 f303 	mul.w	r3, r1, r3
 8004c78:	4413      	add	r3, r2
 8004c7a:	335c      	adds	r3, #92	; 0x5c
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d110      	bne.n	8004caa <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	212c      	movs	r1, #44	; 0x2c
 8004c8e:	fb01 f303 	mul.w	r3, r1, r3
 8004c92:	4413      	add	r3, r2
 8004c94:	3361      	adds	r3, #97	; 0x61
 8004c96:	2203      	movs	r2, #3
 8004c98:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f005 fbc4 	bl	800a432 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	2310      	movs	r3, #16
 8004cba:	6093      	str	r3, [r2, #8]
}
 8004cbc:	bf00      	nop
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b088      	sub	sp, #32
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004cda:	78fb      	ldrb	r3, [r7, #3]
 8004cdc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d11a      	bne.n	8004d2a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d00:	461a      	mov	r2, r3
 8004d02:	2304      	movs	r3, #4
 8004d04:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	212c      	movs	r1, #44	; 0x2c
 8004d0c:	fb01 f303 	mul.w	r3, r1, r3
 8004d10:	4413      	add	r3, r2
 8004d12:	3361      	adds	r3, #97	; 0x61
 8004d14:	2206      	movs	r2, #6
 8004d16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	4611      	mov	r1, r2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f005 fb85 	bl	800a432 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004d28:	e331      	b.n	800538e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 0320 	and.w	r3, r3, #32
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d12e      	bne.n	8004d9e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	2320      	movs	r3, #32
 8004d50:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	212c      	movs	r1, #44	; 0x2c
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	333d      	adds	r3, #61	; 0x3d
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	f040 8313 	bne.w	800538e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	212c      	movs	r1, #44	; 0x2c
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	4413      	add	r3, r2
 8004d74:	333d      	adds	r3, #61	; 0x3d
 8004d76:	2200      	movs	r2, #0
 8004d78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	212c      	movs	r1, #44	; 0x2c
 8004d80:	fb01 f303 	mul.w	r3, r1, r3
 8004d84:	4413      	add	r3, r2
 8004d86:	3360      	adds	r3, #96	; 0x60
 8004d88:	2202      	movs	r2, #2
 8004d8a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	4611      	mov	r1, r2
 8004d96:	4618      	mov	r0, r3
 8004d98:	f005 fb4b 	bl	800a432 <USB_HC_Halt>
}
 8004d9c:	e2f7      	b.n	800538e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db4:	d112      	bne.n	8004ddc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dc8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f005 fb2c 	bl	800a432 <USB_HC_Halt>
}
 8004dda:	e2d8      	b.n	800538e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d140      	bne.n	8004e74 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	212c      	movs	r1, #44	; 0x2c
 8004df8:	fb01 f303 	mul.w	r3, r1, r3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	335c      	adds	r3, #92	; 0x5c
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	d111      	bne.n	8004e3e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	212c      	movs	r1, #44	; 0x2c
 8004e20:	fb01 f303 	mul.w	r3, r1, r3
 8004e24:	4413      	add	r3, r2
 8004e26:	333d      	adds	r3, #61	; 0x3d
 8004e28:	2201      	movs	r2, #1
 8004e2a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e38:	461a      	mov	r2, r3
 8004e3a:	2340      	movs	r3, #64	; 0x40
 8004e3c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	212c      	movs	r1, #44	; 0x2c
 8004e56:	fb01 f303 	mul.w	r3, r1, r3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	3361      	adds	r3, #97	; 0x61
 8004e5e:	2201      	movs	r2, #1
 8004e60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f005 fae0 	bl	800a432 <USB_HC_Halt>
}
 8004e72:	e28c      	b.n	800538e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e86:	2b40      	cmp	r3, #64	; 0x40
 8004e88:	d12c      	bne.n	8004ee4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	212c      	movs	r1, #44	; 0x2c
 8004e90:	fb01 f303 	mul.w	r3, r1, r3
 8004e94:	4413      	add	r3, r2
 8004e96:	3361      	adds	r3, #97	; 0x61
 8004e98:	2204      	movs	r2, #4
 8004e9a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	212c      	movs	r1, #44	; 0x2c
 8004ea2:	fb01 f303 	mul.w	r3, r1, r3
 8004ea6:	4413      	add	r3, r2
 8004ea8:	333d      	adds	r3, #61	; 0x3d
 8004eaa:	2201      	movs	r2, #1
 8004eac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	212c      	movs	r1, #44	; 0x2c
 8004eb4:	fb01 f303 	mul.w	r3, r1, r3
 8004eb8:	4413      	add	r3, r2
 8004eba:	335c      	adds	r3, #92	; 0x5c
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	4611      	mov	r1, r2
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f005 fab1 	bl	800a432 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004edc:	461a      	mov	r2, r3
 8004ede:	2340      	movs	r3, #64	; 0x40
 8004ee0:	6093      	str	r3, [r2, #8]
}
 8004ee2:	e254      	b.n	800538e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d11a      	bne.n	8004f30 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f06:	461a      	mov	r2, r3
 8004f08:	2308      	movs	r3, #8
 8004f0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	212c      	movs	r1, #44	; 0x2c
 8004f12:	fb01 f303 	mul.w	r3, r1, r3
 8004f16:	4413      	add	r3, r2
 8004f18:	3361      	adds	r3, #97	; 0x61
 8004f1a:	2205      	movs	r2, #5
 8004f1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	b2d2      	uxtb	r2, r2
 8004f26:	4611      	mov	r1, r2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f005 fa82 	bl	800a432 <USB_HC_Halt>
}
 8004f2e:	e22e      	b.n	800538e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 0310 	and.w	r3, r3, #16
 8004f42:	2b10      	cmp	r3, #16
 8004f44:	d140      	bne.n	8004fc8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	212c      	movs	r1, #44	; 0x2c
 8004f4c:	fb01 f303 	mul.w	r3, r1, r3
 8004f50:	4413      	add	r3, r2
 8004f52:	335c      	adds	r3, #92	; 0x5c
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	212c      	movs	r1, #44	; 0x2c
 8004f5e:	fb01 f303 	mul.w	r3, r1, r3
 8004f62:	4413      	add	r3, r2
 8004f64:	3361      	adds	r3, #97	; 0x61
 8004f66:	2203      	movs	r2, #3
 8004f68:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	212c      	movs	r1, #44	; 0x2c
 8004f70:	fb01 f303 	mul.w	r3, r1, r3
 8004f74:	4413      	add	r3, r2
 8004f76:	333d      	adds	r3, #61	; 0x3d
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d112      	bne.n	8004fa4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	212c      	movs	r1, #44	; 0x2c
 8004f84:	fb01 f303 	mul.w	r3, r1, r3
 8004f88:	4413      	add	r3, r2
 8004f8a:	333c      	adds	r3, #60	; 0x3c
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d108      	bne.n	8004fa4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	212c      	movs	r1, #44	; 0x2c
 8004f98:	fb01 f303 	mul.w	r3, r1, r3
 8004f9c:	4413      	add	r3, r2
 8004f9e:	333d      	adds	r3, #61	; 0x3d
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	4611      	mov	r1, r2
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f005 fa3f 	bl	800a432 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	2310      	movs	r3, #16
 8004fc4:	6093      	str	r3, [r2, #8]
}
 8004fc6:	e1e2      	b.n	800538e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fda:	2b80      	cmp	r3, #128	; 0x80
 8004fdc:	d164      	bne.n	80050a8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d111      	bne.n	800500a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	212c      	movs	r1, #44	; 0x2c
 8004fec:	fb01 f303 	mul.w	r3, r1, r3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	3361      	adds	r3, #97	; 0x61
 8004ff4:	2206      	movs	r2, #6
 8004ff6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	4611      	mov	r1, r2
 8005002:	4618      	mov	r0, r3
 8005004:	f005 fa15 	bl	800a432 <USB_HC_Halt>
 8005008:	e044      	b.n	8005094 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	212c      	movs	r1, #44	; 0x2c
 8005010:	fb01 f303 	mul.w	r3, r1, r3
 8005014:	4413      	add	r3, r2
 8005016:	335c      	adds	r3, #92	; 0x5c
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	202c      	movs	r0, #44	; 0x2c
 8005022:	fb00 f303 	mul.w	r3, r0, r3
 8005026:	440b      	add	r3, r1
 8005028:	335c      	adds	r3, #92	; 0x5c
 800502a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	212c      	movs	r1, #44	; 0x2c
 8005032:	fb01 f303 	mul.w	r3, r1, r3
 8005036:	4413      	add	r3, r2
 8005038:	335c      	adds	r3, #92	; 0x5c
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b02      	cmp	r3, #2
 800503e:	d920      	bls.n	8005082 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	212c      	movs	r1, #44	; 0x2c
 8005046:	fb01 f303 	mul.w	r3, r1, r3
 800504a:	4413      	add	r3, r2
 800504c:	335c      	adds	r3, #92	; 0x5c
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	212c      	movs	r1, #44	; 0x2c
 8005058:	fb01 f303 	mul.w	r3, r1, r3
 800505c:	4413      	add	r3, r2
 800505e:	3360      	adds	r3, #96	; 0x60
 8005060:	2204      	movs	r2, #4
 8005062:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	b2d9      	uxtb	r1, r3
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	202c      	movs	r0, #44	; 0x2c
 800506e:	fb00 f303 	mul.w	r3, r0, r3
 8005072:	4413      	add	r3, r2
 8005074:	3360      	adds	r3, #96	; 0x60
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f00c f8a0 	bl	80111c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005080:	e008      	b.n	8005094 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	212c      	movs	r1, #44	; 0x2c
 8005088:	fb01 f303 	mul.w	r3, r1, r3
 800508c:	4413      	add	r3, r2
 800508e:	3360      	adds	r3, #96	; 0x60
 8005090:	2202      	movs	r2, #2
 8005092:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	4413      	add	r3, r2
 800509c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a0:	461a      	mov	r2, r3
 80050a2:	2380      	movs	r3, #128	; 0x80
 80050a4:	6093      	str	r3, [r2, #8]
}
 80050a6:	e172      	b.n	800538e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050be:	d11b      	bne.n	80050f8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	212c      	movs	r1, #44	; 0x2c
 80050c6:	fb01 f303 	mul.w	r3, r1, r3
 80050ca:	4413      	add	r3, r2
 80050cc:	3361      	adds	r3, #97	; 0x61
 80050ce:	2208      	movs	r2, #8
 80050d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	4611      	mov	r1, r2
 80050dc:	4618      	mov	r0, r3
 80050de:	f005 f9a8 	bl	800a432 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ee:	461a      	mov	r2, r3
 80050f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050f4:	6093      	str	r3, [r2, #8]
}
 80050f6:	e14a      	b.n	800538e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b02      	cmp	r3, #2
 800510c:	f040 813f 	bne.w	800538e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	212c      	movs	r1, #44	; 0x2c
 8005116:	fb01 f303 	mul.w	r3, r1, r3
 800511a:	4413      	add	r3, r2
 800511c:	3361      	adds	r3, #97	; 0x61
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d17d      	bne.n	8005220 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	212c      	movs	r1, #44	; 0x2c
 800512a:	fb01 f303 	mul.w	r3, r1, r3
 800512e:	4413      	add	r3, r2
 8005130:	3360      	adds	r3, #96	; 0x60
 8005132:	2201      	movs	r2, #1
 8005134:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	212c      	movs	r1, #44	; 0x2c
 800513c:	fb01 f303 	mul.w	r3, r1, r3
 8005140:	4413      	add	r3, r2
 8005142:	333f      	adds	r3, #63	; 0x3f
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d00a      	beq.n	8005160 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	212c      	movs	r1, #44	; 0x2c
 8005150:	fb01 f303 	mul.w	r3, r1, r3
 8005154:	4413      	add	r3, r2
 8005156:	333f      	adds	r3, #63	; 0x3f
 8005158:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800515a:	2b03      	cmp	r3, #3
 800515c:	f040 8100 	bne.w	8005360 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d113      	bne.n	8005190 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	212c      	movs	r1, #44	; 0x2c
 800516e:	fb01 f303 	mul.w	r3, r1, r3
 8005172:	4413      	add	r3, r2
 8005174:	3355      	adds	r3, #85	; 0x55
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	f083 0301 	eor.w	r3, r3, #1
 800517c:	b2d8      	uxtb	r0, r3
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	212c      	movs	r1, #44	; 0x2c
 8005184:	fb01 f303 	mul.w	r3, r1, r3
 8005188:	4413      	add	r3, r2
 800518a:	3355      	adds	r3, #85	; 0x55
 800518c:	4602      	mov	r2, r0
 800518e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	2b01      	cmp	r3, #1
 8005196:	f040 80e3 	bne.w	8005360 <HCD_HC_OUT_IRQHandler+0x69c>
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	212c      	movs	r1, #44	; 0x2c
 80051a0:	fb01 f303 	mul.w	r3, r1, r3
 80051a4:	4413      	add	r3, r2
 80051a6:	334c      	adds	r3, #76	; 0x4c
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 80d8 	beq.w	8005360 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	212c      	movs	r1, #44	; 0x2c
 80051b6:	fb01 f303 	mul.w	r3, r1, r3
 80051ba:	4413      	add	r3, r2
 80051bc:	334c      	adds	r3, #76	; 0x4c
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6879      	ldr	r1, [r7, #4]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	202c      	movs	r0, #44	; 0x2c
 80051c6:	fb00 f202 	mul.w	r2, r0, r2
 80051ca:	440a      	add	r2, r1
 80051cc:	3240      	adds	r2, #64	; 0x40
 80051ce:	8812      	ldrh	r2, [r2, #0]
 80051d0:	4413      	add	r3, r2
 80051d2:	3b01      	subs	r3, #1
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	202c      	movs	r0, #44	; 0x2c
 80051da:	fb00 f202 	mul.w	r2, r0, r2
 80051de:	440a      	add	r2, r1
 80051e0:	3240      	adds	r2, #64	; 0x40
 80051e2:	8812      	ldrh	r2, [r2, #0]
 80051e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80b5 	beq.w	8005360 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	212c      	movs	r1, #44	; 0x2c
 80051fc:	fb01 f303 	mul.w	r3, r1, r3
 8005200:	4413      	add	r3, r2
 8005202:	3355      	adds	r3, #85	; 0x55
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	f083 0301 	eor.w	r3, r3, #1
 800520a:	b2d8      	uxtb	r0, r3
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	212c      	movs	r1, #44	; 0x2c
 8005212:	fb01 f303 	mul.w	r3, r1, r3
 8005216:	4413      	add	r3, r2
 8005218:	3355      	adds	r3, #85	; 0x55
 800521a:	4602      	mov	r2, r0
 800521c:	701a      	strb	r2, [r3, #0]
 800521e:	e09f      	b.n	8005360 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	212c      	movs	r1, #44	; 0x2c
 8005226:	fb01 f303 	mul.w	r3, r1, r3
 800522a:	4413      	add	r3, r2
 800522c:	3361      	adds	r3, #97	; 0x61
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b03      	cmp	r3, #3
 8005232:	d109      	bne.n	8005248 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	212c      	movs	r1, #44	; 0x2c
 800523a:	fb01 f303 	mul.w	r3, r1, r3
 800523e:	4413      	add	r3, r2
 8005240:	3360      	adds	r3, #96	; 0x60
 8005242:	2202      	movs	r2, #2
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	e08b      	b.n	8005360 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	212c      	movs	r1, #44	; 0x2c
 800524e:	fb01 f303 	mul.w	r3, r1, r3
 8005252:	4413      	add	r3, r2
 8005254:	3361      	adds	r3, #97	; 0x61
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b04      	cmp	r3, #4
 800525a:	d109      	bne.n	8005270 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	212c      	movs	r1, #44	; 0x2c
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	4413      	add	r3, r2
 8005268:	3360      	adds	r3, #96	; 0x60
 800526a:	2202      	movs	r2, #2
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	e077      	b.n	8005360 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	212c      	movs	r1, #44	; 0x2c
 8005276:	fb01 f303 	mul.w	r3, r1, r3
 800527a:	4413      	add	r3, r2
 800527c:	3361      	adds	r3, #97	; 0x61
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b05      	cmp	r3, #5
 8005282:	d109      	bne.n	8005298 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	212c      	movs	r1, #44	; 0x2c
 800528a:	fb01 f303 	mul.w	r3, r1, r3
 800528e:	4413      	add	r3, r2
 8005290:	3360      	adds	r3, #96	; 0x60
 8005292:	2205      	movs	r2, #5
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	e063      	b.n	8005360 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	212c      	movs	r1, #44	; 0x2c
 800529e:	fb01 f303 	mul.w	r3, r1, r3
 80052a2:	4413      	add	r3, r2
 80052a4:	3361      	adds	r3, #97	; 0x61
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b06      	cmp	r3, #6
 80052aa:	d009      	beq.n	80052c0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	212c      	movs	r1, #44	; 0x2c
 80052b2:	fb01 f303 	mul.w	r3, r1, r3
 80052b6:	4413      	add	r3, r2
 80052b8:	3361      	adds	r3, #97	; 0x61
 80052ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d14f      	bne.n	8005360 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	212c      	movs	r1, #44	; 0x2c
 80052c6:	fb01 f303 	mul.w	r3, r1, r3
 80052ca:	4413      	add	r3, r2
 80052cc:	335c      	adds	r3, #92	; 0x5c
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	6879      	ldr	r1, [r7, #4]
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	202c      	movs	r0, #44	; 0x2c
 80052d8:	fb00 f303 	mul.w	r3, r0, r3
 80052dc:	440b      	add	r3, r1
 80052de:	335c      	adds	r3, #92	; 0x5c
 80052e0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	212c      	movs	r1, #44	; 0x2c
 80052e8:	fb01 f303 	mul.w	r3, r1, r3
 80052ec:	4413      	add	r3, r2
 80052ee:	335c      	adds	r3, #92	; 0x5c
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d912      	bls.n	800531c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	212c      	movs	r1, #44	; 0x2c
 80052fc:	fb01 f303 	mul.w	r3, r1, r3
 8005300:	4413      	add	r3, r2
 8005302:	335c      	adds	r3, #92	; 0x5c
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	212c      	movs	r1, #44	; 0x2c
 800530e:	fb01 f303 	mul.w	r3, r1, r3
 8005312:	4413      	add	r3, r2
 8005314:	3360      	adds	r3, #96	; 0x60
 8005316:	2204      	movs	r2, #4
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	e021      	b.n	8005360 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	212c      	movs	r1, #44	; 0x2c
 8005322:	fb01 f303 	mul.w	r3, r1, r3
 8005326:	4413      	add	r3, r2
 8005328:	3360      	adds	r3, #96	; 0x60
 800532a:	2202      	movs	r2, #2
 800532c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	4413      	add	r3, r2
 8005336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005344:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800534c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	4413      	add	r3, r2
 8005356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535a:	461a      	mov	r2, r3
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	4413      	add	r3, r2
 8005368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536c:	461a      	mov	r2, r3
 800536e:	2302      	movs	r3, #2
 8005370:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	b2d9      	uxtb	r1, r3
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	202c      	movs	r0, #44	; 0x2c
 800537c:	fb00 f303 	mul.w	r3, r0, r3
 8005380:	4413      	add	r3, r2
 8005382:	3360      	adds	r3, #96	; 0x60
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f00b ff19 	bl	80111c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800538e:	bf00      	nop
 8005390:	3720      	adds	r7, #32
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b08a      	sub	sp, #40	; 0x28
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	0c5b      	lsrs	r3, r3, #17
 80053bc:	f003 030f 	and.w	r3, r3, #15
 80053c0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	091b      	lsrs	r3, r3, #4
 80053c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053ca:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d004      	beq.n	80053dc <HCD_RXQLVL_IRQHandler+0x46>
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2b05      	cmp	r3, #5
 80053d6:	f000 80a9 	beq.w	800552c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80053da:	e0aa      	b.n	8005532 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 80a6 	beq.w	8005530 <HCD_RXQLVL_IRQHandler+0x19a>
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	212c      	movs	r1, #44	; 0x2c
 80053ea:	fb01 f303 	mul.w	r3, r1, r3
 80053ee:	4413      	add	r3, r2
 80053f0:	3344      	adds	r3, #68	; 0x44
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 809b 	beq.w	8005530 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	212c      	movs	r1, #44	; 0x2c
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	4413      	add	r3, r2
 8005406:	3350      	adds	r3, #80	; 0x50
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	441a      	add	r2, r3
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	202c      	movs	r0, #44	; 0x2c
 8005414:	fb00 f303 	mul.w	r3, r0, r3
 8005418:	440b      	add	r3, r1
 800541a:	334c      	adds	r3, #76	; 0x4c
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d87a      	bhi.n	8005518 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6818      	ldr	r0, [r3, #0]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	212c      	movs	r1, #44	; 0x2c
 800542c:	fb01 f303 	mul.w	r3, r1, r3
 8005430:	4413      	add	r3, r2
 8005432:	3344      	adds	r3, #68	; 0x44
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	b292      	uxth	r2, r2
 800543a:	4619      	mov	r1, r3
 800543c:	f004 fb50 	bl	8009ae0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	212c      	movs	r1, #44	; 0x2c
 8005446:	fb01 f303 	mul.w	r3, r1, r3
 800544a:	4413      	add	r3, r2
 800544c:	3344      	adds	r3, #68	; 0x44
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	441a      	add	r2, r3
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	202c      	movs	r0, #44	; 0x2c
 800545a:	fb00 f303 	mul.w	r3, r0, r3
 800545e:	440b      	add	r3, r1
 8005460:	3344      	adds	r3, #68	; 0x44
 8005462:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	212c      	movs	r1, #44	; 0x2c
 800546a:	fb01 f303 	mul.w	r3, r1, r3
 800546e:	4413      	add	r3, r2
 8005470:	3350      	adds	r3, #80	; 0x50
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	441a      	add	r2, r3
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	202c      	movs	r0, #44	; 0x2c
 800547e:	fb00 f303 	mul.w	r3, r0, r3
 8005482:	440b      	add	r3, r1
 8005484:	3350      	adds	r3, #80	; 0x50
 8005486:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	4413      	add	r3, r2
 8005490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	0cdb      	lsrs	r3, r3, #19
 8005498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800549c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	212c      	movs	r1, #44	; 0x2c
 80054a4:	fb01 f303 	mul.w	r3, r1, r3
 80054a8:	4413      	add	r3, r2
 80054aa:	3340      	adds	r3, #64	; 0x40
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d13c      	bne.n	8005530 <HCD_RXQLVL_IRQHandler+0x19a>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d039      	beq.n	8005530 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054d2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054da:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e8:	461a      	mov	r2, r3
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	212c      	movs	r1, #44	; 0x2c
 80054f4:	fb01 f303 	mul.w	r3, r1, r3
 80054f8:	4413      	add	r3, r2
 80054fa:	3354      	adds	r3, #84	; 0x54
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	f083 0301 	eor.w	r3, r3, #1
 8005502:	b2d8      	uxtb	r0, r3
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	212c      	movs	r1, #44	; 0x2c
 800550a:	fb01 f303 	mul.w	r3, r1, r3
 800550e:	4413      	add	r3, r2
 8005510:	3354      	adds	r3, #84	; 0x54
 8005512:	4602      	mov	r2, r0
 8005514:	701a      	strb	r2, [r3, #0]
      break;
 8005516:	e00b      	b.n	8005530 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	212c      	movs	r1, #44	; 0x2c
 800551e:	fb01 f303 	mul.w	r3, r1, r3
 8005522:	4413      	add	r3, r2
 8005524:	3360      	adds	r3, #96	; 0x60
 8005526:	2204      	movs	r2, #4
 8005528:	701a      	strb	r2, [r3, #0]
      break;
 800552a:	e001      	b.n	8005530 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800552c:	bf00      	nop
 800552e:	e000      	b.n	8005532 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005530:	bf00      	nop
  }
}
 8005532:	bf00      	nop
 8005534:	3728      	adds	r7, #40	; 0x28
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b086      	sub	sp, #24
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005566:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b02      	cmp	r3, #2
 8005570:	d10b      	bne.n	800558a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b01      	cmp	r3, #1
 800557a:	d102      	bne.n	8005582 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f00b fe03 	bl	8011188 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	f043 0302 	orr.w	r3, r3, #2
 8005588:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b08      	cmp	r3, #8
 8005592:	d132      	bne.n	80055fa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f043 0308 	orr.w	r3, r3, #8
 800559a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f003 0304 	and.w	r3, r3, #4
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d126      	bne.n	80055f4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d113      	bne.n	80055d6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80055b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055b8:	d106      	bne.n	80055c8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2102      	movs	r1, #2
 80055c0:	4618      	mov	r0, r3
 80055c2:	f004 fbfb 	bl	8009dbc <USB_InitFSLSPClkSel>
 80055c6:	e011      	b.n	80055ec <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2101      	movs	r1, #1
 80055ce:	4618      	mov	r0, r3
 80055d0:	f004 fbf4 	bl	8009dbc <USB_InitFSLSPClkSel>
 80055d4:	e00a      	b.n	80055ec <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d106      	bne.n	80055ec <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055e4:	461a      	mov	r2, r3
 80055e6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80055ea:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f00b fdf5 	bl	80111dc <HAL_HCD_PortEnabled_Callback>
 80055f2:	e002      	b.n	80055fa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f00b fdff 	bl	80111f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f003 0320 	and.w	r3, r3, #32
 8005600:	2b20      	cmp	r3, #32
 8005602:	d103      	bne.n	800560c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f043 0320 	orr.w	r3, r3, #32
 800560a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005612:	461a      	mov	r2, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	6013      	str	r3, [r2, #0]
}
 8005618:	bf00      	nop
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e12b      	b.n	800588a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7fc f8fa 	bl	8001840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2224      	movs	r2, #36	; 0x24
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0201 	bic.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005672:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005682:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005684:	f002 ff88 	bl	8008598 <HAL_RCC_GetPCLK1Freq>
 8005688:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	4a81      	ldr	r2, [pc, #516]	; (8005894 <HAL_I2C_Init+0x274>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d807      	bhi.n	80056a4 <HAL_I2C_Init+0x84>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4a80      	ldr	r2, [pc, #512]	; (8005898 <HAL_I2C_Init+0x278>)
 8005698:	4293      	cmp	r3, r2
 800569a:	bf94      	ite	ls
 800569c:	2301      	movls	r3, #1
 800569e:	2300      	movhi	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	e006      	b.n	80056b2 <HAL_I2C_Init+0x92>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4a7d      	ldr	r2, [pc, #500]	; (800589c <HAL_I2C_Init+0x27c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	bf94      	ite	ls
 80056ac:	2301      	movls	r3, #1
 80056ae:	2300      	movhi	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e0e7      	b.n	800588a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4a78      	ldr	r2, [pc, #480]	; (80058a0 <HAL_I2C_Init+0x280>)
 80056be:	fba2 2303 	umull	r2, r3, r2, r3
 80056c2:	0c9b      	lsrs	r3, r3, #18
 80056c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	4a6a      	ldr	r2, [pc, #424]	; (8005894 <HAL_I2C_Init+0x274>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d802      	bhi.n	80056f4 <HAL_I2C_Init+0xd4>
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	3301      	adds	r3, #1
 80056f2:	e009      	b.n	8005708 <HAL_I2C_Init+0xe8>
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80056fa:	fb02 f303 	mul.w	r3, r2, r3
 80056fe:	4a69      	ldr	r2, [pc, #420]	; (80058a4 <HAL_I2C_Init+0x284>)
 8005700:	fba2 2303 	umull	r2, r3, r2, r3
 8005704:	099b      	lsrs	r3, r3, #6
 8005706:	3301      	adds	r3, #1
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6812      	ldr	r2, [r2, #0]
 800570c:	430b      	orrs	r3, r1
 800570e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800571a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	495c      	ldr	r1, [pc, #368]	; (8005894 <HAL_I2C_Init+0x274>)
 8005724:	428b      	cmp	r3, r1
 8005726:	d819      	bhi.n	800575c <HAL_I2C_Init+0x13c>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	1e59      	subs	r1, r3, #1
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	fbb1 f3f3 	udiv	r3, r1, r3
 8005736:	1c59      	adds	r1, r3, #1
 8005738:	f640 73fc 	movw	r3, #4092	; 0xffc
 800573c:	400b      	ands	r3, r1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <HAL_I2C_Init+0x138>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	1e59      	subs	r1, r3, #1
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005750:	3301      	adds	r3, #1
 8005752:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005756:	e051      	b.n	80057fc <HAL_I2C_Init+0x1dc>
 8005758:	2304      	movs	r3, #4
 800575a:	e04f      	b.n	80057fc <HAL_I2C_Init+0x1dc>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d111      	bne.n	8005788 <HAL_I2C_Init+0x168>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	1e58      	subs	r0, r3, #1
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6859      	ldr	r1, [r3, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	440b      	add	r3, r1
 8005772:	fbb0 f3f3 	udiv	r3, r0, r3
 8005776:	3301      	adds	r3, #1
 8005778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800577c:	2b00      	cmp	r3, #0
 800577e:	bf0c      	ite	eq
 8005780:	2301      	moveq	r3, #1
 8005782:	2300      	movne	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	e012      	b.n	80057ae <HAL_I2C_Init+0x18e>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	1e58      	subs	r0, r3, #1
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6859      	ldr	r1, [r3, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	440b      	add	r3, r1
 8005796:	0099      	lsls	r1, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	fbb0 f3f3 	udiv	r3, r0, r3
 800579e:	3301      	adds	r3, #1
 80057a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	bf0c      	ite	eq
 80057a8:	2301      	moveq	r3, #1
 80057aa:	2300      	movne	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <HAL_I2C_Init+0x196>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e022      	b.n	80057fc <HAL_I2C_Init+0x1dc>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10e      	bne.n	80057dc <HAL_I2C_Init+0x1bc>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	1e58      	subs	r0, r3, #1
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6859      	ldr	r1, [r3, #4]
 80057c6:	460b      	mov	r3, r1
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	440b      	add	r3, r1
 80057cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80057d0:	3301      	adds	r3, #1
 80057d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057da:	e00f      	b.n	80057fc <HAL_I2C_Init+0x1dc>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	1e58      	subs	r0, r3, #1
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6859      	ldr	r1, [r3, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	440b      	add	r3, r1
 80057ea:	0099      	lsls	r1, r3, #2
 80057ec:	440b      	add	r3, r1
 80057ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80057f2:	3301      	adds	r3, #1
 80057f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057fc:	6879      	ldr	r1, [r7, #4]
 80057fe:	6809      	ldr	r1, [r1, #0]
 8005800:	4313      	orrs	r3, r2
 8005802:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69da      	ldr	r2, [r3, #28]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	431a      	orrs	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800582a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6911      	ldr	r1, [r2, #16]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	68d2      	ldr	r2, [r2, #12]
 8005836:	4311      	orrs	r1, r2
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6812      	ldr	r2, [r2, #0]
 800583c:	430b      	orrs	r3, r1
 800583e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	695a      	ldr	r2, [r3, #20]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	431a      	orrs	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0201 	orr.w	r2, r2, #1
 800586a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2220      	movs	r2, #32
 8005876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	000186a0 	.word	0x000186a0
 8005898:	001e847f 	.word	0x001e847f
 800589c:	003d08ff 	.word	0x003d08ff
 80058a0:	431bde83 	.word	0x431bde83
 80058a4:	10624dd3 	.word	0x10624dd3

080058a8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e021      	b.n	80058fe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2224      	movs	r2, #36	; 0x24
 80058be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0201 	bic.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fc f81e 	bl	8001914 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
	...

08005908 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af02      	add	r7, sp, #8
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	607a      	str	r2, [r7, #4]
 8005912:	461a      	mov	r2, r3
 8005914:	460b      	mov	r3, r1
 8005916:	817b      	strh	r3, [r7, #10]
 8005918:	4613      	mov	r3, r2
 800591a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800591c:	f7fd fa3a 	bl	8002d94 <HAL_GetTick>
 8005920:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b20      	cmp	r3, #32
 800592c:	f040 80e0 	bne.w	8005af0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	2319      	movs	r3, #25
 8005936:	2201      	movs	r2, #1
 8005938:	4970      	ldr	r1, [pc, #448]	; (8005afc <HAL_I2C_Master_Transmit+0x1f4>)
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 ff3e 	bl	80067bc <I2C_WaitOnFlagUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005946:	2302      	movs	r3, #2
 8005948:	e0d3      	b.n	8005af2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <HAL_I2C_Master_Transmit+0x50>
 8005954:	2302      	movs	r3, #2
 8005956:	e0cc      	b.n	8005af2 <HAL_I2C_Master_Transmit+0x1ea>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b01      	cmp	r3, #1
 800596c:	d007      	beq.n	800597e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0201 	orr.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800598c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2221      	movs	r2, #33	; 0x21
 8005992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2210      	movs	r2, #16
 800599a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	893a      	ldrh	r2, [r7, #8]
 80059ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4a50      	ldr	r2, [pc, #320]	; (8005b00 <HAL_I2C_Master_Transmit+0x1f8>)
 80059be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80059c0:	8979      	ldrh	r1, [r7, #10]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	6a3a      	ldr	r2, [r7, #32]
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 fcf8 	bl	80063bc <I2C_MasterRequestWrite>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e08d      	b.n	8005af2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059d6:	2300      	movs	r3, #0
 80059d8:	613b      	str	r3, [r7, #16]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	613b      	str	r3, [r7, #16]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	613b      	str	r3, [r7, #16]
 80059ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80059ec:	e066      	b.n	8005abc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	6a39      	ldr	r1, [r7, #32]
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 ffb8 	bl	8006968 <I2C_WaitOnTXEFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00d      	beq.n	8005a1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d107      	bne.n	8005a16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e06b      	b.n	8005af2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	781a      	ldrb	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d11b      	bne.n	8005a90 <HAL_I2C_Master_Transmit+0x188>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d017      	beq.n	8005a90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	781a      	ldrb	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	6a39      	ldr	r1, [r7, #32]
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 ffa8 	bl	80069ea <I2C_WaitOnBTFFlagUntilTimeout>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00d      	beq.n	8005abc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d107      	bne.n	8005ab8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ab6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e01a      	b.n	8005af2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d194      	bne.n	80059ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ad2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005aec:	2300      	movs	r3, #0
 8005aee:	e000      	b.n	8005af2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005af0:	2302      	movs	r3, #2
  }
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3718      	adds	r7, #24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	00100002 	.word	0x00100002
 8005b00:	ffff0000 	.word	0xffff0000

08005b04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b088      	sub	sp, #32
 8005b08:	af02      	add	r7, sp, #8
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	4608      	mov	r0, r1
 8005b0e:	4611      	mov	r1, r2
 8005b10:	461a      	mov	r2, r3
 8005b12:	4603      	mov	r3, r0
 8005b14:	817b      	strh	r3, [r7, #10]
 8005b16:	460b      	mov	r3, r1
 8005b18:	813b      	strh	r3, [r7, #8]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b1e:	f7fd f939 	bl	8002d94 <HAL_GetTick>
 8005b22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b20      	cmp	r3, #32
 8005b2e:	f040 80d9 	bne.w	8005ce4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	2319      	movs	r3, #25
 8005b38:	2201      	movs	r2, #1
 8005b3a:	496d      	ldr	r1, [pc, #436]	; (8005cf0 <HAL_I2C_Mem_Write+0x1ec>)
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 fe3d 	bl	80067bc <I2C_WaitOnFlagUntilTimeout>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005b48:	2302      	movs	r3, #2
 8005b4a:	e0cc      	b.n	8005ce6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d101      	bne.n	8005b5a <HAL_I2C_Mem_Write+0x56>
 8005b56:	2302      	movs	r3, #2
 8005b58:	e0c5      	b.n	8005ce6 <HAL_I2C_Mem_Write+0x1e2>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d007      	beq.n	8005b80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0201 	orr.w	r2, r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2221      	movs	r2, #33	; 0x21
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2240      	movs	r2, #64	; 0x40
 8005b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6a3a      	ldr	r2, [r7, #32]
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4a4d      	ldr	r2, [pc, #308]	; (8005cf4 <HAL_I2C_Mem_Write+0x1f0>)
 8005bc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bc2:	88f8      	ldrh	r0, [r7, #6]
 8005bc4:	893a      	ldrh	r2, [r7, #8]
 8005bc6:	8979      	ldrh	r1, [r7, #10]
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	9301      	str	r3, [sp, #4]
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 fc74 	bl	80064c0 <I2C_RequestMemoryWrite>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d052      	beq.n	8005c84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e081      	b.n	8005ce6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 febe 	bl	8006968 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00d      	beq.n	8005c0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	2b04      	cmp	r3, #4
 8005bf8:	d107      	bne.n	8005c0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e06b      	b.n	8005ce6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	781a      	ldrb	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	d11b      	bne.n	8005c84 <HAL_I2C_Mem_Write+0x180>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d017      	beq.n	8005c84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	781a      	ldrb	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1aa      	bne.n	8005be2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 feaa 	bl	80069ea <I2C_WaitOnBTFFlagUntilTimeout>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00d      	beq.n	8005cb8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d107      	bne.n	8005cb4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e016      	b.n	8005ce6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	e000      	b.n	8005ce6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005ce4:	2302      	movs	r3, #2
  }
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	00100002 	.word	0x00100002
 8005cf4:	ffff0000 	.word	0xffff0000

08005cf8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b08c      	sub	sp, #48	; 0x30
 8005cfc:	af02      	add	r7, sp, #8
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	4608      	mov	r0, r1
 8005d02:	4611      	mov	r1, r2
 8005d04:	461a      	mov	r2, r3
 8005d06:	4603      	mov	r3, r0
 8005d08:	817b      	strh	r3, [r7, #10]
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	813b      	strh	r3, [r7, #8]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d12:	f7fd f83f 	bl	8002d94 <HAL_GetTick>
 8005d16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	f040 8208 	bne.w	8006136 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	2319      	movs	r3, #25
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	497b      	ldr	r1, [pc, #492]	; (8005f1c <HAL_I2C_Mem_Read+0x224>)
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 fd43 	bl	80067bc <I2C_WaitOnFlagUntilTimeout>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e1fb      	b.n	8006138 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d101      	bne.n	8005d4e <HAL_I2C_Mem_Read+0x56>
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	e1f4      	b.n	8006138 <HAL_I2C_Mem_Read+0x440>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d007      	beq.n	8005d74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0201 	orr.w	r2, r2, #1
 8005d72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2222      	movs	r2, #34	; 0x22
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2240      	movs	r2, #64	; 0x40
 8005d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005da4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4a5b      	ldr	r2, [pc, #364]	; (8005f20 <HAL_I2C_Mem_Read+0x228>)
 8005db4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005db6:	88f8      	ldrh	r0, [r7, #6]
 8005db8:	893a      	ldrh	r2, [r7, #8]
 8005dba:	8979      	ldrh	r1, [r7, #10]
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	9301      	str	r3, [sp, #4]
 8005dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 fc10 	bl	80065ec <I2C_RequestMemoryRead>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e1b0      	b.n	8006138 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d113      	bne.n	8005e06 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dde:	2300      	movs	r3, #0
 8005de0:	623b      	str	r3, [r7, #32]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	623b      	str	r3, [r7, #32]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	623b      	str	r3, [r7, #32]
 8005df2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	e184      	b.n	8006110 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d11b      	bne.n	8005e46 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61fb      	str	r3, [r7, #28]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	61fb      	str	r3, [r7, #28]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	61fb      	str	r3, [r7, #28]
 8005e32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	e164      	b.n	8006110 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d11b      	bne.n	8005e86 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e6e:	2300      	movs	r3, #0
 8005e70:	61bb      	str	r3, [r7, #24]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	61bb      	str	r3, [r7, #24]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	61bb      	str	r3, [r7, #24]
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	e144      	b.n	8006110 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e86:	2300      	movs	r3, #0
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	617b      	str	r3, [r7, #20]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	617b      	str	r3, [r7, #20]
 8005e9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005e9c:	e138      	b.n	8006110 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	f200 80f1 	bhi.w	800608a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d123      	bne.n	8005ef8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 fdd9 	bl	8006a6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e139      	b.n	8006138 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691a      	ldr	r2, [r3, #16]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	b2d2      	uxtb	r2, r2
 8005ed0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ef6:	e10b      	b.n	8006110 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d14e      	bne.n	8005f9e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f06:	2200      	movs	r2, #0
 8005f08:	4906      	ldr	r1, [pc, #24]	; (8005f24 <HAL_I2C_Mem_Read+0x22c>)
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 fc56 	bl	80067bc <I2C_WaitOnFlagUntilTimeout>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d008      	beq.n	8005f28 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e10e      	b.n	8006138 <HAL_I2C_Mem_Read+0x440>
 8005f1a:	bf00      	nop
 8005f1c:	00100002 	.word	0x00100002
 8005f20:	ffff0000 	.word	0xffff0000
 8005f24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	691a      	ldr	r2, [r3, #16]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f54:	3b01      	subs	r3, #1
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	691a      	ldr	r2, [r3, #16]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f9c:	e0b8      	b.n	8006110 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	4966      	ldr	r1, [pc, #408]	; (8006140 <HAL_I2C_Mem_Read+0x448>)
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 fc07 	bl	80067bc <I2C_WaitOnFlagUntilTimeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e0bf      	b.n	8006138 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	691a      	ldr	r2, [r3, #16]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd2:	b2d2      	uxtb	r2, r2
 8005fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	2200      	movs	r2, #0
 8006002:	494f      	ldr	r1, [pc, #316]	; (8006140 <HAL_I2C_Mem_Read+0x448>)
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 fbd9 	bl	80067bc <I2C_WaitOnFlagUntilTimeout>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e091      	b.n	8006138 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	691a      	ldr	r2, [r3, #16]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800604c:	b29b      	uxth	r3, r3
 800604e:	3b01      	subs	r3, #1
 8006050:	b29a      	uxth	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	691a      	ldr	r2, [r3, #16]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006060:	b2d2      	uxtb	r2, r2
 8006062:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006072:	3b01      	subs	r3, #1
 8006074:	b29a      	uxth	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800607e:	b29b      	uxth	r3, r3
 8006080:	3b01      	subs	r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006088:	e042      	b.n	8006110 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800608a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 fcec 	bl	8006a6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e04c      	b.n	8006138 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	f003 0304 	and.w	r3, r3, #4
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d118      	bne.n	8006110 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006106:	b29b      	uxth	r3, r3
 8006108:	3b01      	subs	r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006114:	2b00      	cmp	r3, #0
 8006116:	f47f aec2 	bne.w	8005e9e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2220      	movs	r2, #32
 800611e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	e000      	b.n	8006138 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006136:	2302      	movs	r3, #2
  }
}
 8006138:	4618      	mov	r0, r3
 800613a:	3728      	adds	r7, #40	; 0x28
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	00010004 	.word	0x00010004

08006144 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08a      	sub	sp, #40	; 0x28
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	607a      	str	r2, [r7, #4]
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	460b      	mov	r3, r1
 8006152:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006154:	f7fc fe1e 	bl	8002d94 <HAL_GetTick>
 8006158:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b20      	cmp	r3, #32
 8006168:	f040 8111 	bne.w	800638e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	2319      	movs	r3, #25
 8006172:	2201      	movs	r2, #1
 8006174:	4988      	ldr	r1, [pc, #544]	; (8006398 <HAL_I2C_IsDeviceReady+0x254>)
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 fb20 	bl	80067bc <I2C_WaitOnFlagUntilTimeout>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006182:	2302      	movs	r3, #2
 8006184:	e104      	b.n	8006390 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_I2C_IsDeviceReady+0x50>
 8006190:	2302      	movs	r3, #2
 8006192:	e0fd      	b.n	8006390 <HAL_I2C_IsDeviceReady+0x24c>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d007      	beq.n	80061ba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f042 0201 	orr.w	r2, r2, #1
 80061b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2224      	movs	r2, #36	; 0x24
 80061ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	4a70      	ldr	r2, [pc, #448]	; (800639c <HAL_I2C_IsDeviceReady+0x258>)
 80061dc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061ec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 fade 	bl	80067bc <I2C_WaitOnFlagUntilTimeout>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00d      	beq.n	8006222 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006214:	d103      	bne.n	800621e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800621c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e0b6      	b.n	8006390 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006222:	897b      	ldrh	r3, [r7, #10]
 8006224:	b2db      	uxtb	r3, r3
 8006226:	461a      	mov	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006230:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006232:	f7fc fdaf 	bl	8002d94 <HAL_GetTick>
 8006236:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	f003 0302 	and.w	r3, r3, #2
 8006242:	2b02      	cmp	r3, #2
 8006244:	bf0c      	ite	eq
 8006246:	2301      	moveq	r3, #1
 8006248:	2300      	movne	r3, #0
 800624a:	b2db      	uxtb	r3, r3
 800624c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800625c:	bf0c      	ite	eq
 800625e:	2301      	moveq	r3, #1
 8006260:	2300      	movne	r3, #0
 8006262:	b2db      	uxtb	r3, r3
 8006264:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006266:	e025      	b.n	80062b4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006268:	f7fc fd94 	bl	8002d94 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	429a      	cmp	r2, r3
 8006276:	d302      	bcc.n	800627e <HAL_I2C_IsDeviceReady+0x13a>
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d103      	bne.n	8006286 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	22a0      	movs	r2, #160	; 0xa0
 8006282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b02      	cmp	r3, #2
 8006292:	bf0c      	ite	eq
 8006294:	2301      	moveq	r3, #1
 8006296:	2300      	movne	r3, #0
 8006298:	b2db      	uxtb	r3, r3
 800629a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062aa:	bf0c      	ite	eq
 80062ac:	2301      	moveq	r3, #1
 80062ae:	2300      	movne	r3, #0
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2ba0      	cmp	r3, #160	; 0xa0
 80062be:	d005      	beq.n	80062cc <HAL_I2C_IsDeviceReady+0x188>
 80062c0:	7dfb      	ldrb	r3, [r7, #23]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d102      	bne.n	80062cc <HAL_I2C_IsDeviceReady+0x188>
 80062c6:	7dbb      	ldrb	r3, [r7, #22]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d0cd      	beq.n	8006268 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2220      	movs	r2, #32
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d129      	bne.n	8006336 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062f0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062f2:	2300      	movs	r3, #0
 80062f4:	613b      	str	r3, [r7, #16]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	613b      	str	r3, [r7, #16]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	613b      	str	r3, [r7, #16]
 8006306:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	2319      	movs	r3, #25
 800630e:	2201      	movs	r2, #1
 8006310:	4921      	ldr	r1, [pc, #132]	; (8006398 <HAL_I2C_IsDeviceReady+0x254>)
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 fa52 	bl	80067bc <I2C_WaitOnFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e036      	b.n	8006390 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2220      	movs	r2, #32
 8006326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	e02c      	b.n	8006390 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006344:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800634e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	2319      	movs	r3, #25
 8006356:	2201      	movs	r2, #1
 8006358:	490f      	ldr	r1, [pc, #60]	; (8006398 <HAL_I2C_IsDeviceReady+0x254>)
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 fa2e 	bl	80067bc <I2C_WaitOnFlagUntilTimeout>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e012      	b.n	8006390 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	3301      	adds	r3, #1
 800636e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	429a      	cmp	r2, r3
 8006376:	f4ff af32 	bcc.w	80061de <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2220      	movs	r2, #32
 800637e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800638e:	2302      	movs	r3, #2
  }
}
 8006390:	4618      	mov	r0, r3
 8006392:	3720      	adds	r7, #32
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	00100002 	.word	0x00100002
 800639c:	ffff0000 	.word	0xffff0000

080063a0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ae:	b2db      	uxtb	r3, r3
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af02      	add	r7, sp, #8
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	607a      	str	r2, [r7, #4]
 80063c6:	603b      	str	r3, [r7, #0]
 80063c8:	460b      	mov	r3, r1
 80063ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d006      	beq.n	80063e6 <I2C_MasterRequestWrite+0x2a>
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d003      	beq.n	80063e6 <I2C_MasterRequestWrite+0x2a>
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063e4:	d108      	bne.n	80063f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	e00b      	b.n	8006410 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fc:	2b12      	cmp	r3, #18
 80063fe:	d107      	bne.n	8006410 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800640e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 f9cd 	bl	80067bc <I2C_WaitOnFlagUntilTimeout>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00d      	beq.n	8006444 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006436:	d103      	bne.n	8006440 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800643e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e035      	b.n	80064b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800644c:	d108      	bne.n	8006460 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800644e:	897b      	ldrh	r3, [r7, #10]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	461a      	mov	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800645c:	611a      	str	r2, [r3, #16]
 800645e:	e01b      	b.n	8006498 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006460:	897b      	ldrh	r3, [r7, #10]
 8006462:	11db      	asrs	r3, r3, #7
 8006464:	b2db      	uxtb	r3, r3
 8006466:	f003 0306 	and.w	r3, r3, #6
 800646a:	b2db      	uxtb	r3, r3
 800646c:	f063 030f 	orn	r3, r3, #15
 8006470:	b2da      	uxtb	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	490e      	ldr	r1, [pc, #56]	; (80064b8 <I2C_MasterRequestWrite+0xfc>)
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 f9f3 	bl	800686a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e010      	b.n	80064b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800648e:	897b      	ldrh	r3, [r7, #10]
 8006490:	b2da      	uxtb	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	4907      	ldr	r1, [pc, #28]	; (80064bc <I2C_MasterRequestWrite+0x100>)
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 f9e3 	bl	800686a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e000      	b.n	80064b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	00010008 	.word	0x00010008
 80064bc:	00010002 	.word	0x00010002

080064c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b088      	sub	sp, #32
 80064c4:	af02      	add	r7, sp, #8
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	4608      	mov	r0, r1
 80064ca:	4611      	mov	r1, r2
 80064cc:	461a      	mov	r2, r3
 80064ce:	4603      	mov	r3, r0
 80064d0:	817b      	strh	r3, [r7, #10]
 80064d2:	460b      	mov	r3, r1
 80064d4:	813b      	strh	r3, [r7, #8]
 80064d6:	4613      	mov	r3, r2
 80064d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f000 f960 	bl	80067bc <I2C_WaitOnFlagUntilTimeout>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00d      	beq.n	800651e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800650c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006510:	d103      	bne.n	800651a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006518:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e05f      	b.n	80065de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800651e:	897b      	ldrh	r3, [r7, #10]
 8006520:	b2db      	uxtb	r3, r3
 8006522:	461a      	mov	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800652c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	6a3a      	ldr	r2, [r7, #32]
 8006532:	492d      	ldr	r1, [pc, #180]	; (80065e8 <I2C_RequestMemoryWrite+0x128>)
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 f998 	bl	800686a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e04c      	b.n	80065de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006544:	2300      	movs	r3, #0
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800655a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655c:	6a39      	ldr	r1, [r7, #32]
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 fa02 	bl	8006968 <I2C_WaitOnTXEFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00d      	beq.n	8006586 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656e:	2b04      	cmp	r3, #4
 8006570:	d107      	bne.n	8006582 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006580:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e02b      	b.n	80065de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006586:	88fb      	ldrh	r3, [r7, #6]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d105      	bne.n	8006598 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800658c:	893b      	ldrh	r3, [r7, #8]
 800658e:	b2da      	uxtb	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	611a      	str	r2, [r3, #16]
 8006596:	e021      	b.n	80065dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006598:	893b      	ldrh	r3, [r7, #8]
 800659a:	0a1b      	lsrs	r3, r3, #8
 800659c:	b29b      	uxth	r3, r3
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a8:	6a39      	ldr	r1, [r7, #32]
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 f9dc 	bl	8006968 <I2C_WaitOnTXEFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00d      	beq.n	80065d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	d107      	bne.n	80065ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e005      	b.n	80065de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065d2:	893b      	ldrh	r3, [r7, #8]
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3718      	adds	r7, #24
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	00010002 	.word	0x00010002

080065ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b088      	sub	sp, #32
 80065f0:	af02      	add	r7, sp, #8
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	4608      	mov	r0, r1
 80065f6:	4611      	mov	r1, r2
 80065f8:	461a      	mov	r2, r3
 80065fa:	4603      	mov	r3, r0
 80065fc:	817b      	strh	r3, [r7, #10]
 80065fe:	460b      	mov	r3, r1
 8006600:	813b      	strh	r3, [r7, #8]
 8006602:	4613      	mov	r3, r2
 8006604:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006614:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006624:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	2200      	movs	r2, #0
 800662e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 f8c2 	bl	80067bc <I2C_WaitOnFlagUntilTimeout>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00d      	beq.n	800665a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800664c:	d103      	bne.n	8006656 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006654:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e0aa      	b.n	80067b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800665a:	897b      	ldrh	r3, [r7, #10]
 800665c:	b2db      	uxtb	r3, r3
 800665e:	461a      	mov	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006668:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	6a3a      	ldr	r2, [r7, #32]
 800666e:	4952      	ldr	r1, [pc, #328]	; (80067b8 <I2C_RequestMemoryRead+0x1cc>)
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 f8fa 	bl	800686a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e097      	b.n	80067b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006680:	2300      	movs	r3, #0
 8006682:	617b      	str	r3, [r7, #20]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006698:	6a39      	ldr	r1, [r7, #32]
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 f964 	bl	8006968 <I2C_WaitOnTXEFlagUntilTimeout>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00d      	beq.n	80066c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d107      	bne.n	80066be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e076      	b.n	80067b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066c2:	88fb      	ldrh	r3, [r7, #6]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d105      	bne.n	80066d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066c8:	893b      	ldrh	r3, [r7, #8]
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	611a      	str	r2, [r3, #16]
 80066d2:	e021      	b.n	8006718 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80066d4:	893b      	ldrh	r3, [r7, #8]
 80066d6:	0a1b      	lsrs	r3, r3, #8
 80066d8:	b29b      	uxth	r3, r3
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e4:	6a39      	ldr	r1, [r7, #32]
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 f93e 	bl	8006968 <I2C_WaitOnTXEFlagUntilTimeout>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00d      	beq.n	800670e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	d107      	bne.n	800670a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006708:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e050      	b.n	80067b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800670e:	893b      	ldrh	r3, [r7, #8]
 8006710:	b2da      	uxtb	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800671a:	6a39      	ldr	r1, [r7, #32]
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 f923 	bl	8006968 <I2C_WaitOnTXEFlagUntilTimeout>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00d      	beq.n	8006744 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672c:	2b04      	cmp	r3, #4
 800672e:	d107      	bne.n	8006740 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800673e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e035      	b.n	80067b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006752:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	2200      	movs	r2, #0
 800675c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 f82b 	bl	80067bc <I2C_WaitOnFlagUntilTimeout>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00d      	beq.n	8006788 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800677a:	d103      	bne.n	8006784 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006782:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e013      	b.n	80067b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006788:	897b      	ldrh	r3, [r7, #10]
 800678a:	b2db      	uxtb	r3, r3
 800678c:	f043 0301 	orr.w	r3, r3, #1
 8006790:	b2da      	uxtb	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	6a3a      	ldr	r2, [r7, #32]
 800679c:	4906      	ldr	r1, [pc, #24]	; (80067b8 <I2C_RequestMemoryRead+0x1cc>)
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 f863 	bl	800686a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e000      	b.n	80067b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3718      	adds	r7, #24
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	00010002 	.word	0x00010002

080067bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	603b      	str	r3, [r7, #0]
 80067c8:	4613      	mov	r3, r2
 80067ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067cc:	e025      	b.n	800681a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d4:	d021      	beq.n	800681a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067d6:	f7fc fadd 	bl	8002d94 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d302      	bcc.n	80067ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d116      	bne.n	800681a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2220      	movs	r2, #32
 80067f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	f043 0220 	orr.w	r2, r3, #32
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e023      	b.n	8006862 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	0c1b      	lsrs	r3, r3, #16
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b01      	cmp	r3, #1
 8006822:	d10d      	bne.n	8006840 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	43da      	mvns	r2, r3
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	4013      	ands	r3, r2
 8006830:	b29b      	uxth	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	bf0c      	ite	eq
 8006836:	2301      	moveq	r3, #1
 8006838:	2300      	movne	r3, #0
 800683a:	b2db      	uxtb	r3, r3
 800683c:	461a      	mov	r2, r3
 800683e:	e00c      	b.n	800685a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	43da      	mvns	r2, r3
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	4013      	ands	r3, r2
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	bf0c      	ite	eq
 8006852:	2301      	moveq	r3, #1
 8006854:	2300      	movne	r3, #0
 8006856:	b2db      	uxtb	r3, r3
 8006858:	461a      	mov	r2, r3
 800685a:	79fb      	ldrb	r3, [r7, #7]
 800685c:	429a      	cmp	r2, r3
 800685e:	d0b6      	beq.n	80067ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b084      	sub	sp, #16
 800686e:	af00      	add	r7, sp, #0
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	607a      	str	r2, [r7, #4]
 8006876:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006878:	e051      	b.n	800691e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006888:	d123      	bne.n	80068d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006898:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2220      	movs	r2, #32
 80068ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	f043 0204 	orr.w	r2, r3, #4
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e046      	b.n	8006960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d8:	d021      	beq.n	800691e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068da:	f7fc fa5b 	bl	8002d94 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d302      	bcc.n	80068f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d116      	bne.n	800691e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2220      	movs	r2, #32
 80068fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	f043 0220 	orr.w	r2, r3, #32
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e020      	b.n	8006960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	0c1b      	lsrs	r3, r3, #16
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b01      	cmp	r3, #1
 8006926:	d10c      	bne.n	8006942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	43da      	mvns	r2, r3
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	4013      	ands	r3, r2
 8006934:	b29b      	uxth	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	bf14      	ite	ne
 800693a:	2301      	movne	r3, #1
 800693c:	2300      	moveq	r3, #0
 800693e:	b2db      	uxtb	r3, r3
 8006940:	e00b      	b.n	800695a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	43da      	mvns	r2, r3
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	4013      	ands	r3, r2
 800694e:	b29b      	uxth	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	bf14      	ite	ne
 8006954:	2301      	movne	r3, #1
 8006956:	2300      	moveq	r3, #0
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d18d      	bne.n	800687a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006974:	e02d      	b.n	80069d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 f8ce 	bl	8006b18 <I2C_IsAcknowledgeFailed>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e02d      	b.n	80069e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698c:	d021      	beq.n	80069d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800698e:	f7fc fa01 	bl	8002d94 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	429a      	cmp	r2, r3
 800699c:	d302      	bcc.n	80069a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d116      	bne.n	80069d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	f043 0220 	orr.w	r2, r3, #32
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e007      	b.n	80069e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069dc:	2b80      	cmp	r3, #128	; 0x80
 80069de:	d1ca      	bne.n	8006976 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b084      	sub	sp, #16
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	60f8      	str	r0, [r7, #12]
 80069f2:	60b9      	str	r1, [r7, #8]
 80069f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069f6:	e02d      	b.n	8006a54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 f88d 	bl	8006b18 <I2C_IsAcknowledgeFailed>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e02d      	b.n	8006a64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0e:	d021      	beq.n	8006a54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a10:	f7fc f9c0 	bl	8002d94 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d302      	bcc.n	8006a26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d116      	bne.n	8006a54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a40:	f043 0220 	orr.w	r2, r3, #32
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e007      	b.n	8006a64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	f003 0304 	and.w	r3, r3, #4
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d1ca      	bne.n	80069f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a78:	e042      	b.n	8006b00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	f003 0310 	and.w	r3, r3, #16
 8006a84:	2b10      	cmp	r3, #16
 8006a86:	d119      	bne.n	8006abc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f06f 0210 	mvn.w	r2, #16
 8006a90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e029      	b.n	8006b10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006abc:	f7fc f96a 	bl	8002d94 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d302      	bcc.n	8006ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d116      	bne.n	8006b00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2220      	movs	r2, #32
 8006adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aec:	f043 0220 	orr.w	r2, r3, #32
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e007      	b.n	8006b10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0a:	2b40      	cmp	r3, #64	; 0x40
 8006b0c:	d1b5      	bne.n	8006a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b2e:	d11b      	bne.n	8006b68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b54:	f043 0204 	orr.w	r2, r3, #4
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e000      	b.n	8006b6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
	...

08006b78 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b088      	sub	sp, #32
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e128      	b.n	8006ddc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d109      	bne.n	8006baa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a90      	ldr	r2, [pc, #576]	; (8006de4 <HAL_I2S_Init+0x26c>)
 8006ba2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7fa ff09 	bl	80019bc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2202      	movs	r2, #2
 8006bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	6812      	ldr	r2, [r2, #0]
 8006bbc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006bc0:	f023 030f 	bic.w	r3, r3, #15
 8006bc4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d060      	beq.n	8006c98 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d102      	bne.n	8006be4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006bde:	2310      	movs	r3, #16
 8006be0:	617b      	str	r3, [r7, #20]
 8006be2:	e001      	b.n	8006be8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006be4:	2320      	movs	r3, #32
 8006be6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	2b20      	cmp	r3, #32
 8006bee:	d802      	bhi.n	8006bf6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006bf6:	2001      	movs	r0, #1
 8006bf8:	f001 fe28 	bl	800884c <HAL_RCCEx_GetPeriphCLKFreq>
 8006bfc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c06:	d125      	bne.n	8006c54 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d010      	beq.n	8006c32 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	461a      	mov	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2c:	3305      	adds	r3, #5
 8006c2e:	613b      	str	r3, [r7, #16]
 8006c30:	e01f      	b.n	8006c72 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	00db      	lsls	r3, r3, #3
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	461a      	mov	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4e:	3305      	adds	r3, #5
 8006c50:	613b      	str	r3, [r7, #16]
 8006c52:	e00e      	b.n	8006c72 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	461a      	mov	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c6e:	3305      	adds	r3, #5
 8006c70:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	4a5c      	ldr	r2, [pc, #368]	; (8006de8 <HAL_I2S_Init+0x270>)
 8006c76:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7a:	08db      	lsrs	r3, r3, #3
 8006c7c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	085b      	lsrs	r3, r3, #1
 8006c8e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	021b      	lsls	r3, r3, #8
 8006c94:	61bb      	str	r3, [r7, #24]
 8006c96:	e003      	b.n	8006ca0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006c98:	2302      	movs	r3, #2
 8006c9a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d902      	bls.n	8006cac <HAL_I2S_Init+0x134>
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	2bff      	cmp	r3, #255	; 0xff
 8006caa:	d907      	bls.n	8006cbc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb0:	f043 0210 	orr.w	r2, r3, #16
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e08f      	b.n	8006ddc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691a      	ldr	r2, [r3, #16]
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	ea42 0103 	orr.w	r1, r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69fa      	ldr	r2, [r7, #28]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006cda:	f023 030f 	bic.w	r3, r3, #15
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	6851      	ldr	r1, [r2, #4]
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6892      	ldr	r2, [r2, #8]
 8006ce6:	4311      	orrs	r1, r2
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	68d2      	ldr	r2, [r2, #12]
 8006cec:	4311      	orrs	r1, r2
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	6992      	ldr	r2, [r2, #24]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cfe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d161      	bne.n	8006dcc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a38      	ldr	r2, [pc, #224]	; (8006dec <HAL_I2S_Init+0x274>)
 8006d0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a37      	ldr	r2, [pc, #220]	; (8006df0 <HAL_I2S_Init+0x278>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d101      	bne.n	8006d1c <HAL_I2S_Init+0x1a4>
 8006d18:	4b36      	ldr	r3, [pc, #216]	; (8006df4 <HAL_I2S_Init+0x27c>)
 8006d1a:	e001      	b.n	8006d20 <HAL_I2S_Init+0x1a8>
 8006d1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	6812      	ldr	r2, [r2, #0]
 8006d26:	4932      	ldr	r1, [pc, #200]	; (8006df0 <HAL_I2S_Init+0x278>)
 8006d28:	428a      	cmp	r2, r1
 8006d2a:	d101      	bne.n	8006d30 <HAL_I2S_Init+0x1b8>
 8006d2c:	4a31      	ldr	r2, [pc, #196]	; (8006df4 <HAL_I2S_Init+0x27c>)
 8006d2e:	e001      	b.n	8006d34 <HAL_I2S_Init+0x1bc>
 8006d30:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006d34:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006d38:	f023 030f 	bic.w	r3, r3, #15
 8006d3c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a2b      	ldr	r2, [pc, #172]	; (8006df0 <HAL_I2S_Init+0x278>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d101      	bne.n	8006d4c <HAL_I2S_Init+0x1d4>
 8006d48:	4b2a      	ldr	r3, [pc, #168]	; (8006df4 <HAL_I2S_Init+0x27c>)
 8006d4a:	e001      	b.n	8006d50 <HAL_I2S_Init+0x1d8>
 8006d4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d50:	2202      	movs	r2, #2
 8006d52:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a25      	ldr	r2, [pc, #148]	; (8006df0 <HAL_I2S_Init+0x278>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d101      	bne.n	8006d62 <HAL_I2S_Init+0x1ea>
 8006d5e:	4b25      	ldr	r3, [pc, #148]	; (8006df4 <HAL_I2S_Init+0x27c>)
 8006d60:	e001      	b.n	8006d66 <HAL_I2S_Init+0x1ee>
 8006d62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d72:	d003      	beq.n	8006d7c <HAL_I2S_Init+0x204>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d103      	bne.n	8006d84 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	e001      	b.n	8006d88 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006d84:	2300      	movs	r3, #0
 8006d86:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006d92:	4313      	orrs	r3, r2
 8006d94:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006da6:	4313      	orrs	r3, r2
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	897b      	ldrh	r3, [r7, #10]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006db4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a0d      	ldr	r2, [pc, #52]	; (8006df0 <HAL_I2S_Init+0x278>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d101      	bne.n	8006dc4 <HAL_I2S_Init+0x24c>
 8006dc0:	4b0c      	ldr	r3, [pc, #48]	; (8006df4 <HAL_I2S_Init+0x27c>)
 8006dc2:	e001      	b.n	8006dc8 <HAL_I2S_Init+0x250>
 8006dc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006dc8:	897a      	ldrh	r2, [r7, #10]
 8006dca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3720      	adds	r7, #32
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	0800767d 	.word	0x0800767d
 8006de8:	cccccccd 	.word	0xcccccccd
 8006dec:	08007805 	.word	0x08007805
 8006df0:	40003800 	.word	0x40003800
 8006df4:	40003400 	.word	0x40003400

08006df8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	4613      	mov	r3, r2
 8006e04:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <HAL_I2S_Transmit_DMA+0x1a>
 8006e0c:	88fb      	ldrh	r3, [r7, #6]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e08e      	b.n	8006f34 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d101      	bne.n	8006e26 <HAL_I2S_Transmit_DMA+0x2e>
 8006e22:	2302      	movs	r3, #2
 8006e24:	e086      	b.n	8006f34 <HAL_I2S_Transmit_DMA+0x13c>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d005      	beq.n	8006e46 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8006e42:	2302      	movs	r3, #2
 8006e44:	e076      	b.n	8006f34 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2203      	movs	r2, #3
 8006e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	f003 0307 	and.w	r3, r3, #7
 8006e64:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2b03      	cmp	r3, #3
 8006e6a:	d002      	beq.n	8006e72 <HAL_I2S_Transmit_DMA+0x7a>
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2b05      	cmp	r3, #5
 8006e70:	d10a      	bne.n	8006e88 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8006e72:	88fb      	ldrh	r3, [r7, #6]
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8006e7c:	88fb      	ldrh	r3, [r7, #6]
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e86:	e005      	b.n	8006e94 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	88fa      	ldrh	r2, [r7, #6]
 8006e8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	88fa      	ldrh	r2, [r7, #6]
 8006e92:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e98:	4a28      	ldr	r2, [pc, #160]	; (8006f3c <HAL_I2S_Transmit_DMA+0x144>)
 8006e9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea0:	4a27      	ldr	r2, [pc, #156]	; (8006f40 <HAL_I2S_Transmit_DMA+0x148>)
 8006ea2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea8:	4a26      	ldr	r2, [pc, #152]	; (8006f44 <HAL_I2S_Transmit_DMA+0x14c>)
 8006eaa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006eb4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006ebc:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006ec4:	f7fc f9b4 	bl	8003230 <HAL_DMA_Start_IT>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00f      	beq.n	8006eee <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed2:	f043 0208 	orr.w	r2, r3, #8
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e022      	b.n	8006f34 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d107      	bne.n	8006f0c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	69da      	ldr	r2, [r3, #28]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f0a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d107      	bne.n	8006f2a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f042 0202 	orr.w	r2, r2, #2
 8006f28:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3718      	adds	r7, #24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	0800755b 	.word	0x0800755b
 8006f40:	08007519 	.word	0x08007519
 8006f44:	08007577 	.word	0x08007577

08006f48 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d101      	bne.n	8006f60 <HAL_I2S_DMAPause+0x18>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	e04a      	b.n	8006ff6 <HAL_I2S_DMAPause+0xae>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d108      	bne.n	8006f86 <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 0202 	bic.w	r2, r2, #2
 8006f82:	605a      	str	r2, [r3, #4]
 8006f84:	e032      	b.n	8006fec <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d108      	bne.n	8006fa4 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 0201 	bic.w	r2, r2, #1
 8006fa0:	605a      	str	r2, [r3, #4]
 8006fa2:	e023      	b.n	8006fec <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b05      	cmp	r3, #5
 8006fae:	d11d      	bne.n	8006fec <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0203 	bic.w	r2, r2, #3
 8006fbe:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a0f      	ldr	r2, [pc, #60]	; (8007004 <HAL_I2S_DMAPause+0xbc>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d101      	bne.n	8006fce <HAL_I2S_DMAPause+0x86>
 8006fca:	4b0f      	ldr	r3, [pc, #60]	; (8007008 <HAL_I2S_DMAPause+0xc0>)
 8006fcc:	e001      	b.n	8006fd2 <HAL_I2S_DMAPause+0x8a>
 8006fce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	490a      	ldr	r1, [pc, #40]	; (8007004 <HAL_I2S_DMAPause+0xbc>)
 8006fda:	428b      	cmp	r3, r1
 8006fdc:	d101      	bne.n	8006fe2 <HAL_I2S_DMAPause+0x9a>
 8006fde:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <HAL_I2S_DMAPause+0xc0>)
 8006fe0:	e001      	b.n	8006fe6 <HAL_I2S_DMAPause+0x9e>
 8006fe2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fe6:	f022 0203 	bic.w	r2, r2, #3
 8006fea:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	40003800 	.word	0x40003800
 8007008:	40003400 	.word	0x40003400

0800700c <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b01      	cmp	r3, #1
 800701e:	d101      	bne.n	8007024 <HAL_I2S_DMAResume+0x18>
 8007020:	2302      	movs	r3, #2
 8007022:	e07d      	b.n	8007120 <HAL_I2S_DMAResume+0x114>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b03      	cmp	r3, #3
 8007036:	d108      	bne.n	800704a <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0202 	orr.w	r2, r2, #2
 8007046:	605a      	str	r2, [r3, #4]
 8007048:	e056      	b.n	80070f8 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b04      	cmp	r3, #4
 8007054:	d108      	bne.n	8007068 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f042 0201 	orr.w	r2, r2, #1
 8007064:	605a      	str	r2, [r3, #4]
 8007066:	e047      	b.n	80070f8 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b05      	cmp	r3, #5
 8007072:	d141      	bne.n	80070f8 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 0203 	orr.w	r2, r2, #3
 8007082:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a28      	ldr	r2, [pc, #160]	; (800712c <HAL_I2S_DMAResume+0x120>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d101      	bne.n	8007092 <HAL_I2S_DMAResume+0x86>
 800708e:	4b28      	ldr	r3, [pc, #160]	; (8007130 <HAL_I2S_DMAResume+0x124>)
 8007090:	e001      	b.n	8007096 <HAL_I2S_DMAResume+0x8a>
 8007092:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4923      	ldr	r1, [pc, #140]	; (800712c <HAL_I2S_DMAResume+0x120>)
 800709e:	428b      	cmp	r3, r1
 80070a0:	d101      	bne.n	80070a6 <HAL_I2S_DMAResume+0x9a>
 80070a2:	4b23      	ldr	r3, [pc, #140]	; (8007130 <HAL_I2S_DMAResume+0x124>)
 80070a4:	e001      	b.n	80070aa <HAL_I2S_DMAResume+0x9e>
 80070a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070aa:	f042 0203 	orr.w	r2, r2, #3
 80070ae:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a1d      	ldr	r2, [pc, #116]	; (800712c <HAL_I2S_DMAResume+0x120>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d101      	bne.n	80070be <HAL_I2S_DMAResume+0xb2>
 80070ba:	4b1d      	ldr	r3, [pc, #116]	; (8007130 <HAL_I2S_DMAResume+0x124>)
 80070bc:	e001      	b.n	80070c2 <HAL_I2S_DMAResume+0xb6>
 80070be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070c2:	69db      	ldr	r3, [r3, #28]
 80070c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d115      	bne.n	80070f8 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a16      	ldr	r2, [pc, #88]	; (800712c <HAL_I2S_DMAResume+0x120>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d101      	bne.n	80070da <HAL_I2S_DMAResume+0xce>
 80070d6:	4b16      	ldr	r3, [pc, #88]	; (8007130 <HAL_I2S_DMAResume+0x124>)
 80070d8:	e001      	b.n	80070de <HAL_I2S_DMAResume+0xd2>
 80070da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070de:	69da      	ldr	r2, [r3, #28]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4911      	ldr	r1, [pc, #68]	; (800712c <HAL_I2S_DMAResume+0x120>)
 80070e6:	428b      	cmp	r3, r1
 80070e8:	d101      	bne.n	80070ee <HAL_I2S_DMAResume+0xe2>
 80070ea:	4b11      	ldr	r3, [pc, #68]	; (8007130 <HAL_I2S_DMAResume+0x124>)
 80070ec:	e001      	b.n	80070f2 <HAL_I2S_DMAResume+0xe6>
 80070ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070f6:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	69db      	ldr	r3, [r3, #28]
 80070fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007102:	2b00      	cmp	r3, #0
 8007104:	d107      	bne.n	8007116 <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	69da      	ldr	r2, [r3, #28]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007114:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	40003800 	.word	0x40003800
 8007130:	40003400 	.word	0x40003400

08007134 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b088      	sub	sp, #32
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 800713c:	2300      	movs	r3, #0
 800713e:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007148:	d004      	beq.n	8007154 <HAL_I2S_DMAStop+0x20>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	f040 80d1 	bne.w	80072f6 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00f      	beq.n	800717c <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007160:	4618      	mov	r0, r3
 8007162:	f7fc f8bd 	bl	80032e0 <HAL_DMA_Abort>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d007      	beq.n	800717c <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007170:	f043 0208 	orr.w	r2, r3, #8
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800717c:	2364      	movs	r3, #100	; 0x64
 800717e:	2201      	movs	r2, #1
 8007180:	2102      	movs	r1, #2
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fb04 	bl	8007790 <I2S_WaitFlagStateUntilTimeout>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00b      	beq.n	80071a6 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007192:	f043 0201 	orr.w	r2, r3, #1
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80071a6:	2364      	movs	r3, #100	; 0x64
 80071a8:	2200      	movs	r2, #0
 80071aa:	2180      	movs	r1, #128	; 0x80
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 faef 	bl	8007790 <I2S_WaitFlagStateUntilTimeout>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00b      	beq.n	80071d0 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071bc:	f043 0201 	orr.w	r2, r3, #1
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	69da      	ldr	r2, [r3, #28]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071de:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80071e0:	2300      	movs	r3, #0
 80071e2:	617b      	str	r3, [r7, #20]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	617b      	str	r3, [r7, #20]
 80071ec:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 0202 	bic.w	r2, r2, #2
 80071fc:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b05      	cmp	r3, #5
 8007208:	f040 8165 	bne.w	80074d6 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00f      	beq.n	8007234 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007218:	4618      	mov	r0, r3
 800721a:	f7fc f861 	bl	80032e0 <HAL_DMA_Abort>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d007      	beq.n	8007234 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007228:	f043 0208 	orr.w	r2, r3, #8
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a8a      	ldr	r2, [pc, #552]	; (8007464 <HAL_I2S_DMAStop+0x330>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d101      	bne.n	8007242 <HAL_I2S_DMAStop+0x10e>
 800723e:	4b8a      	ldr	r3, [pc, #552]	; (8007468 <HAL_I2S_DMAStop+0x334>)
 8007240:	e001      	b.n	8007246 <HAL_I2S_DMAStop+0x112>
 8007242:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007246:	69da      	ldr	r2, [r3, #28]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4985      	ldr	r1, [pc, #532]	; (8007464 <HAL_I2S_DMAStop+0x330>)
 800724e:	428b      	cmp	r3, r1
 8007250:	d101      	bne.n	8007256 <HAL_I2S_DMAStop+0x122>
 8007252:	4b85      	ldr	r3, [pc, #532]	; (8007468 <HAL_I2S_DMAStop+0x334>)
 8007254:	e001      	b.n	800725a <HAL_I2S_DMAStop+0x126>
 8007256:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800725a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800725e:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8007260:	2300      	movs	r3, #0
 8007262:	613b      	str	r3, [r7, #16]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a7e      	ldr	r2, [pc, #504]	; (8007464 <HAL_I2S_DMAStop+0x330>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d101      	bne.n	8007272 <HAL_I2S_DMAStop+0x13e>
 800726e:	4b7e      	ldr	r3, [pc, #504]	; (8007468 <HAL_I2S_DMAStop+0x334>)
 8007270:	e001      	b.n	8007276 <HAL_I2S_DMAStop+0x142>
 8007272:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	613b      	str	r3, [r7, #16]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a79      	ldr	r2, [pc, #484]	; (8007464 <HAL_I2S_DMAStop+0x330>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d101      	bne.n	8007288 <HAL_I2S_DMAStop+0x154>
 8007284:	4b78      	ldr	r3, [pc, #480]	; (8007468 <HAL_I2S_DMAStop+0x334>)
 8007286:	e001      	b.n	800728c <HAL_I2S_DMAStop+0x158>
 8007288:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	613b      	str	r3, [r7, #16]
 8007290:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a73      	ldr	r2, [pc, #460]	; (8007464 <HAL_I2S_DMAStop+0x330>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d101      	bne.n	80072a0 <HAL_I2S_DMAStop+0x16c>
 800729c:	4b72      	ldr	r3, [pc, #456]	; (8007468 <HAL_I2S_DMAStop+0x334>)
 800729e:	e001      	b.n	80072a4 <HAL_I2S_DMAStop+0x170>
 80072a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	496e      	ldr	r1, [pc, #440]	; (8007464 <HAL_I2S_DMAStop+0x330>)
 80072ac:	428b      	cmp	r3, r1
 80072ae:	d101      	bne.n	80072b4 <HAL_I2S_DMAStop+0x180>
 80072b0:	4b6d      	ldr	r3, [pc, #436]	; (8007468 <HAL_I2S_DMAStop+0x334>)
 80072b2:	e001      	b.n	80072b8 <HAL_I2S_DMAStop+0x184>
 80072b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072b8:	f022 0201 	bic.w	r2, r2, #1
 80072bc:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10c      	bne.n	80072e0 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80072de:	e0fa      	b.n	80074d6 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a5f      	ldr	r2, [pc, #380]	; (8007464 <HAL_I2S_DMAStop+0x330>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d101      	bne.n	80072ee <HAL_I2S_DMAStop+0x1ba>
 80072ea:	4b5f      	ldr	r3, [pc, #380]	; (8007468 <HAL_I2S_DMAStop+0x334>)
 80072ec:	e001      	b.n	80072f2 <HAL_I2S_DMAStop+0x1be>
 80072ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072f2:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80072f4:	e0ef      	b.n	80074d6 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072fe:	d005      	beq.n	800730c <HAL_I2S_DMAStop+0x1d8>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007308:	f040 80e5 	bne.w	80074d6 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00f      	beq.n	8007334 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007318:	4618      	mov	r0, r3
 800731a:	f7fb ffe1 	bl	80032e0 <HAL_DMA_Abort>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d007      	beq.n	8007334 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007328:	f043 0208 	orr.w	r2, r3, #8
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b05      	cmp	r3, #5
 800733e:	f040 809a 	bne.w	8007476 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00f      	beq.n	800736a <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734e:	4618      	mov	r0, r3
 8007350:	f7fb ffc6 	bl	80032e0 <HAL_DMA_Abort>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d007      	beq.n	800736a <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735e:	f043 0208 	orr.w	r2, r3, #8
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 800736a:	f7fb fd13 	bl	8002d94 <HAL_GetTick>
 800736e:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8007370:	e012      	b.n	8007398 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8007372:	f7fb fd0f 	bl	8002d94 <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	2b64      	cmp	r3, #100	; 0x64
 800737e:	d90b      	bls.n	8007398 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007384:	f043 0201 	orr.w	r2, r3, #1
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a31      	ldr	r2, [pc, #196]	; (8007464 <HAL_I2S_DMAStop+0x330>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d101      	bne.n	80073a6 <HAL_I2S_DMAStop+0x272>
 80073a2:	4b31      	ldr	r3, [pc, #196]	; (8007468 <HAL_I2S_DMAStop+0x334>)
 80073a4:	e001      	b.n	80073aa <HAL_I2S_DMAStop+0x276>
 80073a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d1de      	bne.n	8007372 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80073b4:	e012      	b.n	80073dc <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80073b6:	f7fb fced 	bl	8002d94 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	2b64      	cmp	r3, #100	; 0x64
 80073c2:	d90b      	bls.n	80073dc <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073c8:	f043 0201 	orr.w	r2, r3, #1
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a20      	ldr	r2, [pc, #128]	; (8007464 <HAL_I2S_DMAStop+0x330>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d101      	bne.n	80073ea <HAL_I2S_DMAStop+0x2b6>
 80073e6:	4b20      	ldr	r3, [pc, #128]	; (8007468 <HAL_I2S_DMAStop+0x334>)
 80073e8:	e001      	b.n	80073ee <HAL_I2S_DMAStop+0x2ba>
 80073ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f4:	2b80      	cmp	r3, #128	; 0x80
 80073f6:	d0de      	beq.n	80073b6 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a19      	ldr	r2, [pc, #100]	; (8007464 <HAL_I2S_DMAStop+0x330>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d101      	bne.n	8007406 <HAL_I2S_DMAStop+0x2d2>
 8007402:	4b19      	ldr	r3, [pc, #100]	; (8007468 <HAL_I2S_DMAStop+0x334>)
 8007404:	e001      	b.n	800740a <HAL_I2S_DMAStop+0x2d6>
 8007406:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800740a:	69da      	ldr	r2, [r3, #28]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4914      	ldr	r1, [pc, #80]	; (8007464 <HAL_I2S_DMAStop+0x330>)
 8007412:	428b      	cmp	r3, r1
 8007414:	d101      	bne.n	800741a <HAL_I2S_DMAStop+0x2e6>
 8007416:	4b14      	ldr	r3, [pc, #80]	; (8007468 <HAL_I2S_DMAStop+0x334>)
 8007418:	e001      	b.n	800741e <HAL_I2S_DMAStop+0x2ea>
 800741a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800741e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007422:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8007424:	2300      	movs	r3, #0
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a0d      	ldr	r2, [pc, #52]	; (8007464 <HAL_I2S_DMAStop+0x330>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d101      	bne.n	8007436 <HAL_I2S_DMAStop+0x302>
 8007432:	4b0d      	ldr	r3, [pc, #52]	; (8007468 <HAL_I2S_DMAStop+0x334>)
 8007434:	e001      	b.n	800743a <HAL_I2S_DMAStop+0x306>
 8007436:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a07      	ldr	r2, [pc, #28]	; (8007464 <HAL_I2S_DMAStop+0x330>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d101      	bne.n	800744e <HAL_I2S_DMAStop+0x31a>
 800744a:	4b07      	ldr	r3, [pc, #28]	; (8007468 <HAL_I2S_DMAStop+0x334>)
 800744c:	e001      	b.n	8007452 <HAL_I2S_DMAStop+0x31e>
 800744e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4902      	ldr	r1, [pc, #8]	; (8007464 <HAL_I2S_DMAStop+0x330>)
 800745a:	428b      	cmp	r3, r1
 800745c:	d106      	bne.n	800746c <HAL_I2S_DMAStop+0x338>
 800745e:	4b02      	ldr	r3, [pc, #8]	; (8007468 <HAL_I2S_DMAStop+0x334>)
 8007460:	e006      	b.n	8007470 <HAL_I2S_DMAStop+0x33c>
 8007462:	bf00      	nop
 8007464:	40003800 	.word	0x40003800
 8007468:	40003400 	.word	0x40003400
 800746c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007470:	f022 0202 	bic.w	r2, r2, #2
 8007474:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69da      	ldr	r2, [r3, #28]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007484:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007486:	2300      	movs	r3, #0
 8007488:	60bb      	str	r3, [r7, #8]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	60bb      	str	r3, [r7, #8]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	60bb      	str	r3, [r7, #8]
 800749a:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 0201 	bic.w	r2, r2, #1
 80074aa:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074b4:	d10c      	bne.n	80074d0 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	77fb      	strb	r3, [r7, #31]
 80074ce:	e002      	b.n	80074d6 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 80074de:	7ffb      	ldrb	r3, [r7, #31]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3720      	adds	r7, #32
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800750a:	b2db      	uxtb	r3, r3
}
 800750c:	4618      	mov	r0, r3
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007524:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10e      	bne.n	800754c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 0202 	bic.w	r2, r2, #2
 800753c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f7f9 f8a5 	bl	800069c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007552:	bf00      	nop
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007566:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f7f9 f8a9 	bl	80006c0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800756e:	bf00      	nop
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b084      	sub	sp, #16
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007582:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 0203 	bic.w	r2, r2, #3
 8007592:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ac:	f043 0208 	orr.w	r2, r3, #8
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f7f9 f9f3 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80075ba:	bf00      	nop
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b082      	sub	sp, #8
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ce:	881a      	ldrh	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	1c9a      	adds	r2, r3, #2
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	3b01      	subs	r3, #1
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10e      	bne.n	8007616 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007606:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7f9 f843 	bl	800069c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007616:	bf00      	nop
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b082      	sub	sp, #8
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68da      	ldr	r2, [r3, #12]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007630:	b292      	uxth	r2, r2
 8007632:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007638:	1c9a      	adds	r2, r3, #2
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007642:	b29b      	uxth	r3, r3
 8007644:	3b01      	subs	r3, #1
 8007646:	b29a      	uxth	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007650:	b29b      	uxth	r3, r3
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10e      	bne.n	8007674 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007664:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7ff ff3a 	bl	80074e8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007674:	bf00      	nop
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b04      	cmp	r3, #4
 8007696:	d13a      	bne.n	800770e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d109      	bne.n	80076b6 <I2S_IRQHandler+0x3a>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ac:	2b40      	cmp	r3, #64	; 0x40
 80076ae:	d102      	bne.n	80076b6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7ff ffb4 	bl	800761e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076bc:	2b40      	cmp	r3, #64	; 0x40
 80076be:	d126      	bne.n	800770e <I2S_IRQHandler+0x92>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f003 0320 	and.w	r3, r3, #32
 80076ca:	2b20      	cmp	r3, #32
 80076cc:	d11f      	bne.n	800770e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80076dc:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80076de:	2300      	movs	r3, #0
 80076e0:	613b      	str	r3, [r7, #16]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	613b      	str	r3, [r7, #16]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	613b      	str	r3, [r7, #16]
 80076f2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007700:	f043 0202 	orr.w	r2, r3, #2
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7f9 f949 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b03      	cmp	r3, #3
 8007718:	d136      	bne.n	8007788 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f003 0302 	and.w	r3, r3, #2
 8007720:	2b02      	cmp	r3, #2
 8007722:	d109      	bne.n	8007738 <I2S_IRQHandler+0xbc>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800772e:	2b80      	cmp	r3, #128	; 0x80
 8007730:	d102      	bne.n	8007738 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff ff45 	bl	80075c2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f003 0308 	and.w	r3, r3, #8
 800773e:	2b08      	cmp	r3, #8
 8007740:	d122      	bne.n	8007788 <I2S_IRQHandler+0x10c>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f003 0320 	and.w	r3, r3, #32
 800774c:	2b20      	cmp	r3, #32
 800774e:	d11b      	bne.n	8007788 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800775e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007760:	2300      	movs	r3, #0
 8007762:	60fb      	str	r3, [r7, #12]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800777a:	f043 0204 	orr.w	r2, r3, #4
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7f9 f90c 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007788:	bf00      	nop
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	603b      	str	r3, [r7, #0]
 800779c:	4613      	mov	r3, r2
 800779e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80077a0:	f7fb faf8 	bl	8002d94 <HAL_GetTick>
 80077a4:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80077a6:	e018      	b.n	80077da <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ae:	d014      	beq.n	80077da <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80077b0:	f7fb faf0 	bl	8002d94 <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d902      	bls.n	80077c6 <I2S_WaitFlagStateUntilTimeout+0x36>
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d109      	bne.n	80077da <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e00f      	b.n	80077fa <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	4013      	ands	r3, r2
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	bf0c      	ite	eq
 80077ea:	2301      	moveq	r3, #1
 80077ec:	2300      	movne	r3, #0
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	461a      	mov	r2, r3
 80077f2:	79fb      	ldrb	r3, [r7, #7]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d1d7      	bne.n	80077a8 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
	...

08007804 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b088      	sub	sp, #32
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a92      	ldr	r2, [pc, #584]	; (8007a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d101      	bne.n	8007822 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800781e:	4b92      	ldr	r3, [pc, #584]	; (8007a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007820:	e001      	b.n	8007826 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007822:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a8b      	ldr	r2, [pc, #556]	; (8007a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d101      	bne.n	8007840 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800783c:	4b8a      	ldr	r3, [pc, #552]	; (8007a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800783e:	e001      	b.n	8007844 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007840:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007850:	d004      	beq.n	800785c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	f040 8099 	bne.w	800798e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b02      	cmp	r3, #2
 8007864:	d107      	bne.n	8007876 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f925 	bl	8007ac0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	f003 0301 	and.w	r3, r3, #1
 800787c:	2b01      	cmp	r3, #1
 800787e:	d107      	bne.n	8007890 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007886:	2b00      	cmp	r3, #0
 8007888:	d002      	beq.n	8007890 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f9c8 	bl	8007c20 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007896:	2b40      	cmp	r3, #64	; 0x40
 8007898:	d13a      	bne.n	8007910 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	f003 0320 	and.w	r3, r3, #32
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d035      	beq.n	8007910 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a6e      	ldr	r2, [pc, #440]	; (8007a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d101      	bne.n	80078b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80078ae:	4b6e      	ldr	r3, [pc, #440]	; (8007a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80078b0:	e001      	b.n	80078b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80078b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4969      	ldr	r1, [pc, #420]	; (8007a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80078be:	428b      	cmp	r3, r1
 80078c0:	d101      	bne.n	80078c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80078c2:	4b69      	ldr	r3, [pc, #420]	; (8007a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80078c4:	e001      	b.n	80078ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80078c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80078ce:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	685a      	ldr	r2, [r3, #4]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80078de:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80078e0:	2300      	movs	r3, #0
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007902:	f043 0202 	orr.w	r2, r3, #2
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7f9 f848 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	f003 0308 	and.w	r3, r3, #8
 8007916:	2b08      	cmp	r3, #8
 8007918:	f040 80c3 	bne.w	8007aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	f003 0320 	and.w	r3, r3, #32
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 80bd 	beq.w	8007aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007936:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a49      	ldr	r2, [pc, #292]	; (8007a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d101      	bne.n	8007946 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007942:	4b49      	ldr	r3, [pc, #292]	; (8007a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007944:	e001      	b.n	800794a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007946:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4944      	ldr	r1, [pc, #272]	; (8007a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007952:	428b      	cmp	r3, r1
 8007954:	d101      	bne.n	800795a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007956:	4b44      	ldr	r3, [pc, #272]	; (8007a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007958:	e001      	b.n	800795e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800795a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800795e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007962:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007964:	2300      	movs	r3, #0
 8007966:	60bb      	str	r3, [r7, #8]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	60bb      	str	r3, [r7, #8]
 8007970:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800797e:	f043 0204 	orr.w	r2, r3, #4
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7f9 f80a 	bl	80009a0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800798c:	e089      	b.n	8007aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	f003 0302 	and.w	r3, r3, #2
 8007994:	2b02      	cmp	r3, #2
 8007996:	d107      	bne.n	80079a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f8be 	bl	8007b24 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d107      	bne.n	80079c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d002      	beq.n	80079c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f8fd 	bl	8007bbc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c8:	2b40      	cmp	r3, #64	; 0x40
 80079ca:	d12f      	bne.n	8007a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f003 0320 	and.w	r3, r3, #32
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d02a      	beq.n	8007a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80079e4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a1e      	ldr	r2, [pc, #120]	; (8007a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d101      	bne.n	80079f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80079f0:	4b1d      	ldr	r3, [pc, #116]	; (8007a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80079f2:	e001      	b.n	80079f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80079f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4919      	ldr	r1, [pc, #100]	; (8007a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007a00:	428b      	cmp	r3, r1
 8007a02:	d101      	bne.n	8007a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007a04:	4b18      	ldr	r3, [pc, #96]	; (8007a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007a06:	e001      	b.n	8007a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007a08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007a10:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1e:	f043 0202 	orr.w	r2, r3, #2
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7f8 ffba 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	f003 0308 	and.w	r3, r3, #8
 8007a32:	2b08      	cmp	r3, #8
 8007a34:	d136      	bne.n	8007aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d031      	beq.n	8007aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a07      	ldr	r2, [pc, #28]	; (8007a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d101      	bne.n	8007a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007a4a:	4b07      	ldr	r3, [pc, #28]	; (8007a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007a4c:	e001      	b.n	8007a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007a4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a52:	685a      	ldr	r2, [r3, #4]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4902      	ldr	r1, [pc, #8]	; (8007a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007a5a:	428b      	cmp	r3, r1
 8007a5c:	d106      	bne.n	8007a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8007a5e:	4b02      	ldr	r3, [pc, #8]	; (8007a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007a60:	e006      	b.n	8007a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8007a62:	bf00      	nop
 8007a64:	40003800 	.word	0x40003800
 8007a68:	40003400 	.word	0x40003400
 8007a6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007a74:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007a84:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a92:	f043 0204 	orr.w	r2, r3, #4
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7f8 ff80 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007aa0:	e000      	b.n	8007aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007aa2:	bf00      	nop
}
 8007aa4:	bf00      	nop
 8007aa6:	3720      	adds	r7, #32
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007acc:	1c99      	adds	r1, r3, #2
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	6251      	str	r1, [r2, #36]	; 0x24
 8007ad2:	881a      	ldrh	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d113      	bne.n	8007b1a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d106      	bne.n	8007b1a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7ff ffc9 	bl	8007aac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
	...

08007b24 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b30:	1c99      	adds	r1, r3, #2
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	6251      	str	r1, [r2, #36]	; 0x24
 8007b36:	8819      	ldrh	r1, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a1d      	ldr	r2, [pc, #116]	; (8007bb4 <I2SEx_TxISR_I2SExt+0x90>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d101      	bne.n	8007b46 <I2SEx_TxISR_I2SExt+0x22>
 8007b42:	4b1d      	ldr	r3, [pc, #116]	; (8007bb8 <I2SEx_TxISR_I2SExt+0x94>)
 8007b44:	e001      	b.n	8007b4a <I2SEx_TxISR_I2SExt+0x26>
 8007b46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b4a:	460a      	mov	r2, r1
 8007b4c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	3b01      	subs	r3, #1
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d121      	bne.n	8007baa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a12      	ldr	r2, [pc, #72]	; (8007bb4 <I2SEx_TxISR_I2SExt+0x90>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d101      	bne.n	8007b74 <I2SEx_TxISR_I2SExt+0x50>
 8007b70:	4b11      	ldr	r3, [pc, #68]	; (8007bb8 <I2SEx_TxISR_I2SExt+0x94>)
 8007b72:	e001      	b.n	8007b78 <I2SEx_TxISR_I2SExt+0x54>
 8007b74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	490d      	ldr	r1, [pc, #52]	; (8007bb4 <I2SEx_TxISR_I2SExt+0x90>)
 8007b80:	428b      	cmp	r3, r1
 8007b82:	d101      	bne.n	8007b88 <I2SEx_TxISR_I2SExt+0x64>
 8007b84:	4b0c      	ldr	r3, [pc, #48]	; (8007bb8 <I2SEx_TxISR_I2SExt+0x94>)
 8007b86:	e001      	b.n	8007b8c <I2SEx_TxISR_I2SExt+0x68>
 8007b88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b90:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d106      	bne.n	8007baa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7ff ff81 	bl	8007aac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007baa:	bf00      	nop
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	40003800 	.word	0x40003800
 8007bb8:	40003400 	.word	0x40003400

08007bbc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68d8      	ldr	r0, [r3, #12]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bce:	1c99      	adds	r1, r3, #2
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007bd4:	b282      	uxth	r2, r0
 8007bd6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	3b01      	subs	r3, #1
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d113      	bne.n	8007c18 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007bfe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d106      	bne.n	8007c18 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7ff ff4a 	bl	8007aac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007c18:	bf00      	nop
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a20      	ldr	r2, [pc, #128]	; (8007cb0 <I2SEx_RxISR_I2SExt+0x90>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d101      	bne.n	8007c36 <I2SEx_RxISR_I2SExt+0x16>
 8007c32:	4b20      	ldr	r3, [pc, #128]	; (8007cb4 <I2SEx_RxISR_I2SExt+0x94>)
 8007c34:	e001      	b.n	8007c3a <I2SEx_RxISR_I2SExt+0x1a>
 8007c36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c3a:	68d8      	ldr	r0, [r3, #12]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c40:	1c99      	adds	r1, r3, #2
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007c46:	b282      	uxth	r2, r0
 8007c48:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	3b01      	subs	r3, #1
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d121      	bne.n	8007ca6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a12      	ldr	r2, [pc, #72]	; (8007cb0 <I2SEx_RxISR_I2SExt+0x90>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d101      	bne.n	8007c70 <I2SEx_RxISR_I2SExt+0x50>
 8007c6c:	4b11      	ldr	r3, [pc, #68]	; (8007cb4 <I2SEx_RxISR_I2SExt+0x94>)
 8007c6e:	e001      	b.n	8007c74 <I2SEx_RxISR_I2SExt+0x54>
 8007c70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	490d      	ldr	r1, [pc, #52]	; (8007cb0 <I2SEx_RxISR_I2SExt+0x90>)
 8007c7c:	428b      	cmp	r3, r1
 8007c7e:	d101      	bne.n	8007c84 <I2SEx_RxISR_I2SExt+0x64>
 8007c80:	4b0c      	ldr	r3, [pc, #48]	; (8007cb4 <I2SEx_RxISR_I2SExt+0x94>)
 8007c82:	e001      	b.n	8007c88 <I2SEx_RxISR_I2SExt+0x68>
 8007c84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007c8c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d106      	bne.n	8007ca6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7ff ff03 	bl	8007aac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007ca6:	bf00      	nop
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	40003800 	.word	0x40003800
 8007cb4:	40003400 	.word	0x40003400

08007cb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d101      	bne.n	8007cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e267      	b.n	800819a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d075      	beq.n	8007dc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cd6:	4b88      	ldr	r3, [pc, #544]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f003 030c 	and.w	r3, r3, #12
 8007cde:	2b04      	cmp	r3, #4
 8007ce0:	d00c      	beq.n	8007cfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ce2:	4b85      	ldr	r3, [pc, #532]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cea:	2b08      	cmp	r3, #8
 8007cec:	d112      	bne.n	8007d14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cee:	4b82      	ldr	r3, [pc, #520]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cfa:	d10b      	bne.n	8007d14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cfc:	4b7e      	ldr	r3, [pc, #504]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d05b      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x108>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d157      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e242      	b.n	800819a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d1c:	d106      	bne.n	8007d2c <HAL_RCC_OscConfig+0x74>
 8007d1e:	4b76      	ldr	r3, [pc, #472]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a75      	ldr	r2, [pc, #468]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d28:	6013      	str	r3, [r2, #0]
 8007d2a:	e01d      	b.n	8007d68 <HAL_RCC_OscConfig+0xb0>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d34:	d10c      	bne.n	8007d50 <HAL_RCC_OscConfig+0x98>
 8007d36:	4b70      	ldr	r3, [pc, #448]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a6f      	ldr	r2, [pc, #444]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d40:	6013      	str	r3, [r2, #0]
 8007d42:	4b6d      	ldr	r3, [pc, #436]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a6c      	ldr	r2, [pc, #432]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d4c:	6013      	str	r3, [r2, #0]
 8007d4e:	e00b      	b.n	8007d68 <HAL_RCC_OscConfig+0xb0>
 8007d50:	4b69      	ldr	r3, [pc, #420]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a68      	ldr	r2, [pc, #416]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	4b66      	ldr	r3, [pc, #408]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a65      	ldr	r2, [pc, #404]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d013      	beq.n	8007d98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d70:	f7fb f810 	bl	8002d94 <HAL_GetTick>
 8007d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d76:	e008      	b.n	8007d8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d78:	f7fb f80c 	bl	8002d94 <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	2b64      	cmp	r3, #100	; 0x64
 8007d84:	d901      	bls.n	8007d8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e207      	b.n	800819a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d8a:	4b5b      	ldr	r3, [pc, #364]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0f0      	beq.n	8007d78 <HAL_RCC_OscConfig+0xc0>
 8007d96:	e014      	b.n	8007dc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d98:	f7fa fffc 	bl	8002d94 <HAL_GetTick>
 8007d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d9e:	e008      	b.n	8007db2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007da0:	f7fa fff8 	bl	8002d94 <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	2b64      	cmp	r3, #100	; 0x64
 8007dac:	d901      	bls.n	8007db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e1f3      	b.n	800819a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007db2:	4b51      	ldr	r3, [pc, #324]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1f0      	bne.n	8007da0 <HAL_RCC_OscConfig+0xe8>
 8007dbe:	e000      	b.n	8007dc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0302 	and.w	r3, r3, #2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d063      	beq.n	8007e96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dce:	4b4a      	ldr	r3, [pc, #296]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f003 030c 	and.w	r3, r3, #12
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00b      	beq.n	8007df2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dda:	4b47      	ldr	r3, [pc, #284]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007de2:	2b08      	cmp	r3, #8
 8007de4:	d11c      	bne.n	8007e20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007de6:	4b44      	ldr	r3, [pc, #272]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d116      	bne.n	8007e20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007df2:	4b41      	ldr	r3, [pc, #260]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0302 	and.w	r3, r3, #2
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d005      	beq.n	8007e0a <HAL_RCC_OscConfig+0x152>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d001      	beq.n	8007e0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e1c7      	b.n	800819a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e0a:	4b3b      	ldr	r3, [pc, #236]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	4937      	ldr	r1, [pc, #220]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e1e:	e03a      	b.n	8007e96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d020      	beq.n	8007e6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e28:	4b34      	ldr	r3, [pc, #208]	; (8007efc <HAL_RCC_OscConfig+0x244>)
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e2e:	f7fa ffb1 	bl	8002d94 <HAL_GetTick>
 8007e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e34:	e008      	b.n	8007e48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e36:	f7fa ffad 	bl	8002d94 <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d901      	bls.n	8007e48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e1a8      	b.n	800819a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e48:	4b2b      	ldr	r3, [pc, #172]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0302 	and.w	r3, r3, #2
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d0f0      	beq.n	8007e36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e54:	4b28      	ldr	r3, [pc, #160]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	00db      	lsls	r3, r3, #3
 8007e62:	4925      	ldr	r1, [pc, #148]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007e64:	4313      	orrs	r3, r2
 8007e66:	600b      	str	r3, [r1, #0]
 8007e68:	e015      	b.n	8007e96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e6a:	4b24      	ldr	r3, [pc, #144]	; (8007efc <HAL_RCC_OscConfig+0x244>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e70:	f7fa ff90 	bl	8002d94 <HAL_GetTick>
 8007e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e76:	e008      	b.n	8007e8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e78:	f7fa ff8c 	bl	8002d94 <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d901      	bls.n	8007e8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e187      	b.n	800819a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e8a:	4b1b      	ldr	r3, [pc, #108]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0302 	and.w	r3, r3, #2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1f0      	bne.n	8007e78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0308 	and.w	r3, r3, #8
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d036      	beq.n	8007f10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d016      	beq.n	8007ed8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007eaa:	4b15      	ldr	r3, [pc, #84]	; (8007f00 <HAL_RCC_OscConfig+0x248>)
 8007eac:	2201      	movs	r2, #1
 8007eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eb0:	f7fa ff70 	bl	8002d94 <HAL_GetTick>
 8007eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eb6:	e008      	b.n	8007eca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007eb8:	f7fa ff6c 	bl	8002d94 <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d901      	bls.n	8007eca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e167      	b.n	800819a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eca:	4b0b      	ldr	r3, [pc, #44]	; (8007ef8 <HAL_RCC_OscConfig+0x240>)
 8007ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ece:	f003 0302 	and.w	r3, r3, #2
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0f0      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x200>
 8007ed6:	e01b      	b.n	8007f10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ed8:	4b09      	ldr	r3, [pc, #36]	; (8007f00 <HAL_RCC_OscConfig+0x248>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ede:	f7fa ff59 	bl	8002d94 <HAL_GetTick>
 8007ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ee4:	e00e      	b.n	8007f04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ee6:	f7fa ff55 	bl	8002d94 <HAL_GetTick>
 8007eea:	4602      	mov	r2, r0
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d907      	bls.n	8007f04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e150      	b.n	800819a <HAL_RCC_OscConfig+0x4e2>
 8007ef8:	40023800 	.word	0x40023800
 8007efc:	42470000 	.word	0x42470000
 8007f00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f04:	4b88      	ldr	r3, [pc, #544]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 8007f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f08:	f003 0302 	and.w	r3, r3, #2
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1ea      	bne.n	8007ee6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0304 	and.w	r3, r3, #4
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f000 8097 	beq.w	800804c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f22:	4b81      	ldr	r3, [pc, #516]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 8007f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10f      	bne.n	8007f4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f2e:	2300      	movs	r3, #0
 8007f30:	60bb      	str	r3, [r7, #8]
 8007f32:	4b7d      	ldr	r3, [pc, #500]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 8007f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f36:	4a7c      	ldr	r2, [pc, #496]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 8007f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8007f3e:	4b7a      	ldr	r3, [pc, #488]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 8007f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f46:	60bb      	str	r3, [r7, #8]
 8007f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f4e:	4b77      	ldr	r3, [pc, #476]	; (800812c <HAL_RCC_OscConfig+0x474>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d118      	bne.n	8007f8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f5a:	4b74      	ldr	r3, [pc, #464]	; (800812c <HAL_RCC_OscConfig+0x474>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a73      	ldr	r2, [pc, #460]	; (800812c <HAL_RCC_OscConfig+0x474>)
 8007f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f66:	f7fa ff15 	bl	8002d94 <HAL_GetTick>
 8007f6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f6c:	e008      	b.n	8007f80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f6e:	f7fa ff11 	bl	8002d94 <HAL_GetTick>
 8007f72:	4602      	mov	r2, r0
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d901      	bls.n	8007f80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e10c      	b.n	800819a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f80:	4b6a      	ldr	r3, [pc, #424]	; (800812c <HAL_RCC_OscConfig+0x474>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d0f0      	beq.n	8007f6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d106      	bne.n	8007fa2 <HAL_RCC_OscConfig+0x2ea>
 8007f94:	4b64      	ldr	r3, [pc, #400]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 8007f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f98:	4a63      	ldr	r2, [pc, #396]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 8007f9a:	f043 0301 	orr.w	r3, r3, #1
 8007f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8007fa0:	e01c      	b.n	8007fdc <HAL_RCC_OscConfig+0x324>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	2b05      	cmp	r3, #5
 8007fa8:	d10c      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x30c>
 8007faa:	4b5f      	ldr	r3, [pc, #380]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 8007fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fae:	4a5e      	ldr	r2, [pc, #376]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 8007fb0:	f043 0304 	orr.w	r3, r3, #4
 8007fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8007fb6:	4b5c      	ldr	r3, [pc, #368]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 8007fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fba:	4a5b      	ldr	r2, [pc, #364]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 8007fbc:	f043 0301 	orr.w	r3, r3, #1
 8007fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8007fc2:	e00b      	b.n	8007fdc <HAL_RCC_OscConfig+0x324>
 8007fc4:	4b58      	ldr	r3, [pc, #352]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 8007fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc8:	4a57      	ldr	r2, [pc, #348]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 8007fca:	f023 0301 	bic.w	r3, r3, #1
 8007fce:	6713      	str	r3, [r2, #112]	; 0x70
 8007fd0:	4b55      	ldr	r3, [pc, #340]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 8007fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd4:	4a54      	ldr	r2, [pc, #336]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 8007fd6:	f023 0304 	bic.w	r3, r3, #4
 8007fda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d015      	beq.n	8008010 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fe4:	f7fa fed6 	bl	8002d94 <HAL_GetTick>
 8007fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fea:	e00a      	b.n	8008002 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fec:	f7fa fed2 	bl	8002d94 <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d901      	bls.n	8008002 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e0cb      	b.n	800819a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008002:	4b49      	ldr	r3, [pc, #292]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 8008004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008006:	f003 0302 	and.w	r3, r3, #2
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0ee      	beq.n	8007fec <HAL_RCC_OscConfig+0x334>
 800800e:	e014      	b.n	800803a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008010:	f7fa fec0 	bl	8002d94 <HAL_GetTick>
 8008014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008016:	e00a      	b.n	800802e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008018:	f7fa febc 	bl	8002d94 <HAL_GetTick>
 800801c:	4602      	mov	r2, r0
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	f241 3288 	movw	r2, #5000	; 0x1388
 8008026:	4293      	cmp	r3, r2
 8008028:	d901      	bls.n	800802e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e0b5      	b.n	800819a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800802e:	4b3e      	ldr	r3, [pc, #248]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 8008030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008032:	f003 0302 	and.w	r3, r3, #2
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1ee      	bne.n	8008018 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800803a:	7dfb      	ldrb	r3, [r7, #23]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d105      	bne.n	800804c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008040:	4b39      	ldr	r3, [pc, #228]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 8008042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008044:	4a38      	ldr	r2, [pc, #224]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 8008046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800804a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 80a1 	beq.w	8008198 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008056:	4b34      	ldr	r3, [pc, #208]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f003 030c 	and.w	r3, r3, #12
 800805e:	2b08      	cmp	r3, #8
 8008060:	d05c      	beq.n	800811c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	2b02      	cmp	r3, #2
 8008068:	d141      	bne.n	80080ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800806a:	4b31      	ldr	r3, [pc, #196]	; (8008130 <HAL_RCC_OscConfig+0x478>)
 800806c:	2200      	movs	r2, #0
 800806e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008070:	f7fa fe90 	bl	8002d94 <HAL_GetTick>
 8008074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008076:	e008      	b.n	800808a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008078:	f7fa fe8c 	bl	8002d94 <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b02      	cmp	r3, #2
 8008084:	d901      	bls.n	800808a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e087      	b.n	800819a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800808a:	4b27      	ldr	r3, [pc, #156]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1f0      	bne.n	8008078 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	69da      	ldr	r2, [r3, #28]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	431a      	orrs	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a4:	019b      	lsls	r3, r3, #6
 80080a6:	431a      	orrs	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ac:	085b      	lsrs	r3, r3, #1
 80080ae:	3b01      	subs	r3, #1
 80080b0:	041b      	lsls	r3, r3, #16
 80080b2:	431a      	orrs	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b8:	061b      	lsls	r3, r3, #24
 80080ba:	491b      	ldr	r1, [pc, #108]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080c0:	4b1b      	ldr	r3, [pc, #108]	; (8008130 <HAL_RCC_OscConfig+0x478>)
 80080c2:	2201      	movs	r2, #1
 80080c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080c6:	f7fa fe65 	bl	8002d94 <HAL_GetTick>
 80080ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080cc:	e008      	b.n	80080e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080ce:	f7fa fe61 	bl	8002d94 <HAL_GetTick>
 80080d2:	4602      	mov	r2, r0
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d901      	bls.n	80080e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e05c      	b.n	800819a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080e0:	4b11      	ldr	r3, [pc, #68]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d0f0      	beq.n	80080ce <HAL_RCC_OscConfig+0x416>
 80080ec:	e054      	b.n	8008198 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080ee:	4b10      	ldr	r3, [pc, #64]	; (8008130 <HAL_RCC_OscConfig+0x478>)
 80080f0:	2200      	movs	r2, #0
 80080f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080f4:	f7fa fe4e 	bl	8002d94 <HAL_GetTick>
 80080f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080fa:	e008      	b.n	800810e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080fc:	f7fa fe4a 	bl	8002d94 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b02      	cmp	r3, #2
 8008108:	d901      	bls.n	800810e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e045      	b.n	800819a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800810e:	4b06      	ldr	r3, [pc, #24]	; (8008128 <HAL_RCC_OscConfig+0x470>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1f0      	bne.n	80080fc <HAL_RCC_OscConfig+0x444>
 800811a:	e03d      	b.n	8008198 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d107      	bne.n	8008134 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e038      	b.n	800819a <HAL_RCC_OscConfig+0x4e2>
 8008128:	40023800 	.word	0x40023800
 800812c:	40007000 	.word	0x40007000
 8008130:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008134:	4b1b      	ldr	r3, [pc, #108]	; (80081a4 <HAL_RCC_OscConfig+0x4ec>)
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d028      	beq.n	8008194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800814c:	429a      	cmp	r2, r3
 800814e:	d121      	bne.n	8008194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800815a:	429a      	cmp	r2, r3
 800815c:	d11a      	bne.n	8008194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008164:	4013      	ands	r3, r2
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800816a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800816c:	4293      	cmp	r3, r2
 800816e:	d111      	bne.n	8008194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817a:	085b      	lsrs	r3, r3, #1
 800817c:	3b01      	subs	r3, #1
 800817e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008180:	429a      	cmp	r2, r3
 8008182:	d107      	bne.n	8008194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008190:	429a      	cmp	r2, r3
 8008192:	d001      	beq.n	8008198 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e000      	b.n	800819a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	40023800 	.word	0x40023800

080081a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e0cc      	b.n	8008356 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081bc:	4b68      	ldr	r3, [pc, #416]	; (8008360 <HAL_RCC_ClockConfig+0x1b8>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0307 	and.w	r3, r3, #7
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d90c      	bls.n	80081e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081ca:	4b65      	ldr	r3, [pc, #404]	; (8008360 <HAL_RCC_ClockConfig+0x1b8>)
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	b2d2      	uxtb	r2, r2
 80081d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081d2:	4b63      	ldr	r3, [pc, #396]	; (8008360 <HAL_RCC_ClockConfig+0x1b8>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0307 	and.w	r3, r3, #7
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d001      	beq.n	80081e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e0b8      	b.n	8008356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d020      	beq.n	8008232 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d005      	beq.n	8008208 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081fc:	4b59      	ldr	r3, [pc, #356]	; (8008364 <HAL_RCC_ClockConfig+0x1bc>)
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	4a58      	ldr	r2, [pc, #352]	; (8008364 <HAL_RCC_ClockConfig+0x1bc>)
 8008202:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008206:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0308 	and.w	r3, r3, #8
 8008210:	2b00      	cmp	r3, #0
 8008212:	d005      	beq.n	8008220 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008214:	4b53      	ldr	r3, [pc, #332]	; (8008364 <HAL_RCC_ClockConfig+0x1bc>)
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	4a52      	ldr	r2, [pc, #328]	; (8008364 <HAL_RCC_ClockConfig+0x1bc>)
 800821a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800821e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008220:	4b50      	ldr	r3, [pc, #320]	; (8008364 <HAL_RCC_ClockConfig+0x1bc>)
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	494d      	ldr	r1, [pc, #308]	; (8008364 <HAL_RCC_ClockConfig+0x1bc>)
 800822e:	4313      	orrs	r3, r2
 8008230:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b00      	cmp	r3, #0
 800823c:	d044      	beq.n	80082c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d107      	bne.n	8008256 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008246:	4b47      	ldr	r3, [pc, #284]	; (8008364 <HAL_RCC_ClockConfig+0x1bc>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d119      	bne.n	8008286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e07f      	b.n	8008356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	2b02      	cmp	r3, #2
 800825c:	d003      	beq.n	8008266 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008262:	2b03      	cmp	r3, #3
 8008264:	d107      	bne.n	8008276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008266:	4b3f      	ldr	r3, [pc, #252]	; (8008364 <HAL_RCC_ClockConfig+0x1bc>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d109      	bne.n	8008286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e06f      	b.n	8008356 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008276:	4b3b      	ldr	r3, [pc, #236]	; (8008364 <HAL_RCC_ClockConfig+0x1bc>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 0302 	and.w	r3, r3, #2
 800827e:	2b00      	cmp	r3, #0
 8008280:	d101      	bne.n	8008286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e067      	b.n	8008356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008286:	4b37      	ldr	r3, [pc, #220]	; (8008364 <HAL_RCC_ClockConfig+0x1bc>)
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f023 0203 	bic.w	r2, r3, #3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	4934      	ldr	r1, [pc, #208]	; (8008364 <HAL_RCC_ClockConfig+0x1bc>)
 8008294:	4313      	orrs	r3, r2
 8008296:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008298:	f7fa fd7c 	bl	8002d94 <HAL_GetTick>
 800829c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800829e:	e00a      	b.n	80082b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082a0:	f7fa fd78 	bl	8002d94 <HAL_GetTick>
 80082a4:	4602      	mov	r2, r0
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d901      	bls.n	80082b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e04f      	b.n	8008356 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082b6:	4b2b      	ldr	r3, [pc, #172]	; (8008364 <HAL_RCC_ClockConfig+0x1bc>)
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f003 020c 	and.w	r2, r3, #12
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d1eb      	bne.n	80082a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082c8:	4b25      	ldr	r3, [pc, #148]	; (8008360 <HAL_RCC_ClockConfig+0x1b8>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0307 	and.w	r3, r3, #7
 80082d0:	683a      	ldr	r2, [r7, #0]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d20c      	bcs.n	80082f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082d6:	4b22      	ldr	r3, [pc, #136]	; (8008360 <HAL_RCC_ClockConfig+0x1b8>)
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	b2d2      	uxtb	r2, r2
 80082dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082de:	4b20      	ldr	r3, [pc, #128]	; (8008360 <HAL_RCC_ClockConfig+0x1b8>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0307 	and.w	r3, r3, #7
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d001      	beq.n	80082f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e032      	b.n	8008356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0304 	and.w	r3, r3, #4
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d008      	beq.n	800830e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082fc:	4b19      	ldr	r3, [pc, #100]	; (8008364 <HAL_RCC_ClockConfig+0x1bc>)
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	4916      	ldr	r1, [pc, #88]	; (8008364 <HAL_RCC_ClockConfig+0x1bc>)
 800830a:	4313      	orrs	r3, r2
 800830c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0308 	and.w	r3, r3, #8
 8008316:	2b00      	cmp	r3, #0
 8008318:	d009      	beq.n	800832e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800831a:	4b12      	ldr	r3, [pc, #72]	; (8008364 <HAL_RCC_ClockConfig+0x1bc>)
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	00db      	lsls	r3, r3, #3
 8008328:	490e      	ldr	r1, [pc, #56]	; (8008364 <HAL_RCC_ClockConfig+0x1bc>)
 800832a:	4313      	orrs	r3, r2
 800832c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800832e:	f000 f821 	bl	8008374 <HAL_RCC_GetSysClockFreq>
 8008332:	4602      	mov	r2, r0
 8008334:	4b0b      	ldr	r3, [pc, #44]	; (8008364 <HAL_RCC_ClockConfig+0x1bc>)
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	091b      	lsrs	r3, r3, #4
 800833a:	f003 030f 	and.w	r3, r3, #15
 800833e:	490a      	ldr	r1, [pc, #40]	; (8008368 <HAL_RCC_ClockConfig+0x1c0>)
 8008340:	5ccb      	ldrb	r3, [r1, r3]
 8008342:	fa22 f303 	lsr.w	r3, r2, r3
 8008346:	4a09      	ldr	r2, [pc, #36]	; (800836c <HAL_RCC_ClockConfig+0x1c4>)
 8008348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800834a:	4b09      	ldr	r3, [pc, #36]	; (8008370 <HAL_RCC_ClockConfig+0x1c8>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4618      	mov	r0, r3
 8008350:	f7fa fcdc 	bl	8002d0c <HAL_InitTick>

  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	40023c00 	.word	0x40023c00
 8008364:	40023800 	.word	0x40023800
 8008368:	0801300c 	.word	0x0801300c
 800836c:	2000007c 	.word	0x2000007c
 8008370:	20000084 	.word	0x20000084

08008374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008378:	b094      	sub	sp, #80	; 0x50
 800837a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800837c:	2300      	movs	r3, #0
 800837e:	647b      	str	r3, [r7, #68]	; 0x44
 8008380:	2300      	movs	r3, #0
 8008382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008384:	2300      	movs	r3, #0
 8008386:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008388:	2300      	movs	r3, #0
 800838a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800838c:	4b79      	ldr	r3, [pc, #484]	; (8008574 <HAL_RCC_GetSysClockFreq+0x200>)
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f003 030c 	and.w	r3, r3, #12
 8008394:	2b08      	cmp	r3, #8
 8008396:	d00d      	beq.n	80083b4 <HAL_RCC_GetSysClockFreq+0x40>
 8008398:	2b08      	cmp	r3, #8
 800839a:	f200 80e1 	bhi.w	8008560 <HAL_RCC_GetSysClockFreq+0x1ec>
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d002      	beq.n	80083a8 <HAL_RCC_GetSysClockFreq+0x34>
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	d003      	beq.n	80083ae <HAL_RCC_GetSysClockFreq+0x3a>
 80083a6:	e0db      	b.n	8008560 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80083a8:	4b73      	ldr	r3, [pc, #460]	; (8008578 <HAL_RCC_GetSysClockFreq+0x204>)
 80083aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80083ac:	e0db      	b.n	8008566 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80083ae:	4b73      	ldr	r3, [pc, #460]	; (800857c <HAL_RCC_GetSysClockFreq+0x208>)
 80083b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80083b2:	e0d8      	b.n	8008566 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80083b4:	4b6f      	ldr	r3, [pc, #444]	; (8008574 <HAL_RCC_GetSysClockFreq+0x200>)
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80083be:	4b6d      	ldr	r3, [pc, #436]	; (8008574 <HAL_RCC_GetSysClockFreq+0x200>)
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d063      	beq.n	8008492 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083ca:	4b6a      	ldr	r3, [pc, #424]	; (8008574 <HAL_RCC_GetSysClockFreq+0x200>)
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	099b      	lsrs	r3, r3, #6
 80083d0:	2200      	movs	r2, #0
 80083d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80083d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083dc:	633b      	str	r3, [r7, #48]	; 0x30
 80083de:	2300      	movs	r3, #0
 80083e0:	637b      	str	r3, [r7, #52]	; 0x34
 80083e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80083e6:	4622      	mov	r2, r4
 80083e8:	462b      	mov	r3, r5
 80083ea:	f04f 0000 	mov.w	r0, #0
 80083ee:	f04f 0100 	mov.w	r1, #0
 80083f2:	0159      	lsls	r1, r3, #5
 80083f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80083f8:	0150      	lsls	r0, r2, #5
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	4621      	mov	r1, r4
 8008400:	1a51      	subs	r1, r2, r1
 8008402:	6139      	str	r1, [r7, #16]
 8008404:	4629      	mov	r1, r5
 8008406:	eb63 0301 	sbc.w	r3, r3, r1
 800840a:	617b      	str	r3, [r7, #20]
 800840c:	f04f 0200 	mov.w	r2, #0
 8008410:	f04f 0300 	mov.w	r3, #0
 8008414:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008418:	4659      	mov	r1, fp
 800841a:	018b      	lsls	r3, r1, #6
 800841c:	4651      	mov	r1, sl
 800841e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008422:	4651      	mov	r1, sl
 8008424:	018a      	lsls	r2, r1, #6
 8008426:	4651      	mov	r1, sl
 8008428:	ebb2 0801 	subs.w	r8, r2, r1
 800842c:	4659      	mov	r1, fp
 800842e:	eb63 0901 	sbc.w	r9, r3, r1
 8008432:	f04f 0200 	mov.w	r2, #0
 8008436:	f04f 0300 	mov.w	r3, #0
 800843a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800843e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008442:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008446:	4690      	mov	r8, r2
 8008448:	4699      	mov	r9, r3
 800844a:	4623      	mov	r3, r4
 800844c:	eb18 0303 	adds.w	r3, r8, r3
 8008450:	60bb      	str	r3, [r7, #8]
 8008452:	462b      	mov	r3, r5
 8008454:	eb49 0303 	adc.w	r3, r9, r3
 8008458:	60fb      	str	r3, [r7, #12]
 800845a:	f04f 0200 	mov.w	r2, #0
 800845e:	f04f 0300 	mov.w	r3, #0
 8008462:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008466:	4629      	mov	r1, r5
 8008468:	024b      	lsls	r3, r1, #9
 800846a:	4621      	mov	r1, r4
 800846c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008470:	4621      	mov	r1, r4
 8008472:	024a      	lsls	r2, r1, #9
 8008474:	4610      	mov	r0, r2
 8008476:	4619      	mov	r1, r3
 8008478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800847a:	2200      	movs	r2, #0
 800847c:	62bb      	str	r3, [r7, #40]	; 0x28
 800847e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008480:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008484:	f7f7 fea8 	bl	80001d8 <__aeabi_uldivmod>
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
 800848c:	4613      	mov	r3, r2
 800848e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008490:	e058      	b.n	8008544 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008492:	4b38      	ldr	r3, [pc, #224]	; (8008574 <HAL_RCC_GetSysClockFreq+0x200>)
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	099b      	lsrs	r3, r3, #6
 8008498:	2200      	movs	r2, #0
 800849a:	4618      	mov	r0, r3
 800849c:	4611      	mov	r1, r2
 800849e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80084a2:	623b      	str	r3, [r7, #32]
 80084a4:	2300      	movs	r3, #0
 80084a6:	627b      	str	r3, [r7, #36]	; 0x24
 80084a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80084ac:	4642      	mov	r2, r8
 80084ae:	464b      	mov	r3, r9
 80084b0:	f04f 0000 	mov.w	r0, #0
 80084b4:	f04f 0100 	mov.w	r1, #0
 80084b8:	0159      	lsls	r1, r3, #5
 80084ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80084be:	0150      	lsls	r0, r2, #5
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4641      	mov	r1, r8
 80084c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80084ca:	4649      	mov	r1, r9
 80084cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80084d0:	f04f 0200 	mov.w	r2, #0
 80084d4:	f04f 0300 	mov.w	r3, #0
 80084d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80084dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80084e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80084e4:	ebb2 040a 	subs.w	r4, r2, sl
 80084e8:	eb63 050b 	sbc.w	r5, r3, fp
 80084ec:	f04f 0200 	mov.w	r2, #0
 80084f0:	f04f 0300 	mov.w	r3, #0
 80084f4:	00eb      	lsls	r3, r5, #3
 80084f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084fa:	00e2      	lsls	r2, r4, #3
 80084fc:	4614      	mov	r4, r2
 80084fe:	461d      	mov	r5, r3
 8008500:	4643      	mov	r3, r8
 8008502:	18e3      	adds	r3, r4, r3
 8008504:	603b      	str	r3, [r7, #0]
 8008506:	464b      	mov	r3, r9
 8008508:	eb45 0303 	adc.w	r3, r5, r3
 800850c:	607b      	str	r3, [r7, #4]
 800850e:	f04f 0200 	mov.w	r2, #0
 8008512:	f04f 0300 	mov.w	r3, #0
 8008516:	e9d7 4500 	ldrd	r4, r5, [r7]
 800851a:	4629      	mov	r1, r5
 800851c:	028b      	lsls	r3, r1, #10
 800851e:	4621      	mov	r1, r4
 8008520:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008524:	4621      	mov	r1, r4
 8008526:	028a      	lsls	r2, r1, #10
 8008528:	4610      	mov	r0, r2
 800852a:	4619      	mov	r1, r3
 800852c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800852e:	2200      	movs	r2, #0
 8008530:	61bb      	str	r3, [r7, #24]
 8008532:	61fa      	str	r2, [r7, #28]
 8008534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008538:	f7f7 fe4e 	bl	80001d8 <__aeabi_uldivmod>
 800853c:	4602      	mov	r2, r0
 800853e:	460b      	mov	r3, r1
 8008540:	4613      	mov	r3, r2
 8008542:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008544:	4b0b      	ldr	r3, [pc, #44]	; (8008574 <HAL_RCC_GetSysClockFreq+0x200>)
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	0c1b      	lsrs	r3, r3, #16
 800854a:	f003 0303 	and.w	r3, r3, #3
 800854e:	3301      	adds	r3, #1
 8008550:	005b      	lsls	r3, r3, #1
 8008552:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008554:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008558:	fbb2 f3f3 	udiv	r3, r2, r3
 800855c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800855e:	e002      	b.n	8008566 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008560:	4b05      	ldr	r3, [pc, #20]	; (8008578 <HAL_RCC_GetSysClockFreq+0x204>)
 8008562:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008568:	4618      	mov	r0, r3
 800856a:	3750      	adds	r7, #80	; 0x50
 800856c:	46bd      	mov	sp, r7
 800856e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008572:	bf00      	nop
 8008574:	40023800 	.word	0x40023800
 8008578:	00f42400 	.word	0x00f42400
 800857c:	007a1200 	.word	0x007a1200

08008580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008580:	b480      	push	{r7}
 8008582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008584:	4b03      	ldr	r3, [pc, #12]	; (8008594 <HAL_RCC_GetHCLKFreq+0x14>)
 8008586:	681b      	ldr	r3, [r3, #0]
}
 8008588:	4618      	mov	r0, r3
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	2000007c 	.word	0x2000007c

08008598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800859c:	f7ff fff0 	bl	8008580 <HAL_RCC_GetHCLKFreq>
 80085a0:	4602      	mov	r2, r0
 80085a2:	4b05      	ldr	r3, [pc, #20]	; (80085b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	0a9b      	lsrs	r3, r3, #10
 80085a8:	f003 0307 	and.w	r3, r3, #7
 80085ac:	4903      	ldr	r1, [pc, #12]	; (80085bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80085ae:	5ccb      	ldrb	r3, [r1, r3]
 80085b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	40023800 	.word	0x40023800
 80085bc:	0801301c 	.word	0x0801301c

080085c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80085c4:	f7ff ffdc 	bl	8008580 <HAL_RCC_GetHCLKFreq>
 80085c8:	4602      	mov	r2, r0
 80085ca:	4b05      	ldr	r3, [pc, #20]	; (80085e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	0b5b      	lsrs	r3, r3, #13
 80085d0:	f003 0307 	and.w	r3, r3, #7
 80085d4:	4903      	ldr	r1, [pc, #12]	; (80085e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085d6:	5ccb      	ldrb	r3, [r1, r3]
 80085d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085dc:	4618      	mov	r0, r3
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	40023800 	.word	0x40023800
 80085e4:	0801301c 	.word	0x0801301c

080085e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80085f0:	2300      	movs	r3, #0
 80085f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	2b00      	cmp	r3, #0
 8008602:	d105      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800860c:	2b00      	cmp	r3, #0
 800860e:	d038      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008610:	4b68      	ldr	r3, [pc, #416]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008612:	2200      	movs	r2, #0
 8008614:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008616:	f7fa fbbd 	bl	8002d94 <HAL_GetTick>
 800861a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800861c:	e008      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800861e:	f7fa fbb9 	bl	8002d94 <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	2b02      	cmp	r3, #2
 800862a:	d901      	bls.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e0bd      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008630:	4b61      	ldr	r3, [pc, #388]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1f0      	bne.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	019b      	lsls	r3, r3, #6
 8008646:	431a      	orrs	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	071b      	lsls	r3, r3, #28
 800864e:	495a      	ldr	r1, [pc, #360]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008650:	4313      	orrs	r3, r2
 8008652:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008656:	4b57      	ldr	r3, [pc, #348]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008658:	2201      	movs	r2, #1
 800865a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800865c:	f7fa fb9a 	bl	8002d94 <HAL_GetTick>
 8008660:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008662:	e008      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008664:	f7fa fb96 	bl	8002d94 <HAL_GetTick>
 8008668:	4602      	mov	r2, r0
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	2b02      	cmp	r3, #2
 8008670:	d901      	bls.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e09a      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008676:	4b50      	ldr	r3, [pc, #320]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0f0      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0302 	and.w	r3, r3, #2
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 8083 	beq.w	8008796 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008690:	2300      	movs	r3, #0
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	4b48      	ldr	r3, [pc, #288]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008698:	4a47      	ldr	r2, [pc, #284]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800869a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800869e:	6413      	str	r3, [r2, #64]	; 0x40
 80086a0:	4b45      	ldr	r3, [pc, #276]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80086ac:	4b43      	ldr	r3, [pc, #268]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a42      	ldr	r2, [pc, #264]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80086b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086b6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80086b8:	f7fa fb6c 	bl	8002d94 <HAL_GetTick>
 80086bc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80086be:	e008      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80086c0:	f7fa fb68 	bl	8002d94 <HAL_GetTick>
 80086c4:	4602      	mov	r2, r0
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d901      	bls.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e06c      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80086d2:	4b3a      	ldr	r3, [pc, #232]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d0f0      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80086de:	4b36      	ldr	r3, [pc, #216]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086e6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d02f      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086f6:	693a      	ldr	r2, [r7, #16]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d028      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086fc:	4b2e      	ldr	r3, [pc, #184]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008704:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008706:	4b2e      	ldr	r3, [pc, #184]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008708:	2201      	movs	r2, #1
 800870a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800870c:	4b2c      	ldr	r3, [pc, #176]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800870e:	2200      	movs	r2, #0
 8008710:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008712:	4a29      	ldr	r2, [pc, #164]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008718:	4b27      	ldr	r3, [pc, #156]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800871a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	2b01      	cmp	r3, #1
 8008722:	d114      	bne.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008724:	f7fa fb36 	bl	8002d94 <HAL_GetTick>
 8008728:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800872a:	e00a      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800872c:	f7fa fb32 	bl	8002d94 <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	f241 3288 	movw	r2, #5000	; 0x1388
 800873a:	4293      	cmp	r3, r2
 800873c:	d901      	bls.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	e034      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008742:	4b1d      	ldr	r3, [pc, #116]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008746:	f003 0302 	and.w	r3, r3, #2
 800874a:	2b00      	cmp	r3, #0
 800874c:	d0ee      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800875a:	d10d      	bne.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800875c:	4b16      	ldr	r3, [pc, #88]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800876c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008770:	4911      	ldr	r1, [pc, #68]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008772:	4313      	orrs	r3, r2
 8008774:	608b      	str	r3, [r1, #8]
 8008776:	e005      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8008778:	4b0f      	ldr	r3, [pc, #60]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	4a0e      	ldr	r2, [pc, #56]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800877e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008782:	6093      	str	r3, [r2, #8]
 8008784:	4b0c      	ldr	r3, [pc, #48]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008786:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008790:	4909      	ldr	r1, [pc, #36]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008792:	4313      	orrs	r3, r2
 8008794:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0308 	and.w	r3, r3, #8
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d003      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	7d1a      	ldrb	r2, [r3, #20]
 80087a6:	4b07      	ldr	r3, [pc, #28]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80087a8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3718      	adds	r7, #24
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	42470068 	.word	0x42470068
 80087b8:	40023800 	.word	0x40023800
 80087bc:	40007000 	.word	0x40007000
 80087c0:	42470e40 	.word	0x42470e40
 80087c4:	424711e0 	.word	0x424711e0

080087c8 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2203      	movs	r2, #3
 80087d4:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80087d6:	4b1c      	ldr	r3, [pc, #112]	; (8008848 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80087d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087dc:	099b      	lsrs	r3, r3, #6
 80087de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087e6:	4b18      	ldr	r3, [pc, #96]	; (8008848 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80087e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087ec:	0f1b      	lsrs	r3, r3, #28
 80087ee:	f003 0207 	and.w	r2, r3, #7
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 80087f6:	4b14      	ldr	r3, [pc, #80]	; (8008848 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80087f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8008804:	4b10      	ldr	r3, [pc, #64]	; (8008848 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800880c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800880e:	4b0e      	ldr	r3, [pc, #56]	; (8008848 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008812:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	431a      	orrs	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 800881e:	4b0a      	ldr	r3, [pc, #40]	; (8008848 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d103      	bne.n	8008834 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8008832:	e002      	b.n	800883a <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	751a      	strb	r2, [r3, #20]
}
 800883a:	bf00      	nop
 800883c:	3714      	adds	r7, #20
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	40023800 	.word	0x40023800

0800884c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008854:	2300      	movs	r3, #0
 8008856:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008858:	2300      	movs	r3, #0
 800885a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800885c:	2300      	movs	r3, #0
 800885e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008860:	2300      	movs	r3, #0
 8008862:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d140      	bne.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800886a:	4b24      	ldr	r3, [pc, #144]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d005      	beq.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d131      	bne.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008880:	4b1f      	ldr	r3, [pc, #124]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008882:	617b      	str	r3, [r7, #20]
          break;
 8008884:	e031      	b.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008886:	4b1d      	ldr	r3, [pc, #116]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800888e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008892:	d109      	bne.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008894:	4b19      	ldr	r3, [pc, #100]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800889a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800889e:	4a19      	ldr	r2, [pc, #100]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80088a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a4:	613b      	str	r3, [r7, #16]
 80088a6:	e008      	b.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80088a8:	4b14      	ldr	r3, [pc, #80]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80088aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088b2:	4a15      	ldr	r2, [pc, #84]	; (8008908 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80088b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088b8:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80088ba:	4b10      	ldr	r3, [pc, #64]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80088bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088c0:	099b      	lsrs	r3, r3, #6
 80088c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	fb02 f303 	mul.w	r3, r2, r3
 80088cc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80088ce:	4b0b      	ldr	r3, [pc, #44]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80088d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088d4:	0f1b      	lsrs	r3, r3, #28
 80088d6:	f003 0307 	and.w	r3, r3, #7
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e0:	617b      	str	r3, [r7, #20]
          break;
 80088e2:	e002      	b.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	617b      	str	r3, [r7, #20]
          break;
 80088e8:	bf00      	nop
        }
      }
      break;
 80088ea:	bf00      	nop
    }
  }
  return frequency;
 80088ec:	697b      	ldr	r3, [r7, #20]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	371c      	adds	r7, #28
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	40023800 	.word	0x40023800
 8008900:	00bb8000 	.word	0x00bb8000
 8008904:	007a1200 	.word	0x007a1200
 8008908:	00f42400 	.word	0x00f42400

0800890c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e03f      	b.n	800899e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b00      	cmp	r3, #0
 8008928:	d106      	bne.n	8008938 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7f9 fef0 	bl	8002718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2224      	movs	r2, #36	; 0x24
 800893c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68da      	ldr	r2, [r3, #12]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800894e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fcdf 	bl	8009314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	691a      	ldr	r2, [r3, #16]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008964:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	695a      	ldr	r2, [r3, #20]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008974:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68da      	ldr	r2, [r3, #12]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008984:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2220      	movs	r2, #32
 8008990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2220      	movs	r2, #32
 8008998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	4613      	mov	r3, r2
 80089b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b20      	cmp	r3, #32
 80089be:	d11d      	bne.n	80089fc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d002      	beq.n	80089cc <HAL_UART_Receive_IT+0x26>
 80089c6:	88fb      	ldrh	r3, [r7, #6]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d101      	bne.n	80089d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e016      	b.n	80089fe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d101      	bne.n	80089de <HAL_UART_Receive_IT+0x38>
 80089da:	2302      	movs	r3, #2
 80089dc:	e00f      	b.n	80089fe <HAL_UART_Receive_IT+0x58>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80089ec:	88fb      	ldrh	r3, [r7, #6]
 80089ee:	461a      	mov	r2, r3
 80089f0:	68b9      	ldr	r1, [r7, #8]
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f000 fab6 	bl	8008f64 <UART_Start_Receive_IT>
 80089f8:	4603      	mov	r3, r0
 80089fa:	e000      	b.n	80089fe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80089fc:	2302      	movs	r3, #2
  }
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
	...

08008a08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b0ba      	sub	sp, #232	; 0xe8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008a34:	2300      	movs	r3, #0
 8008a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a3e:	f003 030f 	and.w	r3, r3, #15
 8008a42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008a46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10f      	bne.n	8008a6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a52:	f003 0320 	and.w	r3, r3, #32
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d009      	beq.n	8008a6e <HAL_UART_IRQHandler+0x66>
 8008a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a5e:	f003 0320 	and.w	r3, r3, #32
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fb99 	bl	800919e <UART_Receive_IT>
      return;
 8008a6c:	e256      	b.n	8008f1c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008a6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f000 80de 	beq.w	8008c34 <HAL_UART_IRQHandler+0x22c>
 8008a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d106      	bne.n	8008a92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a88:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 80d1 	beq.w	8008c34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00b      	beq.n	8008ab6 <HAL_UART_IRQHandler+0xae>
 8008a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d005      	beq.n	8008ab6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aae:	f043 0201 	orr.w	r2, r3, #1
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aba:	f003 0304 	and.w	r3, r3, #4
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00b      	beq.n	8008ada <HAL_UART_IRQHandler+0xd2>
 8008ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d005      	beq.n	8008ada <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad2:	f043 0202 	orr.w	r2, r3, #2
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ade:	f003 0302 	and.w	r3, r3, #2
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00b      	beq.n	8008afe <HAL_UART_IRQHandler+0xf6>
 8008ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d005      	beq.n	8008afe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af6:	f043 0204 	orr.w	r2, r3, #4
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b02:	f003 0308 	and.w	r3, r3, #8
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d011      	beq.n	8008b2e <HAL_UART_IRQHandler+0x126>
 8008b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b0e:	f003 0320 	and.w	r3, r3, #32
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d105      	bne.n	8008b22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b1a:	f003 0301 	and.w	r3, r3, #1
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d005      	beq.n	8008b2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b26:	f043 0208 	orr.w	r2, r3, #8
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f000 81ed 	beq.w	8008f12 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b3c:	f003 0320 	and.w	r3, r3, #32
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d008      	beq.n	8008b56 <HAL_UART_IRQHandler+0x14e>
 8008b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b48:	f003 0320 	and.w	r3, r3, #32
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fb24 	bl	800919e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b60:	2b40      	cmp	r3, #64	; 0x40
 8008b62:	bf0c      	ite	eq
 8008b64:	2301      	moveq	r3, #1
 8008b66:	2300      	movne	r3, #0
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b72:	f003 0308 	and.w	r3, r3, #8
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d103      	bne.n	8008b82 <HAL_UART_IRQHandler+0x17a>
 8008b7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d04f      	beq.n	8008c22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fa2c 	bl	8008fe0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b92:	2b40      	cmp	r3, #64	; 0x40
 8008b94:	d141      	bne.n	8008c1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3314      	adds	r3, #20
 8008b9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ba4:	e853 3f00 	ldrex	r3, [r3]
 8008ba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008bac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	3314      	adds	r3, #20
 8008bbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008bc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008bce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008bd2:	e841 2300 	strex	r3, r2, [r1]
 8008bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008bda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1d9      	bne.n	8008b96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d013      	beq.n	8008c12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bee:	4a7d      	ldr	r2, [pc, #500]	; (8008de4 <HAL_UART_IRQHandler+0x3dc>)
 8008bf0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fa fbe2 	bl	80033c0 <HAL_DMA_Abort_IT>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d016      	beq.n	8008c30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c10:	e00e      	b.n	8008c30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f990 	bl	8008f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c18:	e00a      	b.n	8008c30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f98c 	bl	8008f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c20:	e006      	b.n	8008c30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f988 	bl	8008f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008c2e:	e170      	b.n	8008f12 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c30:	bf00      	nop
    return;
 8008c32:	e16e      	b.n	8008f12 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	f040 814a 	bne.w	8008ed2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c42:	f003 0310 	and.w	r3, r3, #16
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 8143 	beq.w	8008ed2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c50:	f003 0310 	and.w	r3, r3, #16
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f000 813c 	beq.w	8008ed2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	60bb      	str	r3, [r7, #8]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	60bb      	str	r3, [r7, #8]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	60bb      	str	r3, [r7, #8]
 8008c6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	695b      	ldr	r3, [r3, #20]
 8008c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c7a:	2b40      	cmp	r3, #64	; 0x40
 8008c7c:	f040 80b4 	bne.w	8008de8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f000 8140 	beq.w	8008f16 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	f080 8139 	bcs.w	8008f16 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008caa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cb6:	f000 8088 	beq.w	8008dca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	330c      	adds	r3, #12
 8008cc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008cc8:	e853 3f00 	ldrex	r3, [r3]
 8008ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008cd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	330c      	adds	r3, #12
 8008ce2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008ce6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008cf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008cf6:	e841 2300 	strex	r3, r2, [r1]
 8008cfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1d9      	bne.n	8008cba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3314      	adds	r3, #20
 8008d0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d10:	e853 3f00 	ldrex	r3, [r3]
 8008d14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d18:	f023 0301 	bic.w	r3, r3, #1
 8008d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3314      	adds	r3, #20
 8008d26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008d2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008d32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e1      	bne.n	8008d06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3314      	adds	r3, #20
 8008d48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	3314      	adds	r3, #20
 8008d62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d6e:	e841 2300 	strex	r3, r2, [r1]
 8008d72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1e3      	bne.n	8008d42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2220      	movs	r2, #32
 8008d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	330c      	adds	r3, #12
 8008d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d92:	e853 3f00 	ldrex	r3, [r3]
 8008d96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d9a:	f023 0310 	bic.w	r3, r3, #16
 8008d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	330c      	adds	r3, #12
 8008da8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008dac:	65ba      	str	r2, [r7, #88]	; 0x58
 8008dae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008db2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e3      	bne.n	8008d88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7fa fa8b 	bl	80032e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f8b6 	bl	8008f4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008de0:	e099      	b.n	8008f16 <HAL_UART_IRQHandler+0x50e>
 8008de2:	bf00      	nop
 8008de4:	080090a7 	.word	0x080090a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f000 808b 	beq.w	8008f1a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008e04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 8086 	beq.w	8008f1a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	330c      	adds	r3, #12
 8008e14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e18:	e853 3f00 	ldrex	r3, [r3]
 8008e1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	330c      	adds	r3, #12
 8008e2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008e32:	647a      	str	r2, [r7, #68]	; 0x44
 8008e34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e3a:	e841 2300 	strex	r3, r2, [r1]
 8008e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1e3      	bne.n	8008e0e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	3314      	adds	r3, #20
 8008e4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	e853 3f00 	ldrex	r3, [r3]
 8008e54:	623b      	str	r3, [r7, #32]
   return(result);
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	f023 0301 	bic.w	r3, r3, #1
 8008e5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3314      	adds	r3, #20
 8008e66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008e6a:	633a      	str	r2, [r7, #48]	; 0x30
 8008e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1e3      	bne.n	8008e46 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2220      	movs	r2, #32
 8008e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	330c      	adds	r3, #12
 8008e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	e853 3f00 	ldrex	r3, [r3]
 8008e9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f023 0310 	bic.w	r3, r3, #16
 8008ea2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	330c      	adds	r3, #12
 8008eac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008eb0:	61fa      	str	r2, [r7, #28]
 8008eb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb4:	69b9      	ldr	r1, [r7, #24]
 8008eb6:	69fa      	ldr	r2, [r7, #28]
 8008eb8:	e841 2300 	strex	r3, r2, [r1]
 8008ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1e3      	bne.n	8008e8c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ec4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ec8:	4619      	mov	r1, r3
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f83e 	bl	8008f4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ed0:	e023      	b.n	8008f1a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d009      	beq.n	8008ef2 <HAL_UART_IRQHandler+0x4ea>
 8008ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d003      	beq.n	8008ef2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f8ef 	bl	80090ce <UART_Transmit_IT>
    return;
 8008ef0:	e014      	b.n	8008f1c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00e      	beq.n	8008f1c <HAL_UART_IRQHandler+0x514>
 8008efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d008      	beq.n	8008f1c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f92f 	bl	800916e <UART_EndTransmit_IT>
    return;
 8008f10:	e004      	b.n	8008f1c <HAL_UART_IRQHandler+0x514>
    return;
 8008f12:	bf00      	nop
 8008f14:	e002      	b.n	8008f1c <HAL_UART_IRQHandler+0x514>
      return;
 8008f16:	bf00      	nop
 8008f18:	e000      	b.n	8008f1c <HAL_UART_IRQHandler+0x514>
      return;
 8008f1a:	bf00      	nop
  }
}
 8008f1c:	37e8      	adds	r7, #232	; 0xe8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop

08008f24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	4613      	mov	r3, r2
 8008f70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	88fa      	ldrh	r2, [r7, #6]
 8008f7c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	88fa      	ldrh	r2, [r7, #6]
 8008f82:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2222      	movs	r2, #34	; 0x22
 8008f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d007      	beq.n	8008fb2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68da      	ldr	r2, [r3, #12]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fb0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	695a      	ldr	r2, [r3, #20]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f042 0201 	orr.w	r2, r2, #1
 8008fc0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68da      	ldr	r2, [r3, #12]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f042 0220 	orr.w	r2, r2, #32
 8008fd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b095      	sub	sp, #84	; 0x54
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	330c      	adds	r3, #12
 8008fee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff2:	e853 3f00 	ldrex	r3, [r3]
 8008ff6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	330c      	adds	r3, #12
 8009006:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009008:	643a      	str	r2, [r7, #64]	; 0x40
 800900a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800900e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009010:	e841 2300 	strex	r3, r2, [r1]
 8009014:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1e5      	bne.n	8008fe8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3314      	adds	r3, #20
 8009022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009024:	6a3b      	ldr	r3, [r7, #32]
 8009026:	e853 3f00 	ldrex	r3, [r3]
 800902a:	61fb      	str	r3, [r7, #28]
   return(result);
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	f023 0301 	bic.w	r3, r3, #1
 8009032:	64bb      	str	r3, [r7, #72]	; 0x48
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	3314      	adds	r3, #20
 800903a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800903c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800903e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009044:	e841 2300 	strex	r3, r2, [r1]
 8009048:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1e5      	bne.n	800901c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009054:	2b01      	cmp	r3, #1
 8009056:	d119      	bne.n	800908c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	330c      	adds	r3, #12
 800905e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	e853 3f00 	ldrex	r3, [r3]
 8009066:	60bb      	str	r3, [r7, #8]
   return(result);
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	f023 0310 	bic.w	r3, r3, #16
 800906e:	647b      	str	r3, [r7, #68]	; 0x44
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	330c      	adds	r3, #12
 8009076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009078:	61ba      	str	r2, [r7, #24]
 800907a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907c:	6979      	ldr	r1, [r7, #20]
 800907e:	69ba      	ldr	r2, [r7, #24]
 8009080:	e841 2300 	strex	r3, r2, [r1]
 8009084:	613b      	str	r3, [r7, #16]
   return(result);
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1e5      	bne.n	8009058 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2220      	movs	r2, #32
 8009090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	631a      	str	r2, [r3, #48]	; 0x30
}
 800909a:	bf00      	nop
 800909c:	3754      	adds	r7, #84	; 0x54
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr

080090a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b084      	sub	sp, #16
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f7ff ff39 	bl	8008f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090c6:	bf00      	nop
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80090ce:	b480      	push	{r7}
 80090d0:	b085      	sub	sp, #20
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	2b21      	cmp	r3, #33	; 0x21
 80090e0:	d13e      	bne.n	8009160 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090ea:	d114      	bne.n	8009116 <UART_Transmit_IT+0x48>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d110      	bne.n	8009116 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6a1b      	ldr	r3, [r3, #32]
 80090f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	881b      	ldrh	r3, [r3, #0]
 80090fe:	461a      	mov	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009108:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a1b      	ldr	r3, [r3, #32]
 800910e:	1c9a      	adds	r2, r3, #2
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	621a      	str	r2, [r3, #32]
 8009114:	e008      	b.n	8009128 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a1b      	ldr	r3, [r3, #32]
 800911a:	1c59      	adds	r1, r3, #1
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	6211      	str	r1, [r2, #32]
 8009120:	781a      	ldrb	r2, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800912c:	b29b      	uxth	r3, r3
 800912e:	3b01      	subs	r3, #1
 8009130:	b29b      	uxth	r3, r3
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	4619      	mov	r1, r3
 8009136:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009138:	2b00      	cmp	r3, #0
 800913a:	d10f      	bne.n	800915c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68da      	ldr	r2, [r3, #12]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800914a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68da      	ldr	r2, [r3, #12]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800915a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	e000      	b.n	8009162 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009160:	2302      	movs	r3, #2
  }
}
 8009162:	4618      	mov	r0, r3
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b082      	sub	sp, #8
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68da      	ldr	r2, [r3, #12]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009184:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2220      	movs	r2, #32
 800918a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7ff fec8 	bl	8008f24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b08c      	sub	sp, #48	; 0x30
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	2b22      	cmp	r3, #34	; 0x22
 80091b0:	f040 80ab 	bne.w	800930a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091bc:	d117      	bne.n	80091ee <UART_Receive_IT+0x50>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d113      	bne.n	80091ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80091c6:	2300      	movs	r3, #0
 80091c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091dc:	b29a      	uxth	r2, r3
 80091de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e6:	1c9a      	adds	r2, r3, #2
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	629a      	str	r2, [r3, #40]	; 0x28
 80091ec:	e026      	b.n	800923c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80091f4:	2300      	movs	r3, #0
 80091f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009200:	d007      	beq.n	8009212 <UART_Receive_IT+0x74>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d10a      	bne.n	8009220 <UART_Receive_IT+0x82>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d106      	bne.n	8009220 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	b2da      	uxtb	r2, r3
 800921a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921c:	701a      	strb	r2, [r3, #0]
 800921e:	e008      	b.n	8009232 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	b2db      	uxtb	r3, r3
 8009228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800922c:	b2da      	uxtb	r2, r3
 800922e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009230:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009236:	1c5a      	adds	r2, r3, #1
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009240:	b29b      	uxth	r3, r3
 8009242:	3b01      	subs	r3, #1
 8009244:	b29b      	uxth	r3, r3
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	4619      	mov	r1, r3
 800924a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800924c:	2b00      	cmp	r3, #0
 800924e:	d15a      	bne.n	8009306 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68da      	ldr	r2, [r3, #12]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f022 0220 	bic.w	r2, r2, #32
 800925e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68da      	ldr	r2, [r3, #12]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800926e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	695a      	ldr	r2, [r3, #20]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f022 0201 	bic.w	r2, r2, #1
 800927e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2220      	movs	r2, #32
 8009284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928c:	2b01      	cmp	r3, #1
 800928e:	d135      	bne.n	80092fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	330c      	adds	r3, #12
 800929c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	e853 3f00 	ldrex	r3, [r3]
 80092a4:	613b      	str	r3, [r7, #16]
   return(result);
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	f023 0310 	bic.w	r3, r3, #16
 80092ac:	627b      	str	r3, [r7, #36]	; 0x24
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	330c      	adds	r3, #12
 80092b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092b6:	623a      	str	r2, [r7, #32]
 80092b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ba:	69f9      	ldr	r1, [r7, #28]
 80092bc:	6a3a      	ldr	r2, [r7, #32]
 80092be:	e841 2300 	strex	r3, r2, [r1]
 80092c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1e5      	bne.n	8009296 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 0310 	and.w	r3, r3, #16
 80092d4:	2b10      	cmp	r3, #16
 80092d6:	d10a      	bne.n	80092ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80092d8:	2300      	movs	r3, #0
 80092da:	60fb      	str	r3, [r7, #12]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	60fb      	str	r3, [r7, #12]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	60fb      	str	r3, [r7, #12]
 80092ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7ff fe29 	bl	8008f4c <HAL_UARTEx_RxEventCallback>
 80092fa:	e002      	b.n	8009302 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f7f8 fda1 	bl	8001e44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	e002      	b.n	800930c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	e000      	b.n	800930c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800930a:	2302      	movs	r3, #2
  }
}
 800930c:	4618      	mov	r0, r3
 800930e:	3730      	adds	r7, #48	; 0x30
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009318:	b0c0      	sub	sp, #256	; 0x100
 800931a:	af00      	add	r7, sp, #0
 800931c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800932c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009330:	68d9      	ldr	r1, [r3, #12]
 8009332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	ea40 0301 	orr.w	r3, r0, r1
 800933c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800933e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009342:	689a      	ldr	r2, [r3, #8]
 8009344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	431a      	orrs	r2, r3
 800934c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009350:	695b      	ldr	r3, [r3, #20]
 8009352:	431a      	orrs	r2, r3
 8009354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009358:	69db      	ldr	r3, [r3, #28]
 800935a:	4313      	orrs	r3, r2
 800935c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800936c:	f021 010c 	bic.w	r1, r1, #12
 8009370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800937a:	430b      	orrs	r3, r1
 800937c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800937e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	695b      	ldr	r3, [r3, #20]
 8009386:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800938a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800938e:	6999      	ldr	r1, [r3, #24]
 8009390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	ea40 0301 	orr.w	r3, r0, r1
 800939a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800939c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	4b8f      	ldr	r3, [pc, #572]	; (80095e0 <UART_SetConfig+0x2cc>)
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d005      	beq.n	80093b4 <UART_SetConfig+0xa0>
 80093a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	4b8d      	ldr	r3, [pc, #564]	; (80095e4 <UART_SetConfig+0x2d0>)
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d104      	bne.n	80093be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80093b4:	f7ff f904 	bl	80085c0 <HAL_RCC_GetPCLK2Freq>
 80093b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80093bc:	e003      	b.n	80093c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80093be:	f7ff f8eb 	bl	8008598 <HAL_RCC_GetPCLK1Freq>
 80093c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ca:	69db      	ldr	r3, [r3, #28]
 80093cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093d0:	f040 810c 	bne.w	80095ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093d8:	2200      	movs	r2, #0
 80093da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80093de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80093e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80093e6:	4622      	mov	r2, r4
 80093e8:	462b      	mov	r3, r5
 80093ea:	1891      	adds	r1, r2, r2
 80093ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80093ee:	415b      	adcs	r3, r3
 80093f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80093f6:	4621      	mov	r1, r4
 80093f8:	eb12 0801 	adds.w	r8, r2, r1
 80093fc:	4629      	mov	r1, r5
 80093fe:	eb43 0901 	adc.w	r9, r3, r1
 8009402:	f04f 0200 	mov.w	r2, #0
 8009406:	f04f 0300 	mov.w	r3, #0
 800940a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800940e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009412:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009416:	4690      	mov	r8, r2
 8009418:	4699      	mov	r9, r3
 800941a:	4623      	mov	r3, r4
 800941c:	eb18 0303 	adds.w	r3, r8, r3
 8009420:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009424:	462b      	mov	r3, r5
 8009426:	eb49 0303 	adc.w	r3, r9, r3
 800942a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800942e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800943a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800943e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009442:	460b      	mov	r3, r1
 8009444:	18db      	adds	r3, r3, r3
 8009446:	653b      	str	r3, [r7, #80]	; 0x50
 8009448:	4613      	mov	r3, r2
 800944a:	eb42 0303 	adc.w	r3, r2, r3
 800944e:	657b      	str	r3, [r7, #84]	; 0x54
 8009450:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009454:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009458:	f7f6 febe 	bl	80001d8 <__aeabi_uldivmod>
 800945c:	4602      	mov	r2, r0
 800945e:	460b      	mov	r3, r1
 8009460:	4b61      	ldr	r3, [pc, #388]	; (80095e8 <UART_SetConfig+0x2d4>)
 8009462:	fba3 2302 	umull	r2, r3, r3, r2
 8009466:	095b      	lsrs	r3, r3, #5
 8009468:	011c      	lsls	r4, r3, #4
 800946a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800946e:	2200      	movs	r2, #0
 8009470:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009474:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009478:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800947c:	4642      	mov	r2, r8
 800947e:	464b      	mov	r3, r9
 8009480:	1891      	adds	r1, r2, r2
 8009482:	64b9      	str	r1, [r7, #72]	; 0x48
 8009484:	415b      	adcs	r3, r3
 8009486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009488:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800948c:	4641      	mov	r1, r8
 800948e:	eb12 0a01 	adds.w	sl, r2, r1
 8009492:	4649      	mov	r1, r9
 8009494:	eb43 0b01 	adc.w	fp, r3, r1
 8009498:	f04f 0200 	mov.w	r2, #0
 800949c:	f04f 0300 	mov.w	r3, #0
 80094a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80094a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80094a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094ac:	4692      	mov	sl, r2
 80094ae:	469b      	mov	fp, r3
 80094b0:	4643      	mov	r3, r8
 80094b2:	eb1a 0303 	adds.w	r3, sl, r3
 80094b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094ba:	464b      	mov	r3, r9
 80094bc:	eb4b 0303 	adc.w	r3, fp, r3
 80094c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80094d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80094d8:	460b      	mov	r3, r1
 80094da:	18db      	adds	r3, r3, r3
 80094dc:	643b      	str	r3, [r7, #64]	; 0x40
 80094de:	4613      	mov	r3, r2
 80094e0:	eb42 0303 	adc.w	r3, r2, r3
 80094e4:	647b      	str	r3, [r7, #68]	; 0x44
 80094e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80094ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80094ee:	f7f6 fe73 	bl	80001d8 <__aeabi_uldivmod>
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	4611      	mov	r1, r2
 80094f8:	4b3b      	ldr	r3, [pc, #236]	; (80095e8 <UART_SetConfig+0x2d4>)
 80094fa:	fba3 2301 	umull	r2, r3, r3, r1
 80094fe:	095b      	lsrs	r3, r3, #5
 8009500:	2264      	movs	r2, #100	; 0x64
 8009502:	fb02 f303 	mul.w	r3, r2, r3
 8009506:	1acb      	subs	r3, r1, r3
 8009508:	00db      	lsls	r3, r3, #3
 800950a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800950e:	4b36      	ldr	r3, [pc, #216]	; (80095e8 <UART_SetConfig+0x2d4>)
 8009510:	fba3 2302 	umull	r2, r3, r3, r2
 8009514:	095b      	lsrs	r3, r3, #5
 8009516:	005b      	lsls	r3, r3, #1
 8009518:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800951c:	441c      	add	r4, r3
 800951e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009522:	2200      	movs	r2, #0
 8009524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009528:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800952c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009530:	4642      	mov	r2, r8
 8009532:	464b      	mov	r3, r9
 8009534:	1891      	adds	r1, r2, r2
 8009536:	63b9      	str	r1, [r7, #56]	; 0x38
 8009538:	415b      	adcs	r3, r3
 800953a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800953c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009540:	4641      	mov	r1, r8
 8009542:	1851      	adds	r1, r2, r1
 8009544:	6339      	str	r1, [r7, #48]	; 0x30
 8009546:	4649      	mov	r1, r9
 8009548:	414b      	adcs	r3, r1
 800954a:	637b      	str	r3, [r7, #52]	; 0x34
 800954c:	f04f 0200 	mov.w	r2, #0
 8009550:	f04f 0300 	mov.w	r3, #0
 8009554:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009558:	4659      	mov	r1, fp
 800955a:	00cb      	lsls	r3, r1, #3
 800955c:	4651      	mov	r1, sl
 800955e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009562:	4651      	mov	r1, sl
 8009564:	00ca      	lsls	r2, r1, #3
 8009566:	4610      	mov	r0, r2
 8009568:	4619      	mov	r1, r3
 800956a:	4603      	mov	r3, r0
 800956c:	4642      	mov	r2, r8
 800956e:	189b      	adds	r3, r3, r2
 8009570:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009574:	464b      	mov	r3, r9
 8009576:	460a      	mov	r2, r1
 8009578:	eb42 0303 	adc.w	r3, r2, r3
 800957c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800958c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009590:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009594:	460b      	mov	r3, r1
 8009596:	18db      	adds	r3, r3, r3
 8009598:	62bb      	str	r3, [r7, #40]	; 0x28
 800959a:	4613      	mov	r3, r2
 800959c:	eb42 0303 	adc.w	r3, r2, r3
 80095a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80095aa:	f7f6 fe15 	bl	80001d8 <__aeabi_uldivmod>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	4b0d      	ldr	r3, [pc, #52]	; (80095e8 <UART_SetConfig+0x2d4>)
 80095b4:	fba3 1302 	umull	r1, r3, r3, r2
 80095b8:	095b      	lsrs	r3, r3, #5
 80095ba:	2164      	movs	r1, #100	; 0x64
 80095bc:	fb01 f303 	mul.w	r3, r1, r3
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	00db      	lsls	r3, r3, #3
 80095c4:	3332      	adds	r3, #50	; 0x32
 80095c6:	4a08      	ldr	r2, [pc, #32]	; (80095e8 <UART_SetConfig+0x2d4>)
 80095c8:	fba2 2303 	umull	r2, r3, r2, r3
 80095cc:	095b      	lsrs	r3, r3, #5
 80095ce:	f003 0207 	and.w	r2, r3, #7
 80095d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4422      	add	r2, r4
 80095da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80095dc:	e106      	b.n	80097ec <UART_SetConfig+0x4d8>
 80095de:	bf00      	nop
 80095e0:	40011000 	.word	0x40011000
 80095e4:	40011400 	.word	0x40011400
 80095e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095f0:	2200      	movs	r2, #0
 80095f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80095f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80095fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80095fe:	4642      	mov	r2, r8
 8009600:	464b      	mov	r3, r9
 8009602:	1891      	adds	r1, r2, r2
 8009604:	6239      	str	r1, [r7, #32]
 8009606:	415b      	adcs	r3, r3
 8009608:	627b      	str	r3, [r7, #36]	; 0x24
 800960a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800960e:	4641      	mov	r1, r8
 8009610:	1854      	adds	r4, r2, r1
 8009612:	4649      	mov	r1, r9
 8009614:	eb43 0501 	adc.w	r5, r3, r1
 8009618:	f04f 0200 	mov.w	r2, #0
 800961c:	f04f 0300 	mov.w	r3, #0
 8009620:	00eb      	lsls	r3, r5, #3
 8009622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009626:	00e2      	lsls	r2, r4, #3
 8009628:	4614      	mov	r4, r2
 800962a:	461d      	mov	r5, r3
 800962c:	4643      	mov	r3, r8
 800962e:	18e3      	adds	r3, r4, r3
 8009630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009634:	464b      	mov	r3, r9
 8009636:	eb45 0303 	adc.w	r3, r5, r3
 800963a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800963e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800964a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800964e:	f04f 0200 	mov.w	r2, #0
 8009652:	f04f 0300 	mov.w	r3, #0
 8009656:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800965a:	4629      	mov	r1, r5
 800965c:	008b      	lsls	r3, r1, #2
 800965e:	4621      	mov	r1, r4
 8009660:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009664:	4621      	mov	r1, r4
 8009666:	008a      	lsls	r2, r1, #2
 8009668:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800966c:	f7f6 fdb4 	bl	80001d8 <__aeabi_uldivmod>
 8009670:	4602      	mov	r2, r0
 8009672:	460b      	mov	r3, r1
 8009674:	4b60      	ldr	r3, [pc, #384]	; (80097f8 <UART_SetConfig+0x4e4>)
 8009676:	fba3 2302 	umull	r2, r3, r3, r2
 800967a:	095b      	lsrs	r3, r3, #5
 800967c:	011c      	lsls	r4, r3, #4
 800967e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009682:	2200      	movs	r2, #0
 8009684:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009688:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800968c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009690:	4642      	mov	r2, r8
 8009692:	464b      	mov	r3, r9
 8009694:	1891      	adds	r1, r2, r2
 8009696:	61b9      	str	r1, [r7, #24]
 8009698:	415b      	adcs	r3, r3
 800969a:	61fb      	str	r3, [r7, #28]
 800969c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80096a0:	4641      	mov	r1, r8
 80096a2:	1851      	adds	r1, r2, r1
 80096a4:	6139      	str	r1, [r7, #16]
 80096a6:	4649      	mov	r1, r9
 80096a8:	414b      	adcs	r3, r1
 80096aa:	617b      	str	r3, [r7, #20]
 80096ac:	f04f 0200 	mov.w	r2, #0
 80096b0:	f04f 0300 	mov.w	r3, #0
 80096b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80096b8:	4659      	mov	r1, fp
 80096ba:	00cb      	lsls	r3, r1, #3
 80096bc:	4651      	mov	r1, sl
 80096be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096c2:	4651      	mov	r1, sl
 80096c4:	00ca      	lsls	r2, r1, #3
 80096c6:	4610      	mov	r0, r2
 80096c8:	4619      	mov	r1, r3
 80096ca:	4603      	mov	r3, r0
 80096cc:	4642      	mov	r2, r8
 80096ce:	189b      	adds	r3, r3, r2
 80096d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80096d4:	464b      	mov	r3, r9
 80096d6:	460a      	mov	r2, r1
 80096d8:	eb42 0303 	adc.w	r3, r2, r3
 80096dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80096ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80096ec:	f04f 0200 	mov.w	r2, #0
 80096f0:	f04f 0300 	mov.w	r3, #0
 80096f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80096f8:	4649      	mov	r1, r9
 80096fa:	008b      	lsls	r3, r1, #2
 80096fc:	4641      	mov	r1, r8
 80096fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009702:	4641      	mov	r1, r8
 8009704:	008a      	lsls	r2, r1, #2
 8009706:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800970a:	f7f6 fd65 	bl	80001d8 <__aeabi_uldivmod>
 800970e:	4602      	mov	r2, r0
 8009710:	460b      	mov	r3, r1
 8009712:	4611      	mov	r1, r2
 8009714:	4b38      	ldr	r3, [pc, #224]	; (80097f8 <UART_SetConfig+0x4e4>)
 8009716:	fba3 2301 	umull	r2, r3, r3, r1
 800971a:	095b      	lsrs	r3, r3, #5
 800971c:	2264      	movs	r2, #100	; 0x64
 800971e:	fb02 f303 	mul.w	r3, r2, r3
 8009722:	1acb      	subs	r3, r1, r3
 8009724:	011b      	lsls	r3, r3, #4
 8009726:	3332      	adds	r3, #50	; 0x32
 8009728:	4a33      	ldr	r2, [pc, #204]	; (80097f8 <UART_SetConfig+0x4e4>)
 800972a:	fba2 2303 	umull	r2, r3, r2, r3
 800972e:	095b      	lsrs	r3, r3, #5
 8009730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009734:	441c      	add	r4, r3
 8009736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800973a:	2200      	movs	r2, #0
 800973c:	673b      	str	r3, [r7, #112]	; 0x70
 800973e:	677a      	str	r2, [r7, #116]	; 0x74
 8009740:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009744:	4642      	mov	r2, r8
 8009746:	464b      	mov	r3, r9
 8009748:	1891      	adds	r1, r2, r2
 800974a:	60b9      	str	r1, [r7, #8]
 800974c:	415b      	adcs	r3, r3
 800974e:	60fb      	str	r3, [r7, #12]
 8009750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009754:	4641      	mov	r1, r8
 8009756:	1851      	adds	r1, r2, r1
 8009758:	6039      	str	r1, [r7, #0]
 800975a:	4649      	mov	r1, r9
 800975c:	414b      	adcs	r3, r1
 800975e:	607b      	str	r3, [r7, #4]
 8009760:	f04f 0200 	mov.w	r2, #0
 8009764:	f04f 0300 	mov.w	r3, #0
 8009768:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800976c:	4659      	mov	r1, fp
 800976e:	00cb      	lsls	r3, r1, #3
 8009770:	4651      	mov	r1, sl
 8009772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009776:	4651      	mov	r1, sl
 8009778:	00ca      	lsls	r2, r1, #3
 800977a:	4610      	mov	r0, r2
 800977c:	4619      	mov	r1, r3
 800977e:	4603      	mov	r3, r0
 8009780:	4642      	mov	r2, r8
 8009782:	189b      	adds	r3, r3, r2
 8009784:	66bb      	str	r3, [r7, #104]	; 0x68
 8009786:	464b      	mov	r3, r9
 8009788:	460a      	mov	r2, r1
 800978a:	eb42 0303 	adc.w	r3, r2, r3
 800978e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	663b      	str	r3, [r7, #96]	; 0x60
 800979a:	667a      	str	r2, [r7, #100]	; 0x64
 800979c:	f04f 0200 	mov.w	r2, #0
 80097a0:	f04f 0300 	mov.w	r3, #0
 80097a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80097a8:	4649      	mov	r1, r9
 80097aa:	008b      	lsls	r3, r1, #2
 80097ac:	4641      	mov	r1, r8
 80097ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097b2:	4641      	mov	r1, r8
 80097b4:	008a      	lsls	r2, r1, #2
 80097b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80097ba:	f7f6 fd0d 	bl	80001d8 <__aeabi_uldivmod>
 80097be:	4602      	mov	r2, r0
 80097c0:	460b      	mov	r3, r1
 80097c2:	4b0d      	ldr	r3, [pc, #52]	; (80097f8 <UART_SetConfig+0x4e4>)
 80097c4:	fba3 1302 	umull	r1, r3, r3, r2
 80097c8:	095b      	lsrs	r3, r3, #5
 80097ca:	2164      	movs	r1, #100	; 0x64
 80097cc:	fb01 f303 	mul.w	r3, r1, r3
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	011b      	lsls	r3, r3, #4
 80097d4:	3332      	adds	r3, #50	; 0x32
 80097d6:	4a08      	ldr	r2, [pc, #32]	; (80097f8 <UART_SetConfig+0x4e4>)
 80097d8:	fba2 2303 	umull	r2, r3, r2, r3
 80097dc:	095b      	lsrs	r3, r3, #5
 80097de:	f003 020f 	and.w	r2, r3, #15
 80097e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4422      	add	r2, r4
 80097ea:	609a      	str	r2, [r3, #8]
}
 80097ec:	bf00      	nop
 80097ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80097f2:	46bd      	mov	sp, r7
 80097f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097f8:	51eb851f 	.word	0x51eb851f

080097fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097fc:	b084      	sub	sp, #16
 80097fe:	b580      	push	{r7, lr}
 8009800:	b084      	sub	sp, #16
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	f107 001c 	add.w	r0, r7, #28
 800980a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800980e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009810:	2b01      	cmp	r3, #1
 8009812:	d122      	bne.n	800985a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009818:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800983c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800983e:	2b01      	cmp	r3, #1
 8009840:	d105      	bne.n	800984e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 f9c0 	bl	8009bd4 <USB_CoreReset>
 8009854:	4603      	mov	r3, r0
 8009856:	73fb      	strb	r3, [r7, #15]
 8009858:	e01a      	b.n	8009890 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f9b4 	bl	8009bd4 <USB_CoreReset>
 800986c:	4603      	mov	r3, r0
 800986e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009872:	2b00      	cmp	r3, #0
 8009874:	d106      	bne.n	8009884 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	639a      	str	r2, [r3, #56]	; 0x38
 8009882:	e005      	b.n	8009890 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009888:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009892:	2b01      	cmp	r3, #1
 8009894:	d10b      	bne.n	80098ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	f043 0206 	orr.w	r2, r3, #6
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	f043 0220 	orr.w	r2, r3, #32
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098ba:	b004      	add	sp, #16
 80098bc:	4770      	bx	lr

080098be <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80098be:	b480      	push	{r7}
 80098c0:	b083      	sub	sp, #12
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	f043 0201 	orr.w	r2, r3, #1
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	f023 0201 	bic.w	r2, r3, #1
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	460b      	mov	r3, r1
 800990c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800990e:	2300      	movs	r3, #0
 8009910:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800991e:	78fb      	ldrb	r3, [r7, #3]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d115      	bne.n	8009950 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009930:	2001      	movs	r0, #1
 8009932:	f7f9 fa3b 	bl	8002dac <HAL_Delay>
      ms++;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	3301      	adds	r3, #1
 800993a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f93a 	bl	8009bb6 <USB_GetMode>
 8009942:	4603      	mov	r3, r0
 8009944:	2b01      	cmp	r3, #1
 8009946:	d01e      	beq.n	8009986 <USB_SetCurrentMode+0x84>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2b31      	cmp	r3, #49	; 0x31
 800994c:	d9f0      	bls.n	8009930 <USB_SetCurrentMode+0x2e>
 800994e:	e01a      	b.n	8009986 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009950:	78fb      	ldrb	r3, [r7, #3]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d115      	bne.n	8009982 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009962:	2001      	movs	r0, #1
 8009964:	f7f9 fa22 	bl	8002dac <HAL_Delay>
      ms++;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	3301      	adds	r3, #1
 800996c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f921 	bl	8009bb6 <USB_GetMode>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d005      	beq.n	8009986 <USB_SetCurrentMode+0x84>
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2b31      	cmp	r3, #49	; 0x31
 800997e:	d9f0      	bls.n	8009962 <USB_SetCurrentMode+0x60>
 8009980:	e001      	b.n	8009986 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e005      	b.n	8009992 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b32      	cmp	r3, #50	; 0x32
 800998a:	d101      	bne.n	8009990 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	e000      	b.n	8009992 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
	...

0800999c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80099a6:	2300      	movs	r3, #0
 80099a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	3301      	adds	r3, #1
 80099ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	4a13      	ldr	r2, [pc, #76]	; (8009a00 <USB_FlushTxFifo+0x64>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d901      	bls.n	80099bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	e01b      	b.n	80099f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	daf2      	bge.n	80099aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80099c4:	2300      	movs	r3, #0
 80099c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	019b      	lsls	r3, r3, #6
 80099cc:	f043 0220 	orr.w	r2, r3, #32
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	3301      	adds	r3, #1
 80099d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	4a08      	ldr	r2, [pc, #32]	; (8009a00 <USB_FlushTxFifo+0x64>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d901      	bls.n	80099e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e006      	b.n	80099f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	f003 0320 	and.w	r3, r3, #32
 80099ee:	2b20      	cmp	r3, #32
 80099f0:	d0f0      	beq.n	80099d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3714      	adds	r7, #20
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	00030d40 	.word	0x00030d40

08009a04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	3301      	adds	r3, #1
 8009a14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	4a11      	ldr	r2, [pc, #68]	; (8009a60 <USB_FlushRxFifo+0x5c>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d901      	bls.n	8009a22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	e018      	b.n	8009a54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	daf2      	bge.n	8009a10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2210      	movs	r2, #16
 8009a32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	3301      	adds	r3, #1
 8009a38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	4a08      	ldr	r2, [pc, #32]	; (8009a60 <USB_FlushRxFifo+0x5c>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d901      	bls.n	8009a46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	e006      	b.n	8009a54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	f003 0310 	and.w	r3, r3, #16
 8009a4e:	2b10      	cmp	r3, #16
 8009a50:	d0f0      	beq.n	8009a34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3714      	adds	r7, #20
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr
 8009a60:	00030d40 	.word	0x00030d40

08009a64 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b089      	sub	sp, #36	; 0x24
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	4611      	mov	r1, r2
 8009a70:	461a      	mov	r2, r3
 8009a72:	460b      	mov	r3, r1
 8009a74:	71fb      	strb	r3, [r7, #7]
 8009a76:	4613      	mov	r3, r2
 8009a78:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009a82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d123      	bne.n	8009ad2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009a8a:	88bb      	ldrh	r3, [r7, #4]
 8009a8c:	3303      	adds	r3, #3
 8009a8e:	089b      	lsrs	r3, r3, #2
 8009a90:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009a92:	2300      	movs	r3, #0
 8009a94:	61bb      	str	r3, [r7, #24]
 8009a96:	e018      	b.n	8009aca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009a98:	79fb      	ldrb	r3, [r7, #7]
 8009a9a:	031a      	lsls	r2, r3, #12
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	4413      	add	r3, r2
 8009aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	3301      	adds	r3, #1
 8009ab0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	3301      	adds	r3, #1
 8009abc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	61bb      	str	r3, [r7, #24]
 8009aca:	69ba      	ldr	r2, [r7, #24]
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d3e2      	bcc.n	8009a98 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3724      	adds	r7, #36	; 0x24
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b08b      	sub	sp, #44	; 0x2c
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	4613      	mov	r3, r2
 8009aec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009af6:	88fb      	ldrh	r3, [r7, #6]
 8009af8:	089b      	lsrs	r3, r3, #2
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009afe:	88fb      	ldrh	r3, [r7, #6]
 8009b00:	f003 0303 	and.w	r3, r3, #3
 8009b04:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009b06:	2300      	movs	r3, #0
 8009b08:	623b      	str	r3, [r7, #32]
 8009b0a:	e014      	b.n	8009b36 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b16:	601a      	str	r2, [r3, #0]
    pDest++;
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b20:	3301      	adds	r3, #1
 8009b22:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	3301      	adds	r3, #1
 8009b28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009b30:	6a3b      	ldr	r3, [r7, #32]
 8009b32:	3301      	adds	r3, #1
 8009b34:	623b      	str	r3, [r7, #32]
 8009b36:	6a3a      	ldr	r2, [r7, #32]
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d3e6      	bcc.n	8009b0c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009b3e:	8bfb      	ldrh	r3, [r7, #30]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d01e      	beq.n	8009b82 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009b44:	2300      	movs	r3, #0
 8009b46:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b4e:	461a      	mov	r2, r3
 8009b50:	f107 0310 	add.w	r3, r7, #16
 8009b54:	6812      	ldr	r2, [r2, #0]
 8009b56:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	00db      	lsls	r3, r3, #3
 8009b60:	fa22 f303 	lsr.w	r3, r2, r3
 8009b64:	b2da      	uxtb	r2, r3
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	701a      	strb	r2, [r3, #0]
      i++;
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	3301      	adds	r3, #1
 8009b74:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009b76:	8bfb      	ldrh	r3, [r7, #30]
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009b7c:	8bfb      	ldrh	r3, [r7, #30]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1ea      	bne.n	8009b58 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	372c      	adds	r7, #44	; 0x2c
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	695b      	ldr	r3, [r3, #20]
 8009b9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	699b      	ldr	r3, [r3, #24]
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3714      	adds	r7, #20
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr

08009bb6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b083      	sub	sp, #12
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	695b      	ldr	r3, [r3, #20]
 8009bc2:	f003 0301 	and.w	r3, r3, #1
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	370c      	adds	r7, #12
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
	...

08009bd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	3301      	adds	r3, #1
 8009be4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	4a13      	ldr	r2, [pc, #76]	; (8009c38 <USB_CoreReset+0x64>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d901      	bls.n	8009bf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	e01b      	b.n	8009c2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	daf2      	bge.n	8009be0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	691b      	ldr	r3, [r3, #16]
 8009c02:	f043 0201 	orr.w	r2, r3, #1
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	4a09      	ldr	r2, [pc, #36]	; (8009c38 <USB_CoreReset+0x64>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d901      	bls.n	8009c1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	e006      	b.n	8009c2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	f003 0301 	and.w	r3, r3, #1
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d0f0      	beq.n	8009c0a <USB_CoreReset+0x36>

  return HAL_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	00030d40 	.word	0x00030d40

08009c3c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c3c:	b084      	sub	sp, #16
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b086      	sub	sp, #24
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	2300      	movs	r3, #0
 8009c60:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c72:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c7e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d018      	beq.n	8009cc4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d10a      	bne.n	8009cae <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ca6:	f043 0304 	orr.w	r3, r3, #4
 8009caa:	6013      	str	r3, [r2, #0]
 8009cac:	e014      	b.n	8009cd8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009cbc:	f023 0304 	bic.w	r3, r3, #4
 8009cc0:	6013      	str	r3, [r2, #0]
 8009cc2:	e009      	b.n	8009cd8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009cd2:	f023 0304 	bic.w	r3, r3, #4
 8009cd6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009cd8:	2110      	movs	r1, #16
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f7ff fe5e 	bl	800999c <USB_FlushTxFifo>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d001      	beq.n	8009cea <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f7ff fe8a 	bl	8009a04 <USB_FlushRxFifo>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	613b      	str	r3, [r7, #16]
 8009cfe:	e015      	b.n	8009d2c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	015a      	lsls	r2, r3, #5
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	4413      	add	r3, r2
 8009d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d12:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	015a      	lsls	r2, r3, #5
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d20:	461a      	mov	r2, r3
 8009d22:	2300      	movs	r3, #0
 8009d24:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	613b      	str	r3, [r7, #16]
 8009d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2e:	693a      	ldr	r2, [r7, #16]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d3e5      	bcc.n	8009d00 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d40:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00b      	beq.n	8009d66 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d54:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a13      	ldr	r2, [pc, #76]	; (8009da8 <USB_HostInit+0x16c>)
 8009d5a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a13      	ldr	r2, [pc, #76]	; (8009dac <USB_HostInit+0x170>)
 8009d60:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009d64:	e009      	b.n	8009d7a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2280      	movs	r2, #128	; 0x80
 8009d6a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a10      	ldr	r2, [pc, #64]	; (8009db0 <USB_HostInit+0x174>)
 8009d70:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a0f      	ldr	r2, [pc, #60]	; (8009db4 <USB_HostInit+0x178>)
 8009d76:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d105      	bne.n	8009d8c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	f043 0210 	orr.w	r2, r3, #16
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	699a      	ldr	r2, [r3, #24]
 8009d90:	4b09      	ldr	r3, [pc, #36]	; (8009db8 <USB_HostInit+0x17c>)
 8009d92:	4313      	orrs	r3, r2
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3718      	adds	r7, #24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009da4:	b004      	add	sp, #16
 8009da6:	4770      	bx	lr
 8009da8:	01000200 	.word	0x01000200
 8009dac:	00e00300 	.word	0x00e00300
 8009db0:	00600080 	.word	0x00600080
 8009db4:	004000e0 	.word	0x004000e0
 8009db8:	a3200008 	.word	0xa3200008

08009dbc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009dda:	f023 0303 	bic.w	r3, r3, #3
 8009dde:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	78fb      	ldrb	r3, [r7, #3]
 8009dea:	f003 0303 	and.w	r3, r3, #3
 8009dee:	68f9      	ldr	r1, [r7, #12]
 8009df0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009df4:	4313      	orrs	r3, r2
 8009df6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009df8:	78fb      	ldrb	r3, [r7, #3]
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d107      	bne.n	8009e0e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e04:	461a      	mov	r2, r3
 8009e06:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009e0a:	6053      	str	r3, [r2, #4]
 8009e0c:	e009      	b.n	8009e22 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009e0e:	78fb      	ldrb	r3, [r7, #3]
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d106      	bne.n	8009e22 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	f241 7370 	movw	r3, #6000	; 0x1770
 8009e20:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3714      	adds	r7, #20
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009e50:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e5e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009e60:	2064      	movs	r0, #100	; 0x64
 8009e62:	f7f8 ffa3 	bl	8002dac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009e6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e72:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009e74:	200a      	movs	r0, #10
 8009e76:	f7f8 ff99 	bl	8002dac <HAL_Delay>

  return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009e94:	2300      	movs	r3, #0
 8009e96:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009ea8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d109      	bne.n	8009ec8 <USB_DriveVbus+0x44>
 8009eb4:	78fb      	ldrb	r3, [r7, #3]
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d106      	bne.n	8009ec8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009ec2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009ec6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ed2:	d109      	bne.n	8009ee8 <USB_DriveVbus+0x64>
 8009ed4:	78fb      	ldrb	r3, [r7, #3]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d106      	bne.n	8009ee8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	68fa      	ldr	r2, [r7, #12]
 8009ede:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009ee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ee6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3714      	adds	r7, #20
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009ef6:	b480      	push	{r7}
 8009ef8:	b085      	sub	sp, #20
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009f02:	2300      	movs	r3, #0
 8009f04:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	0c5b      	lsrs	r3, r3, #17
 8009f14:	f003 0303 	and.w	r3, r3, #3
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3714      	adds	r7, #20
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	b29b      	uxth	r3, r3
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3714      	adds	r7, #20
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
	...

08009f48 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b088      	sub	sp, #32
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	4608      	mov	r0, r1
 8009f52:	4611      	mov	r1, r2
 8009f54:	461a      	mov	r2, r3
 8009f56:	4603      	mov	r3, r0
 8009f58:	70fb      	strb	r3, [r7, #3]
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	70bb      	strb	r3, [r7, #2]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f62:	2300      	movs	r3, #0
 8009f64:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009f6a:	78fb      	ldrb	r3, [r7, #3]
 8009f6c:	015a      	lsls	r2, r3, #5
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	4413      	add	r3, r2
 8009f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f76:	461a      	mov	r2, r3
 8009f78:	f04f 33ff 	mov.w	r3, #4294967295
 8009f7c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009f7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009f82:	2b03      	cmp	r3, #3
 8009f84:	d87e      	bhi.n	800a084 <USB_HC_Init+0x13c>
 8009f86:	a201      	add	r2, pc, #4	; (adr r2, 8009f8c <USB_HC_Init+0x44>)
 8009f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8c:	08009f9d 	.word	0x08009f9d
 8009f90:	0800a047 	.word	0x0800a047
 8009f94:	08009f9d 	.word	0x08009f9d
 8009f98:	0800a009 	.word	0x0800a009
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009f9c:	78fb      	ldrb	r3, [r7, #3]
 8009f9e:	015a      	lsls	r2, r3, #5
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fa8:	461a      	mov	r2, r3
 8009faa:	f240 439d 	movw	r3, #1181	; 0x49d
 8009fae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009fb0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	da10      	bge.n	8009fda <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009fb8:	78fb      	ldrb	r3, [r7, #3]
 8009fba:	015a      	lsls	r2, r3, #5
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	78fa      	ldrb	r2, [r7, #3]
 8009fc8:	0151      	lsls	r1, r2, #5
 8009fca:	693a      	ldr	r2, [r7, #16]
 8009fcc:	440a      	add	r2, r1
 8009fce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fd6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009fd8:	e057      	b.n	800a08a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d051      	beq.n	800a08a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009fe6:	78fb      	ldrb	r3, [r7, #3]
 8009fe8:	015a      	lsls	r2, r3, #5
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	4413      	add	r3, r2
 8009fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	78fa      	ldrb	r2, [r7, #3]
 8009ff6:	0151      	lsls	r1, r2, #5
 8009ff8:	693a      	ldr	r2, [r7, #16]
 8009ffa:	440a      	add	r2, r1
 8009ffc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a000:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a004:	60d3      	str	r3, [r2, #12]
      break;
 800a006:	e040      	b.n	800a08a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a008:	78fb      	ldrb	r3, [r7, #3]
 800a00a:	015a      	lsls	r2, r3, #5
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	4413      	add	r3, r2
 800a010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a014:	461a      	mov	r2, r3
 800a016:	f240 639d 	movw	r3, #1693	; 0x69d
 800a01a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a01c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a020:	2b00      	cmp	r3, #0
 800a022:	da34      	bge.n	800a08e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a024:	78fb      	ldrb	r3, [r7, #3]
 800a026:	015a      	lsls	r2, r3, #5
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	4413      	add	r3, r2
 800a02c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	78fa      	ldrb	r2, [r7, #3]
 800a034:	0151      	lsls	r1, r2, #5
 800a036:	693a      	ldr	r2, [r7, #16]
 800a038:	440a      	add	r2, r1
 800a03a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a03e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a042:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a044:	e023      	b.n	800a08e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a046:	78fb      	ldrb	r3, [r7, #3]
 800a048:	015a      	lsls	r2, r3, #5
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	4413      	add	r3, r2
 800a04e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a052:	461a      	mov	r2, r3
 800a054:	f240 2325 	movw	r3, #549	; 0x225
 800a058:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a05a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	da17      	bge.n	800a092 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a062:	78fb      	ldrb	r3, [r7, #3]
 800a064:	015a      	lsls	r2, r3, #5
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	4413      	add	r3, r2
 800a06a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	78fa      	ldrb	r2, [r7, #3]
 800a072:	0151      	lsls	r1, r2, #5
 800a074:	693a      	ldr	r2, [r7, #16]
 800a076:	440a      	add	r2, r1
 800a078:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a07c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a080:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a082:	e006      	b.n	800a092 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	77fb      	strb	r3, [r7, #31]
      break;
 800a088:	e004      	b.n	800a094 <USB_HC_Init+0x14c>
      break;
 800a08a:	bf00      	nop
 800a08c:	e002      	b.n	800a094 <USB_HC_Init+0x14c>
      break;
 800a08e:	bf00      	nop
 800a090:	e000      	b.n	800a094 <USB_HC_Init+0x14c>
      break;
 800a092:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a094:	78fb      	ldrb	r3, [r7, #3]
 800a096:	015a      	lsls	r2, r3, #5
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	4413      	add	r3, r2
 800a09c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	78fa      	ldrb	r2, [r7, #3]
 800a0a4:	0151      	lsls	r1, r2, #5
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	440a      	add	r2, r1
 800a0aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0ae:	f043 0302 	orr.w	r3, r3, #2
 800a0b2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0ba:	699a      	ldr	r2, [r3, #24]
 800a0bc:	78fb      	ldrb	r3, [r7, #3]
 800a0be:	f003 030f 	and.w	r3, r3, #15
 800a0c2:	2101      	movs	r1, #1
 800a0c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a0c8:	6939      	ldr	r1, [r7, #16]
 800a0ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a0de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	da03      	bge.n	800a0ee <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a0e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0ea:	61bb      	str	r3, [r7, #24]
 800a0ec:	e001      	b.n	800a0f2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f7ff feff 	bl	8009ef6 <USB_GetHostSpeed>
 800a0f8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a0fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	d106      	bne.n	800a110 <USB_HC_Init+0x1c8>
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2b02      	cmp	r3, #2
 800a106:	d003      	beq.n	800a110 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a10c:	617b      	str	r3, [r7, #20]
 800a10e:	e001      	b.n	800a114 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a110:	2300      	movs	r3, #0
 800a112:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a114:	787b      	ldrb	r3, [r7, #1]
 800a116:	059b      	lsls	r3, r3, #22
 800a118:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a11c:	78bb      	ldrb	r3, [r7, #2]
 800a11e:	02db      	lsls	r3, r3, #11
 800a120:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a124:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a126:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a12a:	049b      	lsls	r3, r3, #18
 800a12c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a130:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a132:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a134:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a138:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a13e:	78fb      	ldrb	r3, [r7, #3]
 800a140:	0159      	lsls	r1, r3, #5
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	440b      	add	r3, r1
 800a146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a14a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a150:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a152:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a156:	2b03      	cmp	r3, #3
 800a158:	d003      	beq.n	800a162 <USB_HC_Init+0x21a>
 800a15a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d10f      	bne.n	800a182 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a162:	78fb      	ldrb	r3, [r7, #3]
 800a164:	015a      	lsls	r2, r3, #5
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	4413      	add	r3, r2
 800a16a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	78fa      	ldrb	r2, [r7, #3]
 800a172:	0151      	lsls	r1, r2, #5
 800a174:	693a      	ldr	r2, [r7, #16]
 800a176:	440a      	add	r2, r1
 800a178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a17c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a180:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a182:	7ffb      	ldrb	r3, [r7, #31]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3720      	adds	r7, #32
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b08c      	sub	sp, #48	; 0x30
 800a190:	af02      	add	r7, sp, #8
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	4613      	mov	r3, r2
 800a198:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	785b      	ldrb	r3, [r3, #1]
 800a1a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a1a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1a8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d02d      	beq.n	800a212 <USB_HC_StartXfer+0x86>
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	791b      	ldrb	r3, [r3, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d129      	bne.n	800a212 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800a1be:	79fb      	ldrb	r3, [r7, #7]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d117      	bne.n	800a1f4 <USB_HC_StartXfer+0x68>
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	79db      	ldrb	r3, [r3, #7]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d003      	beq.n	800a1d4 <USB_HC_StartXfer+0x48>
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	79db      	ldrb	r3, [r3, #7]
 800a1d0:	2b02      	cmp	r3, #2
 800a1d2:	d10f      	bne.n	800a1f4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	015a      	lsls	r2, r3, #5
 800a1d8:	6a3b      	ldr	r3, [r7, #32]
 800a1da:	4413      	add	r3, r2
 800a1dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	69fa      	ldr	r2, [r7, #28]
 800a1e4:	0151      	lsls	r1, r2, #5
 800a1e6:	6a3a      	ldr	r2, [r7, #32]
 800a1e8:	440a      	add	r2, r1
 800a1ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1f2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800a1f4:	79fb      	ldrb	r3, [r7, #7]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d10b      	bne.n	800a212 <USB_HC_StartXfer+0x86>
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	795b      	ldrb	r3, [r3, #5]
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d107      	bne.n	800a212 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	785b      	ldrb	r3, [r3, #1]
 800a206:	4619      	mov	r1, r3
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f000 fa0f 	bl	800a62c <USB_DoPing>
      return HAL_OK;
 800a20e:	2300      	movs	r3, #0
 800a210:	e0f8      	b.n	800a404 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	695b      	ldr	r3, [r3, #20]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d018      	beq.n	800a24c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	695b      	ldr	r3, [r3, #20]
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	8912      	ldrh	r2, [r2, #8]
 800a222:	4413      	add	r3, r2
 800a224:	3b01      	subs	r3, #1
 800a226:	68ba      	ldr	r2, [r7, #8]
 800a228:	8912      	ldrh	r2, [r2, #8]
 800a22a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a22e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a230:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a232:	8b7b      	ldrh	r3, [r7, #26]
 800a234:	429a      	cmp	r2, r3
 800a236:	d90b      	bls.n	800a250 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800a238:	8b7b      	ldrh	r3, [r7, #26]
 800a23a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a23c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	8912      	ldrh	r2, [r2, #8]
 800a242:	fb03 f202 	mul.w	r2, r3, r2
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	611a      	str	r2, [r3, #16]
 800a24a:	e001      	b.n	800a250 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800a24c:	2301      	movs	r3, #1
 800a24e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	78db      	ldrb	r3, [r3, #3]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d007      	beq.n	800a268 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a258:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	8912      	ldrh	r2, [r2, #8]
 800a25e:	fb03 f202 	mul.w	r2, r3, r2
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	611a      	str	r2, [r3, #16]
 800a266:	e003      	b.n	800a270 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	695a      	ldr	r2, [r3, #20]
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a278:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a27a:	04d9      	lsls	r1, r3, #19
 800a27c:	4b63      	ldr	r3, [pc, #396]	; (800a40c <USB_HC_StartXfer+0x280>)
 800a27e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a280:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	7a9b      	ldrb	r3, [r3, #10]
 800a286:	075b      	lsls	r3, r3, #29
 800a288:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a28c:	69f9      	ldr	r1, [r7, #28]
 800a28e:	0148      	lsls	r0, r1, #5
 800a290:	6a39      	ldr	r1, [r7, #32]
 800a292:	4401      	add	r1, r0
 800a294:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a298:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a29a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a29c:	79fb      	ldrb	r3, [r7, #7]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d009      	beq.n	800a2b6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	68d9      	ldr	r1, [r3, #12]
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	015a      	lsls	r2, r3, #5
 800a2aa:	6a3b      	ldr	r3, [r7, #32]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2b2:	460a      	mov	r2, r1
 800a2b4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a2b6:	6a3b      	ldr	r3, [r7, #32]
 800a2b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	f003 0301 	and.w	r3, r3, #1
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	bf0c      	ite	eq
 800a2c6:	2301      	moveq	r3, #1
 800a2c8:	2300      	movne	r3, #0
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	015a      	lsls	r2, r3, #5
 800a2d2:	6a3b      	ldr	r3, [r7, #32]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	69fa      	ldr	r2, [r7, #28]
 800a2de:	0151      	lsls	r1, r2, #5
 800a2e0:	6a3a      	ldr	r2, [r7, #32]
 800a2e2:	440a      	add	r2, r1
 800a2e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a2ec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	015a      	lsls	r2, r3, #5
 800a2f2:	6a3b      	ldr	r3, [r7, #32]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	7e7b      	ldrb	r3, [r7, #25]
 800a2fe:	075b      	lsls	r3, r3, #29
 800a300:	69f9      	ldr	r1, [r7, #28]
 800a302:	0148      	lsls	r0, r1, #5
 800a304:	6a39      	ldr	r1, [r7, #32]
 800a306:	4401      	add	r1, r0
 800a308:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a30c:	4313      	orrs	r3, r2
 800a30e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	015a      	lsls	r2, r3, #5
 800a314:	6a3b      	ldr	r3, [r7, #32]
 800a316:	4413      	add	r3, r2
 800a318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a326:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	78db      	ldrb	r3, [r3, #3]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d004      	beq.n	800a33a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a336:	613b      	str	r3, [r7, #16]
 800a338:	e003      	b.n	800a342 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a340:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a348:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	015a      	lsls	r2, r3, #5
 800a34e:	6a3b      	ldr	r3, [r7, #32]
 800a350:	4413      	add	r3, r2
 800a352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a356:	461a      	mov	r2, r3
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a35c:	79fb      	ldrb	r3, [r7, #7]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d001      	beq.n	800a366 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a362:	2300      	movs	r3, #0
 800a364:	e04e      	b.n	800a404 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	78db      	ldrb	r3, [r3, #3]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d149      	bne.n	800a402 <USB_HC_StartXfer+0x276>
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	695b      	ldr	r3, [r3, #20]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d045      	beq.n	800a402 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	79db      	ldrb	r3, [r3, #7]
 800a37a:	2b03      	cmp	r3, #3
 800a37c:	d830      	bhi.n	800a3e0 <USB_HC_StartXfer+0x254>
 800a37e:	a201      	add	r2, pc, #4	; (adr r2, 800a384 <USB_HC_StartXfer+0x1f8>)
 800a380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a384:	0800a395 	.word	0x0800a395
 800a388:	0800a3b9 	.word	0x0800a3b9
 800a38c:	0800a395 	.word	0x0800a395
 800a390:	0800a3b9 	.word	0x0800a3b9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	695b      	ldr	r3, [r3, #20]
 800a398:	3303      	adds	r3, #3
 800a39a:	089b      	lsrs	r3, r3, #2
 800a39c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a39e:	8afa      	ldrh	r2, [r7, #22]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d91c      	bls.n	800a3e4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	699b      	ldr	r3, [r3, #24]
 800a3ae:	f043 0220 	orr.w	r2, r3, #32
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	619a      	str	r2, [r3, #24]
        }
        break;
 800a3b6:	e015      	b.n	800a3e4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	695b      	ldr	r3, [r3, #20]
 800a3bc:	3303      	adds	r3, #3
 800a3be:	089b      	lsrs	r3, r3, #2
 800a3c0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a3c2:	8afa      	ldrh	r2, [r7, #22]
 800a3c4:	6a3b      	ldr	r3, [r7, #32]
 800a3c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3ca:	691b      	ldr	r3, [r3, #16]
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d90a      	bls.n	800a3e8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	619a      	str	r2, [r3, #24]
        }
        break;
 800a3de:	e003      	b.n	800a3e8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a3e0:	bf00      	nop
 800a3e2:	e002      	b.n	800a3ea <USB_HC_StartXfer+0x25e>
        break;
 800a3e4:	bf00      	nop
 800a3e6:	e000      	b.n	800a3ea <USB_HC_StartXfer+0x25e>
        break;
 800a3e8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	68d9      	ldr	r1, [r3, #12]
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	785a      	ldrb	r2, [r3, #1]
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	695b      	ldr	r3, [r3, #20]
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	2000      	movs	r0, #0
 800a3fa:	9000      	str	r0, [sp, #0]
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f7ff fb31 	bl	8009a64 <USB_WritePacket>
  }

  return HAL_OK;
 800a402:	2300      	movs	r3, #0
}
 800a404:	4618      	mov	r0, r3
 800a406:	3728      	adds	r7, #40	; 0x28
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	1ff80000 	.word	0x1ff80000

0800a410 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a422:	695b      	ldr	r3, [r3, #20]
 800a424:	b29b      	uxth	r3, r3
}
 800a426:	4618      	mov	r0, r3
 800a428:	3714      	adds	r7, #20
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr

0800a432 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a432:	b480      	push	{r7}
 800a434:	b089      	sub	sp, #36	; 0x24
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
 800a43a:	460b      	mov	r3, r1
 800a43c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a442:	78fb      	ldrb	r3, [r7, #3]
 800a444:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a446:	2300      	movs	r3, #0
 800a448:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	015a      	lsls	r2, r3, #5
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	4413      	add	r3, r2
 800a452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	0c9b      	lsrs	r3, r3, #18
 800a45a:	f003 0303 	and.w	r3, r3, #3
 800a45e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	015a      	lsls	r2, r3, #5
 800a464:	69fb      	ldr	r3, [r7, #28]
 800a466:	4413      	add	r3, r2
 800a468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	0fdb      	lsrs	r3, r3, #31
 800a470:	f003 0301 	and.w	r3, r3, #1
 800a474:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	f003 0320 	and.w	r3, r3, #32
 800a47e:	2b20      	cmp	r3, #32
 800a480:	d104      	bne.n	800a48c <USB_HC_Halt+0x5a>
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d101      	bne.n	800a48c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800a488:	2300      	movs	r3, #0
 800a48a:	e0c8      	b.n	800a61e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d002      	beq.n	800a498 <USB_HC_Halt+0x66>
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	2b02      	cmp	r3, #2
 800a496:	d163      	bne.n	800a560 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	015a      	lsls	r2, r3, #5
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	4413      	add	r3, r2
 800a4a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	69ba      	ldr	r2, [r7, #24]
 800a4a8:	0151      	lsls	r1, r2, #5
 800a4aa:	69fa      	ldr	r2, [r7, #28]
 800a4ac:	440a      	add	r2, r1
 800a4ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4b6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	f003 0320 	and.w	r3, r3, #32
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f040 80ab 	bne.w	800a61c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d133      	bne.n	800a53a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	015a      	lsls	r2, r3, #5
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	4413      	add	r3, r2
 800a4da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	69ba      	ldr	r2, [r7, #24]
 800a4e2:	0151      	lsls	r1, r2, #5
 800a4e4:	69fa      	ldr	r2, [r7, #28]
 800a4e6:	440a      	add	r2, r1
 800a4e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4f0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	015a      	lsls	r2, r3, #5
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	69ba      	ldr	r2, [r7, #24]
 800a502:	0151      	lsls	r1, r2, #5
 800a504:	69fa      	ldr	r2, [r7, #28]
 800a506:	440a      	add	r2, r1
 800a508:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a50c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a510:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	3301      	adds	r3, #1
 800a516:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a51e:	d81d      	bhi.n	800a55c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	015a      	lsls	r2, r3, #5
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	4413      	add	r3, r2
 800a528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a532:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a536:	d0ec      	beq.n	800a512 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a538:	e070      	b.n	800a61c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	015a      	lsls	r2, r3, #5
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	4413      	add	r3, r2
 800a542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	69ba      	ldr	r2, [r7, #24]
 800a54a:	0151      	lsls	r1, r2, #5
 800a54c:	69fa      	ldr	r2, [r7, #28]
 800a54e:	440a      	add	r2, r1
 800a550:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a554:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a558:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a55a:	e05f      	b.n	800a61c <USB_HC_Halt+0x1ea>
            break;
 800a55c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a55e:	e05d      	b.n	800a61c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	015a      	lsls	r2, r3, #5
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	4413      	add	r3, r2
 800a568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	69ba      	ldr	r2, [r7, #24]
 800a570:	0151      	lsls	r1, r2, #5
 800a572:	69fa      	ldr	r2, [r7, #28]
 800a574:	440a      	add	r2, r1
 800a576:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a57a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a57e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d133      	bne.n	800a5f8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	015a      	lsls	r2, r3, #5
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	4413      	add	r3, r2
 800a598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	69ba      	ldr	r2, [r7, #24]
 800a5a0:	0151      	lsls	r1, r2, #5
 800a5a2:	69fa      	ldr	r2, [r7, #28]
 800a5a4:	440a      	add	r2, r1
 800a5a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	015a      	lsls	r2, r3, #5
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	69ba      	ldr	r2, [r7, #24]
 800a5c0:	0151      	lsls	r1, r2, #5
 800a5c2:	69fa      	ldr	r2, [r7, #28]
 800a5c4:	440a      	add	r2, r1
 800a5c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5ce:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5dc:	d81d      	bhi.n	800a61a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	015a      	lsls	r2, r3, #5
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5f4:	d0ec      	beq.n	800a5d0 <USB_HC_Halt+0x19e>
 800a5f6:	e011      	b.n	800a61c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	015a      	lsls	r2, r3, #5
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	4413      	add	r3, r2
 800a600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	69ba      	ldr	r2, [r7, #24]
 800a608:	0151      	lsls	r1, r2, #5
 800a60a:	69fa      	ldr	r2, [r7, #28]
 800a60c:	440a      	add	r2, r1
 800a60e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a616:	6013      	str	r3, [r2, #0]
 800a618:	e000      	b.n	800a61c <USB_HC_Halt+0x1ea>
          break;
 800a61a:	bf00      	nop
    }
  }

  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3724      	adds	r7, #36	; 0x24
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr
	...

0800a62c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b087      	sub	sp, #28
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	460b      	mov	r3, r1
 800a636:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a63c:	78fb      	ldrb	r3, [r7, #3]
 800a63e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a640:	2301      	movs	r3, #1
 800a642:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	04da      	lsls	r2, r3, #19
 800a648:	4b15      	ldr	r3, [pc, #84]	; (800a6a0 <USB_DoPing+0x74>)
 800a64a:	4013      	ands	r3, r2
 800a64c:	693a      	ldr	r2, [r7, #16]
 800a64e:	0151      	lsls	r1, r2, #5
 800a650:	697a      	ldr	r2, [r7, #20]
 800a652:	440a      	add	r2, r1
 800a654:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a658:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a65c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	015a      	lsls	r2, r3, #5
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	4413      	add	r3, r2
 800a666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a674:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a67c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	015a      	lsls	r2, r3, #5
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	4413      	add	r3, r2
 800a686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a68a:	461a      	mov	r2, r3
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	371c      	adds	r7, #28
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	1ff80000 	.word	0x1ff80000

0800a6a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b088      	sub	sp, #32
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f7ff f911 	bl	80098e0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a6be:	2110      	movs	r1, #16
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f7ff f96b 	bl	800999c <USB_FlushTxFifo>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d001      	beq.n	800a6d0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f7ff f997 	bl	8009a04 <USB_FlushRxFifo>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d001      	beq.n	800a6e0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	61bb      	str	r3, [r7, #24]
 800a6e4:	e01f      	b.n	800a726 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	015a      	lsls	r2, r3, #5
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a704:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a70c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	015a      	lsls	r2, r3, #5
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	4413      	add	r3, r2
 800a716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a71a:	461a      	mov	r2, r3
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	3301      	adds	r3, #1
 800a724:	61bb      	str	r3, [r7, #24]
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	2b0f      	cmp	r3, #15
 800a72a:	d9dc      	bls.n	800a6e6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a72c:	2300      	movs	r3, #0
 800a72e:	61bb      	str	r3, [r7, #24]
 800a730:	e034      	b.n	800a79c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	015a      	lsls	r2, r3, #5
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	4413      	add	r3, r2
 800a73a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a748:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a750:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a758:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	015a      	lsls	r2, r3, #5
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	4413      	add	r3, r2
 800a762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a766:	461a      	mov	r2, r3
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	3301      	adds	r3, #1
 800a770:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a778:	d80c      	bhi.n	800a794 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	015a      	lsls	r2, r3, #5
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	4413      	add	r3, r2
 800a782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a78c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a790:	d0ec      	beq.n	800a76c <USB_StopHost+0xc8>
 800a792:	e000      	b.n	800a796 <USB_StopHost+0xf2>
        break;
 800a794:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a796:	69bb      	ldr	r3, [r7, #24]
 800a798:	3301      	adds	r3, #1
 800a79a:	61bb      	str	r3, [r7, #24]
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	2b0f      	cmp	r3, #15
 800a7a0:	d9c7      	bls.n	800a732 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a7b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7ff f880 	bl	80098be <USB_EnableGlobalInt>

  return ret;
 800a7be:	7ffb      	ldrb	r3, [r7, #31]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3720      	adds	r7, #32
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800a7cc:	4904      	ldr	r1, [pc, #16]	; (800a7e0 <MX_FATFS_Init+0x18>)
 800a7ce:	4805      	ldr	r0, [pc, #20]	; (800a7e4 <MX_FATFS_Init+0x1c>)
 800a7d0:	f006 fb36 	bl	8010e40 <FATFS_LinkDriver>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	4b03      	ldr	r3, [pc, #12]	; (800a7e8 <MX_FATFS_Init+0x20>)
 800a7da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a7dc:	bf00      	nop
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	20001e80 	.word	0x20001e80
 800a7e4:	0801302c 	.word	0x0801302c
 800a7e8:	20001e7c 	.word	0x20001e7c

0800a7ec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a7f0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	4603      	mov	r3, r0
 800a804:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	4603      	mov	r3, r0
 800a81c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800a822:	79fb      	ldrb	r3, [r7, #7]
 800a824:	4619      	mov	r1, r3
 800a826:	4808      	ldr	r0, [pc, #32]	; (800a848 <USBH_status+0x34>)
 800a828:	f000 fe32 	bl	800b490 <USBH_MSC_UnitIsReady>
 800a82c:	4603      	mov	r3, r0
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d002      	beq.n	800a838 <USBH_status+0x24>
  {
    res = RES_OK;
 800a832:	2300      	movs	r3, #0
 800a834:	73fb      	strb	r3, [r7, #15]
 800a836:	e001      	b.n	800a83c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	200022ec 	.word	0x200022ec

0800a84c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b094      	sub	sp, #80	; 0x50
 800a850:	af02      	add	r7, sp, #8
 800a852:	60b9      	str	r1, [r7, #8]
 800a854:	607a      	str	r2, [r7, #4]
 800a856:	603b      	str	r3, [r7, #0]
 800a858:	4603      	mov	r3, r0
 800a85a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800a862:	7bf9      	ldrb	r1, [r7, #15]
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	9300      	str	r3, [sp, #0]
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	4813      	ldr	r0, [pc, #76]	; (800a8bc <USBH_read+0x70>)
 800a86e:	f000 fe59 	bl	800b524 <USBH_MSC_Read>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d103      	bne.n	800a880 <USBH_read+0x34>
  {
    res = RES_OK;
 800a878:	2300      	movs	r3, #0
 800a87a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a87e:	e017      	b.n	800a8b0 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a880:	f107 0210 	add.w	r2, r7, #16
 800a884:	7bfb      	ldrb	r3, [r7, #15]
 800a886:	4619      	mov	r1, r3
 800a888:	480c      	ldr	r0, [pc, #48]	; (800a8bc <USBH_read+0x70>)
 800a88a:	f000 fe27 	bl	800b4dc <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a88e:	7f7b      	ldrb	r3, [r7, #29]
 800a890:	2b3a      	cmp	r3, #58	; 0x3a
 800a892:	d005      	beq.n	800a8a0 <USBH_read+0x54>
 800a894:	2b3a      	cmp	r3, #58	; 0x3a
 800a896:	dc07      	bgt.n	800a8a8 <USBH_read+0x5c>
 800a898:	2b04      	cmp	r3, #4
 800a89a:	d001      	beq.n	800a8a0 <USBH_read+0x54>
 800a89c:	2b28      	cmp	r3, #40	; 0x28
 800a89e:	d103      	bne.n	800a8a8 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a8a6:	e003      	b.n	800a8b0 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a8ae:	bf00      	nop
    }
  }

  return res;
 800a8b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3748      	adds	r7, #72	; 0x48
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	200022ec 	.word	0x200022ec

0800a8c0 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b094      	sub	sp, #80	; 0x50
 800a8c4:	af02      	add	r7, sp, #8
 800a8c6:	60b9      	str	r1, [r7, #8]
 800a8c8:	607a      	str	r2, [r7, #4]
 800a8ca:	603b      	str	r3, [r7, #0]
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800a8d6:	7bf9      	ldrb	r1, [r7, #15]
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	9300      	str	r3, [sp, #0]
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	4817      	ldr	r0, [pc, #92]	; (800a940 <USBH_write+0x80>)
 800a8e2:	f000 fe88 	bl	800b5f6 <USBH_MSC_Write>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d103      	bne.n	800a8f4 <USBH_write+0x34>
  {
    res = RES_OK;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a8f2:	e01f      	b.n	800a934 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a8f4:	f107 0210 	add.w	r2, r7, #16
 800a8f8:	7bfb      	ldrb	r3, [r7, #15]
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	4810      	ldr	r0, [pc, #64]	; (800a940 <USBH_write+0x80>)
 800a8fe:	f000 fded 	bl	800b4dc <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a902:	7f7b      	ldrb	r3, [r7, #29]
 800a904:	2b3a      	cmp	r3, #58	; 0x3a
 800a906:	d00d      	beq.n	800a924 <USBH_write+0x64>
 800a908:	2b3a      	cmp	r3, #58	; 0x3a
 800a90a:	dc0f      	bgt.n	800a92c <USBH_write+0x6c>
 800a90c:	2b28      	cmp	r3, #40	; 0x28
 800a90e:	d009      	beq.n	800a924 <USBH_write+0x64>
 800a910:	2b28      	cmp	r3, #40	; 0x28
 800a912:	dc0b      	bgt.n	800a92c <USBH_write+0x6c>
 800a914:	2b04      	cmp	r3, #4
 800a916:	d005      	beq.n	800a924 <USBH_write+0x64>
 800a918:	2b27      	cmp	r3, #39	; 0x27
 800a91a:	d107      	bne.n	800a92c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800a91c:	2302      	movs	r3, #2
 800a91e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a922:	e007      	b.n	800a934 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a924:	2303      	movs	r3, #3
 800a926:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a92a:	e003      	b.n	800a934 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a932:	bf00      	nop
    }
  }

  return res;
 800a934:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3748      	adds	r7, #72	; 0x48
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	200022ec 	.word	0x200022ec

0800a944 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b090      	sub	sp, #64	; 0x40
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	603a      	str	r2, [r7, #0]
 800a94e:	71fb      	strb	r3, [r7, #7]
 800a950:	460b      	mov	r3, r1
 800a952:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a954:	2301      	movs	r3, #1
 800a956:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800a95a:	79bb      	ldrb	r3, [r7, #6]
 800a95c:	2b03      	cmp	r3, #3
 800a95e:	d852      	bhi.n	800aa06 <USBH_ioctl+0xc2>
 800a960:	a201      	add	r2, pc, #4	; (adr r2, 800a968 <USBH_ioctl+0x24>)
 800a962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a966:	bf00      	nop
 800a968:	0800a979 	.word	0x0800a979
 800a96c:	0800a981 	.word	0x0800a981
 800a970:	0800a9ab 	.word	0x0800a9ab
 800a974:	0800a9d7 	.word	0x0800a9d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a97e:	e045      	b.n	800aa0c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a980:	f107 0208 	add.w	r2, r7, #8
 800a984:	79fb      	ldrb	r3, [r7, #7]
 800a986:	4619      	mov	r1, r3
 800a988:	4823      	ldr	r0, [pc, #140]	; (800aa18 <USBH_ioctl+0xd4>)
 800a98a:	f000 fda7 	bl	800b4dc <USBH_MSC_GetLUNInfo>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d106      	bne.n	800a9a2 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a9a0:	e034      	b.n	800aa0c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a9a8:	e030      	b.n	800aa0c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a9aa:	f107 0208 	add.w	r2, r7, #8
 800a9ae:	79fb      	ldrb	r3, [r7, #7]
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	4819      	ldr	r0, [pc, #100]	; (800aa18 <USBH_ioctl+0xd4>)
 800a9b4:	f000 fd92 	bl	800b4dc <USBH_MSC_GetLUNInfo>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d107      	bne.n	800a9ce <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800a9be:	8a3b      	ldrh	r3, [r7, #16]
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a9cc:	e01e      	b.n	800aa0c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a9d4:	e01a      	b.n	800aa0c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a9d6:	f107 0208 	add.w	r2, r7, #8
 800a9da:	79fb      	ldrb	r3, [r7, #7]
 800a9dc:	4619      	mov	r1, r3
 800a9de:	480e      	ldr	r0, [pc, #56]	; (800aa18 <USBH_ioctl+0xd4>)
 800a9e0:	f000 fd7c 	bl	800b4dc <USBH_MSC_GetLUNInfo>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d109      	bne.n	800a9fe <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800a9ea:	8a3b      	ldrh	r3, [r7, #16]
 800a9ec:	0a5b      	lsrs	r3, r3, #9
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a9fc:	e006      	b.n	800aa0c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800aa04:	e002      	b.n	800aa0c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800aa06:	2304      	movs	r3, #4
 800aa08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800aa0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3740      	adds	r7, #64	; 0x40
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	200022ec 	.word	0x200022ec

0800aa1c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800aa1c:	b590      	push	{r4, r7, lr}
 800aa1e:	b089      	sub	sp, #36	; 0x24
 800aa20:	af04      	add	r7, sp, #16
 800aa22:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa2a:	7919      	ldrb	r1, [r3, #4]
 800aa2c:	2350      	movs	r3, #80	; 0x50
 800aa2e:	2206      	movs	r2, #6
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f001 fc6b 	bl	800c30c <USBH_FindInterface>
 800aa36:	4603      	mov	r3, r0
 800aa38:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800aa3a:	7bfb      	ldrb	r3, [r7, #15]
 800aa3c:	2bff      	cmp	r3, #255	; 0xff
 800aa3e:	d002      	beq.n	800aa46 <USBH_MSC_InterfaceInit+0x2a>
 800aa40:	7bfb      	ldrb	r3, [r7, #15]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d901      	bls.n	800aa4a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800aa46:	2302      	movs	r3, #2
 800aa48:	e106      	b.n	800ac58 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800aa4a:	7bfb      	ldrb	r3, [r7, #15]
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f001 fc40 	bl	800c2d4 <USBH_SelectInterface>
 800aa54:	4603      	mov	r3, r0
 800aa56:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800aa58:	7bbb      	ldrb	r3, [r7, #14]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d001      	beq.n	800aa62 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800aa5e:	2302      	movs	r3, #2
 800aa60:	e0fa      	b.n	800ac58 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800aa68:	f44f 7080 	mov.w	r0, #256	; 0x100
 800aa6c:	f006 fdf6 	bl	801165c <malloc>
 800aa70:	4603      	mov	r3, r0
 800aa72:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa7a:	69db      	ldr	r3, [r3, #28]
 800aa7c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d101      	bne.n	800aa88 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800aa84:	2302      	movs	r3, #2
 800aa86:	e0e7      	b.n	800ac58 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800aa88:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	68b8      	ldr	r0, [r7, #8]
 800aa90:	f006 fea0 	bl	80117d4 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800aa94:	7bfb      	ldrb	r3, [r7, #15]
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	211a      	movs	r1, #26
 800aa9a:	fb01 f303 	mul.w	r3, r1, r3
 800aa9e:	4413      	add	r3, r2
 800aaa0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	b25b      	sxtb	r3, r3
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	da16      	bge.n	800aada <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800aaac:	7bfb      	ldrb	r3, [r7, #15]
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	211a      	movs	r1, #26
 800aab2:	fb01 f303 	mul.w	r3, r1, r3
 800aab6:	4413      	add	r3, r2
 800aab8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800aabc:	781a      	ldrb	r2, [r3, #0]
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800aac2:	7bfb      	ldrb	r3, [r7, #15]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	211a      	movs	r1, #26
 800aac8:	fb01 f303 	mul.w	r3, r1, r3
 800aacc:	4413      	add	r3, r2
 800aace:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800aad2:	881a      	ldrh	r2, [r3, #0]
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	815a      	strh	r2, [r3, #10]
 800aad8:	e015      	b.n	800ab06 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800aada:	7bfb      	ldrb	r3, [r7, #15]
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	211a      	movs	r1, #26
 800aae0:	fb01 f303 	mul.w	r3, r1, r3
 800aae4:	4413      	add	r3, r2
 800aae6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800aaea:	781a      	ldrb	r2, [r3, #0]
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800aaf0:	7bfb      	ldrb	r3, [r7, #15]
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	211a      	movs	r1, #26
 800aaf6:	fb01 f303 	mul.w	r3, r1, r3
 800aafa:	4413      	add	r3, r2
 800aafc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ab00:	881a      	ldrh	r2, [r3, #0]
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800ab06:	7bfb      	ldrb	r3, [r7, #15]
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	211a      	movs	r1, #26
 800ab0c:	fb01 f303 	mul.w	r3, r1, r3
 800ab10:	4413      	add	r3, r2
 800ab12:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	b25b      	sxtb	r3, r3
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	da16      	bge.n	800ab4c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800ab1e:	7bfb      	ldrb	r3, [r7, #15]
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	211a      	movs	r1, #26
 800ab24:	fb01 f303 	mul.w	r3, r1, r3
 800ab28:	4413      	add	r3, r2
 800ab2a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ab2e:	781a      	ldrb	r2, [r3, #0]
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ab34:	7bfb      	ldrb	r3, [r7, #15]
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	211a      	movs	r1, #26
 800ab3a:	fb01 f303 	mul.w	r3, r1, r3
 800ab3e:	4413      	add	r3, r2
 800ab40:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ab44:	881a      	ldrh	r2, [r3, #0]
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	815a      	strh	r2, [r3, #10]
 800ab4a:	e015      	b.n	800ab78 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800ab4c:	7bfb      	ldrb	r3, [r7, #15]
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	211a      	movs	r1, #26
 800ab52:	fb01 f303 	mul.w	r3, r1, r3
 800ab56:	4413      	add	r3, r2
 800ab58:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ab5c:	781a      	ldrb	r2, [r3, #0]
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ab62:	7bfb      	ldrb	r3, [r7, #15]
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	211a      	movs	r1, #26
 800ab68:	fb01 f303 	mul.w	r3, r1, r3
 800ab6c:	4413      	add	r3, r2
 800ab6e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ab72:	881a      	ldrh	r2, [r3, #0]
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	2200      	movs	r2, #0
 800ab82:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	2200      	movs	r2, #0
 800ab88:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	799b      	ldrb	r3, [r3, #6]
 800ab8e:	4619      	mov	r1, r3
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f002 fed8 	bl	800d946 <USBH_AllocPipe>
 800ab96:	4603      	mov	r3, r0
 800ab98:	461a      	mov	r2, r3
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	79db      	ldrb	r3, [r3, #7]
 800aba2:	4619      	mov	r1, r3
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f002 fece 	bl	800d946 <USBH_AllocPipe>
 800abaa:	4603      	mov	r3, r0
 800abac:	461a      	mov	r2, r3
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 fdc4 	bl	800b740 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	799b      	ldrb	r3, [r3, #6]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d01e      	beq.n	800abfe <USBH_MSC_InterfaceInit+0x1e2>
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	891b      	ldrh	r3, [r3, #8]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d01a      	beq.n	800abfe <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	7959      	ldrb	r1, [r3, #5]
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	7998      	ldrb	r0, [r3, #6]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800abdc:	68ba      	ldr	r2, [r7, #8]
 800abde:	8912      	ldrh	r2, [r2, #8]
 800abe0:	9202      	str	r2, [sp, #8]
 800abe2:	2202      	movs	r2, #2
 800abe4:	9201      	str	r2, [sp, #4]
 800abe6:	9300      	str	r3, [sp, #0]
 800abe8:	4623      	mov	r3, r4
 800abea:	4602      	mov	r2, r0
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f002 fe7b 	bl	800d8e8 <USBH_OpenPipe>
 800abf2:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	79db      	ldrb	r3, [r3, #7]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d02c      	beq.n	800ac56 <USBH_MSC_InterfaceInit+0x23a>
 800abfc:	e001      	b.n	800ac02 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800abfe:	2303      	movs	r3, #3
 800ac00:	e02a      	b.n	800ac58 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	895b      	ldrh	r3, [r3, #10]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d025      	beq.n	800ac56 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	7919      	ldrb	r1, [r3, #4]
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	79d8      	ldrb	r0, [r3, #7]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ac1e:	68ba      	ldr	r2, [r7, #8]
 800ac20:	8952      	ldrh	r2, [r2, #10]
 800ac22:	9202      	str	r2, [sp, #8]
 800ac24:	2202      	movs	r2, #2
 800ac26:	9201      	str	r2, [sp, #4]
 800ac28:	9300      	str	r3, [sp, #0]
 800ac2a:	4623      	mov	r3, r4
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f002 fe5a 	bl	800d8e8 <USBH_OpenPipe>
 800ac34:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	791b      	ldrb	r3, [r3, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f006 fc58 	bl	80114f4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	795b      	ldrb	r3, [r3, #5]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f006 fc51 	bl	80114f4 <USBH_LL_SetToggle>

  return USBH_OK;
 800ac52:	2300      	movs	r3, #0
 800ac54:	e000      	b.n	800ac58 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800ac56:	2303      	movs	r3, #3
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3714      	adds	r7, #20
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd90      	pop	{r4, r7, pc}

0800ac60 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac6e:	69db      	ldr	r3, [r3, #28]
 800ac70:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	795b      	ldrb	r3, [r3, #5]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00e      	beq.n	800ac98 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	795b      	ldrb	r3, [r3, #5]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f002 fe50 	bl	800d926 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	795b      	ldrb	r3, [r3, #5]
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f002 fe7b 	bl	800d988 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2200      	movs	r2, #0
 800ac96:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	791b      	ldrb	r3, [r3, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00e      	beq.n	800acbe <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	791b      	ldrb	r3, [r3, #4]
 800aca4:	4619      	mov	r1, r3
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f002 fe3d 	bl	800d926 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	791b      	ldrb	r3, [r3, #4]
 800acb0:	4619      	mov	r1, r3
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f002 fe68 	bl	800d988 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2200      	movs	r2, #0
 800acbc:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acc4:	69db      	ldr	r3, [r3, #28]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00b      	beq.n	800ace2 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acd0:	69db      	ldr	r3, [r3, #28]
 800acd2:	4618      	mov	r0, r3
 800acd4:	f006 fcca 	bl	801166c <free>
    phost->pActiveClass->pData = 0U;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acde:	2200      	movs	r2, #0
 800ace0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3710      	adds	r7, #16
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acfa:	69db      	ldr	r3, [r3, #28]
 800acfc:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800acfe:	2301      	movs	r3, #1
 800ad00:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	7b9b      	ldrb	r3, [r3, #14]
 800ad06:	2b03      	cmp	r3, #3
 800ad08:	d041      	beq.n	800ad8e <USBH_MSC_ClassRequest+0xa2>
 800ad0a:	2b03      	cmp	r3, #3
 800ad0c:	dc4b      	bgt.n	800ada6 <USBH_MSC_ClassRequest+0xba>
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d001      	beq.n	800ad16 <USBH_MSC_ClassRequest+0x2a>
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d147      	bne.n	800ada6 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	4619      	mov	r1, r3
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 fcf1 	bl	800b702 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800ad20:	4603      	mov	r3, r0
 800ad22:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
 800ad26:	2b03      	cmp	r3, #3
 800ad28:	d104      	bne.n	800ad34 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800ad30:	2300      	movs	r3, #0
 800ad32:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d137      	bne.n	800adaa <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	2b02      	cmp	r3, #2
 800ad40:	d804      	bhi.n	800ad4c <USBH_MSC_ClassRequest+0x60>
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	3301      	adds	r3, #1
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	e000      	b.n	800ad4e <USBH_MSC_ClassRequest+0x62>
 800ad4c:	2202      	movs	r2, #2
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800ad52:	2300      	movs	r3, #0
 800ad54:	73bb      	strb	r3, [r7, #14]
 800ad56:	e014      	b.n	800ad82 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800ad58:	7bbb      	ldrb	r3, [r7, #14]
 800ad5a:	68ba      	ldr	r2, [r7, #8]
 800ad5c:	2134      	movs	r1, #52	; 0x34
 800ad5e:	fb01 f303 	mul.w	r3, r1, r3
 800ad62:	4413      	add	r3, r2
 800ad64:	3392      	adds	r3, #146	; 0x92
 800ad66:	2202      	movs	r2, #2
 800ad68:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800ad6a:	7bbb      	ldrb	r3, [r7, #14]
 800ad6c:	68ba      	ldr	r2, [r7, #8]
 800ad6e:	2134      	movs	r1, #52	; 0x34
 800ad70:	fb01 f303 	mul.w	r3, r1, r3
 800ad74:	4413      	add	r3, r2
 800ad76:	33c1      	adds	r3, #193	; 0xc1
 800ad78:	2200      	movs	r2, #0
 800ad7a:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800ad7c:	7bbb      	ldrb	r3, [r7, #14]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	73bb      	strb	r3, [r7, #14]
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	7bba      	ldrb	r2, [r7, #14]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d3e5      	bcc.n	800ad58 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800ad8c:	e00d      	b.n	800adaa <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800ad8e:	2100      	movs	r1, #0
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f002 f888 	bl	800cea6 <USBH_ClrFeature>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d108      	bne.n	800adae <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	7bda      	ldrb	r2, [r3, #15]
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	739a      	strb	r2, [r3, #14]
      }
      break;
 800ada4:	e003      	b.n	800adae <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800ada6:	bf00      	nop
 800ada8:	e002      	b.n	800adb0 <USBH_MSC_ClassRequest+0xc4>
      break;
 800adaa:	bf00      	nop
 800adac:	e000      	b.n	800adb0 <USBH_MSC_ClassRequest+0xc4>
      break;
 800adae:	bf00      	nop
  }

  return status;
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
	...

0800adbc <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b086      	sub	sp, #24
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adca:	69db      	ldr	r3, [r3, #28]
 800adcc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800adce:	2301      	movs	r3, #1
 800add0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800add2:	2301      	movs	r3, #1
 800add4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800add6:	2301      	movs	r3, #1
 800add8:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	7b1b      	ldrb	r3, [r3, #12]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d003      	beq.n	800adea <USBH_MSC_Process+0x2e>
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	f000 8271 	beq.w	800b2ca <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800ade8:	e272      	b.n	800b2d0 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	429a      	cmp	r2, r3
 800adf8:	f080 824f 	bcs.w	800b29a <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae02:	4619      	mov	r1, r3
 800ae04:	693a      	ldr	r2, [r7, #16]
 800ae06:	2334      	movs	r3, #52	; 0x34
 800ae08:	fb01 f303 	mul.w	r3, r1, r3
 800ae0c:	4413      	add	r3, r2
 800ae0e:	3391      	adds	r3, #145	; 0x91
 800ae10:	2201      	movs	r2, #1
 800ae12:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	2334      	movs	r3, #52	; 0x34
 800ae20:	fb01 f303 	mul.w	r3, r1, r3
 800ae24:	4413      	add	r3, r2
 800ae26:	3390      	adds	r3, #144	; 0x90
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	2b08      	cmp	r3, #8
 800ae2c:	f200 8243 	bhi.w	800b2b6 <USBH_MSC_Process+0x4fa>
 800ae30:	a201      	add	r2, pc, #4	; (adr r2, 800ae38 <USBH_MSC_Process+0x7c>)
 800ae32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae36:	bf00      	nop
 800ae38:	0800ae5d 	.word	0x0800ae5d
 800ae3c:	0800b2b7 	.word	0x0800b2b7
 800ae40:	0800af25 	.word	0x0800af25
 800ae44:	0800b0a9 	.word	0x0800b0a9
 800ae48:	0800ae83 	.word	0x0800ae83
 800ae4c:	0800b175 	.word	0x0800b175
 800ae50:	0800b2b7 	.word	0x0800b2b7
 800ae54:	0800b2b7 	.word	0x0800b2b7
 800ae58:	0800b289 	.word	0x0800b289
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae62:	4619      	mov	r1, r3
 800ae64:	693a      	ldr	r2, [r7, #16]
 800ae66:	2334      	movs	r3, #52	; 0x34
 800ae68:	fb01 f303 	mul.w	r3, r1, r3
 800ae6c:	4413      	add	r3, r2
 800ae6e:	3390      	adds	r3, #144	; 0x90
 800ae70:	2204      	movs	r2, #4
 800ae72:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800ae80:	e222      	b.n	800b2c8 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae88:	b2d9      	uxtb	r1, r3
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae90:	461a      	mov	r2, r3
 800ae92:	2334      	movs	r3, #52	; 0x34
 800ae94:	fb02 f303 	mul.w	r3, r2, r3
 800ae98:	3398      	adds	r3, #152	; 0x98
 800ae9a:	693a      	ldr	r2, [r7, #16]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	3307      	adds	r3, #7
 800aea0:	461a      	mov	r2, r3
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 ff6a 	bl	800bd7c <USBH_MSC_SCSI_Inquiry>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800aeac:	7bfb      	ldrb	r3, [r7, #15]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d10b      	bne.n	800aeca <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aeb8:	4619      	mov	r1, r3
 800aeba:	693a      	ldr	r2, [r7, #16]
 800aebc:	2334      	movs	r3, #52	; 0x34
 800aebe:	fb01 f303 	mul.w	r3, r1, r3
 800aec2:	4413      	add	r3, r2
 800aec4:	3390      	adds	r3, #144	; 0x90
 800aec6:	2202      	movs	r2, #2
 800aec8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800aeca:	7bfb      	ldrb	r3, [r7, #15]
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d10c      	bne.n	800aeea <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aed6:	4619      	mov	r1, r3
 800aed8:	693a      	ldr	r2, [r7, #16]
 800aeda:	2334      	movs	r3, #52	; 0x34
 800aedc:	fb01 f303 	mul.w	r3, r1, r3
 800aee0:	4413      	add	r3, r2
 800aee2:	3390      	adds	r3, #144	; 0x90
 800aee4:	2205      	movs	r2, #5
 800aee6:	701a      	strb	r2, [r3, #0]
            break;
 800aee8:	e1e7      	b.n	800b2ba <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800aeea:	7bfb      	ldrb	r3, [r7, #15]
 800aeec:	2b04      	cmp	r3, #4
 800aeee:	f040 81e4 	bne.w	800b2ba <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aef8:	4619      	mov	r1, r3
 800aefa:	693a      	ldr	r2, [r7, #16]
 800aefc:	2334      	movs	r3, #52	; 0x34
 800aefe:	fb01 f303 	mul.w	r3, r1, r3
 800af02:	4413      	add	r3, r2
 800af04:	3390      	adds	r3, #144	; 0x90
 800af06:	2201      	movs	r2, #1
 800af08:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af10:	4619      	mov	r1, r3
 800af12:	693a      	ldr	r2, [r7, #16]
 800af14:	2334      	movs	r3, #52	; 0x34
 800af16:	fb01 f303 	mul.w	r3, r1, r3
 800af1a:	4413      	add	r3, r2
 800af1c:	3391      	adds	r3, #145	; 0x91
 800af1e:	2202      	movs	r2, #2
 800af20:	701a      	strb	r2, [r3, #0]
            break;
 800af22:	e1ca      	b.n	800b2ba <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	4619      	mov	r1, r3
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fe66 	bl	800bc00 <USBH_MSC_SCSI_TestUnitReady>
 800af34:	4603      	mov	r3, r0
 800af36:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800af38:	7bbb      	ldrb	r3, [r7, #14]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d149      	bne.n	800afd2 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af44:	4619      	mov	r1, r3
 800af46:	693a      	ldr	r2, [r7, #16]
 800af48:	2334      	movs	r3, #52	; 0x34
 800af4a:	fb01 f303 	mul.w	r3, r1, r3
 800af4e:	4413      	add	r3, r2
 800af50:	3392      	adds	r3, #146	; 0x92
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d00c      	beq.n	800af72 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af5e:	4619      	mov	r1, r3
 800af60:	693a      	ldr	r2, [r7, #16]
 800af62:	2334      	movs	r3, #52	; 0x34
 800af64:	fb01 f303 	mul.w	r3, r1, r3
 800af68:	4413      	add	r3, r2
 800af6a:	33c1      	adds	r3, #193	; 0xc1
 800af6c:	2201      	movs	r2, #1
 800af6e:	701a      	strb	r2, [r3, #0]
 800af70:	e00b      	b.n	800af8a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af78:	4619      	mov	r1, r3
 800af7a:	693a      	ldr	r2, [r7, #16]
 800af7c:	2334      	movs	r3, #52	; 0x34
 800af7e:	fb01 f303 	mul.w	r3, r1, r3
 800af82:	4413      	add	r3, r2
 800af84:	33c1      	adds	r3, #193	; 0xc1
 800af86:	2200      	movs	r2, #0
 800af88:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af90:	4619      	mov	r1, r3
 800af92:	693a      	ldr	r2, [r7, #16]
 800af94:	2334      	movs	r3, #52	; 0x34
 800af96:	fb01 f303 	mul.w	r3, r1, r3
 800af9a:	4413      	add	r3, r2
 800af9c:	3390      	adds	r3, #144	; 0x90
 800af9e:	2203      	movs	r2, #3
 800afa0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afa8:	4619      	mov	r1, r3
 800afaa:	693a      	ldr	r2, [r7, #16]
 800afac:	2334      	movs	r3, #52	; 0x34
 800afae:	fb01 f303 	mul.w	r3, r1, r3
 800afb2:	4413      	add	r3, r2
 800afb4:	3391      	adds	r3, #145	; 0x91
 800afb6:	2200      	movs	r2, #0
 800afb8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afc0:	4619      	mov	r1, r3
 800afc2:	693a      	ldr	r2, [r7, #16]
 800afc4:	2334      	movs	r3, #52	; 0x34
 800afc6:	fb01 f303 	mul.w	r3, r1, r3
 800afca:	4413      	add	r3, r2
 800afcc:	3392      	adds	r3, #146	; 0x92
 800afce:	2200      	movs	r2, #0
 800afd0:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800afd2:	7bbb      	ldrb	r3, [r7, #14]
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d14a      	bne.n	800b06e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afde:	4619      	mov	r1, r3
 800afe0:	693a      	ldr	r2, [r7, #16]
 800afe2:	2334      	movs	r3, #52	; 0x34
 800afe4:	fb01 f303 	mul.w	r3, r1, r3
 800afe8:	4413      	add	r3, r2
 800afea:	3392      	adds	r3, #146	; 0x92
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	2b02      	cmp	r3, #2
 800aff0:	d00c      	beq.n	800b00c <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aff8:	4619      	mov	r1, r3
 800affa:	693a      	ldr	r2, [r7, #16]
 800affc:	2334      	movs	r3, #52	; 0x34
 800affe:	fb01 f303 	mul.w	r3, r1, r3
 800b002:	4413      	add	r3, r2
 800b004:	33c1      	adds	r3, #193	; 0xc1
 800b006:	2201      	movs	r2, #1
 800b008:	701a      	strb	r2, [r3, #0]
 800b00a:	e00b      	b.n	800b024 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b012:	4619      	mov	r1, r3
 800b014:	693a      	ldr	r2, [r7, #16]
 800b016:	2334      	movs	r3, #52	; 0x34
 800b018:	fb01 f303 	mul.w	r3, r1, r3
 800b01c:	4413      	add	r3, r2
 800b01e:	33c1      	adds	r3, #193	; 0xc1
 800b020:	2200      	movs	r2, #0
 800b022:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b02a:	4619      	mov	r1, r3
 800b02c:	693a      	ldr	r2, [r7, #16]
 800b02e:	2334      	movs	r3, #52	; 0x34
 800b030:	fb01 f303 	mul.w	r3, r1, r3
 800b034:	4413      	add	r3, r2
 800b036:	3390      	adds	r3, #144	; 0x90
 800b038:	2205      	movs	r2, #5
 800b03a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b042:	4619      	mov	r1, r3
 800b044:	693a      	ldr	r2, [r7, #16]
 800b046:	2334      	movs	r3, #52	; 0x34
 800b048:	fb01 f303 	mul.w	r3, r1, r3
 800b04c:	4413      	add	r3, r2
 800b04e:	3391      	adds	r3, #145	; 0x91
 800b050:	2201      	movs	r2, #1
 800b052:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b05a:	4619      	mov	r1, r3
 800b05c:	693a      	ldr	r2, [r7, #16]
 800b05e:	2334      	movs	r3, #52	; 0x34
 800b060:	fb01 f303 	mul.w	r3, r1, r3
 800b064:	4413      	add	r3, r2
 800b066:	3392      	adds	r3, #146	; 0x92
 800b068:	2202      	movs	r2, #2
 800b06a:	701a      	strb	r2, [r3, #0]
            break;
 800b06c:	e127      	b.n	800b2be <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800b06e:	7bbb      	ldrb	r3, [r7, #14]
 800b070:	2b04      	cmp	r3, #4
 800b072:	f040 8124 	bne.w	800b2be <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b07c:	4619      	mov	r1, r3
 800b07e:	693a      	ldr	r2, [r7, #16]
 800b080:	2334      	movs	r3, #52	; 0x34
 800b082:	fb01 f303 	mul.w	r3, r1, r3
 800b086:	4413      	add	r3, r2
 800b088:	3390      	adds	r3, #144	; 0x90
 800b08a:	2201      	movs	r2, #1
 800b08c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b094:	4619      	mov	r1, r3
 800b096:	693a      	ldr	r2, [r7, #16]
 800b098:	2334      	movs	r3, #52	; 0x34
 800b09a:	fb01 f303 	mul.w	r3, r1, r3
 800b09e:	4413      	add	r3, r2
 800b0a0:	3391      	adds	r3, #145	; 0x91
 800b0a2:	2202      	movs	r2, #2
 800b0a4:	701a      	strb	r2, [r3, #0]
            break;
 800b0a6:	e10a      	b.n	800b2be <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0ae:	b2d9      	uxtb	r1, r3
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	2334      	movs	r3, #52	; 0x34
 800b0ba:	fb02 f303 	mul.w	r3, r2, r3
 800b0be:	3390      	adds	r3, #144	; 0x90
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	4413      	add	r3, r2
 800b0c4:	3304      	adds	r3, #4
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 fddc 	bl	800bc86 <USBH_MSC_SCSI_ReadCapacity>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b0d2:	7bfb      	ldrb	r3, [r7, #15]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d120      	bne.n	800b11a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0de:	4619      	mov	r1, r3
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	2334      	movs	r3, #52	; 0x34
 800b0e4:	fb01 f303 	mul.w	r3, r1, r3
 800b0e8:	4413      	add	r3, r2
 800b0ea:	3390      	adds	r3, #144	; 0x90
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	693a      	ldr	r2, [r7, #16]
 800b0fa:	2334      	movs	r3, #52	; 0x34
 800b0fc:	fb01 f303 	mul.w	r3, r1, r3
 800b100:	4413      	add	r3, r2
 800b102:	3391      	adds	r3, #145	; 0x91
 800b104:	2200      	movs	r2, #0
 800b106:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b10e:	3301      	adds	r3, #1
 800b110:	b29a      	uxth	r2, r3
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b118:	e0d3      	b.n	800b2c2 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800b11a:	7bfb      	ldrb	r3, [r7, #15]
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	d10c      	bne.n	800b13a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b126:	4619      	mov	r1, r3
 800b128:	693a      	ldr	r2, [r7, #16]
 800b12a:	2334      	movs	r3, #52	; 0x34
 800b12c:	fb01 f303 	mul.w	r3, r1, r3
 800b130:	4413      	add	r3, r2
 800b132:	3390      	adds	r3, #144	; 0x90
 800b134:	2205      	movs	r2, #5
 800b136:	701a      	strb	r2, [r3, #0]
            break;
 800b138:	e0c3      	b.n	800b2c2 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b13a:	7bfb      	ldrb	r3, [r7, #15]
 800b13c:	2b04      	cmp	r3, #4
 800b13e:	f040 80c0 	bne.w	800b2c2 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b148:	4619      	mov	r1, r3
 800b14a:	693a      	ldr	r2, [r7, #16]
 800b14c:	2334      	movs	r3, #52	; 0x34
 800b14e:	fb01 f303 	mul.w	r3, r1, r3
 800b152:	4413      	add	r3, r2
 800b154:	3390      	adds	r3, #144	; 0x90
 800b156:	2201      	movs	r2, #1
 800b158:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b160:	4619      	mov	r1, r3
 800b162:	693a      	ldr	r2, [r7, #16]
 800b164:	2334      	movs	r3, #52	; 0x34
 800b166:	fb01 f303 	mul.w	r3, r1, r3
 800b16a:	4413      	add	r3, r2
 800b16c:	3391      	adds	r3, #145	; 0x91
 800b16e:	2202      	movs	r2, #2
 800b170:	701a      	strb	r2, [r3, #0]
            break;
 800b172:	e0a6      	b.n	800b2c2 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b17a:	b2d9      	uxtb	r1, r3
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b182:	461a      	mov	r2, r3
 800b184:	2334      	movs	r3, #52	; 0x34
 800b186:	fb02 f303 	mul.w	r3, r2, r3
 800b18a:	3398      	adds	r3, #152	; 0x98
 800b18c:	693a      	ldr	r2, [r7, #16]
 800b18e:	4413      	add	r3, r2
 800b190:	3304      	adds	r3, #4
 800b192:	461a      	mov	r2, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 fe96 	bl	800bec6 <USBH_MSC_SCSI_RequestSense>
 800b19a:	4603      	mov	r3, r0
 800b19c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b19e:	7bfb      	ldrb	r3, [r7, #15]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d145      	bne.n	800b230 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	693a      	ldr	r2, [r7, #16]
 800b1ae:	2334      	movs	r3, #52	; 0x34
 800b1b0:	fb01 f303 	mul.w	r3, r1, r3
 800b1b4:	4413      	add	r3, r2
 800b1b6:	339c      	adds	r3, #156	; 0x9c
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	2b06      	cmp	r3, #6
 800b1bc:	d00c      	beq.n	800b1d8 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	693a      	ldr	r2, [r7, #16]
 800b1c8:	2334      	movs	r3, #52	; 0x34
 800b1ca:	fb01 f303 	mul.w	r3, r1, r3
 800b1ce:	4413      	add	r3, r2
 800b1d0:	339c      	adds	r3, #156	; 0x9c
 800b1d2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b1d4:	2b02      	cmp	r3, #2
 800b1d6:	d117      	bne.n	800b208 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b1e4:	1ad3      	subs	r3, r2, r3
 800b1e6:	f242 720f 	movw	r2, #9999	; 0x270f
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d80c      	bhi.n	800b208 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	693a      	ldr	r2, [r7, #16]
 800b1f8:	2334      	movs	r3, #52	; 0x34
 800b1fa:	fb01 f303 	mul.w	r3, r1, r3
 800b1fe:	4413      	add	r3, r2
 800b200:	3390      	adds	r3, #144	; 0x90
 800b202:	2202      	movs	r2, #2
 800b204:	701a      	strb	r2, [r3, #0]
                  break;
 800b206:	e05f      	b.n	800b2c8 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b20e:	4619      	mov	r1, r3
 800b210:	693a      	ldr	r2, [r7, #16]
 800b212:	2334      	movs	r3, #52	; 0x34
 800b214:	fb01 f303 	mul.w	r3, r1, r3
 800b218:	4413      	add	r3, r2
 800b21a:	3390      	adds	r3, #144	; 0x90
 800b21c:	2201      	movs	r2, #1
 800b21e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b226:	3301      	adds	r3, #1
 800b228:	b29a      	uxth	r2, r3
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800b230:	7bfb      	ldrb	r3, [r7, #15]
 800b232:	2b02      	cmp	r3, #2
 800b234:	d10c      	bne.n	800b250 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b23c:	4619      	mov	r1, r3
 800b23e:	693a      	ldr	r2, [r7, #16]
 800b240:	2334      	movs	r3, #52	; 0x34
 800b242:	fb01 f303 	mul.w	r3, r1, r3
 800b246:	4413      	add	r3, r2
 800b248:	3390      	adds	r3, #144	; 0x90
 800b24a:	2208      	movs	r2, #8
 800b24c:	701a      	strb	r2, [r3, #0]
            break;
 800b24e:	e03a      	b.n	800b2c6 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b250:	7bfb      	ldrb	r3, [r7, #15]
 800b252:	2b04      	cmp	r3, #4
 800b254:	d137      	bne.n	800b2c6 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b25c:	4619      	mov	r1, r3
 800b25e:	693a      	ldr	r2, [r7, #16]
 800b260:	2334      	movs	r3, #52	; 0x34
 800b262:	fb01 f303 	mul.w	r3, r1, r3
 800b266:	4413      	add	r3, r2
 800b268:	3390      	adds	r3, #144	; 0x90
 800b26a:	2201      	movs	r2, #1
 800b26c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b274:	4619      	mov	r1, r3
 800b276:	693a      	ldr	r2, [r7, #16]
 800b278:	2334      	movs	r3, #52	; 0x34
 800b27a:	fb01 f303 	mul.w	r3, r1, r3
 800b27e:	4413      	add	r3, r2
 800b280:	3391      	adds	r3, #145	; 0x91
 800b282:	2202      	movs	r2, #2
 800b284:	701a      	strb	r2, [r3, #0]
            break;
 800b286:	e01e      	b.n	800b2c6 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b28e:	3301      	adds	r3, #1
 800b290:	b29a      	uxth	r2, r3
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b298:	e016      	b.n	800b2c8 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b2ae:	2102      	movs	r1, #2
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	4798      	blx	r3
      break;
 800b2b4:	e00c      	b.n	800b2d0 <USBH_MSC_Process+0x514>
            break;
 800b2b6:	bf00      	nop
 800b2b8:	e00a      	b.n	800b2d0 <USBH_MSC_Process+0x514>
            break;
 800b2ba:	bf00      	nop
 800b2bc:	e008      	b.n	800b2d0 <USBH_MSC_Process+0x514>
            break;
 800b2be:	bf00      	nop
 800b2c0:	e006      	b.n	800b2d0 <USBH_MSC_Process+0x514>
            break;
 800b2c2:	bf00      	nop
 800b2c4:	e004      	b.n	800b2d0 <USBH_MSC_Process+0x514>
            break;
 800b2c6:	bf00      	nop
      break;
 800b2c8:	e002      	b.n	800b2d0 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	75fb      	strb	r3, [r7, #23]
      break;
 800b2ce:	bf00      	nop
  }
  return error;
 800b2d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3718      	adds	r7, #24
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop

0800b2dc <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b088      	sub	sp, #32
 800b2f6:	af02      	add	r7, sp, #8
 800b2f8:	6078      	str	r0, [r7, #4]
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b304:	69db      	ldr	r3, [r3, #28]
 800b306:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800b308:	2301      	movs	r3, #1
 800b30a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800b30c:	2301      	movs	r3, #1
 800b30e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800b310:	78fb      	ldrb	r3, [r7, #3]
 800b312:	693a      	ldr	r2, [r7, #16]
 800b314:	2134      	movs	r1, #52	; 0x34
 800b316:	fb01 f303 	mul.w	r3, r1, r3
 800b31a:	4413      	add	r3, r2
 800b31c:	3390      	adds	r3, #144	; 0x90
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	2b07      	cmp	r3, #7
 800b322:	d03c      	beq.n	800b39e <USBH_MSC_RdWrProcess+0xac>
 800b324:	2b07      	cmp	r3, #7
 800b326:	f300 80a7 	bgt.w	800b478 <USBH_MSC_RdWrProcess+0x186>
 800b32a:	2b05      	cmp	r3, #5
 800b32c:	d06c      	beq.n	800b408 <USBH_MSC_RdWrProcess+0x116>
 800b32e:	2b06      	cmp	r3, #6
 800b330:	f040 80a2 	bne.w	800b478 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800b334:	78f9      	ldrb	r1, [r7, #3]
 800b336:	2300      	movs	r3, #0
 800b338:	9300      	str	r3, [sp, #0]
 800b33a:	2300      	movs	r3, #0
 800b33c:	2200      	movs	r2, #0
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 fea5 	bl	800c08e <USBH_MSC_SCSI_Read>
 800b344:	4603      	mov	r3, r0
 800b346:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b348:	7bfb      	ldrb	r3, [r7, #15]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d10b      	bne.n	800b366 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b34e:	78fb      	ldrb	r3, [r7, #3]
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	2134      	movs	r1, #52	; 0x34
 800b354:	fb01 f303 	mul.w	r3, r1, r3
 800b358:	4413      	add	r3, r2
 800b35a:	3390      	adds	r3, #144	; 0x90
 800b35c:	2201      	movs	r2, #1
 800b35e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b360:	2300      	movs	r3, #0
 800b362:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b364:	e08a      	b.n	800b47c <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800b366:	7bfb      	ldrb	r3, [r7, #15]
 800b368:	2b02      	cmp	r3, #2
 800b36a:	d109      	bne.n	800b380 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b36c:	78fb      	ldrb	r3, [r7, #3]
 800b36e:	693a      	ldr	r2, [r7, #16]
 800b370:	2134      	movs	r1, #52	; 0x34
 800b372:	fb01 f303 	mul.w	r3, r1, r3
 800b376:	4413      	add	r3, r2
 800b378:	3390      	adds	r3, #144	; 0x90
 800b37a:	2205      	movs	r2, #5
 800b37c:	701a      	strb	r2, [r3, #0]
      break;
 800b37e:	e07d      	b.n	800b47c <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b380:	7bfb      	ldrb	r3, [r7, #15]
 800b382:	2b04      	cmp	r3, #4
 800b384:	d17a      	bne.n	800b47c <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b386:	78fb      	ldrb	r3, [r7, #3]
 800b388:	693a      	ldr	r2, [r7, #16]
 800b38a:	2134      	movs	r1, #52	; 0x34
 800b38c:	fb01 f303 	mul.w	r3, r1, r3
 800b390:	4413      	add	r3, r2
 800b392:	3390      	adds	r3, #144	; 0x90
 800b394:	2208      	movs	r2, #8
 800b396:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b398:	2302      	movs	r3, #2
 800b39a:	75fb      	strb	r3, [r7, #23]
      break;
 800b39c:	e06e      	b.n	800b47c <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800b39e:	78f9      	ldrb	r1, [r7, #3]
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	9300      	str	r3, [sp, #0]
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 fe05 	bl	800bfb8 <USBH_MSC_SCSI_Write>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b3b2:	7bfb      	ldrb	r3, [r7, #15]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d10b      	bne.n	800b3d0 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b3b8:	78fb      	ldrb	r3, [r7, #3]
 800b3ba:	693a      	ldr	r2, [r7, #16]
 800b3bc:	2134      	movs	r1, #52	; 0x34
 800b3be:	fb01 f303 	mul.w	r3, r1, r3
 800b3c2:	4413      	add	r3, r2
 800b3c4:	3390      	adds	r3, #144	; 0x90
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b3ce:	e057      	b.n	800b480 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800b3d0:	7bfb      	ldrb	r3, [r7, #15]
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d109      	bne.n	800b3ea <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b3d6:	78fb      	ldrb	r3, [r7, #3]
 800b3d8:	693a      	ldr	r2, [r7, #16]
 800b3da:	2134      	movs	r1, #52	; 0x34
 800b3dc:	fb01 f303 	mul.w	r3, r1, r3
 800b3e0:	4413      	add	r3, r2
 800b3e2:	3390      	adds	r3, #144	; 0x90
 800b3e4:	2205      	movs	r2, #5
 800b3e6:	701a      	strb	r2, [r3, #0]
      break;
 800b3e8:	e04a      	b.n	800b480 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b3ea:	7bfb      	ldrb	r3, [r7, #15]
 800b3ec:	2b04      	cmp	r3, #4
 800b3ee:	d147      	bne.n	800b480 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b3f0:	78fb      	ldrb	r3, [r7, #3]
 800b3f2:	693a      	ldr	r2, [r7, #16]
 800b3f4:	2134      	movs	r1, #52	; 0x34
 800b3f6:	fb01 f303 	mul.w	r3, r1, r3
 800b3fa:	4413      	add	r3, r2
 800b3fc:	3390      	adds	r3, #144	; 0x90
 800b3fe:	2208      	movs	r2, #8
 800b400:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b402:	2302      	movs	r3, #2
 800b404:	75fb      	strb	r3, [r7, #23]
      break;
 800b406:	e03b      	b.n	800b480 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800b408:	78fb      	ldrb	r3, [r7, #3]
 800b40a:	2234      	movs	r2, #52	; 0x34
 800b40c:	fb02 f303 	mul.w	r3, r2, r3
 800b410:	3398      	adds	r3, #152	; 0x98
 800b412:	693a      	ldr	r2, [r7, #16]
 800b414:	4413      	add	r3, r2
 800b416:	1d1a      	adds	r2, r3, #4
 800b418:	78fb      	ldrb	r3, [r7, #3]
 800b41a:	4619      	mov	r1, r3
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 fd52 	bl	800bec6 <USBH_MSC_SCSI_RequestSense>
 800b422:	4603      	mov	r3, r0
 800b424:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b426:	7bfb      	ldrb	r3, [r7, #15]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d113      	bne.n	800b454 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b42c:	78fb      	ldrb	r3, [r7, #3]
 800b42e:	693a      	ldr	r2, [r7, #16]
 800b430:	2134      	movs	r1, #52	; 0x34
 800b432:	fb01 f303 	mul.w	r3, r1, r3
 800b436:	4413      	add	r3, r2
 800b438:	3390      	adds	r3, #144	; 0x90
 800b43a:	2201      	movs	r2, #1
 800b43c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800b43e:	78fb      	ldrb	r3, [r7, #3]
 800b440:	693a      	ldr	r2, [r7, #16]
 800b442:	2134      	movs	r1, #52	; 0x34
 800b444:	fb01 f303 	mul.w	r3, r1, r3
 800b448:	4413      	add	r3, r2
 800b44a:	3391      	adds	r3, #145	; 0x91
 800b44c:	2202      	movs	r2, #2
 800b44e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800b450:	2302      	movs	r3, #2
 800b452:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800b454:	7bfb      	ldrb	r3, [r7, #15]
 800b456:	2b02      	cmp	r3, #2
 800b458:	d014      	beq.n	800b484 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b45a:	7bfb      	ldrb	r3, [r7, #15]
 800b45c:	2b04      	cmp	r3, #4
 800b45e:	d111      	bne.n	800b484 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b460:	78fb      	ldrb	r3, [r7, #3]
 800b462:	693a      	ldr	r2, [r7, #16]
 800b464:	2134      	movs	r1, #52	; 0x34
 800b466:	fb01 f303 	mul.w	r3, r1, r3
 800b46a:	4413      	add	r3, r2
 800b46c:	3390      	adds	r3, #144	; 0x90
 800b46e:	2208      	movs	r2, #8
 800b470:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b472:	2302      	movs	r3, #2
 800b474:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b476:	e005      	b.n	800b484 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800b478:	bf00      	nop
 800b47a:	e004      	b.n	800b486 <USBH_MSC_RdWrProcess+0x194>
      break;
 800b47c:	bf00      	nop
 800b47e:	e002      	b.n	800b486 <USBH_MSC_RdWrProcess+0x194>
      break;
 800b480:	bf00      	nop
 800b482:	e000      	b.n	800b486 <USBH_MSC_RdWrProcess+0x194>
      break;
 800b484:	bf00      	nop

  }
  return error;
 800b486:	7dfb      	ldrb	r3, [r7, #23]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3718      	adds	r7, #24
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b490:	b480      	push	{r7}
 800b492:	b085      	sub	sp, #20
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	460b      	mov	r3, r1
 800b49a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4a2:	69db      	ldr	r3, [r3, #28]
 800b4a4:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	2b0b      	cmp	r3, #11
 800b4ae:	d10c      	bne.n	800b4ca <USBH_MSC_UnitIsReady+0x3a>
 800b4b0:	78fb      	ldrb	r3, [r7, #3]
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	2134      	movs	r1, #52	; 0x34
 800b4b6:	fb01 f303 	mul.w	r3, r1, r3
 800b4ba:	4413      	add	r3, r2
 800b4bc:	3391      	adds	r3, #145	; 0x91
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d102      	bne.n	800b4ca <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	73fb      	strb	r3, [r7, #15]
 800b4c8:	e001      	b.n	800b4ce <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b4ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3714      	adds	r7, #20
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b086      	sub	sp, #24
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	60f8      	str	r0, [r7, #12]
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	607a      	str	r2, [r7, #4]
 800b4e8:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4f0:	69db      	ldr	r3, [r3, #28]
 800b4f2:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	2b0b      	cmp	r3, #11
 800b4fc:	d10d      	bne.n	800b51a <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800b4fe:	7afb      	ldrb	r3, [r7, #11]
 800b500:	2234      	movs	r2, #52	; 0x34
 800b502:	fb02 f303 	mul.w	r3, r2, r3
 800b506:	3390      	adds	r3, #144	; 0x90
 800b508:	697a      	ldr	r2, [r7, #20]
 800b50a:	4413      	add	r3, r2
 800b50c:	2234      	movs	r2, #52	; 0x34
 800b50e:	4619      	mov	r1, r3
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f006 f9cd 	bl	80118b0 <memcpy>
    return USBH_OK;
 800b516:	2300      	movs	r3, #0
 800b518:	e000      	b.n	800b51c <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800b51a:	2302      	movs	r3, #2
  }
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3718      	adds	r7, #24
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b088      	sub	sp, #32
 800b528:	af02      	add	r7, sp, #8
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	607a      	str	r2, [r7, #4]
 800b52e:	603b      	str	r3, [r7, #0]
 800b530:	460b      	mov	r3, r1
 800b532:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b53a:	69db      	ldr	r3, [r3, #28]
 800b53c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b544:	b2db      	uxtb	r3, r3
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00e      	beq.n	800b568 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800b550:	2b0b      	cmp	r3, #11
 800b552:	d109      	bne.n	800b568 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b554:	7afb      	ldrb	r3, [r7, #11]
 800b556:	697a      	ldr	r2, [r7, #20]
 800b558:	2134      	movs	r1, #52	; 0x34
 800b55a:	fb01 f303 	mul.w	r3, r1, r3
 800b55e:	4413      	add	r3, r2
 800b560:	3390      	adds	r3, #144	; 0x90
 800b562:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b564:	2b01      	cmp	r3, #1
 800b566:	d001      	beq.n	800b56c <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800b568:	2302      	movs	r3, #2
 800b56a:	e040      	b.n	800b5ee <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	2206      	movs	r2, #6
 800b570:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800b572:	7afb      	ldrb	r3, [r7, #11]
 800b574:	697a      	ldr	r2, [r7, #20]
 800b576:	2134      	movs	r1, #52	; 0x34
 800b578:	fb01 f303 	mul.w	r3, r1, r3
 800b57c:	4413      	add	r3, r2
 800b57e:	3390      	adds	r3, #144	; 0x90
 800b580:	2206      	movs	r2, #6
 800b582:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800b584:	7afb      	ldrb	r3, [r7, #11]
 800b586:	b29a      	uxth	r2, r3
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800b58e:	7af9      	ldrb	r1, [r7, #11]
 800b590:	6a3b      	ldr	r3, [r7, #32]
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f000 fd78 	bl	800c08e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b5a4:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b5a6:	e016      	b.n	800b5d6 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	1ad2      	subs	r2, r2, r3
 800b5b2:	6a3b      	ldr	r3, [r7, #32]
 800b5b4:	f242 7110 	movw	r1, #10000	; 0x2710
 800b5b8:	fb01 f303 	mul.w	r3, r1, r3
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d805      	bhi.n	800b5cc <USBH_MSC_Read+0xa8>
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d104      	bne.n	800b5d6 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b5d2:	2302      	movs	r3, #2
 800b5d4:	e00b      	b.n	800b5ee <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b5d6:	7afb      	ldrb	r3, [r7, #11]
 800b5d8:	4619      	mov	r1, r3
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f7ff fe89 	bl	800b2f2 <USBH_MSC_RdWrProcess>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d0e0      	beq.n	800b5a8 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800b5ec:	2300      	movs	r3, #0
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3718      	adds	r7, #24
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b088      	sub	sp, #32
 800b5fa:	af02      	add	r7, sp, #8
 800b5fc:	60f8      	str	r0, [r7, #12]
 800b5fe:	607a      	str	r2, [r7, #4]
 800b600:	603b      	str	r3, [r7, #0]
 800b602:	460b      	mov	r3, r1
 800b604:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b60c:	69db      	ldr	r3, [r3, #28]
 800b60e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b616:	b2db      	uxtb	r3, r3
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d00e      	beq.n	800b63a <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800b622:	2b0b      	cmp	r3, #11
 800b624:	d109      	bne.n	800b63a <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b626:	7afb      	ldrb	r3, [r7, #11]
 800b628:	697a      	ldr	r2, [r7, #20]
 800b62a:	2134      	movs	r1, #52	; 0x34
 800b62c:	fb01 f303 	mul.w	r3, r1, r3
 800b630:	4413      	add	r3, r2
 800b632:	3390      	adds	r3, #144	; 0x90
 800b634:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b636:	2b01      	cmp	r3, #1
 800b638:	d001      	beq.n	800b63e <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800b63a:	2302      	movs	r3, #2
 800b63c:	e040      	b.n	800b6c0 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	2207      	movs	r2, #7
 800b642:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800b644:	7afb      	ldrb	r3, [r7, #11]
 800b646:	697a      	ldr	r2, [r7, #20]
 800b648:	2134      	movs	r1, #52	; 0x34
 800b64a:	fb01 f303 	mul.w	r3, r1, r3
 800b64e:	4413      	add	r3, r2
 800b650:	3390      	adds	r3, #144	; 0x90
 800b652:	2207      	movs	r2, #7
 800b654:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800b656:	7afb      	ldrb	r3, [r7, #11]
 800b658:	b29a      	uxth	r2, r3
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800b660:	7af9      	ldrb	r1, [r7, #11]
 800b662:	6a3b      	ldr	r3, [r7, #32]
 800b664:	9300      	str	r3, [sp, #0]
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f000 fca4 	bl	800bfb8 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b676:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b678:	e016      	b.n	800b6a8 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	1ad2      	subs	r2, r2, r3
 800b684:	6a3b      	ldr	r3, [r7, #32]
 800b686:	f242 7110 	movw	r1, #10000	; 0x2710
 800b68a:	fb01 f303 	mul.w	r3, r1, r3
 800b68e:	429a      	cmp	r2, r3
 800b690:	d805      	bhi.n	800b69e <USBH_MSC_Write+0xa8>
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d104      	bne.n	800b6a8 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b6a4:	2302      	movs	r3, #2
 800b6a6:	e00b      	b.n	800b6c0 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b6a8:	7afb      	ldrb	r3, [r7, #11]
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f7ff fe20 	bl	800b2f2 <USBH_MSC_RdWrProcess>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d0e0      	beq.n	800b67a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3718      	adds	r7, #24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2221      	movs	r2, #33	; 0x21
 800b6d4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	22ff      	movs	r2, #255	; 0xff
 800b6da:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f001 fea6 	bl	800d444 <USBH_CtlReq>
 800b6f8:	4603      	mov	r3, r0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3708      	adds	r7, #8
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}

0800b702 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800b702:	b580      	push	{r7, lr}
 800b704:	b082      	sub	sp, #8
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
 800b70a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	22a1      	movs	r2, #161	; 0xa1
 800b710:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	22fe      	movs	r2, #254	; 0xfe
 800b716:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2200      	movs	r2, #0
 800b71c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800b72a:	2201      	movs	r2, #1
 800b72c:	6839      	ldr	r1, [r7, #0]
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f001 fe88 	bl	800d444 <USBH_CtlReq>
 800b734:	4603      	mov	r3, r0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3708      	adds	r7, #8
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
	...

0800b740 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800b740:	b480      	push	{r7}
 800b742:	b085      	sub	sp, #20
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b74e:	69db      	ldr	r3, [r3, #28]
 800b750:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	4a09      	ldr	r2, [pc, #36]	; (800b77c <USBH_MSC_BOT_Init+0x3c>)
 800b756:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	4a09      	ldr	r2, [pc, #36]	; (800b780 <USBH_MSC_BOT_Init+0x40>)
 800b75c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2201      	movs	r2, #1
 800b762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2201      	movs	r2, #1
 800b76a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	3714      	adds	r7, #20
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr
 800b77c:	43425355 	.word	0x43425355
 800b780:	20304050 	.word	0x20304050

0800b784 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b088      	sub	sp, #32
 800b788:	af02      	add	r7, sp, #8
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	460b      	mov	r3, r1
 800b78e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800b790:	2301      	movs	r3, #1
 800b792:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800b794:	2301      	movs	r3, #1
 800b796:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800b798:	2301      	movs	r3, #1
 800b79a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b79c:	2300      	movs	r3, #0
 800b79e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7a6:	69db      	ldr	r3, [r3, #28]
 800b7a8:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	2b0a      	cmp	r3, #10
 800b7b8:	f200 819e 	bhi.w	800baf8 <USBH_MSC_BOT_Process+0x374>
 800b7bc:	a201      	add	r2, pc, #4	; (adr r2, 800b7c4 <USBH_MSC_BOT_Process+0x40>)
 800b7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c2:	bf00      	nop
 800b7c4:	0800b7f1 	.word	0x0800b7f1
 800b7c8:	0800b819 	.word	0x0800b819
 800b7cc:	0800b883 	.word	0x0800b883
 800b7d0:	0800b8a1 	.word	0x0800b8a1
 800b7d4:	0800b925 	.word	0x0800b925
 800b7d8:	0800b947 	.word	0x0800b947
 800b7dc:	0800b9df 	.word	0x0800b9df
 800b7e0:	0800b9fb 	.word	0x0800b9fb
 800b7e4:	0800ba4d 	.word	0x0800ba4d
 800b7e8:	0800ba7d 	.word	0x0800ba7d
 800b7ec:	0800badf 	.word	0x0800badf
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	78fa      	ldrb	r2, [r7, #3]
 800b7f4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	2202      	movs	r2, #2
 800b7fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	795b      	ldrb	r3, [r3, #5]
 800b80a:	2201      	movs	r2, #1
 800b80c:	9200      	str	r2, [sp, #0]
 800b80e:	221f      	movs	r2, #31
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f002 f826 	bl	800d862 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800b816:	e17e      	b.n	800bb16 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	795b      	ldrb	r3, [r3, #5]
 800b81c:	4619      	mov	r1, r3
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f005 fe3e 	bl	80114a0 <USBH_LL_GetURBState>
 800b824:	4603      	mov	r3, r0
 800b826:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b828:	7d3b      	ldrb	r3, [r7, #20]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d118      	bne.n	800b860 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00f      	beq.n	800b856 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800b83c:	b25b      	sxtb	r3, r3
 800b83e:	2b00      	cmp	r3, #0
 800b840:	da04      	bge.n	800b84c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	2203      	movs	r2, #3
 800b846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b84a:	e157      	b.n	800bafc <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	2205      	movs	r2, #5
 800b850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b854:	e152      	b.n	800bafc <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	2207      	movs	r2, #7
 800b85a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b85e:	e14d      	b.n	800bafc <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b860:	7d3b      	ldrb	r3, [r7, #20]
 800b862:	2b02      	cmp	r3, #2
 800b864:	d104      	bne.n	800b870 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	2201      	movs	r2, #1
 800b86a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b86e:	e145      	b.n	800bafc <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800b870:	7d3b      	ldrb	r3, [r7, #20]
 800b872:	2b05      	cmp	r3, #5
 800b874:	f040 8142 	bne.w	800bafc <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	220a      	movs	r2, #10
 800b87c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b880:	e13c      	b.n	800bafc <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	895a      	ldrh	r2, [r3, #10]
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	791b      	ldrb	r3, [r3, #4]
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f002 f80b 	bl	800d8ac <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	2204      	movs	r2, #4
 800b89a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800b89e:	e13a      	b.n	800bb16 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	791b      	ldrb	r3, [r3, #4]
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f005 fdfa 	bl	80114a0 <USBH_LL_GetURBState>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b8b0:	7d3b      	ldrb	r3, [r7, #20]
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d12d      	bne.n	800b912 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8ba:	693a      	ldr	r2, [r7, #16]
 800b8bc:	8952      	ldrh	r2, [r2, #10]
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d910      	bls.n	800b8e4 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8c8:	693a      	ldr	r2, [r7, #16]
 800b8ca:	8952      	ldrh	r2, [r2, #10]
 800b8cc:	441a      	add	r2, r3
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8d8:	693a      	ldr	r2, [r7, #16]
 800b8da:	8952      	ldrh	r2, [r2, #10]
 800b8dc:	1a9a      	subs	r2, r3, r2
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	65da      	str	r2, [r3, #92]	; 0x5c
 800b8e2:	e002      	b.n	800b8ea <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00a      	beq.n	800b908 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	895a      	ldrh	r2, [r3, #10]
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	791b      	ldrb	r3, [r3, #4]
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f001 ffd3 	bl	800d8ac <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800b906:	e0fb      	b.n	800bb00 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	2207      	movs	r2, #7
 800b90c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b910:	e0f6      	b.n	800bb00 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800b912:	7d3b      	ldrb	r3, [r7, #20]
 800b914:	2b05      	cmp	r3, #5
 800b916:	f040 80f3 	bne.w	800bb00 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	2209      	movs	r2, #9
 800b91e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b922:	e0ed      	b.n	800bb00 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	891a      	ldrh	r2, [r3, #8]
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	795b      	ldrb	r3, [r3, #5]
 800b932:	2001      	movs	r0, #1
 800b934:	9000      	str	r0, [sp, #0]
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f001 ff93 	bl	800d862 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	2206      	movs	r2, #6
 800b940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b944:	e0e7      	b.n	800bb16 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	795b      	ldrb	r3, [r3, #5]
 800b94a:	4619      	mov	r1, r3
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f005 fda7 	bl	80114a0 <USBH_LL_GetURBState>
 800b952:	4603      	mov	r3, r0
 800b954:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b956:	7d3b      	ldrb	r3, [r7, #20]
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d12f      	bne.n	800b9bc <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b960:	693a      	ldr	r2, [r7, #16]
 800b962:	8912      	ldrh	r2, [r2, #8]
 800b964:	4293      	cmp	r3, r2
 800b966:	d910      	bls.n	800b98a <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b96e:	693a      	ldr	r2, [r7, #16]
 800b970:	8912      	ldrh	r2, [r2, #8]
 800b972:	441a      	add	r2, r3
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b97e:	693a      	ldr	r2, [r7, #16]
 800b980:	8912      	ldrh	r2, [r2, #8]
 800b982:	1a9a      	subs	r2, r3, r2
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	65da      	str	r2, [r3, #92]	; 0x5c
 800b988:	e002      	b.n	800b990 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	2200      	movs	r2, #0
 800b98e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b994:	2b00      	cmp	r3, #0
 800b996:	d00c      	beq.n	800b9b2 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	891a      	ldrh	r2, [r3, #8]
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	795b      	ldrb	r3, [r3, #5]
 800b9a6:	2001      	movs	r0, #1
 800b9a8:	9000      	str	r0, [sp, #0]
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f001 ff59 	bl	800d862 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800b9b0:	e0a8      	b.n	800bb04 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	2207      	movs	r2, #7
 800b9b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b9ba:	e0a3      	b.n	800bb04 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b9bc:	7d3b      	ldrb	r3, [r7, #20]
 800b9be:	2b02      	cmp	r3, #2
 800b9c0:	d104      	bne.n	800b9cc <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	2205      	movs	r2, #5
 800b9c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b9ca:	e09b      	b.n	800bb04 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800b9cc:	7d3b      	ldrb	r3, [r7, #20]
 800b9ce:	2b05      	cmp	r3, #5
 800b9d0:	f040 8098 	bne.w	800bb04 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	220a      	movs	r2, #10
 800b9d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b9dc:	e092      	b.n	800bb04 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	791b      	ldrb	r3, [r3, #4]
 800b9e8:	220d      	movs	r2, #13
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f001 ff5e 	bl	800d8ac <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	2208      	movs	r2, #8
 800b9f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b9f8:	e08d      	b.n	800bb16 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	791b      	ldrb	r3, [r3, #4]
 800b9fe:	4619      	mov	r1, r3
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f005 fd4d 	bl	80114a0 <USBH_LL_GetURBState>
 800ba06:	4603      	mov	r3, r0
 800ba08:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800ba0a:	7d3b      	ldrb	r3, [r7, #20]
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d115      	bne.n	800ba3c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	2201      	movs	r2, #1
 800ba14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 f8a9 	bl	800bb78 <USBH_MSC_DecodeCSW>
 800ba26:	4603      	mov	r3, r0
 800ba28:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800ba2a:	7d7b      	ldrb	r3, [r7, #21]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d102      	bne.n	800ba36 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800ba34:	e068      	b.n	800bb08 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800ba36:	2302      	movs	r3, #2
 800ba38:	75fb      	strb	r3, [r7, #23]
      break;
 800ba3a:	e065      	b.n	800bb08 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800ba3c:	7d3b      	ldrb	r3, [r7, #20]
 800ba3e:	2b05      	cmp	r3, #5
 800ba40:	d162      	bne.n	800bb08 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	2209      	movs	r2, #9
 800ba46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ba4a:	e05d      	b.n	800bb08 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800ba4c:	78fb      	ldrb	r3, [r7, #3]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	4619      	mov	r1, r3
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 f864 	bl	800bb20 <USBH_MSC_BOT_Abort>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800ba5c:	7dbb      	ldrb	r3, [r7, #22]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d104      	bne.n	800ba6c <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	2207      	movs	r2, #7
 800ba66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800ba6a:	e04f      	b.n	800bb0c <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800ba6c:	7dbb      	ldrb	r3, [r7, #22]
 800ba6e:	2b04      	cmp	r3, #4
 800ba70:	d14c      	bne.n	800bb0c <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	220b      	movs	r2, #11
 800ba76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ba7a:	e047      	b.n	800bb0c <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800ba7c:	78fb      	ldrb	r3, [r7, #3]
 800ba7e:	2201      	movs	r2, #1
 800ba80:	4619      	mov	r1, r3
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 f84c 	bl	800bb20 <USBH_MSC_BOT_Abort>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800ba8c:	7dbb      	ldrb	r3, [r7, #22]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d11d      	bne.n	800bace <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	795b      	ldrb	r3, [r3, #5]
 800ba96:	4619      	mov	r1, r3
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f005 fd5b 	bl	8011554 <USBH_LL_GetToggle>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	7959      	ldrb	r1, [r3, #5]
 800baa6:	7bfb      	ldrb	r3, [r7, #15]
 800baa8:	f1c3 0301 	rsb	r3, r3, #1
 800baac:	b2db      	uxtb	r3, r3
 800baae:	461a      	mov	r2, r3
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f005 fd1f 	bl	80114f4 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	791b      	ldrb	r3, [r3, #4]
 800baba:	2200      	movs	r2, #0
 800babc:	4619      	mov	r1, r3
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f005 fd18 	bl	80114f4 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	2209      	movs	r2, #9
 800bac8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800bacc:	e020      	b.n	800bb10 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800bace:	7dbb      	ldrb	r3, [r7, #22]
 800bad0:	2b04      	cmp	r3, #4
 800bad2:	d11d      	bne.n	800bb10 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	220b      	movs	r2, #11
 800bad8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800badc:	e018      	b.n	800bb10 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f7ff fdf2 	bl	800b6c8 <USBH_MSC_BOT_REQ_Reset>
 800bae4:	4603      	mov	r3, r0
 800bae6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800bae8:	7dfb      	ldrb	r3, [r7, #23]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d112      	bne.n	800bb14 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	2201      	movs	r2, #1
 800baf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800baf6:	e00d      	b.n	800bb14 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800baf8:	bf00      	nop
 800bafa:	e00c      	b.n	800bb16 <USBH_MSC_BOT_Process+0x392>
      break;
 800bafc:	bf00      	nop
 800bafe:	e00a      	b.n	800bb16 <USBH_MSC_BOT_Process+0x392>
      break;
 800bb00:	bf00      	nop
 800bb02:	e008      	b.n	800bb16 <USBH_MSC_BOT_Process+0x392>
      break;
 800bb04:	bf00      	nop
 800bb06:	e006      	b.n	800bb16 <USBH_MSC_BOT_Process+0x392>
      break;
 800bb08:	bf00      	nop
 800bb0a:	e004      	b.n	800bb16 <USBH_MSC_BOT_Process+0x392>
      break;
 800bb0c:	bf00      	nop
 800bb0e:	e002      	b.n	800bb16 <USBH_MSC_BOT_Process+0x392>
      break;
 800bb10:	bf00      	nop
 800bb12:	e000      	b.n	800bb16 <USBH_MSC_BOT_Process+0x392>
      break;
 800bb14:	bf00      	nop
  }
  return status;
 800bb16:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3718      	adds	r7, #24
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	460b      	mov	r3, r1
 800bb2a:	70fb      	strb	r3, [r7, #3]
 800bb2c:	4613      	mov	r3, r2
 800bb2e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800bb30:	2302      	movs	r3, #2
 800bb32:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb3a:	69db      	ldr	r3, [r3, #28]
 800bb3c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800bb3e:	78bb      	ldrb	r3, [r7, #2]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d002      	beq.n	800bb4a <USBH_MSC_BOT_Abort+0x2a>
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d009      	beq.n	800bb5c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800bb48:	e011      	b.n	800bb6e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	79db      	ldrb	r3, [r3, #7]
 800bb4e:	4619      	mov	r1, r3
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f001 f9a8 	bl	800cea6 <USBH_ClrFeature>
 800bb56:	4603      	mov	r3, r0
 800bb58:	73fb      	strb	r3, [r7, #15]
      break;
 800bb5a:	e008      	b.n	800bb6e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	799b      	ldrb	r3, [r3, #6]
 800bb60:	4619      	mov	r1, r3
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f001 f99f 	bl	800cea6 <USBH_ClrFeature>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb6c:	bf00      	nop
  }
  return status;
 800bb6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3710      	adds	r7, #16
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb86:	69db      	ldr	r3, [r3, #28]
 800bb88:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	791b      	ldrb	r3, [r3, #4]
 800bb92:	4619      	mov	r1, r3
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f005 fbf1 	bl	801137c <USBH_LL_GetLastXferSize>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b0d      	cmp	r3, #13
 800bb9e:	d002      	beq.n	800bba6 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800bba0:	2302      	movs	r3, #2
 800bba2:	73fb      	strb	r3, [r7, #15]
 800bba4:	e024      	b.n	800bbf0 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbaa:	4a14      	ldr	r2, [pc, #80]	; (800bbfc <USBH_MSC_DecodeCSW+0x84>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d11d      	bne.n	800bbec <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d119      	bne.n	800bbf0 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d102      	bne.n	800bbcc <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	73fb      	strb	r3, [r7, #15]
 800bbca:	e011      	b.n	800bbf0 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d102      	bne.n	800bbdc <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	73fb      	strb	r3, [r7, #15]
 800bbda:	e009      	b.n	800bbf0 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	d104      	bne.n	800bbf0 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800bbe6:	2302      	movs	r3, #2
 800bbe8:	73fb      	strb	r3, [r7, #15]
 800bbea:	e001      	b.n	800bbf0 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800bbec:	2302      	movs	r3, #2
 800bbee:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	53425355 	.word	0x53425355

0800bc00 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	460b      	mov	r3, r1
 800bc0a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800bc0c:	2302      	movs	r3, #2
 800bc0e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc16:	69db      	ldr	r3, [r3, #28]
 800bc18:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d002      	beq.n	800bc2a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800bc24:	2b02      	cmp	r3, #2
 800bc26:	d021      	beq.n	800bc6c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800bc28:	e028      	b.n	800bc7c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	2200      	movs	r2, #0
 800bc34:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	220a      	movs	r2, #10
 800bc3c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	3363      	adds	r3, #99	; 0x63
 800bc44:	2210      	movs	r2, #16
 800bc46:	2100      	movs	r1, #0
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f005 fdc3 	bl	80117d4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	2200      	movs	r2, #0
 800bc52:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	2202      	movs	r2, #2
 800bc62:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800bc66:	2301      	movs	r3, #1
 800bc68:	73fb      	strb	r3, [r7, #15]
      break;
 800bc6a:	e007      	b.n	800bc7c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bc6c:	78fb      	ldrb	r3, [r7, #3]
 800bc6e:	4619      	mov	r1, r3
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f7ff fd87 	bl	800b784 <USBH_MSC_BOT_Process>
 800bc76:	4603      	mov	r3, r0
 800bc78:	73fb      	strb	r3, [r7, #15]
      break;
 800bc7a:	bf00      	nop
  }

  return error;
 800bc7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3710      	adds	r7, #16
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b086      	sub	sp, #24
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	60f8      	str	r0, [r7, #12]
 800bc8e:	460b      	mov	r3, r1
 800bc90:	607a      	str	r2, [r7, #4]
 800bc92:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800bc94:	2301      	movs	r3, #1
 800bc96:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc9e:	69db      	ldr	r3, [r3, #28]
 800bca0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d002      	beq.n	800bcb2 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800bcac:	2b02      	cmp	r3, #2
 800bcae:	d027      	beq.n	800bd00 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800bcb0:	e05f      	b.n	800bd72 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	2208      	movs	r2, #8
 800bcb6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	2280      	movs	r2, #128	; 0x80
 800bcbc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	220a      	movs	r2, #10
 800bcc4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	3363      	adds	r3, #99	; 0x63
 800bccc:	2210      	movs	r2, #16
 800bcce:	2100      	movs	r1, #0
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f005 fd7f 	bl	80117d4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	2225      	movs	r2, #37	; 0x25
 800bcda:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	2201      	movs	r2, #1
 800bce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	2202      	movs	r2, #2
 800bcea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	f103 0210 	add.w	r2, r3, #16
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	75fb      	strb	r3, [r7, #23]
      break;
 800bcfe:	e038      	b.n	800bd72 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bd00:	7afb      	ldrb	r3, [r7, #11]
 800bd02:	4619      	mov	r1, r3
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f7ff fd3d 	bl	800b784 <USBH_MSC_BOT_Process>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800bd0e:	7dfb      	ldrb	r3, [r7, #23]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d12d      	bne.n	800bd70 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd1a:	3303      	adds	r3, #3
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	461a      	mov	r2, r3
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd26:	3302      	adds	r3, #2
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	021b      	lsls	r3, r3, #8
 800bd2c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd34:	3301      	adds	r3, #1
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bd3a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	061b      	lsls	r3, r3, #24
 800bd46:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd52:	3307      	adds	r3, #7
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd5e:	3306      	adds	r3, #6
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	021b      	lsls	r3, r3, #8
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	b29a      	uxth	r2, r3
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	809a      	strh	r2, [r3, #4]
      break;
 800bd70:	bf00      	nop
  }

  return error;
 800bd72:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3718      	adds	r7, #24
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b086      	sub	sp, #24
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	460b      	mov	r3, r1
 800bd86:	607a      	str	r2, [r7, #4]
 800bd88:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800bd8a:	2302      	movs	r3, #2
 800bd8c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd94:	69db      	ldr	r3, [r3, #28]
 800bd96:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d002      	beq.n	800bda8 <USBH_MSC_SCSI_Inquiry+0x2c>
 800bda2:	2b02      	cmp	r3, #2
 800bda4:	d03d      	beq.n	800be22 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800bda6:	e089      	b.n	800bebc <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	2224      	movs	r2, #36	; 0x24
 800bdac:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	2280      	movs	r2, #128	; 0x80
 800bdb2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	220a      	movs	r2, #10
 800bdba:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	3363      	adds	r3, #99	; 0x63
 800bdc2:	220a      	movs	r2, #10
 800bdc4:	2100      	movs	r1, #0
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f005 fd04 	bl	80117d4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	2212      	movs	r2, #18
 800bdd0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800bdd4:	7afb      	ldrb	r3, [r7, #11]
 800bdd6:	015b      	lsls	r3, r3, #5
 800bdd8:	b2da      	uxtb	r2, r3
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	2200      	movs	r2, #0
 800bdec:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	2224      	movs	r2, #36	; 0x24
 800bdf4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	2201      	movs	r2, #1
 800be04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	2202      	movs	r2, #2
 800be0c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	f103 0210 	add.w	r2, r3, #16
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800be1c:	2301      	movs	r3, #1
 800be1e:	75fb      	strb	r3, [r7, #23]
      break;
 800be20:	e04c      	b.n	800bebc <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800be22:	7afb      	ldrb	r3, [r7, #11]
 800be24:	4619      	mov	r1, r3
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f7ff fcac 	bl	800b784 <USBH_MSC_BOT_Process>
 800be2c:	4603      	mov	r3, r0
 800be2e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800be30:	7dfb      	ldrb	r3, [r7, #23]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d141      	bne.n	800beba <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800be36:	2222      	movs	r2, #34	; 0x22
 800be38:	2100      	movs	r1, #0
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f005 fcca 	bl	80117d4 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	f003 031f 	and.w	r3, r3, #31
 800be4c:	b2da      	uxtb	r2, r3
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	095b      	lsrs	r3, r3, #5
 800be5c:	b2da      	uxtb	r2, r3
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be68:	3301      	adds	r3, #1
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	b25b      	sxtb	r3, r3
 800be6e:	2b00      	cmp	r3, #0
 800be70:	da03      	bge.n	800be7a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2201      	movs	r2, #1
 800be76:	709a      	strb	r2, [r3, #2]
 800be78:	e002      	b.n	800be80 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2200      	movs	r2, #0
 800be7e:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	1cd8      	adds	r0, r3, #3
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be8a:	3308      	adds	r3, #8
 800be8c:	2208      	movs	r2, #8
 800be8e:	4619      	mov	r1, r3
 800be90:	f005 fd0e 	bl	80118b0 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f103 000c 	add.w	r0, r3, #12
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bea0:	3310      	adds	r3, #16
 800bea2:	2210      	movs	r2, #16
 800bea4:	4619      	mov	r1, r3
 800bea6:	f005 fd03 	bl	80118b0 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	331d      	adds	r3, #29
 800beae:	693a      	ldr	r2, [r7, #16]
 800beb0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800beb4:	3220      	adds	r2, #32
 800beb6:	6812      	ldr	r2, [r2, #0]
 800beb8:	601a      	str	r2, [r3, #0]
      break;
 800beba:	bf00      	nop
  }

  return error;
 800bebc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3718      	adds	r7, #24
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b086      	sub	sp, #24
 800beca:	af00      	add	r7, sp, #0
 800becc:	60f8      	str	r0, [r7, #12]
 800bece:	460b      	mov	r3, r1
 800bed0:	607a      	str	r2, [r7, #4]
 800bed2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800bed4:	2302      	movs	r3, #2
 800bed6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bede:	69db      	ldr	r3, [r3, #28]
 800bee0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d002      	beq.n	800bef2 <USBH_MSC_SCSI_RequestSense+0x2c>
 800beec:	2b02      	cmp	r3, #2
 800beee:	d03d      	beq.n	800bf6c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800bef0:	e05d      	b.n	800bfae <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	220e      	movs	r2, #14
 800bef6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	2280      	movs	r2, #128	; 0x80
 800befc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	220a      	movs	r2, #10
 800bf04:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	3363      	adds	r3, #99	; 0x63
 800bf0c:	2210      	movs	r2, #16
 800bf0e:	2100      	movs	r1, #0
 800bf10:	4618      	mov	r0, r3
 800bf12:	f005 fc5f 	bl	80117d4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	2203      	movs	r2, #3
 800bf1a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800bf1e:	7afb      	ldrb	r3, [r7, #11]
 800bf20:	015b      	lsls	r3, r3, #5
 800bf22:	b2da      	uxtb	r2, r3
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	2200      	movs	r2, #0
 800bf36:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	220e      	movs	r2, #14
 800bf3e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	2200      	movs	r2, #0
 800bf46:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	2202      	movs	r2, #2
 800bf56:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	f103 0210 	add.w	r2, r3, #16
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bf66:	2301      	movs	r3, #1
 800bf68:	75fb      	strb	r3, [r7, #23]
      break;
 800bf6a:	e020      	b.n	800bfae <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bf6c:	7afb      	ldrb	r3, [r7, #11]
 800bf6e:	4619      	mov	r1, r3
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	f7ff fc07 	bl	800b784 <USBH_MSC_BOT_Process>
 800bf76:	4603      	mov	r3, r0
 800bf78:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800bf7a:	7dfb      	ldrb	r3, [r7, #23]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d115      	bne.n	800bfac <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf86:	3302      	adds	r3, #2
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	f003 030f 	and.w	r3, r3, #15
 800bf8e:	b2da      	uxtb	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf9a:	7b1a      	ldrb	r2, [r3, #12]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfa6:	7b5a      	ldrb	r2, [r3, #13]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	709a      	strb	r2, [r3, #2]
      break;
 800bfac:	bf00      	nop
  }

  return error;
 800bfae:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3718      	adds	r7, #24
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b086      	sub	sp, #24
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	60f8      	str	r0, [r7, #12]
 800bfc0:	607a      	str	r2, [r7, #4]
 800bfc2:	603b      	str	r3, [r7, #0]
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800bfc8:	2302      	movs	r3, #2
 800bfca:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bfd2:	69db      	ldr	r3, [r3, #28]
 800bfd4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d002      	beq.n	800bfe6 <USBH_MSC_SCSI_Write+0x2e>
 800bfe0:	2b02      	cmp	r3, #2
 800bfe2:	d047      	beq.n	800c074 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800bfe4:	e04e      	b.n	800c084 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800bfec:	461a      	mov	r2, r3
 800bfee:	6a3b      	ldr	r3, [r7, #32]
 800bff0:	fb03 f202 	mul.w	r2, r3, r2
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	2200      	movs	r2, #0
 800bffc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	220a      	movs	r2, #10
 800c004:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	3363      	adds	r3, #99	; 0x63
 800c00c:	2210      	movs	r2, #16
 800c00e:	2100      	movs	r1, #0
 800c010:	4618      	mov	r0, r3
 800c012:	f005 fbdf 	bl	80117d4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	222a      	movs	r2, #42	; 0x2a
 800c01a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c01e:	79fa      	ldrb	r2, [r7, #7]
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c026:	79ba      	ldrb	r2, [r7, #6]
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c02e:	797a      	ldrb	r2, [r7, #5]
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c036:	1d3b      	adds	r3, r7, #4
 800c038:	781a      	ldrb	r2, [r3, #0]
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c040:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c04a:	f107 0320 	add.w	r3, r7, #32
 800c04e:	781a      	ldrb	r2, [r3, #0]
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	2201      	movs	r2, #1
 800c05a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	2202      	movs	r2, #2
 800c062:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	683a      	ldr	r2, [r7, #0]
 800c06a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c06e:	2301      	movs	r3, #1
 800c070:	75fb      	strb	r3, [r7, #23]
      break;
 800c072:	e007      	b.n	800c084 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c074:	7afb      	ldrb	r3, [r7, #11]
 800c076:	4619      	mov	r1, r3
 800c078:	68f8      	ldr	r0, [r7, #12]
 800c07a:	f7ff fb83 	bl	800b784 <USBH_MSC_BOT_Process>
 800c07e:	4603      	mov	r3, r0
 800c080:	75fb      	strb	r3, [r7, #23]
      break;
 800c082:	bf00      	nop
  }

  return error;
 800c084:	7dfb      	ldrb	r3, [r7, #23]
}
 800c086:	4618      	mov	r0, r3
 800c088:	3718      	adds	r7, #24
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}

0800c08e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800c08e:	b580      	push	{r7, lr}
 800c090:	b086      	sub	sp, #24
 800c092:	af00      	add	r7, sp, #0
 800c094:	60f8      	str	r0, [r7, #12]
 800c096:	607a      	str	r2, [r7, #4]
 800c098:	603b      	str	r3, [r7, #0]
 800c09a:	460b      	mov	r3, r1
 800c09c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c09e:	2302      	movs	r3, #2
 800c0a0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0a8:	69db      	ldr	r3, [r3, #28]
 800c0aa:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d002      	beq.n	800c0bc <USBH_MSC_SCSI_Read+0x2e>
 800c0b6:	2b02      	cmp	r3, #2
 800c0b8:	d047      	beq.n	800c14a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c0ba:	e04e      	b.n	800c15a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	6a3b      	ldr	r3, [r7, #32]
 800c0c6:	fb03 f202 	mul.w	r2, r3, r2
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	2280      	movs	r2, #128	; 0x80
 800c0d2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	220a      	movs	r2, #10
 800c0da:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	3363      	adds	r3, #99	; 0x63
 800c0e2:	2210      	movs	r2, #16
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f005 fb74 	bl	80117d4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	2228      	movs	r2, #40	; 0x28
 800c0f0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c0f4:	79fa      	ldrb	r2, [r7, #7]
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c0fc:	79ba      	ldrb	r2, [r7, #6]
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c104:	797a      	ldrb	r2, [r7, #5]
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c10c:	1d3b      	adds	r3, r7, #4
 800c10e:	781a      	ldrb	r2, [r3, #0]
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c116:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c120:	f107 0320 	add.w	r3, r7, #32
 800c124:	781a      	ldrb	r2, [r3, #0]
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	2201      	movs	r2, #1
 800c130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	2202      	movs	r2, #2
 800c138:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	683a      	ldr	r2, [r7, #0]
 800c140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c144:	2301      	movs	r3, #1
 800c146:	75fb      	strb	r3, [r7, #23]
      break;
 800c148:	e007      	b.n	800c15a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c14a:	7afb      	ldrb	r3, [r7, #11]
 800c14c:	4619      	mov	r1, r3
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f7ff fb18 	bl	800b784 <USBH_MSC_BOT_Process>
 800c154:	4603      	mov	r3, r0
 800c156:	75fb      	strb	r3, [r7, #23]
      break;
 800c158:	bf00      	nop
  }

  return error;
 800c15a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3718      	adds	r7, #24
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	60f8      	str	r0, [r7, #12]
 800c16c:	60b9      	str	r1, [r7, #8]
 800c16e:	4613      	mov	r3, r2
 800c170:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d101      	bne.n	800c17c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c178:	2302      	movs	r3, #2
 800c17a:	e029      	b.n	800c1d0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	79fa      	ldrb	r2, [r7, #7]
 800c180:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2200      	movs	r2, #0
 800c188:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2200      	movs	r2, #0
 800c190:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f000 f81f 	bl	800c1d8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2200      	movs	r2, #0
 800c19e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d003      	beq.n	800c1c8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	68ba      	ldr	r2, [r7, #8]
 800c1c4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f005 f823 	bl	8011214 <USBH_LL_Init>

  return USBH_OK;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b085      	sub	sp, #20
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	60fb      	str	r3, [r7, #12]
 800c1e8:	e009      	b.n	800c1fe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	33e0      	adds	r3, #224	; 0xe0
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	4413      	add	r3, r2
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	60fb      	str	r3, [r7, #12]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2b0f      	cmp	r3, #15
 800c202:	d9f2      	bls.n	800c1ea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c204:	2300      	movs	r3, #0
 800c206:	60fb      	str	r3, [r7, #12]
 800c208:	e009      	b.n	800c21e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	4413      	add	r3, r2
 800c210:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c214:	2200      	movs	r2, #0
 800c216:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	3301      	adds	r3, #1
 800c21c:	60fb      	str	r3, [r7, #12]
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c224:	d3f1      	bcc.n	800c20a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2200      	movs	r2, #0
 800c22a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2200      	movs	r2, #0
 800c230:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2201      	movs	r2, #1
 800c236:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2201      	movs	r2, #1
 800c244:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2240      	movs	r2, #64	; 0x40
 800c24a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2200      	movs	r2, #0
 800c256:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2201      	movs	r2, #1
 800c25e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2200      	movs	r2, #0
 800c266:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c272:	2300      	movs	r3, #0
}
 800c274:	4618      	mov	r0, r3
 800c276:	3714      	adds	r7, #20
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c280:	b480      	push	{r7}
 800c282:	b085      	sub	sp, #20
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c28a:	2300      	movs	r3, #0
 800c28c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d016      	beq.n	800c2c2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d10e      	bne.n	800c2bc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c2a4:	1c59      	adds	r1, r3, #1
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	33de      	adds	r3, #222	; 0xde
 800c2b0:	6839      	ldr	r1, [r7, #0]
 800c2b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	73fb      	strb	r3, [r7, #15]
 800c2ba:	e004      	b.n	800c2c6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c2bc:	2302      	movs	r3, #2
 800c2be:	73fb      	strb	r3, [r7, #15]
 800c2c0:	e001      	b.n	800c2c6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c2c2:	2302      	movs	r3, #2
 800c2c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c2c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3714      	adds	r7, #20
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b085      	sub	sp, #20
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	460b      	mov	r3, r1
 800c2de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c2ea:	78fa      	ldrb	r2, [r7, #3]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d204      	bcs.n	800c2fa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	78fa      	ldrb	r2, [r7, #3]
 800c2f4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c2f8:	e001      	b.n	800c2fe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c2fa:	2302      	movs	r3, #2
 800c2fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c2fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c300:	4618      	mov	r0, r3
 800c302:	3714      	adds	r7, #20
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b087      	sub	sp, #28
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	4608      	mov	r0, r1
 800c316:	4611      	mov	r1, r2
 800c318:	461a      	mov	r2, r3
 800c31a:	4603      	mov	r3, r0
 800c31c:	70fb      	strb	r3, [r7, #3]
 800c31e:	460b      	mov	r3, r1
 800c320:	70bb      	strb	r3, [r7, #2]
 800c322:	4613      	mov	r3, r2
 800c324:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c326:	2300      	movs	r3, #0
 800c328:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c32a:	2300      	movs	r3, #0
 800c32c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c334:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c336:	e025      	b.n	800c384 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c338:	7dfb      	ldrb	r3, [r7, #23]
 800c33a:	221a      	movs	r2, #26
 800c33c:	fb02 f303 	mul.w	r3, r2, r3
 800c340:	3308      	adds	r3, #8
 800c342:	68fa      	ldr	r2, [r7, #12]
 800c344:	4413      	add	r3, r2
 800c346:	3302      	adds	r3, #2
 800c348:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	795b      	ldrb	r3, [r3, #5]
 800c34e:	78fa      	ldrb	r2, [r7, #3]
 800c350:	429a      	cmp	r2, r3
 800c352:	d002      	beq.n	800c35a <USBH_FindInterface+0x4e>
 800c354:	78fb      	ldrb	r3, [r7, #3]
 800c356:	2bff      	cmp	r3, #255	; 0xff
 800c358:	d111      	bne.n	800c37e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c35e:	78ba      	ldrb	r2, [r7, #2]
 800c360:	429a      	cmp	r2, r3
 800c362:	d002      	beq.n	800c36a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c364:	78bb      	ldrb	r3, [r7, #2]
 800c366:	2bff      	cmp	r3, #255	; 0xff
 800c368:	d109      	bne.n	800c37e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c36e:	787a      	ldrb	r2, [r7, #1]
 800c370:	429a      	cmp	r2, r3
 800c372:	d002      	beq.n	800c37a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c374:	787b      	ldrb	r3, [r7, #1]
 800c376:	2bff      	cmp	r3, #255	; 0xff
 800c378:	d101      	bne.n	800c37e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c37a:	7dfb      	ldrb	r3, [r7, #23]
 800c37c:	e006      	b.n	800c38c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c37e:	7dfb      	ldrb	r3, [r7, #23]
 800c380:	3301      	adds	r3, #1
 800c382:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c384:	7dfb      	ldrb	r3, [r7, #23]
 800c386:	2b01      	cmp	r3, #1
 800c388:	d9d6      	bls.n	800c338 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c38a:	23ff      	movs	r3, #255	; 0xff
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	371c      	adds	r7, #28
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr

0800c398 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f004 ff73 	bl	801128c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c3a6:	2101      	movs	r1, #1
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f005 f88c 	bl	80114c6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c3ae:	2300      	movs	r3, #0
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b088      	sub	sp, #32
 800c3bc:	af04      	add	r7, sp, #16
 800c3be:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c3c0:	2302      	movs	r3, #2
 800c3c2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d102      	bne.n	800c3da <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2203      	movs	r2, #3
 800c3d8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	2b0b      	cmp	r3, #11
 800c3e2:	f200 81be 	bhi.w	800c762 <USBH_Process+0x3aa>
 800c3e6:	a201      	add	r2, pc, #4	; (adr r2, 800c3ec <USBH_Process+0x34>)
 800c3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ec:	0800c41d 	.word	0x0800c41d
 800c3f0:	0800c44f 	.word	0x0800c44f
 800c3f4:	0800c4b7 	.word	0x0800c4b7
 800c3f8:	0800c6fd 	.word	0x0800c6fd
 800c3fc:	0800c763 	.word	0x0800c763
 800c400:	0800c55b 	.word	0x0800c55b
 800c404:	0800c6a3 	.word	0x0800c6a3
 800c408:	0800c591 	.word	0x0800c591
 800c40c:	0800c5b1 	.word	0x0800c5b1
 800c410:	0800c5d1 	.word	0x0800c5d1
 800c414:	0800c615 	.word	0x0800c615
 800c418:	0800c6e5 	.word	0x0800c6e5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c422:	b2db      	uxtb	r3, r3
 800c424:	2b00      	cmp	r3, #0
 800c426:	f000 819e 	beq.w	800c766 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2201      	movs	r2, #1
 800c42e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c430:	20c8      	movs	r0, #200	; 0xc8
 800c432:	f005 f8bf 	bl	80115b4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f004 ff85 	bl	8011346 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2200      	movs	r2, #0
 800c448:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c44c:	e18b      	b.n	800c766 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c454:	2b01      	cmp	r3, #1
 800c456:	d107      	bne.n	800c468 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2200      	movs	r2, #0
 800c45c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2202      	movs	r2, #2
 800c464:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c466:	e18d      	b.n	800c784 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c46e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c472:	d914      	bls.n	800c49e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c47a:	3301      	adds	r3, #1
 800c47c:	b2da      	uxtb	r2, r3
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c48a:	2b03      	cmp	r3, #3
 800c48c:	d903      	bls.n	800c496 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	220d      	movs	r2, #13
 800c492:	701a      	strb	r2, [r3, #0]
      break;
 800c494:	e176      	b.n	800c784 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	701a      	strb	r2, [r3, #0]
      break;
 800c49c:	e172      	b.n	800c784 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c4a4:	f103 020a 	add.w	r2, r3, #10
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c4ae:	200a      	movs	r0, #10
 800c4b0:	f005 f880 	bl	80115b4 <USBH_Delay>
      break;
 800c4b4:	e166      	b.n	800c784 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d005      	beq.n	800c4cc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c4c6:	2104      	movs	r1, #4
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c4cc:	2064      	movs	r0, #100	; 0x64
 800c4ce:	f005 f871 	bl	80115b4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f004 ff10 	bl	80112f8 <USBH_LL_GetSpeed>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	461a      	mov	r2, r3
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2205      	movs	r2, #5
 800c4e6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f001 fa2b 	bl	800d946 <USBH_AllocPipe>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c4f8:	2180      	movs	r1, #128	; 0x80
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f001 fa23 	bl	800d946 <USBH_AllocPipe>
 800c500:	4603      	mov	r3, r0
 800c502:	461a      	mov	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	7919      	ldrb	r1, [r3, #4]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c51c:	b292      	uxth	r2, r2
 800c51e:	9202      	str	r2, [sp, #8]
 800c520:	2200      	movs	r2, #0
 800c522:	9201      	str	r2, [sp, #4]
 800c524:	9300      	str	r3, [sp, #0]
 800c526:	4603      	mov	r3, r0
 800c528:	2280      	movs	r2, #128	; 0x80
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f001 f9dc 	bl	800d8e8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	7959      	ldrb	r1, [r3, #5]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c544:	b292      	uxth	r2, r2
 800c546:	9202      	str	r2, [sp, #8]
 800c548:	2200      	movs	r2, #0
 800c54a:	9201      	str	r2, [sp, #4]
 800c54c:	9300      	str	r3, [sp, #0]
 800c54e:	4603      	mov	r3, r0
 800c550:	2200      	movs	r2, #0
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f001 f9c8 	bl	800d8e8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c558:	e114      	b.n	800c784 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 f918 	bl	800c790 <USBH_HandleEnum>
 800c560:	4603      	mov	r3, r0
 800c562:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c564:	7bbb      	ldrb	r3, [r7, #14]
 800c566:	b2db      	uxtb	r3, r3
 800c568:	2b00      	cmp	r3, #0
 800c56a:	f040 80fe 	bne.w	800c76a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2200      	movs	r2, #0
 800c572:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d103      	bne.n	800c588 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2208      	movs	r2, #8
 800c584:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c586:	e0f0      	b.n	800c76a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2207      	movs	r2, #7
 800c58c:	701a      	strb	r2, [r3, #0]
      break;
 800c58e:	e0ec      	b.n	800c76a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c596:	2b00      	cmp	r3, #0
 800c598:	f000 80e9 	beq.w	800c76e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c5a2:	2101      	movs	r1, #1
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2208      	movs	r2, #8
 800c5ac:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800c5ae:	e0de      	b.n	800c76e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 fc2c 	bl	800ce18 <USBH_SetCfg>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	f040 80d5 	bne.w	800c772 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2209      	movs	r2, #9
 800c5cc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c5ce:	e0d0      	b.n	800c772 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c5d6:	f003 0320 	and.w	r3, r3, #32
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d016      	beq.n	800c60c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800c5de:	2101      	movs	r1, #1
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 fc3c 	bl	800ce5e <USBH_SetFeature>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c5ea:	7bbb      	ldrb	r3, [r7, #14]
 800c5ec:	b2db      	uxtb	r3, r3
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d103      	bne.n	800c5fa <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	220a      	movs	r2, #10
 800c5f6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c5f8:	e0bd      	b.n	800c776 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800c5fa:	7bbb      	ldrb	r3, [r7, #14]
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	2b03      	cmp	r3, #3
 800c600:	f040 80b9 	bne.w	800c776 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	220a      	movs	r2, #10
 800c608:	701a      	strb	r2, [r3, #0]
      break;
 800c60a:	e0b4      	b.n	800c776 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	220a      	movs	r2, #10
 800c610:	701a      	strb	r2, [r3, #0]
      break;
 800c612:	e0b0      	b.n	800c776 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	f000 80ad 	beq.w	800c77a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2200      	movs	r2, #0
 800c624:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c628:	2300      	movs	r3, #0
 800c62a:	73fb      	strb	r3, [r7, #15]
 800c62c:	e016      	b.n	800c65c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c62e:	7bfa      	ldrb	r2, [r7, #15]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	32de      	adds	r2, #222	; 0xde
 800c634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c638:	791a      	ldrb	r2, [r3, #4]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c640:	429a      	cmp	r2, r3
 800c642:	d108      	bne.n	800c656 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c644:	7bfa      	ldrb	r2, [r7, #15]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	32de      	adds	r2, #222	; 0xde
 800c64a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c654:	e005      	b.n	800c662 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c656:	7bfb      	ldrb	r3, [r7, #15]
 800c658:	3301      	adds	r3, #1
 800c65a:	73fb      	strb	r3, [r7, #15]
 800c65c:	7bfb      	ldrb	r3, [r7, #15]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d0e5      	beq.n	800c62e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d016      	beq.n	800c69a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c672:	689b      	ldr	r3, [r3, #8]
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	4798      	blx	r3
 800c678:	4603      	mov	r3, r0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d109      	bne.n	800c692 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2206      	movs	r2, #6
 800c682:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c68a:	2103      	movs	r1, #3
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c690:	e073      	b.n	800c77a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	220d      	movs	r2, #13
 800c696:	701a      	strb	r2, [r3, #0]
      break;
 800c698:	e06f      	b.n	800c77a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	220d      	movs	r2, #13
 800c69e:	701a      	strb	r2, [r3, #0]
      break;
 800c6a0:	e06b      	b.n	800c77a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d017      	beq.n	800c6dc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c6b2:	691b      	ldr	r3, [r3, #16]
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	4798      	blx	r3
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c6bc:	7bbb      	ldrb	r3, [r7, #14]
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d103      	bne.n	800c6cc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	220b      	movs	r2, #11
 800c6c8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c6ca:	e058      	b.n	800c77e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800c6cc:	7bbb      	ldrb	r3, [r7, #14]
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	2b02      	cmp	r3, #2
 800c6d2:	d154      	bne.n	800c77e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	220d      	movs	r2, #13
 800c6d8:	701a      	strb	r2, [r3, #0]
      break;
 800c6da:	e050      	b.n	800c77e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	220d      	movs	r2, #13
 800c6e0:	701a      	strb	r2, [r3, #0]
      break;
 800c6e2:	e04c      	b.n	800c77e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d049      	beq.n	800c782 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c6f4:	695b      	ldr	r3, [r3, #20]
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	4798      	blx	r3
      }
      break;
 800c6fa:	e042      	b.n	800c782 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2200      	movs	r2, #0
 800c700:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f7ff fd67 	bl	800c1d8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c710:	2b00      	cmp	r3, #0
 800c712:	d009      	beq.n	800c728 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d005      	beq.n	800c73e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c738:	2105      	movs	r1, #5
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c744:	b2db      	uxtb	r3, r3
 800c746:	2b01      	cmp	r3, #1
 800c748:	d107      	bne.n	800c75a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2200      	movs	r2, #0
 800c74e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f7ff fe20 	bl	800c398 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c758:	e014      	b.n	800c784 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f004 fd96 	bl	801128c <USBH_LL_Start>
      break;
 800c760:	e010      	b.n	800c784 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800c762:	bf00      	nop
 800c764:	e00e      	b.n	800c784 <USBH_Process+0x3cc>
      break;
 800c766:	bf00      	nop
 800c768:	e00c      	b.n	800c784 <USBH_Process+0x3cc>
      break;
 800c76a:	bf00      	nop
 800c76c:	e00a      	b.n	800c784 <USBH_Process+0x3cc>
    break;
 800c76e:	bf00      	nop
 800c770:	e008      	b.n	800c784 <USBH_Process+0x3cc>
      break;
 800c772:	bf00      	nop
 800c774:	e006      	b.n	800c784 <USBH_Process+0x3cc>
      break;
 800c776:	bf00      	nop
 800c778:	e004      	b.n	800c784 <USBH_Process+0x3cc>
      break;
 800c77a:	bf00      	nop
 800c77c:	e002      	b.n	800c784 <USBH_Process+0x3cc>
      break;
 800c77e:	bf00      	nop
 800c780:	e000      	b.n	800c784 <USBH_Process+0x3cc>
      break;
 800c782:	bf00      	nop
  }
  return USBH_OK;
 800c784:	2300      	movs	r3, #0
}
 800c786:	4618      	mov	r0, r3
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop

0800c790 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b088      	sub	sp, #32
 800c794:	af04      	add	r7, sp, #16
 800c796:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c798:	2301      	movs	r3, #1
 800c79a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c79c:	2301      	movs	r3, #1
 800c79e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	785b      	ldrb	r3, [r3, #1]
 800c7a4:	2b07      	cmp	r3, #7
 800c7a6:	f200 81c1 	bhi.w	800cb2c <USBH_HandleEnum+0x39c>
 800c7aa:	a201      	add	r2, pc, #4	; (adr r2, 800c7b0 <USBH_HandleEnum+0x20>)
 800c7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b0:	0800c7d1 	.word	0x0800c7d1
 800c7b4:	0800c88f 	.word	0x0800c88f
 800c7b8:	0800c8f9 	.word	0x0800c8f9
 800c7bc:	0800c987 	.word	0x0800c987
 800c7c0:	0800c9f1 	.word	0x0800c9f1
 800c7c4:	0800ca61 	.word	0x0800ca61
 800c7c8:	0800caa7 	.word	0x0800caa7
 800c7cc:	0800caed 	.word	0x0800caed
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c7d0:	2108      	movs	r1, #8
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 fa50 	bl	800cc78 <USBH_Get_DevDesc>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c7dc:	7bbb      	ldrb	r3, [r7, #14]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d130      	bne.n	800c844 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	7919      	ldrb	r1, [r3, #4]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c806:	b292      	uxth	r2, r2
 800c808:	9202      	str	r2, [sp, #8]
 800c80a:	2200      	movs	r2, #0
 800c80c:	9201      	str	r2, [sp, #4]
 800c80e:	9300      	str	r3, [sp, #0]
 800c810:	4603      	mov	r3, r0
 800c812:	2280      	movs	r2, #128	; 0x80
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f001 f867 	bl	800d8e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	7959      	ldrb	r1, [r3, #5]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c82e:	b292      	uxth	r2, r2
 800c830:	9202      	str	r2, [sp, #8]
 800c832:	2200      	movs	r2, #0
 800c834:	9201      	str	r2, [sp, #4]
 800c836:	9300      	str	r3, [sp, #0]
 800c838:	4603      	mov	r3, r0
 800c83a:	2200      	movs	r2, #0
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f001 f853 	bl	800d8e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c842:	e175      	b.n	800cb30 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c844:	7bbb      	ldrb	r3, [r7, #14]
 800c846:	2b03      	cmp	r3, #3
 800c848:	f040 8172 	bne.w	800cb30 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c852:	3301      	adds	r3, #1
 800c854:	b2da      	uxtb	r2, r3
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c862:	2b03      	cmp	r3, #3
 800c864:	d903      	bls.n	800c86e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	220d      	movs	r2, #13
 800c86a:	701a      	strb	r2, [r3, #0]
      break;
 800c86c:	e160      	b.n	800cb30 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	795b      	ldrb	r3, [r3, #5]
 800c872:	4619      	mov	r1, r3
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f001 f887 	bl	800d988 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	791b      	ldrb	r3, [r3, #4]
 800c87e:	4619      	mov	r1, r3
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f001 f881 	bl	800d988 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2200      	movs	r2, #0
 800c88a:	701a      	strb	r2, [r3, #0]
      break;
 800c88c:	e150      	b.n	800cb30 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c88e:	2112      	movs	r1, #18
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f000 f9f1 	bl	800cc78 <USBH_Get_DevDesc>
 800c896:	4603      	mov	r3, r0
 800c898:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c89a:	7bbb      	ldrb	r3, [r7, #14]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d103      	bne.n	800c8a8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2202      	movs	r2, #2
 800c8a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c8a6:	e145      	b.n	800cb34 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c8a8:	7bbb      	ldrb	r3, [r7, #14]
 800c8aa:	2b03      	cmp	r3, #3
 800c8ac:	f040 8142 	bne.w	800cb34 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	b2da      	uxtb	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c8c6:	2b03      	cmp	r3, #3
 800c8c8:	d903      	bls.n	800c8d2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	220d      	movs	r2, #13
 800c8ce:	701a      	strb	r2, [r3, #0]
      break;
 800c8d0:	e130      	b.n	800cb34 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	795b      	ldrb	r3, [r3, #5]
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f001 f855 	bl	800d988 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	791b      	ldrb	r3, [r3, #4]
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f001 f84f 	bl	800d988 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	701a      	strb	r2, [r3, #0]
      break;
 800c8f6:	e11d      	b.n	800cb34 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c8f8:	2101      	movs	r1, #1
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 fa68 	bl	800cdd0 <USBH_SetAddress>
 800c900:	4603      	mov	r3, r0
 800c902:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c904:	7bbb      	ldrb	r3, [r7, #14]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d132      	bne.n	800c970 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c90a:	2002      	movs	r0, #2
 800c90c:	f004 fe52 	bl	80115b4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2201      	movs	r2, #1
 800c914:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2203      	movs	r2, #3
 800c91c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	7919      	ldrb	r1, [r3, #4]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c932:	b292      	uxth	r2, r2
 800c934:	9202      	str	r2, [sp, #8]
 800c936:	2200      	movs	r2, #0
 800c938:	9201      	str	r2, [sp, #4]
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	4603      	mov	r3, r0
 800c93e:	2280      	movs	r2, #128	; 0x80
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f000 ffd1 	bl	800d8e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	7959      	ldrb	r1, [r3, #5]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c95a:	b292      	uxth	r2, r2
 800c95c:	9202      	str	r2, [sp, #8]
 800c95e:	2200      	movs	r2, #0
 800c960:	9201      	str	r2, [sp, #4]
 800c962:	9300      	str	r3, [sp, #0]
 800c964:	4603      	mov	r3, r0
 800c966:	2200      	movs	r2, #0
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 ffbd 	bl	800d8e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c96e:	e0e3      	b.n	800cb38 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c970:	7bbb      	ldrb	r3, [r7, #14]
 800c972:	2b03      	cmp	r3, #3
 800c974:	f040 80e0 	bne.w	800cb38 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	220d      	movs	r2, #13
 800c97c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	705a      	strb	r2, [r3, #1]
      break;
 800c984:	e0d8      	b.n	800cb38 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c986:	2109      	movs	r1, #9
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f000 f99d 	bl	800ccc8 <USBH_Get_CfgDesc>
 800c98e:	4603      	mov	r3, r0
 800c990:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c992:	7bbb      	ldrb	r3, [r7, #14]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d103      	bne.n	800c9a0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2204      	movs	r2, #4
 800c99c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c99e:	e0cd      	b.n	800cb3c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c9a0:	7bbb      	ldrb	r3, [r7, #14]
 800c9a2:	2b03      	cmp	r3, #3
 800c9a4:	f040 80ca 	bne.w	800cb3c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	b2da      	uxtb	r2, r3
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c9be:	2b03      	cmp	r3, #3
 800c9c0:	d903      	bls.n	800c9ca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	220d      	movs	r2, #13
 800c9c6:	701a      	strb	r2, [r3, #0]
      break;
 800c9c8:	e0b8      	b.n	800cb3c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	795b      	ldrb	r3, [r3, #5]
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f000 ffd9 	bl	800d988 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	791b      	ldrb	r3, [r3, #4]
 800c9da:	4619      	mov	r1, r3
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 ffd3 	bl	800d988 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	701a      	strb	r2, [r3, #0]
      break;
 800c9ee:	e0a5      	b.n	800cb3c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f000 f965 	bl	800ccc8 <USBH_Get_CfgDesc>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ca02:	7bbb      	ldrb	r3, [r7, #14]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d103      	bne.n	800ca10 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2205      	movs	r2, #5
 800ca0c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ca0e:	e097      	b.n	800cb40 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ca10:	7bbb      	ldrb	r3, [r7, #14]
 800ca12:	2b03      	cmp	r3, #3
 800ca14:	f040 8094 	bne.w	800cb40 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ca1e:	3301      	adds	r3, #1
 800ca20:	b2da      	uxtb	r2, r3
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ca2e:	2b03      	cmp	r3, #3
 800ca30:	d903      	bls.n	800ca3a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	220d      	movs	r2, #13
 800ca36:	701a      	strb	r2, [r3, #0]
      break;
 800ca38:	e082      	b.n	800cb40 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	795b      	ldrb	r3, [r3, #5]
 800ca3e:	4619      	mov	r1, r3
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 ffa1 	bl	800d988 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	791b      	ldrb	r3, [r3, #4]
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 ff9b 	bl	800d988 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	701a      	strb	r2, [r3, #0]
      break;
 800ca5e:	e06f      	b.n	800cb40 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d019      	beq.n	800ca9e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ca76:	23ff      	movs	r3, #255	; 0xff
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 f949 	bl	800cd10 <USBH_Get_StringDesc>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ca82:	7bbb      	ldrb	r3, [r7, #14]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d103      	bne.n	800ca90 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2206      	movs	r2, #6
 800ca8c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ca8e:	e059      	b.n	800cb44 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ca90:	7bbb      	ldrb	r3, [r7, #14]
 800ca92:	2b03      	cmp	r3, #3
 800ca94:	d156      	bne.n	800cb44 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2206      	movs	r2, #6
 800ca9a:	705a      	strb	r2, [r3, #1]
      break;
 800ca9c:	e052      	b.n	800cb44 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2206      	movs	r2, #6
 800caa2:	705a      	strb	r2, [r3, #1]
      break;
 800caa4:	e04e      	b.n	800cb44 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800caac:	2b00      	cmp	r3, #0
 800caae:	d019      	beq.n	800cae4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cabc:	23ff      	movs	r3, #255	; 0xff
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 f926 	bl	800cd10 <USBH_Get_StringDesc>
 800cac4:	4603      	mov	r3, r0
 800cac6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cac8:	7bbb      	ldrb	r3, [r7, #14]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d103      	bne.n	800cad6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2207      	movs	r2, #7
 800cad2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cad4:	e038      	b.n	800cb48 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cad6:	7bbb      	ldrb	r3, [r7, #14]
 800cad8:	2b03      	cmp	r3, #3
 800cada:	d135      	bne.n	800cb48 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2207      	movs	r2, #7
 800cae0:	705a      	strb	r2, [r3, #1]
      break;
 800cae2:	e031      	b.n	800cb48 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2207      	movs	r2, #7
 800cae8:	705a      	strb	r2, [r3, #1]
      break;
 800caea:	e02d      	b.n	800cb48 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d017      	beq.n	800cb26 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cb02:	23ff      	movs	r3, #255	; 0xff
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f000 f903 	bl	800cd10 <USBH_Get_StringDesc>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cb0e:	7bbb      	ldrb	r3, [r7, #14]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d102      	bne.n	800cb1a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800cb14:	2300      	movs	r3, #0
 800cb16:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800cb18:	e018      	b.n	800cb4c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cb1a:	7bbb      	ldrb	r3, [r7, #14]
 800cb1c:	2b03      	cmp	r3, #3
 800cb1e:	d115      	bne.n	800cb4c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800cb20:	2300      	movs	r3, #0
 800cb22:	73fb      	strb	r3, [r7, #15]
      break;
 800cb24:	e012      	b.n	800cb4c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800cb26:	2300      	movs	r3, #0
 800cb28:	73fb      	strb	r3, [r7, #15]
      break;
 800cb2a:	e00f      	b.n	800cb4c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800cb2c:	bf00      	nop
 800cb2e:	e00e      	b.n	800cb4e <USBH_HandleEnum+0x3be>
      break;
 800cb30:	bf00      	nop
 800cb32:	e00c      	b.n	800cb4e <USBH_HandleEnum+0x3be>
      break;
 800cb34:	bf00      	nop
 800cb36:	e00a      	b.n	800cb4e <USBH_HandleEnum+0x3be>
      break;
 800cb38:	bf00      	nop
 800cb3a:	e008      	b.n	800cb4e <USBH_HandleEnum+0x3be>
      break;
 800cb3c:	bf00      	nop
 800cb3e:	e006      	b.n	800cb4e <USBH_HandleEnum+0x3be>
      break;
 800cb40:	bf00      	nop
 800cb42:	e004      	b.n	800cb4e <USBH_HandleEnum+0x3be>
      break;
 800cb44:	bf00      	nop
 800cb46:	e002      	b.n	800cb4e <USBH_HandleEnum+0x3be>
      break;
 800cb48:	bf00      	nop
 800cb4a:	e000      	b.n	800cb4e <USBH_HandleEnum+0x3be>
      break;
 800cb4c:	bf00      	nop
  }
  return Status;
 800cb4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3710      	adds	r7, #16
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b083      	sub	sp, #12
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	683a      	ldr	r2, [r7, #0]
 800cb66:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800cb6a:	bf00      	nop
 800cb6c:	370c      	adds	r7, #12
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr

0800cb76 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b082      	sub	sp, #8
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cb84:	1c5a      	adds	r2, r3, #1
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 f804 	bl	800cb9a <USBH_HandleSof>
}
 800cb92:	bf00      	nop
 800cb94:	3708      	adds	r7, #8
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}

0800cb9a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800cb9a:	b580      	push	{r7, lr}
 800cb9c:	b082      	sub	sp, #8
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	2b0b      	cmp	r3, #11
 800cbaa:	d10a      	bne.n	800cbc2 <USBH_HandleSof+0x28>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d005      	beq.n	800cbc2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbbc:	699b      	ldr	r3, [r3, #24]
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	4798      	blx	r3
  }
}
 800cbc2:	bf00      	nop
 800cbc4:	3708      	adds	r7, #8
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}

0800cbca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800cbca:	b480      	push	{r7}
 800cbcc:	b083      	sub	sp, #12
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800cbda:	bf00      	nop
}
 800cbdc:	370c      	adds	r7, #12
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe4:	4770      	bx	lr

0800cbe6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800cbe6:	b480      	push	{r7}
 800cbe8:	b083      	sub	sp, #12
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800cbf6:	bf00      	nop
}
 800cbf8:	370c      	adds	r7, #12
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr

0800cc02 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800cc02:	b480      	push	{r7}
 800cc04:	b083      	sub	sp, #12
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800cc22:	2300      	movs	r3, #0
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	370c      	adds	r7, #12
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b082      	sub	sp, #8
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2200      	movs	r2, #0
 800cc44:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f004 fb36 	bl	80112c2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	791b      	ldrb	r3, [r3, #4]
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 fe93 	bl	800d988 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	795b      	ldrb	r3, [r3, #5]
 800cc66:	4619      	mov	r1, r3
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f000 fe8d 	bl	800d988 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800cc6e:	2300      	movs	r3, #0
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3708      	adds	r7, #8
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b086      	sub	sp, #24
 800cc7c:	af02      	add	r7, sp, #8
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	460b      	mov	r3, r1
 800cc82:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800cc8a:	78fb      	ldrb	r3, [r7, #3]
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	9300      	str	r3, [sp, #0]
 800cc90:	4613      	mov	r3, r2
 800cc92:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc96:	2100      	movs	r1, #0
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f000 f864 	bl	800cd66 <USBH_GetDescriptor>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800cca2:	7bfb      	ldrb	r3, [r7, #15]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d10a      	bne.n	800ccbe <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ccb4:	78fa      	ldrb	r2, [r7, #3]
 800ccb6:	b292      	uxth	r2, r2
 800ccb8:	4619      	mov	r1, r3
 800ccba:	f000 f919 	bl	800cef0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ccbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3710      	adds	r7, #16
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b086      	sub	sp, #24
 800cccc:	af02      	add	r7, sp, #8
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	331c      	adds	r3, #28
 800ccd8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ccda:	887b      	ldrh	r3, [r7, #2]
 800ccdc:	9300      	str	r3, [sp, #0]
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cce4:	2100      	movs	r1, #0
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 f83d 	bl	800cd66 <USBH_GetDescriptor>
 800ccec:	4603      	mov	r3, r0
 800ccee:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800ccf0:	7bfb      	ldrb	r3, [r7, #15]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d107      	bne.n	800cd06 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800ccf6:	887b      	ldrh	r3, [r7, #2]
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	68b9      	ldr	r1, [r7, #8]
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f000 f989 	bl	800d014 <USBH_ParseCfgDesc>
 800cd02:	4603      	mov	r3, r0
 800cd04:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cd06:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3710      	adds	r7, #16
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b088      	sub	sp, #32
 800cd14:	af02      	add	r7, sp, #8
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	607a      	str	r2, [r7, #4]
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	72fb      	strb	r3, [r7, #11]
 800cd20:	4613      	mov	r3, r2
 800cd22:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800cd24:	7afb      	ldrb	r3, [r7, #11]
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800cd2c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800cd34:	893b      	ldrh	r3, [r7, #8]
 800cd36:	9300      	str	r3, [sp, #0]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	2100      	movs	r1, #0
 800cd3c:	68f8      	ldr	r0, [r7, #12]
 800cd3e:	f000 f812 	bl	800cd66 <USBH_GetDescriptor>
 800cd42:	4603      	mov	r3, r0
 800cd44:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800cd46:	7dfb      	ldrb	r3, [r7, #23]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d107      	bne.n	800cd5c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cd52:	893a      	ldrh	r2, [r7, #8]
 800cd54:	6879      	ldr	r1, [r7, #4]
 800cd56:	4618      	mov	r0, r3
 800cd58:	f000 fb26 	bl	800d3a8 <USBH_ParseStringDesc>
  }

  return status;
 800cd5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3718      	adds	r7, #24
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}

0800cd66 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800cd66:	b580      	push	{r7, lr}
 800cd68:	b084      	sub	sp, #16
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	60f8      	str	r0, [r7, #12]
 800cd6e:	607b      	str	r3, [r7, #4]
 800cd70:	460b      	mov	r3, r1
 800cd72:	72fb      	strb	r3, [r7, #11]
 800cd74:	4613      	mov	r3, r2
 800cd76:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	789b      	ldrb	r3, [r3, #2]
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d11c      	bne.n	800cdba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800cd80:	7afb      	ldrb	r3, [r7, #11]
 800cd82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd86:	b2da      	uxtb	r2, r3
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2206      	movs	r2, #6
 800cd90:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	893a      	ldrh	r2, [r7, #8]
 800cd96:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800cd98:	893b      	ldrh	r3, [r7, #8]
 800cd9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cd9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cda2:	d104      	bne.n	800cdae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f240 4209 	movw	r2, #1033	; 0x409
 800cdaa:	829a      	strh	r2, [r3, #20]
 800cdac:	e002      	b.n	800cdb4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	8b3a      	ldrh	r2, [r7, #24]
 800cdb8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800cdba:	8b3b      	ldrh	r3, [r7, #24]
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	6879      	ldr	r1, [r7, #4]
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	f000 fb3f 	bl	800d444 <USBH_CtlReq>
 800cdc6:	4603      	mov	r3, r0
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3710      	adds	r7, #16
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	460b      	mov	r3, r1
 800cdda:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	789b      	ldrb	r3, [r3, #2]
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d10f      	bne.n	800ce04 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2205      	movs	r2, #5
 800cdee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800cdf0:	78fb      	ldrb	r3, [r7, #3]
 800cdf2:	b29a      	uxth	r2, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2200      	movs	r2, #0
 800ce02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ce04:	2200      	movs	r2, #0
 800ce06:	2100      	movs	r1, #0
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f000 fb1b 	bl	800d444 <USBH_CtlReq>
 800ce0e:	4603      	mov	r3, r0
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3708      	adds	r7, #8
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	460b      	mov	r3, r1
 800ce22:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	789b      	ldrb	r3, [r3, #2]
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	d10e      	bne.n	800ce4a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2209      	movs	r2, #9
 800ce36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	887a      	ldrh	r2, [r7, #2]
 800ce3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2200      	movs	r2, #0
 800ce42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 faf8 	bl	800d444 <USBH_CtlReq>
 800ce54:	4603      	mov	r3, r0
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3708      	adds	r7, #8
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}

0800ce5e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ce5e:	b580      	push	{r7, lr}
 800ce60:	b082      	sub	sp, #8
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	6078      	str	r0, [r7, #4]
 800ce66:	460b      	mov	r3, r1
 800ce68:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	789b      	ldrb	r3, [r3, #2]
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d10f      	bne.n	800ce92 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2200      	movs	r2, #0
 800ce76:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2203      	movs	r2, #3
 800ce7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ce7e:	78fb      	ldrb	r3, [r7, #3]
 800ce80:	b29a      	uxth	r2, r3
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ce92:	2200      	movs	r2, #0
 800ce94:	2100      	movs	r1, #0
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 fad4 	bl	800d444 <USBH_CtlReq>
 800ce9c:	4603      	mov	r3, r0
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3708      	adds	r7, #8
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}

0800cea6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800cea6:	b580      	push	{r7, lr}
 800cea8:	b082      	sub	sp, #8
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
 800ceae:	460b      	mov	r3, r1
 800ceb0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	789b      	ldrb	r3, [r3, #2]
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d10f      	bne.n	800ceda <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2202      	movs	r2, #2
 800cebe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2201      	movs	r2, #1
 800cec4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2200      	movs	r2, #0
 800ceca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800cecc:	78fb      	ldrb	r3, [r7, #3]
 800cece:	b29a      	uxth	r2, r3
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2200      	movs	r2, #0
 800ced8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800ceda:	2200      	movs	r2, #0
 800cedc:	2100      	movs	r1, #0
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 fab0 	bl	800d444 <USBH_CtlReq>
 800cee4:	4603      	mov	r3, r0
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3708      	adds	r7, #8
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
	...

0800cef0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b085      	sub	sp, #20
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	4613      	mov	r3, r2
 800cefc:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	781a      	ldrb	r2, [r3, #0]
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	785a      	ldrb	r2, [r3, #1]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	3302      	adds	r3, #2
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	b29a      	uxth	r2, r3
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	3303      	adds	r3, #3
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	021b      	lsls	r3, r3, #8
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	4313      	orrs	r3, r2
 800cf24:	b29a      	uxth	r2, r3
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	791a      	ldrb	r2, [r3, #4]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	795a      	ldrb	r2, [r3, #5]
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	799a      	ldrb	r2, [r3, #6]
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	79da      	ldrb	r2, [r3, #7]
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	79db      	ldrb	r3, [r3, #7]
 800cf4e:	2b20      	cmp	r3, #32
 800cf50:	dc0f      	bgt.n	800cf72 <USBH_ParseDevDesc+0x82>
 800cf52:	2b08      	cmp	r3, #8
 800cf54:	db14      	blt.n	800cf80 <USBH_ParseDevDesc+0x90>
 800cf56:	3b08      	subs	r3, #8
 800cf58:	4a2d      	ldr	r2, [pc, #180]	; (800d010 <USBH_ParseDevDesc+0x120>)
 800cf5a:	fa22 f303 	lsr.w	r3, r2, r3
 800cf5e:	f003 0301 	and.w	r3, r3, #1
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	bf14      	ite	ne
 800cf66:	2301      	movne	r3, #1
 800cf68:	2300      	moveq	r3, #0
 800cf6a:	b2db      	uxtb	r3, r3
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d102      	bne.n	800cf76 <USBH_ParseDevDesc+0x86>
 800cf70:	e006      	b.n	800cf80 <USBH_ParseDevDesc+0x90>
 800cf72:	2b40      	cmp	r3, #64	; 0x40
 800cf74:	d104      	bne.n	800cf80 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	79da      	ldrb	r2, [r3, #7]
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	71da      	strb	r2, [r3, #7]
      break;
 800cf7e:	e003      	b.n	800cf88 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2240      	movs	r2, #64	; 0x40
 800cf84:	71da      	strb	r2, [r3, #7]
      break;
 800cf86:	bf00      	nop
  }

  if (length > 8U)
 800cf88:	88fb      	ldrh	r3, [r7, #6]
 800cf8a:	2b08      	cmp	r3, #8
 800cf8c:	d939      	bls.n	800d002 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	3308      	adds	r3, #8
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	3309      	adds	r3, #9
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	021b      	lsls	r3, r3, #8
 800cfa0:	b29b      	uxth	r3, r3
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	b29a      	uxth	r2, r3
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	330a      	adds	r3, #10
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	b29a      	uxth	r2, r3
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	330b      	adds	r3, #11
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	b29b      	uxth	r3, r3
 800cfba:	021b      	lsls	r3, r3, #8
 800cfbc:	b29b      	uxth	r3, r3
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	b29a      	uxth	r2, r3
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	330c      	adds	r3, #12
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	b29a      	uxth	r2, r3
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	330d      	adds	r3, #13
 800cfd2:	781b      	ldrb	r3, [r3, #0]
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	021b      	lsls	r3, r3, #8
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	7b9a      	ldrb	r2, [r3, #14]
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	7bda      	ldrb	r2, [r3, #15]
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	7c1a      	ldrb	r2, [r3, #16]
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	7c5a      	ldrb	r2, [r3, #17]
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	745a      	strb	r2, [r3, #17]
  }
}
 800d002:	bf00      	nop
 800d004:	3714      	adds	r7, #20
 800d006:	46bd      	mov	sp, r7
 800d008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00c:	4770      	bx	lr
 800d00e:	bf00      	nop
 800d010:	01000101 	.word	0x01000101

0800d014 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b08c      	sub	sp, #48	; 0x30
 800d018:	af00      	add	r7, sp, #0
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	60b9      	str	r1, [r7, #8]
 800d01e:	4613      	mov	r3, r2
 800d020:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d028:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d02a:	2300      	movs	r3, #0
 800d02c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d034:	2300      	movs	r3, #0
 800d036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800d03a:	2300      	movs	r3, #0
 800d03c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	781a      	ldrb	r2, [r3, #0]
 800d048:	6a3b      	ldr	r3, [r7, #32]
 800d04a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	785a      	ldrb	r2, [r3, #1]
 800d050:	6a3b      	ldr	r3, [r7, #32]
 800d052:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	3302      	adds	r3, #2
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	b29a      	uxth	r2, r3
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	3303      	adds	r3, #3
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	b29b      	uxth	r3, r3
 800d064:	021b      	lsls	r3, r3, #8
 800d066:	b29b      	uxth	r3, r3
 800d068:	4313      	orrs	r3, r2
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d070:	bf28      	it	cs
 800d072:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800d076:	b29a      	uxth	r2, r3
 800d078:	6a3b      	ldr	r3, [r7, #32]
 800d07a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	791a      	ldrb	r2, [r3, #4]
 800d080:	6a3b      	ldr	r3, [r7, #32]
 800d082:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	795a      	ldrb	r2, [r3, #5]
 800d088:	6a3b      	ldr	r3, [r7, #32]
 800d08a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	799a      	ldrb	r2, [r3, #6]
 800d090:	6a3b      	ldr	r3, [r7, #32]
 800d092:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	79da      	ldrb	r2, [r3, #7]
 800d098:	6a3b      	ldr	r3, [r7, #32]
 800d09a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	7a1a      	ldrb	r2, [r3, #8]
 800d0a0:	6a3b      	ldr	r3, [r7, #32]
 800d0a2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800d0a4:	6a3b      	ldr	r3, [r7, #32]
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	2b09      	cmp	r3, #9
 800d0aa:	d002      	beq.n	800d0b2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d0ac:	6a3b      	ldr	r3, [r7, #32]
 800d0ae:	2209      	movs	r2, #9
 800d0b0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d0b2:	88fb      	ldrh	r3, [r7, #6]
 800d0b4:	2b09      	cmp	r3, #9
 800d0b6:	f240 809d 	bls.w	800d1f4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800d0ba:	2309      	movs	r3, #9
 800d0bc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d0c2:	e081      	b.n	800d1c8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d0c4:	f107 0316 	add.w	r3, r7, #22
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0cc:	f000 f99f 	bl	800d40e <USBH_GetNextDesc>
 800d0d0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d4:	785b      	ldrb	r3, [r3, #1]
 800d0d6:	2b04      	cmp	r3, #4
 800d0d8:	d176      	bne.n	800d1c8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	2b09      	cmp	r3, #9
 800d0e0:	d002      	beq.n	800d0e8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e4:	2209      	movs	r2, #9
 800d0e6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d0e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0ec:	221a      	movs	r2, #26
 800d0ee:	fb02 f303 	mul.w	r3, r2, r3
 800d0f2:	3308      	adds	r3, #8
 800d0f4:	6a3a      	ldr	r2, [r7, #32]
 800d0f6:	4413      	add	r3, r2
 800d0f8:	3302      	adds	r3, #2
 800d0fa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d0fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0fe:	69f8      	ldr	r0, [r7, #28]
 800d100:	f000 f87e 	bl	800d200 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d104:	2300      	movs	r3, #0
 800d106:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d10a:	2300      	movs	r3, #0
 800d10c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d10e:	e043      	b.n	800d198 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d110:	f107 0316 	add.w	r3, r7, #22
 800d114:	4619      	mov	r1, r3
 800d116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d118:	f000 f979 	bl	800d40e <USBH_GetNextDesc>
 800d11c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d120:	785b      	ldrb	r3, [r3, #1]
 800d122:	2b05      	cmp	r3, #5
 800d124:	d138      	bne.n	800d198 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800d126:	69fb      	ldr	r3, [r7, #28]
 800d128:	795b      	ldrb	r3, [r3, #5]
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d10f      	bne.n	800d14e <USBH_ParseCfgDesc+0x13a>
 800d12e:	69fb      	ldr	r3, [r7, #28]
 800d130:	799b      	ldrb	r3, [r3, #6]
 800d132:	2b02      	cmp	r3, #2
 800d134:	d10b      	bne.n	800d14e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d136:	69fb      	ldr	r3, [r7, #28]
 800d138:	79db      	ldrb	r3, [r3, #7]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d10f      	bne.n	800d15e <USBH_ParseCfgDesc+0x14a>
 800d13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	2b09      	cmp	r3, #9
 800d144:	d00b      	beq.n	800d15e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800d146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d148:	2209      	movs	r2, #9
 800d14a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d14c:	e007      	b.n	800d15e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800d14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	2b07      	cmp	r3, #7
 800d154:	d004      	beq.n	800d160 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d158:	2207      	movs	r2, #7
 800d15a:	701a      	strb	r2, [r3, #0]
 800d15c:	e000      	b.n	800d160 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d15e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d164:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d168:	3201      	adds	r2, #1
 800d16a:	00d2      	lsls	r2, r2, #3
 800d16c:	211a      	movs	r1, #26
 800d16e:	fb01 f303 	mul.w	r3, r1, r3
 800d172:	4413      	add	r3, r2
 800d174:	3308      	adds	r3, #8
 800d176:	6a3a      	ldr	r2, [r7, #32]
 800d178:	4413      	add	r3, r2
 800d17a:	3304      	adds	r3, #4
 800d17c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d17e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d180:	69b9      	ldr	r1, [r7, #24]
 800d182:	68f8      	ldr	r0, [r7, #12]
 800d184:	f000 f86b 	bl	800d25e <USBH_ParseEPDesc>
 800d188:	4603      	mov	r3, r0
 800d18a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800d18e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d192:	3301      	adds	r3, #1
 800d194:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d198:	69fb      	ldr	r3, [r7, #28]
 800d19a:	791b      	ldrb	r3, [r3, #4]
 800d19c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d204      	bcs.n	800d1ae <USBH_ParseCfgDesc+0x19a>
 800d1a4:	6a3b      	ldr	r3, [r7, #32]
 800d1a6:	885a      	ldrh	r2, [r3, #2]
 800d1a8:	8afb      	ldrh	r3, [r7, #22]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d8b0      	bhi.n	800d110 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d1ae:	69fb      	ldr	r3, [r7, #28]
 800d1b0:	791b      	ldrb	r3, [r3, #4]
 800d1b2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d201      	bcs.n	800d1be <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800d1ba:	2303      	movs	r3, #3
 800d1bc:	e01c      	b.n	800d1f8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800d1be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1c2:	3301      	adds	r3, #1
 800d1c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d1c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d805      	bhi.n	800d1dc <USBH_ParseCfgDesc+0x1c8>
 800d1d0:	6a3b      	ldr	r3, [r7, #32]
 800d1d2:	885a      	ldrh	r2, [r3, #2]
 800d1d4:	8afb      	ldrh	r3, [r7, #22]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	f63f af74 	bhi.w	800d0c4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d1dc:	6a3b      	ldr	r3, [r7, #32]
 800d1de:	791b      	ldrb	r3, [r3, #4]
 800d1e0:	2b02      	cmp	r3, #2
 800d1e2:	bf28      	it	cs
 800d1e4:	2302      	movcs	r3, #2
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d201      	bcs.n	800d1f4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800d1f0:	2303      	movs	r3, #3
 800d1f2:	e001      	b.n	800d1f8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800d1f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3730      	adds	r7, #48	; 0x30
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d200:	b480      	push	{r7}
 800d202:	b083      	sub	sp, #12
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	781a      	ldrb	r2, [r3, #0]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	785a      	ldrb	r2, [r3, #1]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	789a      	ldrb	r2, [r3, #2]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	78da      	ldrb	r2, [r3, #3]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	791a      	ldrb	r2, [r3, #4]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	795a      	ldrb	r2, [r3, #5]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	799a      	ldrb	r2, [r3, #6]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	79da      	ldrb	r2, [r3, #7]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	7a1a      	ldrb	r2, [r3, #8]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	721a      	strb	r2, [r3, #8]
}
 800d252:	bf00      	nop
 800d254:	370c      	adds	r7, #12
 800d256:	46bd      	mov	sp, r7
 800d258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25c:	4770      	bx	lr

0800d25e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800d25e:	b480      	push	{r7}
 800d260:	b087      	sub	sp, #28
 800d262:	af00      	add	r7, sp, #0
 800d264:	60f8      	str	r0, [r7, #12]
 800d266:	60b9      	str	r1, [r7, #8]
 800d268:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d26a:	2300      	movs	r3, #0
 800d26c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	781a      	ldrb	r2, [r3, #0]
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	785a      	ldrb	r2, [r3, #1]
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	789a      	ldrb	r2, [r3, #2]
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	78da      	ldrb	r2, [r3, #3]
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	3304      	adds	r3, #4
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	b29a      	uxth	r2, r3
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	3305      	adds	r3, #5
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	021b      	lsls	r3, r3, #8
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	b29a      	uxth	r2, r3
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	799a      	ldrb	r2, [r3, #6]
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	889b      	ldrh	r3, [r3, #4]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d102      	bne.n	800d2c0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800d2ba:	2303      	movs	r3, #3
 800d2bc:	75fb      	strb	r3, [r7, #23]
 800d2be:	e033      	b.n	800d328 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	889b      	ldrh	r3, [r3, #4]
 800d2c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d2c8:	f023 0307 	bic.w	r3, r3, #7
 800d2cc:	b29a      	uxth	r2, r3
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	889b      	ldrh	r3, [r3, #4]
 800d2d6:	b21a      	sxth	r2, r3
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	3304      	adds	r3, #4
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	b299      	uxth	r1, r3
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	3305      	adds	r3, #5
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	b29b      	uxth	r3, r3
 800d2e8:	021b      	lsls	r3, r3, #8
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	430b      	orrs	r3, r1
 800d2ee:	b29b      	uxth	r3, r3
 800d2f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d110      	bne.n	800d31a <USBH_ParseEPDesc+0xbc>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	3304      	adds	r3, #4
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	b299      	uxth	r1, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	3305      	adds	r3, #5
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	b29b      	uxth	r3, r3
 800d308:	021b      	lsls	r3, r3, #8
 800d30a:	b29b      	uxth	r3, r3
 800d30c:	430b      	orrs	r3, r1
 800d30e:	b29b      	uxth	r3, r3
 800d310:	b21b      	sxth	r3, r3
 800d312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d316:	b21b      	sxth	r3, r3
 800d318:	e001      	b.n	800d31e <USBH_ParseEPDesc+0xc0>
 800d31a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d31e:	4313      	orrs	r3, r2
 800d320:	b21b      	sxth	r3, r3
 800d322:	b29a      	uxth	r2, r3
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d116      	bne.n	800d360 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	78db      	ldrb	r3, [r3, #3]
 800d336:	f003 0303 	and.w	r3, r3, #3
 800d33a:	2b01      	cmp	r3, #1
 800d33c:	d005      	beq.n	800d34a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	78db      	ldrb	r3, [r3, #3]
 800d342:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d346:	2b03      	cmp	r3, #3
 800d348:	d127      	bne.n	800d39a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	799b      	ldrb	r3, [r3, #6]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d003      	beq.n	800d35a <USBH_ParseEPDesc+0xfc>
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	799b      	ldrb	r3, [r3, #6]
 800d356:	2b10      	cmp	r3, #16
 800d358:	d91f      	bls.n	800d39a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800d35a:	2303      	movs	r3, #3
 800d35c:	75fb      	strb	r3, [r7, #23]
 800d35e:	e01c      	b.n	800d39a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	78db      	ldrb	r3, [r3, #3]
 800d364:	f003 0303 	and.w	r3, r3, #3
 800d368:	2b01      	cmp	r3, #1
 800d36a:	d10a      	bne.n	800d382 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	799b      	ldrb	r3, [r3, #6]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d003      	beq.n	800d37c <USBH_ParseEPDesc+0x11e>
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	799b      	ldrb	r3, [r3, #6]
 800d378:	2b10      	cmp	r3, #16
 800d37a:	d90e      	bls.n	800d39a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800d37c:	2303      	movs	r3, #3
 800d37e:	75fb      	strb	r3, [r7, #23]
 800d380:	e00b      	b.n	800d39a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	78db      	ldrb	r3, [r3, #3]
 800d386:	f003 0303 	and.w	r3, r3, #3
 800d38a:	2b03      	cmp	r3, #3
 800d38c:	d105      	bne.n	800d39a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	799b      	ldrb	r3, [r3, #6]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d101      	bne.n	800d39a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800d396:	2303      	movs	r3, #3
 800d398:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800d39a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	371c      	adds	r7, #28
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr

0800d3a8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b087      	sub	sp, #28
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	3301      	adds	r3, #1
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	2b03      	cmp	r3, #3
 800d3be:	d120      	bne.n	800d402 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	1e9a      	subs	r2, r3, #2
 800d3c6:	88fb      	ldrh	r3, [r7, #6]
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	bf28      	it	cs
 800d3cc:	4613      	movcs	r3, r2
 800d3ce:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	3302      	adds	r3, #2
 800d3d4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	82fb      	strh	r3, [r7, #22]
 800d3da:	e00b      	b.n	800d3f4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d3dc:	8afb      	ldrh	r3, [r7, #22]
 800d3de:	68fa      	ldr	r2, [r7, #12]
 800d3e0:	4413      	add	r3, r2
 800d3e2:	781a      	ldrb	r2, [r3, #0]
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	3301      	adds	r3, #1
 800d3ec:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d3ee:	8afb      	ldrh	r3, [r7, #22]
 800d3f0:	3302      	adds	r3, #2
 800d3f2:	82fb      	strh	r3, [r7, #22]
 800d3f4:	8afa      	ldrh	r2, [r7, #22]
 800d3f6:	8abb      	ldrh	r3, [r7, #20]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d3ef      	bcc.n	800d3dc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	2200      	movs	r2, #0
 800d400:	701a      	strb	r2, [r3, #0]
  }
}
 800d402:	bf00      	nop
 800d404:	371c      	adds	r7, #28
 800d406:	46bd      	mov	sp, r7
 800d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40c:	4770      	bx	lr

0800d40e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d40e:	b480      	push	{r7}
 800d410:	b085      	sub	sp, #20
 800d412:	af00      	add	r7, sp, #0
 800d414:	6078      	str	r0, [r7, #4]
 800d416:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	881a      	ldrh	r2, [r3, #0]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	b29b      	uxth	r3, r3
 800d422:	4413      	add	r3, r2
 800d424:	b29a      	uxth	r2, r3
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	4413      	add	r3, r2
 800d434:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d436:	68fb      	ldr	r3, [r7, #12]
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3714      	adds	r7, #20
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr

0800d444 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b086      	sub	sp, #24
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	4613      	mov	r3, r2
 800d450:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d452:	2301      	movs	r3, #1
 800d454:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	789b      	ldrb	r3, [r3, #2]
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	d002      	beq.n	800d464 <USBH_CtlReq+0x20>
 800d45e:	2b02      	cmp	r3, #2
 800d460:	d00f      	beq.n	800d482 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d462:	e027      	b.n	800d4b4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	68ba      	ldr	r2, [r7, #8]
 800d468:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	88fa      	ldrh	r2, [r7, #6]
 800d46e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2201      	movs	r2, #1
 800d474:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2202      	movs	r2, #2
 800d47a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d47c:	2301      	movs	r3, #1
 800d47e:	75fb      	strb	r3, [r7, #23]
      break;
 800d480:	e018      	b.n	800d4b4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d482:	68f8      	ldr	r0, [r7, #12]
 800d484:	f000 f81c 	bl	800d4c0 <USBH_HandleControl>
 800d488:	4603      	mov	r3, r0
 800d48a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d48c:	7dfb      	ldrb	r3, [r7, #23]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d002      	beq.n	800d498 <USBH_CtlReq+0x54>
 800d492:	7dfb      	ldrb	r3, [r7, #23]
 800d494:	2b03      	cmp	r3, #3
 800d496:	d106      	bne.n	800d4a6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2201      	movs	r2, #1
 800d49c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	761a      	strb	r2, [r3, #24]
      break;
 800d4a4:	e005      	b.n	800d4b2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d4a6:	7dfb      	ldrb	r3, [r7, #23]
 800d4a8:	2b02      	cmp	r3, #2
 800d4aa:	d102      	bne.n	800d4b2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	709a      	strb	r2, [r3, #2]
      break;
 800d4b2:	bf00      	nop
  }
  return status;
 800d4b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3718      	adds	r7, #24
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
	...

0800d4c0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b086      	sub	sp, #24
 800d4c4:	af02      	add	r7, sp, #8
 800d4c6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	7e1b      	ldrb	r3, [r3, #24]
 800d4d4:	3b01      	subs	r3, #1
 800d4d6:	2b0a      	cmp	r3, #10
 800d4d8:	f200 8156 	bhi.w	800d788 <USBH_HandleControl+0x2c8>
 800d4dc:	a201      	add	r2, pc, #4	; (adr r2, 800d4e4 <USBH_HandleControl+0x24>)
 800d4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e2:	bf00      	nop
 800d4e4:	0800d511 	.word	0x0800d511
 800d4e8:	0800d52b 	.word	0x0800d52b
 800d4ec:	0800d595 	.word	0x0800d595
 800d4f0:	0800d5bb 	.word	0x0800d5bb
 800d4f4:	0800d5f3 	.word	0x0800d5f3
 800d4f8:	0800d61d 	.word	0x0800d61d
 800d4fc:	0800d66f 	.word	0x0800d66f
 800d500:	0800d691 	.word	0x0800d691
 800d504:	0800d6cd 	.word	0x0800d6cd
 800d508:	0800d6f3 	.word	0x0800d6f3
 800d50c:	0800d731 	.word	0x0800d731
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f103 0110 	add.w	r1, r3, #16
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	795b      	ldrb	r3, [r3, #5]
 800d51a:	461a      	mov	r2, r3
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f000 f943 	bl	800d7a8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2202      	movs	r2, #2
 800d526:	761a      	strb	r2, [r3, #24]
      break;
 800d528:	e139      	b.n	800d79e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	795b      	ldrb	r3, [r3, #5]
 800d52e:	4619      	mov	r1, r3
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f003 ffb5 	bl	80114a0 <USBH_LL_GetURBState>
 800d536:	4603      	mov	r3, r0
 800d538:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d53a:	7bbb      	ldrb	r3, [r7, #14]
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d11e      	bne.n	800d57e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	7c1b      	ldrb	r3, [r3, #16]
 800d544:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d548:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	8adb      	ldrh	r3, [r3, #22]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d00a      	beq.n	800d568 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d552:	7b7b      	ldrb	r3, [r7, #13]
 800d554:	2b80      	cmp	r3, #128	; 0x80
 800d556:	d103      	bne.n	800d560 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2203      	movs	r2, #3
 800d55c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d55e:	e115      	b.n	800d78c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2205      	movs	r2, #5
 800d564:	761a      	strb	r2, [r3, #24]
      break;
 800d566:	e111      	b.n	800d78c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800d568:	7b7b      	ldrb	r3, [r7, #13]
 800d56a:	2b80      	cmp	r3, #128	; 0x80
 800d56c:	d103      	bne.n	800d576 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2209      	movs	r2, #9
 800d572:	761a      	strb	r2, [r3, #24]
      break;
 800d574:	e10a      	b.n	800d78c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2207      	movs	r2, #7
 800d57a:	761a      	strb	r2, [r3, #24]
      break;
 800d57c:	e106      	b.n	800d78c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d57e:	7bbb      	ldrb	r3, [r7, #14]
 800d580:	2b04      	cmp	r3, #4
 800d582:	d003      	beq.n	800d58c <USBH_HandleControl+0xcc>
 800d584:	7bbb      	ldrb	r3, [r7, #14]
 800d586:	2b02      	cmp	r3, #2
 800d588:	f040 8100 	bne.w	800d78c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	220b      	movs	r2, #11
 800d590:	761a      	strb	r2, [r3, #24]
      break;
 800d592:	e0fb      	b.n	800d78c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d59a:	b29a      	uxth	r2, r3
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6899      	ldr	r1, [r3, #8]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	899a      	ldrh	r2, [r3, #12]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	791b      	ldrb	r3, [r3, #4]
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f000 f93a 	bl	800d826 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2204      	movs	r2, #4
 800d5b6:	761a      	strb	r2, [r3, #24]
      break;
 800d5b8:	e0f1      	b.n	800d79e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	791b      	ldrb	r3, [r3, #4]
 800d5be:	4619      	mov	r1, r3
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f003 ff6d 	bl	80114a0 <USBH_LL_GetURBState>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d5ca:	7bbb      	ldrb	r3, [r7, #14]
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d102      	bne.n	800d5d6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2209      	movs	r2, #9
 800d5d4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d5d6:	7bbb      	ldrb	r3, [r7, #14]
 800d5d8:	2b05      	cmp	r3, #5
 800d5da:	d102      	bne.n	800d5e2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d5dc:	2303      	movs	r3, #3
 800d5de:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d5e0:	e0d6      	b.n	800d790 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800d5e2:	7bbb      	ldrb	r3, [r7, #14]
 800d5e4:	2b04      	cmp	r3, #4
 800d5e6:	f040 80d3 	bne.w	800d790 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	220b      	movs	r2, #11
 800d5ee:	761a      	strb	r2, [r3, #24]
      break;
 800d5f0:	e0ce      	b.n	800d790 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6899      	ldr	r1, [r3, #8]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	899a      	ldrh	r2, [r3, #12]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	795b      	ldrb	r3, [r3, #5]
 800d5fe:	2001      	movs	r0, #1
 800d600:	9000      	str	r0, [sp, #0]
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 f8ea 	bl	800d7dc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d60e:	b29a      	uxth	r2, r3
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2206      	movs	r2, #6
 800d618:	761a      	strb	r2, [r3, #24]
      break;
 800d61a:	e0c0      	b.n	800d79e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	795b      	ldrb	r3, [r3, #5]
 800d620:	4619      	mov	r1, r3
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f003 ff3c 	bl	80114a0 <USBH_LL_GetURBState>
 800d628:	4603      	mov	r3, r0
 800d62a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d62c:	7bbb      	ldrb	r3, [r7, #14]
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d103      	bne.n	800d63a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2207      	movs	r2, #7
 800d636:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d638:	e0ac      	b.n	800d794 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800d63a:	7bbb      	ldrb	r3, [r7, #14]
 800d63c:	2b05      	cmp	r3, #5
 800d63e:	d105      	bne.n	800d64c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	220c      	movs	r2, #12
 800d644:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d646:	2303      	movs	r3, #3
 800d648:	73fb      	strb	r3, [r7, #15]
      break;
 800d64a:	e0a3      	b.n	800d794 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d64c:	7bbb      	ldrb	r3, [r7, #14]
 800d64e:	2b02      	cmp	r3, #2
 800d650:	d103      	bne.n	800d65a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2205      	movs	r2, #5
 800d656:	761a      	strb	r2, [r3, #24]
      break;
 800d658:	e09c      	b.n	800d794 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d65a:	7bbb      	ldrb	r3, [r7, #14]
 800d65c:	2b04      	cmp	r3, #4
 800d65e:	f040 8099 	bne.w	800d794 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	220b      	movs	r2, #11
 800d666:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d668:	2302      	movs	r3, #2
 800d66a:	73fb      	strb	r3, [r7, #15]
      break;
 800d66c:	e092      	b.n	800d794 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	791b      	ldrb	r3, [r3, #4]
 800d672:	2200      	movs	r2, #0
 800d674:	2100      	movs	r1, #0
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f000 f8d5 	bl	800d826 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d682:	b29a      	uxth	r2, r3
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2208      	movs	r2, #8
 800d68c:	761a      	strb	r2, [r3, #24]

      break;
 800d68e:	e086      	b.n	800d79e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	791b      	ldrb	r3, [r3, #4]
 800d694:	4619      	mov	r1, r3
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f003 ff02 	bl	80114a0 <USBH_LL_GetURBState>
 800d69c:	4603      	mov	r3, r0
 800d69e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d6a0:	7bbb      	ldrb	r3, [r7, #14]
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d105      	bne.n	800d6b2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	220d      	movs	r2, #13
 800d6aa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d6b0:	e072      	b.n	800d798 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800d6b2:	7bbb      	ldrb	r3, [r7, #14]
 800d6b4:	2b04      	cmp	r3, #4
 800d6b6:	d103      	bne.n	800d6c0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	220b      	movs	r2, #11
 800d6bc:	761a      	strb	r2, [r3, #24]
      break;
 800d6be:	e06b      	b.n	800d798 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800d6c0:	7bbb      	ldrb	r3, [r7, #14]
 800d6c2:	2b05      	cmp	r3, #5
 800d6c4:	d168      	bne.n	800d798 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800d6c6:	2303      	movs	r3, #3
 800d6c8:	73fb      	strb	r3, [r7, #15]
      break;
 800d6ca:	e065      	b.n	800d798 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	795b      	ldrb	r3, [r3, #5]
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	9200      	str	r2, [sp, #0]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	2100      	movs	r1, #0
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f000 f87f 	bl	800d7dc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d6e4:	b29a      	uxth	r2, r3
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	220a      	movs	r2, #10
 800d6ee:	761a      	strb	r2, [r3, #24]
      break;
 800d6f0:	e055      	b.n	800d79e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	795b      	ldrb	r3, [r3, #5]
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f003 fed1 	bl	80114a0 <USBH_LL_GetURBState>
 800d6fe:	4603      	mov	r3, r0
 800d700:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d702:	7bbb      	ldrb	r3, [r7, #14]
 800d704:	2b01      	cmp	r3, #1
 800d706:	d105      	bne.n	800d714 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d708:	2300      	movs	r3, #0
 800d70a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	220d      	movs	r2, #13
 800d710:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d712:	e043      	b.n	800d79c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d714:	7bbb      	ldrb	r3, [r7, #14]
 800d716:	2b02      	cmp	r3, #2
 800d718:	d103      	bne.n	800d722 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2209      	movs	r2, #9
 800d71e:	761a      	strb	r2, [r3, #24]
      break;
 800d720:	e03c      	b.n	800d79c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d722:	7bbb      	ldrb	r3, [r7, #14]
 800d724:	2b04      	cmp	r3, #4
 800d726:	d139      	bne.n	800d79c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	220b      	movs	r2, #11
 800d72c:	761a      	strb	r2, [r3, #24]
      break;
 800d72e:	e035      	b.n	800d79c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	7e5b      	ldrb	r3, [r3, #25]
 800d734:	3301      	adds	r3, #1
 800d736:	b2da      	uxtb	r2, r3
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	765a      	strb	r2, [r3, #25]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	7e5b      	ldrb	r3, [r3, #25]
 800d740:	2b02      	cmp	r3, #2
 800d742:	d806      	bhi.n	800d752 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2201      	movs	r2, #1
 800d748:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2201      	movs	r2, #1
 800d74e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d750:	e025      	b.n	800d79e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d758:	2106      	movs	r1, #6
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	795b      	ldrb	r3, [r3, #5]
 800d768:	4619      	mov	r1, r3
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 f90c 	bl	800d988 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	791b      	ldrb	r3, [r3, #4]
 800d774:	4619      	mov	r1, r3
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f000 f906 	bl	800d988 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2200      	movs	r2, #0
 800d780:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d782:	2302      	movs	r3, #2
 800d784:	73fb      	strb	r3, [r7, #15]
      break;
 800d786:	e00a      	b.n	800d79e <USBH_HandleControl+0x2de>

    default:
      break;
 800d788:	bf00      	nop
 800d78a:	e008      	b.n	800d79e <USBH_HandleControl+0x2de>
      break;
 800d78c:	bf00      	nop
 800d78e:	e006      	b.n	800d79e <USBH_HandleControl+0x2de>
      break;
 800d790:	bf00      	nop
 800d792:	e004      	b.n	800d79e <USBH_HandleControl+0x2de>
      break;
 800d794:	bf00      	nop
 800d796:	e002      	b.n	800d79e <USBH_HandleControl+0x2de>
      break;
 800d798:	bf00      	nop
 800d79a:	e000      	b.n	800d79e <USBH_HandleControl+0x2de>
      break;
 800d79c:	bf00      	nop
  }

  return status;
 800d79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3710      	adds	r7, #16
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b088      	sub	sp, #32
 800d7ac:	af04      	add	r7, sp, #16
 800d7ae:	60f8      	str	r0, [r7, #12]
 800d7b0:	60b9      	str	r1, [r7, #8]
 800d7b2:	4613      	mov	r3, r2
 800d7b4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d7b6:	79f9      	ldrb	r1, [r7, #7]
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	9303      	str	r3, [sp, #12]
 800d7bc:	2308      	movs	r3, #8
 800d7be:	9302      	str	r3, [sp, #8]
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	9301      	str	r3, [sp, #4]
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	9300      	str	r3, [sp, #0]
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	68f8      	ldr	r0, [r7, #12]
 800d7ce:	f003 fe36 	bl	801143e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d7d2:	2300      	movs	r3, #0
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3710      	adds	r7, #16
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b088      	sub	sp, #32
 800d7e0:	af04      	add	r7, sp, #16
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	4611      	mov	r1, r2
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	460b      	mov	r3, r1
 800d7ec:	80fb      	strh	r3, [r7, #6]
 800d7ee:	4613      	mov	r3, r2
 800d7f0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d001      	beq.n	800d800 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d800:	7979      	ldrb	r1, [r7, #5]
 800d802:	7e3b      	ldrb	r3, [r7, #24]
 800d804:	9303      	str	r3, [sp, #12]
 800d806:	88fb      	ldrh	r3, [r7, #6]
 800d808:	9302      	str	r3, [sp, #8]
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	9301      	str	r3, [sp, #4]
 800d80e:	2301      	movs	r3, #1
 800d810:	9300      	str	r3, [sp, #0]
 800d812:	2300      	movs	r3, #0
 800d814:	2200      	movs	r2, #0
 800d816:	68f8      	ldr	r0, [r7, #12]
 800d818:	f003 fe11 	bl	801143e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d81c:	2300      	movs	r3, #0
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3710      	adds	r7, #16
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}

0800d826 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d826:	b580      	push	{r7, lr}
 800d828:	b088      	sub	sp, #32
 800d82a:	af04      	add	r7, sp, #16
 800d82c:	60f8      	str	r0, [r7, #12]
 800d82e:	60b9      	str	r1, [r7, #8]
 800d830:	4611      	mov	r1, r2
 800d832:	461a      	mov	r2, r3
 800d834:	460b      	mov	r3, r1
 800d836:	80fb      	strh	r3, [r7, #6]
 800d838:	4613      	mov	r3, r2
 800d83a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d83c:	7979      	ldrb	r1, [r7, #5]
 800d83e:	2300      	movs	r3, #0
 800d840:	9303      	str	r3, [sp, #12]
 800d842:	88fb      	ldrh	r3, [r7, #6]
 800d844:	9302      	str	r3, [sp, #8]
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	9301      	str	r3, [sp, #4]
 800d84a:	2301      	movs	r3, #1
 800d84c:	9300      	str	r3, [sp, #0]
 800d84e:	2300      	movs	r3, #0
 800d850:	2201      	movs	r2, #1
 800d852:	68f8      	ldr	r0, [r7, #12]
 800d854:	f003 fdf3 	bl	801143e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d858:	2300      	movs	r3, #0

}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3710      	adds	r7, #16
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}

0800d862 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d862:	b580      	push	{r7, lr}
 800d864:	b088      	sub	sp, #32
 800d866:	af04      	add	r7, sp, #16
 800d868:	60f8      	str	r0, [r7, #12]
 800d86a:	60b9      	str	r1, [r7, #8]
 800d86c:	4611      	mov	r1, r2
 800d86e:	461a      	mov	r2, r3
 800d870:	460b      	mov	r3, r1
 800d872:	80fb      	strh	r3, [r7, #6]
 800d874:	4613      	mov	r3, r2
 800d876:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d001      	beq.n	800d886 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d882:	2300      	movs	r3, #0
 800d884:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d886:	7979      	ldrb	r1, [r7, #5]
 800d888:	7e3b      	ldrb	r3, [r7, #24]
 800d88a:	9303      	str	r3, [sp, #12]
 800d88c:	88fb      	ldrh	r3, [r7, #6]
 800d88e:	9302      	str	r3, [sp, #8]
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	9301      	str	r3, [sp, #4]
 800d894:	2301      	movs	r3, #1
 800d896:	9300      	str	r3, [sp, #0]
 800d898:	2302      	movs	r3, #2
 800d89a:	2200      	movs	r2, #0
 800d89c:	68f8      	ldr	r0, [r7, #12]
 800d89e:	f003 fdce 	bl	801143e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d8a2:	2300      	movs	r3, #0
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3710      	adds	r7, #16
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b088      	sub	sp, #32
 800d8b0:	af04      	add	r7, sp, #16
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	4611      	mov	r1, r2
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	80fb      	strh	r3, [r7, #6]
 800d8be:	4613      	mov	r3, r2
 800d8c0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d8c2:	7979      	ldrb	r1, [r7, #5]
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	9303      	str	r3, [sp, #12]
 800d8c8:	88fb      	ldrh	r3, [r7, #6]
 800d8ca:	9302      	str	r3, [sp, #8]
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	9301      	str	r3, [sp, #4]
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	9300      	str	r3, [sp, #0]
 800d8d4:	2302      	movs	r3, #2
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	68f8      	ldr	r0, [r7, #12]
 800d8da:	f003 fdb0 	bl	801143e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d8de:	2300      	movs	r3, #0
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3710      	adds	r7, #16
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b086      	sub	sp, #24
 800d8ec:	af04      	add	r7, sp, #16
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	4608      	mov	r0, r1
 800d8f2:	4611      	mov	r1, r2
 800d8f4:	461a      	mov	r2, r3
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	70fb      	strb	r3, [r7, #3]
 800d8fa:	460b      	mov	r3, r1
 800d8fc:	70bb      	strb	r3, [r7, #2]
 800d8fe:	4613      	mov	r3, r2
 800d900:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d902:	7878      	ldrb	r0, [r7, #1]
 800d904:	78ba      	ldrb	r2, [r7, #2]
 800d906:	78f9      	ldrb	r1, [r7, #3]
 800d908:	8b3b      	ldrh	r3, [r7, #24]
 800d90a:	9302      	str	r3, [sp, #8]
 800d90c:	7d3b      	ldrb	r3, [r7, #20]
 800d90e:	9301      	str	r3, [sp, #4]
 800d910:	7c3b      	ldrb	r3, [r7, #16]
 800d912:	9300      	str	r3, [sp, #0]
 800d914:	4603      	mov	r3, r0
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f003 fd43 	bl	80113a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800d91c:	2300      	movs	r3, #0
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3708      	adds	r7, #8
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}

0800d926 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d926:	b580      	push	{r7, lr}
 800d928:	b082      	sub	sp, #8
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	6078      	str	r0, [r7, #4]
 800d92e:	460b      	mov	r3, r1
 800d930:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d932:	78fb      	ldrb	r3, [r7, #3]
 800d934:	4619      	mov	r1, r3
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f003 fd62 	bl	8011400 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d93c:	2300      	movs	r3, #0
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3708      	adds	r7, #8
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}

0800d946 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d946:	b580      	push	{r7, lr}
 800d948:	b084      	sub	sp, #16
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
 800d94e:	460b      	mov	r3, r1
 800d950:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f000 f836 	bl	800d9c4 <USBH_GetFreePipe>
 800d958:	4603      	mov	r3, r0
 800d95a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d95c:	89fb      	ldrh	r3, [r7, #14]
 800d95e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d962:	4293      	cmp	r3, r2
 800d964:	d00a      	beq.n	800d97c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d966:	78fa      	ldrb	r2, [r7, #3]
 800d968:	89fb      	ldrh	r3, [r7, #14]
 800d96a:	f003 030f 	and.w	r3, r3, #15
 800d96e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d972:	6879      	ldr	r1, [r7, #4]
 800d974:	33e0      	adds	r3, #224	; 0xe0
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	440b      	add	r3, r1
 800d97a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d97c:	89fb      	ldrh	r3, [r7, #14]
 800d97e:	b2db      	uxtb	r3, r3
}
 800d980:	4618      	mov	r0, r3
 800d982:	3710      	adds	r7, #16
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}

0800d988 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	460b      	mov	r3, r1
 800d992:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d994:	78fb      	ldrb	r3, [r7, #3]
 800d996:	2b0f      	cmp	r3, #15
 800d998:	d80d      	bhi.n	800d9b6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d99a:	78fb      	ldrb	r3, [r7, #3]
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	33e0      	adds	r3, #224	; 0xe0
 800d9a0:	009b      	lsls	r3, r3, #2
 800d9a2:	4413      	add	r3, r2
 800d9a4:	685a      	ldr	r2, [r3, #4]
 800d9a6:	78fb      	ldrb	r3, [r7, #3]
 800d9a8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d9ac:	6879      	ldr	r1, [r7, #4]
 800d9ae:	33e0      	adds	r3, #224	; 0xe0
 800d9b0:	009b      	lsls	r3, r3, #2
 800d9b2:	440b      	add	r3, r1
 800d9b4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d9b6:	2300      	movs	r3, #0
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	370c      	adds	r7, #12
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr

0800d9c4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b085      	sub	sp, #20
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	73fb      	strb	r3, [r7, #15]
 800d9d4:	e00f      	b.n	800d9f6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d9d6:	7bfb      	ldrb	r3, [r7, #15]
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	33e0      	adds	r3, #224	; 0xe0
 800d9dc:	009b      	lsls	r3, r3, #2
 800d9de:	4413      	add	r3, r2
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d102      	bne.n	800d9f0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d9ea:	7bfb      	ldrb	r3, [r7, #15]
 800d9ec:	b29b      	uxth	r3, r3
 800d9ee:	e007      	b.n	800da00 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d9f0:	7bfb      	ldrb	r3, [r7, #15]
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	73fb      	strb	r3, [r7, #15]
 800d9f6:	7bfb      	ldrb	r3, [r7, #15]
 800d9f8:	2b0f      	cmp	r3, #15
 800d9fa:	d9ec      	bls.n	800d9d6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d9fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800da00:	4618      	mov	r0, r3
 800da02:	3714      	adds	r7, #20
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr

0800da0c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b084      	sub	sp, #16
 800da10:	af00      	add	r7, sp, #0
 800da12:	4603      	mov	r3, r0
 800da14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800da16:	79fb      	ldrb	r3, [r7, #7]
 800da18:	4a08      	ldr	r2, [pc, #32]	; (800da3c <disk_status+0x30>)
 800da1a:	009b      	lsls	r3, r3, #2
 800da1c:	4413      	add	r3, r2
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	79fa      	ldrb	r2, [r7, #7]
 800da24:	4905      	ldr	r1, [pc, #20]	; (800da3c <disk_status+0x30>)
 800da26:	440a      	add	r2, r1
 800da28:	7a12      	ldrb	r2, [r2, #8]
 800da2a:	4610      	mov	r0, r2
 800da2c:	4798      	blx	r3
 800da2e:	4603      	mov	r3, r0
 800da30:	73fb      	strb	r3, [r7, #15]
  return stat;
 800da32:	7bfb      	ldrb	r3, [r7, #15]
}
 800da34:	4618      	mov	r0, r3
 800da36:	3710      	adds	r7, #16
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	200022e0 	.word	0x200022e0

0800da40 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	4603      	mov	r3, r0
 800da48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800da4a:	2300      	movs	r3, #0
 800da4c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800da4e:	79fb      	ldrb	r3, [r7, #7]
 800da50:	4a0d      	ldr	r2, [pc, #52]	; (800da88 <disk_initialize+0x48>)
 800da52:	5cd3      	ldrb	r3, [r2, r3]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d111      	bne.n	800da7c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800da58:	79fb      	ldrb	r3, [r7, #7]
 800da5a:	4a0b      	ldr	r2, [pc, #44]	; (800da88 <disk_initialize+0x48>)
 800da5c:	2101      	movs	r1, #1
 800da5e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800da60:	79fb      	ldrb	r3, [r7, #7]
 800da62:	4a09      	ldr	r2, [pc, #36]	; (800da88 <disk_initialize+0x48>)
 800da64:	009b      	lsls	r3, r3, #2
 800da66:	4413      	add	r3, r2
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	79fa      	ldrb	r2, [r7, #7]
 800da6e:	4906      	ldr	r1, [pc, #24]	; (800da88 <disk_initialize+0x48>)
 800da70:	440a      	add	r2, r1
 800da72:	7a12      	ldrb	r2, [r2, #8]
 800da74:	4610      	mov	r0, r2
 800da76:	4798      	blx	r3
 800da78:	4603      	mov	r3, r0
 800da7a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800da7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3710      	adds	r7, #16
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	200022e0 	.word	0x200022e0

0800da8c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800da8c:	b590      	push	{r4, r7, lr}
 800da8e:	b087      	sub	sp, #28
 800da90:	af00      	add	r7, sp, #0
 800da92:	60b9      	str	r1, [r7, #8]
 800da94:	607a      	str	r2, [r7, #4]
 800da96:	603b      	str	r3, [r7, #0]
 800da98:	4603      	mov	r3, r0
 800da9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800da9c:	7bfb      	ldrb	r3, [r7, #15]
 800da9e:	4a0a      	ldr	r2, [pc, #40]	; (800dac8 <disk_read+0x3c>)
 800daa0:	009b      	lsls	r3, r3, #2
 800daa2:	4413      	add	r3, r2
 800daa4:	685b      	ldr	r3, [r3, #4]
 800daa6:	689c      	ldr	r4, [r3, #8]
 800daa8:	7bfb      	ldrb	r3, [r7, #15]
 800daaa:	4a07      	ldr	r2, [pc, #28]	; (800dac8 <disk_read+0x3c>)
 800daac:	4413      	add	r3, r2
 800daae:	7a18      	ldrb	r0, [r3, #8]
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	68b9      	ldr	r1, [r7, #8]
 800dab6:	47a0      	blx	r4
 800dab8:	4603      	mov	r3, r0
 800daba:	75fb      	strb	r3, [r7, #23]
  return res;
 800dabc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	371c      	adds	r7, #28
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd90      	pop	{r4, r7, pc}
 800dac6:	bf00      	nop
 800dac8:	200022e0 	.word	0x200022e0

0800dacc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800dacc:	b590      	push	{r4, r7, lr}
 800dace:	b087      	sub	sp, #28
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	60b9      	str	r1, [r7, #8]
 800dad4:	607a      	str	r2, [r7, #4]
 800dad6:	603b      	str	r3, [r7, #0]
 800dad8:	4603      	mov	r3, r0
 800dada:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800dadc:	7bfb      	ldrb	r3, [r7, #15]
 800dade:	4a0a      	ldr	r2, [pc, #40]	; (800db08 <disk_write+0x3c>)
 800dae0:	009b      	lsls	r3, r3, #2
 800dae2:	4413      	add	r3, r2
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	68dc      	ldr	r4, [r3, #12]
 800dae8:	7bfb      	ldrb	r3, [r7, #15]
 800daea:	4a07      	ldr	r2, [pc, #28]	; (800db08 <disk_write+0x3c>)
 800daec:	4413      	add	r3, r2
 800daee:	7a18      	ldrb	r0, [r3, #8]
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	687a      	ldr	r2, [r7, #4]
 800daf4:	68b9      	ldr	r1, [r7, #8]
 800daf6:	47a0      	blx	r4
 800daf8:	4603      	mov	r3, r0
 800dafa:	75fb      	strb	r3, [r7, #23]
  return res;
 800dafc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dafe:	4618      	mov	r0, r3
 800db00:	371c      	adds	r7, #28
 800db02:	46bd      	mov	sp, r7
 800db04:	bd90      	pop	{r4, r7, pc}
 800db06:	bf00      	nop
 800db08:	200022e0 	.word	0x200022e0

0800db0c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	4603      	mov	r3, r0
 800db14:	603a      	str	r2, [r7, #0]
 800db16:	71fb      	strb	r3, [r7, #7]
 800db18:	460b      	mov	r3, r1
 800db1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800db1c:	79fb      	ldrb	r3, [r7, #7]
 800db1e:	4a09      	ldr	r2, [pc, #36]	; (800db44 <disk_ioctl+0x38>)
 800db20:	009b      	lsls	r3, r3, #2
 800db22:	4413      	add	r3, r2
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	691b      	ldr	r3, [r3, #16]
 800db28:	79fa      	ldrb	r2, [r7, #7]
 800db2a:	4906      	ldr	r1, [pc, #24]	; (800db44 <disk_ioctl+0x38>)
 800db2c:	440a      	add	r2, r1
 800db2e:	7a10      	ldrb	r0, [r2, #8]
 800db30:	79b9      	ldrb	r1, [r7, #6]
 800db32:	683a      	ldr	r2, [r7, #0]
 800db34:	4798      	blx	r3
 800db36:	4603      	mov	r3, r0
 800db38:	73fb      	strb	r3, [r7, #15]
  return res;
 800db3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3710      	adds	r7, #16
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	200022e0 	.word	0x200022e0

0800db48 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800db48:	b480      	push	{r7}
 800db4a:	b085      	sub	sp, #20
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	3301      	adds	r3, #1
 800db54:	781b      	ldrb	r3, [r3, #0]
 800db56:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800db58:	89fb      	ldrh	r3, [r7, #14]
 800db5a:	021b      	lsls	r3, r3, #8
 800db5c:	b21a      	sxth	r2, r3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	b21b      	sxth	r3, r3
 800db64:	4313      	orrs	r3, r2
 800db66:	b21b      	sxth	r3, r3
 800db68:	81fb      	strh	r3, [r7, #14]
	return rv;
 800db6a:	89fb      	ldrh	r3, [r7, #14]
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3714      	adds	r7, #20
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800db78:	b480      	push	{r7}
 800db7a:	b085      	sub	sp, #20
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	3303      	adds	r3, #3
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	021b      	lsls	r3, r3, #8
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	3202      	adds	r2, #2
 800db90:	7812      	ldrb	r2, [r2, #0]
 800db92:	4313      	orrs	r3, r2
 800db94:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	021b      	lsls	r3, r3, #8
 800db9a:	687a      	ldr	r2, [r7, #4]
 800db9c:	3201      	adds	r2, #1
 800db9e:	7812      	ldrb	r2, [r2, #0]
 800dba0:	4313      	orrs	r3, r2
 800dba2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	021b      	lsls	r3, r3, #8
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	7812      	ldrb	r2, [r2, #0]
 800dbac:	4313      	orrs	r3, r2
 800dbae:	60fb      	str	r3, [r7, #12]
	return rv;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3714      	adds	r7, #20
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbc:	4770      	bx	lr

0800dbbe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800dbbe:	b480      	push	{r7}
 800dbc0:	b083      	sub	sp, #12
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	6078      	str	r0, [r7, #4]
 800dbc6:	460b      	mov	r3, r1
 800dbc8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	1c5a      	adds	r2, r3, #1
 800dbce:	607a      	str	r2, [r7, #4]
 800dbd0:	887a      	ldrh	r2, [r7, #2]
 800dbd2:	b2d2      	uxtb	r2, r2
 800dbd4:	701a      	strb	r2, [r3, #0]
 800dbd6:	887b      	ldrh	r3, [r7, #2]
 800dbd8:	0a1b      	lsrs	r3, r3, #8
 800dbda:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	1c5a      	adds	r2, r3, #1
 800dbe0:	607a      	str	r2, [r7, #4]
 800dbe2:	887a      	ldrh	r2, [r7, #2]
 800dbe4:	b2d2      	uxtb	r2, r2
 800dbe6:	701a      	strb	r2, [r3, #0]
}
 800dbe8:	bf00      	nop
 800dbea:	370c      	adds	r7, #12
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr

0800dbf4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b083      	sub	sp, #12
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	1c5a      	adds	r2, r3, #1
 800dc02:	607a      	str	r2, [r7, #4]
 800dc04:	683a      	ldr	r2, [r7, #0]
 800dc06:	b2d2      	uxtb	r2, r2
 800dc08:	701a      	strb	r2, [r3, #0]
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	0a1b      	lsrs	r3, r3, #8
 800dc0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	1c5a      	adds	r2, r3, #1
 800dc14:	607a      	str	r2, [r7, #4]
 800dc16:	683a      	ldr	r2, [r7, #0]
 800dc18:	b2d2      	uxtb	r2, r2
 800dc1a:	701a      	strb	r2, [r3, #0]
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	0a1b      	lsrs	r3, r3, #8
 800dc20:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	1c5a      	adds	r2, r3, #1
 800dc26:	607a      	str	r2, [r7, #4]
 800dc28:	683a      	ldr	r2, [r7, #0]
 800dc2a:	b2d2      	uxtb	r2, r2
 800dc2c:	701a      	strb	r2, [r3, #0]
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	0a1b      	lsrs	r3, r3, #8
 800dc32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	1c5a      	adds	r2, r3, #1
 800dc38:	607a      	str	r2, [r7, #4]
 800dc3a:	683a      	ldr	r2, [r7, #0]
 800dc3c:	b2d2      	uxtb	r2, r2
 800dc3e:	701a      	strb	r2, [r3, #0]
}
 800dc40:	bf00      	nop
 800dc42:	370c      	adds	r7, #12
 800dc44:	46bd      	mov	sp, r7
 800dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4a:	4770      	bx	lr

0800dc4c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800dc4c:	b480      	push	{r7}
 800dc4e:	b087      	sub	sp, #28
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d00d      	beq.n	800dc82 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800dc66:	693a      	ldr	r2, [r7, #16]
 800dc68:	1c53      	adds	r3, r2, #1
 800dc6a:	613b      	str	r3, [r7, #16]
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	1c59      	adds	r1, r3, #1
 800dc70:	6179      	str	r1, [r7, #20]
 800dc72:	7812      	ldrb	r2, [r2, #0]
 800dc74:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	3b01      	subs	r3, #1
 800dc7a:	607b      	str	r3, [r7, #4]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d1f1      	bne.n	800dc66 <mem_cpy+0x1a>
	}
}
 800dc82:	bf00      	nop
 800dc84:	371c      	adds	r7, #28
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr

0800dc8e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800dc8e:	b480      	push	{r7}
 800dc90:	b087      	sub	sp, #28
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	60f8      	str	r0, [r7, #12]
 800dc96:	60b9      	str	r1, [r7, #8]
 800dc98:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	1c5a      	adds	r2, r3, #1
 800dca2:	617a      	str	r2, [r7, #20]
 800dca4:	68ba      	ldr	r2, [r7, #8]
 800dca6:	b2d2      	uxtb	r2, r2
 800dca8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	3b01      	subs	r3, #1
 800dcae:	607b      	str	r3, [r7, #4]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d1f3      	bne.n	800dc9e <mem_set+0x10>
}
 800dcb6:	bf00      	nop
 800dcb8:	bf00      	nop
 800dcba:	371c      	adds	r7, #28
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc2:	4770      	bx	lr

0800dcc4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800dcc4:	b480      	push	{r7}
 800dcc6:	b089      	sub	sp, #36	; 0x24
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	61fb      	str	r3, [r7, #28]
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	1c5a      	adds	r2, r3, #1
 800dce0:	61fa      	str	r2, [r7, #28]
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	4619      	mov	r1, r3
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	1c5a      	adds	r2, r3, #1
 800dcea:	61ba      	str	r2, [r7, #24]
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	1acb      	subs	r3, r1, r3
 800dcf0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	3b01      	subs	r3, #1
 800dcf6:	607b      	str	r3, [r7, #4]
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d002      	beq.n	800dd04 <mem_cmp+0x40>
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d0eb      	beq.n	800dcdc <mem_cmp+0x18>

	return r;
 800dd04:	697b      	ldr	r3, [r7, #20]
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3724      	adds	r7, #36	; 0x24
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr

0800dd12 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800dd12:	b480      	push	{r7}
 800dd14:	b083      	sub	sp, #12
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
 800dd1a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800dd1c:	e002      	b.n	800dd24 <chk_chr+0x12>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	3301      	adds	r3, #1
 800dd22:	607b      	str	r3, [r7, #4]
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d005      	beq.n	800dd38 <chk_chr+0x26>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	461a      	mov	r2, r3
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d1f2      	bne.n	800dd1e <chk_chr+0xc>
	return *str;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	781b      	ldrb	r3, [r3, #0]
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	370c      	adds	r7, #12
 800dd40:	46bd      	mov	sp, r7
 800dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd46:	4770      	bx	lr

0800dd48 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b085      	sub	sp, #20
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dd52:	2300      	movs	r3, #0
 800dd54:	60bb      	str	r3, [r7, #8]
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	60fb      	str	r3, [r7, #12]
 800dd5a:	e029      	b.n	800ddb0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800dd5c:	4a27      	ldr	r2, [pc, #156]	; (800ddfc <chk_lock+0xb4>)
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	011b      	lsls	r3, r3, #4
 800dd62:	4413      	add	r3, r2
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d01d      	beq.n	800dda6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dd6a:	4a24      	ldr	r2, [pc, #144]	; (800ddfc <chk_lock+0xb4>)
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	011b      	lsls	r3, r3, #4
 800dd70:	4413      	add	r3, r2
 800dd72:	681a      	ldr	r2, [r3, #0]
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d116      	bne.n	800ddaa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800dd7c:	4a1f      	ldr	r2, [pc, #124]	; (800ddfc <chk_lock+0xb4>)
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	011b      	lsls	r3, r3, #4
 800dd82:	4413      	add	r3, r2
 800dd84:	3304      	adds	r3, #4
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d10c      	bne.n	800ddaa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dd90:	4a1a      	ldr	r2, [pc, #104]	; (800ddfc <chk_lock+0xb4>)
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	011b      	lsls	r3, r3, #4
 800dd96:	4413      	add	r3, r2
 800dd98:	3308      	adds	r3, #8
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d102      	bne.n	800ddaa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dda4:	e007      	b.n	800ddb6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800dda6:	2301      	movs	r3, #1
 800dda8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	3301      	adds	r3, #1
 800ddae:	60fb      	str	r3, [r7, #12]
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d9d2      	bls.n	800dd5c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	2b02      	cmp	r3, #2
 800ddba:	d109      	bne.n	800ddd0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d102      	bne.n	800ddc8 <chk_lock+0x80>
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	2b02      	cmp	r3, #2
 800ddc6:	d101      	bne.n	800ddcc <chk_lock+0x84>
 800ddc8:	2300      	movs	r3, #0
 800ddca:	e010      	b.n	800ddee <chk_lock+0xa6>
 800ddcc:	2312      	movs	r3, #18
 800ddce:	e00e      	b.n	800ddee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d108      	bne.n	800dde8 <chk_lock+0xa0>
 800ddd6:	4a09      	ldr	r2, [pc, #36]	; (800ddfc <chk_lock+0xb4>)
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	011b      	lsls	r3, r3, #4
 800dddc:	4413      	add	r3, r2
 800ddde:	330c      	adds	r3, #12
 800dde0:	881b      	ldrh	r3, [r3, #0]
 800dde2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dde6:	d101      	bne.n	800ddec <chk_lock+0xa4>
 800dde8:	2310      	movs	r3, #16
 800ddea:	e000      	b.n	800ddee <chk_lock+0xa6>
 800ddec:	2300      	movs	r3, #0
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3714      	adds	r7, #20
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf8:	4770      	bx	lr
 800ddfa:	bf00      	nop
 800ddfc:	200020c0 	.word	0x200020c0

0800de00 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800de00:	b480      	push	{r7}
 800de02:	b083      	sub	sp, #12
 800de04:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800de06:	2300      	movs	r3, #0
 800de08:	607b      	str	r3, [r7, #4]
 800de0a:	e002      	b.n	800de12 <enq_lock+0x12>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	3301      	adds	r3, #1
 800de10:	607b      	str	r3, [r7, #4]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2b01      	cmp	r3, #1
 800de16:	d806      	bhi.n	800de26 <enq_lock+0x26>
 800de18:	4a09      	ldr	r2, [pc, #36]	; (800de40 <enq_lock+0x40>)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	011b      	lsls	r3, r3, #4
 800de1e:	4413      	add	r3, r2
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d1f2      	bne.n	800de0c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2b02      	cmp	r3, #2
 800de2a:	bf14      	ite	ne
 800de2c:	2301      	movne	r3, #1
 800de2e:	2300      	moveq	r3, #0
 800de30:	b2db      	uxtb	r3, r3
}
 800de32:	4618      	mov	r0, r3
 800de34:	370c      	adds	r7, #12
 800de36:	46bd      	mov	sp, r7
 800de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3c:	4770      	bx	lr
 800de3e:	bf00      	nop
 800de40:	200020c0 	.word	0x200020c0

0800de44 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800de44:	b480      	push	{r7}
 800de46:	b085      	sub	sp, #20
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800de4e:	2300      	movs	r3, #0
 800de50:	60fb      	str	r3, [r7, #12]
 800de52:	e01f      	b.n	800de94 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800de54:	4a41      	ldr	r2, [pc, #260]	; (800df5c <inc_lock+0x118>)
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	011b      	lsls	r3, r3, #4
 800de5a:	4413      	add	r3, r2
 800de5c:	681a      	ldr	r2, [r3, #0]
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	429a      	cmp	r2, r3
 800de64:	d113      	bne.n	800de8e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800de66:	4a3d      	ldr	r2, [pc, #244]	; (800df5c <inc_lock+0x118>)
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	011b      	lsls	r3, r3, #4
 800de6c:	4413      	add	r3, r2
 800de6e:	3304      	adds	r3, #4
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800de76:	429a      	cmp	r2, r3
 800de78:	d109      	bne.n	800de8e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800de7a:	4a38      	ldr	r2, [pc, #224]	; (800df5c <inc_lock+0x118>)
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	011b      	lsls	r3, r3, #4
 800de80:	4413      	add	r3, r2
 800de82:	3308      	adds	r3, #8
 800de84:	681a      	ldr	r2, [r3, #0]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d006      	beq.n	800de9c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	3301      	adds	r3, #1
 800de92:	60fb      	str	r3, [r7, #12]
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	2b01      	cmp	r3, #1
 800de98:	d9dc      	bls.n	800de54 <inc_lock+0x10>
 800de9a:	e000      	b.n	800de9e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800de9c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2b02      	cmp	r3, #2
 800dea2:	d132      	bne.n	800df0a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dea4:	2300      	movs	r3, #0
 800dea6:	60fb      	str	r3, [r7, #12]
 800dea8:	e002      	b.n	800deb0 <inc_lock+0x6c>
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	3301      	adds	r3, #1
 800deae:	60fb      	str	r3, [r7, #12]
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	2b01      	cmp	r3, #1
 800deb4:	d806      	bhi.n	800dec4 <inc_lock+0x80>
 800deb6:	4a29      	ldr	r2, [pc, #164]	; (800df5c <inc_lock+0x118>)
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	011b      	lsls	r3, r3, #4
 800debc:	4413      	add	r3, r2
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d1f2      	bne.n	800deaa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	2b02      	cmp	r3, #2
 800dec8:	d101      	bne.n	800dece <inc_lock+0x8a>
 800deca:	2300      	movs	r3, #0
 800decc:	e040      	b.n	800df50 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	4922      	ldr	r1, [pc, #136]	; (800df5c <inc_lock+0x118>)
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	011b      	lsls	r3, r3, #4
 800ded8:	440b      	add	r3, r1
 800deda:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	689a      	ldr	r2, [r3, #8]
 800dee0:	491e      	ldr	r1, [pc, #120]	; (800df5c <inc_lock+0x118>)
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	011b      	lsls	r3, r3, #4
 800dee6:	440b      	add	r3, r1
 800dee8:	3304      	adds	r3, #4
 800deea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	695a      	ldr	r2, [r3, #20]
 800def0:	491a      	ldr	r1, [pc, #104]	; (800df5c <inc_lock+0x118>)
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	011b      	lsls	r3, r3, #4
 800def6:	440b      	add	r3, r1
 800def8:	3308      	adds	r3, #8
 800defa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800defc:	4a17      	ldr	r2, [pc, #92]	; (800df5c <inc_lock+0x118>)
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	011b      	lsls	r3, r3, #4
 800df02:	4413      	add	r3, r2
 800df04:	330c      	adds	r3, #12
 800df06:	2200      	movs	r2, #0
 800df08:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d009      	beq.n	800df24 <inc_lock+0xe0>
 800df10:	4a12      	ldr	r2, [pc, #72]	; (800df5c <inc_lock+0x118>)
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	011b      	lsls	r3, r3, #4
 800df16:	4413      	add	r3, r2
 800df18:	330c      	adds	r3, #12
 800df1a:	881b      	ldrh	r3, [r3, #0]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d001      	beq.n	800df24 <inc_lock+0xe0>
 800df20:	2300      	movs	r3, #0
 800df22:	e015      	b.n	800df50 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d108      	bne.n	800df3c <inc_lock+0xf8>
 800df2a:	4a0c      	ldr	r2, [pc, #48]	; (800df5c <inc_lock+0x118>)
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	011b      	lsls	r3, r3, #4
 800df30:	4413      	add	r3, r2
 800df32:	330c      	adds	r3, #12
 800df34:	881b      	ldrh	r3, [r3, #0]
 800df36:	3301      	adds	r3, #1
 800df38:	b29a      	uxth	r2, r3
 800df3a:	e001      	b.n	800df40 <inc_lock+0xfc>
 800df3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800df40:	4906      	ldr	r1, [pc, #24]	; (800df5c <inc_lock+0x118>)
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	011b      	lsls	r3, r3, #4
 800df46:	440b      	add	r3, r1
 800df48:	330c      	adds	r3, #12
 800df4a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	3301      	adds	r3, #1
}
 800df50:	4618      	mov	r0, r3
 800df52:	3714      	adds	r7, #20
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr
 800df5c:	200020c0 	.word	0x200020c0

0800df60 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800df60:	b480      	push	{r7}
 800df62:	b085      	sub	sp, #20
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	3b01      	subs	r3, #1
 800df6c:	607b      	str	r3, [r7, #4]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2b01      	cmp	r3, #1
 800df72:	d825      	bhi.n	800dfc0 <dec_lock+0x60>
		n = Files[i].ctr;
 800df74:	4a17      	ldr	r2, [pc, #92]	; (800dfd4 <dec_lock+0x74>)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	011b      	lsls	r3, r3, #4
 800df7a:	4413      	add	r3, r2
 800df7c:	330c      	adds	r3, #12
 800df7e:	881b      	ldrh	r3, [r3, #0]
 800df80:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800df82:	89fb      	ldrh	r3, [r7, #14]
 800df84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df88:	d101      	bne.n	800df8e <dec_lock+0x2e>
 800df8a:	2300      	movs	r3, #0
 800df8c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800df8e:	89fb      	ldrh	r3, [r7, #14]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d002      	beq.n	800df9a <dec_lock+0x3a>
 800df94:	89fb      	ldrh	r3, [r7, #14]
 800df96:	3b01      	subs	r3, #1
 800df98:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800df9a:	4a0e      	ldr	r2, [pc, #56]	; (800dfd4 <dec_lock+0x74>)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	011b      	lsls	r3, r3, #4
 800dfa0:	4413      	add	r3, r2
 800dfa2:	330c      	adds	r3, #12
 800dfa4:	89fa      	ldrh	r2, [r7, #14]
 800dfa6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800dfa8:	89fb      	ldrh	r3, [r7, #14]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d105      	bne.n	800dfba <dec_lock+0x5a>
 800dfae:	4a09      	ldr	r2, [pc, #36]	; (800dfd4 <dec_lock+0x74>)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	011b      	lsls	r3, r3, #4
 800dfb4:	4413      	add	r3, r2
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	737b      	strb	r3, [r7, #13]
 800dfbe:	e001      	b.n	800dfc4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800dfc0:	2302      	movs	r3, #2
 800dfc2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800dfc4:	7b7b      	ldrb	r3, [r7, #13]
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3714      	adds	r7, #20
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd0:	4770      	bx	lr
 800dfd2:	bf00      	nop
 800dfd4:	200020c0 	.word	0x200020c0

0800dfd8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b085      	sub	sp, #20
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	60fb      	str	r3, [r7, #12]
 800dfe4:	e010      	b.n	800e008 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800dfe6:	4a0d      	ldr	r2, [pc, #52]	; (800e01c <clear_lock+0x44>)
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	011b      	lsls	r3, r3, #4
 800dfec:	4413      	add	r3, r2
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d105      	bne.n	800e002 <clear_lock+0x2a>
 800dff6:	4a09      	ldr	r2, [pc, #36]	; (800e01c <clear_lock+0x44>)
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	011b      	lsls	r3, r3, #4
 800dffc:	4413      	add	r3, r2
 800dffe:	2200      	movs	r2, #0
 800e000:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	3301      	adds	r3, #1
 800e006:	60fb      	str	r3, [r7, #12]
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d9eb      	bls.n	800dfe6 <clear_lock+0xe>
	}
}
 800e00e:	bf00      	nop
 800e010:	bf00      	nop
 800e012:	3714      	adds	r7, #20
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr
 800e01c:	200020c0 	.word	0x200020c0

0800e020 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b086      	sub	sp, #24
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e028:	2300      	movs	r3, #0
 800e02a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	78db      	ldrb	r3, [r3, #3]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d034      	beq.n	800e09e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e038:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	7858      	ldrb	r0, [r3, #1]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e044:	2301      	movs	r3, #1
 800e046:	697a      	ldr	r2, [r7, #20]
 800e048:	f7ff fd40 	bl	800dacc <disk_write>
 800e04c:	4603      	mov	r3, r0
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d002      	beq.n	800e058 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e052:	2301      	movs	r3, #1
 800e054:	73fb      	strb	r3, [r7, #15]
 800e056:	e022      	b.n	800e09e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2200      	movs	r2, #0
 800e05c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e062:	697a      	ldr	r2, [r7, #20]
 800e064:	1ad2      	subs	r2, r2, r3
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	69db      	ldr	r3, [r3, #28]
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d217      	bcs.n	800e09e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	789b      	ldrb	r3, [r3, #2]
 800e072:	613b      	str	r3, [r7, #16]
 800e074:	e010      	b.n	800e098 <sync_window+0x78>
					wsect += fs->fsize;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	69db      	ldr	r3, [r3, #28]
 800e07a:	697a      	ldr	r2, [r7, #20]
 800e07c:	4413      	add	r3, r2
 800e07e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	7858      	ldrb	r0, [r3, #1]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e08a:	2301      	movs	r3, #1
 800e08c:	697a      	ldr	r2, [r7, #20]
 800e08e:	f7ff fd1d 	bl	800dacc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	3b01      	subs	r3, #1
 800e096:	613b      	str	r3, [r7, #16]
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	2b01      	cmp	r3, #1
 800e09c:	d8eb      	bhi.n	800e076 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3718      	adds	r7, #24
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b084      	sub	sp, #16
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ba:	683a      	ldr	r2, [r7, #0]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d01b      	beq.n	800e0f8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f7ff ffad 	bl	800e020 <sync_window>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e0ca:	7bfb      	ldrb	r3, [r7, #15]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d113      	bne.n	800e0f8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	7858      	ldrb	r0, [r3, #1]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e0da:	2301      	movs	r3, #1
 800e0dc:	683a      	ldr	r2, [r7, #0]
 800e0de:	f7ff fcd5 	bl	800da8c <disk_read>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d004      	beq.n	800e0f2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e0ec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	683a      	ldr	r2, [r7, #0]
 800e0f6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800e0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3710      	adds	r7, #16
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
	...

0800e104 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f7ff ff87 	bl	800e020 <sync_window>
 800e112:	4603      	mov	r3, r0
 800e114:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e116:	7bfb      	ldrb	r3, [r7, #15]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d158      	bne.n	800e1ce <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	781b      	ldrb	r3, [r3, #0]
 800e120:	2b03      	cmp	r3, #3
 800e122:	d148      	bne.n	800e1b6 <sync_fs+0xb2>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	791b      	ldrb	r3, [r3, #4]
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d144      	bne.n	800e1b6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	3334      	adds	r3, #52	; 0x34
 800e130:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e134:	2100      	movs	r1, #0
 800e136:	4618      	mov	r0, r3
 800e138:	f7ff fda9 	bl	800dc8e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	3334      	adds	r3, #52	; 0x34
 800e140:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e144:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e148:	4618      	mov	r0, r3
 800e14a:	f7ff fd38 	bl	800dbbe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	3334      	adds	r3, #52	; 0x34
 800e152:	4921      	ldr	r1, [pc, #132]	; (800e1d8 <sync_fs+0xd4>)
 800e154:	4618      	mov	r0, r3
 800e156:	f7ff fd4d 	bl	800dbf4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	3334      	adds	r3, #52	; 0x34
 800e15e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e162:	491e      	ldr	r1, [pc, #120]	; (800e1dc <sync_fs+0xd8>)
 800e164:	4618      	mov	r0, r3
 800e166:	f7ff fd45 	bl	800dbf4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	3334      	adds	r3, #52	; 0x34
 800e16e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	695b      	ldr	r3, [r3, #20]
 800e176:	4619      	mov	r1, r3
 800e178:	4610      	mov	r0, r2
 800e17a:	f7ff fd3b 	bl	800dbf4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	3334      	adds	r3, #52	; 0x34
 800e182:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	691b      	ldr	r3, [r3, #16]
 800e18a:	4619      	mov	r1, r3
 800e18c:	4610      	mov	r0, r2
 800e18e:	f7ff fd31 	bl	800dbf4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6a1b      	ldr	r3, [r3, #32]
 800e196:	1c5a      	adds	r2, r3, #1
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	7858      	ldrb	r0, [r3, #1]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	f7ff fc8e 	bl	800dacc <disk_write>
			fs->fsi_flag = 0;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	785b      	ldrb	r3, [r3, #1]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	2100      	movs	r1, #0
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7ff fca4 	bl	800db0c <disk_ioctl>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d001      	beq.n	800e1ce <sync_fs+0xca>
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3710      	adds	r7, #16
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}
 800e1d8:	41615252 	.word	0x41615252
 800e1dc:	61417272 	.word	0x61417272

0800e1e0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b083      	sub	sp, #12
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	3b02      	subs	r3, #2
 800e1ee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	699b      	ldr	r3, [r3, #24]
 800e1f4:	3b02      	subs	r3, #2
 800e1f6:	683a      	ldr	r2, [r7, #0]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d301      	bcc.n	800e200 <clust2sect+0x20>
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	e008      	b.n	800e212 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	895b      	ldrh	r3, [r3, #10]
 800e204:	461a      	mov	r2, r3
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	fb03 f202 	mul.w	r2, r3, r2
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e210:	4413      	add	r3, r2
}
 800e212:	4618      	mov	r0, r3
 800e214:	370c      	adds	r7, #12
 800e216:	46bd      	mov	sp, r7
 800e218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21c:	4770      	bx	lr

0800e21e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e21e:	b580      	push	{r7, lr}
 800e220:	b086      	sub	sp, #24
 800e222:	af00      	add	r7, sp, #0
 800e224:	6078      	str	r0, [r7, #4]
 800e226:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	2b01      	cmp	r3, #1
 800e232:	d904      	bls.n	800e23e <get_fat+0x20>
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	699b      	ldr	r3, [r3, #24]
 800e238:	683a      	ldr	r2, [r7, #0]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d302      	bcc.n	800e244 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e23e:	2301      	movs	r3, #1
 800e240:	617b      	str	r3, [r7, #20]
 800e242:	e08f      	b.n	800e364 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e244:	f04f 33ff 	mov.w	r3, #4294967295
 800e248:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	2b03      	cmp	r3, #3
 800e250:	d062      	beq.n	800e318 <get_fat+0xfa>
 800e252:	2b03      	cmp	r3, #3
 800e254:	dc7c      	bgt.n	800e350 <get_fat+0x132>
 800e256:	2b01      	cmp	r3, #1
 800e258:	d002      	beq.n	800e260 <get_fat+0x42>
 800e25a:	2b02      	cmp	r3, #2
 800e25c:	d042      	beq.n	800e2e4 <get_fat+0xc6>
 800e25e:	e077      	b.n	800e350 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	60fb      	str	r3, [r7, #12]
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	085b      	lsrs	r3, r3, #1
 800e268:	68fa      	ldr	r2, [r7, #12]
 800e26a:	4413      	add	r3, r2
 800e26c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	0a5b      	lsrs	r3, r3, #9
 800e276:	4413      	add	r3, r2
 800e278:	4619      	mov	r1, r3
 800e27a:	6938      	ldr	r0, [r7, #16]
 800e27c:	f7ff ff14 	bl	800e0a8 <move_window>
 800e280:	4603      	mov	r3, r0
 800e282:	2b00      	cmp	r3, #0
 800e284:	d167      	bne.n	800e356 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	1c5a      	adds	r2, r3, #1
 800e28a:	60fa      	str	r2, [r7, #12]
 800e28c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e290:	693a      	ldr	r2, [r7, #16]
 800e292:	4413      	add	r3, r2
 800e294:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e298:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	0a5b      	lsrs	r3, r3, #9
 800e2a2:	4413      	add	r3, r2
 800e2a4:	4619      	mov	r1, r3
 800e2a6:	6938      	ldr	r0, [r7, #16]
 800e2a8:	f7ff fefe 	bl	800e0a8 <move_window>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d153      	bne.n	800e35a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2b8:	693a      	ldr	r2, [r7, #16]
 800e2ba:	4413      	add	r3, r2
 800e2bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e2c0:	021b      	lsls	r3, r3, #8
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	f003 0301 	and.w	r3, r3, #1
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d002      	beq.n	800e2da <get_fat+0xbc>
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	091b      	lsrs	r3, r3, #4
 800e2d8:	e002      	b.n	800e2e0 <get_fat+0xc2>
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e2e0:	617b      	str	r3, [r7, #20]
			break;
 800e2e2:	e03f      	b.n	800e364 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	0a1b      	lsrs	r3, r3, #8
 800e2ec:	4413      	add	r3, r2
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	6938      	ldr	r0, [r7, #16]
 800e2f2:	f7ff fed9 	bl	800e0a8 <move_window>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d130      	bne.n	800e35e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	005b      	lsls	r3, r3, #1
 800e306:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e30a:	4413      	add	r3, r2
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7ff fc1b 	bl	800db48 <ld_word>
 800e312:	4603      	mov	r3, r0
 800e314:	617b      	str	r3, [r7, #20]
			break;
 800e316:	e025      	b.n	800e364 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	09db      	lsrs	r3, r3, #7
 800e320:	4413      	add	r3, r2
 800e322:	4619      	mov	r1, r3
 800e324:	6938      	ldr	r0, [r7, #16]
 800e326:	f7ff febf 	bl	800e0a8 <move_window>
 800e32a:	4603      	mov	r3, r0
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d118      	bne.n	800e362 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	009b      	lsls	r3, r3, #2
 800e33a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e33e:	4413      	add	r3, r2
 800e340:	4618      	mov	r0, r3
 800e342:	f7ff fc19 	bl	800db78 <ld_dword>
 800e346:	4603      	mov	r3, r0
 800e348:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e34c:	617b      	str	r3, [r7, #20]
			break;
 800e34e:	e009      	b.n	800e364 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e350:	2301      	movs	r3, #1
 800e352:	617b      	str	r3, [r7, #20]
 800e354:	e006      	b.n	800e364 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e356:	bf00      	nop
 800e358:	e004      	b.n	800e364 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e35a:	bf00      	nop
 800e35c:	e002      	b.n	800e364 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e35e:	bf00      	nop
 800e360:	e000      	b.n	800e364 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e362:	bf00      	nop
		}
	}

	return val;
 800e364:	697b      	ldr	r3, [r7, #20]
}
 800e366:	4618      	mov	r0, r3
 800e368:	3718      	adds	r7, #24
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}

0800e36e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e36e:	b590      	push	{r4, r7, lr}
 800e370:	b089      	sub	sp, #36	; 0x24
 800e372:	af00      	add	r7, sp, #0
 800e374:	60f8      	str	r0, [r7, #12]
 800e376:	60b9      	str	r1, [r7, #8]
 800e378:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e37a:	2302      	movs	r3, #2
 800e37c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	2b01      	cmp	r3, #1
 800e382:	f240 80d9 	bls.w	800e538 <put_fat+0x1ca>
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	699b      	ldr	r3, [r3, #24]
 800e38a:	68ba      	ldr	r2, [r7, #8]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	f080 80d3 	bcs.w	800e538 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	781b      	ldrb	r3, [r3, #0]
 800e396:	2b03      	cmp	r3, #3
 800e398:	f000 8096 	beq.w	800e4c8 <put_fat+0x15a>
 800e39c:	2b03      	cmp	r3, #3
 800e39e:	f300 80cb 	bgt.w	800e538 <put_fat+0x1ca>
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d002      	beq.n	800e3ac <put_fat+0x3e>
 800e3a6:	2b02      	cmp	r3, #2
 800e3a8:	d06e      	beq.n	800e488 <put_fat+0x11a>
 800e3aa:	e0c5      	b.n	800e538 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	61bb      	str	r3, [r7, #24]
 800e3b0:	69bb      	ldr	r3, [r7, #24]
 800e3b2:	085b      	lsrs	r3, r3, #1
 800e3b4:	69ba      	ldr	r2, [r7, #24]
 800e3b6:	4413      	add	r3, r2
 800e3b8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3be:	69bb      	ldr	r3, [r7, #24]
 800e3c0:	0a5b      	lsrs	r3, r3, #9
 800e3c2:	4413      	add	r3, r2
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	68f8      	ldr	r0, [r7, #12]
 800e3c8:	f7ff fe6e 	bl	800e0a8 <move_window>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e3d0:	7ffb      	ldrb	r3, [r7, #31]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	f040 80a9 	bne.w	800e52a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e3de:	69bb      	ldr	r3, [r7, #24]
 800e3e0:	1c59      	adds	r1, r3, #1
 800e3e2:	61b9      	str	r1, [r7, #24]
 800e3e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3e8:	4413      	add	r3, r2
 800e3ea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	f003 0301 	and.w	r3, r3, #1
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d00d      	beq.n	800e412 <put_fat+0xa4>
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	781b      	ldrb	r3, [r3, #0]
 800e3fa:	b25b      	sxtb	r3, r3
 800e3fc:	f003 030f 	and.w	r3, r3, #15
 800e400:	b25a      	sxtb	r2, r3
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	b2db      	uxtb	r3, r3
 800e406:	011b      	lsls	r3, r3, #4
 800e408:	b25b      	sxtb	r3, r3
 800e40a:	4313      	orrs	r3, r2
 800e40c:	b25b      	sxtb	r3, r3
 800e40e:	b2db      	uxtb	r3, r3
 800e410:	e001      	b.n	800e416 <put_fat+0xa8>
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	b2db      	uxtb	r3, r3
 800e416:	697a      	ldr	r2, [r7, #20]
 800e418:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2201      	movs	r2, #1
 800e41e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e424:	69bb      	ldr	r3, [r7, #24]
 800e426:	0a5b      	lsrs	r3, r3, #9
 800e428:	4413      	add	r3, r2
 800e42a:	4619      	mov	r1, r3
 800e42c:	68f8      	ldr	r0, [r7, #12]
 800e42e:	f7ff fe3b 	bl	800e0a8 <move_window>
 800e432:	4603      	mov	r3, r0
 800e434:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e436:	7ffb      	ldrb	r3, [r7, #31]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d178      	bne.n	800e52e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e442:	69bb      	ldr	r3, [r7, #24]
 800e444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e448:	4413      	add	r3, r2
 800e44a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	f003 0301 	and.w	r3, r3, #1
 800e452:	2b00      	cmp	r3, #0
 800e454:	d003      	beq.n	800e45e <put_fat+0xf0>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	091b      	lsrs	r3, r3, #4
 800e45a:	b2db      	uxtb	r3, r3
 800e45c:	e00e      	b.n	800e47c <put_fat+0x10e>
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	b25b      	sxtb	r3, r3
 800e464:	f023 030f 	bic.w	r3, r3, #15
 800e468:	b25a      	sxtb	r2, r3
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	0a1b      	lsrs	r3, r3, #8
 800e46e:	b25b      	sxtb	r3, r3
 800e470:	f003 030f 	and.w	r3, r3, #15
 800e474:	b25b      	sxtb	r3, r3
 800e476:	4313      	orrs	r3, r2
 800e478:	b25b      	sxtb	r3, r3
 800e47a:	b2db      	uxtb	r3, r3
 800e47c:	697a      	ldr	r2, [r7, #20]
 800e47e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2201      	movs	r2, #1
 800e484:	70da      	strb	r2, [r3, #3]
			break;
 800e486:	e057      	b.n	800e538 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	0a1b      	lsrs	r3, r3, #8
 800e490:	4413      	add	r3, r2
 800e492:	4619      	mov	r1, r3
 800e494:	68f8      	ldr	r0, [r7, #12]
 800e496:	f7ff fe07 	bl	800e0a8 <move_window>
 800e49a:	4603      	mov	r3, r0
 800e49c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e49e:	7ffb      	ldrb	r3, [r7, #31]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d146      	bne.n	800e532 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	005b      	lsls	r3, r3, #1
 800e4ae:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e4b2:	4413      	add	r3, r2
 800e4b4:	687a      	ldr	r2, [r7, #4]
 800e4b6:	b292      	uxth	r2, r2
 800e4b8:	4611      	mov	r1, r2
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7ff fb7f 	bl	800dbbe <st_word>
			fs->wflag = 1;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	70da      	strb	r2, [r3, #3]
			break;
 800e4c6:	e037      	b.n	800e538 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	09db      	lsrs	r3, r3, #7
 800e4d0:	4413      	add	r3, r2
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	68f8      	ldr	r0, [r7, #12]
 800e4d6:	f7ff fde7 	bl	800e0a8 <move_window>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e4de:	7ffb      	ldrb	r3, [r7, #31]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d128      	bne.n	800e536 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	009b      	lsls	r3, r3, #2
 800e4f4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e4f8:	4413      	add	r3, r2
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7ff fb3c 	bl	800db78 <ld_dword>
 800e500:	4603      	mov	r3, r0
 800e502:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e506:	4323      	orrs	r3, r4
 800e508:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e518:	4413      	add	r3, r2
 800e51a:	6879      	ldr	r1, [r7, #4]
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7ff fb69 	bl	800dbf4 <st_dword>
			fs->wflag = 1;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2201      	movs	r2, #1
 800e526:	70da      	strb	r2, [r3, #3]
			break;
 800e528:	e006      	b.n	800e538 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e52a:	bf00      	nop
 800e52c:	e004      	b.n	800e538 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e52e:	bf00      	nop
 800e530:	e002      	b.n	800e538 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e532:	bf00      	nop
 800e534:	e000      	b.n	800e538 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e536:	bf00      	nop
		}
	}
	return res;
 800e538:	7ffb      	ldrb	r3, [r7, #31]
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3724      	adds	r7, #36	; 0x24
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd90      	pop	{r4, r7, pc}

0800e542 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e542:	b580      	push	{r7, lr}
 800e544:	b088      	sub	sp, #32
 800e546:	af00      	add	r7, sp, #0
 800e548:	60f8      	str	r0, [r7, #12]
 800e54a:	60b9      	str	r1, [r7, #8]
 800e54c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e54e:	2300      	movs	r3, #0
 800e550:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	2b01      	cmp	r3, #1
 800e55c:	d904      	bls.n	800e568 <remove_chain+0x26>
 800e55e:	69bb      	ldr	r3, [r7, #24]
 800e560:	699b      	ldr	r3, [r3, #24]
 800e562:	68ba      	ldr	r2, [r7, #8]
 800e564:	429a      	cmp	r2, r3
 800e566:	d301      	bcc.n	800e56c <remove_chain+0x2a>
 800e568:	2302      	movs	r3, #2
 800e56a:	e04b      	b.n	800e604 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d00c      	beq.n	800e58c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e572:	f04f 32ff 	mov.w	r2, #4294967295
 800e576:	6879      	ldr	r1, [r7, #4]
 800e578:	69b8      	ldr	r0, [r7, #24]
 800e57a:	f7ff fef8 	bl	800e36e <put_fat>
 800e57e:	4603      	mov	r3, r0
 800e580:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e582:	7ffb      	ldrb	r3, [r7, #31]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d001      	beq.n	800e58c <remove_chain+0x4a>
 800e588:	7ffb      	ldrb	r3, [r7, #31]
 800e58a:	e03b      	b.n	800e604 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e58c:	68b9      	ldr	r1, [r7, #8]
 800e58e:	68f8      	ldr	r0, [r7, #12]
 800e590:	f7ff fe45 	bl	800e21e <get_fat>
 800e594:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d031      	beq.n	800e600 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	2b01      	cmp	r3, #1
 800e5a0:	d101      	bne.n	800e5a6 <remove_chain+0x64>
 800e5a2:	2302      	movs	r3, #2
 800e5a4:	e02e      	b.n	800e604 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5ac:	d101      	bne.n	800e5b2 <remove_chain+0x70>
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	e028      	b.n	800e604 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	68b9      	ldr	r1, [r7, #8]
 800e5b6:	69b8      	ldr	r0, [r7, #24]
 800e5b8:	f7ff fed9 	bl	800e36e <put_fat>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e5c0:	7ffb      	ldrb	r3, [r7, #31]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d001      	beq.n	800e5ca <remove_chain+0x88>
 800e5c6:	7ffb      	ldrb	r3, [r7, #31]
 800e5c8:	e01c      	b.n	800e604 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e5ca:	69bb      	ldr	r3, [r7, #24]
 800e5cc:	695a      	ldr	r2, [r3, #20]
 800e5ce:	69bb      	ldr	r3, [r7, #24]
 800e5d0:	699b      	ldr	r3, [r3, #24]
 800e5d2:	3b02      	subs	r3, #2
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d20b      	bcs.n	800e5f0 <remove_chain+0xae>
			fs->free_clst++;
 800e5d8:	69bb      	ldr	r3, [r7, #24]
 800e5da:	695b      	ldr	r3, [r3, #20]
 800e5dc:	1c5a      	adds	r2, r3, #1
 800e5de:	69bb      	ldr	r3, [r7, #24]
 800e5e0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e5e2:	69bb      	ldr	r3, [r7, #24]
 800e5e4:	791b      	ldrb	r3, [r3, #4]
 800e5e6:	f043 0301 	orr.w	r3, r3, #1
 800e5ea:	b2da      	uxtb	r2, r3
 800e5ec:	69bb      	ldr	r3, [r7, #24]
 800e5ee:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e5f4:	69bb      	ldr	r3, [r7, #24]
 800e5f6:	699b      	ldr	r3, [r3, #24]
 800e5f8:	68ba      	ldr	r2, [r7, #8]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d3c6      	bcc.n	800e58c <remove_chain+0x4a>
 800e5fe:	e000      	b.n	800e602 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e600:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e602:	2300      	movs	r3, #0
}
 800e604:	4618      	mov	r0, r3
 800e606:	3720      	adds	r7, #32
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}

0800e60c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b088      	sub	sp, #32
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d10d      	bne.n	800e63e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	691b      	ldr	r3, [r3, #16]
 800e626:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e628:	69bb      	ldr	r3, [r7, #24]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d004      	beq.n	800e638 <create_chain+0x2c>
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	699b      	ldr	r3, [r3, #24]
 800e632:	69ba      	ldr	r2, [r7, #24]
 800e634:	429a      	cmp	r2, r3
 800e636:	d31b      	bcc.n	800e670 <create_chain+0x64>
 800e638:	2301      	movs	r3, #1
 800e63a:	61bb      	str	r3, [r7, #24]
 800e63c:	e018      	b.n	800e670 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e63e:	6839      	ldr	r1, [r7, #0]
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f7ff fdec 	bl	800e21e <get_fat>
 800e646:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d801      	bhi.n	800e652 <create_chain+0x46>
 800e64e:	2301      	movs	r3, #1
 800e650:	e070      	b.n	800e734 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e658:	d101      	bne.n	800e65e <create_chain+0x52>
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	e06a      	b.n	800e734 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	699b      	ldr	r3, [r3, #24]
 800e662:	68fa      	ldr	r2, [r7, #12]
 800e664:	429a      	cmp	r2, r3
 800e666:	d201      	bcs.n	800e66c <create_chain+0x60>
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	e063      	b.n	800e734 <create_chain+0x128>
		scl = clst;
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e670:	69bb      	ldr	r3, [r7, #24]
 800e672:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e674:	69fb      	ldr	r3, [r7, #28]
 800e676:	3301      	adds	r3, #1
 800e678:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	699b      	ldr	r3, [r3, #24]
 800e67e:	69fa      	ldr	r2, [r7, #28]
 800e680:	429a      	cmp	r2, r3
 800e682:	d307      	bcc.n	800e694 <create_chain+0x88>
				ncl = 2;
 800e684:	2302      	movs	r3, #2
 800e686:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e688:	69fa      	ldr	r2, [r7, #28]
 800e68a:	69bb      	ldr	r3, [r7, #24]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d901      	bls.n	800e694 <create_chain+0x88>
 800e690:	2300      	movs	r3, #0
 800e692:	e04f      	b.n	800e734 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e694:	69f9      	ldr	r1, [r7, #28]
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f7ff fdc1 	bl	800e21e <get_fat>
 800e69c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d00e      	beq.n	800e6c2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2b01      	cmp	r3, #1
 800e6a8:	d003      	beq.n	800e6b2 <create_chain+0xa6>
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6b0:	d101      	bne.n	800e6b6 <create_chain+0xaa>
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	e03e      	b.n	800e734 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e6b6:	69fa      	ldr	r2, [r7, #28]
 800e6b8:	69bb      	ldr	r3, [r7, #24]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d1da      	bne.n	800e674 <create_chain+0x68>
 800e6be:	2300      	movs	r3, #0
 800e6c0:	e038      	b.n	800e734 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e6c2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e6c8:	69f9      	ldr	r1, [r7, #28]
 800e6ca:	6938      	ldr	r0, [r7, #16]
 800e6cc:	f7ff fe4f 	bl	800e36e <put_fat>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e6d4:	7dfb      	ldrb	r3, [r7, #23]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d109      	bne.n	800e6ee <create_chain+0xe2>
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d006      	beq.n	800e6ee <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e6e0:	69fa      	ldr	r2, [r7, #28]
 800e6e2:	6839      	ldr	r1, [r7, #0]
 800e6e4:	6938      	ldr	r0, [r7, #16]
 800e6e6:	f7ff fe42 	bl	800e36e <put_fat>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e6ee:	7dfb      	ldrb	r3, [r7, #23]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d116      	bne.n	800e722 <create_chain+0x116>
		fs->last_clst = ncl;
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	69fa      	ldr	r2, [r7, #28]
 800e6f8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	695a      	ldr	r2, [r3, #20]
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	699b      	ldr	r3, [r3, #24]
 800e702:	3b02      	subs	r3, #2
 800e704:	429a      	cmp	r2, r3
 800e706:	d804      	bhi.n	800e712 <create_chain+0x106>
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	695b      	ldr	r3, [r3, #20]
 800e70c:	1e5a      	subs	r2, r3, #1
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	791b      	ldrb	r3, [r3, #4]
 800e716:	f043 0301 	orr.w	r3, r3, #1
 800e71a:	b2da      	uxtb	r2, r3
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	711a      	strb	r2, [r3, #4]
 800e720:	e007      	b.n	800e732 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e722:	7dfb      	ldrb	r3, [r7, #23]
 800e724:	2b01      	cmp	r3, #1
 800e726:	d102      	bne.n	800e72e <create_chain+0x122>
 800e728:	f04f 33ff 	mov.w	r3, #4294967295
 800e72c:	e000      	b.n	800e730 <create_chain+0x124>
 800e72e:	2301      	movs	r3, #1
 800e730:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e732:	69fb      	ldr	r3, [r7, #28]
}
 800e734:	4618      	mov	r0, r3
 800e736:	3720      	adds	r7, #32
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}

0800e73c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e73c:	b480      	push	{r7}
 800e73e:	b087      	sub	sp, #28
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e750:	3304      	adds	r3, #4
 800e752:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	0a5b      	lsrs	r3, r3, #9
 800e758:	68fa      	ldr	r2, [r7, #12]
 800e75a:	8952      	ldrh	r2, [r2, #10]
 800e75c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e760:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	1d1a      	adds	r2, r3, #4
 800e766:	613a      	str	r2, [r7, #16]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d101      	bne.n	800e776 <clmt_clust+0x3a>
 800e772:	2300      	movs	r3, #0
 800e774:	e010      	b.n	800e798 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e776:	697a      	ldr	r2, [r7, #20]
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d307      	bcc.n	800e78e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e77e:	697a      	ldr	r2, [r7, #20]
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	1ad3      	subs	r3, r2, r3
 800e784:	617b      	str	r3, [r7, #20]
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	3304      	adds	r3, #4
 800e78a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e78c:	e7e9      	b.n	800e762 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e78e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	4413      	add	r3, r2
}
 800e798:	4618      	mov	r0, r3
 800e79a:	371c      	adds	r7, #28
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr

0800e7a4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b086      	sub	sp, #24
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e7ba:	d204      	bcs.n	800e7c6 <dir_sdi+0x22>
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	f003 031f 	and.w	r3, r3, #31
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d001      	beq.n	800e7ca <dir_sdi+0x26>
		return FR_INT_ERR;
 800e7c6:	2302      	movs	r3, #2
 800e7c8:	e063      	b.n	800e892 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	683a      	ldr	r2, [r7, #0]
 800e7ce:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	689b      	ldr	r3, [r3, #8]
 800e7d4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d106      	bne.n	800e7ea <dir_sdi+0x46>
 800e7dc:	693b      	ldr	r3, [r7, #16]
 800e7de:	781b      	ldrb	r3, [r3, #0]
 800e7e0:	2b02      	cmp	r3, #2
 800e7e2:	d902      	bls.n	800e7ea <dir_sdi+0x46>
		clst = fs->dirbase;
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7e8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d10c      	bne.n	800e80a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	095b      	lsrs	r3, r3, #5
 800e7f4:	693a      	ldr	r2, [r7, #16]
 800e7f6:	8912      	ldrh	r2, [r2, #8]
 800e7f8:	4293      	cmp	r3, r2
 800e7fa:	d301      	bcc.n	800e800 <dir_sdi+0x5c>
 800e7fc:	2302      	movs	r3, #2
 800e7fe:	e048      	b.n	800e892 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	61da      	str	r2, [r3, #28]
 800e808:	e029      	b.n	800e85e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	895b      	ldrh	r3, [r3, #10]
 800e80e:	025b      	lsls	r3, r3, #9
 800e810:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e812:	e019      	b.n	800e848 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6979      	ldr	r1, [r7, #20]
 800e818:	4618      	mov	r0, r3
 800e81a:	f7ff fd00 	bl	800e21e <get_fat>
 800e81e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e826:	d101      	bne.n	800e82c <dir_sdi+0x88>
 800e828:	2301      	movs	r3, #1
 800e82a:	e032      	b.n	800e892 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	2b01      	cmp	r3, #1
 800e830:	d904      	bls.n	800e83c <dir_sdi+0x98>
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	699b      	ldr	r3, [r3, #24]
 800e836:	697a      	ldr	r2, [r7, #20]
 800e838:	429a      	cmp	r2, r3
 800e83a:	d301      	bcc.n	800e840 <dir_sdi+0x9c>
 800e83c:	2302      	movs	r3, #2
 800e83e:	e028      	b.n	800e892 <dir_sdi+0xee>
			ofs -= csz;
 800e840:	683a      	ldr	r2, [r7, #0]
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	1ad3      	subs	r3, r2, r3
 800e846:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e848:	683a      	ldr	r2, [r7, #0]
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d2e1      	bcs.n	800e814 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e850:	6979      	ldr	r1, [r7, #20]
 800e852:	6938      	ldr	r0, [r7, #16]
 800e854:	f7ff fcc4 	bl	800e1e0 <clust2sect>
 800e858:	4602      	mov	r2, r0
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	697a      	ldr	r2, [r7, #20]
 800e862:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	69db      	ldr	r3, [r3, #28]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d101      	bne.n	800e870 <dir_sdi+0xcc>
 800e86c:	2302      	movs	r3, #2
 800e86e:	e010      	b.n	800e892 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	69da      	ldr	r2, [r3, #28]
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	0a5b      	lsrs	r3, r3, #9
 800e878:	441a      	add	r2, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e88a:	441a      	add	r2, r3
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e890:	2300      	movs	r3, #0
}
 800e892:	4618      	mov	r0, r3
 800e894:	3718      	adds	r7, #24
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}

0800e89a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e89a:	b580      	push	{r7, lr}
 800e89c:	b086      	sub	sp, #24
 800e89e:	af00      	add	r7, sp, #0
 800e8a0:	6078      	str	r0, [r7, #4]
 800e8a2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	695b      	ldr	r3, [r3, #20]
 800e8ae:	3320      	adds	r3, #32
 800e8b0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	69db      	ldr	r3, [r3, #28]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d003      	beq.n	800e8c2 <dir_next+0x28>
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e8c0:	d301      	bcc.n	800e8c6 <dir_next+0x2c>
 800e8c2:	2304      	movs	r3, #4
 800e8c4:	e0aa      	b.n	800ea1c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	f040 8098 	bne.w	800ea02 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	69db      	ldr	r3, [r3, #28]
 800e8d6:	1c5a      	adds	r2, r3, #1
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	699b      	ldr	r3, [r3, #24]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d10b      	bne.n	800e8fc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	095b      	lsrs	r3, r3, #5
 800e8e8:	68fa      	ldr	r2, [r7, #12]
 800e8ea:	8912      	ldrh	r2, [r2, #8]
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	f0c0 8088 	bcc.w	800ea02 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	61da      	str	r2, [r3, #28]
 800e8f8:	2304      	movs	r3, #4
 800e8fa:	e08f      	b.n	800ea1c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	0a5b      	lsrs	r3, r3, #9
 800e900:	68fa      	ldr	r2, [r7, #12]
 800e902:	8952      	ldrh	r2, [r2, #10]
 800e904:	3a01      	subs	r2, #1
 800e906:	4013      	ands	r3, r2
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d17a      	bne.n	800ea02 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e90c:	687a      	ldr	r2, [r7, #4]
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	699b      	ldr	r3, [r3, #24]
 800e912:	4619      	mov	r1, r3
 800e914:	4610      	mov	r0, r2
 800e916:	f7ff fc82 	bl	800e21e <get_fat>
 800e91a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	2b01      	cmp	r3, #1
 800e920:	d801      	bhi.n	800e926 <dir_next+0x8c>
 800e922:	2302      	movs	r3, #2
 800e924:	e07a      	b.n	800ea1c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e92c:	d101      	bne.n	800e932 <dir_next+0x98>
 800e92e:	2301      	movs	r3, #1
 800e930:	e074      	b.n	800ea1c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	699b      	ldr	r3, [r3, #24]
 800e936:	697a      	ldr	r2, [r7, #20]
 800e938:	429a      	cmp	r2, r3
 800e93a:	d358      	bcc.n	800e9ee <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d104      	bne.n	800e94c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2200      	movs	r2, #0
 800e946:	61da      	str	r2, [r3, #28]
 800e948:	2304      	movs	r3, #4
 800e94a:	e067      	b.n	800ea1c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	699b      	ldr	r3, [r3, #24]
 800e952:	4619      	mov	r1, r3
 800e954:	4610      	mov	r0, r2
 800e956:	f7ff fe59 	bl	800e60c <create_chain>
 800e95a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d101      	bne.n	800e966 <dir_next+0xcc>
 800e962:	2307      	movs	r3, #7
 800e964:	e05a      	b.n	800ea1c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	2b01      	cmp	r3, #1
 800e96a:	d101      	bne.n	800e970 <dir_next+0xd6>
 800e96c:	2302      	movs	r3, #2
 800e96e:	e055      	b.n	800ea1c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e976:	d101      	bne.n	800e97c <dir_next+0xe2>
 800e978:	2301      	movs	r3, #1
 800e97a:	e04f      	b.n	800ea1c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e97c:	68f8      	ldr	r0, [r7, #12]
 800e97e:	f7ff fb4f 	bl	800e020 <sync_window>
 800e982:	4603      	mov	r3, r0
 800e984:	2b00      	cmp	r3, #0
 800e986:	d001      	beq.n	800e98c <dir_next+0xf2>
 800e988:	2301      	movs	r3, #1
 800e98a:	e047      	b.n	800ea1c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	3334      	adds	r3, #52	; 0x34
 800e990:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e994:	2100      	movs	r1, #0
 800e996:	4618      	mov	r0, r3
 800e998:	f7ff f979 	bl	800dc8e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e99c:	2300      	movs	r3, #0
 800e99e:	613b      	str	r3, [r7, #16]
 800e9a0:	6979      	ldr	r1, [r7, #20]
 800e9a2:	68f8      	ldr	r0, [r7, #12]
 800e9a4:	f7ff fc1c 	bl	800e1e0 <clust2sect>
 800e9a8:	4602      	mov	r2, r0
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	631a      	str	r2, [r3, #48]	; 0x30
 800e9ae:	e012      	b.n	800e9d6 <dir_next+0x13c>
						fs->wflag = 1;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e9b6:	68f8      	ldr	r0, [r7, #12]
 800e9b8:	f7ff fb32 	bl	800e020 <sync_window>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d001      	beq.n	800e9c6 <dir_next+0x12c>
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	e02a      	b.n	800ea1c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	613b      	str	r3, [r7, #16]
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9d0:	1c5a      	adds	r2, r3, #1
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	631a      	str	r2, [r3, #48]	; 0x30
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	895b      	ldrh	r3, [r3, #10]
 800e9da:	461a      	mov	r2, r3
 800e9dc:	693b      	ldr	r3, [r7, #16]
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	d3e6      	bcc.n	800e9b0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9e6:	693b      	ldr	r3, [r7, #16]
 800e9e8:	1ad2      	subs	r2, r2, r3
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	697a      	ldr	r2, [r7, #20]
 800e9f2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e9f4:	6979      	ldr	r1, [r7, #20]
 800e9f6:	68f8      	ldr	r0, [r7, #12]
 800e9f8:	f7ff fbf2 	bl	800e1e0 <clust2sect>
 800e9fc:	4602      	mov	r2, r0
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	68ba      	ldr	r2, [r7, #8]
 800ea06:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea14:	441a      	add	r2, r3
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ea1a:	2300      	movs	r3, #0
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3718      	adds	r7, #24
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}

0800ea24 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b086      	sub	sp, #24
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ea34:	2100      	movs	r1, #0
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f7ff feb4 	bl	800e7a4 <dir_sdi>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ea40:	7dfb      	ldrb	r3, [r7, #23]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d12b      	bne.n	800ea9e <dir_alloc+0x7a>
		n = 0;
 800ea46:	2300      	movs	r3, #0
 800ea48:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	69db      	ldr	r3, [r3, #28]
 800ea4e:	4619      	mov	r1, r3
 800ea50:	68f8      	ldr	r0, [r7, #12]
 800ea52:	f7ff fb29 	bl	800e0a8 <move_window>
 800ea56:	4603      	mov	r3, r0
 800ea58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ea5a:	7dfb      	ldrb	r3, [r7, #23]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d11d      	bne.n	800ea9c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6a1b      	ldr	r3, [r3, #32]
 800ea64:	781b      	ldrb	r3, [r3, #0]
 800ea66:	2be5      	cmp	r3, #229	; 0xe5
 800ea68:	d004      	beq.n	800ea74 <dir_alloc+0x50>
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6a1b      	ldr	r3, [r3, #32]
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d107      	bne.n	800ea84 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	3301      	adds	r3, #1
 800ea78:	613b      	str	r3, [r7, #16]
 800ea7a:	693a      	ldr	r2, [r7, #16]
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d102      	bne.n	800ea88 <dir_alloc+0x64>
 800ea82:	e00c      	b.n	800ea9e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ea84:	2300      	movs	r3, #0
 800ea86:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ea88:	2101      	movs	r1, #1
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f7ff ff05 	bl	800e89a <dir_next>
 800ea90:	4603      	mov	r3, r0
 800ea92:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ea94:	7dfb      	ldrb	r3, [r7, #23]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d0d7      	beq.n	800ea4a <dir_alloc+0x26>
 800ea9a:	e000      	b.n	800ea9e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ea9c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ea9e:	7dfb      	ldrb	r3, [r7, #23]
 800eaa0:	2b04      	cmp	r3, #4
 800eaa2:	d101      	bne.n	800eaa8 <dir_alloc+0x84>
 800eaa4:	2307      	movs	r3, #7
 800eaa6:	75fb      	strb	r3, [r7, #23]
	return res;
 800eaa8:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3718      	adds	r7, #24
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}

0800eab2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800eab2:	b580      	push	{r7, lr}
 800eab4:	b084      	sub	sp, #16
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	6078      	str	r0, [r7, #4]
 800eaba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	331a      	adds	r3, #26
 800eac0:	4618      	mov	r0, r3
 800eac2:	f7ff f841 	bl	800db48 <ld_word>
 800eac6:	4603      	mov	r3, r0
 800eac8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	781b      	ldrb	r3, [r3, #0]
 800eace:	2b03      	cmp	r3, #3
 800ead0:	d109      	bne.n	800eae6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	3314      	adds	r3, #20
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7ff f836 	bl	800db48 <ld_word>
 800eadc:	4603      	mov	r3, r0
 800eade:	041b      	lsls	r3, r3, #16
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	4313      	orrs	r3, r2
 800eae4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800eae6:	68fb      	ldr	r3, [r7, #12]
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3710      	adds	r7, #16
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	60f8      	str	r0, [r7, #12]
 800eaf8:	60b9      	str	r1, [r7, #8]
 800eafa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	331a      	adds	r3, #26
 800eb00:	687a      	ldr	r2, [r7, #4]
 800eb02:	b292      	uxth	r2, r2
 800eb04:	4611      	mov	r1, r2
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7ff f859 	bl	800dbbe <st_word>
	if (fs->fs_type == FS_FAT32) {
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	781b      	ldrb	r3, [r3, #0]
 800eb10:	2b03      	cmp	r3, #3
 800eb12:	d109      	bne.n	800eb28 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	f103 0214 	add.w	r2, r3, #20
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	0c1b      	lsrs	r3, r3, #16
 800eb1e:	b29b      	uxth	r3, r3
 800eb20:	4619      	mov	r1, r3
 800eb22:	4610      	mov	r0, r2
 800eb24:	f7ff f84b 	bl	800dbbe <st_word>
	}
}
 800eb28:	bf00      	nop
 800eb2a:	3710      	adds	r7, #16
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}

0800eb30 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800eb30:	b590      	push	{r4, r7, lr}
 800eb32:	b087      	sub	sp, #28
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	331a      	adds	r3, #26
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7ff f802 	bl	800db48 <ld_word>
 800eb44:	4603      	mov	r3, r0
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d001      	beq.n	800eb4e <cmp_lfn+0x1e>
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	e059      	b.n	800ec02 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	781b      	ldrb	r3, [r3, #0]
 800eb52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb56:	1e5a      	subs	r2, r3, #1
 800eb58:	4613      	mov	r3, r2
 800eb5a:	005b      	lsls	r3, r3, #1
 800eb5c:	4413      	add	r3, r2
 800eb5e:	009b      	lsls	r3, r3, #2
 800eb60:	4413      	add	r3, r2
 800eb62:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800eb64:	2301      	movs	r3, #1
 800eb66:	81fb      	strh	r3, [r7, #14]
 800eb68:	2300      	movs	r3, #0
 800eb6a:	613b      	str	r3, [r7, #16]
 800eb6c:	e033      	b.n	800ebd6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800eb6e:	4a27      	ldr	r2, [pc, #156]	; (800ec0c <cmp_lfn+0xdc>)
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	4413      	add	r3, r2
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	461a      	mov	r2, r3
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	4413      	add	r3, r2
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7fe ffe3 	bl	800db48 <ld_word>
 800eb82:	4603      	mov	r3, r0
 800eb84:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800eb86:	89fb      	ldrh	r3, [r7, #14]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d01a      	beq.n	800ebc2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	2bfe      	cmp	r3, #254	; 0xfe
 800eb90:	d812      	bhi.n	800ebb8 <cmp_lfn+0x88>
 800eb92:	89bb      	ldrh	r3, [r7, #12]
 800eb94:	4618      	mov	r0, r3
 800eb96:	f002 f99f 	bl	8010ed8 <ff_wtoupper>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	461c      	mov	r4, r3
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	1c5a      	adds	r2, r3, #1
 800eba2:	617a      	str	r2, [r7, #20]
 800eba4:	005b      	lsls	r3, r3, #1
 800eba6:	687a      	ldr	r2, [r7, #4]
 800eba8:	4413      	add	r3, r2
 800ebaa:	881b      	ldrh	r3, [r3, #0]
 800ebac:	4618      	mov	r0, r3
 800ebae:	f002 f993 	bl	8010ed8 <ff_wtoupper>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	429c      	cmp	r4, r3
 800ebb6:	d001      	beq.n	800ebbc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ebb8:	2300      	movs	r3, #0
 800ebba:	e022      	b.n	800ec02 <cmp_lfn+0xd2>
			}
			wc = uc;
 800ebbc:	89bb      	ldrh	r3, [r7, #12]
 800ebbe:	81fb      	strh	r3, [r7, #14]
 800ebc0:	e006      	b.n	800ebd0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ebc2:	89bb      	ldrh	r3, [r7, #12]
 800ebc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebc8:	4293      	cmp	r3, r2
 800ebca:	d001      	beq.n	800ebd0 <cmp_lfn+0xa0>
 800ebcc:	2300      	movs	r3, #0
 800ebce:	e018      	b.n	800ec02 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	613b      	str	r3, [r7, #16]
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	2b0c      	cmp	r3, #12
 800ebda:	d9c8      	bls.n	800eb6e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	781b      	ldrb	r3, [r3, #0]
 800ebe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d00b      	beq.n	800ec00 <cmp_lfn+0xd0>
 800ebe8:	89fb      	ldrh	r3, [r7, #14]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d008      	beq.n	800ec00 <cmp_lfn+0xd0>
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	005b      	lsls	r3, r3, #1
 800ebf2:	687a      	ldr	r2, [r7, #4]
 800ebf4:	4413      	add	r3, r2
 800ebf6:	881b      	ldrh	r3, [r3, #0]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d001      	beq.n	800ec00 <cmp_lfn+0xd0>
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	e000      	b.n	800ec02 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ec00:	2301      	movs	r3, #1
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	371c      	adds	r7, #28
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd90      	pop	{r4, r7, pc}
 800ec0a:	bf00      	nop
 800ec0c:	080130c0 	.word	0x080130c0

0800ec10 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b086      	sub	sp, #24
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	331a      	adds	r3, #26
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7fe ff92 	bl	800db48 <ld_word>
 800ec24:	4603      	mov	r3, r0
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d001      	beq.n	800ec2e <pick_lfn+0x1e>
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	e04d      	b.n	800ecca <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec36:	1e5a      	subs	r2, r3, #1
 800ec38:	4613      	mov	r3, r2
 800ec3a:	005b      	lsls	r3, r3, #1
 800ec3c:	4413      	add	r3, r2
 800ec3e:	009b      	lsls	r3, r3, #2
 800ec40:	4413      	add	r3, r2
 800ec42:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ec44:	2301      	movs	r3, #1
 800ec46:	81fb      	strh	r3, [r7, #14]
 800ec48:	2300      	movs	r3, #0
 800ec4a:	613b      	str	r3, [r7, #16]
 800ec4c:	e028      	b.n	800eca0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ec4e:	4a21      	ldr	r2, [pc, #132]	; (800ecd4 <pick_lfn+0xc4>)
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	4413      	add	r3, r2
 800ec54:	781b      	ldrb	r3, [r3, #0]
 800ec56:	461a      	mov	r2, r3
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	4413      	add	r3, r2
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f7fe ff73 	bl	800db48 <ld_word>
 800ec62:	4603      	mov	r3, r0
 800ec64:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ec66:	89fb      	ldrh	r3, [r7, #14]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d00f      	beq.n	800ec8c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	2bfe      	cmp	r3, #254	; 0xfe
 800ec70:	d901      	bls.n	800ec76 <pick_lfn+0x66>
 800ec72:	2300      	movs	r3, #0
 800ec74:	e029      	b.n	800ecca <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800ec76:	89bb      	ldrh	r3, [r7, #12]
 800ec78:	81fb      	strh	r3, [r7, #14]
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	1c5a      	adds	r2, r3, #1
 800ec7e:	617a      	str	r2, [r7, #20]
 800ec80:	005b      	lsls	r3, r3, #1
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	4413      	add	r3, r2
 800ec86:	89fa      	ldrh	r2, [r7, #14]
 800ec88:	801a      	strh	r2, [r3, #0]
 800ec8a:	e006      	b.n	800ec9a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ec8c:	89bb      	ldrh	r3, [r7, #12]
 800ec8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d001      	beq.n	800ec9a <pick_lfn+0x8a>
 800ec96:	2300      	movs	r3, #0
 800ec98:	e017      	b.n	800ecca <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	613b      	str	r3, [r7, #16]
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	2b0c      	cmp	r3, #12
 800eca4:	d9d3      	bls.n	800ec4e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d00a      	beq.n	800ecc8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	2bfe      	cmp	r3, #254	; 0xfe
 800ecb6:	d901      	bls.n	800ecbc <pick_lfn+0xac>
 800ecb8:	2300      	movs	r3, #0
 800ecba:	e006      	b.n	800ecca <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	005b      	lsls	r3, r3, #1
 800ecc0:	687a      	ldr	r2, [r7, #4]
 800ecc2:	4413      	add	r3, r2
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800ecc8:	2301      	movs	r3, #1
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3718      	adds	r7, #24
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	080130c0 	.word	0x080130c0

0800ecd8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b088      	sub	sp, #32
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	60f8      	str	r0, [r7, #12]
 800ece0:	60b9      	str	r1, [r7, #8]
 800ece2:	4611      	mov	r1, r2
 800ece4:	461a      	mov	r2, r3
 800ece6:	460b      	mov	r3, r1
 800ece8:	71fb      	strb	r3, [r7, #7]
 800ecea:	4613      	mov	r3, r2
 800ecec:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	330d      	adds	r3, #13
 800ecf2:	79ba      	ldrb	r2, [r7, #6]
 800ecf4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	330b      	adds	r3, #11
 800ecfa:	220f      	movs	r2, #15
 800ecfc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	330c      	adds	r3, #12
 800ed02:	2200      	movs	r2, #0
 800ed04:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	331a      	adds	r3, #26
 800ed0a:	2100      	movs	r1, #0
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f7fe ff56 	bl	800dbbe <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ed12:	79fb      	ldrb	r3, [r7, #7]
 800ed14:	1e5a      	subs	r2, r3, #1
 800ed16:	4613      	mov	r3, r2
 800ed18:	005b      	lsls	r3, r3, #1
 800ed1a:	4413      	add	r3, r2
 800ed1c:	009b      	lsls	r3, r3, #2
 800ed1e:	4413      	add	r3, r2
 800ed20:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ed22:	2300      	movs	r3, #0
 800ed24:	82fb      	strh	r3, [r7, #22]
 800ed26:	2300      	movs	r3, #0
 800ed28:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ed2a:	8afb      	ldrh	r3, [r7, #22]
 800ed2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d007      	beq.n	800ed44 <put_lfn+0x6c>
 800ed34:	69fb      	ldr	r3, [r7, #28]
 800ed36:	1c5a      	adds	r2, r3, #1
 800ed38:	61fa      	str	r2, [r7, #28]
 800ed3a:	005b      	lsls	r3, r3, #1
 800ed3c:	68fa      	ldr	r2, [r7, #12]
 800ed3e:	4413      	add	r3, r2
 800ed40:	881b      	ldrh	r3, [r3, #0]
 800ed42:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ed44:	4a17      	ldr	r2, [pc, #92]	; (800eda4 <put_lfn+0xcc>)
 800ed46:	69bb      	ldr	r3, [r7, #24]
 800ed48:	4413      	add	r3, r2
 800ed4a:	781b      	ldrb	r3, [r3, #0]
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	4413      	add	r3, r2
 800ed52:	8afa      	ldrh	r2, [r7, #22]
 800ed54:	4611      	mov	r1, r2
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7fe ff31 	bl	800dbbe <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ed5c:	8afb      	ldrh	r3, [r7, #22]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d102      	bne.n	800ed68 <put_lfn+0x90>
 800ed62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed66:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ed68:	69bb      	ldr	r3, [r7, #24]
 800ed6a:	3301      	adds	r3, #1
 800ed6c:	61bb      	str	r3, [r7, #24]
 800ed6e:	69bb      	ldr	r3, [r7, #24]
 800ed70:	2b0c      	cmp	r3, #12
 800ed72:	d9da      	bls.n	800ed2a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ed74:	8afb      	ldrh	r3, [r7, #22]
 800ed76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	d006      	beq.n	800ed8c <put_lfn+0xb4>
 800ed7e:	69fb      	ldr	r3, [r7, #28]
 800ed80:	005b      	lsls	r3, r3, #1
 800ed82:	68fa      	ldr	r2, [r7, #12]
 800ed84:	4413      	add	r3, r2
 800ed86:	881b      	ldrh	r3, [r3, #0]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d103      	bne.n	800ed94 <put_lfn+0xbc>
 800ed8c:	79fb      	ldrb	r3, [r7, #7]
 800ed8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed92:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	79fa      	ldrb	r2, [r7, #7]
 800ed98:	701a      	strb	r2, [r3, #0]
}
 800ed9a:	bf00      	nop
 800ed9c:	3720      	adds	r7, #32
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	080130c0 	.word	0x080130c0

0800eda8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b08c      	sub	sp, #48	; 0x30
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	607a      	str	r2, [r7, #4]
 800edb4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800edb6:	220b      	movs	r2, #11
 800edb8:	68b9      	ldr	r1, [r7, #8]
 800edba:	68f8      	ldr	r0, [r7, #12]
 800edbc:	f7fe ff46 	bl	800dc4c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	2b05      	cmp	r3, #5
 800edc4:	d92b      	bls.n	800ee1e <gen_numname+0x76>
		sr = seq;
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800edca:	e022      	b.n	800ee12 <gen_numname+0x6a>
			wc = *lfn++;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	1c9a      	adds	r2, r3, #2
 800edd0:	607a      	str	r2, [r7, #4]
 800edd2:	881b      	ldrh	r3, [r3, #0]
 800edd4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800edd6:	2300      	movs	r3, #0
 800edd8:	62bb      	str	r3, [r7, #40]	; 0x28
 800edda:	e017      	b.n	800ee0c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	005a      	lsls	r2, r3, #1
 800ede0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ede2:	f003 0301 	and.w	r3, r3, #1
 800ede6:	4413      	add	r3, r2
 800ede8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800edea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800edec:	085b      	lsrs	r3, r3, #1
 800edee:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d005      	beq.n	800ee06 <gen_numname+0x5e>
 800edfa:	69fb      	ldr	r3, [r7, #28]
 800edfc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ee00:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ee04:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ee06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee08:	3301      	adds	r3, #1
 800ee0a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ee0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0e:	2b0f      	cmp	r3, #15
 800ee10:	d9e4      	bls.n	800eddc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	881b      	ldrh	r3, [r3, #0]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d1d8      	bne.n	800edcc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ee1a:	69fb      	ldr	r3, [r7, #28]
 800ee1c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ee1e:	2307      	movs	r3, #7
 800ee20:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	f003 030f 	and.w	r3, r3, #15
 800ee2a:	b2db      	uxtb	r3, r3
 800ee2c:	3330      	adds	r3, #48	; 0x30
 800ee2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ee32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee36:	2b39      	cmp	r3, #57	; 0x39
 800ee38:	d904      	bls.n	800ee44 <gen_numname+0x9c>
 800ee3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee3e:	3307      	adds	r3, #7
 800ee40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ee44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee46:	1e5a      	subs	r2, r3, #1
 800ee48:	62ba      	str	r2, [r7, #40]	; 0x28
 800ee4a:	3330      	adds	r3, #48	; 0x30
 800ee4c:	443b      	add	r3, r7
 800ee4e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ee52:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	091b      	lsrs	r3, r3, #4
 800ee5a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d1df      	bne.n	800ee22 <gen_numname+0x7a>
	ns[i] = '~';
 800ee62:	f107 0214 	add.w	r2, r7, #20
 800ee66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee68:	4413      	add	r3, r2
 800ee6a:	227e      	movs	r2, #126	; 0x7e
 800ee6c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ee6e:	2300      	movs	r3, #0
 800ee70:	627b      	str	r3, [r7, #36]	; 0x24
 800ee72:	e002      	b.n	800ee7a <gen_numname+0xd2>
 800ee74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee76:	3301      	adds	r3, #1
 800ee78:	627b      	str	r3, [r7, #36]	; 0x24
 800ee7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d205      	bcs.n	800ee8e <gen_numname+0xe6>
 800ee82:	68fa      	ldr	r2, [r7, #12]
 800ee84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee86:	4413      	add	r3, r2
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	2b20      	cmp	r3, #32
 800ee8c:	d1f2      	bne.n	800ee74 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ee8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee90:	2b07      	cmp	r3, #7
 800ee92:	d807      	bhi.n	800eea4 <gen_numname+0xfc>
 800ee94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee96:	1c5a      	adds	r2, r3, #1
 800ee98:	62ba      	str	r2, [r7, #40]	; 0x28
 800ee9a:	3330      	adds	r3, #48	; 0x30
 800ee9c:	443b      	add	r3, r7
 800ee9e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800eea2:	e000      	b.n	800eea6 <gen_numname+0xfe>
 800eea4:	2120      	movs	r1, #32
 800eea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea8:	1c5a      	adds	r2, r3, #1
 800eeaa:	627a      	str	r2, [r7, #36]	; 0x24
 800eeac:	68fa      	ldr	r2, [r7, #12]
 800eeae:	4413      	add	r3, r2
 800eeb0:	460a      	mov	r2, r1
 800eeb2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800eeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb6:	2b07      	cmp	r3, #7
 800eeb8:	d9e9      	bls.n	800ee8e <gen_numname+0xe6>
}
 800eeba:	bf00      	nop
 800eebc:	bf00      	nop
 800eebe:	3730      	adds	r7, #48	; 0x30
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800eec4:	b480      	push	{r7}
 800eec6:	b085      	sub	sp, #20
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800eecc:	2300      	movs	r3, #0
 800eece:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800eed0:	230b      	movs	r3, #11
 800eed2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800eed4:	7bfb      	ldrb	r3, [r7, #15]
 800eed6:	b2da      	uxtb	r2, r3
 800eed8:	0852      	lsrs	r2, r2, #1
 800eeda:	01db      	lsls	r3, r3, #7
 800eedc:	4313      	orrs	r3, r2
 800eede:	b2da      	uxtb	r2, r3
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	1c59      	adds	r1, r3, #1
 800eee4:	6079      	str	r1, [r7, #4]
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	4413      	add	r3, r2
 800eeea:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	3b01      	subs	r3, #1
 800eef0:	60bb      	str	r3, [r7, #8]
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d1ed      	bne.n	800eed4 <sum_sfn+0x10>
	return sum;
 800eef8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	3714      	adds	r7, #20
 800eefe:	46bd      	mov	sp, r7
 800ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef04:	4770      	bx	lr

0800ef06 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ef06:	b580      	push	{r7, lr}
 800ef08:	b086      	sub	sp, #24
 800ef0a:	af00      	add	r7, sp, #0
 800ef0c:	6078      	str	r0, [r7, #4]
 800ef0e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ef10:	2304      	movs	r3, #4
 800ef12:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800ef1a:	23ff      	movs	r3, #255	; 0xff
 800ef1c:	757b      	strb	r3, [r7, #21]
 800ef1e:	23ff      	movs	r3, #255	; 0xff
 800ef20:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800ef22:	e081      	b.n	800f028 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	69db      	ldr	r3, [r3, #28]
 800ef28:	4619      	mov	r1, r3
 800ef2a:	6938      	ldr	r0, [r7, #16]
 800ef2c:	f7ff f8bc 	bl	800e0a8 <move_window>
 800ef30:	4603      	mov	r3, r0
 800ef32:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ef34:	7dfb      	ldrb	r3, [r7, #23]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d17c      	bne.n	800f034 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6a1b      	ldr	r3, [r3, #32]
 800ef3e:	781b      	ldrb	r3, [r3, #0]
 800ef40:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800ef42:	7dbb      	ldrb	r3, [r7, #22]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d102      	bne.n	800ef4e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ef48:	2304      	movs	r3, #4
 800ef4a:	75fb      	strb	r3, [r7, #23]
 800ef4c:	e077      	b.n	800f03e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6a1b      	ldr	r3, [r3, #32]
 800ef52:	330b      	adds	r3, #11
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ef5a:	73fb      	strb	r3, [r7, #15]
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	7bfa      	ldrb	r2, [r7, #15]
 800ef60:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800ef62:	7dbb      	ldrb	r3, [r7, #22]
 800ef64:	2be5      	cmp	r3, #229	; 0xe5
 800ef66:	d00e      	beq.n	800ef86 <dir_read+0x80>
 800ef68:	7dbb      	ldrb	r3, [r7, #22]
 800ef6a:	2b2e      	cmp	r3, #46	; 0x2e
 800ef6c:	d00b      	beq.n	800ef86 <dir_read+0x80>
 800ef6e:	7bfb      	ldrb	r3, [r7, #15]
 800ef70:	f023 0320 	bic.w	r3, r3, #32
 800ef74:	2b08      	cmp	r3, #8
 800ef76:	bf0c      	ite	eq
 800ef78:	2301      	moveq	r3, #1
 800ef7a:	2300      	movne	r3, #0
 800ef7c:	b2db      	uxtb	r3, r3
 800ef7e:	461a      	mov	r2, r3
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d002      	beq.n	800ef8c <dir_read+0x86>
				ord = 0xFF;
 800ef86:	23ff      	movs	r3, #255	; 0xff
 800ef88:	757b      	strb	r3, [r7, #21]
 800ef8a:	e044      	b.n	800f016 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ef8c:	7bfb      	ldrb	r3, [r7, #15]
 800ef8e:	2b0f      	cmp	r3, #15
 800ef90:	d12f      	bne.n	800eff2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ef92:	7dbb      	ldrb	r3, [r7, #22]
 800ef94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d00d      	beq.n	800efb8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6a1b      	ldr	r3, [r3, #32]
 800efa0:	7b5b      	ldrb	r3, [r3, #13]
 800efa2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800efa4:	7dbb      	ldrb	r3, [r7, #22]
 800efa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800efaa:	75bb      	strb	r3, [r7, #22]
 800efac:	7dbb      	ldrb	r3, [r7, #22]
 800efae:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	695a      	ldr	r2, [r3, #20]
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800efb8:	7dba      	ldrb	r2, [r7, #22]
 800efba:	7d7b      	ldrb	r3, [r7, #21]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d115      	bne.n	800efec <dir_read+0xe6>
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6a1b      	ldr	r3, [r3, #32]
 800efc4:	330d      	adds	r3, #13
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	7d3a      	ldrb	r2, [r7, #20]
 800efca:	429a      	cmp	r2, r3
 800efcc:	d10e      	bne.n	800efec <dir_read+0xe6>
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	68da      	ldr	r2, [r3, #12]
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6a1b      	ldr	r3, [r3, #32]
 800efd6:	4619      	mov	r1, r3
 800efd8:	4610      	mov	r0, r2
 800efda:	f7ff fe19 	bl	800ec10 <pick_lfn>
 800efde:	4603      	mov	r3, r0
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d003      	beq.n	800efec <dir_read+0xe6>
 800efe4:	7d7b      	ldrb	r3, [r7, #21]
 800efe6:	3b01      	subs	r3, #1
 800efe8:	b2db      	uxtb	r3, r3
 800efea:	e000      	b.n	800efee <dir_read+0xe8>
 800efec:	23ff      	movs	r3, #255	; 0xff
 800efee:	757b      	strb	r3, [r7, #21]
 800eff0:	e011      	b.n	800f016 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800eff2:	7d7b      	ldrb	r3, [r7, #21]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d109      	bne.n	800f00c <dir_read+0x106>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6a1b      	ldr	r3, [r3, #32]
 800effc:	4618      	mov	r0, r3
 800effe:	f7ff ff61 	bl	800eec4 <sum_sfn>
 800f002:	4603      	mov	r3, r0
 800f004:	461a      	mov	r2, r3
 800f006:	7d3b      	ldrb	r3, [r7, #20]
 800f008:	4293      	cmp	r3, r2
 800f00a:	d015      	beq.n	800f038 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f04f 32ff 	mov.w	r2, #4294967295
 800f012:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800f014:	e010      	b.n	800f038 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f016:	2100      	movs	r1, #0
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f7ff fc3e 	bl	800e89a <dir_next>
 800f01e:	4603      	mov	r3, r0
 800f020:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f022:	7dfb      	ldrb	r3, [r7, #23]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d109      	bne.n	800f03c <dir_read+0x136>
	while (dp->sect) {
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	69db      	ldr	r3, [r3, #28]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	f47f af79 	bne.w	800ef24 <dir_read+0x1e>
 800f032:	e004      	b.n	800f03e <dir_read+0x138>
		if (res != FR_OK) break;
 800f034:	bf00      	nop
 800f036:	e002      	b.n	800f03e <dir_read+0x138>
					break;
 800f038:	bf00      	nop
 800f03a:	e000      	b.n	800f03e <dir_read+0x138>
		if (res != FR_OK) break;
 800f03c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f03e:	7dfb      	ldrb	r3, [r7, #23]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d002      	beq.n	800f04a <dir_read+0x144>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2200      	movs	r2, #0
 800f048:	61da      	str	r2, [r3, #28]
	return res;
 800f04a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3718      	adds	r7, #24
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}

0800f054 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b086      	sub	sp, #24
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f062:	2100      	movs	r1, #0
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f7ff fb9d 	bl	800e7a4 <dir_sdi>
 800f06a:	4603      	mov	r3, r0
 800f06c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f06e:	7dfb      	ldrb	r3, [r7, #23]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d001      	beq.n	800f078 <dir_find+0x24>
 800f074:	7dfb      	ldrb	r3, [r7, #23]
 800f076:	e0a9      	b.n	800f1cc <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f078:	23ff      	movs	r3, #255	; 0xff
 800f07a:	753b      	strb	r3, [r7, #20]
 800f07c:	7d3b      	ldrb	r3, [r7, #20]
 800f07e:	757b      	strb	r3, [r7, #21]
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	f04f 32ff 	mov.w	r2, #4294967295
 800f086:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	69db      	ldr	r3, [r3, #28]
 800f08c:	4619      	mov	r1, r3
 800f08e:	6938      	ldr	r0, [r7, #16]
 800f090:	f7ff f80a 	bl	800e0a8 <move_window>
 800f094:	4603      	mov	r3, r0
 800f096:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f098:	7dfb      	ldrb	r3, [r7, #23]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	f040 8090 	bne.w	800f1c0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	6a1b      	ldr	r3, [r3, #32]
 800f0a4:	781b      	ldrb	r3, [r3, #0]
 800f0a6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f0a8:	7dbb      	ldrb	r3, [r7, #22]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d102      	bne.n	800f0b4 <dir_find+0x60>
 800f0ae:	2304      	movs	r3, #4
 800f0b0:	75fb      	strb	r3, [r7, #23]
 800f0b2:	e08a      	b.n	800f1ca <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6a1b      	ldr	r3, [r3, #32]
 800f0b8:	330b      	adds	r3, #11
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0c0:	73fb      	strb	r3, [r7, #15]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	7bfa      	ldrb	r2, [r7, #15]
 800f0c6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f0c8:	7dbb      	ldrb	r3, [r7, #22]
 800f0ca:	2be5      	cmp	r3, #229	; 0xe5
 800f0cc:	d007      	beq.n	800f0de <dir_find+0x8a>
 800f0ce:	7bfb      	ldrb	r3, [r7, #15]
 800f0d0:	f003 0308 	and.w	r3, r3, #8
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d009      	beq.n	800f0ec <dir_find+0x98>
 800f0d8:	7bfb      	ldrb	r3, [r7, #15]
 800f0da:	2b0f      	cmp	r3, #15
 800f0dc:	d006      	beq.n	800f0ec <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f0de:	23ff      	movs	r3, #255	; 0xff
 800f0e0:	757b      	strb	r3, [r7, #21]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f04f 32ff 	mov.w	r2, #4294967295
 800f0e8:	631a      	str	r2, [r3, #48]	; 0x30
 800f0ea:	e05e      	b.n	800f1aa <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f0ec:	7bfb      	ldrb	r3, [r7, #15]
 800f0ee:	2b0f      	cmp	r3, #15
 800f0f0:	d136      	bne.n	800f160 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f0f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d154      	bne.n	800f1aa <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f100:	7dbb      	ldrb	r3, [r7, #22]
 800f102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f106:	2b00      	cmp	r3, #0
 800f108:	d00d      	beq.n	800f126 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6a1b      	ldr	r3, [r3, #32]
 800f10e:	7b5b      	ldrb	r3, [r3, #13]
 800f110:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f112:	7dbb      	ldrb	r3, [r7, #22]
 800f114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f118:	75bb      	strb	r3, [r7, #22]
 800f11a:	7dbb      	ldrb	r3, [r7, #22]
 800f11c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	695a      	ldr	r2, [r3, #20]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f126:	7dba      	ldrb	r2, [r7, #22]
 800f128:	7d7b      	ldrb	r3, [r7, #21]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d115      	bne.n	800f15a <dir_find+0x106>
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6a1b      	ldr	r3, [r3, #32]
 800f132:	330d      	adds	r3, #13
 800f134:	781b      	ldrb	r3, [r3, #0]
 800f136:	7d3a      	ldrb	r2, [r7, #20]
 800f138:	429a      	cmp	r2, r3
 800f13a:	d10e      	bne.n	800f15a <dir_find+0x106>
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	68da      	ldr	r2, [r3, #12]
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6a1b      	ldr	r3, [r3, #32]
 800f144:	4619      	mov	r1, r3
 800f146:	4610      	mov	r0, r2
 800f148:	f7ff fcf2 	bl	800eb30 <cmp_lfn>
 800f14c:	4603      	mov	r3, r0
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d003      	beq.n	800f15a <dir_find+0x106>
 800f152:	7d7b      	ldrb	r3, [r7, #21]
 800f154:	3b01      	subs	r3, #1
 800f156:	b2db      	uxtb	r3, r3
 800f158:	e000      	b.n	800f15c <dir_find+0x108>
 800f15a:	23ff      	movs	r3, #255	; 0xff
 800f15c:	757b      	strb	r3, [r7, #21]
 800f15e:	e024      	b.n	800f1aa <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f160:	7d7b      	ldrb	r3, [r7, #21]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d109      	bne.n	800f17a <dir_find+0x126>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	6a1b      	ldr	r3, [r3, #32]
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7ff feaa 	bl	800eec4 <sum_sfn>
 800f170:	4603      	mov	r3, r0
 800f172:	461a      	mov	r2, r3
 800f174:	7d3b      	ldrb	r3, [r7, #20]
 800f176:	4293      	cmp	r3, r2
 800f178:	d024      	beq.n	800f1c4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f180:	f003 0301 	and.w	r3, r3, #1
 800f184:	2b00      	cmp	r3, #0
 800f186:	d10a      	bne.n	800f19e <dir_find+0x14a>
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	6a18      	ldr	r0, [r3, #32]
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	3324      	adds	r3, #36	; 0x24
 800f190:	220b      	movs	r2, #11
 800f192:	4619      	mov	r1, r3
 800f194:	f7fe fd96 	bl	800dcc4 <mem_cmp>
 800f198:	4603      	mov	r3, r0
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d014      	beq.n	800f1c8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f19e:	23ff      	movs	r3, #255	; 0xff
 800f1a0:	757b      	strb	r3, [r7, #21]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f1a8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f1aa:	2100      	movs	r1, #0
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f7ff fb74 	bl	800e89a <dir_next>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f1b6:	7dfb      	ldrb	r3, [r7, #23]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	f43f af65 	beq.w	800f088 <dir_find+0x34>
 800f1be:	e004      	b.n	800f1ca <dir_find+0x176>
		if (res != FR_OK) break;
 800f1c0:	bf00      	nop
 800f1c2:	e002      	b.n	800f1ca <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f1c4:	bf00      	nop
 800f1c6:	e000      	b.n	800f1ca <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f1c8:	bf00      	nop

	return res;
 800f1ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3718      	adds	r7, #24
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}

0800f1d4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b08c      	sub	sp, #48	; 0x30
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f1e8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d001      	beq.n	800f1f4 <dir_register+0x20>
 800f1f0:	2306      	movs	r3, #6
 800f1f2:	e0e0      	b.n	800f3b6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	627b      	str	r3, [r7, #36]	; 0x24
 800f1f8:	e002      	b.n	800f200 <dir_register+0x2c>
 800f1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	627b      	str	r3, [r7, #36]	; 0x24
 800f200:	69fb      	ldr	r3, [r7, #28]
 800f202:	68da      	ldr	r2, [r3, #12]
 800f204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f206:	005b      	lsls	r3, r3, #1
 800f208:	4413      	add	r3, r2
 800f20a:	881b      	ldrh	r3, [r3, #0]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d1f4      	bne.n	800f1fa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800f216:	f107 030c 	add.w	r3, r7, #12
 800f21a:	220c      	movs	r2, #12
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7fe fd15 	bl	800dc4c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f222:	7dfb      	ldrb	r3, [r7, #23]
 800f224:	f003 0301 	and.w	r3, r3, #1
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d032      	beq.n	800f292 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2240      	movs	r2, #64	; 0x40
 800f230:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800f234:	2301      	movs	r3, #1
 800f236:	62bb      	str	r3, [r7, #40]	; 0x28
 800f238:	e016      	b.n	800f268 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800f240:	69fb      	ldr	r3, [r7, #28]
 800f242:	68da      	ldr	r2, [r3, #12]
 800f244:	f107 010c 	add.w	r1, r7, #12
 800f248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24a:	f7ff fdad 	bl	800eda8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f7ff ff00 	bl	800f054 <dir_find>
 800f254:	4603      	mov	r3, r0
 800f256:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800f25a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d106      	bne.n	800f270 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f264:	3301      	adds	r3, #1
 800f266:	62bb      	str	r3, [r7, #40]	; 0x28
 800f268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f26a:	2b63      	cmp	r3, #99	; 0x63
 800f26c:	d9e5      	bls.n	800f23a <dir_register+0x66>
 800f26e:	e000      	b.n	800f272 <dir_register+0x9e>
			if (res != FR_OK) break;
 800f270:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f274:	2b64      	cmp	r3, #100	; 0x64
 800f276:	d101      	bne.n	800f27c <dir_register+0xa8>
 800f278:	2307      	movs	r3, #7
 800f27a:	e09c      	b.n	800f3b6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f27c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f280:	2b04      	cmp	r3, #4
 800f282:	d002      	beq.n	800f28a <dir_register+0xb6>
 800f284:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f288:	e095      	b.n	800f3b6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f28a:	7dfa      	ldrb	r2, [r7, #23]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f292:	7dfb      	ldrb	r3, [r7, #23]
 800f294:	f003 0302 	and.w	r3, r3, #2
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d007      	beq.n	800f2ac <dir_register+0xd8>
 800f29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29e:	330c      	adds	r3, #12
 800f2a0:	4a47      	ldr	r2, [pc, #284]	; (800f3c0 <dir_register+0x1ec>)
 800f2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800f2a6:	089b      	lsrs	r3, r3, #2
 800f2a8:	3301      	adds	r3, #1
 800f2aa:	e000      	b.n	800f2ae <dir_register+0xda>
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f2b0:	6a39      	ldr	r1, [r7, #32]
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f7ff fbb6 	bl	800ea24 <dir_alloc>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f2be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d148      	bne.n	800f358 <dir_register+0x184>
 800f2c6:	6a3b      	ldr	r3, [r7, #32]
 800f2c8:	3b01      	subs	r3, #1
 800f2ca:	623b      	str	r3, [r7, #32]
 800f2cc:	6a3b      	ldr	r3, [r7, #32]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d042      	beq.n	800f358 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	695a      	ldr	r2, [r3, #20]
 800f2d6:	6a3b      	ldr	r3, [r7, #32]
 800f2d8:	015b      	lsls	r3, r3, #5
 800f2da:	1ad3      	subs	r3, r2, r3
 800f2dc:	4619      	mov	r1, r3
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f7ff fa60 	bl	800e7a4 <dir_sdi>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f2ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d132      	bne.n	800f358 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	3324      	adds	r3, #36	; 0x24
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f7ff fde4 	bl	800eec4 <sum_sfn>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	69db      	ldr	r3, [r3, #28]
 800f304:	4619      	mov	r1, r3
 800f306:	69f8      	ldr	r0, [r7, #28]
 800f308:	f7fe fece 	bl	800e0a8 <move_window>
 800f30c:	4603      	mov	r3, r0
 800f30e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800f312:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f316:	2b00      	cmp	r3, #0
 800f318:	d11d      	bne.n	800f356 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f31a:	69fb      	ldr	r3, [r7, #28]
 800f31c:	68d8      	ldr	r0, [r3, #12]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6a19      	ldr	r1, [r3, #32]
 800f322:	6a3b      	ldr	r3, [r7, #32]
 800f324:	b2da      	uxtb	r2, r3
 800f326:	7efb      	ldrb	r3, [r7, #27]
 800f328:	f7ff fcd6 	bl	800ecd8 <put_lfn>
				fs->wflag = 1;
 800f32c:	69fb      	ldr	r3, [r7, #28]
 800f32e:	2201      	movs	r2, #1
 800f330:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f332:	2100      	movs	r1, #0
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f7ff fab0 	bl	800e89a <dir_next>
 800f33a:	4603      	mov	r3, r0
 800f33c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800f340:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f344:	2b00      	cmp	r3, #0
 800f346:	d107      	bne.n	800f358 <dir_register+0x184>
 800f348:	6a3b      	ldr	r3, [r7, #32]
 800f34a:	3b01      	subs	r3, #1
 800f34c:	623b      	str	r3, [r7, #32]
 800f34e:	6a3b      	ldr	r3, [r7, #32]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d1d5      	bne.n	800f300 <dir_register+0x12c>
 800f354:	e000      	b.n	800f358 <dir_register+0x184>
				if (res != FR_OK) break;
 800f356:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f358:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d128      	bne.n	800f3b2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	69db      	ldr	r3, [r3, #28]
 800f364:	4619      	mov	r1, r3
 800f366:	69f8      	ldr	r0, [r7, #28]
 800f368:	f7fe fe9e 	bl	800e0a8 <move_window>
 800f36c:	4603      	mov	r3, r0
 800f36e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f372:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f376:	2b00      	cmp	r3, #0
 800f378:	d11b      	bne.n	800f3b2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6a1b      	ldr	r3, [r3, #32]
 800f37e:	2220      	movs	r2, #32
 800f380:	2100      	movs	r1, #0
 800f382:	4618      	mov	r0, r3
 800f384:	f7fe fc83 	bl	800dc8e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6a18      	ldr	r0, [r3, #32]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	3324      	adds	r3, #36	; 0x24
 800f390:	220b      	movs	r2, #11
 800f392:	4619      	mov	r1, r3
 800f394:	f7fe fc5a 	bl	800dc4c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6a1b      	ldr	r3, [r3, #32]
 800f3a2:	330c      	adds	r3, #12
 800f3a4:	f002 0218 	and.w	r2, r2, #24
 800f3a8:	b2d2      	uxtb	r2, r2
 800f3aa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f3ac:	69fb      	ldr	r3, [r7, #28]
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f3b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3730      	adds	r7, #48	; 0x30
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}
 800f3be:	bf00      	nop
 800f3c0:	4ec4ec4f 	.word	0x4ec4ec4f

0800f3c4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b088      	sub	sp, #32
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	69db      	ldr	r3, [r3, #28]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	f000 80c9 	beq.w	800f576 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ec:	d032      	beq.n	800f454 <get_fileinfo+0x90>
			i = j = 0;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	61bb      	str	r3, [r7, #24]
 800f3f2:	69bb      	ldr	r3, [r7, #24]
 800f3f4:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800f3f6:	e01b      	b.n	800f430 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800f3f8:	89fb      	ldrh	r3, [r7, #14]
 800f3fa:	2100      	movs	r1, #0
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f001 fd2f 	bl	8010e60 <ff_convert>
 800f402:	4603      	mov	r3, r0
 800f404:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800f406:	89fb      	ldrh	r3, [r7, #14]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d102      	bne.n	800f412 <get_fileinfo+0x4e>
 800f40c:	2300      	movs	r3, #0
 800f40e:	61fb      	str	r3, [r7, #28]
 800f410:	e01a      	b.n	800f448 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800f412:	69fb      	ldr	r3, [r7, #28]
 800f414:	2bfe      	cmp	r3, #254	; 0xfe
 800f416:	d902      	bls.n	800f41e <get_fileinfo+0x5a>
 800f418:	2300      	movs	r3, #0
 800f41a:	61fb      	str	r3, [r7, #28]
 800f41c:	e014      	b.n	800f448 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	1c5a      	adds	r2, r3, #1
 800f422:	61fa      	str	r2, [r7, #28]
 800f424:	89fa      	ldrh	r2, [r7, #14]
 800f426:	b2d1      	uxtb	r1, r2
 800f428:	683a      	ldr	r2, [r7, #0]
 800f42a:	4413      	add	r3, r2
 800f42c:	460a      	mov	r2, r1
 800f42e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800f430:	693b      	ldr	r3, [r7, #16]
 800f432:	68da      	ldr	r2, [r3, #12]
 800f434:	69bb      	ldr	r3, [r7, #24]
 800f436:	1c59      	adds	r1, r3, #1
 800f438:	61b9      	str	r1, [r7, #24]
 800f43a:	005b      	lsls	r3, r3, #1
 800f43c:	4413      	add	r3, r2
 800f43e:	881b      	ldrh	r3, [r3, #0]
 800f440:	81fb      	strh	r3, [r7, #14]
 800f442:	89fb      	ldrh	r3, [r7, #14]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d1d7      	bne.n	800f3f8 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800f448:	683a      	ldr	r2, [r7, #0]
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	4413      	add	r3, r2
 800f44e:	3316      	adds	r3, #22
 800f450:	2200      	movs	r2, #0
 800f452:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800f454:	2300      	movs	r3, #0
 800f456:	61bb      	str	r3, [r7, #24]
 800f458:	69bb      	ldr	r3, [r7, #24]
 800f45a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800f45c:	683a      	ldr	r2, [r7, #0]
 800f45e:	69fb      	ldr	r3, [r7, #28]
 800f460:	4413      	add	r3, r2
 800f462:	3316      	adds	r3, #22
 800f464:	781b      	ldrb	r3, [r3, #0]
 800f466:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800f468:	e04c      	b.n	800f504 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6a1a      	ldr	r2, [r3, #32]
 800f46e:	69fb      	ldr	r3, [r7, #28]
 800f470:	1c59      	adds	r1, r3, #1
 800f472:	61f9      	str	r1, [r7, #28]
 800f474:	4413      	add	r3, r2
 800f476:	781b      	ldrb	r3, [r3, #0]
 800f478:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800f47a:	7dfb      	ldrb	r3, [r7, #23]
 800f47c:	2b20      	cmp	r3, #32
 800f47e:	d100      	bne.n	800f482 <get_fileinfo+0xbe>
 800f480:	e040      	b.n	800f504 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800f482:	7dfb      	ldrb	r3, [r7, #23]
 800f484:	2b05      	cmp	r3, #5
 800f486:	d101      	bne.n	800f48c <get_fileinfo+0xc8>
 800f488:	23e5      	movs	r3, #229	; 0xe5
 800f48a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800f48c:	69fb      	ldr	r3, [r7, #28]
 800f48e:	2b09      	cmp	r3, #9
 800f490:	d10f      	bne.n	800f4b2 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800f492:	89bb      	ldrh	r3, [r7, #12]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d105      	bne.n	800f4a4 <get_fileinfo+0xe0>
 800f498:	683a      	ldr	r2, [r7, #0]
 800f49a:	69bb      	ldr	r3, [r7, #24]
 800f49c:	4413      	add	r3, r2
 800f49e:	3316      	adds	r3, #22
 800f4a0:	222e      	movs	r2, #46	; 0x2e
 800f4a2:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800f4a4:	69bb      	ldr	r3, [r7, #24]
 800f4a6:	1c5a      	adds	r2, r3, #1
 800f4a8:	61ba      	str	r2, [r7, #24]
 800f4aa:	683a      	ldr	r2, [r7, #0]
 800f4ac:	4413      	add	r3, r2
 800f4ae:	222e      	movs	r2, #46	; 0x2e
 800f4b0:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800f4b2:	683a      	ldr	r2, [r7, #0]
 800f4b4:	69bb      	ldr	r3, [r7, #24]
 800f4b6:	4413      	add	r3, r2
 800f4b8:	3309      	adds	r3, #9
 800f4ba:	7dfa      	ldrb	r2, [r7, #23]
 800f4bc:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800f4be:	89bb      	ldrh	r3, [r7, #12]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d11c      	bne.n	800f4fe <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800f4c4:	7dfb      	ldrb	r3, [r7, #23]
 800f4c6:	2b40      	cmp	r3, #64	; 0x40
 800f4c8:	d913      	bls.n	800f4f2 <get_fileinfo+0x12e>
 800f4ca:	7dfb      	ldrb	r3, [r7, #23]
 800f4cc:	2b5a      	cmp	r3, #90	; 0x5a
 800f4ce:	d810      	bhi.n	800f4f2 <get_fileinfo+0x12e>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6a1b      	ldr	r3, [r3, #32]
 800f4d4:	330c      	adds	r3, #12
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	461a      	mov	r2, r3
 800f4da:	69fb      	ldr	r3, [r7, #28]
 800f4dc:	2b08      	cmp	r3, #8
 800f4de:	d901      	bls.n	800f4e4 <get_fileinfo+0x120>
 800f4e0:	2310      	movs	r3, #16
 800f4e2:	e000      	b.n	800f4e6 <get_fileinfo+0x122>
 800f4e4:	2308      	movs	r3, #8
 800f4e6:	4013      	ands	r3, r2
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d002      	beq.n	800f4f2 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800f4ec:	7dfb      	ldrb	r3, [r7, #23]
 800f4ee:	3320      	adds	r3, #32
 800f4f0:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800f4f2:	683a      	ldr	r2, [r7, #0]
 800f4f4:	69bb      	ldr	r3, [r7, #24]
 800f4f6:	4413      	add	r3, r2
 800f4f8:	3316      	adds	r3, #22
 800f4fa:	7dfa      	ldrb	r2, [r7, #23]
 800f4fc:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800f4fe:	69bb      	ldr	r3, [r7, #24]
 800f500:	3301      	adds	r3, #1
 800f502:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	2b0a      	cmp	r3, #10
 800f508:	d9af      	bls.n	800f46a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800f50a:	89bb      	ldrh	r3, [r7, #12]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d10d      	bne.n	800f52c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800f510:	683a      	ldr	r2, [r7, #0]
 800f512:	69bb      	ldr	r3, [r7, #24]
 800f514:	4413      	add	r3, r2
 800f516:	3316      	adds	r3, #22
 800f518:	2200      	movs	r2, #0
 800f51a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6a1b      	ldr	r3, [r3, #32]
 800f520:	330c      	adds	r3, #12
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d101      	bne.n	800f52c <get_fileinfo+0x168>
 800f528:	2300      	movs	r3, #0
 800f52a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800f52c:	683a      	ldr	r2, [r7, #0]
 800f52e:	69bb      	ldr	r3, [r7, #24]
 800f530:	4413      	add	r3, r2
 800f532:	3309      	adds	r3, #9
 800f534:	2200      	movs	r2, #0
 800f536:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6a1b      	ldr	r3, [r3, #32]
 800f53c:	7ada      	ldrb	r2, [r3, #11]
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6a1b      	ldr	r3, [r3, #32]
 800f546:	331c      	adds	r3, #28
 800f548:	4618      	mov	r0, r3
 800f54a:	f7fe fb15 	bl	800db78 <ld_dword>
 800f54e:	4602      	mov	r2, r0
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6a1b      	ldr	r3, [r3, #32]
 800f558:	3316      	adds	r3, #22
 800f55a:	4618      	mov	r0, r3
 800f55c:	f7fe fb0c 	bl	800db78 <ld_dword>
 800f560:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	b29a      	uxth	r2, r3
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	80da      	strh	r2, [r3, #6]
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	0c1b      	lsrs	r3, r3, #16
 800f56e:	b29a      	uxth	r2, r3
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	809a      	strh	r2, [r3, #4]
 800f574:	e000      	b.n	800f578 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f576:	bf00      	nop
}
 800f578:	3720      	adds	r7, #32
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
	...

0800f580 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b08a      	sub	sp, #40	; 0x28
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	613b      	str	r3, [r7, #16]
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	68db      	ldr	r3, [r3, #12]
 800f596:	60fb      	str	r3, [r7, #12]
 800f598:	2300      	movs	r3, #0
 800f59a:	617b      	str	r3, [r7, #20]
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f5a0:	69bb      	ldr	r3, [r7, #24]
 800f5a2:	1c5a      	adds	r2, r3, #1
 800f5a4:	61ba      	str	r2, [r7, #24]
 800f5a6:	693a      	ldr	r2, [r7, #16]
 800f5a8:	4413      	add	r3, r2
 800f5aa:	781b      	ldrb	r3, [r3, #0]
 800f5ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f5ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5b0:	2b1f      	cmp	r3, #31
 800f5b2:	d940      	bls.n	800f636 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f5b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5b6:	2b2f      	cmp	r3, #47	; 0x2f
 800f5b8:	d006      	beq.n	800f5c8 <create_name+0x48>
 800f5ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5bc:	2b5c      	cmp	r3, #92	; 0x5c
 800f5be:	d110      	bne.n	800f5e2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f5c0:	e002      	b.n	800f5c8 <create_name+0x48>
 800f5c2:	69bb      	ldr	r3, [r7, #24]
 800f5c4:	3301      	adds	r3, #1
 800f5c6:	61bb      	str	r3, [r7, #24]
 800f5c8:	693a      	ldr	r2, [r7, #16]
 800f5ca:	69bb      	ldr	r3, [r7, #24]
 800f5cc:	4413      	add	r3, r2
 800f5ce:	781b      	ldrb	r3, [r3, #0]
 800f5d0:	2b2f      	cmp	r3, #47	; 0x2f
 800f5d2:	d0f6      	beq.n	800f5c2 <create_name+0x42>
 800f5d4:	693a      	ldr	r2, [r7, #16]
 800f5d6:	69bb      	ldr	r3, [r7, #24]
 800f5d8:	4413      	add	r3, r2
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	2b5c      	cmp	r3, #92	; 0x5c
 800f5de:	d0f0      	beq.n	800f5c2 <create_name+0x42>
			break;
 800f5e0:	e02a      	b.n	800f638 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	2bfe      	cmp	r3, #254	; 0xfe
 800f5e6:	d901      	bls.n	800f5ec <create_name+0x6c>
 800f5e8:	2306      	movs	r3, #6
 800f5ea:	e17d      	b.n	800f8e8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f5ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f5f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5f4:	2101      	movs	r1, #1
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f001 fc32 	bl	8010e60 <ff_convert>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f600:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f602:	2b00      	cmp	r3, #0
 800f604:	d101      	bne.n	800f60a <create_name+0x8a>
 800f606:	2306      	movs	r3, #6
 800f608:	e16e      	b.n	800f8e8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f60a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f60c:	2b7f      	cmp	r3, #127	; 0x7f
 800f60e:	d809      	bhi.n	800f624 <create_name+0xa4>
 800f610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f612:	4619      	mov	r1, r3
 800f614:	488d      	ldr	r0, [pc, #564]	; (800f84c <create_name+0x2cc>)
 800f616:	f7fe fb7c 	bl	800dd12 <chk_chr>
 800f61a:	4603      	mov	r3, r0
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d001      	beq.n	800f624 <create_name+0xa4>
 800f620:	2306      	movs	r3, #6
 800f622:	e161      	b.n	800f8e8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	1c5a      	adds	r2, r3, #1
 800f628:	617a      	str	r2, [r7, #20]
 800f62a:	005b      	lsls	r3, r3, #1
 800f62c:	68fa      	ldr	r2, [r7, #12]
 800f62e:	4413      	add	r3, r2
 800f630:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f632:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f634:	e7b4      	b.n	800f5a0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f636:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f638:	693a      	ldr	r2, [r7, #16]
 800f63a:	69bb      	ldr	r3, [r7, #24]
 800f63c:	441a      	add	r2, r3
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f642:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f644:	2b1f      	cmp	r3, #31
 800f646:	d801      	bhi.n	800f64c <create_name+0xcc>
 800f648:	2304      	movs	r3, #4
 800f64a:	e000      	b.n	800f64e <create_name+0xce>
 800f64c:	2300      	movs	r3, #0
 800f64e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f652:	e011      	b.n	800f678 <create_name+0xf8>
		w = lfn[di - 1];
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f65a:	3b01      	subs	r3, #1
 800f65c:	005b      	lsls	r3, r3, #1
 800f65e:	68fa      	ldr	r2, [r7, #12]
 800f660:	4413      	add	r3, r2
 800f662:	881b      	ldrh	r3, [r3, #0]
 800f664:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f666:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f668:	2b20      	cmp	r3, #32
 800f66a:	d002      	beq.n	800f672 <create_name+0xf2>
 800f66c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f66e:	2b2e      	cmp	r3, #46	; 0x2e
 800f670:	d106      	bne.n	800f680 <create_name+0x100>
		di--;
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	3b01      	subs	r3, #1
 800f676:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d1ea      	bne.n	800f654 <create_name+0xd4>
 800f67e:	e000      	b.n	800f682 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f680:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	005b      	lsls	r3, r3, #1
 800f686:	68fa      	ldr	r2, [r7, #12]
 800f688:	4413      	add	r3, r2
 800f68a:	2200      	movs	r2, #0
 800f68c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d101      	bne.n	800f698 <create_name+0x118>
 800f694:	2306      	movs	r3, #6
 800f696:	e127      	b.n	800f8e8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	3324      	adds	r3, #36	; 0x24
 800f69c:	220b      	movs	r2, #11
 800f69e:	2120      	movs	r1, #32
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f7fe faf4 	bl	800dc8e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	61bb      	str	r3, [r7, #24]
 800f6aa:	e002      	b.n	800f6b2 <create_name+0x132>
 800f6ac:	69bb      	ldr	r3, [r7, #24]
 800f6ae:	3301      	adds	r3, #1
 800f6b0:	61bb      	str	r3, [r7, #24]
 800f6b2:	69bb      	ldr	r3, [r7, #24]
 800f6b4:	005b      	lsls	r3, r3, #1
 800f6b6:	68fa      	ldr	r2, [r7, #12]
 800f6b8:	4413      	add	r3, r2
 800f6ba:	881b      	ldrh	r3, [r3, #0]
 800f6bc:	2b20      	cmp	r3, #32
 800f6be:	d0f5      	beq.n	800f6ac <create_name+0x12c>
 800f6c0:	69bb      	ldr	r3, [r7, #24]
 800f6c2:	005b      	lsls	r3, r3, #1
 800f6c4:	68fa      	ldr	r2, [r7, #12]
 800f6c6:	4413      	add	r3, r2
 800f6c8:	881b      	ldrh	r3, [r3, #0]
 800f6ca:	2b2e      	cmp	r3, #46	; 0x2e
 800f6cc:	d0ee      	beq.n	800f6ac <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f6ce:	69bb      	ldr	r3, [r7, #24]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d009      	beq.n	800f6e8 <create_name+0x168>
 800f6d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6d8:	f043 0303 	orr.w	r3, r3, #3
 800f6dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f6e0:	e002      	b.n	800f6e8 <create_name+0x168>
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	3b01      	subs	r3, #1
 800f6e6:	617b      	str	r3, [r7, #20]
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d009      	beq.n	800f702 <create_name+0x182>
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f6f4:	3b01      	subs	r3, #1
 800f6f6:	005b      	lsls	r3, r3, #1
 800f6f8:	68fa      	ldr	r2, [r7, #12]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	881b      	ldrh	r3, [r3, #0]
 800f6fe:	2b2e      	cmp	r3, #46	; 0x2e
 800f700:	d1ef      	bne.n	800f6e2 <create_name+0x162>

	i = b = 0; ni = 8;
 800f702:	2300      	movs	r3, #0
 800f704:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f708:	2300      	movs	r3, #0
 800f70a:	623b      	str	r3, [r7, #32]
 800f70c:	2308      	movs	r3, #8
 800f70e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f710:	69bb      	ldr	r3, [r7, #24]
 800f712:	1c5a      	adds	r2, r3, #1
 800f714:	61ba      	str	r2, [r7, #24]
 800f716:	005b      	lsls	r3, r3, #1
 800f718:	68fa      	ldr	r2, [r7, #12]
 800f71a:	4413      	add	r3, r2
 800f71c:	881b      	ldrh	r3, [r3, #0]
 800f71e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f720:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f722:	2b00      	cmp	r3, #0
 800f724:	f000 8090 	beq.w	800f848 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f728:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f72a:	2b20      	cmp	r3, #32
 800f72c:	d006      	beq.n	800f73c <create_name+0x1bc>
 800f72e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f730:	2b2e      	cmp	r3, #46	; 0x2e
 800f732:	d10a      	bne.n	800f74a <create_name+0x1ca>
 800f734:	69ba      	ldr	r2, [r7, #24]
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	429a      	cmp	r2, r3
 800f73a:	d006      	beq.n	800f74a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f73c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f740:	f043 0303 	orr.w	r3, r3, #3
 800f744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f748:	e07d      	b.n	800f846 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f74a:	6a3a      	ldr	r2, [r7, #32]
 800f74c:	69fb      	ldr	r3, [r7, #28]
 800f74e:	429a      	cmp	r2, r3
 800f750:	d203      	bcs.n	800f75a <create_name+0x1da>
 800f752:	69ba      	ldr	r2, [r7, #24]
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	429a      	cmp	r2, r3
 800f758:	d123      	bne.n	800f7a2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f75a:	69fb      	ldr	r3, [r7, #28]
 800f75c:	2b0b      	cmp	r3, #11
 800f75e:	d106      	bne.n	800f76e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f764:	f043 0303 	orr.w	r3, r3, #3
 800f768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f76c:	e075      	b.n	800f85a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f76e:	69ba      	ldr	r2, [r7, #24]
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	429a      	cmp	r2, r3
 800f774:	d005      	beq.n	800f782 <create_name+0x202>
 800f776:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f77a:	f043 0303 	orr.w	r3, r3, #3
 800f77e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f782:	69ba      	ldr	r2, [r7, #24]
 800f784:	697b      	ldr	r3, [r7, #20]
 800f786:	429a      	cmp	r2, r3
 800f788:	d866      	bhi.n	800f858 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f78a:	697b      	ldr	r3, [r7, #20]
 800f78c:	61bb      	str	r3, [r7, #24]
 800f78e:	2308      	movs	r3, #8
 800f790:	623b      	str	r3, [r7, #32]
 800f792:	230b      	movs	r3, #11
 800f794:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f796:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f79a:	009b      	lsls	r3, r3, #2
 800f79c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f7a0:	e051      	b.n	800f846 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f7a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7a4:	2b7f      	cmp	r3, #127	; 0x7f
 800f7a6:	d914      	bls.n	800f7d2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f7a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7aa:	2100      	movs	r1, #0
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f001 fb57 	bl	8010e60 <ff_convert>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f7b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d004      	beq.n	800f7c6 <create_name+0x246>
 800f7bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7be:	3b80      	subs	r3, #128	; 0x80
 800f7c0:	4a23      	ldr	r2, [pc, #140]	; (800f850 <create_name+0x2d0>)
 800f7c2:	5cd3      	ldrb	r3, [r2, r3]
 800f7c4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f7c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7ca:	f043 0302 	orr.w	r3, r3, #2
 800f7ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f7d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d007      	beq.n	800f7e8 <create_name+0x268>
 800f7d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7da:	4619      	mov	r1, r3
 800f7dc:	481d      	ldr	r0, [pc, #116]	; (800f854 <create_name+0x2d4>)
 800f7de:	f7fe fa98 	bl	800dd12 <chk_chr>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d008      	beq.n	800f7fa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f7e8:	235f      	movs	r3, #95	; 0x5f
 800f7ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f7ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7f0:	f043 0303 	orr.w	r3, r3, #3
 800f7f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f7f8:	e01b      	b.n	800f832 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f7fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7fc:	2b40      	cmp	r3, #64	; 0x40
 800f7fe:	d909      	bls.n	800f814 <create_name+0x294>
 800f800:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f802:	2b5a      	cmp	r3, #90	; 0x5a
 800f804:	d806      	bhi.n	800f814 <create_name+0x294>
					b |= 2;
 800f806:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f80a:	f043 0302 	orr.w	r3, r3, #2
 800f80e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f812:	e00e      	b.n	800f832 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f814:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f816:	2b60      	cmp	r3, #96	; 0x60
 800f818:	d90b      	bls.n	800f832 <create_name+0x2b2>
 800f81a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f81c:	2b7a      	cmp	r3, #122	; 0x7a
 800f81e:	d808      	bhi.n	800f832 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f820:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f824:	f043 0301 	orr.w	r3, r3, #1
 800f828:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f82c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f82e:	3b20      	subs	r3, #32
 800f830:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f832:	6a3b      	ldr	r3, [r7, #32]
 800f834:	1c5a      	adds	r2, r3, #1
 800f836:	623a      	str	r2, [r7, #32]
 800f838:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f83a:	b2d1      	uxtb	r1, r2
 800f83c:	687a      	ldr	r2, [r7, #4]
 800f83e:	4413      	add	r3, r2
 800f840:	460a      	mov	r2, r1
 800f842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f846:	e763      	b.n	800f710 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f848:	bf00      	nop
 800f84a:	e006      	b.n	800f85a <create_name+0x2da>
 800f84c:	08011a9c 	.word	0x08011a9c
 800f850:	08013040 	.word	0x08013040
 800f854:	08011aa8 	.word	0x08011aa8
			if (si > di) break;			/* No extension */
 800f858:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f860:	2be5      	cmp	r3, #229	; 0xe5
 800f862:	d103      	bne.n	800f86c <create_name+0x2ec>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2205      	movs	r2, #5
 800f868:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f86c:	69fb      	ldr	r3, [r7, #28]
 800f86e:	2b08      	cmp	r3, #8
 800f870:	d104      	bne.n	800f87c <create_name+0x2fc>
 800f872:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f876:	009b      	lsls	r3, r3, #2
 800f878:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f87c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f880:	f003 030c 	and.w	r3, r3, #12
 800f884:	2b0c      	cmp	r3, #12
 800f886:	d005      	beq.n	800f894 <create_name+0x314>
 800f888:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f88c:	f003 0303 	and.w	r3, r3, #3
 800f890:	2b03      	cmp	r3, #3
 800f892:	d105      	bne.n	800f8a0 <create_name+0x320>
 800f894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f898:	f043 0302 	orr.w	r3, r3, #2
 800f89c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f8a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8a4:	f003 0302 	and.w	r3, r3, #2
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d117      	bne.n	800f8dc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f8ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8b0:	f003 0303 	and.w	r3, r3, #3
 800f8b4:	2b01      	cmp	r3, #1
 800f8b6:	d105      	bne.n	800f8c4 <create_name+0x344>
 800f8b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8bc:	f043 0310 	orr.w	r3, r3, #16
 800f8c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f8c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8c8:	f003 030c 	and.w	r3, r3, #12
 800f8cc:	2b04      	cmp	r3, #4
 800f8ce:	d105      	bne.n	800f8dc <create_name+0x35c>
 800f8d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8d4:	f043 0308 	orr.w	r3, r3, #8
 800f8d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f8e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f8e6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	3728      	adds	r7, #40	; 0x28
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	bd80      	pop	{r7, pc}

0800f8f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b086      	sub	sp, #24
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f904:	e002      	b.n	800f90c <follow_path+0x1c>
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	3301      	adds	r3, #1
 800f90a:	603b      	str	r3, [r7, #0]
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	2b2f      	cmp	r3, #47	; 0x2f
 800f912:	d0f8      	beq.n	800f906 <follow_path+0x16>
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	2b5c      	cmp	r3, #92	; 0x5c
 800f91a:	d0f4      	beq.n	800f906 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	2200      	movs	r2, #0
 800f920:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	2b1f      	cmp	r3, #31
 800f928:	d80a      	bhi.n	800f940 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2280      	movs	r2, #128	; 0x80
 800f92e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f932:	2100      	movs	r1, #0
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f7fe ff35 	bl	800e7a4 <dir_sdi>
 800f93a:	4603      	mov	r3, r0
 800f93c:	75fb      	strb	r3, [r7, #23]
 800f93e:	e043      	b.n	800f9c8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f940:	463b      	mov	r3, r7
 800f942:	4619      	mov	r1, r3
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f7ff fe1b 	bl	800f580 <create_name>
 800f94a:	4603      	mov	r3, r0
 800f94c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f94e:	7dfb      	ldrb	r3, [r7, #23]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d134      	bne.n	800f9be <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f7ff fb7d 	bl	800f054 <dir_find>
 800f95a:	4603      	mov	r3, r0
 800f95c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f964:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f966:	7dfb      	ldrb	r3, [r7, #23]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d00a      	beq.n	800f982 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f96c:	7dfb      	ldrb	r3, [r7, #23]
 800f96e:	2b04      	cmp	r3, #4
 800f970:	d127      	bne.n	800f9c2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f972:	7afb      	ldrb	r3, [r7, #11]
 800f974:	f003 0304 	and.w	r3, r3, #4
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d122      	bne.n	800f9c2 <follow_path+0xd2>
 800f97c:	2305      	movs	r3, #5
 800f97e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f980:	e01f      	b.n	800f9c2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f982:	7afb      	ldrb	r3, [r7, #11]
 800f984:	f003 0304 	and.w	r3, r3, #4
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d11c      	bne.n	800f9c6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	799b      	ldrb	r3, [r3, #6]
 800f990:	f003 0310 	and.w	r3, r3, #16
 800f994:	2b00      	cmp	r3, #0
 800f996:	d102      	bne.n	800f99e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f998:	2305      	movs	r3, #5
 800f99a:	75fb      	strb	r3, [r7, #23]
 800f99c:	e014      	b.n	800f9c8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	695b      	ldr	r3, [r3, #20]
 800f9a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9ac:	4413      	add	r3, r2
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	68f8      	ldr	r0, [r7, #12]
 800f9b2:	f7ff f87e 	bl	800eab2 <ld_clust>
 800f9b6:	4602      	mov	r2, r0
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f9bc:	e7c0      	b.n	800f940 <follow_path+0x50>
			if (res != FR_OK) break;
 800f9be:	bf00      	nop
 800f9c0:	e002      	b.n	800f9c8 <follow_path+0xd8>
				break;
 800f9c2:	bf00      	nop
 800f9c4:	e000      	b.n	800f9c8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f9c6:	bf00      	nop
			}
		}
	}

	return res;
 800f9c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3718      	adds	r7, #24
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f9d2:	b480      	push	{r7}
 800f9d4:	b087      	sub	sp, #28
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f9da:	f04f 33ff 	mov.w	r3, #4294967295
 800f9de:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d031      	beq.n	800fa4c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	617b      	str	r3, [r7, #20]
 800f9ee:	e002      	b.n	800f9f6 <get_ldnumber+0x24>
 800f9f0:	697b      	ldr	r3, [r7, #20]
 800f9f2:	3301      	adds	r3, #1
 800f9f4:	617b      	str	r3, [r7, #20]
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	2b1f      	cmp	r3, #31
 800f9fc:	d903      	bls.n	800fa06 <get_ldnumber+0x34>
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	2b3a      	cmp	r3, #58	; 0x3a
 800fa04:	d1f4      	bne.n	800f9f0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	781b      	ldrb	r3, [r3, #0]
 800fa0a:	2b3a      	cmp	r3, #58	; 0x3a
 800fa0c:	d11c      	bne.n	800fa48 <get_ldnumber+0x76>
			tp = *path;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	1c5a      	adds	r2, r3, #1
 800fa18:	60fa      	str	r2, [r7, #12]
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	3b30      	subs	r3, #48	; 0x30
 800fa1e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	2b09      	cmp	r3, #9
 800fa24:	d80e      	bhi.n	800fa44 <get_ldnumber+0x72>
 800fa26:	68fa      	ldr	r2, [r7, #12]
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d10a      	bne.n	800fa44 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d107      	bne.n	800fa44 <get_ldnumber+0x72>
					vol = (int)i;
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	617b      	str	r3, [r7, #20]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	697a      	ldr	r2, [r7, #20]
 800fa42:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	e002      	b.n	800fa4e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fa48:	2300      	movs	r3, #0
 800fa4a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fa4c:	693b      	ldr	r3, [r7, #16]
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	371c      	adds	r7, #28
 800fa52:	46bd      	mov	sp, r7
 800fa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa58:	4770      	bx	lr
	...

0800fa5c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b082      	sub	sp, #8
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2200      	movs	r2, #0
 800fa6a:	70da      	strb	r2, [r3, #3]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa72:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fa74:	6839      	ldr	r1, [r7, #0]
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f7fe fb16 	bl	800e0a8 <move_window>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d001      	beq.n	800fa86 <check_fs+0x2a>
 800fa82:	2304      	movs	r3, #4
 800fa84:	e038      	b.n	800faf8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	3334      	adds	r3, #52	; 0x34
 800fa8a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7fe f85a 	bl	800db48 <ld_word>
 800fa94:	4603      	mov	r3, r0
 800fa96:	461a      	mov	r2, r3
 800fa98:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d001      	beq.n	800faa4 <check_fs+0x48>
 800faa0:	2303      	movs	r3, #3
 800faa2:	e029      	b.n	800faf8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800faaa:	2be9      	cmp	r3, #233	; 0xe9
 800faac:	d009      	beq.n	800fac2 <check_fs+0x66>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fab4:	2beb      	cmp	r3, #235	; 0xeb
 800fab6:	d11e      	bne.n	800faf6 <check_fs+0x9a>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800fabe:	2b90      	cmp	r3, #144	; 0x90
 800fac0:	d119      	bne.n	800faf6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	3334      	adds	r3, #52	; 0x34
 800fac6:	3336      	adds	r3, #54	; 0x36
 800fac8:	4618      	mov	r0, r3
 800faca:	f7fe f855 	bl	800db78 <ld_dword>
 800face:	4603      	mov	r3, r0
 800fad0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fad4:	4a0a      	ldr	r2, [pc, #40]	; (800fb00 <check_fs+0xa4>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d101      	bne.n	800fade <check_fs+0x82>
 800fada:	2300      	movs	r3, #0
 800fadc:	e00c      	b.n	800faf8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	3334      	adds	r3, #52	; 0x34
 800fae2:	3352      	adds	r3, #82	; 0x52
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7fe f847 	bl	800db78 <ld_dword>
 800faea:	4603      	mov	r3, r0
 800faec:	4a05      	ldr	r2, [pc, #20]	; (800fb04 <check_fs+0xa8>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d101      	bne.n	800faf6 <check_fs+0x9a>
 800faf2:	2300      	movs	r3, #0
 800faf4:	e000      	b.n	800faf8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800faf6:	2302      	movs	r3, #2
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3708      	adds	r7, #8
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}
 800fb00:	00544146 	.word	0x00544146
 800fb04:	33544146 	.word	0x33544146

0800fb08 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b096      	sub	sp, #88	; 0x58
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	60f8      	str	r0, [r7, #12]
 800fb10:	60b9      	str	r1, [r7, #8]
 800fb12:	4613      	mov	r3, r2
 800fb14:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fb1c:	68f8      	ldr	r0, [r7, #12]
 800fb1e:	f7ff ff58 	bl	800f9d2 <get_ldnumber>
 800fb22:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fb24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	da01      	bge.n	800fb2e <find_volume+0x26>
 800fb2a:	230b      	movs	r3, #11
 800fb2c:	e230      	b.n	800ff90 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fb2e:	4aa1      	ldr	r2, [pc, #644]	; (800fdb4 <find_volume+0x2ac>)
 800fb30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb36:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d101      	bne.n	800fb42 <find_volume+0x3a>
 800fb3e:	230c      	movs	r3, #12
 800fb40:	e226      	b.n	800ff90 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fb42:	68bb      	ldr	r3, [r7, #8]
 800fb44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb46:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fb48:	79fb      	ldrb	r3, [r7, #7]
 800fb4a:	f023 0301 	bic.w	r3, r3, #1
 800fb4e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d01a      	beq.n	800fb8e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fb58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb5a:	785b      	ldrb	r3, [r3, #1]
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7fd ff55 	bl	800da0c <disk_status>
 800fb62:	4603      	mov	r3, r0
 800fb64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fb68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb6c:	f003 0301 	and.w	r3, r3, #1
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d10c      	bne.n	800fb8e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fb74:	79fb      	ldrb	r3, [r7, #7]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d007      	beq.n	800fb8a <find_volume+0x82>
 800fb7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb7e:	f003 0304 	and.w	r3, r3, #4
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d001      	beq.n	800fb8a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fb86:	230a      	movs	r3, #10
 800fb88:	e202      	b.n	800ff90 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	e200      	b.n	800ff90 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb90:	2200      	movs	r2, #0
 800fb92:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fb94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb96:	b2da      	uxtb	r2, r3
 800fb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9e:	785b      	ldrb	r3, [r3, #1]
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7fd ff4d 	bl	800da40 <disk_initialize>
 800fba6:	4603      	mov	r3, r0
 800fba8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fbac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbb0:	f003 0301 	and.w	r3, r3, #1
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d001      	beq.n	800fbbc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fbb8:	2303      	movs	r3, #3
 800fbba:	e1e9      	b.n	800ff90 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fbbc:	79fb      	ldrb	r3, [r7, #7]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d007      	beq.n	800fbd2 <find_volume+0xca>
 800fbc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbc6:	f003 0304 	and.w	r3, r3, #4
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d001      	beq.n	800fbd2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fbce:	230a      	movs	r3, #10
 800fbd0:	e1de      	b.n	800ff90 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fbd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fbd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fbda:	f7ff ff3f 	bl	800fa5c <check_fs>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fbe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fbe8:	2b02      	cmp	r3, #2
 800fbea:	d149      	bne.n	800fc80 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fbec:	2300      	movs	r3, #0
 800fbee:	643b      	str	r3, [r7, #64]	; 0x40
 800fbf0:	e01e      	b.n	800fc30 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fbf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbfa:	011b      	lsls	r3, r3, #4
 800fbfc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fc00:	4413      	add	r3, r2
 800fc02:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc06:	3304      	adds	r3, #4
 800fc08:	781b      	ldrb	r3, [r3, #0]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d006      	beq.n	800fc1c <find_volume+0x114>
 800fc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc10:	3308      	adds	r3, #8
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7fd ffb0 	bl	800db78 <ld_dword>
 800fc18:	4602      	mov	r2, r0
 800fc1a:	e000      	b.n	800fc1e <find_volume+0x116>
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc20:	009b      	lsls	r3, r3, #2
 800fc22:	3358      	adds	r3, #88	; 0x58
 800fc24:	443b      	add	r3, r7
 800fc26:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fc2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	643b      	str	r3, [r7, #64]	; 0x40
 800fc30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc32:	2b03      	cmp	r3, #3
 800fc34:	d9dd      	bls.n	800fbf2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fc36:	2300      	movs	r3, #0
 800fc38:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fc3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d002      	beq.n	800fc46 <find_volume+0x13e>
 800fc40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc42:	3b01      	subs	r3, #1
 800fc44:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fc46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc48:	009b      	lsls	r3, r3, #2
 800fc4a:	3358      	adds	r3, #88	; 0x58
 800fc4c:	443b      	add	r3, r7
 800fc4e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fc52:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fc54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d005      	beq.n	800fc66 <find_volume+0x15e>
 800fc5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fc5e:	f7ff fefd 	bl	800fa5c <check_fs>
 800fc62:	4603      	mov	r3, r0
 800fc64:	e000      	b.n	800fc68 <find_volume+0x160>
 800fc66:	2303      	movs	r3, #3
 800fc68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fc6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d905      	bls.n	800fc80 <find_volume+0x178>
 800fc74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc76:	3301      	adds	r3, #1
 800fc78:	643b      	str	r3, [r7, #64]	; 0x40
 800fc7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc7c:	2b03      	cmp	r3, #3
 800fc7e:	d9e2      	bls.n	800fc46 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fc80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc84:	2b04      	cmp	r3, #4
 800fc86:	d101      	bne.n	800fc8c <find_volume+0x184>
 800fc88:	2301      	movs	r3, #1
 800fc8a:	e181      	b.n	800ff90 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fc8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc90:	2b01      	cmp	r3, #1
 800fc92:	d901      	bls.n	800fc98 <find_volume+0x190>
 800fc94:	230d      	movs	r3, #13
 800fc96:	e17b      	b.n	800ff90 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9a:	3334      	adds	r3, #52	; 0x34
 800fc9c:	330b      	adds	r3, #11
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7fd ff52 	bl	800db48 <ld_word>
 800fca4:	4603      	mov	r3, r0
 800fca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fcaa:	d001      	beq.n	800fcb0 <find_volume+0x1a8>
 800fcac:	230d      	movs	r3, #13
 800fcae:	e16f      	b.n	800ff90 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb2:	3334      	adds	r3, #52	; 0x34
 800fcb4:	3316      	adds	r3, #22
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7fd ff46 	bl	800db48 <ld_word>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fcc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d106      	bne.n	800fcd4 <find_volume+0x1cc>
 800fcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc8:	3334      	adds	r3, #52	; 0x34
 800fcca:	3324      	adds	r3, #36	; 0x24
 800fccc:	4618      	mov	r0, r3
 800fcce:	f7fd ff53 	bl	800db78 <ld_dword>
 800fcd2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fcd8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcdc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800fce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce6:	789b      	ldrb	r3, [r3, #2]
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d005      	beq.n	800fcf8 <find_volume+0x1f0>
 800fcec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcee:	789b      	ldrb	r3, [r3, #2]
 800fcf0:	2b02      	cmp	r3, #2
 800fcf2:	d001      	beq.n	800fcf8 <find_volume+0x1f0>
 800fcf4:	230d      	movs	r3, #13
 800fcf6:	e14b      	b.n	800ff90 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fcf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfa:	789b      	ldrb	r3, [r3, #2]
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd00:	fb02 f303 	mul.w	r3, r2, r3
 800fd04:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fd0c:	b29a      	uxth	r2, r3
 800fd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd10:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd14:	895b      	ldrh	r3, [r3, #10]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d008      	beq.n	800fd2c <find_volume+0x224>
 800fd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1c:	895b      	ldrh	r3, [r3, #10]
 800fd1e:	461a      	mov	r2, r3
 800fd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd22:	895b      	ldrh	r3, [r3, #10]
 800fd24:	3b01      	subs	r3, #1
 800fd26:	4013      	ands	r3, r2
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d001      	beq.n	800fd30 <find_volume+0x228>
 800fd2c:	230d      	movs	r3, #13
 800fd2e:	e12f      	b.n	800ff90 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd32:	3334      	adds	r3, #52	; 0x34
 800fd34:	3311      	adds	r3, #17
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7fd ff06 	bl	800db48 <ld_word>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	461a      	mov	r2, r3
 800fd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd42:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd46:	891b      	ldrh	r3, [r3, #8]
 800fd48:	f003 030f 	and.w	r3, r3, #15
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d001      	beq.n	800fd56 <find_volume+0x24e>
 800fd52:	230d      	movs	r3, #13
 800fd54:	e11c      	b.n	800ff90 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd58:	3334      	adds	r3, #52	; 0x34
 800fd5a:	3313      	adds	r3, #19
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7fd fef3 	bl	800db48 <ld_word>
 800fd62:	4603      	mov	r3, r0
 800fd64:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fd66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d106      	bne.n	800fd7a <find_volume+0x272>
 800fd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd6e:	3334      	adds	r3, #52	; 0x34
 800fd70:	3320      	adds	r3, #32
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7fd ff00 	bl	800db78 <ld_dword>
 800fd78:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd7c:	3334      	adds	r3, #52	; 0x34
 800fd7e:	330e      	adds	r3, #14
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7fd fee1 	bl	800db48 <ld_word>
 800fd86:	4603      	mov	r3, r0
 800fd88:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fd8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d101      	bne.n	800fd94 <find_volume+0x28c>
 800fd90:	230d      	movs	r3, #13
 800fd92:	e0fd      	b.n	800ff90 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fd94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fd96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd98:	4413      	add	r3, r2
 800fd9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd9c:	8912      	ldrh	r2, [r2, #8]
 800fd9e:	0912      	lsrs	r2, r2, #4
 800fda0:	b292      	uxth	r2, r2
 800fda2:	4413      	add	r3, r2
 800fda4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fda6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d204      	bcs.n	800fdb8 <find_volume+0x2b0>
 800fdae:	230d      	movs	r3, #13
 800fdb0:	e0ee      	b.n	800ff90 <find_volume+0x488>
 800fdb2:	bf00      	nop
 800fdb4:	200020b8 	.word	0x200020b8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fdb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdbc:	1ad3      	subs	r3, r2, r3
 800fdbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdc0:	8952      	ldrh	r2, [r2, #10]
 800fdc2:	fbb3 f3f2 	udiv	r3, r3, r2
 800fdc6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d101      	bne.n	800fdd2 <find_volume+0x2ca>
 800fdce:	230d      	movs	r3, #13
 800fdd0:	e0de      	b.n	800ff90 <find_volume+0x488>
		fmt = FS_FAT32;
 800fdd2:	2303      	movs	r3, #3
 800fdd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdda:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fdde:	4293      	cmp	r3, r2
 800fde0:	d802      	bhi.n	800fde8 <find_volume+0x2e0>
 800fde2:	2302      	movs	r3, #2
 800fde4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdea:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d802      	bhi.n	800fdf8 <find_volume+0x2f0>
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfa:	1c9a      	adds	r2, r3, #2
 800fdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdfe:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800fe00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe04:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fe06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fe08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe0a:	441a      	add	r2, r3
 800fe0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800fe10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe14:	441a      	add	r2, r3
 800fe16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe18:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800fe1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe1e:	2b03      	cmp	r3, #3
 800fe20:	d11e      	bne.n	800fe60 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fe22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe24:	3334      	adds	r3, #52	; 0x34
 800fe26:	332a      	adds	r3, #42	; 0x2a
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7fd fe8d 	bl	800db48 <ld_word>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d001      	beq.n	800fe38 <find_volume+0x330>
 800fe34:	230d      	movs	r3, #13
 800fe36:	e0ab      	b.n	800ff90 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fe38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe3a:	891b      	ldrh	r3, [r3, #8]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d001      	beq.n	800fe44 <find_volume+0x33c>
 800fe40:	230d      	movs	r3, #13
 800fe42:	e0a5      	b.n	800ff90 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fe44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe46:	3334      	adds	r3, #52	; 0x34
 800fe48:	332c      	adds	r3, #44	; 0x2c
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7fd fe94 	bl	800db78 <ld_dword>
 800fe50:	4602      	mov	r2, r0
 800fe52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe54:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fe56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe58:	699b      	ldr	r3, [r3, #24]
 800fe5a:	009b      	lsls	r3, r3, #2
 800fe5c:	647b      	str	r3, [r7, #68]	; 0x44
 800fe5e:	e01f      	b.n	800fea0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fe60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe62:	891b      	ldrh	r3, [r3, #8]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d101      	bne.n	800fe6c <find_volume+0x364>
 800fe68:	230d      	movs	r3, #13
 800fe6a:	e091      	b.n	800ff90 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fe6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe72:	441a      	add	r2, r3
 800fe74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe76:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fe78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe7c:	2b02      	cmp	r3, #2
 800fe7e:	d103      	bne.n	800fe88 <find_volume+0x380>
 800fe80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe82:	699b      	ldr	r3, [r3, #24]
 800fe84:	005b      	lsls	r3, r3, #1
 800fe86:	e00a      	b.n	800fe9e <find_volume+0x396>
 800fe88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe8a:	699a      	ldr	r2, [r3, #24]
 800fe8c:	4613      	mov	r3, r2
 800fe8e:	005b      	lsls	r3, r3, #1
 800fe90:	4413      	add	r3, r2
 800fe92:	085a      	lsrs	r2, r3, #1
 800fe94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe96:	699b      	ldr	r3, [r3, #24]
 800fe98:	f003 0301 	and.w	r3, r3, #1
 800fe9c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fe9e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea2:	69da      	ldr	r2, [r3, #28]
 800fea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fea6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800feaa:	0a5b      	lsrs	r3, r3, #9
 800feac:	429a      	cmp	r2, r3
 800feae:	d201      	bcs.n	800feb4 <find_volume+0x3ac>
 800feb0:	230d      	movs	r3, #13
 800feb2:	e06d      	b.n	800ff90 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800feb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb6:	f04f 32ff 	mov.w	r2, #4294967295
 800feba:	615a      	str	r2, [r3, #20]
 800febc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800febe:	695a      	ldr	r2, [r3, #20]
 800fec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800fec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec6:	2280      	movs	r2, #128	; 0x80
 800fec8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800feca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fece:	2b03      	cmp	r3, #3
 800fed0:	d149      	bne.n	800ff66 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed4:	3334      	adds	r3, #52	; 0x34
 800fed6:	3330      	adds	r3, #48	; 0x30
 800fed8:	4618      	mov	r0, r3
 800feda:	f7fd fe35 	bl	800db48 <ld_word>
 800fede:	4603      	mov	r3, r0
 800fee0:	2b01      	cmp	r3, #1
 800fee2:	d140      	bne.n	800ff66 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fee6:	3301      	adds	r3, #1
 800fee8:	4619      	mov	r1, r3
 800feea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800feec:	f7fe f8dc 	bl	800e0a8 <move_window>
 800fef0:	4603      	mov	r3, r0
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d137      	bne.n	800ff66 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800fef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef8:	2200      	movs	r2, #0
 800fefa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefe:	3334      	adds	r3, #52	; 0x34
 800ff00:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7fd fe1f 	bl	800db48 <ld_word>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d127      	bne.n	800ff66 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ff16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff18:	3334      	adds	r3, #52	; 0x34
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7fd fe2c 	bl	800db78 <ld_dword>
 800ff20:	4603      	mov	r3, r0
 800ff22:	4a1d      	ldr	r2, [pc, #116]	; (800ff98 <find_volume+0x490>)
 800ff24:	4293      	cmp	r3, r2
 800ff26:	d11e      	bne.n	800ff66 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ff28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2a:	3334      	adds	r3, #52	; 0x34
 800ff2c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7fd fe21 	bl	800db78 <ld_dword>
 800ff36:	4603      	mov	r3, r0
 800ff38:	4a18      	ldr	r2, [pc, #96]	; (800ff9c <find_volume+0x494>)
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	d113      	bne.n	800ff66 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ff3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff40:	3334      	adds	r3, #52	; 0x34
 800ff42:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7fd fe16 	bl	800db78 <ld_dword>
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff50:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ff52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff54:	3334      	adds	r3, #52	; 0x34
 800ff56:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f7fd fe0c 	bl	800db78 <ld_dword>
 800ff60:	4602      	mov	r2, r0
 800ff62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff64:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ff66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff68:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ff6c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ff6e:	4b0c      	ldr	r3, [pc, #48]	; (800ffa0 <find_volume+0x498>)
 800ff70:	881b      	ldrh	r3, [r3, #0]
 800ff72:	3301      	adds	r3, #1
 800ff74:	b29a      	uxth	r2, r3
 800ff76:	4b0a      	ldr	r3, [pc, #40]	; (800ffa0 <find_volume+0x498>)
 800ff78:	801a      	strh	r2, [r3, #0]
 800ff7a:	4b09      	ldr	r3, [pc, #36]	; (800ffa0 <find_volume+0x498>)
 800ff7c:	881a      	ldrh	r2, [r3, #0]
 800ff7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff80:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ff82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff84:	4a07      	ldr	r2, [pc, #28]	; (800ffa4 <find_volume+0x49c>)
 800ff86:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ff88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff8a:	f7fe f825 	bl	800dfd8 <clear_lock>
#endif
	return FR_OK;
 800ff8e:	2300      	movs	r3, #0
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	3758      	adds	r7, #88	; 0x58
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}
 800ff98:	41615252 	.word	0x41615252
 800ff9c:	61417272 	.word	0x61417272
 800ffa0:	200020bc 	.word	0x200020bc
 800ffa4:	200020e0 	.word	0x200020e0

0800ffa8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b084      	sub	sp, #16
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
 800ffb0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ffb2:	2309      	movs	r3, #9
 800ffb4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d01c      	beq.n	800fff6 <validate+0x4e>
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d018      	beq.n	800fff6 <validate+0x4e>
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	781b      	ldrb	r3, [r3, #0]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d013      	beq.n	800fff6 <validate+0x4e>
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	889a      	ldrh	r2, [r3, #4]
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	88db      	ldrh	r3, [r3, #6]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d10c      	bne.n	800fff6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	785b      	ldrb	r3, [r3, #1]
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f7fd fd12 	bl	800da0c <disk_status>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	f003 0301 	and.w	r3, r3, #1
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d101      	bne.n	800fff6 <validate+0x4e>
			res = FR_OK;
 800fff2:	2300      	movs	r3, #0
 800fff4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fff6:	7bfb      	ldrb	r3, [r7, #15]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d102      	bne.n	8010002 <validate+0x5a>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	e000      	b.n	8010004 <validate+0x5c>
 8010002:	2300      	movs	r3, #0
 8010004:	683a      	ldr	r2, [r7, #0]
 8010006:	6013      	str	r3, [r2, #0]
	return res;
 8010008:	7bfb      	ldrb	r3, [r7, #15]
}
 801000a:	4618      	mov	r0, r3
 801000c:	3710      	adds	r7, #16
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}
	...

08010014 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b088      	sub	sp, #32
 8010018:	af00      	add	r7, sp, #0
 801001a:	60f8      	str	r0, [r7, #12]
 801001c:	60b9      	str	r1, [r7, #8]
 801001e:	4613      	mov	r3, r2
 8010020:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010026:	f107 0310 	add.w	r3, r7, #16
 801002a:	4618      	mov	r0, r3
 801002c:	f7ff fcd1 	bl	800f9d2 <get_ldnumber>
 8010030:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010032:	69fb      	ldr	r3, [r7, #28]
 8010034:	2b00      	cmp	r3, #0
 8010036:	da01      	bge.n	801003c <f_mount+0x28>
 8010038:	230b      	movs	r3, #11
 801003a:	e02b      	b.n	8010094 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801003c:	4a17      	ldr	r2, [pc, #92]	; (801009c <f_mount+0x88>)
 801003e:	69fb      	ldr	r3, [r7, #28]
 8010040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010044:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010046:	69bb      	ldr	r3, [r7, #24]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d005      	beq.n	8010058 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801004c:	69b8      	ldr	r0, [r7, #24]
 801004e:	f7fd ffc3 	bl	800dfd8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010052:	69bb      	ldr	r3, [r7, #24]
 8010054:	2200      	movs	r2, #0
 8010056:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d002      	beq.n	8010064 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2200      	movs	r2, #0
 8010062:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010064:	68fa      	ldr	r2, [r7, #12]
 8010066:	490d      	ldr	r1, [pc, #52]	; (801009c <f_mount+0x88>)
 8010068:	69fb      	ldr	r3, [r7, #28]
 801006a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d002      	beq.n	801007a <f_mount+0x66>
 8010074:	79fb      	ldrb	r3, [r7, #7]
 8010076:	2b01      	cmp	r3, #1
 8010078:	d001      	beq.n	801007e <f_mount+0x6a>
 801007a:	2300      	movs	r3, #0
 801007c:	e00a      	b.n	8010094 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801007e:	f107 010c 	add.w	r1, r7, #12
 8010082:	f107 0308 	add.w	r3, r7, #8
 8010086:	2200      	movs	r2, #0
 8010088:	4618      	mov	r0, r3
 801008a:	f7ff fd3d 	bl	800fb08 <find_volume>
 801008e:	4603      	mov	r3, r0
 8010090:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010092:	7dfb      	ldrb	r3, [r7, #23]
}
 8010094:	4618      	mov	r0, r3
 8010096:	3720      	adds	r7, #32
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}
 801009c:	200020b8 	.word	0x200020b8

080100a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b09a      	sub	sp, #104	; 0x68
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	60f8      	str	r0, [r7, #12]
 80100a8:	60b9      	str	r1, [r7, #8]
 80100aa:	4613      	mov	r3, r2
 80100ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d101      	bne.n	80100b8 <f_open+0x18>
 80100b4:	2309      	movs	r3, #9
 80100b6:	e1ad      	b.n	8010414 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80100b8:	79fb      	ldrb	r3, [r7, #7]
 80100ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80100c0:	79fa      	ldrb	r2, [r7, #7]
 80100c2:	f107 0114 	add.w	r1, r7, #20
 80100c6:	f107 0308 	add.w	r3, r7, #8
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7ff fd1c 	bl	800fb08 <find_volume>
 80100d0:	4603      	mov	r3, r0
 80100d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80100d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80100da:	2b00      	cmp	r3, #0
 80100dc:	f040 8191 	bne.w	8010402 <f_open+0x362>
		dj.obj.fs = fs;
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80100e4:	68ba      	ldr	r2, [r7, #8]
 80100e6:	f107 0318 	add.w	r3, r7, #24
 80100ea:	4611      	mov	r1, r2
 80100ec:	4618      	mov	r0, r3
 80100ee:	f7ff fbff 	bl	800f8f0 <follow_path>
 80100f2:	4603      	mov	r3, r0
 80100f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80100f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d11a      	bne.n	8010136 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010100:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010104:	b25b      	sxtb	r3, r3
 8010106:	2b00      	cmp	r3, #0
 8010108:	da03      	bge.n	8010112 <f_open+0x72>
				res = FR_INVALID_NAME;
 801010a:	2306      	movs	r3, #6
 801010c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010110:	e011      	b.n	8010136 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010112:	79fb      	ldrb	r3, [r7, #7]
 8010114:	f023 0301 	bic.w	r3, r3, #1
 8010118:	2b00      	cmp	r3, #0
 801011a:	bf14      	ite	ne
 801011c:	2301      	movne	r3, #1
 801011e:	2300      	moveq	r3, #0
 8010120:	b2db      	uxtb	r3, r3
 8010122:	461a      	mov	r2, r3
 8010124:	f107 0318 	add.w	r3, r7, #24
 8010128:	4611      	mov	r1, r2
 801012a:	4618      	mov	r0, r3
 801012c:	f7fd fe0c 	bl	800dd48 <chk_lock>
 8010130:	4603      	mov	r3, r0
 8010132:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010136:	79fb      	ldrb	r3, [r7, #7]
 8010138:	f003 031c 	and.w	r3, r3, #28
 801013c:	2b00      	cmp	r3, #0
 801013e:	d07f      	beq.n	8010240 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010140:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010144:	2b00      	cmp	r3, #0
 8010146:	d017      	beq.n	8010178 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010148:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801014c:	2b04      	cmp	r3, #4
 801014e:	d10e      	bne.n	801016e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010150:	f7fd fe56 	bl	800de00 <enq_lock>
 8010154:	4603      	mov	r3, r0
 8010156:	2b00      	cmp	r3, #0
 8010158:	d006      	beq.n	8010168 <f_open+0xc8>
 801015a:	f107 0318 	add.w	r3, r7, #24
 801015e:	4618      	mov	r0, r3
 8010160:	f7ff f838 	bl	800f1d4 <dir_register>
 8010164:	4603      	mov	r3, r0
 8010166:	e000      	b.n	801016a <f_open+0xca>
 8010168:	2312      	movs	r3, #18
 801016a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801016e:	79fb      	ldrb	r3, [r7, #7]
 8010170:	f043 0308 	orr.w	r3, r3, #8
 8010174:	71fb      	strb	r3, [r7, #7]
 8010176:	e010      	b.n	801019a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010178:	7fbb      	ldrb	r3, [r7, #30]
 801017a:	f003 0311 	and.w	r3, r3, #17
 801017e:	2b00      	cmp	r3, #0
 8010180:	d003      	beq.n	801018a <f_open+0xea>
					res = FR_DENIED;
 8010182:	2307      	movs	r3, #7
 8010184:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010188:	e007      	b.n	801019a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801018a:	79fb      	ldrb	r3, [r7, #7]
 801018c:	f003 0304 	and.w	r3, r3, #4
 8010190:	2b00      	cmp	r3, #0
 8010192:	d002      	beq.n	801019a <f_open+0xfa>
 8010194:	2308      	movs	r3, #8
 8010196:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801019a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d168      	bne.n	8010274 <f_open+0x1d4>
 80101a2:	79fb      	ldrb	r3, [r7, #7]
 80101a4:	f003 0308 	and.w	r3, r3, #8
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d063      	beq.n	8010274 <f_open+0x1d4>
				dw = GET_FATTIME();
 80101ac:	f7fa fb1e 	bl	800a7ec <get_fattime>
 80101b0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80101b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b4:	330e      	adds	r3, #14
 80101b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7fd fd1b 	bl	800dbf4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80101be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c0:	3316      	adds	r3, #22
 80101c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80101c4:	4618      	mov	r0, r3
 80101c6:	f7fd fd15 	bl	800dbf4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80101ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101cc:	330b      	adds	r3, #11
 80101ce:	2220      	movs	r2, #32
 80101d0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80101d6:	4611      	mov	r1, r2
 80101d8:	4618      	mov	r0, r3
 80101da:	f7fe fc6a 	bl	800eab2 <ld_clust>
 80101de:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80101e0:	697b      	ldr	r3, [r7, #20]
 80101e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80101e4:	2200      	movs	r2, #0
 80101e6:	4618      	mov	r0, r3
 80101e8:	f7fe fc82 	bl	800eaf0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80101ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ee:	331c      	adds	r3, #28
 80101f0:	2100      	movs	r1, #0
 80101f2:	4618      	mov	r0, r3
 80101f4:	f7fd fcfe 	bl	800dbf4 <st_dword>
					fs->wflag = 1;
 80101f8:	697b      	ldr	r3, [r7, #20]
 80101fa:	2201      	movs	r2, #1
 80101fc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80101fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010200:	2b00      	cmp	r3, #0
 8010202:	d037      	beq.n	8010274 <f_open+0x1d4>
						dw = fs->winsect;
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010208:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801020a:	f107 0318 	add.w	r3, r7, #24
 801020e:	2200      	movs	r2, #0
 8010210:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010212:	4618      	mov	r0, r3
 8010214:	f7fe f995 	bl	800e542 <remove_chain>
 8010218:	4603      	mov	r3, r0
 801021a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801021e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010222:	2b00      	cmp	r3, #0
 8010224:	d126      	bne.n	8010274 <f_open+0x1d4>
							res = move_window(fs, dw);
 8010226:	697b      	ldr	r3, [r7, #20]
 8010228:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801022a:	4618      	mov	r0, r3
 801022c:	f7fd ff3c 	bl	800e0a8 <move_window>
 8010230:	4603      	mov	r3, r0
 8010232:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801023a:	3a01      	subs	r2, #1
 801023c:	611a      	str	r2, [r3, #16]
 801023e:	e019      	b.n	8010274 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010240:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010244:	2b00      	cmp	r3, #0
 8010246:	d115      	bne.n	8010274 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010248:	7fbb      	ldrb	r3, [r7, #30]
 801024a:	f003 0310 	and.w	r3, r3, #16
 801024e:	2b00      	cmp	r3, #0
 8010250:	d003      	beq.n	801025a <f_open+0x1ba>
					res = FR_NO_FILE;
 8010252:	2304      	movs	r3, #4
 8010254:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010258:	e00c      	b.n	8010274 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801025a:	79fb      	ldrb	r3, [r7, #7]
 801025c:	f003 0302 	and.w	r3, r3, #2
 8010260:	2b00      	cmp	r3, #0
 8010262:	d007      	beq.n	8010274 <f_open+0x1d4>
 8010264:	7fbb      	ldrb	r3, [r7, #30]
 8010266:	f003 0301 	and.w	r3, r3, #1
 801026a:	2b00      	cmp	r3, #0
 801026c:	d002      	beq.n	8010274 <f_open+0x1d4>
						res = FR_DENIED;
 801026e:	2307      	movs	r3, #7
 8010270:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8010274:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010278:	2b00      	cmp	r3, #0
 801027a:	d128      	bne.n	80102ce <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801027c:	79fb      	ldrb	r3, [r7, #7]
 801027e:	f003 0308 	and.w	r3, r3, #8
 8010282:	2b00      	cmp	r3, #0
 8010284:	d003      	beq.n	801028e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010286:	79fb      	ldrb	r3, [r7, #7]
 8010288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801028c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010296:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801029c:	79fb      	ldrb	r3, [r7, #7]
 801029e:	f023 0301 	bic.w	r3, r3, #1
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	bf14      	ite	ne
 80102a6:	2301      	movne	r3, #1
 80102a8:	2300      	moveq	r3, #0
 80102aa:	b2db      	uxtb	r3, r3
 80102ac:	461a      	mov	r2, r3
 80102ae:	f107 0318 	add.w	r3, r7, #24
 80102b2:	4611      	mov	r1, r2
 80102b4:	4618      	mov	r0, r3
 80102b6:	f7fd fdc5 	bl	800de44 <inc_lock>
 80102ba:	4602      	mov	r2, r0
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	691b      	ldr	r3, [r3, #16]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d102      	bne.n	80102ce <f_open+0x22e>
 80102c8:	2302      	movs	r3, #2
 80102ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80102ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	f040 8095 	bne.w	8010402 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102dc:	4611      	mov	r1, r2
 80102de:	4618      	mov	r0, r3
 80102e0:	f7fe fbe7 	bl	800eab2 <ld_clust>
 80102e4:	4602      	mov	r2, r0
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80102ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ec:	331c      	adds	r3, #28
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7fd fc42 	bl	800db78 <ld_dword>
 80102f4:	4602      	mov	r2, r0
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	2200      	movs	r2, #0
 80102fe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010300:	697a      	ldr	r2, [r7, #20]
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	88da      	ldrh	r2, [r3, #6]
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	79fa      	ldrb	r2, [r7, #7]
 8010312:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	2200      	movs	r2, #0
 8010318:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	2200      	movs	r2, #0
 801031e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	2200      	movs	r2, #0
 8010324:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	3330      	adds	r3, #48	; 0x30
 801032a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801032e:	2100      	movs	r1, #0
 8010330:	4618      	mov	r0, r3
 8010332:	f7fd fcac 	bl	800dc8e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010336:	79fb      	ldrb	r3, [r7, #7]
 8010338:	f003 0320 	and.w	r3, r3, #32
 801033c:	2b00      	cmp	r3, #0
 801033e:	d060      	beq.n	8010402 <f_open+0x362>
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	68db      	ldr	r3, [r3, #12]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d05c      	beq.n	8010402 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	68da      	ldr	r2, [r3, #12]
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	895b      	ldrh	r3, [r3, #10]
 8010354:	025b      	lsls	r3, r3, #9
 8010356:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	689b      	ldr	r3, [r3, #8]
 801035c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	68db      	ldr	r3, [r3, #12]
 8010362:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010364:	e016      	b.n	8010394 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801036a:	4618      	mov	r0, r3
 801036c:	f7fd ff57 	bl	800e21e <get_fat>
 8010370:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8010372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010374:	2b01      	cmp	r3, #1
 8010376:	d802      	bhi.n	801037e <f_open+0x2de>
 8010378:	2302      	movs	r3, #2
 801037a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801037e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010384:	d102      	bne.n	801038c <f_open+0x2ec>
 8010386:	2301      	movs	r3, #1
 8010388:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801038c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801038e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010390:	1ad3      	subs	r3, r2, r3
 8010392:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010394:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010398:	2b00      	cmp	r3, #0
 801039a:	d103      	bne.n	80103a4 <f_open+0x304>
 801039c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801039e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103a0:	429a      	cmp	r2, r3
 80103a2:	d8e0      	bhi.n	8010366 <f_open+0x2c6>
				}
				fp->clust = clst;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80103a8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80103aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d127      	bne.n	8010402 <f_open+0x362>
 80103b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d022      	beq.n	8010402 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80103bc:	697b      	ldr	r3, [r7, #20]
 80103be:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7fd ff0d 	bl	800e1e0 <clust2sect>
 80103c6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80103c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d103      	bne.n	80103d6 <f_open+0x336>
						res = FR_INT_ERR;
 80103ce:	2302      	movs	r3, #2
 80103d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80103d4:	e015      	b.n	8010402 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80103d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103d8:	0a5a      	lsrs	r2, r3, #9
 80103da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103dc:	441a      	add	r2, r3
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80103e2:	697b      	ldr	r3, [r7, #20]
 80103e4:	7858      	ldrb	r0, [r3, #1]
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	6a1a      	ldr	r2, [r3, #32]
 80103f0:	2301      	movs	r3, #1
 80103f2:	f7fd fb4b 	bl	800da8c <disk_read>
 80103f6:	4603      	mov	r3, r0
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d002      	beq.n	8010402 <f_open+0x362>
 80103fc:	2301      	movs	r3, #1
 80103fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010402:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010406:	2b00      	cmp	r3, #0
 8010408:	d002      	beq.n	8010410 <f_open+0x370>
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	2200      	movs	r2, #0
 801040e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010410:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010414:	4618      	mov	r0, r3
 8010416:	3768      	adds	r7, #104	; 0x68
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b08e      	sub	sp, #56	; 0x38
 8010420:	af00      	add	r7, sp, #0
 8010422:	60f8      	str	r0, [r7, #12]
 8010424:	60b9      	str	r1, [r7, #8]
 8010426:	607a      	str	r2, [r7, #4]
 8010428:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	2200      	movs	r2, #0
 8010432:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	f107 0214 	add.w	r2, r7, #20
 801043a:	4611      	mov	r1, r2
 801043c:	4618      	mov	r0, r3
 801043e:	f7ff fdb3 	bl	800ffa8 <validate>
 8010442:	4603      	mov	r3, r0
 8010444:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010448:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801044c:	2b00      	cmp	r3, #0
 801044e:	d107      	bne.n	8010460 <f_read+0x44>
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	7d5b      	ldrb	r3, [r3, #21]
 8010454:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010458:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801045c:	2b00      	cmp	r3, #0
 801045e:	d002      	beq.n	8010466 <f_read+0x4a>
 8010460:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010464:	e115      	b.n	8010692 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	7d1b      	ldrb	r3, [r3, #20]
 801046a:	f003 0301 	and.w	r3, r3, #1
 801046e:	2b00      	cmp	r3, #0
 8010470:	d101      	bne.n	8010476 <f_read+0x5a>
 8010472:	2307      	movs	r3, #7
 8010474:	e10d      	b.n	8010692 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	68da      	ldr	r2, [r3, #12]
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	699b      	ldr	r3, [r3, #24]
 801047e:	1ad3      	subs	r3, r2, r3
 8010480:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010482:	687a      	ldr	r2, [r7, #4]
 8010484:	6a3b      	ldr	r3, [r7, #32]
 8010486:	429a      	cmp	r2, r3
 8010488:	f240 80fe 	bls.w	8010688 <f_read+0x26c>
 801048c:	6a3b      	ldr	r3, [r7, #32]
 801048e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010490:	e0fa      	b.n	8010688 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	699b      	ldr	r3, [r3, #24]
 8010496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801049a:	2b00      	cmp	r3, #0
 801049c:	f040 80c6 	bne.w	801062c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	699b      	ldr	r3, [r3, #24]
 80104a4:	0a5b      	lsrs	r3, r3, #9
 80104a6:	697a      	ldr	r2, [r7, #20]
 80104a8:	8952      	ldrh	r2, [r2, #10]
 80104aa:	3a01      	subs	r2, #1
 80104ac:	4013      	ands	r3, r2
 80104ae:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80104b0:	69fb      	ldr	r3, [r7, #28]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d12f      	bne.n	8010516 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	699b      	ldr	r3, [r3, #24]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d103      	bne.n	80104c6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	689b      	ldr	r3, [r3, #8]
 80104c2:	633b      	str	r3, [r7, #48]	; 0x30
 80104c4:	e013      	b.n	80104ee <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d007      	beq.n	80104de <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	699b      	ldr	r3, [r3, #24]
 80104d2:	4619      	mov	r1, r3
 80104d4:	68f8      	ldr	r0, [r7, #12]
 80104d6:	f7fe f931 	bl	800e73c <clmt_clust>
 80104da:	6338      	str	r0, [r7, #48]	; 0x30
 80104dc:	e007      	b.n	80104ee <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80104de:	68fa      	ldr	r2, [r7, #12]
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	69db      	ldr	r3, [r3, #28]
 80104e4:	4619      	mov	r1, r3
 80104e6:	4610      	mov	r0, r2
 80104e8:	f7fd fe99 	bl	800e21e <get_fat>
 80104ec:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80104ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f0:	2b01      	cmp	r3, #1
 80104f2:	d804      	bhi.n	80104fe <f_read+0xe2>
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	2202      	movs	r2, #2
 80104f8:	755a      	strb	r2, [r3, #21]
 80104fa:	2302      	movs	r3, #2
 80104fc:	e0c9      	b.n	8010692 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80104fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010504:	d104      	bne.n	8010510 <f_read+0xf4>
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	2201      	movs	r2, #1
 801050a:	755a      	strb	r2, [r3, #21]
 801050c:	2301      	movs	r3, #1
 801050e:	e0c0      	b.n	8010692 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010514:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010516:	697a      	ldr	r2, [r7, #20]
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	69db      	ldr	r3, [r3, #28]
 801051c:	4619      	mov	r1, r3
 801051e:	4610      	mov	r0, r2
 8010520:	f7fd fe5e 	bl	800e1e0 <clust2sect>
 8010524:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010526:	69bb      	ldr	r3, [r7, #24]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d104      	bne.n	8010536 <f_read+0x11a>
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	2202      	movs	r2, #2
 8010530:	755a      	strb	r2, [r3, #21]
 8010532:	2302      	movs	r3, #2
 8010534:	e0ad      	b.n	8010692 <f_read+0x276>
			sect += csect;
 8010536:	69ba      	ldr	r2, [r7, #24]
 8010538:	69fb      	ldr	r3, [r7, #28]
 801053a:	4413      	add	r3, r2
 801053c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	0a5b      	lsrs	r3, r3, #9
 8010542:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010546:	2b00      	cmp	r3, #0
 8010548:	d039      	beq.n	80105be <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801054a:	69fa      	ldr	r2, [r7, #28]
 801054c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801054e:	4413      	add	r3, r2
 8010550:	697a      	ldr	r2, [r7, #20]
 8010552:	8952      	ldrh	r2, [r2, #10]
 8010554:	4293      	cmp	r3, r2
 8010556:	d905      	bls.n	8010564 <f_read+0x148>
					cc = fs->csize - csect;
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	895b      	ldrh	r3, [r3, #10]
 801055c:	461a      	mov	r2, r3
 801055e:	69fb      	ldr	r3, [r7, #28]
 8010560:	1ad3      	subs	r3, r2, r3
 8010562:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010564:	697b      	ldr	r3, [r7, #20]
 8010566:	7858      	ldrb	r0, [r3, #1]
 8010568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801056a:	69ba      	ldr	r2, [r7, #24]
 801056c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801056e:	f7fd fa8d 	bl	800da8c <disk_read>
 8010572:	4603      	mov	r3, r0
 8010574:	2b00      	cmp	r3, #0
 8010576:	d004      	beq.n	8010582 <f_read+0x166>
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	2201      	movs	r2, #1
 801057c:	755a      	strb	r2, [r3, #21]
 801057e:	2301      	movs	r3, #1
 8010580:	e087      	b.n	8010692 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	7d1b      	ldrb	r3, [r3, #20]
 8010586:	b25b      	sxtb	r3, r3
 8010588:	2b00      	cmp	r3, #0
 801058a:	da14      	bge.n	80105b6 <f_read+0x19a>
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	6a1a      	ldr	r2, [r3, #32]
 8010590:	69bb      	ldr	r3, [r7, #24]
 8010592:	1ad3      	subs	r3, r2, r3
 8010594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010596:	429a      	cmp	r2, r3
 8010598:	d90d      	bls.n	80105b6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	6a1a      	ldr	r2, [r3, #32]
 801059e:	69bb      	ldr	r3, [r7, #24]
 80105a0:	1ad3      	subs	r3, r2, r3
 80105a2:	025b      	lsls	r3, r3, #9
 80105a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105a6:	18d0      	adds	r0, r2, r3
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	3330      	adds	r3, #48	; 0x30
 80105ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80105b0:	4619      	mov	r1, r3
 80105b2:	f7fd fb4b 	bl	800dc4c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80105b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b8:	025b      	lsls	r3, r3, #9
 80105ba:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80105bc:	e050      	b.n	8010660 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	6a1b      	ldr	r3, [r3, #32]
 80105c2:	69ba      	ldr	r2, [r7, #24]
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d02e      	beq.n	8010626 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	7d1b      	ldrb	r3, [r3, #20]
 80105cc:	b25b      	sxtb	r3, r3
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	da18      	bge.n	8010604 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	7858      	ldrb	r0, [r3, #1]
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	6a1a      	ldr	r2, [r3, #32]
 80105e0:	2301      	movs	r3, #1
 80105e2:	f7fd fa73 	bl	800dacc <disk_write>
 80105e6:	4603      	mov	r3, r0
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d004      	beq.n	80105f6 <f_read+0x1da>
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	2201      	movs	r2, #1
 80105f0:	755a      	strb	r2, [r3, #21]
 80105f2:	2301      	movs	r3, #1
 80105f4:	e04d      	b.n	8010692 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	7d1b      	ldrb	r3, [r3, #20]
 80105fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105fe:	b2da      	uxtb	r2, r3
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010604:	697b      	ldr	r3, [r7, #20]
 8010606:	7858      	ldrb	r0, [r3, #1]
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801060e:	2301      	movs	r3, #1
 8010610:	69ba      	ldr	r2, [r7, #24]
 8010612:	f7fd fa3b 	bl	800da8c <disk_read>
 8010616:	4603      	mov	r3, r0
 8010618:	2b00      	cmp	r3, #0
 801061a:	d004      	beq.n	8010626 <f_read+0x20a>
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	2201      	movs	r2, #1
 8010620:	755a      	strb	r2, [r3, #21]
 8010622:	2301      	movs	r3, #1
 8010624:	e035      	b.n	8010692 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	69ba      	ldr	r2, [r7, #24]
 801062a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	699b      	ldr	r3, [r3, #24]
 8010630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010634:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010638:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801063a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	429a      	cmp	r2, r3
 8010640:	d901      	bls.n	8010646 <f_read+0x22a>
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	699b      	ldr	r3, [r3, #24]
 8010650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010654:	4413      	add	r3, r2
 8010656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010658:	4619      	mov	r1, r3
 801065a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801065c:	f7fd faf6 	bl	800dc4c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010664:	4413      	add	r3, r2
 8010666:	627b      	str	r3, [r7, #36]	; 0x24
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	699a      	ldr	r2, [r3, #24]
 801066c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801066e:	441a      	add	r2, r3
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	619a      	str	r2, [r3, #24]
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	681a      	ldr	r2, [r3, #0]
 8010678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801067a:	441a      	add	r2, r3
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	601a      	str	r2, [r3, #0]
 8010680:	687a      	ldr	r2, [r7, #4]
 8010682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010684:	1ad3      	subs	r3, r2, r3
 8010686:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2b00      	cmp	r3, #0
 801068c:	f47f af01 	bne.w	8010492 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010690:	2300      	movs	r3, #0
}
 8010692:	4618      	mov	r0, r3
 8010694:	3738      	adds	r7, #56	; 0x38
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}

0801069a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801069a:	b580      	push	{r7, lr}
 801069c:	b086      	sub	sp, #24
 801069e:	af00      	add	r7, sp, #0
 80106a0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f107 0208 	add.w	r2, r7, #8
 80106a8:	4611      	mov	r1, r2
 80106aa:	4618      	mov	r0, r3
 80106ac:	f7ff fc7c 	bl	800ffa8 <validate>
 80106b0:	4603      	mov	r3, r0
 80106b2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80106b4:	7dfb      	ldrb	r3, [r7, #23]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d168      	bne.n	801078c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	7d1b      	ldrb	r3, [r3, #20]
 80106be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d062      	beq.n	801078c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	7d1b      	ldrb	r3, [r3, #20]
 80106ca:	b25b      	sxtb	r3, r3
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	da15      	bge.n	80106fc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80106d0:	68bb      	ldr	r3, [r7, #8]
 80106d2:	7858      	ldrb	r0, [r3, #1]
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6a1a      	ldr	r2, [r3, #32]
 80106de:	2301      	movs	r3, #1
 80106e0:	f7fd f9f4 	bl	800dacc <disk_write>
 80106e4:	4603      	mov	r3, r0
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d001      	beq.n	80106ee <f_sync+0x54>
 80106ea:	2301      	movs	r3, #1
 80106ec:	e04f      	b.n	801078e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	7d1b      	ldrb	r3, [r3, #20]
 80106f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106f6:	b2da      	uxtb	r2, r3
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80106fc:	f7fa f876 	bl	800a7ec <get_fattime>
 8010700:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010702:	68ba      	ldr	r2, [r7, #8]
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010708:	4619      	mov	r1, r3
 801070a:	4610      	mov	r0, r2
 801070c:	f7fd fccc 	bl	800e0a8 <move_window>
 8010710:	4603      	mov	r3, r0
 8010712:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010714:	7dfb      	ldrb	r3, [r7, #23]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d138      	bne.n	801078c <f_sync+0xf2>
					dir = fp->dir_ptr;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801071e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	330b      	adds	r3, #11
 8010724:	781a      	ldrb	r2, [r3, #0]
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	330b      	adds	r3, #11
 801072a:	f042 0220 	orr.w	r2, r2, #32
 801072e:	b2d2      	uxtb	r2, r2
 8010730:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	6818      	ldr	r0, [r3, #0]
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	689b      	ldr	r3, [r3, #8]
 801073a:	461a      	mov	r2, r3
 801073c:	68f9      	ldr	r1, [r7, #12]
 801073e:	f7fe f9d7 	bl	800eaf0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	f103 021c 	add.w	r2, r3, #28
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	68db      	ldr	r3, [r3, #12]
 801074c:	4619      	mov	r1, r3
 801074e:	4610      	mov	r0, r2
 8010750:	f7fd fa50 	bl	800dbf4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	3316      	adds	r3, #22
 8010758:	6939      	ldr	r1, [r7, #16]
 801075a:	4618      	mov	r0, r3
 801075c:	f7fd fa4a 	bl	800dbf4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	3312      	adds	r3, #18
 8010764:	2100      	movs	r1, #0
 8010766:	4618      	mov	r0, r3
 8010768:	f7fd fa29 	bl	800dbbe <st_word>
					fs->wflag = 1;
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	2201      	movs	r2, #1
 8010770:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	4618      	mov	r0, r3
 8010776:	f7fd fcc5 	bl	800e104 <sync_fs>
 801077a:	4603      	mov	r3, r0
 801077c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	7d1b      	ldrb	r3, [r3, #20]
 8010782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010786:	b2da      	uxtb	r2, r3
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801078c:	7dfb      	ldrb	r3, [r7, #23]
}
 801078e:	4618      	mov	r0, r3
 8010790:	3718      	adds	r7, #24
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}

08010796 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010796:	b580      	push	{r7, lr}
 8010798:	b084      	sub	sp, #16
 801079a:	af00      	add	r7, sp, #0
 801079c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f7ff ff7b 	bl	801069a <f_sync>
 80107a4:	4603      	mov	r3, r0
 80107a6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80107a8:	7bfb      	ldrb	r3, [r7, #15]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d118      	bne.n	80107e0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f107 0208 	add.w	r2, r7, #8
 80107b4:	4611      	mov	r1, r2
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7ff fbf6 	bl	800ffa8 <validate>
 80107bc:	4603      	mov	r3, r0
 80107be:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80107c0:	7bfb      	ldrb	r3, [r7, #15]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d10c      	bne.n	80107e0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	691b      	ldr	r3, [r3, #16]
 80107ca:	4618      	mov	r0, r3
 80107cc:	f7fd fbc8 	bl	800df60 <dec_lock>
 80107d0:	4603      	mov	r3, r0
 80107d2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80107d4:	7bfb      	ldrb	r3, [r7, #15]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d102      	bne.n	80107e0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2200      	movs	r2, #0
 80107de:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80107e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	3710      	adds	r7, #16
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}

080107ea <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80107ea:	b580      	push	{r7, lr}
 80107ec:	b090      	sub	sp, #64	; 0x40
 80107ee:	af00      	add	r7, sp, #0
 80107f0:	6078      	str	r0, [r7, #4]
 80107f2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f107 0208 	add.w	r2, r7, #8
 80107fa:	4611      	mov	r1, r2
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7ff fbd3 	bl	800ffa8 <validate>
 8010802:	4603      	mov	r3, r0
 8010804:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010808:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801080c:	2b00      	cmp	r3, #0
 801080e:	d103      	bne.n	8010818 <f_lseek+0x2e>
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	7d5b      	ldrb	r3, [r3, #21]
 8010814:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010818:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801081c:	2b00      	cmp	r3, #0
 801081e:	d002      	beq.n	8010826 <f_lseek+0x3c>
 8010820:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010824:	e1e6      	b.n	8010bf4 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801082a:	2b00      	cmp	r3, #0
 801082c:	f000 80d1 	beq.w	80109d2 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010836:	d15a      	bne.n	80108ee <f_lseek+0x104>
			tbl = fp->cltbl;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801083c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801083e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010840:	1d1a      	adds	r2, r3, #4
 8010842:	627a      	str	r2, [r7, #36]	; 0x24
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	617b      	str	r3, [r7, #20]
 8010848:	2302      	movs	r3, #2
 801084a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	689b      	ldr	r3, [r3, #8]
 8010850:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010854:	2b00      	cmp	r3, #0
 8010856:	d03a      	beq.n	80108ce <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801085a:	613b      	str	r3, [r7, #16]
 801085c:	2300      	movs	r3, #0
 801085e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010862:	3302      	adds	r3, #2
 8010864:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010868:	60fb      	str	r3, [r7, #12]
 801086a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801086c:	3301      	adds	r3, #1
 801086e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010874:	4618      	mov	r0, r3
 8010876:	f7fd fcd2 	bl	800e21e <get_fat>
 801087a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801087c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801087e:	2b01      	cmp	r3, #1
 8010880:	d804      	bhi.n	801088c <f_lseek+0xa2>
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2202      	movs	r2, #2
 8010886:	755a      	strb	r2, [r3, #21]
 8010888:	2302      	movs	r3, #2
 801088a:	e1b3      	b.n	8010bf4 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801088c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010892:	d104      	bne.n	801089e <f_lseek+0xb4>
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2201      	movs	r2, #1
 8010898:	755a      	strb	r2, [r3, #21]
 801089a:	2301      	movs	r3, #1
 801089c:	e1aa      	b.n	8010bf4 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	3301      	adds	r3, #1
 80108a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d0de      	beq.n	8010866 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80108a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	429a      	cmp	r2, r3
 80108ae:	d809      	bhi.n	80108c4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80108b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b2:	1d1a      	adds	r2, r3, #4
 80108b4:	627a      	str	r2, [r7, #36]	; 0x24
 80108b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108b8:	601a      	str	r2, [r3, #0]
 80108ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108bc:	1d1a      	adds	r2, r3, #4
 80108be:	627a      	str	r2, [r7, #36]	; 0x24
 80108c0:	693a      	ldr	r2, [r7, #16]
 80108c2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	699b      	ldr	r3, [r3, #24]
 80108c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d3c4      	bcc.n	8010858 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108d4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80108d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108d8:	697b      	ldr	r3, [r7, #20]
 80108da:	429a      	cmp	r2, r3
 80108dc:	d803      	bhi.n	80108e6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80108de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e0:	2200      	movs	r2, #0
 80108e2:	601a      	str	r2, [r3, #0]
 80108e4:	e184      	b.n	8010bf0 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80108e6:	2311      	movs	r3, #17
 80108e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80108ec:	e180      	b.n	8010bf0 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	68db      	ldr	r3, [r3, #12]
 80108f2:	683a      	ldr	r2, [r7, #0]
 80108f4:	429a      	cmp	r2, r3
 80108f6:	d902      	bls.n	80108fe <f_lseek+0x114>
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	68db      	ldr	r3, [r3, #12]
 80108fc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	683a      	ldr	r2, [r7, #0]
 8010902:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	2b00      	cmp	r3, #0
 8010908:	f000 8172 	beq.w	8010bf0 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	3b01      	subs	r3, #1
 8010910:	4619      	mov	r1, r3
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f7fd ff12 	bl	800e73c <clmt_clust>
 8010918:	4602      	mov	r2, r0
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801091e:	68ba      	ldr	r2, [r7, #8]
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	69db      	ldr	r3, [r3, #28]
 8010924:	4619      	mov	r1, r3
 8010926:	4610      	mov	r0, r2
 8010928:	f7fd fc5a 	bl	800e1e0 <clust2sect>
 801092c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801092e:	69bb      	ldr	r3, [r7, #24]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d104      	bne.n	801093e <f_lseek+0x154>
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2202      	movs	r2, #2
 8010938:	755a      	strb	r2, [r3, #21]
 801093a:	2302      	movs	r3, #2
 801093c:	e15a      	b.n	8010bf4 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	3b01      	subs	r3, #1
 8010942:	0a5b      	lsrs	r3, r3, #9
 8010944:	68ba      	ldr	r2, [r7, #8]
 8010946:	8952      	ldrh	r2, [r2, #10]
 8010948:	3a01      	subs	r2, #1
 801094a:	4013      	ands	r3, r2
 801094c:	69ba      	ldr	r2, [r7, #24]
 801094e:	4413      	add	r3, r2
 8010950:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	699b      	ldr	r3, [r3, #24]
 8010956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801095a:	2b00      	cmp	r3, #0
 801095c:	f000 8148 	beq.w	8010bf0 <f_lseek+0x406>
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6a1b      	ldr	r3, [r3, #32]
 8010964:	69ba      	ldr	r2, [r7, #24]
 8010966:	429a      	cmp	r2, r3
 8010968:	f000 8142 	beq.w	8010bf0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	7d1b      	ldrb	r3, [r3, #20]
 8010970:	b25b      	sxtb	r3, r3
 8010972:	2b00      	cmp	r3, #0
 8010974:	da18      	bge.n	80109a8 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	7858      	ldrb	r0, [r3, #1]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6a1a      	ldr	r2, [r3, #32]
 8010984:	2301      	movs	r3, #1
 8010986:	f7fd f8a1 	bl	800dacc <disk_write>
 801098a:	4603      	mov	r3, r0
 801098c:	2b00      	cmp	r3, #0
 801098e:	d004      	beq.n	801099a <f_lseek+0x1b0>
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2201      	movs	r2, #1
 8010994:	755a      	strb	r2, [r3, #21]
 8010996:	2301      	movs	r3, #1
 8010998:	e12c      	b.n	8010bf4 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	7d1b      	ldrb	r3, [r3, #20]
 801099e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109a2:	b2da      	uxtb	r2, r3
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	7858      	ldrb	r0, [r3, #1]
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80109b2:	2301      	movs	r3, #1
 80109b4:	69ba      	ldr	r2, [r7, #24]
 80109b6:	f7fd f869 	bl	800da8c <disk_read>
 80109ba:	4603      	mov	r3, r0
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d004      	beq.n	80109ca <f_lseek+0x1e0>
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2201      	movs	r2, #1
 80109c4:	755a      	strb	r2, [r3, #21]
 80109c6:	2301      	movs	r3, #1
 80109c8:	e114      	b.n	8010bf4 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	69ba      	ldr	r2, [r7, #24]
 80109ce:	621a      	str	r2, [r3, #32]
 80109d0:	e10e      	b.n	8010bf0 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	68db      	ldr	r3, [r3, #12]
 80109d6:	683a      	ldr	r2, [r7, #0]
 80109d8:	429a      	cmp	r2, r3
 80109da:	d908      	bls.n	80109ee <f_lseek+0x204>
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	7d1b      	ldrb	r3, [r3, #20]
 80109e0:	f003 0302 	and.w	r3, r3, #2
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d102      	bne.n	80109ee <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	68db      	ldr	r3, [r3, #12]
 80109ec:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	699b      	ldr	r3, [r3, #24]
 80109f2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80109f4:	2300      	movs	r3, #0
 80109f6:	637b      	str	r3, [r7, #52]	; 0x34
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80109fc:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	f000 80a7 	beq.w	8010b54 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	895b      	ldrh	r3, [r3, #10]
 8010a0a:	025b      	lsls	r3, r3, #9
 8010a0c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010a0e:	6a3b      	ldr	r3, [r7, #32]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d01b      	beq.n	8010a4c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	1e5a      	subs	r2, r3, #1
 8010a18:	69fb      	ldr	r3, [r7, #28]
 8010a1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8010a1e:	6a3b      	ldr	r3, [r7, #32]
 8010a20:	1e59      	subs	r1, r3, #1
 8010a22:	69fb      	ldr	r3, [r7, #28]
 8010a24:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010a28:	429a      	cmp	r2, r3
 8010a2a:	d30f      	bcc.n	8010a4c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010a2c:	6a3b      	ldr	r3, [r7, #32]
 8010a2e:	1e5a      	subs	r2, r3, #1
 8010a30:	69fb      	ldr	r3, [r7, #28]
 8010a32:	425b      	negs	r3, r3
 8010a34:	401a      	ands	r2, r3
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	699b      	ldr	r3, [r3, #24]
 8010a3e:	683a      	ldr	r2, [r7, #0]
 8010a40:	1ad3      	subs	r3, r2, r3
 8010a42:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	69db      	ldr	r3, [r3, #28]
 8010a48:	63bb      	str	r3, [r7, #56]	; 0x38
 8010a4a:	e022      	b.n	8010a92 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	689b      	ldr	r3, [r3, #8]
 8010a50:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d119      	bne.n	8010a8c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2100      	movs	r1, #0
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f7fd fdd5 	bl	800e60c <create_chain>
 8010a62:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a66:	2b01      	cmp	r3, #1
 8010a68:	d104      	bne.n	8010a74 <f_lseek+0x28a>
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2202      	movs	r2, #2
 8010a6e:	755a      	strb	r2, [r3, #21]
 8010a70:	2302      	movs	r3, #2
 8010a72:	e0bf      	b.n	8010bf4 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a7a:	d104      	bne.n	8010a86 <f_lseek+0x29c>
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2201      	movs	r2, #1
 8010a80:	755a      	strb	r2, [r3, #21]
 8010a82:	2301      	movs	r3, #1
 8010a84:	e0b6      	b.n	8010bf4 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a8a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a90:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d05d      	beq.n	8010b54 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8010a98:	e03a      	b.n	8010b10 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8010a9a:	683a      	ldr	r2, [r7, #0]
 8010a9c:	69fb      	ldr	r3, [r7, #28]
 8010a9e:	1ad3      	subs	r3, r2, r3
 8010aa0:	603b      	str	r3, [r7, #0]
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	699a      	ldr	r2, [r3, #24]
 8010aa6:	69fb      	ldr	r3, [r7, #28]
 8010aa8:	441a      	add	r2, r3
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	7d1b      	ldrb	r3, [r3, #20]
 8010ab2:	f003 0302 	and.w	r3, r3, #2
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d00b      	beq.n	8010ad2 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7fd fda4 	bl	800e60c <create_chain>
 8010ac4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d108      	bne.n	8010ade <f_lseek+0x2f4>
							ofs = 0; break;
 8010acc:	2300      	movs	r3, #0
 8010ace:	603b      	str	r3, [r7, #0]
 8010ad0:	e022      	b.n	8010b18 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7fd fba1 	bl	800e21e <get_fat>
 8010adc:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ae4:	d104      	bne.n	8010af0 <f_lseek+0x306>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	2201      	movs	r2, #1
 8010aea:	755a      	strb	r2, [r3, #21]
 8010aec:	2301      	movs	r3, #1
 8010aee:	e081      	b.n	8010bf4 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af2:	2b01      	cmp	r3, #1
 8010af4:	d904      	bls.n	8010b00 <f_lseek+0x316>
 8010af6:	68bb      	ldr	r3, [r7, #8]
 8010af8:	699b      	ldr	r3, [r3, #24]
 8010afa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010afc:	429a      	cmp	r2, r3
 8010afe:	d304      	bcc.n	8010b0a <f_lseek+0x320>
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2202      	movs	r2, #2
 8010b04:	755a      	strb	r2, [r3, #21]
 8010b06:	2302      	movs	r3, #2
 8010b08:	e074      	b.n	8010bf4 <f_lseek+0x40a>
					fp->clust = clst;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b0e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010b10:	683a      	ldr	r2, [r7, #0]
 8010b12:	69fb      	ldr	r3, [r7, #28]
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d8c0      	bhi.n	8010a9a <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	699a      	ldr	r2, [r3, #24]
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	441a      	add	r2, r3
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d012      	beq.n	8010b54 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010b2e:	68bb      	ldr	r3, [r7, #8]
 8010b30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7fd fb54 	bl	800e1e0 <clust2sect>
 8010b38:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d104      	bne.n	8010b4a <f_lseek+0x360>
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2202      	movs	r2, #2
 8010b44:	755a      	strb	r2, [r3, #21]
 8010b46:	2302      	movs	r3, #2
 8010b48:	e054      	b.n	8010bf4 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	0a5b      	lsrs	r3, r3, #9
 8010b4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b50:	4413      	add	r3, r2
 8010b52:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	699a      	ldr	r2, [r3, #24]
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	68db      	ldr	r3, [r3, #12]
 8010b5c:	429a      	cmp	r2, r3
 8010b5e:	d90a      	bls.n	8010b76 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	699a      	ldr	r2, [r3, #24]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	7d1b      	ldrb	r3, [r3, #20]
 8010b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b70:	b2da      	uxtb	r2, r3
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	699b      	ldr	r3, [r3, #24]
 8010b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d036      	beq.n	8010bf0 <f_lseek+0x406>
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	6a1b      	ldr	r3, [r3, #32]
 8010b86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	d031      	beq.n	8010bf0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	7d1b      	ldrb	r3, [r3, #20]
 8010b90:	b25b      	sxtb	r3, r3
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	da18      	bge.n	8010bc8 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	7858      	ldrb	r0, [r3, #1]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	6a1a      	ldr	r2, [r3, #32]
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	f7fc ff91 	bl	800dacc <disk_write>
 8010baa:	4603      	mov	r3, r0
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d004      	beq.n	8010bba <f_lseek+0x3d0>
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	755a      	strb	r2, [r3, #21]
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	e01c      	b.n	8010bf4 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	7d1b      	ldrb	r3, [r3, #20]
 8010bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bc2:	b2da      	uxtb	r2, r3
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010bc8:	68bb      	ldr	r3, [r7, #8]
 8010bca:	7858      	ldrb	r0, [r3, #1]
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010bd6:	f7fc ff59 	bl	800da8c <disk_read>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d004      	beq.n	8010bea <f_lseek+0x400>
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2201      	movs	r2, #1
 8010be4:	755a      	strb	r2, [r3, #21]
 8010be6:	2301      	movs	r3, #1
 8010be8:	e004      	b.n	8010bf4 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010bee:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010bf0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3740      	adds	r7, #64	; 0x40
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}

08010bfc <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b086      	sub	sp, #24
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d101      	bne.n	8010c10 <f_opendir+0x14>
 8010c0c:	2309      	movs	r3, #9
 8010c0e:	e064      	b.n	8010cda <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8010c14:	f107 010c 	add.w	r1, r7, #12
 8010c18:	463b      	mov	r3, r7
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7fe ff73 	bl	800fb08 <find_volume>
 8010c22:	4603      	mov	r3, r0
 8010c24:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010c26:	7dfb      	ldrb	r3, [r7, #23]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d14f      	bne.n	8010ccc <f_opendir+0xd0>
		obj->fs = fs;
 8010c2c:	68fa      	ldr	r2, [r7, #12]
 8010c2e:	693b      	ldr	r3, [r7, #16]
 8010c30:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	4619      	mov	r1, r3
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f7fe fe5a 	bl	800f8f0 <follow_path>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8010c40:	7dfb      	ldrb	r3, [r7, #23]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d13d      	bne.n	8010cc2 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010c4c:	b25b      	sxtb	r3, r3
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	db12      	blt.n	8010c78 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	799b      	ldrb	r3, [r3, #6]
 8010c56:	f003 0310 	and.w	r3, r3, #16
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d00a      	beq.n	8010c74 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8010c5e:	68fa      	ldr	r2, [r7, #12]
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6a1b      	ldr	r3, [r3, #32]
 8010c64:	4619      	mov	r1, r3
 8010c66:	4610      	mov	r0, r2
 8010c68:	f7fd ff23 	bl	800eab2 <ld_clust>
 8010c6c:	4602      	mov	r2, r0
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	609a      	str	r2, [r3, #8]
 8010c72:	e001      	b.n	8010c78 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8010c74:	2305      	movs	r3, #5
 8010c76:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8010c78:	7dfb      	ldrb	r3, [r7, #23]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d121      	bne.n	8010cc2 <f_opendir+0xc6>
				obj->id = fs->id;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	88da      	ldrh	r2, [r3, #6]
 8010c82:	693b      	ldr	r3, [r7, #16]
 8010c84:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8010c86:	2100      	movs	r1, #0
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f7fd fd8b 	bl	800e7a4 <dir_sdi>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8010c92:	7dfb      	ldrb	r3, [r7, #23]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d114      	bne.n	8010cc2 <f_opendir+0xc6>
					if (obj->sclust) {
 8010c98:	693b      	ldr	r3, [r7, #16]
 8010c9a:	689b      	ldr	r3, [r3, #8]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d00d      	beq.n	8010cbc <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8010ca0:	2100      	movs	r1, #0
 8010ca2:	6878      	ldr	r0, [r7, #4]
 8010ca4:	f7fd f8ce 	bl	800de44 <inc_lock>
 8010ca8:	4602      	mov	r2, r0
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	691b      	ldr	r3, [r3, #16]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d105      	bne.n	8010cc2 <f_opendir+0xc6>
 8010cb6:	2312      	movs	r3, #18
 8010cb8:	75fb      	strb	r3, [r7, #23]
 8010cba:	e002      	b.n	8010cc2 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8010cbc:	693b      	ldr	r3, [r7, #16]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010cc2:	7dfb      	ldrb	r3, [r7, #23]
 8010cc4:	2b04      	cmp	r3, #4
 8010cc6:	d101      	bne.n	8010ccc <f_opendir+0xd0>
 8010cc8:	2305      	movs	r3, #5
 8010cca:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8010ccc:	7dfb      	ldrb	r3, [r7, #23]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d002      	beq.n	8010cd8 <f_opendir+0xdc>
 8010cd2:	693b      	ldr	r3, [r7, #16]
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	3718      	adds	r7, #24
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}

08010ce2 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8010ce2:	b580      	push	{r7, lr}
 8010ce4:	b084      	sub	sp, #16
 8010ce6:	af00      	add	r7, sp, #0
 8010ce8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f107 0208 	add.w	r2, r7, #8
 8010cf0:	4611      	mov	r1, r2
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7ff f958 	bl	800ffa8 <validate>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010cfc:	7bfb      	ldrb	r3, [r7, #15]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d110      	bne.n	8010d24 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	691b      	ldr	r3, [r3, #16]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d006      	beq.n	8010d18 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	691b      	ldr	r3, [r3, #16]
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f7fd f926 	bl	800df60 <dec_lock>
 8010d14:	4603      	mov	r3, r0
 8010d16:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8010d18:	7bfb      	ldrb	r3, [r7, #15]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d102      	bne.n	8010d24 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2200      	movs	r2, #0
 8010d22:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8010d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3710      	adds	r7, #16
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}

08010d2e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010d2e:	b580      	push	{r7, lr}
 8010d30:	b084      	sub	sp, #16
 8010d32:	af00      	add	r7, sp, #0
 8010d34:	6078      	str	r0, [r7, #4]
 8010d36:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f107 0208 	add.w	r2, r7, #8
 8010d3e:	4611      	mov	r1, r2
 8010d40:	4618      	mov	r0, r3
 8010d42:	f7ff f931 	bl	800ffa8 <validate>
 8010d46:	4603      	mov	r3, r0
 8010d48:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010d4a:	7bfb      	ldrb	r3, [r7, #15]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d126      	bne.n	8010d9e <f_readdir+0x70>
		if (!fno) {
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d106      	bne.n	8010d64 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8010d56:	2100      	movs	r1, #0
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f7fd fd23 	bl	800e7a4 <dir_sdi>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	73fb      	strb	r3, [r7, #15]
 8010d62:	e01c      	b.n	8010d9e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8010d64:	2100      	movs	r1, #0
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f7fe f8cd 	bl	800ef06 <dir_read>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8010d70:	7bfb      	ldrb	r3, [r7, #15]
 8010d72:	2b04      	cmp	r3, #4
 8010d74:	d101      	bne.n	8010d7a <f_readdir+0x4c>
 8010d76:	2300      	movs	r3, #0
 8010d78:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8010d7a:	7bfb      	ldrb	r3, [r7, #15]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d10e      	bne.n	8010d9e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8010d80:	6839      	ldr	r1, [r7, #0]
 8010d82:	6878      	ldr	r0, [r7, #4]
 8010d84:	f7fe fb1e 	bl	800f3c4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8010d88:	2100      	movs	r1, #0
 8010d8a:	6878      	ldr	r0, [r7, #4]
 8010d8c:	f7fd fd85 	bl	800e89a <dir_next>
 8010d90:	4603      	mov	r3, r0
 8010d92:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8010d94:	7bfb      	ldrb	r3, [r7, #15]
 8010d96:	2b04      	cmp	r3, #4
 8010d98:	d101      	bne.n	8010d9e <f_readdir+0x70>
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8010d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010da0:	4618      	mov	r0, r3
 8010da2:	3710      	adds	r7, #16
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}

08010da8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010da8:	b480      	push	{r7}
 8010daa:	b087      	sub	sp, #28
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	60f8      	str	r0, [r7, #12]
 8010db0:	60b9      	str	r1, [r7, #8]
 8010db2:	4613      	mov	r3, r2
 8010db4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010db6:	2301      	movs	r3, #1
 8010db8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010dbe:	4b1f      	ldr	r3, [pc, #124]	; (8010e3c <FATFS_LinkDriverEx+0x94>)
 8010dc0:	7a5b      	ldrb	r3, [r3, #9]
 8010dc2:	b2db      	uxtb	r3, r3
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d131      	bne.n	8010e2c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010dc8:	4b1c      	ldr	r3, [pc, #112]	; (8010e3c <FATFS_LinkDriverEx+0x94>)
 8010dca:	7a5b      	ldrb	r3, [r3, #9]
 8010dcc:	b2db      	uxtb	r3, r3
 8010dce:	461a      	mov	r2, r3
 8010dd0:	4b1a      	ldr	r3, [pc, #104]	; (8010e3c <FATFS_LinkDriverEx+0x94>)
 8010dd2:	2100      	movs	r1, #0
 8010dd4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010dd6:	4b19      	ldr	r3, [pc, #100]	; (8010e3c <FATFS_LinkDriverEx+0x94>)
 8010dd8:	7a5b      	ldrb	r3, [r3, #9]
 8010dda:	b2db      	uxtb	r3, r3
 8010ddc:	4a17      	ldr	r2, [pc, #92]	; (8010e3c <FATFS_LinkDriverEx+0x94>)
 8010dde:	009b      	lsls	r3, r3, #2
 8010de0:	4413      	add	r3, r2
 8010de2:	68fa      	ldr	r2, [r7, #12]
 8010de4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010de6:	4b15      	ldr	r3, [pc, #84]	; (8010e3c <FATFS_LinkDriverEx+0x94>)
 8010de8:	7a5b      	ldrb	r3, [r3, #9]
 8010dea:	b2db      	uxtb	r3, r3
 8010dec:	461a      	mov	r2, r3
 8010dee:	4b13      	ldr	r3, [pc, #76]	; (8010e3c <FATFS_LinkDriverEx+0x94>)
 8010df0:	4413      	add	r3, r2
 8010df2:	79fa      	ldrb	r2, [r7, #7]
 8010df4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010df6:	4b11      	ldr	r3, [pc, #68]	; (8010e3c <FATFS_LinkDriverEx+0x94>)
 8010df8:	7a5b      	ldrb	r3, [r3, #9]
 8010dfa:	b2db      	uxtb	r3, r3
 8010dfc:	1c5a      	adds	r2, r3, #1
 8010dfe:	b2d1      	uxtb	r1, r2
 8010e00:	4a0e      	ldr	r2, [pc, #56]	; (8010e3c <FATFS_LinkDriverEx+0x94>)
 8010e02:	7251      	strb	r1, [r2, #9]
 8010e04:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010e06:	7dbb      	ldrb	r3, [r7, #22]
 8010e08:	3330      	adds	r3, #48	; 0x30
 8010e0a:	b2da      	uxtb	r2, r3
 8010e0c:	68bb      	ldr	r3, [r7, #8]
 8010e0e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	3301      	adds	r3, #1
 8010e14:	223a      	movs	r2, #58	; 0x3a
 8010e16:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	3302      	adds	r3, #2
 8010e1c:	222f      	movs	r2, #47	; 0x2f
 8010e1e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	3303      	adds	r3, #3
 8010e24:	2200      	movs	r2, #0
 8010e26:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	371c      	adds	r7, #28
 8010e32:	46bd      	mov	sp, r7
 8010e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e38:	4770      	bx	lr
 8010e3a:	bf00      	nop
 8010e3c:	200022e0 	.word	0x200022e0

08010e40 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b082      	sub	sp, #8
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	6839      	ldr	r1, [r7, #0]
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f7ff ffaa 	bl	8010da8 <FATFS_LinkDriverEx>
 8010e54:	4603      	mov	r3, r0
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3708      	adds	r7, #8
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}
	...

08010e60 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010e60:	b480      	push	{r7}
 8010e62:	b085      	sub	sp, #20
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	4603      	mov	r3, r0
 8010e68:	6039      	str	r1, [r7, #0]
 8010e6a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010e6c:	88fb      	ldrh	r3, [r7, #6]
 8010e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8010e70:	d802      	bhi.n	8010e78 <ff_convert+0x18>
		c = chr;
 8010e72:	88fb      	ldrh	r3, [r7, #6]
 8010e74:	81fb      	strh	r3, [r7, #14]
 8010e76:	e025      	b.n	8010ec4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d00b      	beq.n	8010e96 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010e7e:	88fb      	ldrh	r3, [r7, #6]
 8010e80:	2bff      	cmp	r3, #255	; 0xff
 8010e82:	d805      	bhi.n	8010e90 <ff_convert+0x30>
 8010e84:	88fb      	ldrh	r3, [r7, #6]
 8010e86:	3b80      	subs	r3, #128	; 0x80
 8010e88:	4a12      	ldr	r2, [pc, #72]	; (8010ed4 <ff_convert+0x74>)
 8010e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e8e:	e000      	b.n	8010e92 <ff_convert+0x32>
 8010e90:	2300      	movs	r3, #0
 8010e92:	81fb      	strh	r3, [r7, #14]
 8010e94:	e016      	b.n	8010ec4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010e96:	2300      	movs	r3, #0
 8010e98:	81fb      	strh	r3, [r7, #14]
 8010e9a:	e009      	b.n	8010eb0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010e9c:	89fb      	ldrh	r3, [r7, #14]
 8010e9e:	4a0d      	ldr	r2, [pc, #52]	; (8010ed4 <ff_convert+0x74>)
 8010ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ea4:	88fa      	ldrh	r2, [r7, #6]
 8010ea6:	429a      	cmp	r2, r3
 8010ea8:	d006      	beq.n	8010eb8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010eaa:	89fb      	ldrh	r3, [r7, #14]
 8010eac:	3301      	adds	r3, #1
 8010eae:	81fb      	strh	r3, [r7, #14]
 8010eb0:	89fb      	ldrh	r3, [r7, #14]
 8010eb2:	2b7f      	cmp	r3, #127	; 0x7f
 8010eb4:	d9f2      	bls.n	8010e9c <ff_convert+0x3c>
 8010eb6:	e000      	b.n	8010eba <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010eb8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010eba:	89fb      	ldrh	r3, [r7, #14]
 8010ebc:	3380      	adds	r3, #128	; 0x80
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	b2db      	uxtb	r3, r3
 8010ec2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010ec4:	89fb      	ldrh	r3, [r7, #14]
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	3714      	adds	r7, #20
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed0:	4770      	bx	lr
 8010ed2:	bf00      	nop
 8010ed4:	080130d0 	.word	0x080130d0

08010ed8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010ed8:	b480      	push	{r7}
 8010eda:	b087      	sub	sp, #28
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	4603      	mov	r3, r0
 8010ee0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010ee2:	88fb      	ldrh	r3, [r7, #6]
 8010ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ee8:	d201      	bcs.n	8010eee <ff_wtoupper+0x16>
 8010eea:	4b3e      	ldr	r3, [pc, #248]	; (8010fe4 <ff_wtoupper+0x10c>)
 8010eec:	e000      	b.n	8010ef0 <ff_wtoupper+0x18>
 8010eee:	4b3e      	ldr	r3, [pc, #248]	; (8010fe8 <ff_wtoupper+0x110>)
 8010ef0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	1c9a      	adds	r2, r3, #2
 8010ef6:	617a      	str	r2, [r7, #20]
 8010ef8:	881b      	ldrh	r3, [r3, #0]
 8010efa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010efc:	8a7b      	ldrh	r3, [r7, #18]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d068      	beq.n	8010fd4 <ff_wtoupper+0xfc>
 8010f02:	88fa      	ldrh	r2, [r7, #6]
 8010f04:	8a7b      	ldrh	r3, [r7, #18]
 8010f06:	429a      	cmp	r2, r3
 8010f08:	d364      	bcc.n	8010fd4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	1c9a      	adds	r2, r3, #2
 8010f0e:	617a      	str	r2, [r7, #20]
 8010f10:	881b      	ldrh	r3, [r3, #0]
 8010f12:	823b      	strh	r3, [r7, #16]
 8010f14:	8a3b      	ldrh	r3, [r7, #16]
 8010f16:	0a1b      	lsrs	r3, r3, #8
 8010f18:	81fb      	strh	r3, [r7, #14]
 8010f1a:	8a3b      	ldrh	r3, [r7, #16]
 8010f1c:	b2db      	uxtb	r3, r3
 8010f1e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010f20:	88fa      	ldrh	r2, [r7, #6]
 8010f22:	8a79      	ldrh	r1, [r7, #18]
 8010f24:	8a3b      	ldrh	r3, [r7, #16]
 8010f26:	440b      	add	r3, r1
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	da49      	bge.n	8010fc0 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010f2c:	89fb      	ldrh	r3, [r7, #14]
 8010f2e:	2b08      	cmp	r3, #8
 8010f30:	d84f      	bhi.n	8010fd2 <ff_wtoupper+0xfa>
 8010f32:	a201      	add	r2, pc, #4	; (adr r2, 8010f38 <ff_wtoupper+0x60>)
 8010f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f38:	08010f5d 	.word	0x08010f5d
 8010f3c:	08010f6f 	.word	0x08010f6f
 8010f40:	08010f85 	.word	0x08010f85
 8010f44:	08010f8d 	.word	0x08010f8d
 8010f48:	08010f95 	.word	0x08010f95
 8010f4c:	08010f9d 	.word	0x08010f9d
 8010f50:	08010fa5 	.word	0x08010fa5
 8010f54:	08010fad 	.word	0x08010fad
 8010f58:	08010fb5 	.word	0x08010fb5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010f5c:	88fa      	ldrh	r2, [r7, #6]
 8010f5e:	8a7b      	ldrh	r3, [r7, #18]
 8010f60:	1ad3      	subs	r3, r2, r3
 8010f62:	005b      	lsls	r3, r3, #1
 8010f64:	697a      	ldr	r2, [r7, #20]
 8010f66:	4413      	add	r3, r2
 8010f68:	881b      	ldrh	r3, [r3, #0]
 8010f6a:	80fb      	strh	r3, [r7, #6]
 8010f6c:	e027      	b.n	8010fbe <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010f6e:	88fa      	ldrh	r2, [r7, #6]
 8010f70:	8a7b      	ldrh	r3, [r7, #18]
 8010f72:	1ad3      	subs	r3, r2, r3
 8010f74:	b29b      	uxth	r3, r3
 8010f76:	f003 0301 	and.w	r3, r3, #1
 8010f7a:	b29b      	uxth	r3, r3
 8010f7c:	88fa      	ldrh	r2, [r7, #6]
 8010f7e:	1ad3      	subs	r3, r2, r3
 8010f80:	80fb      	strh	r3, [r7, #6]
 8010f82:	e01c      	b.n	8010fbe <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010f84:	88fb      	ldrh	r3, [r7, #6]
 8010f86:	3b10      	subs	r3, #16
 8010f88:	80fb      	strh	r3, [r7, #6]
 8010f8a:	e018      	b.n	8010fbe <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010f8c:	88fb      	ldrh	r3, [r7, #6]
 8010f8e:	3b20      	subs	r3, #32
 8010f90:	80fb      	strh	r3, [r7, #6]
 8010f92:	e014      	b.n	8010fbe <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010f94:	88fb      	ldrh	r3, [r7, #6]
 8010f96:	3b30      	subs	r3, #48	; 0x30
 8010f98:	80fb      	strh	r3, [r7, #6]
 8010f9a:	e010      	b.n	8010fbe <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010f9c:	88fb      	ldrh	r3, [r7, #6]
 8010f9e:	3b1a      	subs	r3, #26
 8010fa0:	80fb      	strh	r3, [r7, #6]
 8010fa2:	e00c      	b.n	8010fbe <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010fa4:	88fb      	ldrh	r3, [r7, #6]
 8010fa6:	3308      	adds	r3, #8
 8010fa8:	80fb      	strh	r3, [r7, #6]
 8010faa:	e008      	b.n	8010fbe <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010fac:	88fb      	ldrh	r3, [r7, #6]
 8010fae:	3b50      	subs	r3, #80	; 0x50
 8010fb0:	80fb      	strh	r3, [r7, #6]
 8010fb2:	e004      	b.n	8010fbe <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010fb4:	88fb      	ldrh	r3, [r7, #6]
 8010fb6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010fba:	80fb      	strh	r3, [r7, #6]
 8010fbc:	bf00      	nop
			}
			break;
 8010fbe:	e008      	b.n	8010fd2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010fc0:	89fb      	ldrh	r3, [r7, #14]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d195      	bne.n	8010ef2 <ff_wtoupper+0x1a>
 8010fc6:	8a3b      	ldrh	r3, [r7, #16]
 8010fc8:	005b      	lsls	r3, r3, #1
 8010fca:	697a      	ldr	r2, [r7, #20]
 8010fcc:	4413      	add	r3, r2
 8010fce:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010fd0:	e78f      	b.n	8010ef2 <ff_wtoupper+0x1a>
			break;
 8010fd2:	bf00      	nop
	}

	return chr;
 8010fd4:	88fb      	ldrh	r3, [r7, #6]
}
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	371c      	adds	r7, #28
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe0:	4770      	bx	lr
 8010fe2:	bf00      	nop
 8010fe4:	080131d0 	.word	0x080131d0
 8010fe8:	080133c4 	.word	0x080133c4

08010fec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010ff0:	2201      	movs	r2, #1
 8010ff2:	490e      	ldr	r1, [pc, #56]	; (801102c <MX_USB_HOST_Init+0x40>)
 8010ff4:	480e      	ldr	r0, [pc, #56]	; (8011030 <MX_USB_HOST_Init+0x44>)
 8010ff6:	f7fb f8b5 	bl	800c164 <USBH_Init>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d001      	beq.n	8011004 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011000:	f7f0 ff6e 	bl	8001ee0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8011004:	490b      	ldr	r1, [pc, #44]	; (8011034 <MX_USB_HOST_Init+0x48>)
 8011006:	480a      	ldr	r0, [pc, #40]	; (8011030 <MX_USB_HOST_Init+0x44>)
 8011008:	f7fb f93a 	bl	800c280 <USBH_RegisterClass>
 801100c:	4603      	mov	r3, r0
 801100e:	2b00      	cmp	r3, #0
 8011010:	d001      	beq.n	8011016 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8011012:	f7f0 ff65 	bl	8001ee0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8011016:	4806      	ldr	r0, [pc, #24]	; (8011030 <MX_USB_HOST_Init+0x44>)
 8011018:	f7fb f9be 	bl	800c398 <USBH_Start>
 801101c:	4603      	mov	r3, r0
 801101e:	2b00      	cmp	r3, #0
 8011020:	d001      	beq.n	8011026 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8011022:	f7f0 ff5d 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8011026:	bf00      	nop
 8011028:	bd80      	pop	{r7, pc}
 801102a:	bf00      	nop
 801102c:	0801104d 	.word	0x0801104d
 8011030:	200022ec 	.word	0x200022ec
 8011034:	2000008c 	.word	0x2000008c

08011038 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 801103c:	4802      	ldr	r0, [pc, #8]	; (8011048 <MX_USB_HOST_Process+0x10>)
 801103e:	f7fb f9bb 	bl	800c3b8 <USBH_Process>
}
 8011042:	bf00      	nop
 8011044:	bd80      	pop	{r7, pc}
 8011046:	bf00      	nop
 8011048:	200022ec 	.word	0x200022ec

0801104c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801104c:	b480      	push	{r7}
 801104e:	b083      	sub	sp, #12
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
 8011054:	460b      	mov	r3, r1
 8011056:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8011058:	78fb      	ldrb	r3, [r7, #3]
 801105a:	3b01      	subs	r3, #1
 801105c:	2b04      	cmp	r3, #4
 801105e:	d819      	bhi.n	8011094 <USBH_UserProcess+0x48>
 8011060:	a201      	add	r2, pc, #4	; (adr r2, 8011068 <USBH_UserProcess+0x1c>)
 8011062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011066:	bf00      	nop
 8011068:	08011095 	.word	0x08011095
 801106c:	08011085 	.word	0x08011085
 8011070:	08011095 	.word	0x08011095
 8011074:	0801108d 	.word	0x0801108d
 8011078:	0801107d 	.word	0x0801107d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801107c:	4b09      	ldr	r3, [pc, #36]	; (80110a4 <USBH_UserProcess+0x58>)
 801107e:	2203      	movs	r2, #3
 8011080:	701a      	strb	r2, [r3, #0]
  break;
 8011082:	e008      	b.n	8011096 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8011084:	4b07      	ldr	r3, [pc, #28]	; (80110a4 <USBH_UserProcess+0x58>)
 8011086:	2202      	movs	r2, #2
 8011088:	701a      	strb	r2, [r3, #0]
  break;
 801108a:	e004      	b.n	8011096 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801108c:	4b05      	ldr	r3, [pc, #20]	; (80110a4 <USBH_UserProcess+0x58>)
 801108e:	2201      	movs	r2, #1
 8011090:	701a      	strb	r2, [r3, #0]
  break;
 8011092:	e000      	b.n	8011096 <USBH_UserProcess+0x4a>

  default:
  break;
 8011094:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8011096:	bf00      	nop
 8011098:	370c      	adds	r7, #12
 801109a:	46bd      	mov	sp, r7
 801109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a0:	4770      	bx	lr
 80110a2:	bf00      	nop
 80110a4:	200026c4 	.word	0x200026c4

080110a8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b08a      	sub	sp, #40	; 0x28
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80110b0:	f107 0314 	add.w	r3, r7, #20
 80110b4:	2200      	movs	r2, #0
 80110b6:	601a      	str	r2, [r3, #0]
 80110b8:	605a      	str	r2, [r3, #4]
 80110ba:	609a      	str	r2, [r3, #8]
 80110bc:	60da      	str	r2, [r3, #12]
 80110be:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80110c8:	d147      	bne.n	801115a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80110ca:	2300      	movs	r3, #0
 80110cc:	613b      	str	r3, [r7, #16]
 80110ce:	4b25      	ldr	r3, [pc, #148]	; (8011164 <HAL_HCD_MspInit+0xbc>)
 80110d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110d2:	4a24      	ldr	r2, [pc, #144]	; (8011164 <HAL_HCD_MspInit+0xbc>)
 80110d4:	f043 0301 	orr.w	r3, r3, #1
 80110d8:	6313      	str	r3, [r2, #48]	; 0x30
 80110da:	4b22      	ldr	r3, [pc, #136]	; (8011164 <HAL_HCD_MspInit+0xbc>)
 80110dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110de:	f003 0301 	and.w	r3, r3, #1
 80110e2:	613b      	str	r3, [r7, #16]
 80110e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80110e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80110ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80110ec:	2300      	movs	r3, #0
 80110ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80110f0:	2300      	movs	r3, #0
 80110f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80110f4:	f107 0314 	add.w	r3, r7, #20
 80110f8:	4619      	mov	r1, r3
 80110fa:	481b      	ldr	r0, [pc, #108]	; (8011168 <HAL_HCD_MspInit+0xc0>)
 80110fc:	f7f2 fbec 	bl	80038d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011100:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011106:	2302      	movs	r3, #2
 8011108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801110a:	2300      	movs	r3, #0
 801110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801110e:	2303      	movs	r3, #3
 8011110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011112:	230a      	movs	r3, #10
 8011114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011116:	f107 0314 	add.w	r3, r7, #20
 801111a:	4619      	mov	r1, r3
 801111c:	4812      	ldr	r0, [pc, #72]	; (8011168 <HAL_HCD_MspInit+0xc0>)
 801111e:	f7f2 fbdb 	bl	80038d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011122:	4b10      	ldr	r3, [pc, #64]	; (8011164 <HAL_HCD_MspInit+0xbc>)
 8011124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011126:	4a0f      	ldr	r2, [pc, #60]	; (8011164 <HAL_HCD_MspInit+0xbc>)
 8011128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801112c:	6353      	str	r3, [r2, #52]	; 0x34
 801112e:	2300      	movs	r3, #0
 8011130:	60fb      	str	r3, [r7, #12]
 8011132:	4b0c      	ldr	r3, [pc, #48]	; (8011164 <HAL_HCD_MspInit+0xbc>)
 8011134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011136:	4a0b      	ldr	r2, [pc, #44]	; (8011164 <HAL_HCD_MspInit+0xbc>)
 8011138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801113c:	6453      	str	r3, [r2, #68]	; 0x44
 801113e:	4b09      	ldr	r3, [pc, #36]	; (8011164 <HAL_HCD_MspInit+0xbc>)
 8011140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011146:	60fb      	str	r3, [r7, #12]
 8011148:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801114a:	2200      	movs	r2, #0
 801114c:	2100      	movs	r1, #0
 801114e:	2043      	movs	r0, #67	; 0x43
 8011150:	f7f1 ff2b 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011154:	2043      	movs	r0, #67	; 0x43
 8011156:	f7f1 ff44 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801115a:	bf00      	nop
 801115c:	3728      	adds	r7, #40	; 0x28
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}
 8011162:	bf00      	nop
 8011164:	40023800 	.word	0x40023800
 8011168:	40020000 	.word	0x40020000

0801116c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b082      	sub	sp, #8
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801117a:	4618      	mov	r0, r3
 801117c:	f7fb fcfb 	bl	800cb76 <USBH_LL_IncTimer>
}
 8011180:	bf00      	nop
 8011182:	3708      	adds	r7, #8
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}

08011188 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b082      	sub	sp, #8
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011196:	4618      	mov	r0, r3
 8011198:	f7fb fd33 	bl	800cc02 <USBH_LL_Connect>
}
 801119c:	bf00      	nop
 801119e:	3708      	adds	r7, #8
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bd80      	pop	{r7, pc}

080111a4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b082      	sub	sp, #8
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80111b2:	4618      	mov	r0, r3
 80111b4:	f7fb fd3c 	bl	800cc30 <USBH_LL_Disconnect>
}
 80111b8:	bf00      	nop
 80111ba:	3708      	adds	r7, #8
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}

080111c0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80111c0:	b480      	push	{r7}
 80111c2:	b083      	sub	sp, #12
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
 80111c8:	460b      	mov	r3, r1
 80111ca:	70fb      	strb	r3, [r7, #3]
 80111cc:	4613      	mov	r3, r2
 80111ce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80111d0:	bf00      	nop
 80111d2:	370c      	adds	r7, #12
 80111d4:	46bd      	mov	sp, r7
 80111d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111da:	4770      	bx	lr

080111dc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b082      	sub	sp, #8
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80111ea:	4618      	mov	r0, r3
 80111ec:	f7fb fced 	bl	800cbca <USBH_LL_PortEnabled>
}
 80111f0:	bf00      	nop
 80111f2:	3708      	adds	r7, #8
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bd80      	pop	{r7, pc}

080111f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b082      	sub	sp, #8
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011206:	4618      	mov	r0, r3
 8011208:	f7fb fced 	bl	800cbe6 <USBH_LL_PortDisabled>
}
 801120c:	bf00      	nop
 801120e:	3708      	adds	r7, #8
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}

08011214 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b082      	sub	sp, #8
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011222:	2b01      	cmp	r3, #1
 8011224:	d12a      	bne.n	801127c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8011226:	4a18      	ldr	r2, [pc, #96]	; (8011288 <USBH_LL_Init+0x74>)
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	4a15      	ldr	r2, [pc, #84]	; (8011288 <USBH_LL_Init+0x74>)
 8011232:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011236:	4b14      	ldr	r3, [pc, #80]	; (8011288 <USBH_LL_Init+0x74>)
 8011238:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801123c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801123e:	4b12      	ldr	r3, [pc, #72]	; (8011288 <USBH_LL_Init+0x74>)
 8011240:	2208      	movs	r2, #8
 8011242:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8011244:	4b10      	ldr	r3, [pc, #64]	; (8011288 <USBH_LL_Init+0x74>)
 8011246:	2201      	movs	r2, #1
 8011248:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801124a:	4b0f      	ldr	r3, [pc, #60]	; (8011288 <USBH_LL_Init+0x74>)
 801124c:	2200      	movs	r2, #0
 801124e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8011250:	4b0d      	ldr	r3, [pc, #52]	; (8011288 <USBH_LL_Init+0x74>)
 8011252:	2202      	movs	r2, #2
 8011254:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011256:	4b0c      	ldr	r3, [pc, #48]	; (8011288 <USBH_LL_Init+0x74>)
 8011258:	2200      	movs	r2, #0
 801125a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801125c:	480a      	ldr	r0, [pc, #40]	; (8011288 <USBH_LL_Init+0x74>)
 801125e:	f7f2 fdd5 	bl	8003e0c <HAL_HCD_Init>
 8011262:	4603      	mov	r3, r0
 8011264:	2b00      	cmp	r3, #0
 8011266:	d001      	beq.n	801126c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8011268:	f7f0 fe3a 	bl	8001ee0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801126c:	4806      	ldr	r0, [pc, #24]	; (8011288 <USBH_LL_Init+0x74>)
 801126e:	f7f3 f9b8 	bl	80045e2 <HAL_HCD_GetCurrentFrame>
 8011272:	4603      	mov	r3, r0
 8011274:	4619      	mov	r1, r3
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f7fb fc6e 	bl	800cb58 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801127c:	2300      	movs	r3, #0
}
 801127e:	4618      	mov	r0, r3
 8011280:	3708      	adds	r7, #8
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}
 8011286:	bf00      	nop
 8011288:	200026c8 	.word	0x200026c8

0801128c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b084      	sub	sp, #16
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011294:	2300      	movs	r3, #0
 8011296:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011298:	2300      	movs	r3, #0
 801129a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80112a2:	4618      	mov	r0, r3
 80112a4:	f7f3 f927 	bl	80044f6 <HAL_HCD_Start>
 80112a8:	4603      	mov	r3, r0
 80112aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80112ac:	7bfb      	ldrb	r3, [r7, #15]
 80112ae:	4618      	mov	r0, r3
 80112b0:	f000 f98c 	bl	80115cc <USBH_Get_USB_Status>
 80112b4:	4603      	mov	r3, r0
 80112b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80112b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	3710      	adds	r7, #16
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}

080112c2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80112c2:	b580      	push	{r7, lr}
 80112c4:	b084      	sub	sp, #16
 80112c6:	af00      	add	r7, sp, #0
 80112c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112ca:	2300      	movs	r3, #0
 80112cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80112ce:	2300      	movs	r3, #0
 80112d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80112d8:	4618      	mov	r0, r3
 80112da:	f7f3 f92f 	bl	800453c <HAL_HCD_Stop>
 80112de:	4603      	mov	r3, r0
 80112e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80112e2:	7bfb      	ldrb	r3, [r7, #15]
 80112e4:	4618      	mov	r0, r3
 80112e6:	f000 f971 	bl	80115cc <USBH_Get_USB_Status>
 80112ea:	4603      	mov	r3, r0
 80112ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80112ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80112f0:	4618      	mov	r0, r3
 80112f2:	3710      	adds	r7, #16
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}

080112f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b084      	sub	sp, #16
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011300:	2301      	movs	r3, #1
 8011302:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801130a:	4618      	mov	r0, r3
 801130c:	f7f3 f977 	bl	80045fe <HAL_HCD_GetCurrentSpeed>
 8011310:	4603      	mov	r3, r0
 8011312:	2b02      	cmp	r3, #2
 8011314:	d00c      	beq.n	8011330 <USBH_LL_GetSpeed+0x38>
 8011316:	2b02      	cmp	r3, #2
 8011318:	d80d      	bhi.n	8011336 <USBH_LL_GetSpeed+0x3e>
 801131a:	2b00      	cmp	r3, #0
 801131c:	d002      	beq.n	8011324 <USBH_LL_GetSpeed+0x2c>
 801131e:	2b01      	cmp	r3, #1
 8011320:	d003      	beq.n	801132a <USBH_LL_GetSpeed+0x32>
 8011322:	e008      	b.n	8011336 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011324:	2300      	movs	r3, #0
 8011326:	73fb      	strb	r3, [r7, #15]
    break;
 8011328:	e008      	b.n	801133c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801132a:	2301      	movs	r3, #1
 801132c:	73fb      	strb	r3, [r7, #15]
    break;
 801132e:	e005      	b.n	801133c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011330:	2302      	movs	r3, #2
 8011332:	73fb      	strb	r3, [r7, #15]
    break;
 8011334:	e002      	b.n	801133c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8011336:	2301      	movs	r3, #1
 8011338:	73fb      	strb	r3, [r7, #15]
    break;
 801133a:	bf00      	nop
  }
  return  speed;
 801133c:	7bfb      	ldrb	r3, [r7, #15]
}
 801133e:	4618      	mov	r0, r3
 8011340:	3710      	adds	r7, #16
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}

08011346 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011346:	b580      	push	{r7, lr}
 8011348:	b084      	sub	sp, #16
 801134a:	af00      	add	r7, sp, #0
 801134c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801134e:	2300      	movs	r3, #0
 8011350:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011352:	2300      	movs	r3, #0
 8011354:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801135c:	4618      	mov	r0, r3
 801135e:	f7f3 f90a 	bl	8004576 <HAL_HCD_ResetPort>
 8011362:	4603      	mov	r3, r0
 8011364:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011366:	7bfb      	ldrb	r3, [r7, #15]
 8011368:	4618      	mov	r0, r3
 801136a:	f000 f92f 	bl	80115cc <USBH_Get_USB_Status>
 801136e:	4603      	mov	r3, r0
 8011370:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011372:	7bbb      	ldrb	r3, [r7, #14]
}
 8011374:	4618      	mov	r0, r3
 8011376:	3710      	adds	r7, #16
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}

0801137c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b082      	sub	sp, #8
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
 8011384:	460b      	mov	r3, r1
 8011386:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801138e:	78fa      	ldrb	r2, [r7, #3]
 8011390:	4611      	mov	r1, r2
 8011392:	4618      	mov	r0, r3
 8011394:	f7f3 f911 	bl	80045ba <HAL_HCD_HC_GetXferCount>
 8011398:	4603      	mov	r3, r0
}
 801139a:	4618      	mov	r0, r3
 801139c:	3708      	adds	r7, #8
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}

080113a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80113a2:	b590      	push	{r4, r7, lr}
 80113a4:	b089      	sub	sp, #36	; 0x24
 80113a6:	af04      	add	r7, sp, #16
 80113a8:	6078      	str	r0, [r7, #4]
 80113aa:	4608      	mov	r0, r1
 80113ac:	4611      	mov	r1, r2
 80113ae:	461a      	mov	r2, r3
 80113b0:	4603      	mov	r3, r0
 80113b2:	70fb      	strb	r3, [r7, #3]
 80113b4:	460b      	mov	r3, r1
 80113b6:	70bb      	strb	r3, [r7, #2]
 80113b8:	4613      	mov	r3, r2
 80113ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113bc:	2300      	movs	r3, #0
 80113be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80113c0:	2300      	movs	r3, #0
 80113c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80113ca:	787c      	ldrb	r4, [r7, #1]
 80113cc:	78ba      	ldrb	r2, [r7, #2]
 80113ce:	78f9      	ldrb	r1, [r7, #3]
 80113d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80113d2:	9302      	str	r3, [sp, #8]
 80113d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80113d8:	9301      	str	r3, [sp, #4]
 80113da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80113de:	9300      	str	r3, [sp, #0]
 80113e0:	4623      	mov	r3, r4
 80113e2:	f7f2 fd75 	bl	8003ed0 <HAL_HCD_HC_Init>
 80113e6:	4603      	mov	r3, r0
 80113e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80113ea:	7bfb      	ldrb	r3, [r7, #15]
 80113ec:	4618      	mov	r0, r3
 80113ee:	f000 f8ed 	bl	80115cc <USBH_Get_USB_Status>
 80113f2:	4603      	mov	r3, r0
 80113f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80113f8:	4618      	mov	r0, r3
 80113fa:	3714      	adds	r7, #20
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd90      	pop	{r4, r7, pc}

08011400 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b084      	sub	sp, #16
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
 8011408:	460b      	mov	r3, r1
 801140a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801140c:	2300      	movs	r3, #0
 801140e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011410:	2300      	movs	r3, #0
 8011412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801141a:	78fa      	ldrb	r2, [r7, #3]
 801141c:	4611      	mov	r1, r2
 801141e:	4618      	mov	r0, r3
 8011420:	f7f2 fde5 	bl	8003fee <HAL_HCD_HC_Halt>
 8011424:	4603      	mov	r3, r0
 8011426:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011428:	7bfb      	ldrb	r3, [r7, #15]
 801142a:	4618      	mov	r0, r3
 801142c:	f000 f8ce 	bl	80115cc <USBH_Get_USB_Status>
 8011430:	4603      	mov	r3, r0
 8011432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011434:	7bbb      	ldrb	r3, [r7, #14]
}
 8011436:	4618      	mov	r0, r3
 8011438:	3710      	adds	r7, #16
 801143a:	46bd      	mov	sp, r7
 801143c:	bd80      	pop	{r7, pc}

0801143e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801143e:	b590      	push	{r4, r7, lr}
 8011440:	b089      	sub	sp, #36	; 0x24
 8011442:	af04      	add	r7, sp, #16
 8011444:	6078      	str	r0, [r7, #4]
 8011446:	4608      	mov	r0, r1
 8011448:	4611      	mov	r1, r2
 801144a:	461a      	mov	r2, r3
 801144c:	4603      	mov	r3, r0
 801144e:	70fb      	strb	r3, [r7, #3]
 8011450:	460b      	mov	r3, r1
 8011452:	70bb      	strb	r3, [r7, #2]
 8011454:	4613      	mov	r3, r2
 8011456:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011458:	2300      	movs	r3, #0
 801145a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801145c:	2300      	movs	r3, #0
 801145e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011466:	787c      	ldrb	r4, [r7, #1]
 8011468:	78ba      	ldrb	r2, [r7, #2]
 801146a:	78f9      	ldrb	r1, [r7, #3]
 801146c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011470:	9303      	str	r3, [sp, #12]
 8011472:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011474:	9302      	str	r3, [sp, #8]
 8011476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011478:	9301      	str	r3, [sp, #4]
 801147a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801147e:	9300      	str	r3, [sp, #0]
 8011480:	4623      	mov	r3, r4
 8011482:	f7f2 fdd7 	bl	8004034 <HAL_HCD_HC_SubmitRequest>
 8011486:	4603      	mov	r3, r0
 8011488:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801148a:	7bfb      	ldrb	r3, [r7, #15]
 801148c:	4618      	mov	r0, r3
 801148e:	f000 f89d 	bl	80115cc <USBH_Get_USB_Status>
 8011492:	4603      	mov	r3, r0
 8011494:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011496:	7bbb      	ldrb	r3, [r7, #14]
}
 8011498:	4618      	mov	r0, r3
 801149a:	3714      	adds	r7, #20
 801149c:	46bd      	mov	sp, r7
 801149e:	bd90      	pop	{r4, r7, pc}

080114a0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b082      	sub	sp, #8
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
 80114a8:	460b      	mov	r3, r1
 80114aa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80114b2:	78fa      	ldrb	r2, [r7, #3]
 80114b4:	4611      	mov	r1, r2
 80114b6:	4618      	mov	r0, r3
 80114b8:	f7f3 f86b 	bl	8004592 <HAL_HCD_HC_GetURBState>
 80114bc:	4603      	mov	r3, r0
}
 80114be:	4618      	mov	r0, r3
 80114c0:	3708      	adds	r7, #8
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}

080114c6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80114c6:	b580      	push	{r7, lr}
 80114c8:	b082      	sub	sp, #8
 80114ca:	af00      	add	r7, sp, #0
 80114cc:	6078      	str	r0, [r7, #4]
 80114ce:	460b      	mov	r3, r1
 80114d0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80114d8:	2b01      	cmp	r3, #1
 80114da:	d103      	bne.n	80114e4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80114dc:	78fb      	ldrb	r3, [r7, #3]
 80114de:	4618      	mov	r0, r3
 80114e0:	f000 f8a0 	bl	8011624 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80114e4:	20c8      	movs	r0, #200	; 0xc8
 80114e6:	f7f1 fc61 	bl	8002dac <HAL_Delay>
  return USBH_OK;
 80114ea:	2300      	movs	r3, #0
}
 80114ec:	4618      	mov	r0, r3
 80114ee:	3708      	adds	r7, #8
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}

080114f4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80114f4:	b480      	push	{r7}
 80114f6:	b085      	sub	sp, #20
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
 80114fc:	460b      	mov	r3, r1
 80114fe:	70fb      	strb	r3, [r7, #3]
 8011500:	4613      	mov	r3, r2
 8011502:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801150a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801150c:	78fb      	ldrb	r3, [r7, #3]
 801150e:	68fa      	ldr	r2, [r7, #12]
 8011510:	212c      	movs	r1, #44	; 0x2c
 8011512:	fb01 f303 	mul.w	r3, r1, r3
 8011516:	4413      	add	r3, r2
 8011518:	333b      	adds	r3, #59	; 0x3b
 801151a:	781b      	ldrb	r3, [r3, #0]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d009      	beq.n	8011534 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011520:	78fb      	ldrb	r3, [r7, #3]
 8011522:	68fa      	ldr	r2, [r7, #12]
 8011524:	212c      	movs	r1, #44	; 0x2c
 8011526:	fb01 f303 	mul.w	r3, r1, r3
 801152a:	4413      	add	r3, r2
 801152c:	3354      	adds	r3, #84	; 0x54
 801152e:	78ba      	ldrb	r2, [r7, #2]
 8011530:	701a      	strb	r2, [r3, #0]
 8011532:	e008      	b.n	8011546 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011534:	78fb      	ldrb	r3, [r7, #3]
 8011536:	68fa      	ldr	r2, [r7, #12]
 8011538:	212c      	movs	r1, #44	; 0x2c
 801153a:	fb01 f303 	mul.w	r3, r1, r3
 801153e:	4413      	add	r3, r2
 8011540:	3355      	adds	r3, #85	; 0x55
 8011542:	78ba      	ldrb	r2, [r7, #2]
 8011544:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011546:	2300      	movs	r3, #0
}
 8011548:	4618      	mov	r0, r3
 801154a:	3714      	adds	r7, #20
 801154c:	46bd      	mov	sp, r7
 801154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011552:	4770      	bx	lr

08011554 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011554:	b480      	push	{r7}
 8011556:	b085      	sub	sp, #20
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	460b      	mov	r3, r1
 801155e:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8011560:	2300      	movs	r3, #0
 8011562:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801156a:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 801156c:	78fb      	ldrb	r3, [r7, #3]
 801156e:	68ba      	ldr	r2, [r7, #8]
 8011570:	212c      	movs	r1, #44	; 0x2c
 8011572:	fb01 f303 	mul.w	r3, r1, r3
 8011576:	4413      	add	r3, r2
 8011578:	333b      	adds	r3, #59	; 0x3b
 801157a:	781b      	ldrb	r3, [r3, #0]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d009      	beq.n	8011594 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8011580:	78fb      	ldrb	r3, [r7, #3]
 8011582:	68ba      	ldr	r2, [r7, #8]
 8011584:	212c      	movs	r1, #44	; 0x2c
 8011586:	fb01 f303 	mul.w	r3, r1, r3
 801158a:	4413      	add	r3, r2
 801158c:	3354      	adds	r3, #84	; 0x54
 801158e:	781b      	ldrb	r3, [r3, #0]
 8011590:	73fb      	strb	r3, [r7, #15]
 8011592:	e008      	b.n	80115a6 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8011594:	78fb      	ldrb	r3, [r7, #3]
 8011596:	68ba      	ldr	r2, [r7, #8]
 8011598:	212c      	movs	r1, #44	; 0x2c
 801159a:	fb01 f303 	mul.w	r3, r1, r3
 801159e:	4413      	add	r3, r2
 80115a0:	3355      	adds	r3, #85	; 0x55
 80115a2:	781b      	ldrb	r3, [r3, #0]
 80115a4:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 80115a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80115a8:	4618      	mov	r0, r3
 80115aa:	3714      	adds	r7, #20
 80115ac:	46bd      	mov	sp, r7
 80115ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b2:	4770      	bx	lr

080115b4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b082      	sub	sp, #8
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	f7f1 fbf5 	bl	8002dac <HAL_Delay>
}
 80115c2:	bf00      	nop
 80115c4:	3708      	adds	r7, #8
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}
	...

080115cc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80115cc:	b480      	push	{r7}
 80115ce:	b085      	sub	sp, #20
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	4603      	mov	r3, r0
 80115d4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80115d6:	2300      	movs	r3, #0
 80115d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80115da:	79fb      	ldrb	r3, [r7, #7]
 80115dc:	2b03      	cmp	r3, #3
 80115de:	d817      	bhi.n	8011610 <USBH_Get_USB_Status+0x44>
 80115e0:	a201      	add	r2, pc, #4	; (adr r2, 80115e8 <USBH_Get_USB_Status+0x1c>)
 80115e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115e6:	bf00      	nop
 80115e8:	080115f9 	.word	0x080115f9
 80115ec:	080115ff 	.word	0x080115ff
 80115f0:	08011605 	.word	0x08011605
 80115f4:	0801160b 	.word	0x0801160b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80115f8:	2300      	movs	r3, #0
 80115fa:	73fb      	strb	r3, [r7, #15]
    break;
 80115fc:	e00b      	b.n	8011616 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80115fe:	2302      	movs	r3, #2
 8011600:	73fb      	strb	r3, [r7, #15]
    break;
 8011602:	e008      	b.n	8011616 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011604:	2301      	movs	r3, #1
 8011606:	73fb      	strb	r3, [r7, #15]
    break;
 8011608:	e005      	b.n	8011616 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801160a:	2302      	movs	r3, #2
 801160c:	73fb      	strb	r3, [r7, #15]
    break;
 801160e:	e002      	b.n	8011616 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011610:	2302      	movs	r3, #2
 8011612:	73fb      	strb	r3, [r7, #15]
    break;
 8011614:	bf00      	nop
  }
  return usb_status;
 8011616:	7bfb      	ldrb	r3, [r7, #15]
}
 8011618:	4618      	mov	r0, r3
 801161a:	3714      	adds	r7, #20
 801161c:	46bd      	mov	sp, r7
 801161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011622:	4770      	bx	lr

08011624 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b084      	sub	sp, #16
 8011628:	af00      	add	r7, sp, #0
 801162a:	4603      	mov	r3, r0
 801162c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801162e:	79fb      	ldrb	r3, [r7, #7]
 8011630:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8011632:	79fb      	ldrb	r3, [r7, #7]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d102      	bne.n	801163e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8011638:	2301      	movs	r3, #1
 801163a:	73fb      	strb	r3, [r7, #15]
 801163c:	e001      	b.n	8011642 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801163e:	2300      	movs	r3, #0
 8011640:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8011642:	7bfb      	ldrb	r3, [r7, #15]
 8011644:	461a      	mov	r2, r3
 8011646:	2101      	movs	r1, #1
 8011648:	4803      	ldr	r0, [pc, #12]	; (8011658 <MX_DriverVbusFS+0x34>)
 801164a:	f7f2 fbad 	bl	8003da8 <HAL_GPIO_WritePin>
}
 801164e:	bf00      	nop
 8011650:	3710      	adds	r7, #16
 8011652:	46bd      	mov	sp, r7
 8011654:	bd80      	pop	{r7, pc}
 8011656:	bf00      	nop
 8011658:	40020800 	.word	0x40020800

0801165c <malloc>:
 801165c:	4b02      	ldr	r3, [pc, #8]	; (8011668 <malloc+0xc>)
 801165e:	4601      	mov	r1, r0
 8011660:	6818      	ldr	r0, [r3, #0]
 8011662:	f000 b82b 	b.w	80116bc <_malloc_r>
 8011666:	bf00      	nop
 8011668:	200000f8 	.word	0x200000f8

0801166c <free>:
 801166c:	4b02      	ldr	r3, [pc, #8]	; (8011678 <free+0xc>)
 801166e:	4601      	mov	r1, r0
 8011670:	6818      	ldr	r0, [r3, #0]
 8011672:	f000 b92b 	b.w	80118cc <_free_r>
 8011676:	bf00      	nop
 8011678:	200000f8 	.word	0x200000f8

0801167c <sbrk_aligned>:
 801167c:	b570      	push	{r4, r5, r6, lr}
 801167e:	4e0e      	ldr	r6, [pc, #56]	; (80116b8 <sbrk_aligned+0x3c>)
 8011680:	460c      	mov	r4, r1
 8011682:	6831      	ldr	r1, [r6, #0]
 8011684:	4605      	mov	r5, r0
 8011686:	b911      	cbnz	r1, 801168e <sbrk_aligned+0x12>
 8011688:	f000 f8d6 	bl	8011838 <_sbrk_r>
 801168c:	6030      	str	r0, [r6, #0]
 801168e:	4621      	mov	r1, r4
 8011690:	4628      	mov	r0, r5
 8011692:	f000 f8d1 	bl	8011838 <_sbrk_r>
 8011696:	1c43      	adds	r3, r0, #1
 8011698:	d00a      	beq.n	80116b0 <sbrk_aligned+0x34>
 801169a:	1cc4      	adds	r4, r0, #3
 801169c:	f024 0403 	bic.w	r4, r4, #3
 80116a0:	42a0      	cmp	r0, r4
 80116a2:	d007      	beq.n	80116b4 <sbrk_aligned+0x38>
 80116a4:	1a21      	subs	r1, r4, r0
 80116a6:	4628      	mov	r0, r5
 80116a8:	f000 f8c6 	bl	8011838 <_sbrk_r>
 80116ac:	3001      	adds	r0, #1
 80116ae:	d101      	bne.n	80116b4 <sbrk_aligned+0x38>
 80116b0:	f04f 34ff 	mov.w	r4, #4294967295
 80116b4:	4620      	mov	r0, r4
 80116b6:	bd70      	pop	{r4, r5, r6, pc}
 80116b8:	200029d0 	.word	0x200029d0

080116bc <_malloc_r>:
 80116bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116c0:	1ccd      	adds	r5, r1, #3
 80116c2:	f025 0503 	bic.w	r5, r5, #3
 80116c6:	3508      	adds	r5, #8
 80116c8:	2d0c      	cmp	r5, #12
 80116ca:	bf38      	it	cc
 80116cc:	250c      	movcc	r5, #12
 80116ce:	2d00      	cmp	r5, #0
 80116d0:	4607      	mov	r7, r0
 80116d2:	db01      	blt.n	80116d8 <_malloc_r+0x1c>
 80116d4:	42a9      	cmp	r1, r5
 80116d6:	d905      	bls.n	80116e4 <_malloc_r+0x28>
 80116d8:	230c      	movs	r3, #12
 80116da:	603b      	str	r3, [r7, #0]
 80116dc:	2600      	movs	r6, #0
 80116de:	4630      	mov	r0, r6
 80116e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80117b8 <_malloc_r+0xfc>
 80116e8:	f000 f868 	bl	80117bc <__malloc_lock>
 80116ec:	f8d8 3000 	ldr.w	r3, [r8]
 80116f0:	461c      	mov	r4, r3
 80116f2:	bb5c      	cbnz	r4, 801174c <_malloc_r+0x90>
 80116f4:	4629      	mov	r1, r5
 80116f6:	4638      	mov	r0, r7
 80116f8:	f7ff ffc0 	bl	801167c <sbrk_aligned>
 80116fc:	1c43      	adds	r3, r0, #1
 80116fe:	4604      	mov	r4, r0
 8011700:	d155      	bne.n	80117ae <_malloc_r+0xf2>
 8011702:	f8d8 4000 	ldr.w	r4, [r8]
 8011706:	4626      	mov	r6, r4
 8011708:	2e00      	cmp	r6, #0
 801170a:	d145      	bne.n	8011798 <_malloc_r+0xdc>
 801170c:	2c00      	cmp	r4, #0
 801170e:	d048      	beq.n	80117a2 <_malloc_r+0xe6>
 8011710:	6823      	ldr	r3, [r4, #0]
 8011712:	4631      	mov	r1, r6
 8011714:	4638      	mov	r0, r7
 8011716:	eb04 0903 	add.w	r9, r4, r3
 801171a:	f000 f88d 	bl	8011838 <_sbrk_r>
 801171e:	4581      	cmp	r9, r0
 8011720:	d13f      	bne.n	80117a2 <_malloc_r+0xe6>
 8011722:	6821      	ldr	r1, [r4, #0]
 8011724:	1a6d      	subs	r5, r5, r1
 8011726:	4629      	mov	r1, r5
 8011728:	4638      	mov	r0, r7
 801172a:	f7ff ffa7 	bl	801167c <sbrk_aligned>
 801172e:	3001      	adds	r0, #1
 8011730:	d037      	beq.n	80117a2 <_malloc_r+0xe6>
 8011732:	6823      	ldr	r3, [r4, #0]
 8011734:	442b      	add	r3, r5
 8011736:	6023      	str	r3, [r4, #0]
 8011738:	f8d8 3000 	ldr.w	r3, [r8]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d038      	beq.n	80117b2 <_malloc_r+0xf6>
 8011740:	685a      	ldr	r2, [r3, #4]
 8011742:	42a2      	cmp	r2, r4
 8011744:	d12b      	bne.n	801179e <_malloc_r+0xe2>
 8011746:	2200      	movs	r2, #0
 8011748:	605a      	str	r2, [r3, #4]
 801174a:	e00f      	b.n	801176c <_malloc_r+0xb0>
 801174c:	6822      	ldr	r2, [r4, #0]
 801174e:	1b52      	subs	r2, r2, r5
 8011750:	d41f      	bmi.n	8011792 <_malloc_r+0xd6>
 8011752:	2a0b      	cmp	r2, #11
 8011754:	d917      	bls.n	8011786 <_malloc_r+0xca>
 8011756:	1961      	adds	r1, r4, r5
 8011758:	42a3      	cmp	r3, r4
 801175a:	6025      	str	r5, [r4, #0]
 801175c:	bf18      	it	ne
 801175e:	6059      	strne	r1, [r3, #4]
 8011760:	6863      	ldr	r3, [r4, #4]
 8011762:	bf08      	it	eq
 8011764:	f8c8 1000 	streq.w	r1, [r8]
 8011768:	5162      	str	r2, [r4, r5]
 801176a:	604b      	str	r3, [r1, #4]
 801176c:	4638      	mov	r0, r7
 801176e:	f104 060b 	add.w	r6, r4, #11
 8011772:	f000 f829 	bl	80117c8 <__malloc_unlock>
 8011776:	f026 0607 	bic.w	r6, r6, #7
 801177a:	1d23      	adds	r3, r4, #4
 801177c:	1af2      	subs	r2, r6, r3
 801177e:	d0ae      	beq.n	80116de <_malloc_r+0x22>
 8011780:	1b9b      	subs	r3, r3, r6
 8011782:	50a3      	str	r3, [r4, r2]
 8011784:	e7ab      	b.n	80116de <_malloc_r+0x22>
 8011786:	42a3      	cmp	r3, r4
 8011788:	6862      	ldr	r2, [r4, #4]
 801178a:	d1dd      	bne.n	8011748 <_malloc_r+0x8c>
 801178c:	f8c8 2000 	str.w	r2, [r8]
 8011790:	e7ec      	b.n	801176c <_malloc_r+0xb0>
 8011792:	4623      	mov	r3, r4
 8011794:	6864      	ldr	r4, [r4, #4]
 8011796:	e7ac      	b.n	80116f2 <_malloc_r+0x36>
 8011798:	4634      	mov	r4, r6
 801179a:	6876      	ldr	r6, [r6, #4]
 801179c:	e7b4      	b.n	8011708 <_malloc_r+0x4c>
 801179e:	4613      	mov	r3, r2
 80117a0:	e7cc      	b.n	801173c <_malloc_r+0x80>
 80117a2:	230c      	movs	r3, #12
 80117a4:	603b      	str	r3, [r7, #0]
 80117a6:	4638      	mov	r0, r7
 80117a8:	f000 f80e 	bl	80117c8 <__malloc_unlock>
 80117ac:	e797      	b.n	80116de <_malloc_r+0x22>
 80117ae:	6025      	str	r5, [r4, #0]
 80117b0:	e7dc      	b.n	801176c <_malloc_r+0xb0>
 80117b2:	605b      	str	r3, [r3, #4]
 80117b4:	deff      	udf	#255	; 0xff
 80117b6:	bf00      	nop
 80117b8:	200029cc 	.word	0x200029cc

080117bc <__malloc_lock>:
 80117bc:	4801      	ldr	r0, [pc, #4]	; (80117c4 <__malloc_lock+0x8>)
 80117be:	f000 b875 	b.w	80118ac <__retarget_lock_acquire_recursive>
 80117c2:	bf00      	nop
 80117c4:	20002b10 	.word	0x20002b10

080117c8 <__malloc_unlock>:
 80117c8:	4801      	ldr	r0, [pc, #4]	; (80117d0 <__malloc_unlock+0x8>)
 80117ca:	f000 b870 	b.w	80118ae <__retarget_lock_release_recursive>
 80117ce:	bf00      	nop
 80117d0:	20002b10 	.word	0x20002b10

080117d4 <memset>:
 80117d4:	4402      	add	r2, r0
 80117d6:	4603      	mov	r3, r0
 80117d8:	4293      	cmp	r3, r2
 80117da:	d100      	bne.n	80117de <memset+0xa>
 80117dc:	4770      	bx	lr
 80117de:	f803 1b01 	strb.w	r1, [r3], #1
 80117e2:	e7f9      	b.n	80117d8 <memset+0x4>

080117e4 <strncpy>:
 80117e4:	b510      	push	{r4, lr}
 80117e6:	3901      	subs	r1, #1
 80117e8:	4603      	mov	r3, r0
 80117ea:	b132      	cbz	r2, 80117fa <strncpy+0x16>
 80117ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80117f0:	f803 4b01 	strb.w	r4, [r3], #1
 80117f4:	3a01      	subs	r2, #1
 80117f6:	2c00      	cmp	r4, #0
 80117f8:	d1f7      	bne.n	80117ea <strncpy+0x6>
 80117fa:	441a      	add	r2, r3
 80117fc:	2100      	movs	r1, #0
 80117fe:	4293      	cmp	r3, r2
 8011800:	d100      	bne.n	8011804 <strncpy+0x20>
 8011802:	bd10      	pop	{r4, pc}
 8011804:	f803 1b01 	strb.w	r1, [r3], #1
 8011808:	e7f9      	b.n	80117fe <strncpy+0x1a>

0801180a <strstr>:
 801180a:	780a      	ldrb	r2, [r1, #0]
 801180c:	b570      	push	{r4, r5, r6, lr}
 801180e:	b96a      	cbnz	r2, 801182c <strstr+0x22>
 8011810:	bd70      	pop	{r4, r5, r6, pc}
 8011812:	429a      	cmp	r2, r3
 8011814:	d109      	bne.n	801182a <strstr+0x20>
 8011816:	460c      	mov	r4, r1
 8011818:	4605      	mov	r5, r0
 801181a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801181e:	2b00      	cmp	r3, #0
 8011820:	d0f6      	beq.n	8011810 <strstr+0x6>
 8011822:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8011826:	429e      	cmp	r6, r3
 8011828:	d0f7      	beq.n	801181a <strstr+0x10>
 801182a:	3001      	adds	r0, #1
 801182c:	7803      	ldrb	r3, [r0, #0]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d1ef      	bne.n	8011812 <strstr+0x8>
 8011832:	4618      	mov	r0, r3
 8011834:	e7ec      	b.n	8011810 <strstr+0x6>
	...

08011838 <_sbrk_r>:
 8011838:	b538      	push	{r3, r4, r5, lr}
 801183a:	4d06      	ldr	r5, [pc, #24]	; (8011854 <_sbrk_r+0x1c>)
 801183c:	2300      	movs	r3, #0
 801183e:	4604      	mov	r4, r0
 8011840:	4608      	mov	r0, r1
 8011842:	602b      	str	r3, [r5, #0]
 8011844:	f7f0 fef2 	bl	800262c <_sbrk>
 8011848:	1c43      	adds	r3, r0, #1
 801184a:	d102      	bne.n	8011852 <_sbrk_r+0x1a>
 801184c:	682b      	ldr	r3, [r5, #0]
 801184e:	b103      	cbz	r3, 8011852 <_sbrk_r+0x1a>
 8011850:	6023      	str	r3, [r4, #0]
 8011852:	bd38      	pop	{r3, r4, r5, pc}
 8011854:	20002b0c 	.word	0x20002b0c

08011858 <__errno>:
 8011858:	4b01      	ldr	r3, [pc, #4]	; (8011860 <__errno+0x8>)
 801185a:	6818      	ldr	r0, [r3, #0]
 801185c:	4770      	bx	lr
 801185e:	bf00      	nop
 8011860:	200000f8 	.word	0x200000f8

08011864 <__libc_init_array>:
 8011864:	b570      	push	{r4, r5, r6, lr}
 8011866:	4d0d      	ldr	r5, [pc, #52]	; (801189c <__libc_init_array+0x38>)
 8011868:	4c0d      	ldr	r4, [pc, #52]	; (80118a0 <__libc_init_array+0x3c>)
 801186a:	1b64      	subs	r4, r4, r5
 801186c:	10a4      	asrs	r4, r4, #2
 801186e:	2600      	movs	r6, #0
 8011870:	42a6      	cmp	r6, r4
 8011872:	d109      	bne.n	8011888 <__libc_init_array+0x24>
 8011874:	4d0b      	ldr	r5, [pc, #44]	; (80118a4 <__libc_init_array+0x40>)
 8011876:	4c0c      	ldr	r4, [pc, #48]	; (80118a8 <__libc_init_array+0x44>)
 8011878:	f000 f874 	bl	8011964 <_init>
 801187c:	1b64      	subs	r4, r4, r5
 801187e:	10a4      	asrs	r4, r4, #2
 8011880:	2600      	movs	r6, #0
 8011882:	42a6      	cmp	r6, r4
 8011884:	d105      	bne.n	8011892 <__libc_init_array+0x2e>
 8011886:	bd70      	pop	{r4, r5, r6, pc}
 8011888:	f855 3b04 	ldr.w	r3, [r5], #4
 801188c:	4798      	blx	r3
 801188e:	3601      	adds	r6, #1
 8011890:	e7ee      	b.n	8011870 <__libc_init_array+0xc>
 8011892:	f855 3b04 	ldr.w	r3, [r5], #4
 8011896:	4798      	blx	r3
 8011898:	3601      	adds	r6, #1
 801189a:	e7f2      	b.n	8011882 <__libc_init_array+0x1e>
 801189c:	08013488 	.word	0x08013488
 80118a0:	08013488 	.word	0x08013488
 80118a4:	08013488 	.word	0x08013488
 80118a8:	0801348c 	.word	0x0801348c

080118ac <__retarget_lock_acquire_recursive>:
 80118ac:	4770      	bx	lr

080118ae <__retarget_lock_release_recursive>:
 80118ae:	4770      	bx	lr

080118b0 <memcpy>:
 80118b0:	440a      	add	r2, r1
 80118b2:	4291      	cmp	r1, r2
 80118b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80118b8:	d100      	bne.n	80118bc <memcpy+0xc>
 80118ba:	4770      	bx	lr
 80118bc:	b510      	push	{r4, lr}
 80118be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80118c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80118c6:	4291      	cmp	r1, r2
 80118c8:	d1f9      	bne.n	80118be <memcpy+0xe>
 80118ca:	bd10      	pop	{r4, pc}

080118cc <_free_r>:
 80118cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80118ce:	2900      	cmp	r1, #0
 80118d0:	d044      	beq.n	801195c <_free_r+0x90>
 80118d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80118d6:	9001      	str	r0, [sp, #4]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	f1a1 0404 	sub.w	r4, r1, #4
 80118de:	bfb8      	it	lt
 80118e0:	18e4      	addlt	r4, r4, r3
 80118e2:	f7ff ff6b 	bl	80117bc <__malloc_lock>
 80118e6:	4a1e      	ldr	r2, [pc, #120]	; (8011960 <_free_r+0x94>)
 80118e8:	9801      	ldr	r0, [sp, #4]
 80118ea:	6813      	ldr	r3, [r2, #0]
 80118ec:	b933      	cbnz	r3, 80118fc <_free_r+0x30>
 80118ee:	6063      	str	r3, [r4, #4]
 80118f0:	6014      	str	r4, [r2, #0]
 80118f2:	b003      	add	sp, #12
 80118f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80118f8:	f7ff bf66 	b.w	80117c8 <__malloc_unlock>
 80118fc:	42a3      	cmp	r3, r4
 80118fe:	d908      	bls.n	8011912 <_free_r+0x46>
 8011900:	6825      	ldr	r5, [r4, #0]
 8011902:	1961      	adds	r1, r4, r5
 8011904:	428b      	cmp	r3, r1
 8011906:	bf01      	itttt	eq
 8011908:	6819      	ldreq	r1, [r3, #0]
 801190a:	685b      	ldreq	r3, [r3, #4]
 801190c:	1949      	addeq	r1, r1, r5
 801190e:	6021      	streq	r1, [r4, #0]
 8011910:	e7ed      	b.n	80118ee <_free_r+0x22>
 8011912:	461a      	mov	r2, r3
 8011914:	685b      	ldr	r3, [r3, #4]
 8011916:	b10b      	cbz	r3, 801191c <_free_r+0x50>
 8011918:	42a3      	cmp	r3, r4
 801191a:	d9fa      	bls.n	8011912 <_free_r+0x46>
 801191c:	6811      	ldr	r1, [r2, #0]
 801191e:	1855      	adds	r5, r2, r1
 8011920:	42a5      	cmp	r5, r4
 8011922:	d10b      	bne.n	801193c <_free_r+0x70>
 8011924:	6824      	ldr	r4, [r4, #0]
 8011926:	4421      	add	r1, r4
 8011928:	1854      	adds	r4, r2, r1
 801192a:	42a3      	cmp	r3, r4
 801192c:	6011      	str	r1, [r2, #0]
 801192e:	d1e0      	bne.n	80118f2 <_free_r+0x26>
 8011930:	681c      	ldr	r4, [r3, #0]
 8011932:	685b      	ldr	r3, [r3, #4]
 8011934:	6053      	str	r3, [r2, #4]
 8011936:	440c      	add	r4, r1
 8011938:	6014      	str	r4, [r2, #0]
 801193a:	e7da      	b.n	80118f2 <_free_r+0x26>
 801193c:	d902      	bls.n	8011944 <_free_r+0x78>
 801193e:	230c      	movs	r3, #12
 8011940:	6003      	str	r3, [r0, #0]
 8011942:	e7d6      	b.n	80118f2 <_free_r+0x26>
 8011944:	6825      	ldr	r5, [r4, #0]
 8011946:	1961      	adds	r1, r4, r5
 8011948:	428b      	cmp	r3, r1
 801194a:	bf04      	itt	eq
 801194c:	6819      	ldreq	r1, [r3, #0]
 801194e:	685b      	ldreq	r3, [r3, #4]
 8011950:	6063      	str	r3, [r4, #4]
 8011952:	bf04      	itt	eq
 8011954:	1949      	addeq	r1, r1, r5
 8011956:	6021      	streq	r1, [r4, #0]
 8011958:	6054      	str	r4, [r2, #4]
 801195a:	e7ca      	b.n	80118f2 <_free_r+0x26>
 801195c:	b003      	add	sp, #12
 801195e:	bd30      	pop	{r4, r5, pc}
 8011960:	200029cc 	.word	0x200029cc

08011964 <_init>:
 8011964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011966:	bf00      	nop
 8011968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801196a:	bc08      	pop	{r3}
 801196c:	469e      	mov	lr, r3
 801196e:	4770      	bx	lr

08011970 <_fini>:
 8011970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011972:	bf00      	nop
 8011974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011976:	bc08      	pop	{r3}
 8011978:	469e      	mov	lr, r3
 801197a:	4770      	bx	lr
