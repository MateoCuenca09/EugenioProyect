
EugenioProyect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102a0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08010438  08010438  00020438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010960  08010960  000300e8  2**0
                  CONTENTS
  4 .ARM          00000008  08010960  08010960  00020960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010968  08010968  000300e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010968  08010968  00020968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801096c  0801096c  0002096c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08010970  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025bc  200000e8  08010a58  000300e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200026a4  08010a58  000326a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022d47  00000000  00000000  0003015b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000061c1  00000000  00000000  00052ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001888  00000000  00000000  00059068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012a0  00000000  00000000  0005a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001daff  00000000  00000000  0005bb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000296b8  00000000  00000000  0007968f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000922e9  00000000  00000000  000a2d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006534  00000000  00000000  00135030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0013b564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000e8 	.word	0x200000e8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08010420 	.word	0x08010420

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000ec 	.word	0x200000ec
 80001d4:	08010420 	.word	0x08010420

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	603a      	str	r2, [r7, #0]
 80004de:	80fb      	strh	r3, [r7, #6]
 80004e0:	460b      	mov	r3, r1
 80004e2:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 80004e4:	2300      	movs	r3, #0
 80004e6:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80004e8:	2200      	movs	r2, #0
 80004ea:	6839      	ldr	r1, [r7, #0]
 80004ec:	481c      	ldr	r0, [pc, #112]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 80004ee:	f000 f90f 	bl	8000710 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 80004f4:	4a1b      	ldr	r2, [pc, #108]	; (8000564 <AUDIO_OUT_Init+0x90>)
 80004f6:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80004f8:	4819      	ldr	r0, [pc, #100]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 80004fa:	f006 f833 	bl	8006564 <HAL_I2S_GetState>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d103      	bne.n	800050c <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8000504:	2100      	movs	r1, #0
 8000506:	4816      	ldr	r0, [pc, #88]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 8000508:	f000 f960 	bl	80007cc <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 800050c:	6838      	ldr	r0, [r7, #0]
 800050e:	f000 fa25 	bl	800095c <I2S3_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 8000518:	2301      	movs	r3, #1
 800051a:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d10e      	bne.n	8000540 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <AUDIO_OUT_Init+0x94>)
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	2094      	movs	r0, #148	; 0x94
 8000528:	4798      	blx	r3
 800052a:	4603      	mov	r3, r0
 800052c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000530:	2be0      	cmp	r3, #224	; 0xe0
 8000532:	d103      	bne.n	800053c <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <AUDIO_OUT_Init+0x98>)
 8000536:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <AUDIO_OUT_Init+0x94>)
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	e001      	b.n	8000540 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 800053c:	2301      	movs	r3, #1
 800053e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d107      	bne.n	8000556 <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <AUDIO_OUT_Init+0x98>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	681c      	ldr	r4, [r3, #0]
 800054c:	797a      	ldrb	r2, [r7, #5]
 800054e:	88f9      	ldrh	r1, [r7, #6]
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	2094      	movs	r0, #148	; 0x94
 8000554:	47a0      	blx	r4
  }
  
  return ret;
 8000556:	7bfb      	ldrb	r3, [r7, #15]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	20000108 	.word	0x20000108
 8000564:	40003c00 	.word	0x40003c00
 8000568:	20000004 	.word	0x20000004
 800056c:	20000104 	.word	0x20000104

08000570 <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <AUDIO_OUT_Play+0x4c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	b292      	uxth	r2, r2
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	2094      	movs	r0, #148	; 0x94
 8000588:	4798      	blx	r3
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8000590:	2301      	movs	r3, #1
 8000592:	e00f      	b.n	80005b4 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800059a:	d203      	bcs.n	80005a4 <AUDIO_OUT_Play+0x34>
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	085b      	lsrs	r3, r3, #1
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	e001      	b.n	80005a8 <AUDIO_OUT_Play+0x38>
 80005a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a8:	461a      	mov	r2, r3
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <AUDIO_OUT_Play+0x50>)
 80005ae:	f005 fc57 	bl	8005e60 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005b2:	2300      	movs	r3, #0
  }
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000104 	.word	0x20000104
 80005c0:	20000108 	.word	0x20000108

080005c4 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <AUDIO_OUT_Pause+0x24>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	691b      	ldr	r3, [r3, #16]
 80005ce:	2094      	movs	r0, #148	; 0x94
 80005d0:	4798      	blx	r3
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 80005d8:	2301      	movs	r3, #1
 80005da:	e003      	b.n	80005e4 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <AUDIO_OUT_Pause+0x28>)
 80005de:	f005 fce7 	bl	8005fb0 <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005e2:	2300      	movs	r3, #0
  }
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000104 	.word	0x20000104
 80005ec:	20000108 	.word	0x20000108

080005f0 <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <AUDIO_OUT_Resume+0x24>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	2094      	movs	r0, #148	; 0x94
 80005fc:	4798      	blx	r3
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	e003      	b.n	8000610 <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 8000608:	4803      	ldr	r0, [pc, #12]	; (8000618 <AUDIO_OUT_Resume+0x28>)
 800060a:	f005 fd33 	bl	8006074 <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800060e:	2300      	movs	r3, #0
  }
}
 8000610:	4618      	mov	r0, r3
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000104 	.word	0x20000104
 8000618:	20000108 	.word	0x20000108

0800061c <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8000624:	480e      	ldr	r0, [pc, #56]	; (8000660 <AUDIO_OUT_Stop+0x44>)
 8000626:	f005 fdb9 	bl	800619c <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <AUDIO_OUT_Stop+0x48>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	2094      	movs	r0, #148	; 0x94
 8000634:	4798      	blx	r3
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 800063c:	2301      	movs	r3, #1
 800063e:	e00b      	b.n	8000658 <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d107      	bne.n	8000656 <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(2);
 8000646:	2002      	movs	r0, #2
 8000648:	f001 fe92 	bl	8002370 <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2110      	movs	r1, #16
 8000650:	4805      	ldr	r0, [pc, #20]	; (8000668 <AUDIO_OUT_Stop+0x4c>)
 8000652:	f002 fe8b 	bl	800336c <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000656:	2300      	movs	r3, #0
  }
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000108 	.word	0x20000108
 8000664:	20000104 	.word	0x20000104
 8000668:	40020c00 	.word	0x40020c00

0800066c <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <AUDIO_OUT_SetVolume+0x2c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	6a1b      	ldr	r3, [r3, #32]
 800067c:	79fa      	ldrb	r2, [r7, #7]
 800067e:	4611      	mov	r1, r2
 8000680:	2094      	movs	r0, #148	; 0x94
 8000682:	4798      	blx	r3
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	e000      	b.n	8000690 <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800068e:	2300      	movs	r3, #0
  }
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000104 	.word	0x20000104

0800069c <AUDIO_OUT_SetMute>:
  * @param  Cmd: could be AUDIO_MUTE_ON to mute sound or AUDIO_MUTE_OFF to 
  *         unmute the codec and restore previous volume level.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetMute(uint32_t Cmd)
{ 
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  /* Call the Codec Mute function */
  if(pAudioDrv->SetMute(AUDIO_I2C_ADDRESS, AUDIO_MUTE_ON) != 0)
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <AUDIO_OUT_SetMute+0x28>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	2101      	movs	r1, #1
 80006ac:	2094      	movs	r0, #148	; 0x94
 80006ae:	4798      	blx	r3
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <AUDIO_OUT_SetMute+0x1e>
  {
    return AUDIO_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	e000      	b.n	80006bc <AUDIO_OUT_SetMute+0x20>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80006ba:	2300      	movs	r3, #0
  }
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000104 	.word	0x20000104

080006c8 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <HAL_I2S_TxCpltCallback+0x20>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d101      	bne.n	80006de <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 80006da:	f001 fd85 	bl	80021e8 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40003c00 	.word	0x40003c00

080006ec <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a04      	ldr	r2, [pc, #16]	; (800070c <HAL_I2S_TxHalfCpltCallback+0x20>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d101      	bne.n	8000702 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 80006fe:	f001 fd87 	bl	8002210 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40003c00 	.word	0x40003c00

08000710 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 8000710:	b580      	push	{r7, lr}
 8000712:	b08c      	sub	sp, #48	; 0x30
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 800071c:	2300      	movs	r3, #0
 800071e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000722:	23ff      	movs	r3, #255	; 0xff
 8000724:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  
  for(index = 0; index < 8; index++)
 8000728:	2300      	movs	r3, #0
 800072a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800072e:	e010      	b.n	8000752 <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 8000730:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000734:	4a22      	ldr	r2, [pc, #136]	; (80007c0 <AUDIO_OUT_ClockConfig+0xb0>)
 8000736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073a:	68ba      	ldr	r2, [r7, #8]
 800073c:	429a      	cmp	r2, r3
 800073e:	d103      	bne.n	8000748 <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 8000740:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000744:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  for(index = 0; index < 8; index++)
 8000748:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800074c:	3301      	adds	r3, #1
 800074e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000756:	2b07      	cmp	r3, #7
 8000758:	d9ea      	bls.n	8000730 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4618      	mov	r0, r3
 8000760:	f007 f852 	bl	8007808 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000764:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000768:	f003 0307 	and.w	r3, r3, #7
 800076c:	2b00      	cmp	r3, #0
 800076e:	d115      	bne.n	800079c <AUDIO_OUT_ClockConfig+0x8c>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000770:	2301      	movs	r3, #1
 8000772:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8000774:	2308      	movs	r3, #8
 8000776:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000778:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800077c:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <AUDIO_OUT_ClockConfig+0xb4>)
 800077e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000782:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000784:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000788:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <AUDIO_OUT_ClockConfig+0xb8>)
 800078a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078e:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4618      	mov	r0, r3
 8000796:	f006 ff47 	bl	8007628 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 800079a:	e00d      	b.n	80007b8 <AUDIO_OUT_ClockConfig+0xa8>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800079c:	2301      	movs	r3, #1
 800079e:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 80007a0:	2308      	movs	r3, #8
 80007a2:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80007a4:	f44f 7381 	mov.w	r3, #258	; 0x102
 80007a8:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80007aa:	2303      	movs	r3, #3
 80007ac:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4618      	mov	r0, r3
 80007b4:	f006 ff38 	bl	8007628 <HAL_RCCEx_PeriphCLKConfig>
}
 80007b8:	bf00      	nop
 80007ba:	3730      	adds	r7, #48	; 0x30
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	0801048c 	.word	0x0801048c
 80007c4:	080104ac 	.word	0x080104ac
 80007c8:	080104cc 	.word	0x080104cc

080007cc <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	; 0x30
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
 80007da:	4b56      	ldr	r3, [pc, #344]	; (8000934 <AUDIO_OUT_MspInit+0x168>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a55      	ldr	r2, [pc, #340]	; (8000934 <AUDIO_OUT_MspInit+0x168>)
 80007e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
 80007e6:	4b53      	ldr	r3, [pc, #332]	; (8000934 <AUDIO_OUT_MspInit+0x168>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	4b4f      	ldr	r3, [pc, #316]	; (8000934 <AUDIO_OUT_MspInit+0x168>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a4e      	ldr	r2, [pc, #312]	; (8000934 <AUDIO_OUT_MspInit+0x168>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b4c      	ldr	r3, [pc, #304]	; (8000934 <AUDIO_OUT_MspInit+0x168>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b48      	ldr	r3, [pc, #288]	; (8000934 <AUDIO_OUT_MspInit+0x168>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a47      	ldr	r2, [pc, #284]	; (8000934 <AUDIO_OUT_MspInit+0x168>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b45      	ldr	r3, [pc, #276]	; (8000934 <AUDIO_OUT_MspInit+0x168>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 800082a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8000838:	2302      	movs	r3, #2
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 800083c:	2306      	movs	r3, #6
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	483c      	ldr	r0, [pc, #240]	; (8000938 <AUDIO_OUT_MspInit+0x16c>)
 8000848:	f002 fb28 	bl	8002e9c <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 800084c:	2310      	movs	r3, #16
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4839      	ldr	r0, [pc, #228]	; (800093c <AUDIO_OUT_MspInit+0x170>)
 8000858:	f002 fb20 	bl	8002e9c <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	4b34      	ldr	r3, [pc, #208]	; (8000934 <AUDIO_OUT_MspInit+0x168>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	4a33      	ldr	r2, [pc, #204]	; (8000934 <AUDIO_OUT_MspInit+0x168>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6313      	str	r3, [r2, #48]	; 0x30
 800086c:	4b31      	ldr	r3, [pc, #196]	; (8000934 <AUDIO_OUT_MspInit+0x168>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	482d      	ldr	r0, [pc, #180]	; (8000938 <AUDIO_OUT_MspInit+0x16c>)
 8000884:	f002 fb0a 	bl	8002e9c <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	4b29      	ldr	r3, [pc, #164]	; (8000934 <AUDIO_OUT_MspInit+0x168>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000890:	4a28      	ldr	r2, [pc, #160]	; (8000934 <AUDIO_OUT_MspInit+0x168>)
 8000892:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000896:	6313      	str	r3, [r2, #48]	; 0x30
 8000898:	4b26      	ldr	r3, [pc, #152]	; (8000934 <AUDIO_OUT_MspInit+0x168>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a25      	ldr	r2, [pc, #148]	; (8000940 <AUDIO_OUT_MspInit+0x174>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d136      	bne.n	800091c <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 80008ae:	4b25      	ldr	r3, [pc, #148]	; (8000944 <AUDIO_OUT_MspInit+0x178>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80008b4:	4b23      	ldr	r3, [pc, #140]	; (8000944 <AUDIO_OUT_MspInit+0x178>)
 80008b6:	2240      	movs	r2, #64	; 0x40
 80008b8:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80008ba:	4b22      	ldr	r3, [pc, #136]	; (8000944 <AUDIO_OUT_MspInit+0x178>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 80008c0:	4b20      	ldr	r3, [pc, #128]	; (8000944 <AUDIO_OUT_MspInit+0x178>)
 80008c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008c6:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 80008c8:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <AUDIO_OUT_MspInit+0x178>)
 80008ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008ce:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <AUDIO_OUT_MspInit+0x178>)
 80008d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008d6:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <AUDIO_OUT_MspInit+0x178>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <AUDIO_OUT_MspInit+0x178>)
 80008e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008e4:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <AUDIO_OUT_MspInit+0x178>)
 80008e8:	2204      	movs	r2, #4
 80008ea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <AUDIO_OUT_MspInit+0x178>)
 80008ee:	2203      	movs	r2, #3
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <AUDIO_OUT_MspInit+0x178>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <AUDIO_OUT_MspInit+0x178>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <AUDIO_OUT_MspInit+0x178>)
 8000900:	4a11      	ldr	r2, [pc, #68]	; (8000948 <AUDIO_OUT_MspInit+0x17c>)
 8000902:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a0f      	ldr	r2, [pc, #60]	; (8000944 <AUDIO_OUT_MspInit+0x178>)
 8000908:	639a      	str	r2, [r3, #56]	; 0x38
 800090a:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <AUDIO_OUT_MspInit+0x178>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 8000910:	480c      	ldr	r0, [pc, #48]	; (8000944 <AUDIO_OUT_MspInit+0x178>)
 8000912:	f001 ff11 	bl	8002738 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 8000916:	480b      	ldr	r0, [pc, #44]	; (8000944 <AUDIO_OUT_MspInit+0x178>)
 8000918:	f001 fe60 	bl	80025dc <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	210e      	movs	r1, #14
 8000920:	202f      	movs	r0, #47	; 0x2f
 8000922:	f001 fe24 	bl	800256e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 8000926:	202f      	movs	r0, #47	; 0x2f
 8000928:	f001 fe3d 	bl	80025a6 <HAL_NVIC_EnableIRQ>
}
 800092c:	bf00      	nop
 800092e:	3730      	adds	r7, #48	; 0x30
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40020800 	.word	0x40020800
 800093c:	40020000 	.word	0x40020000
 8000940:	40003c00 	.word	0x40003c00
 8000944:	20000150 	.word	0x20000150
 8000948:	400260b8 	.word	0x400260b8

0800094c <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
	...

0800095c <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <I2S3_Init+0x68>)
 8000966:	4a18      	ldr	r2, [pc, #96]	; (80009c8 <I2S3_Init+0x6c>)
 8000968:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <I2S3_Init+0x68>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	69da      	ldr	r2, [r3, #28]
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <I2S3_Init+0x68>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000978:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <I2S3_Init+0x68>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <I2S3_Init+0x68>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <I2S3_Init+0x68>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <I2S3_Init+0x68>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <I2S3_Init+0x68>)
 8000994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000998:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <I2S3_Init+0x68>)
 800099c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a0:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <I2S3_Init+0x68>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <I2S3_Init+0x68>)
 80009aa:	f005 f919 	bl	8005be0 <HAL_I2S_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	e000      	b.n	80009ba <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 80009b8:	2300      	movs	r3, #0
  }
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000108 	.word	0x20000108
 80009c8:	40003c00 	.word	0x40003c00

080009cc <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_I2S_ErrorCallback+0x20>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d101      	bne.n	80009e2 <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 80009de:	f7ff ffb5 	bl	800094c <AUDIO_OUT_Error_CallBack>
  }
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40003c00 	.word	0x40003c00

080009f0 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80009f4:	4814      	ldr	r0, [pc, #80]	; (8000a48 <I2Cx_Init+0x58>)
 80009f6:	f004 fd89 	bl	800550c <HAL_I2C_GetState>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d121      	bne.n	8000a44 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <I2Cx_Init+0x58>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <I2Cx_Init+0x5c>)
 8000a04:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <I2Cx_Init+0x58>)
 8000a08:	2243      	movs	r2, #67	; 0x43
 8000a0a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <I2Cx_Init+0x58>)
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <I2Cx_Init+0x60>)
 8000a10:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <I2Cx_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a18:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <I2Cx_Init+0x58>)
 8000a1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a1e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <I2Cx_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <I2Cx_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <I2Cx_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000a32:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <I2Cx_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000a38:	4803      	ldr	r0, [pc, #12]	; (8000a48 <I2Cx_Init+0x58>)
 8000a3a:	f000 f86b 	bl	8000b14 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000a3e:	4802      	ldr	r0, [pc, #8]	; (8000a48 <I2Cx_Init+0x58>)
 8000a40:	f004 f8d0 	bl	8004be4 <HAL_I2C_Init>
  }
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200001b0 	.word	0x200001b0
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	000186a0 	.word	0x000186a0

08000a54 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af04      	add	r7, sp, #16
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	80fb      	strh	r3, [r7, #6]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	717b      	strb	r3, [r7, #5]
 8000a62:	4613      	mov	r3, r2
 8000a64:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a66:	2300      	movs	r3, #0
 8000a68:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000a6a:	797b      	ldrb	r3, [r7, #5]
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <I2Cx_WriteData+0x48>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	88f9      	ldrh	r1, [r7, #6]
 8000a74:	9302      	str	r3, [sp, #8]
 8000a76:	2301      	movs	r3, #1
 8000a78:	9301      	str	r3, [sp, #4]
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	2301      	movs	r3, #1
 8000a80:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <I2Cx_WriteData+0x4c>)
 8000a82:	f004 fa23 	bl	8004ecc <HAL_I2C_Mem_Write>
 8000a86:	4603      	mov	r3, r0
 8000a88:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000a90:	f000 f834 	bl	8000afc <I2Cx_Error>
  }
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	200001b0 	.word	0x200001b0

08000aa4 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b088      	sub	sp, #32
 8000aa8:	af04      	add	r7, sp, #16
 8000aaa:	4603      	mov	r3, r0
 8000aac:	460a      	mov	r2, r1
 8000aae:	80fb      	strh	r3, [r7, #6]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000abc:	797b      	ldrb	r3, [r7, #5]
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <I2Cx_ReadData+0x50>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	88f9      	ldrh	r1, [r7, #6]
 8000ac6:	9302      	str	r3, [sp, #8]
 8000ac8:	2301      	movs	r3, #1
 8000aca:	9301      	str	r3, [sp, #4]
 8000acc:	f107 030e 	add.w	r3, r7, #14
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	4808      	ldr	r0, [pc, #32]	; (8000af8 <I2Cx_ReadData+0x54>)
 8000ad6:	f004 faf3 	bl	80050c0 <HAL_I2C_Mem_Read>
 8000ada:	4603      	mov	r3, r0
 8000adc:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000ae4:	f000 f80a 	bl	8000afc <I2Cx_Error>
  }
  return value;
 8000ae8:	7bbb      	ldrb	r3, [r7, #14]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000000 	.word	0x20000000
 8000af8:	200001b0 	.word	0x200001b0

08000afc <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000b00:	4803      	ldr	r0, [pc, #12]	; (8000b10 <I2Cx_Error+0x14>)
 8000b02:	f004 f9b3 	bl	8004e6c <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000b06:	f7ff ff73 	bl	80009f0 <I2Cx_Init>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200001b0 	.word	0x200001b0

08000b14 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <I2Cx_MspInit+0xa4>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a24      	ldr	r2, [pc, #144]	; (8000bb8 <I2Cx_MspInit+0xa4>)
 8000b26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <I2Cx_MspInit+0xa4>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <I2Cx_MspInit+0xa4>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	4a1d      	ldr	r2, [pc, #116]	; (8000bb8 <I2Cx_MspInit+0xa4>)
 8000b42:	f043 0302 	orr.w	r3, r3, #2
 8000b46:	6313      	str	r3, [r2, #48]	; 0x30
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <I2Cx_MspInit+0xa4>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000b54:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000b5a:	2312      	movs	r3, #18
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000b62:	2302      	movs	r3, #2
 8000b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000b66:	2304      	movs	r3, #4
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4812      	ldr	r0, [pc, #72]	; (8000bbc <I2Cx_MspInit+0xa8>)
 8000b72:	f002 f993 	bl	8002e9c <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <I2Cx_MspInit+0xa4>)
 8000b78:	6a1b      	ldr	r3, [r3, #32]
 8000b7a:	4a0f      	ldr	r2, [pc, #60]	; (8000bb8 <I2Cx_MspInit+0xa4>)
 8000b7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b80:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <I2Cx_MspInit+0xa4>)
 8000b84:	6a1b      	ldr	r3, [r3, #32]
 8000b86:	4a0c      	ldr	r2, [pc, #48]	; (8000bb8 <I2Cx_MspInit+0xa4>)
 8000b88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b8c:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	210f      	movs	r1, #15
 8000b92:	201f      	movs	r0, #31
 8000b94:	f001 fceb 	bl	800256e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000b98:	201f      	movs	r0, #31
 8000b9a:	f001 fd04 	bl	80025a6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	210f      	movs	r1, #15
 8000ba2:	2020      	movs	r0, #32
 8000ba4:	f001 fce3 	bl	800256e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000ba8:	2020      	movs	r0, #32
 8000baa:	f001 fcfc 	bl	80025a6 <HAL_NVIC_EnableIRQ>
}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	; 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020400 	.word	0x40020400

08000bc0 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <AUDIO_IO_Init+0x68>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a16      	ldr	r2, [pc, #88]	; (8000c28 <AUDIO_IO_Init+0x68>)
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <AUDIO_IO_Init+0x68>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000be2:	2310      	movs	r3, #16
 8000be4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000bea:	2302      	movs	r3, #2
 8000bec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480d      	ldr	r0, [pc, #52]	; (8000c2c <AUDIO_IO_Init+0x6c>)
 8000bf8:	f002 f950 	bl	8002e9c <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000bfc:	f7ff fef8 	bl	80009f0 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000c00:	2200      	movs	r2, #0
 8000c02:	2110      	movs	r1, #16
 8000c04:	4809      	ldr	r0, [pc, #36]	; (8000c2c <AUDIO_IO_Init+0x6c>)
 8000c06:	f002 fbb1 	bl	800336c <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000c0a:	2005      	movs	r0, #5
 8000c0c:	f001 fbb0 	bl	8002370 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000c10:	2201      	movs	r2, #1
 8000c12:	2110      	movs	r1, #16
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <AUDIO_IO_Init+0x6c>)
 8000c16:	f002 fba9 	bl	800336c <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000c1a:	2005      	movs	r0, #5
 8000c1c:	f001 fba8 	bl	8002370 <HAL_Delay>
}
 8000c20:	bf00      	nop
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020c00 	.word	0x40020c00

08000c30 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	71fb      	strb	r3, [r7, #7]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	71bb      	strb	r3, [r7, #6]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	797a      	ldrb	r2, [r7, #5]
 8000c56:	79b9      	ldrb	r1, [r7, #6]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fefb 	bl	8000a54 <I2Cx_WriteData>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	460a      	mov	r2, r1
 8000c70:	71fb      	strb	r3, [r7, #7]
 8000c72:	4613      	mov	r3, r2
 8000c74:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	79ba      	ldrb	r2, [r7, #6]
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff10 	bl	8000aa4 <I2Cx_ReadData>
 8000c84:	4603      	mov	r3, r0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <AUDIO_StorageParse>:

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b0d6      	sub	sp, #344	; 0x158
 8000c94:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USBHPath);
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	4945      	ldr	r1, [pc, #276]	; (8000db4 <AUDIO_StorageParse+0x124>)
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f00e fd09 	bl	800f6b8 <f_opendir>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FileList.ptr = 0;
 8000cac:	4b42      	ldr	r3, [pc, #264]	; (8000db8 <AUDIO_StorageParse+0x128>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8

  if(res == FR_OK)
 8000cb4:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d16b      	bne.n	8000d94 <AUDIO_StorageParse+0x104>
  {
    while(Appli_state == APPLICATION_READY)
 8000cbc:	e066      	b.n	8000d8c <AUDIO_StorageParse+0xfc>
    {
      res = f_readdir(&dir, &fno);
 8000cbe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f00e fd8f 	bl	800f7ea <f_readdir>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if(res != FR_OK || fno.fname[0] == 0)
 8000cd2:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d15c      	bne.n	8000d94 <AUDIO_StorageParse+0x104>
 8000cda:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000cde:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ce2:	7d9b      	ldrb	r3, [r3, #22]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d055      	beq.n	8000d94 <AUDIO_StorageParse+0x104>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000ce8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000cec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cf0:	7d9b      	ldrb	r3, [r3, #22]
 8000cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8000cf4:	d100      	bne.n	8000cf8 <AUDIO_StorageParse+0x68>
      {
        continue;
 8000cf6:	e049      	b.n	8000d8c <AUDIO_StorageParse+0xfc>
      }

      fn = fno.fname;
 8000cf8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cfc:	3316      	adds	r3, #22
 8000cfe:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000d02:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <AUDIO_StorageParse+0x128>)
 8000d04:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d08:	2b17      	cmp	r3, #23
 8000d0a:	d83f      	bhi.n	8000d8c <AUDIO_StorageParse+0xfc>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000d0c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000d10:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d14:	7a1b      	ldrb	r3, [r3, #8]
 8000d16:	f003 0310 	and.w	r3, r3, #16
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d136      	bne.n	8000d8c <AUDIO_StorageParse+0xfc>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000d1e:	4927      	ldr	r1, [pc, #156]	; (8000dbc <AUDIO_StorageParse+0x12c>)
 8000d20:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000d24:	f00f facf 	bl	80102c6 <strstr>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d107      	bne.n	8000d3e <AUDIO_StorageParse+0xae>
 8000d2e:	4924      	ldr	r1, [pc, #144]	; (8000dc0 <AUDIO_StorageParse+0x130>)
 8000d30:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000d34:	f00f fac7 	bl	80102c6 <strstr>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d026      	beq.n	8000d8c <AUDIO_StorageParse+0xfc>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000d3e:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <AUDIO_StorageParse+0x128>)
 8000d40:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d44:	461a      	mov	r2, r3
 8000d46:	4613      	mov	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <AUDIO_StorageParse+0x128>)
 8000d52:	4413      	add	r3, r2
 8000d54:	3301      	adds	r3, #1
 8000d56:	2228      	movs	r2, #40	; 0x28
 8000d58:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f00f fa9f 	bl	80102a0 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <AUDIO_StorageParse+0x128>)
 8000d64:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4913      	ldr	r1, [pc, #76]	; (8000db8 <AUDIO_StorageParse+0x128>)
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	4413      	add	r3, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	2201      	movs	r2, #1
 8000d7a:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <AUDIO_StorageParse+0x128>)
 8000d7e:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d82:	3301      	adds	r3, #1
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <AUDIO_StorageParse+0x128>)
 8000d88:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
    while(Appli_state == APPLICATION_READY)
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <AUDIO_StorageParse+0x134>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d094      	beq.n	8000cbe <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <AUDIO_StorageParse+0x128>)
 8000d96:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	; 0x3d8
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <AUDIO_StorageParse+0x138>)
 8000d9c:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	4618      	mov	r0, r3
 8000da2:	f00e fcfc 	bl	800f79e <f_closedir>
  return res;
 8000da6:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20001a10 	.word	0x20001a10
 8000db8:	200013d0 	.word	0x200013d0
 8000dbc:	08010438 	.word	0x08010438
 8000dc0:	0801043c 	.word	0x0801043c
 8000dc4:	20002254 	.word	0x20002254
 8000dc8:	20000206 	.word	0x20000206

08000dcc <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK) return NumObs;
 8000dd0:	f7ff ff5e 	bl	8000c90 <AUDIO_StorageParse>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d102      	bne.n	8000de0 <AUDIO_GetWavObjectNumber+0x14>
 8000dda:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <AUDIO_GetWavObjectNumber+0x1c>)
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	e000      	b.n	8000de2 <AUDIO_GetWavObjectNumber+0x16>
	else
	{
		while (1);
 8000de0:	e7fe      	b.n	8000de0 <AUDIO_GetWavObjectNumber+0x14>
	}
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000206 	.word	0x20000206

08000dec <Mount_USB>:

void Mount_USB (void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000df0:	2201      	movs	r2, #1
 8000df2:	4905      	ldr	r1, [pc, #20]	; (8000e08 <Mount_USB+0x1c>)
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <Mount_USB+0x20>)
 8000df6:	f00d fe6b 	bl	800ead0 <f_mount>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <Mount_USB+0x24>)
 8000e00:	701a      	strb	r2, [r3, #0]
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20001a10 	.word	0x20001a10
 8000e0c:	20001a14 	.word	0x20001a14
 8000e10:	20000204 	.word	0x20000204

08000e14 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	81fb      	strh	r3, [r7, #14]
 8000e20:	460b      	mov	r3, r1
 8000e22:	81bb      	strh	r3, [r7, #12]
 8000e24:	4613      	mov	r3, r2
 8000e26:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000e2c:	f7ff fec8 	bl	8000bc0 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000e30:	89fb      	ldrh	r3, [r7, #14]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2201      	movs	r2, #1
 8000e36:	2102      	movs	r1, #2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fb01 	bl	8001440 <CODEC_IO_Write>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	461a      	mov	r2, r3
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	4413      	add	r3, r2
 8000e46:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000e48:	89bb      	ldrh	r3, [r7, #12]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d81b      	bhi.n	8000e88 <cs43l22_Init+0x74>
 8000e50:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <cs43l22_Init+0x44>)
 8000e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e56:	bf00      	nop
 8000e58:	08000e69 	.word	0x08000e69
 8000e5c:	08000e71 	.word	0x08000e71
 8000e60:	08000e79 	.word	0x08000e79
 8000e64:	08000e81 	.word	0x08000e81
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000e68:	4b5b      	ldr	r3, [pc, #364]	; (8000fd8 <cs43l22_Init+0x1c4>)
 8000e6a:	22fa      	movs	r2, #250	; 0xfa
 8000e6c:	701a      	strb	r2, [r3, #0]
    break;
 8000e6e:	e00f      	b.n	8000e90 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000e70:	4b59      	ldr	r3, [pc, #356]	; (8000fd8 <cs43l22_Init+0x1c4>)
 8000e72:	22af      	movs	r2, #175	; 0xaf
 8000e74:	701a      	strb	r2, [r3, #0]
    break;
 8000e76:	e00b      	b.n	8000e90 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000e78:	4b57      	ldr	r3, [pc, #348]	; (8000fd8 <cs43l22_Init+0x1c4>)
 8000e7a:	22aa      	movs	r2, #170	; 0xaa
 8000e7c:	701a      	strb	r2, [r3, #0]
    break;
 8000e7e:	e007      	b.n	8000e90 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000e80:	4b55      	ldr	r3, [pc, #340]	; (8000fd8 <cs43l22_Init+0x1c4>)
 8000e82:	2205      	movs	r2, #5
 8000e84:	701a      	strb	r2, [r3, #0]
    break;    
 8000e86:	e003      	b.n	8000e90 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000e88:	4b53      	ldr	r3, [pc, #332]	; (8000fd8 <cs43l22_Init+0x1c4>)
 8000e8a:	2205      	movs	r2, #5
 8000e8c:	701a      	strb	r2, [r3, #0]
    break;    
 8000e8e:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000e90:	89fb      	ldrh	r3, [r7, #14]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4a50      	ldr	r2, [pc, #320]	; (8000fd8 <cs43l22_Init+0x1c4>)
 8000e96:	7812      	ldrb	r2, [r2, #0]
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	2104      	movs	r1, #4
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 facf 	bl	8001440 <CODEC_IO_Write>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000eac:	89fb      	ldrh	r3, [r7, #14]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2281      	movs	r2, #129	; 0x81
 8000eb2:	2105      	movs	r1, #5
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 fac3 	bl	8001440 <CODEC_IO_Write>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000ec4:	89fb      	ldrh	r3, [r7, #14]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2204      	movs	r2, #4
 8000eca:	2106      	movs	r1, #6
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 fab7 	bl	8001440 <CODEC_IO_Write>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	4413      	add	r3, r2
 8000eda:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000edc:	7afa      	ldrb	r2, [r7, #11]
 8000ede:	89fb      	ldrh	r3, [r7, #14]
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f964 	bl	80011b0 <cs43l22_SetVolume>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	4413      	add	r3, r2
 8000eee:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000ef0:	89bb      	ldrh	r3, [r7, #12]
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d023      	beq.n	8000f3e <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000ef6:	89fb      	ldrh	r3, [r7, #14]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2206      	movs	r2, #6
 8000efc:	210f      	movs	r1, #15
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fa9e 	bl	8001440 <CODEC_IO_Write>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000f0e:	89fb      	ldrh	r3, [r7, #14]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2200      	movs	r2, #0
 8000f14:	2124      	movs	r1, #36	; 0x24
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fa92 	bl	8001440 <CODEC_IO_Write>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	4413      	add	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000f26:	89fb      	ldrh	r3, [r7, #14]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2125      	movs	r1, #37	; 0x25
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fa86 	bl	8001440 <CODEC_IO_Write>
 8000f34:	4603      	mov	r3, r0
 8000f36:	461a      	mov	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000f3e:	89fb      	ldrh	r3, [r7, #14]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2200      	movs	r2, #0
 8000f44:	210a      	movs	r1, #10
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fa7a 	bl	8001440 <CODEC_IO_Write>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	4413      	add	r3, r2
 8000f54:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	210e      	movs	r1, #14
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fa6e 	bl	8001440 <CODEC_IO_Write>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000f6e:	89fb      	ldrh	r3, [r7, #14]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2200      	movs	r2, #0
 8000f74:	2127      	movs	r1, #39	; 0x27
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fa62 	bl	8001440 <CODEC_IO_Write>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	4413      	add	r3, r2
 8000f84:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000f86:	89fb      	ldrh	r3, [r7, #14]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	220f      	movs	r2, #15
 8000f8c:	211f      	movs	r1, #31
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fa56 	bl	8001440 <CODEC_IO_Write>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000f9e:	89fb      	ldrh	r3, [r7, #14]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	220a      	movs	r2, #10
 8000fa4:	211a      	movs	r1, #26
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fa4a 	bl	8001440 <CODEC_IO_Write>
 8000fac:	4603      	mov	r3, r0
 8000fae:	461a      	mov	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000fb6:	89fb      	ldrh	r3, [r7, #14]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	220a      	movs	r2, #10
 8000fbc:	211b      	movs	r1, #27
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 fa3e 	bl	8001440 <CODEC_IO_Write>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	4413      	add	r3, r2
 8000fcc:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000fce:	697b      	ldr	r3, [r7, #20]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000208 	.word	0x20000208

08000fdc <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000fe0:	f7ff fe26 	bl	8000c30 <AUDIO_IO_DeInit>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000ff2:	f7ff fde5 	bl	8000bc0 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fe32 	bl	8000c66 <AUDIO_IO_Read>
 8001002:	4603      	mov	r3, r0
 8001004:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	f023 0307 	bic.w	r3, r3, #7
 800100c:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	80fb      	strh	r3, [r7, #6]
 8001024:	4613      	mov	r3, r2
 8001026:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <cs43l22_Play+0x70>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d123      	bne.n	800107c <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2206      	movs	r2, #6
 800103a:	210e      	movs	r1, #14
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f9ff 	bl	8001440 <CODEC_IO_Write>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4413      	add	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f919 	bl	8001288 <cs43l22_SetMute>
 8001056:	4602      	mov	r2, r0
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4413      	add	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 800105e:	88fb      	ldrh	r3, [r7, #6]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	229e      	movs	r2, #158	; 0x9e
 8001064:	2102      	movs	r1, #2
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f9ea 	bl	8001440 <CODEC_IO_Write>
 800106c:	4603      	mov	r3, r0
 800106e:	461a      	mov	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4413      	add	r3, r2
 8001074:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <cs43l22_Play+0x70>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 800107c:	68fb      	ldr	r3, [r7, #12]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000034 	.word	0x20000034

0800108c <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	2101      	movs	r1, #1
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f8f2 	bl	8001288 <cs43l22_SetMute>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	4413      	add	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2201      	movs	r2, #1
 80010b2:	2102      	movs	r1, #2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 f9c3 	bl	8001440 <CODEC_IO_Write>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4413      	add	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]
 
  return counter;
 80010c4:	68fb      	ldr	r3, [r7, #12]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80010e2:	88fb      	ldrh	r3, [r7, #6]
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f8ce 	bl	8001288 <cs43l22_SetMute>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4413      	add	r3, r2
 80010f2:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	e002      	b.n	8001100 <cs43l22_Resume+0x30>
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	3301      	adds	r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	2bfe      	cmp	r3, #254	; 0xfe
 8001104:	d9f9      	bls.n	80010fa <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <cs43l22_Resume+0x74>)
 800110c:	7812      	ldrb	r2, [r2, #0]
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	2104      	movs	r1, #4
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f994 	bl	8001440 <CODEC_IO_Write>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	229e      	movs	r2, #158	; 0x9e
 8001128:	2102      	movs	r1, #2
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f988 	bl	8001440 <CODEC_IO_Write>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000208 	.word	0x20000208

08001148 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	2101      	movs	r1, #1
 800115c:	4618      	mov	r0, r3
 800115e:	f000 f893 	bl	8001288 <cs43l22_SetMute>
 8001162:	4602      	mov	r2, r0
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2204      	movs	r2, #4
 8001170:	210e      	movs	r1, #14
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f964 	bl	8001440 <CODEC_IO_Write>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	229f      	movs	r2, #159	; 0x9f
 8001188:	2102      	movs	r1, #2
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f958 	bl	8001440 <CODEC_IO_Write>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <cs43l22_Stop+0x64>)
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
  return counter;    
 80011a0:	68fb      	ldr	r3, [r7, #12]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000034 	.word	0x20000034

080011b0 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	460a      	mov	r2, r1
 80011ba:	80fb      	strh	r3, [r7, #6]
 80011bc:	4613      	mov	r3, r2
 80011be:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80011c4:	797b      	ldrb	r3, [r7, #5]
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d80b      	bhi.n	80011e2 <cs43l22_SetVolume+0x32>
 80011ca:	797a      	ldrb	r2, [r7, #5]
 80011cc:	4613      	mov	r3, r2
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	1a9b      	subs	r3, r3, r2
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <cs43l22_SetVolume+0xb8>)
 80011d4:	fb82 1203 	smull	r1, r2, r2, r3
 80011d8:	1152      	asrs	r2, r2, #5
 80011da:	17db      	asrs	r3, r3, #31
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	e000      	b.n	80011e4 <cs43l22_SetVolume+0x34>
 80011e2:	23ff      	movs	r3, #255	; 0xff
 80011e4:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80011e6:	7afb      	ldrb	r3, [r7, #11]
 80011e8:	2be6      	cmp	r3, #230	; 0xe6
 80011ea:	d91c      	bls.n	8001226 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	b2d8      	uxtb	r0, r3
 80011f0:	7afb      	ldrb	r3, [r7, #11]
 80011f2:	3319      	adds	r3, #25
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	2120      	movs	r1, #32
 80011fa:	f000 f921 	bl	8001440 <CODEC_IO_Write>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4413      	add	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	b2d8      	uxtb	r0, r3
 800120c:	7afb      	ldrb	r3, [r7, #11]
 800120e:	3319      	adds	r3, #25
 8001210:	b2db      	uxtb	r3, r3
 8001212:	461a      	mov	r2, r3
 8001214:	2121      	movs	r1, #33	; 0x21
 8001216:	f000 f913 	bl	8001440 <CODEC_IO_Write>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4413      	add	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	e01b      	b.n	800125e <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	b2d8      	uxtb	r0, r3
 800122a:	7afb      	ldrb	r3, [r7, #11]
 800122c:	3319      	adds	r3, #25
 800122e:	b2db      	uxtb	r3, r3
 8001230:	461a      	mov	r2, r3
 8001232:	2120      	movs	r1, #32
 8001234:	f000 f904 	bl	8001440 <CODEC_IO_Write>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4413      	add	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	b2d8      	uxtb	r0, r3
 8001246:	7afb      	ldrb	r3, [r7, #11]
 8001248:	3319      	adds	r3, #25
 800124a:	b2db      	uxtb	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	2121      	movs	r1, #33	; 0x21
 8001250:	f000 f8f6 	bl	8001440 <CODEC_IO_Write>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4413      	add	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 800125e:	68fb      	ldr	r3, [r7, #12]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	51eb851f 	.word	0x51eb851f

0800126c <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d124      	bne.n	80012e8 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	22ff      	movs	r2, #255	; 0xff
 80012a4:	2104      	movs	r1, #4
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f8ca 	bl	8001440 <CODEC_IO_Write>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2201      	movs	r2, #1
 80012bc:	2122      	movs	r1, #34	; 0x22
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 f8be 	bl	8001440 <CODEC_IO_Write>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2201      	movs	r2, #1
 80012d4:	2123      	movs	r1, #35	; 0x23
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f8b2 	bl	8001440 <CODEC_IO_Write>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4413      	add	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	e025      	b.n	8001334 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2200      	movs	r2, #0
 80012ee:	2122      	movs	r1, #34	; 0x22
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 f8a5 	bl	8001440 <CODEC_IO_Write>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4413      	add	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2200      	movs	r2, #0
 8001306:	2123      	movs	r1, #35	; 0x23
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f899 	bl	8001440 <CODEC_IO_Write>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4413      	add	r3, r2
 8001316:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	4a08      	ldr	r2, [pc, #32]	; (8001340 <cs43l22_SetMute+0xb8>)
 800131e:	7812      	ldrb	r2, [r2, #0]
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	2104      	movs	r1, #4
 8001324:	4618      	mov	r0, r3
 8001326:	f000 f88b 	bl	8001440 <CODEC_IO_Write>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001334:	68fb      	ldr	r3, [r7, #12]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000208 	.word	0x20000208

08001344 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	460a      	mov	r2, r1
 800134e:	80fb      	strh	r3, [r7, #6]
 8001350:	4613      	mov	r3, r2
 8001352:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001358:	797b      	ldrb	r3, [r7, #5]
 800135a:	3b01      	subs	r3, #1
 800135c:	2b03      	cmp	r3, #3
 800135e:	d84b      	bhi.n	80013f8 <cs43l22_SetOutputMode+0xb4>
 8001360:	a201      	add	r2, pc, #4	; (adr r2, 8001368 <cs43l22_SetOutputMode+0x24>)
 8001362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001366:	bf00      	nop
 8001368:	08001379 	.word	0x08001379
 800136c:	08001399 	.word	0x08001399
 8001370:	080013b9 	.word	0x080013b9
 8001374:	080013d9 	.word	0x080013d9
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	22fa      	movs	r2, #250	; 0xfa
 800137e:	2104      	movs	r1, #4
 8001380:	4618      	mov	r0, r3
 8001382:	f000 f85d 	bl	8001440 <CODEC_IO_Write>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4413      	add	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <cs43l22_SetOutputMode+0xe0>)
 8001392:	22fa      	movs	r2, #250	; 0xfa
 8001394:	701a      	strb	r2, [r3, #0]
      break;
 8001396:	e03f      	b.n	8001418 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	22af      	movs	r2, #175	; 0xaf
 800139e:	2104      	movs	r1, #4
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 f84d 	bl	8001440 <CODEC_IO_Write>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4413      	add	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 80013b0:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <cs43l22_SetOutputMode+0xe0>)
 80013b2:	22af      	movs	r2, #175	; 0xaf
 80013b4:	701a      	strb	r2, [r3, #0]
      break;
 80013b6:	e02f      	b.n	8001418 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	22aa      	movs	r2, #170	; 0xaa
 80013be:	2104      	movs	r1, #4
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 f83d 	bl	8001440 <CODEC_IO_Write>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4413      	add	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <cs43l22_SetOutputMode+0xe0>)
 80013d2:	22aa      	movs	r2, #170	; 0xaa
 80013d4:	701a      	strb	r2, [r3, #0]
      break;
 80013d6:	e01f      	b.n	8001418 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2205      	movs	r2, #5
 80013de:	2104      	movs	r1, #4
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 f82d 	bl	8001440 <CODEC_IO_Write>
 80013e6:	4603      	mov	r3, r0
 80013e8:	461a      	mov	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4413      	add	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <cs43l22_SetOutputMode+0xe0>)
 80013f2:	2205      	movs	r2, #5
 80013f4:	701a      	strb	r2, [r3, #0]
      break;    
 80013f6:	e00f      	b.n	8001418 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2205      	movs	r2, #5
 80013fe:	2104      	movs	r1, #4
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f81d 	bl	8001440 <CODEC_IO_Write>
 8001406:	4603      	mov	r3, r0
 8001408:	461a      	mov	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4413      	add	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <cs43l22_SetOutputMode+0xe0>)
 8001412:	2205      	movs	r2, #5
 8001414:	701a      	strb	r2, [r3, #0]
      break;
 8001416:	bf00      	nop
  }  
  return counter;
 8001418:	68fb      	ldr	r3, [r7, #12]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000208 	.word	0x20000208

08001428 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	460b      	mov	r3, r1
 800144c:	71bb      	strb	r3, [r7, #6]
 800144e:	4613      	mov	r3, r2
 8001450:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001456:	797a      	ldrb	r2, [r7, #5]
 8001458:	79b9      	ldrb	r1, [r7, #6]
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fbee 	bl	8000c3e <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	b2db      	uxtb	r3, r3
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <MX_DMA_Init+0x78>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a1a      	ldr	r2, [pc, #104]	; (80014e8 <MX_DMA_Init+0x78>)
 8001480:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_DMA_Init+0x78>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_DMA_Init+0x78>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a13      	ldr	r2, [pc, #76]	; (80014e8 <MX_DMA_Init+0x78>)
 800149c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_DMA_Init+0x78>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	2010      	movs	r0, #16
 80014b4:	f001 f85b 	bl	800256e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80014b8:	2010      	movs	r0, #16
 80014ba:	f001 f874 	bl	80025a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	203a      	movs	r0, #58	; 0x3a
 80014c4:	f001 f853 	bl	800256e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80014c8:	203a      	movs	r0, #58	; 0x3a
 80014ca:	f001 f86c 	bl	80025a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	2046      	movs	r0, #70	; 0x46
 80014d4:	f001 f84b 	bl	800256e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80014d8:	2046      	movs	r0, #70	; 0x46
 80014da:	f001 f864 	bl	80025a6 <HAL_NVIC_EnableIRQ>

}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	4b59      	ldr	r3, [pc, #356]	; (800166c <MX_GPIO_Init+0x180>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a58      	ldr	r2, [pc, #352]	; (800166c <MX_GPIO_Init+0x180>)
 800150c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b56      	ldr	r3, [pc, #344]	; (800166c <MX_GPIO_Init+0x180>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b52      	ldr	r3, [pc, #328]	; (800166c <MX_GPIO_Init+0x180>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a51      	ldr	r2, [pc, #324]	; (800166c <MX_GPIO_Init+0x180>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b4f      	ldr	r3, [pc, #316]	; (800166c <MX_GPIO_Init+0x180>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	4b4b      	ldr	r3, [pc, #300]	; (800166c <MX_GPIO_Init+0x180>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a4a      	ldr	r2, [pc, #296]	; (800166c <MX_GPIO_Init+0x180>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b48      	ldr	r3, [pc, #288]	; (800166c <MX_GPIO_Init+0x180>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	4b44      	ldr	r3, [pc, #272]	; (800166c <MX_GPIO_Init+0x180>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a43      	ldr	r2, [pc, #268]	; (800166c <MX_GPIO_Init+0x180>)
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b41      	ldr	r3, [pc, #260]	; (800166c <MX_GPIO_Init+0x180>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	4b3d      	ldr	r3, [pc, #244]	; (800166c <MX_GPIO_Init+0x180>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a3c      	ldr	r2, [pc, #240]	; (800166c <MX_GPIO_Init+0x180>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b3a      	ldr	r3, [pc, #232]	; (800166c <MX_GPIO_Init+0x180>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|PC1_Pin|PC3_Pin, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	210b      	movs	r1, #11
 8001592:	4837      	ldr	r0, [pc, #220]	; (8001670 <MX_GPIO_Init+0x184>)
 8001594:	f001 feea 	bl	800336c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA1_Pin|PA3_Pin|PA5_Pin|PA7_Pin, GPIO_PIN_SET);
 8001598:	2201      	movs	r2, #1
 800159a:	21aa      	movs	r1, #170	; 0xaa
 800159c:	4835      	ldr	r0, [pc, #212]	; (8001674 <MX_GPIO_Init+0x188>)
 800159e:	f001 fee5 	bl	800336c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PC1_Pin|PC3_Pin;
 80015a2:	230b      	movs	r3, #11
 80015a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	482d      	ldr	r0, [pc, #180]	; (8001670 <MX_GPIO_Init+0x184>)
 80015ba:	f001 fc6f 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015be:	2301      	movs	r3, #1
 80015c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	4828      	ldr	r0, [pc, #160]	; (8001674 <MX_GPIO_Init+0x188>)
 80015d4:	f001 fc62 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PA1_Pin|PA3_Pin|PA5_Pin|PA7_Pin;
 80015d8:	23aa      	movs	r3, #170	; 0xaa
 80015da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015dc:	2301      	movs	r3, #1
 80015de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	4821      	ldr	r0, [pc, #132]	; (8001674 <MX_GPIO_Init+0x188>)
 80015f0:	f001 fc54 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PD9_Pin|PD11_Pin|PD13_Pin|PD15_Pin;
 80015f4:	f44f 432a 	mov.w	r3, #43520	; 0xaa00
 80015f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001600:	2301      	movs	r3, #1
 8001602:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	481b      	ldr	r0, [pc, #108]	; (8001678 <MX_GPIO_Init+0x18c>)
 800160c:	f001 fc46 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001616:	2312      	movs	r3, #18
 8001618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800161a:	2301      	movs	r3, #1
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001622:	2304      	movs	r3, #4
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	4813      	ldr	r0, [pc, #76]	; (800167c <MX_GPIO_Init+0x190>)
 800162e:	f001 fc35 	bl	8002e9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2006      	movs	r0, #6
 8001638:	f000 ff99 	bl	800256e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800163c:	2006      	movs	r0, #6
 800163e:	f000 ffb2 	bl	80025a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2017      	movs	r0, #23
 8001648:	f000 ff91 	bl	800256e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800164c:	2017      	movs	r0, #23
 800164e:	f000 ffaa 	bl	80025a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	2028      	movs	r0, #40	; 0x28
 8001658:	f000 ff89 	bl	800256e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800165c:	2028      	movs	r0, #40	; 0x28
 800165e:	f000 ffa2 	bl	80025a6 <HAL_NVIC_EnableIRQ>

}
 8001662:	bf00      	nop
 8001664:	3728      	adds	r7, #40	; 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	40020800 	.word	0x40020800
 8001674:	40020000 	.word	0x40020000
 8001678:	40020c00 	.word	0x40020c00
 800167c:	40020400 	.word	0x40020400

08001680 <HAL_I2C_MspInit>:
  /* USER CODE END I2C3_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a29      	ldr	r2, [pc, #164]	; (8001744 <HAL_I2C_MspInit+0xc4>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d14b      	bne.n	800173a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b28      	ldr	r3, [pc, #160]	; (8001748 <HAL_I2C_MspInit+0xc8>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a27      	ldr	r2, [pc, #156]	; (8001748 <HAL_I2C_MspInit+0xc8>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b25      	ldr	r3, [pc, #148]	; (8001748 <HAL_I2C_MspInit+0xc8>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b21      	ldr	r3, [pc, #132]	; (8001748 <HAL_I2C_MspInit+0xc8>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a20      	ldr	r2, [pc, #128]	; (8001748 <HAL_I2C_MspInit+0xc8>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <HAL_I2C_MspInit+0xc8>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e0:	2312      	movs	r3, #18
 80016e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016ec:	2304      	movs	r3, #4
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	4815      	ldr	r0, [pc, #84]	; (800174c <HAL_I2C_MspInit+0xcc>)
 80016f8:	f001 fbd0 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001702:	2312      	movs	r3, #18
 8001704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170a:	2303      	movs	r3, #3
 800170c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800170e:	2304      	movs	r3, #4
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	480d      	ldr	r0, [pc, #52]	; (8001750 <HAL_I2C_MspInit+0xd0>)
 800171a:	f001 fbbf 	bl	8002e9c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_I2C_MspInit+0xc8>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a08      	ldr	r2, [pc, #32]	; (8001748 <HAL_I2C_MspInit+0xc8>)
 8001728:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_I2C_MspInit+0xc8>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800173a:	bf00      	nop
 800173c:	3728      	adds	r7, #40	; 0x28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40005c00 	.word	0x40005c00
 8001748:	40023800 	.word	0x40023800
 800174c:	40020800 	.word	0x40020800
 8001750:	40020000 	.word	0x40020000

08001754 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <HAL_I2C_MspDeInit+0x3c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d10f      	bne.n	8001786 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <HAL_I2C_MspDeInit+0x40>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <HAL_I2C_MspDeInit+0x40>)
 800176c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8001772:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001776:	4808      	ldr	r0, [pc, #32]	; (8001798 <HAL_I2C_MspDeInit+0x44>)
 8001778:	f001 fd14 	bl	80031a4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 800177c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001780:	4806      	ldr	r0, [pc, #24]	; (800179c <HAL_I2C_MspDeInit+0x48>)
 8001782:	f001 fd0f 	bl	80031a4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40005c00 	.word	0x40005c00
 8001794:	40023800 	.word	0x40023800
 8001798:	40020800 	.word	0x40020800
 800179c:	40020000 	.word	0x40020000

080017a0 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <MX_I2S3_Init+0x54>)
 80017a6:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <MX_I2S3_Init+0x58>)
 80017a8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MX_I2S3_Init+0x54>)
 80017ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <MX_I2S3_Init+0x54>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <MX_I2S3_Init+0x54>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80017be:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <MX_I2S3_Init+0x54>)
 80017c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <MX_I2S3_Init+0x54>)
 80017c8:	f64a 4244 	movw	r2, #44100	; 0xac44
 80017cc:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_I2S3_Init+0x54>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <MX_I2S3_Init+0x54>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <MX_I2S3_Init+0x54>)
 80017dc:	2200      	movs	r2, #0
 80017de:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80017e0:	4804      	ldr	r0, [pc, #16]	; (80017f4 <MX_I2S3_Init+0x54>)
 80017e2:	f004 f9fd 	bl	8005be0 <HAL_I2S_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80017ec:	f000 fa3c 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	2000020c 	.word	0x2000020c
 80017f8:	40003c00 	.word	0x40003c00

080017fc <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b090      	sub	sp, #64	; 0x40
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
 8001824:	615a      	str	r2, [r3, #20]
  if(i2sHandle->Instance==SPI3)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a4f      	ldr	r2, [pc, #316]	; (8001968 <HAL_I2S_MspInit+0x16c>)
 800182c:	4293      	cmp	r3, r2
 800182e:	f040 8097 	bne.w	8001960 <HAL_I2S_MspInit+0x164>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001832:	2301      	movs	r3, #1
 8001834:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001836:	23c8      	movs	r3, #200	; 0xc8
 8001838:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800183a:	2305      	movs	r3, #5
 800183c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800183e:	2302      	movs	r3, #2
 8001840:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4618      	mov	r0, r3
 8001848:	f005 feee 	bl	8007628 <HAL_RCCEx_PeriphCLKConfig>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8001852:	f000 fa09 	bl	8001c68 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b44      	ldr	r3, [pc, #272]	; (800196c <HAL_I2S_MspInit+0x170>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a43      	ldr	r2, [pc, #268]	; (800196c <HAL_I2S_MspInit+0x170>)
 8001860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b41      	ldr	r3, [pc, #260]	; (800196c <HAL_I2S_MspInit+0x170>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b3d      	ldr	r3, [pc, #244]	; (800196c <HAL_I2S_MspInit+0x170>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a3c      	ldr	r2, [pc, #240]	; (800196c <HAL_I2S_MspInit+0x170>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b3a      	ldr	r3, [pc, #232]	; (800196c <HAL_I2S_MspInit+0x170>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	4b36      	ldr	r3, [pc, #216]	; (800196c <HAL_I2S_MspInit+0x170>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a35      	ldr	r2, [pc, #212]	; (800196c <HAL_I2S_MspInit+0x170>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b33      	ldr	r3, [pc, #204]	; (800196c <HAL_I2S_MspInit+0x170>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018aa:	2310      	movs	r3, #16
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018ba:	2306      	movs	r3, #6
 80018bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c2:	4619      	mov	r1, r3
 80018c4:	482a      	ldr	r0, [pc, #168]	; (8001970 <HAL_I2S_MspInit+0x174>)
 80018c6:	f001 fae9 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80018ca:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018dc:	2306      	movs	r3, #6
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e4:	4619      	mov	r1, r3
 80018e6:	4823      	ldr	r0, [pc, #140]	; (8001974 <HAL_I2S_MspInit+0x178>)
 80018e8:	f001 fad8 	bl	8002e9c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80018ec:	4b22      	ldr	r3, [pc, #136]	; (8001978 <HAL_I2S_MspInit+0x17c>)
 80018ee:	4a23      	ldr	r2, [pc, #140]	; (800197c <HAL_I2S_MspInit+0x180>)
 80018f0:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80018f2:	4b21      	ldr	r3, [pc, #132]	; (8001978 <HAL_I2S_MspInit+0x17c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018f8:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <HAL_I2S_MspInit+0x17c>)
 80018fa:	2240      	movs	r2, #64	; 0x40
 80018fc:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fe:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <HAL_I2S_MspInit+0x17c>)
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001904:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <HAL_I2S_MspInit+0x17c>)
 8001906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800190a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <HAL_I2S_MspInit+0x17c>)
 800190e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001912:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001914:	4b18      	ldr	r3, [pc, #96]	; (8001978 <HAL_I2S_MspInit+0x17c>)
 8001916:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800191a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 800191c:	4b16      	ldr	r3, [pc, #88]	; (8001978 <HAL_I2S_MspInit+0x17c>)
 800191e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001922:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <HAL_I2S_MspInit+0x17c>)
 8001926:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800192a:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_I2S_MspInit+0x17c>)
 800192e:	2204      	movs	r2, #4
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_I2S_MspInit+0x17c>)
 8001934:	2203      	movs	r2, #3
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_I2S_MspInit+0x17c>)
 800193a:	2200      	movs	r2, #0
 800193c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_I2S_MspInit+0x17c>)
 8001940:	2200      	movs	r2, #0
 8001942:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <HAL_I2S_MspInit+0x17c>)
 8001946:	f000 fe49 	bl	80025dc <HAL_DMA_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_I2S_MspInit+0x158>
    {
      Error_Handler();
 8001950:	f000 f98a 	bl	8001c68 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a08      	ldr	r2, [pc, #32]	; (8001978 <HAL_I2S_MspInit+0x17c>)
 8001958:	639a      	str	r2, [r3, #56]	; 0x38
 800195a:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_I2S_MspInit+0x17c>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001960:	bf00      	nop
 8001962:	3740      	adds	r7, #64	; 0x40
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40003c00 	.word	0x40003c00
 800196c:	40023800 	.word	0x40023800
 8001970:	40020000 	.word	0x40020000
 8001974:	40020800 	.word	0x40020800
 8001978:	20000254 	.word	0x20000254
 800197c:	40026088 	.word	0x40026088

08001980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001984:	f000 fc82 	bl	800228c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001988:	f000 f8b8 	bl	8001afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800198c:	f7ff fdae 	bl	80014ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001990:	f7ff fd6e 	bl	8001470 <MX_DMA_Init>
  MX_I2S3_Init();
 8001994:	f7ff ff04 	bl	80017a0 <MX_I2S3_Init>
  MX_FATFS_Init();
 8001998:	f007 fc74 	bl	8009284 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 800199c:	f00e f884 	bl	800faa8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80019a0:	f00e f8a8 	bl	800faf4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

   	    if (Appli_state == APPLICATION_READY)
 80019a4:	4b4c      	ldr	r3, [pc, #304]	; (8001ad8 <main+0x158>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d1f9      	bne.n	80019a0 <main+0x20>
   	    {
   	    	Mount_USB();
 80019ac:	f7ff fa1e 	bl	8000dec <Mount_USB>
   	    	AUDIO_PLAYER_Start(idx);
 80019b0:	4b4a      	ldr	r3, [pc, #296]	; (8001adc <main+0x15c>)
 80019b2:	f993 3000 	ldrsb.w	r3, [r3]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 fa97 	bl	8001eec <AUDIO_PLAYER_Start>
   	    	//display_cancion(idx);
   	    	Activar_Parlante(idS);
 80019be:	4b48      	ldr	r3, [pc, #288]	; (8001ae0 <main+0x160>)
 80019c0:	f993 3000 	ldrsb.w	r3, [r3]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f954 	bl	8001c74 <Activar_Parlante>
   	    	while (1)
   	    	{
   	    		AUDIO_PLAYER_Process(FALSE);
 80019cc:	2000      	movs	r0, #0
 80019ce:	f000 faed 	bl	8001fac <AUDIO_PLAYER_Process>

   	    		if (next_song)
 80019d2:	4b44      	ldr	r3, [pc, #272]	; (8001ae4 <main+0x164>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d01c      	beq.n	8001a14 <main+0x94>
   	    		{
   	    			HAL_Delay(20);
 80019da:	2014      	movs	r0, #20
 80019dc:	f000 fcc8 	bl	8002370 <HAL_Delay>
   	    			//AudioState = AUDIO_STATE_PAUSE;
   	    			idx = idx + 1;
 80019e0:	4b3e      	ldr	r3, [pc, #248]	; (8001adc <main+0x15c>)
 80019e2:	f993 3000 	ldrsb.w	r3, [r3]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	3301      	adds	r3, #1
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	b25a      	sxtb	r2, r3
 80019ee:	4b3b      	ldr	r3, [pc, #236]	; (8001adc <main+0x15c>)
 80019f0:	701a      	strb	r2, [r3, #0]
   	    			/* Control de indice */
   	    			if(idx>(cantidad_wavs-1))
 80019f2:	4b3d      	ldr	r3, [pc, #244]	; (8001ae8 <main+0x168>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	4b38      	ldr	r3, [pc, #224]	; (8001adc <main+0x15c>)
 80019fa:	f993 3000 	ldrsb.w	r3, [r3]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	dc02      	bgt.n	8001a08 <main+0x88>
   	    			{
   	    				idx = 0;
 8001a02:	4b36      	ldr	r3, [pc, #216]	; (8001adc <main+0x15c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
   	    			}
   	    			next_song = false;
 8001a08:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <main+0x164>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
   	    			//display_cancion(idx);
   	    			AudioState = AUDIO_STATE_NEXT;
 8001a0e:	4b37      	ldr	r3, [pc, #220]	; (8001aec <main+0x16c>)
 8001a10:	2205      	movs	r2, #5
 8001a12:	701a      	strb	r2, [r3, #0]
      	    	};

   	    		if (next_speaker)
 8001a14:	4b36      	ldr	r3, [pc, #216]	; (8001af0 <main+0x170>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d01d      	beq.n	8001a58 <main+0xd8>
   	    		{
   	    			idS = idS + 1;
 8001a1c:	4b30      	ldr	r3, [pc, #192]	; (8001ae0 <main+0x160>)
 8001a1e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	3301      	adds	r3, #1
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	b25a      	sxtb	r2, r3
 8001a2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ae0 <main+0x160>)
 8001a2c:	701a      	strb	r2, [r3, #0]
   	    			/* Control de indice */
   	    			if(idS>NUM_PARLANTES - 1)
 8001a2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <main+0x160>)
 8001a30:	f993 3000 	ldrsb.w	r3, [r3]
 8001a34:	2b05      	cmp	r3, #5
 8001a36:	dd02      	ble.n	8001a3e <main+0xbe>
   	    			{
   	    				idS = 0;
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <main+0x160>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
   	    			}
   	    			Activar_Parlante(idS);
 8001a3e:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <main+0x160>)
 8001a40:	f993 3000 	ldrsb.w	r3, [r3]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f914 	bl	8001c74 <Activar_Parlante>
   	    			next_speaker = false;
 8001a4c:	4b28      	ldr	r3, [pc, #160]	; (8001af0 <main+0x170>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
   	    			//display_cancion(idx);
   	    			AudioState = AUDIO_STATE_PLAY;
 8001a52:	4b26      	ldr	r3, [pc, #152]	; (8001aec <main+0x16c>)
 8001a54:	2203      	movs	r2, #3
 8001a56:	701a      	strb	r2, [r3, #0]
   	    		}

   	    		if (prev_song)
 8001a58:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <main+0x174>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d01a      	beq.n	8001a96 <main+0x116>
   	    		{
   	    			idx = idx - 1;
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <main+0x15c>)
 8001a62:	f993 3000 	ldrsb.w	r3, [r3]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	b25a      	sxtb	r2, r3
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <main+0x15c>)
 8001a70:	701a      	strb	r2, [r3, #0]
   	    			/* Control de indice */
   	    			if(idx<0)
 8001a72:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <main+0x15c>)
 8001a74:	f993 3000 	ldrsb.w	r3, [r3]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	da06      	bge.n	8001a8a <main+0x10a>
   	    			{
   	    				idx = cantidad_wavs-1;
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <main+0x168>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	b25a      	sxtb	r2, r3
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <main+0x15c>)
 8001a88:	701a      	strb	r2, [r3, #0]
   	    			}
   	    			AudioState = AUDIO_STATE_PREVIOUS;
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <main+0x16c>)
 8001a8c:	2206      	movs	r2, #6
 8001a8e:	701a      	strb	r2, [r3, #0]
   	    			prev_song = false;
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <main+0x174>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
   	    			//display_cancion(idx);
   	    		};

   	    		if (prev_speaker)
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <main+0x178>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d096      	beq.n	80019cc <main+0x4c>

   	    		{
   	    			idS = idS - 1;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <main+0x160>)
 8001aa0:	f993 3000 	ldrsb.w	r3, [r3]
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	b25a      	sxtb	r2, r3
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <main+0x160>)
 8001aae:	701a      	strb	r2, [r3, #0]
   	    			/* Control de indice */
   	    			if(idS<0)
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <main+0x160>)
 8001ab2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da02      	bge.n	8001ac0 <main+0x140>
   	    			{
   	    				idS = NUM_PARLANTES - 1;
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <main+0x160>)
 8001abc:	2205      	movs	r2, #5
 8001abe:	701a      	strb	r2, [r3, #0]
   	    			}
   	    			Activar_Parlante(idS);
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <main+0x160>)
 8001ac2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 f8d3 	bl	8001c74 <Activar_Parlante>
   	    			prev_speaker = false;
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <main+0x178>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
   	    		AUDIO_PLAYER_Process(FALSE);
 8001ad4:	e77a      	b.n	80019cc <main+0x4c>
 8001ad6:	bf00      	nop
 8001ad8:	20002254 	.word	0x20002254
 8001adc:	200002ba 	.word	0x200002ba
 8001ae0:	200002bb 	.word	0x200002bb
 8001ae4:	200002b6 	.word	0x200002b6
 8001ae8:	20000035 	.word	0x20000035
 8001aec:	200013cc 	.word	0x200013cc
 8001af0:	200002b8 	.word	0x200002b8
 8001af4:	200002b7 	.word	0x200002b7
 8001af8:	200002b9 	.word	0x200002b9

08001afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b094      	sub	sp, #80	; 0x50
 8001b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b02:	f107 0320 	add.w	r3, r7, #32
 8001b06:	2230      	movs	r2, #48	; 0x30
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f00e fbc0 	bl	8010290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b10:	f107 030c 	add.w	r3, r7, #12
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	4b27      	ldr	r3, [pc, #156]	; (8001bc4 <SystemClock_Config+0xc8>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	4a26      	ldr	r2, [pc, #152]	; (8001bc4 <SystemClock_Config+0xc8>)
 8001b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b30:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <SystemClock_Config+0xc8>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <SystemClock_Config+0xcc>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a20      	ldr	r2, [pc, #128]	; (8001bc8 <SystemClock_Config+0xcc>)
 8001b46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <SystemClock_Config+0xcc>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b62:	2302      	movs	r3, #2
 8001b64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001b70:	23c0      	movs	r3, #192	; 0xc0
 8001b72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b74:	2304      	movs	r3, #4
 8001b76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001b78:	2308      	movs	r3, #8
 8001b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b7c:	f107 0320 	add.w	r3, r7, #32
 8001b80:	4618      	mov	r0, r3
 8001b82:	f005 f8cd 	bl	8006d20 <HAL_RCC_OscConfig>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b8c:	f000 f86c 	bl	8001c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b90:	230f      	movs	r3, #15
 8001b92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b94:	2302      	movs	r3, #2
 8001b96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ba0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	2103      	movs	r1, #3
 8001bac:	4618      	mov	r0, r3
 8001bae:	f005 fb2f 	bl	8007210 <HAL_RCC_ClockConfig>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001bb8:	f000 f856 	bl	8001c68 <Error_Handler>
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	3750      	adds	r7, #80	; 0x50
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40007000 	.word	0x40007000

08001bcc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)  // Cambiá esto si usás otro UART
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_UART_RxCpltCallback+0x2c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d107      	bne.n	8001bee <HAL_UART_RxCpltCallback+0x22>
    {
        uart_cmd_received = true;
 8001bde:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <HAL_UART_RxCpltCallback+0x30>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]

        // Reinicia la recepción para recibir el próximo byte
        HAL_UART_Receive_IT(&huart1, &uart_rx_byte, 1);
 8001be4:	2201      	movs	r2, #1
 8001be6:	4906      	ldr	r1, [pc, #24]	; (8001c00 <HAL_UART_RxCpltCallback+0x34>)
 8001be8:	4806      	ldr	r0, [pc, #24]	; (8001c04 <HAL_UART_RxCpltCallback+0x38>)
 8001bea:	f005 feaf 	bl	800794c <HAL_UART_Receive_IT>
    }
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40011000 	.word	0x40011000
 8001bfc:	200002b5 	.word	0x200002b5
 8001c00:	200002b4 	.word	0x200002b4
 8001c04:	200002c0 	.word	0x200002c0

08001c08 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == PD15_Pin)
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c18:	d102      	bne.n	8001c20 <HAL_GPIO_EXTI_Callback+0x18>
	{
		next_song = true;
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <HAL_GPIO_EXTI_Callback+0x50>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == PD13_Pin)
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c26:	d102      	bne.n	8001c2e <HAL_GPIO_EXTI_Callback+0x26>
	{
		next_speaker = true;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <HAL_GPIO_EXTI_Callback+0x54>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == PD11_Pin)
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c34:	d102      	bne.n	8001c3c <HAL_GPIO_EXTI_Callback+0x34>
	{
		prev_speaker = true;
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_GPIO_EXTI_Callback+0x58>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == PD9_Pin)
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c42:	d102      	bne.n	8001c4a <HAL_GPIO_EXTI_Callback+0x42>
	{
		prev_song = true;
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
	}
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	200002b6 	.word	0x200002b6
 8001c5c:	200002b8 	.word	0x200002b8
 8001c60:	200002b9 	.word	0x200002b9
 8001c64:	200002b7 	.word	0x200002b7

08001c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c6c:	b672      	cpsid	i
}
 8001c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <Error_Handler+0x8>
	...

08001c74 <Activar_Parlante>:
};


void Parlantes_Init(void) {}

void Activar_Parlante(uint8_t numero) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < NUM_PARLANTES; i++) {
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	e021      	b.n	8001cc8 <Activar_Parlante+0x54>
        if (i == (numero)) {
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d10d      	bne.n	8001ca8 <Activar_Parlante+0x34>
            HAL_GPIO_WritePin(parlantes[i].puerto, parlantes[i].pin, GPIO_PIN_RESET);
 8001c8c:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <Activar_Parlante+0x64>)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001c94:	4a10      	ldr	r2, [pc, #64]	; (8001cd8 <Activar_Parlante+0x64>)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	889b      	ldrh	r3, [r3, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f001 fb63 	bl	800336c <HAL_GPIO_WritePin>
 8001ca6:	e00c      	b.n	8001cc2 <Activar_Parlante+0x4e>
        } else {
            HAL_GPIO_WritePin(parlantes[i].puerto, parlantes[i].pin, GPIO_PIN_SET);
 8001ca8:	4a0b      	ldr	r2, [pc, #44]	; (8001cd8 <Activar_Parlante+0x64>)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001cb0:	4a09      	ldr	r2, [pc, #36]	; (8001cd8 <Activar_Parlante+0x64>)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	889b      	ldrh	r3, [r3, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f001 fb55 	bl	800336c <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_PARLANTES; i++) {
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	ddda      	ble.n	8001c84 <Activar_Parlante+0x10>
        }
    }
}
 8001cce:	bf00      	nop
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000038 	.word	0x20000038

08001cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <HAL_MspInit+0x4c>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	4a0f      	ldr	r2, [pc, #60]	; (8001d28 <HAL_MspInit+0x4c>)
 8001cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <HAL_MspInit+0x4c>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_MspInit+0x4c>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	4a08      	ldr	r2, [pc, #32]	; (8001d28 <HAL_MspInit+0x4c>)
 8001d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_MspInit+0x4c>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d1a:	2007      	movs	r0, #7
 8001d1c:	f000 fc1c 	bl	8002558 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40023800 	.word	0x40023800

08001d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <NMI_Handler+0x4>

08001d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <HardFault_Handler+0x4>

08001d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <MemManage_Handler+0x4>

08001d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d42:	e7fe      	b.n	8001d42 <BusFault_Handler+0x4>

08001d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <UsageFault_Handler+0x4>

08001d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d78:	f000 fada 	bl	8002330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001d84:	2001      	movs	r0, #1
 8001d86:	f001 fb0b 	bl	80033a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <DMA1_Stream5_IRQHandler+0x10>)
 8001d96:	f000 fe17 	bl	80029c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000254 	.word	0x20000254

08001da4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PD9_Pin);
 8001da8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001dac:	f001 faf8 	bl	80033a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001db8:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <USART1_IRQHandler+0x10>)
 8001dba:	f005 fdf7 	bl	80079ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200002c0 	.word	0x200002c0

08001dc8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PD11_Pin);
 8001dcc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001dd0:	f001 fae6 	bl	80033a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PD13_Pin);
 8001dd4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001dd8:	f001 fae2 	bl	80033a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PD15_Pin);
 8001ddc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001de0:	f001 fade 	bl	80033a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <DMA2_Stream2_IRQHandler+0x10>)
 8001dee:	f000 fdeb 	bl	80029c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000304 	.word	0x20000304

08001dfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <OTG_FS_IRQHandler+0x10>)
 8001e02:	f001 fd4f 	bl	80038a4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20002258 	.word	0x20002258

08001e10 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <DMA2_Stream7_IRQHandler+0x10>)
 8001e16:	f000 fdd7 	bl	80029c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000364 	.word	0x20000364

08001e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e2c:	4a14      	ldr	r2, [pc, #80]	; (8001e80 <_sbrk+0x5c>)
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <_sbrk+0x60>)
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d102      	bne.n	8001e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <_sbrk+0x64>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <_sbrk+0x68>)
 8001e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d207      	bcs.n	8001e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e54:	f00e fa5e 	bl	8010314 <__errno>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e62:	e009      	b.n	8001e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <_sbrk+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6a:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a05      	ldr	r2, [pc, #20]	; (8001e88 <_sbrk+0x64>)
 8001e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e76:	68fb      	ldr	r3, [r7, #12]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20020000 	.word	0x20020000
 8001e84:	00000400 	.word	0x00000400
 8001e88:	200002bc 	.word	0x200002bc
 8001e8c:	200026a8 	.word	0x200026a8

08001e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <SystemInit+0x28>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9a:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <SystemInit+0x28>)
 8001e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <SystemInit+0x28>)
 8001ea6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001eaa:	609a      	str	r2, [r3, #8]
#endif
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <PlayerInit+0x2c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	2003      	movs	r0, #3
 8001ed0:	f7fe fb00 	bl	80004d4 <AUDIO_OUT_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <PlayerInit+0x22>
	{
		return 1;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 8001ede:	2300      	movs	r3, #0
	}
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	2000006c 	.word	0x2000006c

08001eec <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
	UINT bytesread;

  f_close(&WavFile);
 8001ef6:	4828      	ldr	r0, [pc, #160]	; (8001f98 <AUDIO_PLAYER_Start+0xac>)
 8001ef8:	f00d f9ab 	bl	800f252 <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8001efc:	f7fe ff66 	bl	8000dcc <AUDIO_GetWavObjectNumber>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461a      	mov	r2, r3
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d93f      	bls.n	8001f8c <AUDIO_PLAYER_Start+0xa0>
  {

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 8001f0c:	79fa      	ldrb	r2, [r7, #7]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	4a20      	ldr	r2, [pc, #128]	; (8001f9c <AUDIO_PLAYER_Start+0xb0>)
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	2201      	movs	r2, #1
 8001f20:	4619      	mov	r1, r3
 8001f22:	481d      	ldr	r0, [pc, #116]	; (8001f98 <AUDIO_PLAYER_Start+0xac>)
 8001f24:	f00c fe1a 	bl	800eb5c <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	222c      	movs	r2, #44	; 0x2c
 8001f2e:	491c      	ldr	r1, [pc, #112]	; (8001fa0 <AUDIO_PLAYER_Start+0xb4>)
 8001f30:	4819      	ldr	r0, [pc, #100]	; (8001f98 <AUDIO_PLAYER_Start+0xac>)
 8001f32:	f00c ffd1 	bl	800eed8 <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 8001f36:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <AUDIO_PLAYER_Start+0xb4>)
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff ffbe 	bl	8001ebc <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8001f40:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <AUDIO_PLAYER_Start+0xb8>)
 8001f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 44);
 8001f4a:	212c      	movs	r1, #44	; 0x2c
 8001f4c:	4812      	ldr	r0, [pc, #72]	; (8001f98 <AUDIO_PLAYER_Start+0xac>)
 8001f4e:	f00d f9aa 	bl	800f2a6 <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 8001f52:	f107 030c 	add.w	r3, r7, #12
 8001f56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f5a:	4912      	ldr	r1, [pc, #72]	; (8001fa4 <AUDIO_PLAYER_Start+0xb8>)
 8001f5c:	480e      	ldr	r0, [pc, #56]	; (8001f98 <AUDIO_PLAYER_Start+0xac>)
 8001f5e:	f00c ffbb 	bl	800eed8 <f_read>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d111      	bne.n	8001f8c <AUDIO_PLAYER_Start+0xa0>
    {
      AudioState = AUDIO_STATE_PLAY;
 8001f68:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <AUDIO_PLAYER_Start+0xbc>)
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00b      	beq.n	8001f8c <AUDIO_PLAYER_Start+0xa0>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8001f74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f78:	480a      	ldr	r0, [pc, #40]	; (8001fa4 <AUDIO_PLAYER_Start+0xb8>)
 8001f7a:	f7fe faf9 	bl	8000570 <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4a08      	ldr	r2, [pc, #32]	; (8001fa4 <AUDIO_PLAYER_Start+0xb8>)
 8001f82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f86:	6053      	str	r3, [r2, #4]
          return AUDIO_ERROR_NONE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e000      	b.n	8001f8e <AUDIO_PLAYER_Start+0xa2>
        }
      }
  }
  return AUDIO_ERROR_IO;
 8001f8c:	2301      	movs	r3, #1
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200017d8 	.word	0x200017d8
 8001f9c:	200013d0 	.word	0x200013d0
 8001fa0:	200017ac 	.word	0x200017ac
 8001fa4:	200003c4 	.word	0x200003c4
 8001fa8:	200013cc 	.word	0x200013cc

08001fac <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop)
{
 8001fac:	b590      	push	{r4, r7, lr}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	75fb      	strb	r3, [r7, #23]
  
  switch(AudioState)
 8001fba:	4b84      	ldr	r3, [pc, #528]	; (80021cc <AUDIO_PLAYER_Process+0x220>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	3b03      	subs	r3, #3
 8001fc0:	2b0a      	cmp	r3, #10
 8001fc2:	f200 80fb 	bhi.w	80021bc <AUDIO_PLAYER_Process+0x210>
 8001fc6:	a201      	add	r2, pc, #4	; (adr r2, 8001fcc <AUDIO_PLAYER_Process+0x20>)
 8001fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fcc:	08001ff9 	.word	0x08001ff9
 8001fd0:	080021bd 	.word	0x080021bd
 8001fd4:	080020bf 	.word	0x080020bf
 8001fd8:	08002117 	.word	0x08002117
 8001fdc:	080021bd 	.word	0x080021bd
 8001fe0:	080021bd 	.word	0x080021bd
 8001fe4:	080020ad 	.word	0x080020ad
 8001fe8:	08002159 	.word	0x08002159
 8001fec:	08002165 	.word	0x08002165
 8001ff0:	08002171 	.word	0x08002171
 8001ff4:	08002197 	.word	0x08002197
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8001ff8:	4b75      	ldr	r3, [pc, #468]	; (80021d0 <AUDIO_PLAYER_Process+0x224>)
 8001ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	4b74      	ldr	r3, [pc, #464]	; (80021d4 <AUDIO_PLAYER_Process+0x228>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	429a      	cmp	r2, r3
 8002006:	d305      	bcc.n	8002014 <AUDIO_PLAYER_Process+0x68>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002008:	2002      	movs	r0, #2
 800200a:	f7fe fb07 	bl	800061c <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 800200e:	4b6f      	ldr	r3, [pc, #444]	; (80021cc <AUDIO_PLAYER_Process+0x220>)
 8002010:	2205      	movs	r2, #5
 8002012:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8002014:	4b6e      	ldr	r3, [pc, #440]	; (80021d0 <AUDIO_PLAYER_Process+0x224>)
 8002016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d11e      	bne.n	800205e <AUDIO_PLAYER_Process+0xb2>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8002020:	f107 030c 	add.w	r3, r7, #12
 8002024:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002028:	4969      	ldr	r1, [pc, #420]	; (80021d0 <AUDIO_PLAYER_Process+0x224>)
 800202a:	486b      	ldr	r0, [pc, #428]	; (80021d8 <AUDIO_PLAYER_Process+0x22c>)
 800202c:	f00c ff54 	bl	800eed8 <f_read>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d004      	beq.n	8002040 <AUDIO_PLAYER_Process+0x94>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002036:	2002      	movs	r0, #2
 8002038:	f7fe faf0 	bl	800061c <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 800203c:	2301      	movs	r3, #1
 800203e:	e0c1      	b.n	80021c4 <AUDIO_PLAYER_Process+0x218>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8002040:	4b63      	ldr	r3, [pc, #396]	; (80021d0 <AUDIO_PLAYER_Process+0x224>)
 8002042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 800204a:	4b61      	ldr	r3, [pc, #388]	; (80021d0 <AUDIO_PLAYER_Process+0x224>)
 800204c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4413      	add	r3, r2
 8002056:	4a5e      	ldr	r2, [pc, #376]	; (80021d0 <AUDIO_PLAYER_Process+0x224>)
 8002058:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800205c:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 800205e:	4b5c      	ldr	r3, [pc, #368]	; (80021d0 <AUDIO_PLAYER_Process+0x224>)
 8002060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b02      	cmp	r3, #2
 8002068:	f040 80aa 	bne.w	80021c0 <AUDIO_PLAYER_Process+0x214>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 800206c:	f107 030c 	add.w	r3, r7, #12
 8002070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002074:	4959      	ldr	r1, [pc, #356]	; (80021dc <AUDIO_PLAYER_Process+0x230>)
 8002076:	4858      	ldr	r0, [pc, #352]	; (80021d8 <AUDIO_PLAYER_Process+0x22c>)
 8002078:	f00c ff2e 	bl	800eed8 <f_read>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d004      	beq.n	800208c <AUDIO_PLAYER_Process+0xe0>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002082:	2002      	movs	r0, #2
 8002084:	f7fe faca 	bl	800061c <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8002088:	2301      	movs	r3, #1
 800208a:	e09b      	b.n	80021c4 <AUDIO_PLAYER_Process+0x218>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 800208c:	4b50      	ldr	r3, [pc, #320]	; (80021d0 <AUDIO_PLAYER_Process+0x224>)
 800208e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8002096:	4b4e      	ldr	r3, [pc, #312]	; (80021d0 <AUDIO_PLAYER_Process+0x224>)
 8002098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4413      	add	r3, r2
 80020a2:	4a4b      	ldr	r2, [pc, #300]	; (80021d0 <AUDIO_PLAYER_Process+0x224>)
 80020a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020a8:	6053      	str	r3, [r2, #4]
    }
    break;
 80020aa:	e089      	b.n	80021c0 <AUDIO_PLAYER_Process+0x214>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80020ac:	2002      	movs	r0, #2
 80020ae:	f7fe fab5 	bl	800061c <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 80020b2:	4b46      	ldr	r3, [pc, #280]	; (80021cc <AUDIO_PLAYER_Process+0x220>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 80020b8:	2301      	movs	r3, #1
 80020ba:	75fb      	strb	r3, [r7, #23]
    break;
 80020bc:	e081      	b.n	80021c2 <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_NEXT:
	uint32_t Cmd =0;
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
	AUDIO_OUT_SetMute(Cmd);
 80020c2:	6938      	ldr	r0, [r7, #16]
 80020c4:	f7fe faea 	bl	800069c <AUDIO_OUT_SetMute>
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 80020c8:	4b45      	ldr	r3, [pc, #276]	; (80021e0 <AUDIO_PLAYER_Process+0x234>)
 80020ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3301      	adds	r3, #1
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	b21a      	sxth	r2, r3
 80020d6:	4b42      	ldr	r3, [pc, #264]	; (80021e0 <AUDIO_PLAYER_Process+0x234>)
 80020d8:	801a      	strh	r2, [r3, #0]
 80020da:	4b41      	ldr	r3, [pc, #260]	; (80021e0 <AUDIO_PLAYER_Process+0x234>)
 80020dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e0:	461c      	mov	r4, r3
 80020e2:	f7fe fe73 	bl	8000dcc <AUDIO_GetWavObjectNumber>
 80020e6:	4603      	mov	r3, r0
 80020e8:	429c      	cmp	r4, r3
 80020ea:	db09      	blt.n	8002100 <AUDIO_PLAYER_Process+0x154>
    {
    	if (isLoop)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <AUDIO_PLAYER_Process+0x14e>
    	{
    		FilePos = 0;
 80020f2:	4b3b      	ldr	r3, [pc, #236]	; (80021e0 <AUDIO_PLAYER_Process+0x234>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	801a      	strh	r2, [r3, #0]
 80020f8:	e002      	b.n	8002100 <AUDIO_PLAYER_Process+0x154>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 80020fa:	4b34      	ldr	r3, [pc, #208]	; (80021cc <AUDIO_PLAYER_Process+0x220>)
 80020fc:	2209      	movs	r2, #9
 80020fe:	701a      	strb	r2, [r3, #0]
    	}
    }

    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002100:	2002      	movs	r0, #2
 8002102:	f7fe fa8b 	bl	800061c <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8002106:	4b36      	ldr	r3, [pc, #216]	; (80021e0 <AUDIO_PLAYER_Process+0x234>)
 8002108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff feec 	bl	8001eec <AUDIO_PLAYER_Start>
    break;    
 8002114:	e055      	b.n	80021c2 <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8002116:	4b32      	ldr	r3, [pc, #200]	; (80021e0 <AUDIO_PLAYER_Process+0x234>)
 8002118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800211c:	b29b      	uxth	r3, r3
 800211e:	3b01      	subs	r3, #1
 8002120:	b29b      	uxth	r3, r3
 8002122:	b21a      	sxth	r2, r3
 8002124:	4b2e      	ldr	r3, [pc, #184]	; (80021e0 <AUDIO_PLAYER_Process+0x234>)
 8002126:	801a      	strh	r2, [r3, #0]
 8002128:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <AUDIO_PLAYER_Process+0x234>)
 800212a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800212e:	2b00      	cmp	r3, #0
 8002130:	da07      	bge.n	8002142 <AUDIO_PLAYER_Process+0x196>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 8002132:	f7fe fe4b 	bl	8000dcc <AUDIO_GetWavObjectNumber>
 8002136:	4603      	mov	r3, r0
 8002138:	3b01      	subs	r3, #1
 800213a:	b29b      	uxth	r3, r3
 800213c:	b21a      	sxth	r2, r3
 800213e:	4b28      	ldr	r3, [pc, #160]	; (80021e0 <AUDIO_PLAYER_Process+0x234>)
 8002140:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_HW);
 8002142:	2001      	movs	r0, #1
 8002144:	f7fe fa6a 	bl	800061c <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8002148:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <AUDIO_PLAYER_Process+0x234>)
 800214a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fecb 	bl	8001eec <AUDIO_PLAYER_Start>
    break;   
 8002156:	e034      	b.n	80021c2 <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 8002158:	f7fe fa34 	bl	80005c4 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <AUDIO_PLAYER_Process+0x220>)
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
    break;
 8002162:	e02e      	b.n	80021c2 <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 8002164:	f7fe fa44 	bl	80005f0 <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 8002168:	4b18      	ldr	r3, [pc, #96]	; (80021cc <AUDIO_PLAYER_Process+0x220>)
 800216a:	2203      	movs	r2, #3
 800216c:	701a      	strb	r2, [r3, #0]
    break;
 800216e:	e028      	b.n	80021c2 <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 8002170:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <AUDIO_PLAYER_Process+0x238>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b5a      	cmp	r3, #90	; 0x5a
 8002176:	d804      	bhi.n	8002182 <AUDIO_PLAYER_Process+0x1d6>
    {
      uwVolume += 10;
 8002178:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <AUDIO_PLAYER_Process+0x238>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	330a      	adds	r3, #10
 800217e:	4a19      	ldr	r2, [pc, #100]	; (80021e4 <AUDIO_PLAYER_Process+0x238>)
 8002180:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8002182:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <AUDIO_PLAYER_Process+0x238>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe fa6f 	bl	800066c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 800218e:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <AUDIO_PLAYER_Process+0x220>)
 8002190:	2203      	movs	r2, #3
 8002192:	701a      	strb	r2, [r3, #0]
    break;
 8002194:	e015      	b.n	80021c2 <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <AUDIO_PLAYER_Process+0x238>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b09      	cmp	r3, #9
 800219c:	d904      	bls.n	80021a8 <AUDIO_PLAYER_Process+0x1fc>
    {
      uwVolume -= 10;
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <AUDIO_PLAYER_Process+0x238>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	3b0a      	subs	r3, #10
 80021a4:	4a0f      	ldr	r2, [pc, #60]	; (80021e4 <AUDIO_PLAYER_Process+0x238>)
 80021a6:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 80021a8:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <AUDIO_PLAYER_Process+0x238>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fa5c 	bl	800066c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <AUDIO_PLAYER_Process+0x220>)
 80021b6:	2203      	movs	r2, #3
 80021b8:	701a      	strb	r2, [r3, #0]
    break;
 80021ba:	e002      	b.n	80021c2 <AUDIO_PLAYER_Process+0x216>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 80021bc:	bf00      	nop
 80021be:	e000      	b.n	80021c2 <AUDIO_PLAYER_Process+0x216>
    break;
 80021c0:	bf00      	nop
  }
  return audio_error;
 80021c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	371c      	adds	r7, #28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd90      	pop	{r4, r7, pc}
 80021cc:	200013cc 	.word	0x200013cc
 80021d0:	200003c4 	.word	0x200003c4
 80021d4:	200017ac 	.word	0x200017ac
 80021d8:	200017d8 	.word	0x200017d8
 80021dc:	20000bc4 	.word	0x20000bc4
 80021e0:	200013ce 	.word	0x200013ce
 80021e4:	2000006c 	.word	0x2000006c

080021e8 <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d104      	bne.n	80021fe <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 80021f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021fa:	2202      	movs	r2, #2
 80021fc:	701a      	strb	r2, [r3, #0]
  }
}
 80021fe:	bf00      	nop
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	200013cc 	.word	0x200013cc
 800220c:	200003c4 	.word	0x200003c4

08002210 <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b03      	cmp	r3, #3
 800221a:	d104      	bne.n	8002226 <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 800221e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
  }
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	200013cc 	.word	0x200013cc
 8002234:	200003c4 	.word	0x200003c4

08002238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002270 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800223c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800223e:	e003      	b.n	8002248 <LoopCopyDataInit>

08002240 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002242:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002244:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002246:	3104      	adds	r1, #4

08002248 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002248:	480b      	ldr	r0, [pc, #44]	; (8002278 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800224c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800224e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002250:	d3f6      	bcc.n	8002240 <CopyDataInit>
  ldr  r2, =_sbss
 8002252:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002254:	e002      	b.n	800225c <LoopFillZerobss>

08002256 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002256:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002258:	f842 3b04 	str.w	r3, [r2], #4

0800225c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800225e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002260:	d3f9      	bcc.n	8002256 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002262:	f7ff fe15 	bl	8001e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002266:	f00e f85b 	bl	8010320 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800226a:	f7ff fb89 	bl	8001980 <main>
  bx  lr    
 800226e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002270:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002274:	08010970 	.word	0x08010970
  ldr  r0, =_sdata
 8002278:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800227c:	200000e8 	.word	0x200000e8
  ldr  r2, =_sbss
 8002280:	200000e8 	.word	0x200000e8
  ldr  r3, = _ebss
 8002284:	200026a4 	.word	0x200026a4

08002288 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002288:	e7fe      	b.n	8002288 <ADC_IRQHandler>
	...

0800228c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <HAL_Init+0x40>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <HAL_Init+0x40>)
 8002296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800229a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_Init+0x40>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <HAL_Init+0x40>)
 80022a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_Init+0x40>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a07      	ldr	r2, [pc, #28]	; (80022cc <HAL_Init+0x40>)
 80022ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b4:	2003      	movs	r0, #3
 80022b6:	f000 f94f 	bl	8002558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ba:	2000      	movs	r0, #0
 80022bc:	f000 f808 	bl	80022d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c0:	f7ff fd0c 	bl	8001cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40023c00 	.word	0x40023c00

080022d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_InitTick+0x54>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_InitTick+0x58>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	4619      	mov	r1, r3
 80022e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f967 	bl	80025c2 <HAL_SYSTICK_Config>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e00e      	b.n	800231c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b0f      	cmp	r3, #15
 8002302:	d80a      	bhi.n	800231a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002304:	2200      	movs	r2, #0
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	f04f 30ff 	mov.w	r0, #4294967295
 800230c:	f000 f92f 	bl	800256e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <HAL_InitTick+0x5c>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e000      	b.n	800231c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000068 	.word	0x20000068
 8002328:	20000074 	.word	0x20000074
 800232c:	20000070 	.word	0x20000070

08002330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_IncTick+0x20>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_IncTick+0x24>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4413      	add	r3, r2
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <HAL_IncTick+0x24>)
 8002342:	6013      	str	r3, [r2, #0]
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000074 	.word	0x20000074
 8002354:	20001a08 	.word	0x20001a08

08002358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return uwTick;
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_GetTick+0x14>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20001a08 	.word	0x20001a08

08002370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002378:	f7ff ffee 	bl	8002358 <HAL_GetTick>
 800237c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002388:	d005      	beq.n	8002396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_Delay+0x44>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4413      	add	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002396:	bf00      	nop
 8002398:	f7ff ffde 	bl	8002358 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d8f7      	bhi.n	8002398 <HAL_Delay+0x28>
  {
  }
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000074 	.word	0x20000074

080023b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023d4:	4013      	ands	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ea:	4a04      	ldr	r2, [pc, #16]	; (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	60d3      	str	r3, [r2, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <__NVIC_GetPriorityGrouping+0x18>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	f003 0307 	and.w	r3, r3, #7
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	2b00      	cmp	r3, #0
 800242c:	db0b      	blt.n	8002446 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	4907      	ldr	r1, [pc, #28]	; (8002454 <__NVIC_EnableIRQ+0x38>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	2001      	movs	r0, #1
 800243e:	fa00 f202 	lsl.w	r2, r0, r2
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000e100 	.word	0xe000e100

08002458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	490c      	ldr	r1, [pc, #48]	; (80024a4 <__NVIC_SetPriority+0x4c>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4908      	ldr	r1, [pc, #32]	; (80024a8 <__NVIC_SetPriority+0x50>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3b04      	subs	r3, #4
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	bf28      	it	cs
 80024ca:	2304      	movcs	r3, #4
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b03      	subs	r3, #3
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43d9      	mvns	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	4313      	orrs	r3, r2
         );
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002524:	d301      	bcc.n	800252a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002526:	2301      	movs	r3, #1
 8002528:	e00f      	b.n	800254a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252a:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <SysTick_Config+0x40>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002532:	210f      	movs	r1, #15
 8002534:	f04f 30ff 	mov.w	r0, #4294967295
 8002538:	f7ff ff8e 	bl	8002458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <SysTick_Config+0x40>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002542:	4b04      	ldr	r3, [pc, #16]	; (8002554 <SysTick_Config+0x40>)
 8002544:	2207      	movs	r2, #7
 8002546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	e000e010 	.word	0xe000e010

08002558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ff29 	bl	80023b8 <__NVIC_SetPriorityGrouping>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002580:	f7ff ff3e 	bl	8002400 <__NVIC_GetPriorityGrouping>
 8002584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	6978      	ldr	r0, [r7, #20]
 800258c:	f7ff ff8e 	bl	80024ac <NVIC_EncodePriority>
 8002590:	4602      	mov	r2, r0
 8002592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff5d 	bl	8002458 <__NVIC_SetPriority>
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4603      	mov	r3, r0
 80025ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff31 	bl	800241c <__NVIC_EnableIRQ>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ffa2 	bl	8002514 <SysTick_Config>
 80025d0:	4603      	mov	r3, r0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025e8:	f7ff feb6 	bl	8002358 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e099      	b.n	800272c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2202      	movs	r2, #2
 80025fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0201 	bic.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002618:	e00f      	b.n	800263a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800261a:	f7ff fe9d 	bl	8002358 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b05      	cmp	r3, #5
 8002626:	d908      	bls.n	800263a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2220      	movs	r2, #32
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2203      	movs	r2, #3
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e078      	b.n	800272c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1e8      	bne.n	800261a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	4b38      	ldr	r3, [pc, #224]	; (8002734 <HAL_DMA_Init+0x158>)
 8002654:	4013      	ands	r3, r2
 8002656:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002666:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002672:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800267e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	2b04      	cmp	r3, #4
 8002692:	d107      	bne.n	80026a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	4313      	orrs	r3, r2
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f023 0307 	bic.w	r3, r3, #7
 80026ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d117      	bne.n	80026fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00e      	beq.n	80026fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 fb5f 	bl	8002da4 <DMA_CheckFifoParam>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2240      	movs	r2, #64	; 0x40
 80026f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026fa:	2301      	movs	r3, #1
 80026fc:	e016      	b.n	800272c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 fb16 	bl	8002d38 <DMA_CalcBaseAndBitshift>
 800270c:	4603      	mov	r3, r0
 800270e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002714:	223f      	movs	r2, #63	; 0x3f
 8002716:	409a      	lsls	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	f010803f 	.word	0xf010803f

08002738 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e050      	b.n	80027ec <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d101      	bne.n	800275a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002756:	2302      	movs	r3, #2
 8002758:	e048      	b.n	80027ec <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0201 	bic.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2200      	movs	r2, #0
 8002778:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2200      	movs	r2, #0
 8002788:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2200      	movs	r2, #0
 8002790:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2221      	movs	r2, #33	; 0x21
 8002798:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 facc 	bl	8002d38 <DMA_CalcBaseAndBitshift>
 80027a0:	4603      	mov	r3, r0
 80027a2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	223f      	movs	r2, #63	; 0x3f
 80027ce:	409a      	lsls	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_DMA_Start_IT+0x26>
 8002816:	2302      	movs	r3, #2
 8002818:	e040      	b.n	800289c <HAL_DMA_Start_IT+0xa8>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b01      	cmp	r3, #1
 800282c:	d12f      	bne.n	800288e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2202      	movs	r2, #2
 8002832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fa4a 	bl	8002cdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284c:	223f      	movs	r2, #63	; 0x3f
 800284e:	409a      	lsls	r2, r3
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0216 	orr.w	r2, r2, #22
 8002862:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	2b00      	cmp	r3, #0
 800286a:	d007      	beq.n	800287c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0208 	orr.w	r2, r2, #8
 800287a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	e005      	b.n	800289a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002896:	2302      	movs	r3, #2
 8002898:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800289a:	7dfb      	ldrb	r3, [r7, #23]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028b2:	f7ff fd51 	bl	8002358 <HAL_GetTick>
 80028b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d008      	beq.n	80028d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2280      	movs	r2, #128	; 0x80
 80028c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e052      	b.n	800297c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0216 	bic.w	r2, r2, #22
 80028e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d103      	bne.n	8002906 <HAL_DMA_Abort+0x62>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0208 	bic.w	r2, r2, #8
 8002914:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0201 	bic.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002926:	e013      	b.n	8002950 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002928:	f7ff fd16 	bl	8002358 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b05      	cmp	r3, #5
 8002934:	d90c      	bls.n	8002950 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2220      	movs	r2, #32
 800293a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2203      	movs	r2, #3
 8002940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e015      	b.n	800297c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1e4      	bne.n	8002928 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002962:	223f      	movs	r2, #63	; 0x3f
 8002964:	409a      	lsls	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d004      	beq.n	80029a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2280      	movs	r2, #128	; 0x80
 800299c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e00c      	b.n	80029bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2205      	movs	r2, #5
 80029a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029d4:	4b8e      	ldr	r3, [pc, #568]	; (8002c10 <HAL_DMA_IRQHandler+0x248>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a8e      	ldr	r2, [pc, #568]	; (8002c14 <HAL_DMA_IRQHandler+0x24c>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	0a9b      	lsrs	r3, r3, #10
 80029e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	2208      	movs	r2, #8
 80029f4:	409a      	lsls	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d01a      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d013      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0204 	bic.w	r2, r2, #4
 8002a1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a20:	2208      	movs	r2, #8
 8002a22:	409a      	lsls	r2, r3
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2c:	f043 0201 	orr.w	r2, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a38:	2201      	movs	r2, #1
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d012      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00b      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a56:	2201      	movs	r2, #1
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a62:	f043 0202 	orr.w	r2, r3, #2
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6e:	2204      	movs	r2, #4
 8002a70:	409a      	lsls	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d012      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00b      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a98:	f043 0204 	orr.w	r2, r3, #4
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa4:	2210      	movs	r2, #16
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d043      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d03c      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	2210      	movs	r2, #16
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d018      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d108      	bne.n	8002af8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d024      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	4798      	blx	r3
 8002af6:	e01f      	b.n	8002b38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d01b      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	4798      	blx	r3
 8002b08:	e016      	b.n	8002b38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d107      	bne.n	8002b28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0208 	bic.w	r2, r2, #8
 8002b26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 808f 	beq.w	8002c68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 8087 	beq.w	8002c68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5e:	2220      	movs	r2, #32
 8002b60:	409a      	lsls	r2, r3
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b05      	cmp	r3, #5
 8002b70:	d136      	bne.n	8002be0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0216 	bic.w	r2, r2, #22
 8002b80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d103      	bne.n	8002ba2 <HAL_DMA_IRQHandler+0x1da>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0208 	bic.w	r2, r2, #8
 8002bb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb6:	223f      	movs	r2, #63	; 0x3f
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d07e      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	4798      	blx	r3
        }
        return;
 8002bde:	e079      	b.n	8002cd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d01d      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10d      	bne.n	8002c18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d031      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	4798      	blx	r3
 8002c0c:	e02c      	b.n	8002c68 <HAL_DMA_IRQHandler+0x2a0>
 8002c0e:	bf00      	nop
 8002c10:	20000068 	.word	0x20000068
 8002c14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d023      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	4798      	blx	r3
 8002c28:	e01e      	b.n	8002c68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10f      	bne.n	8002c58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0210 	bic.w	r2, r2, #16
 8002c46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d032      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d022      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2205      	movs	r2, #5
 8002c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0201 	bic.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	3301      	adds	r3, #1
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d307      	bcc.n	8002cb0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f2      	bne.n	8002c94 <HAL_DMA_IRQHandler+0x2cc>
 8002cae:	e000      	b.n	8002cb2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002cb0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d005      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	4798      	blx	r3
 8002cd2:	e000      	b.n	8002cd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002cd4:	bf00      	nop
    }
  }
}
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cf8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b40      	cmp	r3, #64	; 0x40
 8002d08:	d108      	bne.n	8002d1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d1a:	e007      	b.n	8002d2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	60da      	str	r2, [r3, #12]
}
 8002d2c:	bf00      	nop
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	3b10      	subs	r3, #16
 8002d48:	4a14      	ldr	r2, [pc, #80]	; (8002d9c <DMA_CalcBaseAndBitshift+0x64>)
 8002d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4e:	091b      	lsrs	r3, r3, #4
 8002d50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d52:	4a13      	ldr	r2, [pc, #76]	; (8002da0 <DMA_CalcBaseAndBitshift+0x68>)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4413      	add	r3, r2
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d909      	bls.n	8002d7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d6e:	f023 0303 	bic.w	r3, r3, #3
 8002d72:	1d1a      	adds	r2, r3, #4
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	659a      	str	r2, [r3, #88]	; 0x58
 8002d78:	e007      	b.n	8002d8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d82:	f023 0303 	bic.w	r3, r3, #3
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	aaaaaaab 	.word	0xaaaaaaab
 8002da0:	08010504 	.word	0x08010504

08002da4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d11f      	bne.n	8002dfe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d856      	bhi.n	8002e72 <DMA_CheckFifoParam+0xce>
 8002dc4:	a201      	add	r2, pc, #4	; (adr r2, 8002dcc <DMA_CheckFifoParam+0x28>)
 8002dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dca:	bf00      	nop
 8002dcc:	08002ddd 	.word	0x08002ddd
 8002dd0:	08002def 	.word	0x08002def
 8002dd4:	08002ddd 	.word	0x08002ddd
 8002dd8:	08002e73 	.word	0x08002e73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d046      	beq.n	8002e76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dec:	e043      	b.n	8002e76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002df6:	d140      	bne.n	8002e7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dfc:	e03d      	b.n	8002e7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e06:	d121      	bne.n	8002e4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d837      	bhi.n	8002e7e <DMA_CheckFifoParam+0xda>
 8002e0e:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <DMA_CheckFifoParam+0x70>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002e25 	.word	0x08002e25
 8002e18:	08002e2b 	.word	0x08002e2b
 8002e1c:	08002e25 	.word	0x08002e25
 8002e20:	08002e3d 	.word	0x08002e3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
      break;
 8002e28:	e030      	b.n	8002e8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d025      	beq.n	8002e82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e3a:	e022      	b.n	8002e82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e44:	d11f      	bne.n	8002e86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e4a:	e01c      	b.n	8002e86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d903      	bls.n	8002e5a <DMA_CheckFifoParam+0xb6>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d003      	beq.n	8002e60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e58:	e018      	b.n	8002e8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8002e5e:	e015      	b.n	8002e8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00e      	beq.n	8002e8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e70:	e00b      	b.n	8002e8a <DMA_CheckFifoParam+0xe6>
      break;
 8002e72:	bf00      	nop
 8002e74:	e00a      	b.n	8002e8c <DMA_CheckFifoParam+0xe8>
      break;
 8002e76:	bf00      	nop
 8002e78:	e008      	b.n	8002e8c <DMA_CheckFifoParam+0xe8>
      break;
 8002e7a:	bf00      	nop
 8002e7c:	e006      	b.n	8002e8c <DMA_CheckFifoParam+0xe8>
      break;
 8002e7e:	bf00      	nop
 8002e80:	e004      	b.n	8002e8c <DMA_CheckFifoParam+0xe8>
      break;
 8002e82:	bf00      	nop
 8002e84:	e002      	b.n	8002e8c <DMA_CheckFifoParam+0xe8>
      break;   
 8002e86:	bf00      	nop
 8002e88:	e000      	b.n	8002e8c <DMA_CheckFifoParam+0xe8>
      break;
 8002e8a:	bf00      	nop
    }
  } 
  
  return status; 
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop

08002e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b089      	sub	sp, #36	; 0x24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	e159      	b.n	800316c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002eb8:	2201      	movs	r2, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	f040 8148 	bne.w	8003166 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d005      	beq.n	8002eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d130      	bne.n	8002f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	2203      	movs	r2, #3
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f24:	2201      	movs	r2, #1
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 0201 	and.w	r2, r3, #1
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d017      	beq.n	8002f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	2203      	movs	r2, #3
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d123      	bne.n	8002fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	08da      	lsrs	r2, r3, #3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3208      	adds	r2, #8
 8002fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	220f      	movs	r2, #15
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	08da      	lsrs	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3208      	adds	r2, #8
 8002fda:	69b9      	ldr	r1, [r7, #24]
 8002fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	2203      	movs	r2, #3
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 0203 	and.w	r2, r3, #3
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 80a2 	beq.w	8003166 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	4b57      	ldr	r3, [pc, #348]	; (8003184 <HAL_GPIO_Init+0x2e8>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	4a56      	ldr	r2, [pc, #344]	; (8003184 <HAL_GPIO_Init+0x2e8>)
 800302c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003030:	6453      	str	r3, [r2, #68]	; 0x44
 8003032:	4b54      	ldr	r3, [pc, #336]	; (8003184 <HAL_GPIO_Init+0x2e8>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800303e:	4a52      	ldr	r2, [pc, #328]	; (8003188 <HAL_GPIO_Init+0x2ec>)
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	089b      	lsrs	r3, r3, #2
 8003044:	3302      	adds	r3, #2
 8003046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	220f      	movs	r2, #15
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a49      	ldr	r2, [pc, #292]	; (800318c <HAL_GPIO_Init+0x2f0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d019      	beq.n	800309e <HAL_GPIO_Init+0x202>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a48      	ldr	r2, [pc, #288]	; (8003190 <HAL_GPIO_Init+0x2f4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d013      	beq.n	800309a <HAL_GPIO_Init+0x1fe>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a47      	ldr	r2, [pc, #284]	; (8003194 <HAL_GPIO_Init+0x2f8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00d      	beq.n	8003096 <HAL_GPIO_Init+0x1fa>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a46      	ldr	r2, [pc, #280]	; (8003198 <HAL_GPIO_Init+0x2fc>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d007      	beq.n	8003092 <HAL_GPIO_Init+0x1f6>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a45      	ldr	r2, [pc, #276]	; (800319c <HAL_GPIO_Init+0x300>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d101      	bne.n	800308e <HAL_GPIO_Init+0x1f2>
 800308a:	2304      	movs	r3, #4
 800308c:	e008      	b.n	80030a0 <HAL_GPIO_Init+0x204>
 800308e:	2307      	movs	r3, #7
 8003090:	e006      	b.n	80030a0 <HAL_GPIO_Init+0x204>
 8003092:	2303      	movs	r3, #3
 8003094:	e004      	b.n	80030a0 <HAL_GPIO_Init+0x204>
 8003096:	2302      	movs	r3, #2
 8003098:	e002      	b.n	80030a0 <HAL_GPIO_Init+0x204>
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <HAL_GPIO_Init+0x204>
 800309e:	2300      	movs	r3, #0
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	f002 0203 	and.w	r2, r2, #3
 80030a6:	0092      	lsls	r2, r2, #2
 80030a8:	4093      	lsls	r3, r2
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030b0:	4935      	ldr	r1, [pc, #212]	; (8003188 <HAL_GPIO_Init+0x2ec>)
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	089b      	lsrs	r3, r3, #2
 80030b6:	3302      	adds	r3, #2
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030be:	4b38      	ldr	r3, [pc, #224]	; (80031a0 <HAL_GPIO_Init+0x304>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030e2:	4a2f      	ldr	r2, [pc, #188]	; (80031a0 <HAL_GPIO_Init+0x304>)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030e8:	4b2d      	ldr	r3, [pc, #180]	; (80031a0 <HAL_GPIO_Init+0x304>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800310c:	4a24      	ldr	r2, [pc, #144]	; (80031a0 <HAL_GPIO_Init+0x304>)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003112:	4b23      	ldr	r3, [pc, #140]	; (80031a0 <HAL_GPIO_Init+0x304>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003136:	4a1a      	ldr	r2, [pc, #104]	; (80031a0 <HAL_GPIO_Init+0x304>)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800313c:	4b18      	ldr	r3, [pc, #96]	; (80031a0 <HAL_GPIO_Init+0x304>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003160:	4a0f      	ldr	r2, [pc, #60]	; (80031a0 <HAL_GPIO_Init+0x304>)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3301      	adds	r3, #1
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	2b0f      	cmp	r3, #15
 8003170:	f67f aea2 	bls.w	8002eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	3724      	adds	r7, #36	; 0x24
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800
 8003188:	40013800 	.word	0x40013800
 800318c:	40020000 	.word	0x40020000
 8003190:	40020400 	.word	0x40020400
 8003194:	40020800 	.word	0x40020800
 8003198:	40020c00 	.word	0x40020c00
 800319c:	40021000 	.word	0x40021000
 80031a0:	40013c00 	.word	0x40013c00

080031a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	e0bb      	b.n	8003338 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031c0:	2201      	movs	r2, #1
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4013      	ands	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	f040 80ab 	bne.w	8003332 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80031dc:	4a5c      	ldr	r2, [pc, #368]	; (8003350 <HAL_GPIO_DeInit+0x1ac>)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	089b      	lsrs	r3, r3, #2
 80031e2:	3302      	adds	r3, #2
 80031e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	220f      	movs	r2, #15
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	4013      	ands	r3, r2
 80031fc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a54      	ldr	r2, [pc, #336]	; (8003354 <HAL_GPIO_DeInit+0x1b0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d019      	beq.n	800323a <HAL_GPIO_DeInit+0x96>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a53      	ldr	r2, [pc, #332]	; (8003358 <HAL_GPIO_DeInit+0x1b4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d013      	beq.n	8003236 <HAL_GPIO_DeInit+0x92>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a52      	ldr	r2, [pc, #328]	; (800335c <HAL_GPIO_DeInit+0x1b8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00d      	beq.n	8003232 <HAL_GPIO_DeInit+0x8e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a51      	ldr	r2, [pc, #324]	; (8003360 <HAL_GPIO_DeInit+0x1bc>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d007      	beq.n	800322e <HAL_GPIO_DeInit+0x8a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a50      	ldr	r2, [pc, #320]	; (8003364 <HAL_GPIO_DeInit+0x1c0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d101      	bne.n	800322a <HAL_GPIO_DeInit+0x86>
 8003226:	2304      	movs	r3, #4
 8003228:	e008      	b.n	800323c <HAL_GPIO_DeInit+0x98>
 800322a:	2307      	movs	r3, #7
 800322c:	e006      	b.n	800323c <HAL_GPIO_DeInit+0x98>
 800322e:	2303      	movs	r3, #3
 8003230:	e004      	b.n	800323c <HAL_GPIO_DeInit+0x98>
 8003232:	2302      	movs	r3, #2
 8003234:	e002      	b.n	800323c <HAL_GPIO_DeInit+0x98>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <HAL_GPIO_DeInit+0x98>
 800323a:	2300      	movs	r3, #0
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	f002 0203 	and.w	r2, r2, #3
 8003242:	0092      	lsls	r2, r2, #2
 8003244:	4093      	lsls	r3, r2
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	429a      	cmp	r2, r3
 800324a:	d132      	bne.n	80032b2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800324c:	4b46      	ldr	r3, [pc, #280]	; (8003368 <HAL_GPIO_DeInit+0x1c4>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	43db      	mvns	r3, r3
 8003254:	4944      	ldr	r1, [pc, #272]	; (8003368 <HAL_GPIO_DeInit+0x1c4>)
 8003256:	4013      	ands	r3, r2
 8003258:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800325a:	4b43      	ldr	r3, [pc, #268]	; (8003368 <HAL_GPIO_DeInit+0x1c4>)
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	43db      	mvns	r3, r3
 8003262:	4941      	ldr	r1, [pc, #260]	; (8003368 <HAL_GPIO_DeInit+0x1c4>)
 8003264:	4013      	ands	r3, r2
 8003266:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003268:	4b3f      	ldr	r3, [pc, #252]	; (8003368 <HAL_GPIO_DeInit+0x1c4>)
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	43db      	mvns	r3, r3
 8003270:	493d      	ldr	r1, [pc, #244]	; (8003368 <HAL_GPIO_DeInit+0x1c4>)
 8003272:	4013      	ands	r3, r2
 8003274:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003276:	4b3c      	ldr	r3, [pc, #240]	; (8003368 <HAL_GPIO_DeInit+0x1c4>)
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	43db      	mvns	r3, r3
 800327e:	493a      	ldr	r1, [pc, #232]	; (8003368 <HAL_GPIO_DeInit+0x1c4>)
 8003280:	4013      	ands	r3, r2
 8003282:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	220f      	movs	r2, #15
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003294:	4a2e      	ldr	r2, [pc, #184]	; (8003350 <HAL_GPIO_DeInit+0x1ac>)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	089b      	lsrs	r3, r3, #2
 800329a:	3302      	adds	r3, #2
 800329c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	43da      	mvns	r2, r3
 80032a4:	482a      	ldr	r0, [pc, #168]	; (8003350 <HAL_GPIO_DeInit+0x1ac>)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	089b      	lsrs	r3, r3, #2
 80032aa:	400a      	ands	r2, r1
 80032ac:	3302      	adds	r3, #2
 80032ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	2103      	movs	r1, #3
 80032bc:	fa01 f303 	lsl.w	r3, r1, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	401a      	ands	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	08da      	lsrs	r2, r3, #3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3208      	adds	r2, #8
 80032d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	220f      	movs	r2, #15
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43db      	mvns	r3, r3
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	08d2      	lsrs	r2, r2, #3
 80032e8:	4019      	ands	r1, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3208      	adds	r2, #8
 80032ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	2103      	movs	r1, #3
 80032fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	401a      	ands	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	2101      	movs	r1, #1
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	fa01 f303 	lsl.w	r3, r1, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	401a      	ands	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	2103      	movs	r1, #3
 8003326:	fa01 f303 	lsl.w	r3, r1, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	401a      	ands	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	3301      	adds	r3, #1
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2b0f      	cmp	r3, #15
 800333c:	f67f af40 	bls.w	80031c0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003340:	bf00      	nop
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40013800 	.word	0x40013800
 8003354:	40020000 	.word	0x40020000
 8003358:	40020400 	.word	0x40020400
 800335c:	40020800 	.word	0x40020800
 8003360:	40020c00 	.word	0x40020c00
 8003364:	40021000 	.word	0x40021000
 8003368:	40013c00 	.word	0x40013c00

0800336c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	807b      	strh	r3, [r7, #2]
 8003378:	4613      	mov	r3, r2
 800337a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800337c:	787b      	ldrb	r3, [r7, #1]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003382:	887a      	ldrh	r2, [r7, #2]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003388:	e003      	b.n	8003392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800338a:	887b      	ldrh	r3, [r7, #2]
 800338c:	041a      	lsls	r2, r3, #16
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	619a      	str	r2, [r3, #24]
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033aa:	4b08      	ldr	r3, [pc, #32]	; (80033cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d006      	beq.n	80033c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033b6:	4a05      	ldr	r2, [pc, #20]	; (80033cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033b8:	88fb      	ldrh	r3, [r7, #6]
 80033ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fe fc22 	bl	8001c08 <HAL_GPIO_EXTI_Callback>
  }
}
 80033c4:	bf00      	nop
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40013c00 	.word	0x40013c00

080033d0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80033d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033d2:	b08f      	sub	sp, #60	; 0x3c
 80033d4:	af0a      	add	r7, sp, #40	; 0x28
 80033d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e054      	b.n	800348c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d106      	bne.n	8003402 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f00c fbb1 	bl	800fb64 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2203      	movs	r2, #3
 8003406:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d102      	bne.n	800341c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f004 ffbb 	bl	800839c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	687e      	ldr	r6, [r7, #4]
 800342e:	466d      	mov	r5, sp
 8003430:	f106 0410 	add.w	r4, r6, #16
 8003434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800343a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800343c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003440:	e885 0003 	stmia.w	r5, {r0, r1}
 8003444:	1d33      	adds	r3, r6, #4
 8003446:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003448:	6838      	ldr	r0, [r7, #0]
 800344a:	f004 ff35 	bl	80082b8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2101      	movs	r1, #1
 8003454:	4618      	mov	r0, r3
 8003456:	f004 ffb2 	bl	80083be <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	687e      	ldr	r6, [r7, #4]
 8003462:	466d      	mov	r5, sp
 8003464:	f106 0410 	add.w	r4, r6, #16
 8003468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800346a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800346c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800346e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003470:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003474:	e885 0003 	stmia.w	r5, {r0, r1}
 8003478:	1d33      	adds	r3, r6, #4
 800347a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800347c:	6838      	ldr	r0, [r7, #0]
 800347e:	f005 f93b 	bl	80086f8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003494 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b089      	sub	sp, #36	; 0x24
 8003498:	af04      	add	r7, sp, #16
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	4608      	mov	r0, r1
 800349e:	4611      	mov	r1, r2
 80034a0:	461a      	mov	r2, r3
 80034a2:	4603      	mov	r3, r0
 80034a4:	70fb      	strb	r3, [r7, #3]
 80034a6:	460b      	mov	r3, r1
 80034a8:	70bb      	strb	r3, [r7, #2]
 80034aa:	4613      	mov	r3, r2
 80034ac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_HCD_HC_Init+0x28>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e076      	b.n	80035aa <HAL_HCD_HC_Init+0x116>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	212c      	movs	r1, #44	; 0x2c
 80034ca:	fb01 f303 	mul.w	r3, r1, r3
 80034ce:	4413      	add	r3, r2
 80034d0:	333d      	adds	r3, #61	; 0x3d
 80034d2:	2200      	movs	r2, #0
 80034d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	212c      	movs	r1, #44	; 0x2c
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	4413      	add	r3, r2
 80034e2:	3338      	adds	r3, #56	; 0x38
 80034e4:	787a      	ldrb	r2, [r7, #1]
 80034e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	212c      	movs	r1, #44	; 0x2c
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	3340      	adds	r3, #64	; 0x40
 80034f6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80034f8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	212c      	movs	r1, #44	; 0x2c
 8003500:	fb01 f303 	mul.w	r3, r1, r3
 8003504:	4413      	add	r3, r2
 8003506:	3339      	adds	r3, #57	; 0x39
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	212c      	movs	r1, #44	; 0x2c
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	4413      	add	r3, r2
 8003518:	333f      	adds	r3, #63	; 0x3f
 800351a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800351e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	78ba      	ldrb	r2, [r7, #2]
 8003524:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003528:	b2d0      	uxtb	r0, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	212c      	movs	r1, #44	; 0x2c
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	4413      	add	r3, r2
 8003534:	333a      	adds	r3, #58	; 0x3a
 8003536:	4602      	mov	r2, r0
 8003538:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800353a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800353e:	2b00      	cmp	r3, #0
 8003540:	da09      	bge.n	8003556 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	212c      	movs	r1, #44	; 0x2c
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	4413      	add	r3, r2
 800354e:	333b      	adds	r3, #59	; 0x3b
 8003550:	2201      	movs	r2, #1
 8003552:	701a      	strb	r2, [r3, #0]
 8003554:	e008      	b.n	8003568 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	212c      	movs	r1, #44	; 0x2c
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	4413      	add	r3, r2
 8003562:	333b      	adds	r3, #59	; 0x3b
 8003564:	2200      	movs	r2, #0
 8003566:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	212c      	movs	r1, #44	; 0x2c
 800356e:	fb01 f303 	mul.w	r3, r1, r3
 8003572:	4413      	add	r3, r2
 8003574:	333c      	adds	r3, #60	; 0x3c
 8003576:	f897 2020 	ldrb.w	r2, [r7, #32]
 800357a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6818      	ldr	r0, [r3, #0]
 8003580:	787c      	ldrb	r4, [r7, #1]
 8003582:	78ba      	ldrb	r2, [r7, #2]
 8003584:	78f9      	ldrb	r1, [r7, #3]
 8003586:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003588:	9302      	str	r3, [sp, #8]
 800358a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800358e:	9301      	str	r3, [sp, #4]
 8003590:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	4623      	mov	r3, r4
 8003598:	f005 fa34 	bl	8008a04 <USB_HC_Init>
 800359c:	4603      	mov	r3, r0
 800359e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd90      	pop	{r4, r7, pc}

080035b2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	460b      	mov	r3, r1
 80035bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_HCD_HC_Halt+0x1e>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e00f      	b.n	80035f0 <HAL_HCD_HC_Halt+0x3e>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	78fa      	ldrb	r2, [r7, #3]
 80035de:	4611      	mov	r1, r2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f005 fc84 	bl	8008eee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	4608      	mov	r0, r1
 8003602:	4611      	mov	r1, r2
 8003604:	461a      	mov	r2, r3
 8003606:	4603      	mov	r3, r0
 8003608:	70fb      	strb	r3, [r7, #3]
 800360a:	460b      	mov	r3, r1
 800360c:	70bb      	strb	r3, [r7, #2]
 800360e:	4613      	mov	r3, r2
 8003610:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	212c      	movs	r1, #44	; 0x2c
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	4413      	add	r3, r2
 800361e:	333b      	adds	r3, #59	; 0x3b
 8003620:	78ba      	ldrb	r2, [r7, #2]
 8003622:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	212c      	movs	r1, #44	; 0x2c
 800362a:	fb01 f303 	mul.w	r3, r1, r3
 800362e:	4413      	add	r3, r2
 8003630:	333f      	adds	r3, #63	; 0x3f
 8003632:	787a      	ldrb	r2, [r7, #1]
 8003634:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003636:	7c3b      	ldrb	r3, [r7, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d112      	bne.n	8003662 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800363c:	78fb      	ldrb	r3, [r7, #3]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	212c      	movs	r1, #44	; 0x2c
 8003642:	fb01 f303 	mul.w	r3, r1, r3
 8003646:	4413      	add	r3, r2
 8003648:	3342      	adds	r3, #66	; 0x42
 800364a:	2203      	movs	r2, #3
 800364c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800364e:	78fb      	ldrb	r3, [r7, #3]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	212c      	movs	r1, #44	; 0x2c
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	4413      	add	r3, r2
 800365a:	333d      	adds	r3, #61	; 0x3d
 800365c:	7f3a      	ldrb	r2, [r7, #28]
 800365e:	701a      	strb	r2, [r3, #0]
 8003660:	e008      	b.n	8003674 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	212c      	movs	r1, #44	; 0x2c
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	4413      	add	r3, r2
 800366e:	3342      	adds	r3, #66	; 0x42
 8003670:	2202      	movs	r2, #2
 8003672:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003674:	787b      	ldrb	r3, [r7, #1]
 8003676:	2b03      	cmp	r3, #3
 8003678:	f200 80c6 	bhi.w	8003808 <HAL_HCD_HC_SubmitRequest+0x210>
 800367c:	a201      	add	r2, pc, #4	; (adr r2, 8003684 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800367e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003682:	bf00      	nop
 8003684:	08003695 	.word	0x08003695
 8003688:	080037f5 	.word	0x080037f5
 800368c:	080036f9 	.word	0x080036f9
 8003690:	08003777 	.word	0x08003777
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003694:	7c3b      	ldrb	r3, [r7, #16]
 8003696:	2b01      	cmp	r3, #1
 8003698:	f040 80b8 	bne.w	800380c <HAL_HCD_HC_SubmitRequest+0x214>
 800369c:	78bb      	ldrb	r3, [r7, #2]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f040 80b4 	bne.w	800380c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80036a4:	8b3b      	ldrh	r3, [r7, #24]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d108      	bne.n	80036bc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	212c      	movs	r1, #44	; 0x2c
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	4413      	add	r3, r2
 80036b6:	3355      	adds	r3, #85	; 0x55
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	212c      	movs	r1, #44	; 0x2c
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	3355      	adds	r3, #85	; 0x55
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d109      	bne.n	80036e4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	212c      	movs	r1, #44	; 0x2c
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	4413      	add	r3, r2
 80036dc:	3342      	adds	r3, #66	; 0x42
 80036de:	2200      	movs	r2, #0
 80036e0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80036e2:	e093      	b.n	800380c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	212c      	movs	r1, #44	; 0x2c
 80036ea:	fb01 f303 	mul.w	r3, r1, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	3342      	adds	r3, #66	; 0x42
 80036f2:	2202      	movs	r2, #2
 80036f4:	701a      	strb	r2, [r3, #0]
      break;
 80036f6:	e089      	b.n	800380c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80036f8:	78bb      	ldrb	r3, [r7, #2]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d11d      	bne.n	800373a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80036fe:	78fb      	ldrb	r3, [r7, #3]
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	212c      	movs	r1, #44	; 0x2c
 8003704:	fb01 f303 	mul.w	r3, r1, r3
 8003708:	4413      	add	r3, r2
 800370a:	3355      	adds	r3, #85	; 0x55
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003712:	78fb      	ldrb	r3, [r7, #3]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	212c      	movs	r1, #44	; 0x2c
 8003718:	fb01 f303 	mul.w	r3, r1, r3
 800371c:	4413      	add	r3, r2
 800371e:	3342      	adds	r3, #66	; 0x42
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003724:	e073      	b.n	800380e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	212c      	movs	r1, #44	; 0x2c
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	4413      	add	r3, r2
 8003732:	3342      	adds	r3, #66	; 0x42
 8003734:	2202      	movs	r2, #2
 8003736:	701a      	strb	r2, [r3, #0]
      break;
 8003738:	e069      	b.n	800380e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	212c      	movs	r1, #44	; 0x2c
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	4413      	add	r3, r2
 8003746:	3354      	adds	r3, #84	; 0x54
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800374e:	78fb      	ldrb	r3, [r7, #3]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	212c      	movs	r1, #44	; 0x2c
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	4413      	add	r3, r2
 800375a:	3342      	adds	r3, #66	; 0x42
 800375c:	2200      	movs	r2, #0
 800375e:	701a      	strb	r2, [r3, #0]
      break;
 8003760:	e055      	b.n	800380e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	212c      	movs	r1, #44	; 0x2c
 8003768:	fb01 f303 	mul.w	r3, r1, r3
 800376c:	4413      	add	r3, r2
 800376e:	3342      	adds	r3, #66	; 0x42
 8003770:	2202      	movs	r2, #2
 8003772:	701a      	strb	r2, [r3, #0]
      break;
 8003774:	e04b      	b.n	800380e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003776:	78bb      	ldrb	r3, [r7, #2]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d11d      	bne.n	80037b8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	212c      	movs	r1, #44	; 0x2c
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	3355      	adds	r3, #85	; 0x55
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d109      	bne.n	80037a4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	212c      	movs	r1, #44	; 0x2c
 8003796:	fb01 f303 	mul.w	r3, r1, r3
 800379a:	4413      	add	r3, r2
 800379c:	3342      	adds	r3, #66	; 0x42
 800379e:	2200      	movs	r2, #0
 80037a0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80037a2:	e034      	b.n	800380e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	212c      	movs	r1, #44	; 0x2c
 80037aa:	fb01 f303 	mul.w	r3, r1, r3
 80037ae:	4413      	add	r3, r2
 80037b0:	3342      	adds	r3, #66	; 0x42
 80037b2:	2202      	movs	r2, #2
 80037b4:	701a      	strb	r2, [r3, #0]
      break;
 80037b6:	e02a      	b.n	800380e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	212c      	movs	r1, #44	; 0x2c
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	4413      	add	r3, r2
 80037c4:	3354      	adds	r3, #84	; 0x54
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d109      	bne.n	80037e0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	212c      	movs	r1, #44	; 0x2c
 80037d2:	fb01 f303 	mul.w	r3, r1, r3
 80037d6:	4413      	add	r3, r2
 80037d8:	3342      	adds	r3, #66	; 0x42
 80037da:	2200      	movs	r2, #0
 80037dc:	701a      	strb	r2, [r3, #0]
      break;
 80037de:	e016      	b.n	800380e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	212c      	movs	r1, #44	; 0x2c
 80037e6:	fb01 f303 	mul.w	r3, r1, r3
 80037ea:	4413      	add	r3, r2
 80037ec:	3342      	adds	r3, #66	; 0x42
 80037ee:	2202      	movs	r2, #2
 80037f0:	701a      	strb	r2, [r3, #0]
      break;
 80037f2:	e00c      	b.n	800380e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	212c      	movs	r1, #44	; 0x2c
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	4413      	add	r3, r2
 8003800:	3342      	adds	r3, #66	; 0x42
 8003802:	2200      	movs	r2, #0
 8003804:	701a      	strb	r2, [r3, #0]
      break;
 8003806:	e002      	b.n	800380e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003808:	bf00      	nop
 800380a:	e000      	b.n	800380e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800380c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800380e:	78fb      	ldrb	r3, [r7, #3]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	212c      	movs	r1, #44	; 0x2c
 8003814:	fb01 f303 	mul.w	r3, r1, r3
 8003818:	4413      	add	r3, r2
 800381a:	3344      	adds	r3, #68	; 0x44
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	8b3a      	ldrh	r2, [r7, #24]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	202c      	movs	r0, #44	; 0x2c
 8003828:	fb00 f303 	mul.w	r3, r0, r3
 800382c:	440b      	add	r3, r1
 800382e:	334c      	adds	r3, #76	; 0x4c
 8003830:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003832:	78fb      	ldrb	r3, [r7, #3]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	212c      	movs	r1, #44	; 0x2c
 8003838:	fb01 f303 	mul.w	r3, r1, r3
 800383c:	4413      	add	r3, r2
 800383e:	3360      	adds	r3, #96	; 0x60
 8003840:	2200      	movs	r2, #0
 8003842:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	212c      	movs	r1, #44	; 0x2c
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	4413      	add	r3, r2
 8003850:	3350      	adds	r3, #80	; 0x50
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	212c      	movs	r1, #44	; 0x2c
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	4413      	add	r3, r2
 8003862:	3339      	adds	r3, #57	; 0x39
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003868:	78fb      	ldrb	r3, [r7, #3]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	212c      	movs	r1, #44	; 0x2c
 800386e:	fb01 f303 	mul.w	r3, r1, r3
 8003872:	4413      	add	r3, r2
 8003874:	3361      	adds	r3, #97	; 0x61
 8003876:	2200      	movs	r2, #0
 8003878:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	78fb      	ldrb	r3, [r7, #3]
 8003880:	222c      	movs	r2, #44	; 0x2c
 8003882:	fb02 f303 	mul.w	r3, r2, r3
 8003886:	3338      	adds	r3, #56	; 0x38
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	18d1      	adds	r1, r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	461a      	mov	r2, r3
 8003894:	f005 f9d8 	bl	8008c48 <USB_HC_StartXfer>
 8003898:	4603      	mov	r3, r0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop

080038a4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f004 fed9 	bl	8008672 <USB_GetMode>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	f040 80f6 	bne.w	8003ab4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f004 febd 	bl	800864c <USB_ReadInterrupts>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80ec 	beq.w	8003ab2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f004 feb4 	bl	800864c <USB_ReadInterrupts>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038ee:	d104      	bne.n	80038fa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80038f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f004 fea4 	bl	800864c <USB_ReadInterrupts>
 8003904:	4603      	mov	r3, r0
 8003906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800390a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800390e:	d104      	bne.n	800391a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003918:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f004 fe94 	bl	800864c <USB_ReadInterrupts>
 8003924:	4603      	mov	r3, r0
 8003926:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800392a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800392e:	d104      	bne.n	800393a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003938:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f004 fe84 	bl	800864c <USB_ReadInterrupts>
 8003944:	4603      	mov	r3, r0
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b02      	cmp	r3, #2
 800394c:	d103      	bne.n	8003956 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2202      	movs	r2, #2
 8003954:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f004 fe76 	bl	800864c <USB_ReadInterrupts>
 8003960:	4603      	mov	r3, r0
 8003962:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800396a:	d11c      	bne.n	80039a6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003974:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10f      	bne.n	80039a6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003986:	2110      	movs	r1, #16
 8003988:	6938      	ldr	r0, [r7, #16]
 800398a:	f004 fd65 	bl	8008458 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800398e:	6938      	ldr	r0, [r7, #16]
 8003990:	f004 fd96 	bl	80084c0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2101      	movs	r1, #1
 800399a:	4618      	mov	r0, r3
 800399c:	f004 ff6c 	bl	8008878 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f00c f95d 	bl	800fc60 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f004 fe4e 	bl	800864c <USB_ReadInterrupts>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039ba:	d102      	bne.n	80039c2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f001 f89e 	bl	8004afe <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f004 fe40 	bl	800864c <USB_ReadInterrupts>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d106      	bne.n	80039e4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f00c f926 	bl	800fc28 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2208      	movs	r2, #8
 80039e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f004 fe2f 	bl	800864c <USB_ReadInterrupts>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b10      	cmp	r3, #16
 80039f6:	d101      	bne.n	80039fc <HAL_HCD_IRQHandler+0x158>
 80039f8:	2301      	movs	r3, #1
 80039fa:	e000      	b.n	80039fe <HAL_HCD_IRQHandler+0x15a>
 80039fc:	2300      	movs	r3, #0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d012      	beq.n	8003a28 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699a      	ldr	r2, [r3, #24]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0210 	bic.w	r2, r2, #16
 8003a10:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 ffa1 	bl	800495a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699a      	ldr	r2, [r3, #24]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0210 	orr.w	r2, r2, #16
 8003a26:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f004 fe0d 	bl	800864c <USB_ReadInterrupts>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a3c:	d13a      	bne.n	8003ab4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f005 fa42 	bl	8008ecc <USB_HC_ReadInterrupt>
 8003a48:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	e025      	b.n	8003a9c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d018      	beq.n	8003a96 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a7a:	d106      	bne.n	8003a8a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	4619      	mov	r1, r3
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f8ab 	bl	8003bde <HCD_HC_IN_IRQHandler>
 8003a88:	e005      	b.n	8003a96 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	4619      	mov	r1, r3
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fbf9 	bl	8004288 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d3d4      	bcc.n	8003a50 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aae:	615a      	str	r2, [r3, #20]
 8003ab0:	e000      	b.n	8003ab4 <HAL_HCD_IRQHandler+0x210>
      return;
 8003ab2:	bf00      	nop
    }
  }
}
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_HCD_Start+0x16>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e013      	b.n	8003af8 <HAL_HCD_Start+0x3e>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2101      	movs	r1, #1
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f004 ff2e 	bl	8008940 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f004 fc46 	bl	800837a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_HCD_Stop+0x16>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e00d      	b.n	8003b32 <HAL_HCD_Stop+0x32>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f005 fb1c 	bl	8009160 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b082      	sub	sp, #8
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f004 fed0 	bl	80088ec <USB_ResetPort>
 8003b4c:	4603      	mov	r3, r0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	212c      	movs	r1, #44	; 0x2c
 8003b68:	fb01 f303 	mul.w	r3, r1, r3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3360      	adds	r3, #96	; 0x60
 8003b70:	781b      	ldrb	r3, [r3, #0]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	460b      	mov	r3, r1
 8003b88:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	212c      	movs	r1, #44	; 0x2c
 8003b90:	fb01 f303 	mul.w	r3, r1, r3
 8003b94:	4413      	add	r3, r2
 8003b96:	3350      	adds	r3, #80	; 0x50
 8003b98:	681b      	ldr	r3, [r3, #0]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f004 ff14 	bl	80089e0 <USB_GetCurrentFrame>
 8003bb8:	4603      	mov	r3, r0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b082      	sub	sp, #8
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f004 feef 	bl	80089b2 <USB_GetHostSpeed>
 8003bd4:	4603      	mov	r3, r0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b086      	sub	sp, #24
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	460b      	mov	r3, r1
 8003be8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d11a      	bne.n	8003c44 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	212c      	movs	r1, #44	; 0x2c
 8003c26:	fb01 f303 	mul.w	r3, r1, r3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3361      	adds	r3, #97	; 0x61
 8003c2e:	2206      	movs	r2, #6
 8003c30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f005 f956 	bl	8008eee <USB_HC_Halt>
 8003c42:	e0af      	b.n	8003da4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c5a:	d11b      	bne.n	8003c94 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c68:	461a      	mov	r2, r3
 8003c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	212c      	movs	r1, #44	; 0x2c
 8003c76:	fb01 f303 	mul.w	r3, r1, r3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3361      	adds	r3, #97	; 0x61
 8003c7e:	2207      	movs	r2, #7
 8003c80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f005 f92e 	bl	8008eee <USB_HC_Halt>
 8003c92:	e087      	b.n	8003da4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	d109      	bne.n	8003cbe <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	2320      	movs	r3, #32
 8003cba:	6093      	str	r3, [r2, #8]
 8003cbc:	e072      	b.n	8003da4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d11a      	bne.n	8003d0a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2308      	movs	r3, #8
 8003ce4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	212c      	movs	r1, #44	; 0x2c
 8003cec:	fb01 f303 	mul.w	r3, r1, r3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3361      	adds	r3, #97	; 0x61
 8003cf4:	2205      	movs	r2, #5
 8003cf6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	4611      	mov	r1, r2
 8003d02:	4618      	mov	r0, r3
 8003d04:	f005 f8f3 	bl	8008eee <USB_HC_Halt>
 8003d08:	e04c      	b.n	8003da4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d20:	d11b      	bne.n	8003d5a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d34:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	212c      	movs	r1, #44	; 0x2c
 8003d3c:	fb01 f303 	mul.w	r3, r1, r3
 8003d40:	4413      	add	r3, r2
 8003d42:	3361      	adds	r3, #97	; 0x61
 8003d44:	2208      	movs	r2, #8
 8003d46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	4611      	mov	r1, r2
 8003d52:	4618      	mov	r0, r3
 8003d54:	f005 f8cb 	bl	8008eee <USB_HC_Halt>
 8003d58:	e024      	b.n	8003da4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6c:	2b80      	cmp	r3, #128	; 0x80
 8003d6e:	d119      	bne.n	8003da4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	2380      	movs	r3, #128	; 0x80
 8003d80:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	212c      	movs	r1, #44	; 0x2c
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3361      	adds	r3, #97	; 0x61
 8003d90:	2206      	movs	r2, #6
 8003d92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f005 f8a5 	bl	8008eee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dba:	d112      	bne.n	8003de2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	4611      	mov	r1, r2
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f005 f891 	bl	8008eee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd8:	461a      	mov	r2, r3
 8003dda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dde:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003de0:	e24e      	b.n	8004280 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	f040 80df 	bne.w	8003fb8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d019      	beq.n	8003e36 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	212c      	movs	r1, #44	; 0x2c
 8003e08:	fb01 f303 	mul.w	r3, r1, r3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3348      	adds	r3, #72	; 0x48
 8003e10:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	0159      	lsls	r1, r3, #5
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	440b      	add	r3, r1
 8003e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003e24:	1ad2      	subs	r2, r2, r3
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	202c      	movs	r0, #44	; 0x2c
 8003e2c:	fb00 f303 	mul.w	r3, r0, r3
 8003e30:	440b      	add	r3, r1
 8003e32:	3350      	adds	r3, #80	; 0x50
 8003e34:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	212c      	movs	r1, #44	; 0x2c
 8003e3c:	fb01 f303 	mul.w	r3, r1, r3
 8003e40:	4413      	add	r3, r2
 8003e42:	3361      	adds	r3, #97	; 0x61
 8003e44:	2201      	movs	r2, #1
 8003e46:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	212c      	movs	r1, #44	; 0x2c
 8003e4e:	fb01 f303 	mul.w	r3, r1, r3
 8003e52:	4413      	add	r3, r2
 8003e54:	335c      	adds	r3, #92	; 0x5c
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	015a      	lsls	r2, r3, #5
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4413      	add	r3, r2
 8003e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e66:	461a      	mov	r2, r3
 8003e68:	2301      	movs	r3, #1
 8003e6a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	212c      	movs	r1, #44	; 0x2c
 8003e72:	fb01 f303 	mul.w	r3, r1, r3
 8003e76:	4413      	add	r3, r2
 8003e78:	333f      	adds	r3, #63	; 0x3f
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d009      	beq.n	8003e94 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	212c      	movs	r1, #44	; 0x2c
 8003e86:	fb01 f303 	mul.w	r3, r1, r3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	333f      	adds	r3, #63	; 0x3f
 8003e8e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d111      	bne.n	8003eb8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f005 f825 	bl	8008eee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	2310      	movs	r3, #16
 8003eb4:	6093      	str	r3, [r2, #8]
 8003eb6:	e03a      	b.n	8003f2e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	212c      	movs	r1, #44	; 0x2c
 8003ebe:	fb01 f303 	mul.w	r3, r1, r3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	333f      	adds	r3, #63	; 0x3f
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d009      	beq.n	8003ee0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	212c      	movs	r1, #44	; 0x2c
 8003ed2:	fb01 f303 	mul.w	r3, r1, r3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	333f      	adds	r3, #63	; 0x3f
 8003eda:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d126      	bne.n	8003f2e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	0151      	lsls	r1, r2, #5
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	440a      	add	r2, r1
 8003ef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003efa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003efe:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	212c      	movs	r1, #44	; 0x2c
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3360      	adds	r3, #96	; 0x60
 8003f0e:	2201      	movs	r2, #1
 8003f10:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	b2d9      	uxtb	r1, r3
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	202c      	movs	r0, #44	; 0x2c
 8003f1c:	fb00 f303 	mul.w	r3, r0, r3
 8003f20:	4413      	add	r3, r2
 8003f22:	3360      	adds	r3, #96	; 0x60
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f00b fea7 	bl	800fc7c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d12b      	bne.n	8003f8e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	212c      	movs	r1, #44	; 0x2c
 8003f3c:	fb01 f303 	mul.w	r3, r1, r3
 8003f40:	4413      	add	r3, r2
 8003f42:	3348      	adds	r3, #72	; 0x48
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	202c      	movs	r0, #44	; 0x2c
 8003f4c:	fb00 f202 	mul.w	r2, r0, r2
 8003f50:	440a      	add	r2, r1
 8003f52:	3240      	adds	r2, #64	; 0x40
 8003f54:	8812      	ldrh	r2, [r2, #0]
 8003f56:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 818e 	beq.w	8004280 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	212c      	movs	r1, #44	; 0x2c
 8003f6a:	fb01 f303 	mul.w	r3, r1, r3
 8003f6e:	4413      	add	r3, r2
 8003f70:	3354      	adds	r3, #84	; 0x54
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	f083 0301 	eor.w	r3, r3, #1
 8003f78:	b2d8      	uxtb	r0, r3
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	212c      	movs	r1, #44	; 0x2c
 8003f80:	fb01 f303 	mul.w	r3, r1, r3
 8003f84:	4413      	add	r3, r2
 8003f86:	3354      	adds	r3, #84	; 0x54
 8003f88:	4602      	mov	r2, r0
 8003f8a:	701a      	strb	r2, [r3, #0]
}
 8003f8c:	e178      	b.n	8004280 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	212c      	movs	r1, #44	; 0x2c
 8003f94:	fb01 f303 	mul.w	r3, r1, r3
 8003f98:	4413      	add	r3, r2
 8003f9a:	3354      	adds	r3, #84	; 0x54
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	f083 0301 	eor.w	r3, r3, #1
 8003fa2:	b2d8      	uxtb	r0, r3
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	212c      	movs	r1, #44	; 0x2c
 8003faa:	fb01 f303 	mul.w	r3, r1, r3
 8003fae:	4413      	add	r3, r2
 8003fb0:	3354      	adds	r3, #84	; 0x54
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	701a      	strb	r2, [r3, #0]
}
 8003fb6:	e163      	b.n	8004280 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	f040 80f6 	bne.w	80041bc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	212c      	movs	r1, #44	; 0x2c
 8003fd6:	fb01 f303 	mul.w	r3, r1, r3
 8003fda:	4413      	add	r3, r2
 8003fdc:	3361      	adds	r3, #97	; 0x61
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d109      	bne.n	8003ff8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	212c      	movs	r1, #44	; 0x2c
 8003fea:	fb01 f303 	mul.w	r3, r1, r3
 8003fee:	4413      	add	r3, r2
 8003ff0:	3360      	adds	r3, #96	; 0x60
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	701a      	strb	r2, [r3, #0]
 8003ff6:	e0c9      	b.n	800418c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	212c      	movs	r1, #44	; 0x2c
 8003ffe:	fb01 f303 	mul.w	r3, r1, r3
 8004002:	4413      	add	r3, r2
 8004004:	3361      	adds	r3, #97	; 0x61
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b05      	cmp	r3, #5
 800400a:	d109      	bne.n	8004020 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	212c      	movs	r1, #44	; 0x2c
 8004012:	fb01 f303 	mul.w	r3, r1, r3
 8004016:	4413      	add	r3, r2
 8004018:	3360      	adds	r3, #96	; 0x60
 800401a:	2205      	movs	r2, #5
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	e0b5      	b.n	800418c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	212c      	movs	r1, #44	; 0x2c
 8004026:	fb01 f303 	mul.w	r3, r1, r3
 800402a:	4413      	add	r3, r2
 800402c:	3361      	adds	r3, #97	; 0x61
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b06      	cmp	r3, #6
 8004032:	d009      	beq.n	8004048 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	212c      	movs	r1, #44	; 0x2c
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	4413      	add	r3, r2
 8004040:	3361      	adds	r3, #97	; 0x61
 8004042:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004044:	2b08      	cmp	r3, #8
 8004046:	d150      	bne.n	80040ea <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	212c      	movs	r1, #44	; 0x2c
 800404e:	fb01 f303 	mul.w	r3, r1, r3
 8004052:	4413      	add	r3, r2
 8004054:	335c      	adds	r3, #92	; 0x5c
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	202c      	movs	r0, #44	; 0x2c
 8004060:	fb00 f303 	mul.w	r3, r0, r3
 8004064:	440b      	add	r3, r1
 8004066:	335c      	adds	r3, #92	; 0x5c
 8004068:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	212c      	movs	r1, #44	; 0x2c
 8004070:	fb01 f303 	mul.w	r3, r1, r3
 8004074:	4413      	add	r3, r2
 8004076:	335c      	adds	r3, #92	; 0x5c
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d912      	bls.n	80040a4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	212c      	movs	r1, #44	; 0x2c
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	4413      	add	r3, r2
 800408a:	335c      	adds	r3, #92	; 0x5c
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	212c      	movs	r1, #44	; 0x2c
 8004096:	fb01 f303 	mul.w	r3, r1, r3
 800409a:	4413      	add	r3, r2
 800409c:	3360      	adds	r3, #96	; 0x60
 800409e:	2204      	movs	r2, #4
 80040a0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040a2:	e073      	b.n	800418c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	212c      	movs	r1, #44	; 0x2c
 80040aa:	fb01 f303 	mul.w	r3, r1, r3
 80040ae:	4413      	add	r3, r2
 80040b0:	3360      	adds	r3, #96	; 0x60
 80040b2:	2202      	movs	r2, #2
 80040b4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040cc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040d4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e2:	461a      	mov	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040e8:	e050      	b.n	800418c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	212c      	movs	r1, #44	; 0x2c
 80040f0:	fb01 f303 	mul.w	r3, r1, r3
 80040f4:	4413      	add	r3, r2
 80040f6:	3361      	adds	r3, #97	; 0x61
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d122      	bne.n	8004144 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	212c      	movs	r1, #44	; 0x2c
 8004104:	fb01 f303 	mul.w	r3, r1, r3
 8004108:	4413      	add	r3, r2
 800410a:	3360      	adds	r3, #96	; 0x60
 800410c:	2202      	movs	r2, #2
 800410e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	4413      	add	r3, r2
 8004118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004126:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800412e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	4413      	add	r3, r2
 8004138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413c:	461a      	mov	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e023      	b.n	800418c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	212c      	movs	r1, #44	; 0x2c
 800414a:	fb01 f303 	mul.w	r3, r1, r3
 800414e:	4413      	add	r3, r2
 8004150:	3361      	adds	r3, #97	; 0x61
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b07      	cmp	r3, #7
 8004156:	d119      	bne.n	800418c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	212c      	movs	r1, #44	; 0x2c
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	4413      	add	r3, r2
 8004164:	335c      	adds	r3, #92	; 0x5c
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	202c      	movs	r0, #44	; 0x2c
 8004170:	fb00 f303 	mul.w	r3, r0, r3
 8004174:	440b      	add	r3, r1
 8004176:	335c      	adds	r3, #92	; 0x5c
 8004178:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	212c      	movs	r1, #44	; 0x2c
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	4413      	add	r3, r2
 8004186:	3360      	adds	r3, #96	; 0x60
 8004188:	2204      	movs	r2, #4
 800418a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	4413      	add	r3, r2
 8004194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004198:	461a      	mov	r2, r3
 800419a:	2302      	movs	r3, #2
 800419c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	b2d9      	uxtb	r1, r3
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	202c      	movs	r0, #44	; 0x2c
 80041a8:	fb00 f303 	mul.w	r3, r0, r3
 80041ac:	4413      	add	r3, r2
 80041ae:	3360      	adds	r3, #96	; 0x60
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f00b fd61 	bl	800fc7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80041ba:	e061      	b.n	8004280 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b10      	cmp	r3, #16
 80041d0:	d156      	bne.n	8004280 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	212c      	movs	r1, #44	; 0x2c
 80041d8:	fb01 f303 	mul.w	r3, r1, r3
 80041dc:	4413      	add	r3, r2
 80041de:	333f      	adds	r3, #63	; 0x3f
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d111      	bne.n	800420a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	212c      	movs	r1, #44	; 0x2c
 80041ec:	fb01 f303 	mul.w	r3, r1, r3
 80041f0:	4413      	add	r3, r2
 80041f2:	335c      	adds	r3, #92	; 0x5c
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	4611      	mov	r1, r2
 8004202:	4618      	mov	r0, r3
 8004204:	f004 fe73 	bl	8008eee <USB_HC_Halt>
 8004208:	e031      	b.n	800426e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	212c      	movs	r1, #44	; 0x2c
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	4413      	add	r3, r2
 8004216:	333f      	adds	r3, #63	; 0x3f
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	212c      	movs	r1, #44	; 0x2c
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	4413      	add	r3, r2
 800422a:	333f      	adds	r3, #63	; 0x3f
 800422c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800422e:	2b02      	cmp	r3, #2
 8004230:	d11d      	bne.n	800426e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	212c      	movs	r1, #44	; 0x2c
 8004238:	fb01 f303 	mul.w	r3, r1, r3
 800423c:	4413      	add	r3, r2
 800423e:	335c      	adds	r3, #92	; 0x5c
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d110      	bne.n	800426e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	212c      	movs	r1, #44	; 0x2c
 8004252:	fb01 f303 	mul.w	r3, r1, r3
 8004256:	4413      	add	r3, r2
 8004258:	3361      	adds	r3, #97	; 0x61
 800425a:	2203      	movs	r2, #3
 800425c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	4611      	mov	r1, r2
 8004268:	4618      	mov	r0, r3
 800426a:	f004 fe40 	bl	8008eee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	4413      	add	r3, r2
 8004276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800427a:	461a      	mov	r2, r3
 800427c:	2310      	movs	r3, #16
 800427e:	6093      	str	r3, [r2, #8]
}
 8004280:	bf00      	nop
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	460b      	mov	r3, r1
 8004292:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800429e:	78fb      	ldrb	r3, [r7, #3]
 80042a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d11a      	bne.n	80042ee <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c4:	461a      	mov	r2, r3
 80042c6:	2304      	movs	r3, #4
 80042c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	212c      	movs	r1, #44	; 0x2c
 80042d0:	fb01 f303 	mul.w	r3, r1, r3
 80042d4:	4413      	add	r3, r2
 80042d6:	3361      	adds	r3, #97	; 0x61
 80042d8:	2206      	movs	r2, #6
 80042da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	4611      	mov	r1, r2
 80042e6:	4618      	mov	r0, r3
 80042e8:	f004 fe01 	bl	8008eee <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80042ec:	e331      	b.n	8004952 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b20      	cmp	r3, #32
 8004302:	d12e      	bne.n	8004362 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	4413      	add	r3, r2
 800430c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004310:	461a      	mov	r2, r3
 8004312:	2320      	movs	r3, #32
 8004314:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	212c      	movs	r1, #44	; 0x2c
 800431c:	fb01 f303 	mul.w	r3, r1, r3
 8004320:	4413      	add	r3, r2
 8004322:	333d      	adds	r3, #61	; 0x3d
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b01      	cmp	r3, #1
 8004328:	f040 8313 	bne.w	8004952 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	212c      	movs	r1, #44	; 0x2c
 8004332:	fb01 f303 	mul.w	r3, r1, r3
 8004336:	4413      	add	r3, r2
 8004338:	333d      	adds	r3, #61	; 0x3d
 800433a:	2200      	movs	r2, #0
 800433c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	212c      	movs	r1, #44	; 0x2c
 8004344:	fb01 f303 	mul.w	r3, r1, r3
 8004348:	4413      	add	r3, r2
 800434a:	3360      	adds	r3, #96	; 0x60
 800434c:	2202      	movs	r2, #2
 800434e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	4611      	mov	r1, r2
 800435a:	4618      	mov	r0, r3
 800435c:	f004 fdc7 	bl	8008eee <USB_HC_Halt>
}
 8004360:	e2f7      	b.n	8004952 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	4413      	add	r3, r2
 800436a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004378:	d112      	bne.n	80043a0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	4413      	add	r3, r2
 8004382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004386:	461a      	mov	r2, r3
 8004388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800438c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	4611      	mov	r1, r2
 8004398:	4618      	mov	r0, r3
 800439a:	f004 fda8 	bl	8008eee <USB_HC_Halt>
}
 800439e:	e2d8      	b.n	8004952 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d140      	bne.n	8004438 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	212c      	movs	r1, #44	; 0x2c
 80043bc:	fb01 f303 	mul.w	r3, r1, r3
 80043c0:	4413      	add	r3, r2
 80043c2:	335c      	adds	r3, #92	; 0x5c
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b40      	cmp	r3, #64	; 0x40
 80043dc:	d111      	bne.n	8004402 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	212c      	movs	r1, #44	; 0x2c
 80043e4:	fb01 f303 	mul.w	r3, r1, r3
 80043e8:	4413      	add	r3, r2
 80043ea:	333d      	adds	r3, #61	; 0x3d
 80043ec:	2201      	movs	r2, #1
 80043ee:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fc:	461a      	mov	r2, r3
 80043fe:	2340      	movs	r3, #64	; 0x40
 8004400:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	4413      	add	r3, r2
 800440a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440e:	461a      	mov	r2, r3
 8004410:	2301      	movs	r3, #1
 8004412:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	212c      	movs	r1, #44	; 0x2c
 800441a:	fb01 f303 	mul.w	r3, r1, r3
 800441e:	4413      	add	r3, r2
 8004420:	3361      	adds	r3, #97	; 0x61
 8004422:	2201      	movs	r2, #1
 8004424:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	4611      	mov	r1, r2
 8004430:	4618      	mov	r0, r3
 8004432:	f004 fd5c 	bl	8008eee <USB_HC_Halt>
}
 8004436:	e28c      	b.n	8004952 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	4413      	add	r3, r2
 8004440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444a:	2b40      	cmp	r3, #64	; 0x40
 800444c:	d12c      	bne.n	80044a8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	212c      	movs	r1, #44	; 0x2c
 8004454:	fb01 f303 	mul.w	r3, r1, r3
 8004458:	4413      	add	r3, r2
 800445a:	3361      	adds	r3, #97	; 0x61
 800445c:	2204      	movs	r2, #4
 800445e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	212c      	movs	r1, #44	; 0x2c
 8004466:	fb01 f303 	mul.w	r3, r1, r3
 800446a:	4413      	add	r3, r2
 800446c:	333d      	adds	r3, #61	; 0x3d
 800446e:	2201      	movs	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	212c      	movs	r1, #44	; 0x2c
 8004478:	fb01 f303 	mul.w	r3, r1, r3
 800447c:	4413      	add	r3, r2
 800447e:	335c      	adds	r3, #92	; 0x5c
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	4611      	mov	r1, r2
 800448e:	4618      	mov	r0, r3
 8004490:	f004 fd2d 	bl	8008eee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	4413      	add	r3, r2
 800449c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a0:	461a      	mov	r2, r3
 80044a2:	2340      	movs	r3, #64	; 0x40
 80044a4:	6093      	str	r3, [r2, #8]
}
 80044a6:	e254      	b.n	8004952 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	d11a      	bne.n	80044f4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ca:	461a      	mov	r2, r3
 80044cc:	2308      	movs	r3, #8
 80044ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	212c      	movs	r1, #44	; 0x2c
 80044d6:	fb01 f303 	mul.w	r3, r1, r3
 80044da:	4413      	add	r3, r2
 80044dc:	3361      	adds	r3, #97	; 0x61
 80044de:	2205      	movs	r2, #5
 80044e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	4611      	mov	r1, r2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f004 fcfe 	bl	8008eee <USB_HC_Halt>
}
 80044f2:	e22e      	b.n	8004952 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b10      	cmp	r3, #16
 8004508:	d140      	bne.n	800458c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	212c      	movs	r1, #44	; 0x2c
 8004510:	fb01 f303 	mul.w	r3, r1, r3
 8004514:	4413      	add	r3, r2
 8004516:	335c      	adds	r3, #92	; 0x5c
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	212c      	movs	r1, #44	; 0x2c
 8004522:	fb01 f303 	mul.w	r3, r1, r3
 8004526:	4413      	add	r3, r2
 8004528:	3361      	adds	r3, #97	; 0x61
 800452a:	2203      	movs	r2, #3
 800452c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	212c      	movs	r1, #44	; 0x2c
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	4413      	add	r3, r2
 800453a:	333d      	adds	r3, #61	; 0x3d
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d112      	bne.n	8004568 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	212c      	movs	r1, #44	; 0x2c
 8004548:	fb01 f303 	mul.w	r3, r1, r3
 800454c:	4413      	add	r3, r2
 800454e:	333c      	adds	r3, #60	; 0x3c
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d108      	bne.n	8004568 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	212c      	movs	r1, #44	; 0x2c
 800455c:	fb01 f303 	mul.w	r3, r1, r3
 8004560:	4413      	add	r3, r2
 8004562:	333d      	adds	r3, #61	; 0x3d
 8004564:	2201      	movs	r2, #1
 8004566:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	4611      	mov	r1, r2
 8004572:	4618      	mov	r0, r3
 8004574:	f004 fcbb 	bl	8008eee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	4413      	add	r3, r2
 8004580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004584:	461a      	mov	r2, r3
 8004586:	2310      	movs	r3, #16
 8004588:	6093      	str	r3, [r2, #8]
}
 800458a:	e1e2      	b.n	8004952 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	4413      	add	r3, r2
 8004594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459e:	2b80      	cmp	r3, #128	; 0x80
 80045a0:	d164      	bne.n	800466c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d111      	bne.n	80045ce <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	212c      	movs	r1, #44	; 0x2c
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	4413      	add	r3, r2
 80045b6:	3361      	adds	r3, #97	; 0x61
 80045b8:	2206      	movs	r2, #6
 80045ba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	4611      	mov	r1, r2
 80045c6:	4618      	mov	r0, r3
 80045c8:	f004 fc91 	bl	8008eee <USB_HC_Halt>
 80045cc:	e044      	b.n	8004658 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	212c      	movs	r1, #44	; 0x2c
 80045d4:	fb01 f303 	mul.w	r3, r1, r3
 80045d8:	4413      	add	r3, r2
 80045da:	335c      	adds	r3, #92	; 0x5c
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	202c      	movs	r0, #44	; 0x2c
 80045e6:	fb00 f303 	mul.w	r3, r0, r3
 80045ea:	440b      	add	r3, r1
 80045ec:	335c      	adds	r3, #92	; 0x5c
 80045ee:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	212c      	movs	r1, #44	; 0x2c
 80045f6:	fb01 f303 	mul.w	r3, r1, r3
 80045fa:	4413      	add	r3, r2
 80045fc:	335c      	adds	r3, #92	; 0x5c
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b02      	cmp	r3, #2
 8004602:	d920      	bls.n	8004646 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	212c      	movs	r1, #44	; 0x2c
 800460a:	fb01 f303 	mul.w	r3, r1, r3
 800460e:	4413      	add	r3, r2
 8004610:	335c      	adds	r3, #92	; 0x5c
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	212c      	movs	r1, #44	; 0x2c
 800461c:	fb01 f303 	mul.w	r3, r1, r3
 8004620:	4413      	add	r3, r2
 8004622:	3360      	adds	r3, #96	; 0x60
 8004624:	2204      	movs	r2, #4
 8004626:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	b2d9      	uxtb	r1, r3
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	202c      	movs	r0, #44	; 0x2c
 8004632:	fb00 f303 	mul.w	r3, r0, r3
 8004636:	4413      	add	r3, r2
 8004638:	3360      	adds	r3, #96	; 0x60
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f00b fb1c 	bl	800fc7c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004644:	e008      	b.n	8004658 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	212c      	movs	r1, #44	; 0x2c
 800464c:	fb01 f303 	mul.w	r3, r1, r3
 8004650:	4413      	add	r3, r2
 8004652:	3360      	adds	r3, #96	; 0x60
 8004654:	2202      	movs	r2, #2
 8004656:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	4413      	add	r3, r2
 8004660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004664:	461a      	mov	r2, r3
 8004666:	2380      	movs	r3, #128	; 0x80
 8004668:	6093      	str	r3, [r2, #8]
}
 800466a:	e172      	b.n	8004952 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	4413      	add	r3, r2
 8004674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800467e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004682:	d11b      	bne.n	80046bc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	212c      	movs	r1, #44	; 0x2c
 800468a:	fb01 f303 	mul.w	r3, r1, r3
 800468e:	4413      	add	r3, r2
 8004690:	3361      	adds	r3, #97	; 0x61
 8004692:	2208      	movs	r2, #8
 8004694:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	4611      	mov	r1, r2
 80046a0:	4618      	mov	r0, r3
 80046a2:	f004 fc24 	bl	8008eee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b2:	461a      	mov	r2, r3
 80046b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046b8:	6093      	str	r3, [r2, #8]
}
 80046ba:	e14a      	b.n	8004952 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	f040 813f 	bne.w	8004952 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	212c      	movs	r1, #44	; 0x2c
 80046da:	fb01 f303 	mul.w	r3, r1, r3
 80046de:	4413      	add	r3, r2
 80046e0:	3361      	adds	r3, #97	; 0x61
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d17d      	bne.n	80047e4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	212c      	movs	r1, #44	; 0x2c
 80046ee:	fb01 f303 	mul.w	r3, r1, r3
 80046f2:	4413      	add	r3, r2
 80046f4:	3360      	adds	r3, #96	; 0x60
 80046f6:	2201      	movs	r2, #1
 80046f8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	212c      	movs	r1, #44	; 0x2c
 8004700:	fb01 f303 	mul.w	r3, r1, r3
 8004704:	4413      	add	r3, r2
 8004706:	333f      	adds	r3, #63	; 0x3f
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d00a      	beq.n	8004724 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	212c      	movs	r1, #44	; 0x2c
 8004714:	fb01 f303 	mul.w	r3, r1, r3
 8004718:	4413      	add	r3, r2
 800471a:	333f      	adds	r3, #63	; 0x3f
 800471c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800471e:	2b03      	cmp	r3, #3
 8004720:	f040 8100 	bne.w	8004924 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d113      	bne.n	8004754 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	212c      	movs	r1, #44	; 0x2c
 8004732:	fb01 f303 	mul.w	r3, r1, r3
 8004736:	4413      	add	r3, r2
 8004738:	3355      	adds	r3, #85	; 0x55
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	f083 0301 	eor.w	r3, r3, #1
 8004740:	b2d8      	uxtb	r0, r3
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	212c      	movs	r1, #44	; 0x2c
 8004748:	fb01 f303 	mul.w	r3, r1, r3
 800474c:	4413      	add	r3, r2
 800474e:	3355      	adds	r3, #85	; 0x55
 8004750:	4602      	mov	r2, r0
 8004752:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	2b01      	cmp	r3, #1
 800475a:	f040 80e3 	bne.w	8004924 <HCD_HC_OUT_IRQHandler+0x69c>
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	212c      	movs	r1, #44	; 0x2c
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	4413      	add	r3, r2
 800476a:	334c      	adds	r3, #76	; 0x4c
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 80d8 	beq.w	8004924 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	212c      	movs	r1, #44	; 0x2c
 800477a:	fb01 f303 	mul.w	r3, r1, r3
 800477e:	4413      	add	r3, r2
 8004780:	334c      	adds	r3, #76	; 0x4c
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	202c      	movs	r0, #44	; 0x2c
 800478a:	fb00 f202 	mul.w	r2, r0, r2
 800478e:	440a      	add	r2, r1
 8004790:	3240      	adds	r2, #64	; 0x40
 8004792:	8812      	ldrh	r2, [r2, #0]
 8004794:	4413      	add	r3, r2
 8004796:	3b01      	subs	r3, #1
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	202c      	movs	r0, #44	; 0x2c
 800479e:	fb00 f202 	mul.w	r2, r0, r2
 80047a2:	440a      	add	r2, r1
 80047a4:	3240      	adds	r2, #64	; 0x40
 80047a6:	8812      	ldrh	r2, [r2, #0]
 80047a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80b5 	beq.w	8004924 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	212c      	movs	r1, #44	; 0x2c
 80047c0:	fb01 f303 	mul.w	r3, r1, r3
 80047c4:	4413      	add	r3, r2
 80047c6:	3355      	adds	r3, #85	; 0x55
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	f083 0301 	eor.w	r3, r3, #1
 80047ce:	b2d8      	uxtb	r0, r3
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	212c      	movs	r1, #44	; 0x2c
 80047d6:	fb01 f303 	mul.w	r3, r1, r3
 80047da:	4413      	add	r3, r2
 80047dc:	3355      	adds	r3, #85	; 0x55
 80047de:	4602      	mov	r2, r0
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	e09f      	b.n	8004924 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	212c      	movs	r1, #44	; 0x2c
 80047ea:	fb01 f303 	mul.w	r3, r1, r3
 80047ee:	4413      	add	r3, r2
 80047f0:	3361      	adds	r3, #97	; 0x61
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d109      	bne.n	800480c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	212c      	movs	r1, #44	; 0x2c
 80047fe:	fb01 f303 	mul.w	r3, r1, r3
 8004802:	4413      	add	r3, r2
 8004804:	3360      	adds	r3, #96	; 0x60
 8004806:	2202      	movs	r2, #2
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	e08b      	b.n	8004924 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	212c      	movs	r1, #44	; 0x2c
 8004812:	fb01 f303 	mul.w	r3, r1, r3
 8004816:	4413      	add	r3, r2
 8004818:	3361      	adds	r3, #97	; 0x61
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b04      	cmp	r3, #4
 800481e:	d109      	bne.n	8004834 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	212c      	movs	r1, #44	; 0x2c
 8004826:	fb01 f303 	mul.w	r3, r1, r3
 800482a:	4413      	add	r3, r2
 800482c:	3360      	adds	r3, #96	; 0x60
 800482e:	2202      	movs	r2, #2
 8004830:	701a      	strb	r2, [r3, #0]
 8004832:	e077      	b.n	8004924 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	212c      	movs	r1, #44	; 0x2c
 800483a:	fb01 f303 	mul.w	r3, r1, r3
 800483e:	4413      	add	r3, r2
 8004840:	3361      	adds	r3, #97	; 0x61
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b05      	cmp	r3, #5
 8004846:	d109      	bne.n	800485c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	212c      	movs	r1, #44	; 0x2c
 800484e:	fb01 f303 	mul.w	r3, r1, r3
 8004852:	4413      	add	r3, r2
 8004854:	3360      	adds	r3, #96	; 0x60
 8004856:	2205      	movs	r2, #5
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	e063      	b.n	8004924 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	212c      	movs	r1, #44	; 0x2c
 8004862:	fb01 f303 	mul.w	r3, r1, r3
 8004866:	4413      	add	r3, r2
 8004868:	3361      	adds	r3, #97	; 0x61
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b06      	cmp	r3, #6
 800486e:	d009      	beq.n	8004884 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	212c      	movs	r1, #44	; 0x2c
 8004876:	fb01 f303 	mul.w	r3, r1, r3
 800487a:	4413      	add	r3, r2
 800487c:	3361      	adds	r3, #97	; 0x61
 800487e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004880:	2b08      	cmp	r3, #8
 8004882:	d14f      	bne.n	8004924 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	212c      	movs	r1, #44	; 0x2c
 800488a:	fb01 f303 	mul.w	r3, r1, r3
 800488e:	4413      	add	r3, r2
 8004890:	335c      	adds	r3, #92	; 0x5c
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	202c      	movs	r0, #44	; 0x2c
 800489c:	fb00 f303 	mul.w	r3, r0, r3
 80048a0:	440b      	add	r3, r1
 80048a2:	335c      	adds	r3, #92	; 0x5c
 80048a4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	212c      	movs	r1, #44	; 0x2c
 80048ac:	fb01 f303 	mul.w	r3, r1, r3
 80048b0:	4413      	add	r3, r2
 80048b2:	335c      	adds	r3, #92	; 0x5c
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d912      	bls.n	80048e0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	212c      	movs	r1, #44	; 0x2c
 80048c0:	fb01 f303 	mul.w	r3, r1, r3
 80048c4:	4413      	add	r3, r2
 80048c6:	335c      	adds	r3, #92	; 0x5c
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	212c      	movs	r1, #44	; 0x2c
 80048d2:	fb01 f303 	mul.w	r3, r1, r3
 80048d6:	4413      	add	r3, r2
 80048d8:	3360      	adds	r3, #96	; 0x60
 80048da:	2204      	movs	r2, #4
 80048dc:	701a      	strb	r2, [r3, #0]
 80048de:	e021      	b.n	8004924 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	212c      	movs	r1, #44	; 0x2c
 80048e6:	fb01 f303 	mul.w	r3, r1, r3
 80048ea:	4413      	add	r3, r2
 80048ec:	3360      	adds	r3, #96	; 0x60
 80048ee:	2202      	movs	r2, #2
 80048f0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004908:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004910:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	4413      	add	r3, r2
 800491a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800491e:	461a      	mov	r2, r3
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	4413      	add	r3, r2
 800492c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004930:	461a      	mov	r2, r3
 8004932:	2302      	movs	r3, #2
 8004934:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	b2d9      	uxtb	r1, r3
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	202c      	movs	r0, #44	; 0x2c
 8004940:	fb00 f303 	mul.w	r3, r0, r3
 8004944:	4413      	add	r3, r2
 8004946:	3360      	adds	r3, #96	; 0x60
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f00b f995 	bl	800fc7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004952:	bf00      	nop
 8004954:	3720      	adds	r7, #32
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b08a      	sub	sp, #40	; 0x28
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	f003 030f 	and.w	r3, r3, #15
 800497a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	0c5b      	lsrs	r3, r3, #17
 8004980:	f003 030f 	and.w	r3, r3, #15
 8004984:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	091b      	lsrs	r3, r3, #4
 800498a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800498e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d004      	beq.n	80049a0 <HCD_RXQLVL_IRQHandler+0x46>
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b05      	cmp	r3, #5
 800499a:	f000 80a9 	beq.w	8004af0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800499e:	e0aa      	b.n	8004af6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 80a6 	beq.w	8004af4 <HCD_RXQLVL_IRQHandler+0x19a>
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	212c      	movs	r1, #44	; 0x2c
 80049ae:	fb01 f303 	mul.w	r3, r1, r3
 80049b2:	4413      	add	r3, r2
 80049b4:	3344      	adds	r3, #68	; 0x44
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 809b 	beq.w	8004af4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	212c      	movs	r1, #44	; 0x2c
 80049c4:	fb01 f303 	mul.w	r3, r1, r3
 80049c8:	4413      	add	r3, r2
 80049ca:	3350      	adds	r3, #80	; 0x50
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	441a      	add	r2, r3
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	202c      	movs	r0, #44	; 0x2c
 80049d8:	fb00 f303 	mul.w	r3, r0, r3
 80049dc:	440b      	add	r3, r1
 80049de:	334c      	adds	r3, #76	; 0x4c
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d87a      	bhi.n	8004adc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6818      	ldr	r0, [r3, #0]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	212c      	movs	r1, #44	; 0x2c
 80049f0:	fb01 f303 	mul.w	r3, r1, r3
 80049f4:	4413      	add	r3, r2
 80049f6:	3344      	adds	r3, #68	; 0x44
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	b292      	uxth	r2, r2
 80049fe:	4619      	mov	r1, r3
 8004a00:	f003 fdcc 	bl	800859c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	212c      	movs	r1, #44	; 0x2c
 8004a0a:	fb01 f303 	mul.w	r3, r1, r3
 8004a0e:	4413      	add	r3, r2
 8004a10:	3344      	adds	r3, #68	; 0x44
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	441a      	add	r2, r3
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	202c      	movs	r0, #44	; 0x2c
 8004a1e:	fb00 f303 	mul.w	r3, r0, r3
 8004a22:	440b      	add	r3, r1
 8004a24:	3344      	adds	r3, #68	; 0x44
 8004a26:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	212c      	movs	r1, #44	; 0x2c
 8004a2e:	fb01 f303 	mul.w	r3, r1, r3
 8004a32:	4413      	add	r3, r2
 8004a34:	3350      	adds	r3, #80	; 0x50
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	441a      	add	r2, r3
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	202c      	movs	r0, #44	; 0x2c
 8004a42:	fb00 f303 	mul.w	r3, r0, r3
 8004a46:	440b      	add	r3, r1
 8004a48:	3350      	adds	r3, #80	; 0x50
 8004a4a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	0cdb      	lsrs	r3, r3, #19
 8004a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a60:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	212c      	movs	r1, #44	; 0x2c
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3340      	adds	r3, #64	; 0x40
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	461a      	mov	r2, r3
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d13c      	bne.n	8004af4 <HCD_RXQLVL_IRQHandler+0x19a>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d039      	beq.n	8004af4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a96:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a9e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aac:	461a      	mov	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	212c      	movs	r1, #44	; 0x2c
 8004ab8:	fb01 f303 	mul.w	r3, r1, r3
 8004abc:	4413      	add	r3, r2
 8004abe:	3354      	adds	r3, #84	; 0x54
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	f083 0301 	eor.w	r3, r3, #1
 8004ac6:	b2d8      	uxtb	r0, r3
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	212c      	movs	r1, #44	; 0x2c
 8004ace:	fb01 f303 	mul.w	r3, r1, r3
 8004ad2:	4413      	add	r3, r2
 8004ad4:	3354      	adds	r3, #84	; 0x54
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	701a      	strb	r2, [r3, #0]
      break;
 8004ada:	e00b      	b.n	8004af4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	212c      	movs	r1, #44	; 0x2c
 8004ae2:	fb01 f303 	mul.w	r3, r1, r3
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3360      	adds	r3, #96	; 0x60
 8004aea:	2204      	movs	r2, #4
 8004aec:	701a      	strb	r2, [r3, #0]
      break;
 8004aee:	e001      	b.n	8004af4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004af0:	bf00      	nop
 8004af2:	e000      	b.n	8004af6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004af4:	bf00      	nop
  }
}
 8004af6:	bf00      	nop
 8004af8:	3728      	adds	r7, #40	; 0x28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b086      	sub	sp, #24
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b2a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d10b      	bne.n	8004b4e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d102      	bne.n	8004b46 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f00b f87f 	bl	800fc44 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f043 0302 	orr.w	r3, r3, #2
 8004b4c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d132      	bne.n	8004bbe <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f043 0308 	orr.w	r3, r3, #8
 8004b5e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d126      	bne.n	8004bb8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d113      	bne.n	8004b9a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004b78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b7c:	d106      	bne.n	8004b8c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2102      	movs	r1, #2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f003 fe77 	bl	8008878 <USB_InitFSLSPClkSel>
 8004b8a:	e011      	b.n	8004bb0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2101      	movs	r1, #1
 8004b92:	4618      	mov	r0, r3
 8004b94:	f003 fe70 	bl	8008878 <USB_InitFSLSPClkSel>
 8004b98:	e00a      	b.n	8004bb0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d106      	bne.n	8004bb0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ba8:	461a      	mov	r2, r3
 8004baa:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004bae:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f00b f871 	bl	800fc98 <HAL_HCD_PortEnabled_Callback>
 8004bb6:	e002      	b.n	8004bbe <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f00b f87b 	bl	800fcb4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d103      	bne.n	8004bd0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f043 0320 	orr.w	r3, r3, #32
 8004bce:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	6013      	str	r3, [r2, #0]
}
 8004bdc:	bf00      	nop
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e12b      	b.n	8004e4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d106      	bne.n	8004c10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fc fd38 	bl	8001680 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2224      	movs	r2, #36	; 0x24
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0201 	bic.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c48:	f002 fcda 	bl	8007600 <HAL_RCC_GetPCLK1Freq>
 8004c4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	4a81      	ldr	r2, [pc, #516]	; (8004e58 <HAL_I2C_Init+0x274>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d807      	bhi.n	8004c68 <HAL_I2C_Init+0x84>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4a80      	ldr	r2, [pc, #512]	; (8004e5c <HAL_I2C_Init+0x278>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	bf94      	ite	ls
 8004c60:	2301      	movls	r3, #1
 8004c62:	2300      	movhi	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	e006      	b.n	8004c76 <HAL_I2C_Init+0x92>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4a7d      	ldr	r2, [pc, #500]	; (8004e60 <HAL_I2C_Init+0x27c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	bf94      	ite	ls
 8004c70:	2301      	movls	r3, #1
 8004c72:	2300      	movhi	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e0e7      	b.n	8004e4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4a78      	ldr	r2, [pc, #480]	; (8004e64 <HAL_I2C_Init+0x280>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	0c9b      	lsrs	r3, r3, #18
 8004c88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	4a6a      	ldr	r2, [pc, #424]	; (8004e58 <HAL_I2C_Init+0x274>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d802      	bhi.n	8004cb8 <HAL_I2C_Init+0xd4>
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	e009      	b.n	8004ccc <HAL_I2C_Init+0xe8>
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004cbe:	fb02 f303 	mul.w	r3, r2, r3
 8004cc2:	4a69      	ldr	r2, [pc, #420]	; (8004e68 <HAL_I2C_Init+0x284>)
 8004cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc8:	099b      	lsrs	r3, r3, #6
 8004cca:	3301      	adds	r3, #1
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6812      	ldr	r2, [r2, #0]
 8004cd0:	430b      	orrs	r3, r1
 8004cd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004cde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	495c      	ldr	r1, [pc, #368]	; (8004e58 <HAL_I2C_Init+0x274>)
 8004ce8:	428b      	cmp	r3, r1
 8004cea:	d819      	bhi.n	8004d20 <HAL_I2C_Init+0x13c>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	1e59      	subs	r1, r3, #1
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cfa:	1c59      	adds	r1, r3, #1
 8004cfc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d00:	400b      	ands	r3, r1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <HAL_I2C_Init+0x138>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	1e59      	subs	r1, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d14:	3301      	adds	r3, #1
 8004d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d1a:	e051      	b.n	8004dc0 <HAL_I2C_Init+0x1dc>
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	e04f      	b.n	8004dc0 <HAL_I2C_Init+0x1dc>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d111      	bne.n	8004d4c <HAL_I2C_Init+0x168>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	1e58      	subs	r0, r3, #1
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6859      	ldr	r1, [r3, #4]
 8004d30:	460b      	mov	r3, r1
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	440b      	add	r3, r1
 8004d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	bf0c      	ite	eq
 8004d44:	2301      	moveq	r3, #1
 8004d46:	2300      	movne	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	e012      	b.n	8004d72 <HAL_I2C_Init+0x18e>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	1e58      	subs	r0, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6859      	ldr	r1, [r3, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	0099      	lsls	r1, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d62:	3301      	adds	r3, #1
 8004d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	bf0c      	ite	eq
 8004d6c:	2301      	moveq	r3, #1
 8004d6e:	2300      	movne	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <HAL_I2C_Init+0x196>
 8004d76:	2301      	movs	r3, #1
 8004d78:	e022      	b.n	8004dc0 <HAL_I2C_Init+0x1dc>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10e      	bne.n	8004da0 <HAL_I2C_Init+0x1bc>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1e58      	subs	r0, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6859      	ldr	r1, [r3, #4]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	440b      	add	r3, r1
 8004d90:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d94:	3301      	adds	r3, #1
 8004d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d9e:	e00f      	b.n	8004dc0 <HAL_I2C_Init+0x1dc>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	1e58      	subs	r0, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6859      	ldr	r1, [r3, #4]
 8004da8:	460b      	mov	r3, r1
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	0099      	lsls	r1, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004db6:	3301      	adds	r3, #1
 8004db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	6809      	ldr	r1, [r1, #0]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69da      	ldr	r2, [r3, #28]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004dee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6911      	ldr	r1, [r2, #16]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	68d2      	ldr	r2, [r2, #12]
 8004dfa:	4311      	orrs	r1, r2
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6812      	ldr	r2, [r2, #0]
 8004e00:	430b      	orrs	r3, r1
 8004e02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	695a      	ldr	r2, [r3, #20]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0201 	orr.w	r2, r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	000186a0 	.word	0x000186a0
 8004e5c:	001e847f 	.word	0x001e847f
 8004e60:	003d08ff 	.word	0x003d08ff
 8004e64:	431bde83 	.word	0x431bde83
 8004e68:	10624dd3 	.word	0x10624dd3

08004e6c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e021      	b.n	8004ec2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2224      	movs	r2, #36	; 0x24
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0201 	bic.w	r2, r2, #1
 8004e94:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7fc fc5c 	bl	8001754 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b088      	sub	sp, #32
 8004ed0:	af02      	add	r7, sp, #8
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	4608      	mov	r0, r1
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	461a      	mov	r2, r3
 8004eda:	4603      	mov	r3, r0
 8004edc:	817b      	strh	r3, [r7, #10]
 8004ede:	460b      	mov	r3, r1
 8004ee0:	813b      	strh	r3, [r7, #8]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ee6:	f7fd fa37 	bl	8002358 <HAL_GetTick>
 8004eea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b20      	cmp	r3, #32
 8004ef6:	f040 80d9 	bne.w	80050ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	2319      	movs	r3, #25
 8004f00:	2201      	movs	r2, #1
 8004f02:	496d      	ldr	r1, [pc, #436]	; (80050b8 <HAL_I2C_Mem_Write+0x1ec>)
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 fc8d 	bl	8005824 <I2C_WaitOnFlagUntilTimeout>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f10:	2302      	movs	r3, #2
 8004f12:	e0cc      	b.n	80050ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_I2C_Mem_Write+0x56>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e0c5      	b.n	80050ae <HAL_I2C_Mem_Write+0x1e2>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d007      	beq.n	8004f48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2221      	movs	r2, #33	; 0x21
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2240      	movs	r2, #64	; 0x40
 8004f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a3a      	ldr	r2, [r7, #32]
 8004f72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4a4d      	ldr	r2, [pc, #308]	; (80050bc <HAL_I2C_Mem_Write+0x1f0>)
 8004f88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f8a:	88f8      	ldrh	r0, [r7, #6]
 8004f8c:	893a      	ldrh	r2, [r7, #8]
 8004f8e:	8979      	ldrh	r1, [r7, #10]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	9301      	str	r3, [sp, #4]
 8004f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	4603      	mov	r3, r0
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 fac4 	bl	8005528 <I2C_RequestMemoryWrite>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d052      	beq.n	800504c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e081      	b.n	80050ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 fd0e 	bl	80059d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00d      	beq.n	8004fd6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d107      	bne.n	8004fd2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e06b      	b.n	80050ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	781a      	ldrb	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b29a      	uxth	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b04      	cmp	r3, #4
 8005012:	d11b      	bne.n	800504c <HAL_I2C_Mem_Write+0x180>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005018:	2b00      	cmp	r3, #0
 800501a:	d017      	beq.n	800504c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	781a      	ldrb	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	b29a      	uxth	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1aa      	bne.n	8004faa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 fcfa 	bl	8005a52 <I2C_WaitOnBTFFlagUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00d      	beq.n	8005080 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	2b04      	cmp	r3, #4
 800506a:	d107      	bne.n	800507c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800507a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e016      	b.n	80050ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800508e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050a8:	2300      	movs	r3, #0
 80050aa:	e000      	b.n	80050ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80050ac:	2302      	movs	r3, #2
  }
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	00100002 	.word	0x00100002
 80050bc:	ffff0000 	.word	0xffff0000

080050c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08c      	sub	sp, #48	; 0x30
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	4608      	mov	r0, r1
 80050ca:	4611      	mov	r1, r2
 80050cc:	461a      	mov	r2, r3
 80050ce:	4603      	mov	r3, r0
 80050d0:	817b      	strh	r3, [r7, #10]
 80050d2:	460b      	mov	r3, r1
 80050d4:	813b      	strh	r3, [r7, #8]
 80050d6:	4613      	mov	r3, r2
 80050d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050da:	f7fd f93d 	bl	8002358 <HAL_GetTick>
 80050de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	f040 8208 	bne.w	80054fe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	2319      	movs	r3, #25
 80050f4:	2201      	movs	r2, #1
 80050f6:	497b      	ldr	r1, [pc, #492]	; (80052e4 <HAL_I2C_Mem_Read+0x224>)
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 fb93 	bl	8005824 <I2C_WaitOnFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005104:	2302      	movs	r3, #2
 8005106:	e1fb      	b.n	8005500 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_I2C_Mem_Read+0x56>
 8005112:	2302      	movs	r3, #2
 8005114:	e1f4      	b.n	8005500 <HAL_I2C_Mem_Read+0x440>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b01      	cmp	r3, #1
 800512a:	d007      	beq.n	800513c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800514a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2222      	movs	r2, #34	; 0x22
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2240      	movs	r2, #64	; 0x40
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005166:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800516c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005172:	b29a      	uxth	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4a5b      	ldr	r2, [pc, #364]	; (80052e8 <HAL_I2C_Mem_Read+0x228>)
 800517c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800517e:	88f8      	ldrh	r0, [r7, #6]
 8005180:	893a      	ldrh	r2, [r7, #8]
 8005182:	8979      	ldrh	r1, [r7, #10]
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	9301      	str	r3, [sp, #4]
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	4603      	mov	r3, r0
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 fa60 	bl	8005654 <I2C_RequestMemoryRead>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e1b0      	b.n	8005500 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d113      	bne.n	80051ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051a6:	2300      	movs	r3, #0
 80051a8:	623b      	str	r3, [r7, #32]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	623b      	str	r3, [r7, #32]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	623b      	str	r3, [r7, #32]
 80051ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	e184      	b.n	80054d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d11b      	bne.n	800520e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051e6:	2300      	movs	r3, #0
 80051e8:	61fb      	str	r3, [r7, #28]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	61fb      	str	r3, [r7, #28]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	61fb      	str	r3, [r7, #28]
 80051fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	e164      	b.n	80054d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005212:	2b02      	cmp	r3, #2
 8005214:	d11b      	bne.n	800524e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005224:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005234:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005236:	2300      	movs	r3, #0
 8005238:	61bb      	str	r3, [r7, #24]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	61bb      	str	r3, [r7, #24]
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	e144      	b.n	80054d8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800524e:	2300      	movs	r3, #0
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005264:	e138      	b.n	80054d8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526a:	2b03      	cmp	r3, #3
 800526c:	f200 80f1 	bhi.w	8005452 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005274:	2b01      	cmp	r3, #1
 8005276:	d123      	bne.n	80052c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 fc29 	bl	8005ad4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e139      	b.n	8005500 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691a      	ldr	r2, [r3, #16]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	3b01      	subs	r3, #1
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052be:	e10b      	b.n	80054d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d14e      	bne.n	8005366 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ce:	2200      	movs	r2, #0
 80052d0:	4906      	ldr	r1, [pc, #24]	; (80052ec <HAL_I2C_Mem_Read+0x22c>)
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 faa6 	bl	8005824 <I2C_WaitOnFlagUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d008      	beq.n	80052f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e10e      	b.n	8005500 <HAL_I2C_Mem_Read+0x440>
 80052e2:	bf00      	nop
 80052e4:	00100002 	.word	0x00100002
 80052e8:	ffff0000 	.word	0xffff0000
 80052ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691a      	ldr	r2, [r3, #16]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005328:	b29b      	uxth	r3, r3
 800532a:	3b01      	subs	r3, #1
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691a      	ldr	r2, [r3, #16]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005364:	e0b8      	b.n	80054d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536c:	2200      	movs	r2, #0
 800536e:	4966      	ldr	r1, [pc, #408]	; (8005508 <HAL_I2C_Mem_Read+0x448>)
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 fa57 	bl	8005824 <I2C_WaitOnFlagUntilTimeout>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e0bf      	b.n	8005500 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800538e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	3b01      	subs	r3, #1
 80053bc:	b29a      	uxth	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c8:	2200      	movs	r2, #0
 80053ca:	494f      	ldr	r1, [pc, #316]	; (8005508 <HAL_I2C_Mem_Read+0x448>)
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 fa29 	bl	8005824 <I2C_WaitOnFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e091      	b.n	8005500 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005408:	3b01      	subs	r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005414:	b29b      	uxth	r3, r3
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005446:	b29b      	uxth	r3, r3
 8005448:	3b01      	subs	r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005450:	e042      	b.n	80054d8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005454:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 fb3c 	bl	8005ad4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e04c      	b.n	8005500 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005482:	3b01      	subs	r3, #1
 8005484:	b29a      	uxth	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548e:	b29b      	uxth	r3, r3
 8005490:	3b01      	subs	r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	f003 0304 	and.w	r3, r3, #4
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d118      	bne.n	80054d8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	b2d2      	uxtb	r2, r2
 80054b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	1c5a      	adds	r2, r3, #1
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c2:	3b01      	subs	r3, #1
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f47f aec2 	bne.w	8005266 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	e000      	b.n	8005500 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80054fe:	2302      	movs	r3, #2
  }
}
 8005500:	4618      	mov	r0, r3
 8005502:	3728      	adds	r7, #40	; 0x28
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	00010004 	.word	0x00010004

0800550c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551a:	b2db      	uxtb	r3, r3
}
 800551c:	4618      	mov	r0, r3
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b088      	sub	sp, #32
 800552c:	af02      	add	r7, sp, #8
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	4608      	mov	r0, r1
 8005532:	4611      	mov	r1, r2
 8005534:	461a      	mov	r2, r3
 8005536:	4603      	mov	r3, r0
 8005538:	817b      	strh	r3, [r7, #10]
 800553a:	460b      	mov	r3, r1
 800553c:	813b      	strh	r3, [r7, #8]
 800553e:	4613      	mov	r3, r2
 8005540:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005550:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	2200      	movs	r2, #0
 800555a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 f960 	bl	8005824 <I2C_WaitOnFlagUntilTimeout>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00d      	beq.n	8005586 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005578:	d103      	bne.n	8005582 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005580:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e05f      	b.n	8005646 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005586:	897b      	ldrh	r3, [r7, #10]
 8005588:	b2db      	uxtb	r3, r3
 800558a:	461a      	mov	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005594:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	6a3a      	ldr	r2, [r7, #32]
 800559a:	492d      	ldr	r1, [pc, #180]	; (8005650 <I2C_RequestMemoryWrite+0x128>)
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f998 	bl	80058d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e04c      	b.n	8005646 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c4:	6a39      	ldr	r1, [r7, #32]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 fa02 	bl	80059d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00d      	beq.n	80055ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d107      	bne.n	80055ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e02b      	b.n	8005646 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055ee:	88fb      	ldrh	r3, [r7, #6]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d105      	bne.n	8005600 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055f4:	893b      	ldrh	r3, [r7, #8]
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	611a      	str	r2, [r3, #16]
 80055fe:	e021      	b.n	8005644 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005600:	893b      	ldrh	r3, [r7, #8]
 8005602:	0a1b      	lsrs	r3, r3, #8
 8005604:	b29b      	uxth	r3, r3
 8005606:	b2da      	uxtb	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800560e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005610:	6a39      	ldr	r1, [r7, #32]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 f9dc 	bl	80059d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00d      	beq.n	800563a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	2b04      	cmp	r3, #4
 8005624:	d107      	bne.n	8005636 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005634:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e005      	b.n	8005646 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800563a:	893b      	ldrh	r3, [r7, #8]
 800563c:	b2da      	uxtb	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	00010002 	.word	0x00010002

08005654 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af02      	add	r7, sp, #8
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	4608      	mov	r0, r1
 800565e:	4611      	mov	r1, r2
 8005660:	461a      	mov	r2, r3
 8005662:	4603      	mov	r3, r0
 8005664:	817b      	strh	r3, [r7, #10]
 8005666:	460b      	mov	r3, r1
 8005668:	813b      	strh	r3, [r7, #8]
 800566a:	4613      	mov	r3, r2
 800566c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800567c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800568c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	2200      	movs	r2, #0
 8005696:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f000 f8c2 	bl	8005824 <I2C_WaitOnFlagUntilTimeout>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00d      	beq.n	80056c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b4:	d103      	bne.n	80056be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e0aa      	b.n	8005818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056c2:	897b      	ldrh	r3, [r7, #10]
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	461a      	mov	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	6a3a      	ldr	r2, [r7, #32]
 80056d6:	4952      	ldr	r1, [pc, #328]	; (8005820 <I2C_RequestMemoryRead+0x1cc>)
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 f8fa 	bl	80058d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e097      	b.n	8005818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056e8:	2300      	movs	r3, #0
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005700:	6a39      	ldr	r1, [r7, #32]
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 f964 	bl	80059d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00d      	beq.n	800572a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	2b04      	cmp	r3, #4
 8005714:	d107      	bne.n	8005726 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005724:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e076      	b.n	8005818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d105      	bne.n	800573c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005730:	893b      	ldrh	r3, [r7, #8]
 8005732:	b2da      	uxtb	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	611a      	str	r2, [r3, #16]
 800573a:	e021      	b.n	8005780 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800573c:	893b      	ldrh	r3, [r7, #8]
 800573e:	0a1b      	lsrs	r3, r3, #8
 8005740:	b29b      	uxth	r3, r3
 8005742:	b2da      	uxtb	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800574a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574c:	6a39      	ldr	r1, [r7, #32]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 f93e 	bl	80059d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00d      	beq.n	8005776 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	2b04      	cmp	r3, #4
 8005760:	d107      	bne.n	8005772 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005770:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e050      	b.n	8005818 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005776:	893b      	ldrh	r3, [r7, #8]
 8005778:	b2da      	uxtb	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005782:	6a39      	ldr	r1, [r7, #32]
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 f923 	bl	80059d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00d      	beq.n	80057ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005794:	2b04      	cmp	r3, #4
 8005796:	d107      	bne.n	80057a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e035      	b.n	8005818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 f82b 	bl	8005824 <I2C_WaitOnFlagUntilTimeout>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00d      	beq.n	80057f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057e2:	d103      	bne.n	80057ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e013      	b.n	8005818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80057f0:	897b      	ldrh	r3, [r7, #10]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	f043 0301 	orr.w	r3, r3, #1
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	6a3a      	ldr	r2, [r7, #32]
 8005804:	4906      	ldr	r1, [pc, #24]	; (8005820 <I2C_RequestMemoryRead+0x1cc>)
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f000 f863 	bl	80058d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e000      	b.n	8005818 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	00010002 	.word	0x00010002

08005824 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	603b      	str	r3, [r7, #0]
 8005830:	4613      	mov	r3, r2
 8005832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005834:	e025      	b.n	8005882 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d021      	beq.n	8005882 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800583e:	f7fc fd8b 	bl	8002358 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d302      	bcc.n	8005854 <I2C_WaitOnFlagUntilTimeout+0x30>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d116      	bne.n	8005882 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2220      	movs	r2, #32
 800585e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	f043 0220 	orr.w	r2, r3, #32
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e023      	b.n	80058ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	0c1b      	lsrs	r3, r3, #16
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b01      	cmp	r3, #1
 800588a:	d10d      	bne.n	80058a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	43da      	mvns	r2, r3
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4013      	ands	r3, r2
 8005898:	b29b      	uxth	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	bf0c      	ite	eq
 800589e:	2301      	moveq	r3, #1
 80058a0:	2300      	movne	r3, #0
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	e00c      	b.n	80058c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	43da      	mvns	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	4013      	ands	r3, r2
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	bf0c      	ite	eq
 80058ba:	2301      	moveq	r3, #1
 80058bc:	2300      	movne	r3, #0
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	461a      	mov	r2, r3
 80058c2:	79fb      	ldrb	r3, [r7, #7]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d0b6      	beq.n	8005836 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	607a      	str	r2, [r7, #4]
 80058de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058e0:	e051      	b.n	8005986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f0:	d123      	bne.n	800593a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005900:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800590a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2220      	movs	r2, #32
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005926:	f043 0204 	orr.w	r2, r3, #4
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e046      	b.n	80059c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005940:	d021      	beq.n	8005986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005942:	f7fc fd09 	bl	8002358 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	429a      	cmp	r2, r3
 8005950:	d302      	bcc.n	8005958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d116      	bne.n	8005986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	f043 0220 	orr.w	r2, r3, #32
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e020      	b.n	80059c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	0c1b      	lsrs	r3, r3, #16
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b01      	cmp	r3, #1
 800598e:	d10c      	bne.n	80059aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	43da      	mvns	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4013      	ands	r3, r2
 800599c:	b29b      	uxth	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	bf14      	ite	ne
 80059a2:	2301      	movne	r3, #1
 80059a4:	2300      	moveq	r3, #0
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	e00b      	b.n	80059c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	43da      	mvns	r2, r3
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	4013      	ands	r3, r2
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	bf14      	ite	ne
 80059bc:	2301      	movne	r3, #1
 80059be:	2300      	moveq	r3, #0
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d18d      	bne.n	80058e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059dc:	e02d      	b.n	8005a3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 f8ce 	bl	8005b80 <I2C_IsAcknowledgeFailed>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e02d      	b.n	8005a4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f4:	d021      	beq.n	8005a3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f6:	f7fc fcaf 	bl	8002358 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d302      	bcc.n	8005a0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d116      	bne.n	8005a3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	f043 0220 	orr.w	r2, r3, #32
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e007      	b.n	8005a4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a44:	2b80      	cmp	r3, #128	; 0x80
 8005a46:	d1ca      	bne.n	80059de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a5e:	e02d      	b.n	8005abc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 f88d 	bl	8005b80 <I2C_IsAcknowledgeFailed>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e02d      	b.n	8005acc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a76:	d021      	beq.n	8005abc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a78:	f7fc fc6e 	bl	8002358 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d302      	bcc.n	8005a8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d116      	bne.n	8005abc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa8:	f043 0220 	orr.w	r2, r3, #32
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e007      	b.n	8005acc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	f003 0304 	and.w	r3, r3, #4
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d1ca      	bne.n	8005a60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ae0:	e042      	b.n	8005b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	f003 0310 	and.w	r3, r3, #16
 8005aec:	2b10      	cmp	r3, #16
 8005aee:	d119      	bne.n	8005b24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f06f 0210 	mvn.w	r2, #16
 8005af8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e029      	b.n	8005b78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b24:	f7fc fc18 	bl	8002358 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d302      	bcc.n	8005b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d116      	bne.n	8005b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b54:	f043 0220 	orr.w	r2, r3, #32
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e007      	b.n	8005b78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b72:	2b40      	cmp	r3, #64	; 0x40
 8005b74:	d1b5      	bne.n	8005ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b96:	d11b      	bne.n	8005bd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ba0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	f043 0204 	orr.w	r2, r3, #4
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
	...

08005be0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b088      	sub	sp, #32
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e128      	b.n	8005e44 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d109      	bne.n	8005c12 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a90      	ldr	r2, [pc, #576]	; (8005e4c <HAL_I2S_Init+0x26c>)
 8005c0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7fb fdf5 	bl	80017fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2202      	movs	r2, #2
 8005c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6812      	ldr	r2, [r2, #0]
 8005c24:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005c28:	f023 030f 	bic.w	r3, r3, #15
 8005c2c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2202      	movs	r2, #2
 8005c34:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d060      	beq.n	8005d00 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d102      	bne.n	8005c4c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005c46:	2310      	movs	r3, #16
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	e001      	b.n	8005c50 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005c4c:	2320      	movs	r3, #32
 8005c4e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	2b20      	cmp	r3, #32
 8005c56:	d802      	bhi.n	8005c5e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005c5e:	2001      	movs	r0, #1
 8005c60:	f001 fe14 	bl	800788c <HAL_RCCEx_GetPeriphCLKFreq>
 8005c64:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c6e:	d125      	bne.n	8005cbc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d010      	beq.n	8005c9a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c82:	4613      	mov	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c94:	3305      	adds	r3, #5
 8005c96:	613b      	str	r3, [r7, #16]
 8005c98:	e01f      	b.n	8005cda <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	461a      	mov	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb6:	3305      	adds	r3, #5
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	e00e      	b.n	8005cda <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	461a      	mov	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd6:	3305      	adds	r3, #5
 8005cd8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	4a5c      	ldr	r2, [pc, #368]	; (8005e50 <HAL_I2S_Init+0x270>)
 8005cde:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce2:	08db      	lsrs	r3, r3, #3
 8005ce4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	085b      	lsrs	r3, r3, #1
 8005cf6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	021b      	lsls	r3, r3, #8
 8005cfc:	61bb      	str	r3, [r7, #24]
 8005cfe:	e003      	b.n	8005d08 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005d00:	2302      	movs	r3, #2
 8005d02:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d902      	bls.n	8005d14 <HAL_I2S_Init+0x134>
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	2bff      	cmp	r3, #255	; 0xff
 8005d12:	d907      	bls.n	8005d24 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d18:	f043 0210 	orr.w	r2, r3, #16
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e08f      	b.n	8005e44 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	ea42 0103 	orr.w	r1, r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	69fa      	ldr	r2, [r7, #28]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005d42:	f023 030f 	bic.w	r3, r3, #15
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	6851      	ldr	r1, [r2, #4]
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	6892      	ldr	r2, [r2, #8]
 8005d4e:	4311      	orrs	r1, r2
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	68d2      	ldr	r2, [r2, #12]
 8005d54:	4311      	orrs	r1, r2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6992      	ldr	r2, [r2, #24]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d66:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d161      	bne.n	8005e34 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a38      	ldr	r2, [pc, #224]	; (8005e54 <HAL_I2S_Init+0x274>)
 8005d74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a37      	ldr	r2, [pc, #220]	; (8005e58 <HAL_I2S_Init+0x278>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d101      	bne.n	8005d84 <HAL_I2S_Init+0x1a4>
 8005d80:	4b36      	ldr	r3, [pc, #216]	; (8005e5c <HAL_I2S_Init+0x27c>)
 8005d82:	e001      	b.n	8005d88 <HAL_I2S_Init+0x1a8>
 8005d84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6812      	ldr	r2, [r2, #0]
 8005d8e:	4932      	ldr	r1, [pc, #200]	; (8005e58 <HAL_I2S_Init+0x278>)
 8005d90:	428a      	cmp	r2, r1
 8005d92:	d101      	bne.n	8005d98 <HAL_I2S_Init+0x1b8>
 8005d94:	4a31      	ldr	r2, [pc, #196]	; (8005e5c <HAL_I2S_Init+0x27c>)
 8005d96:	e001      	b.n	8005d9c <HAL_I2S_Init+0x1bc>
 8005d98:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005d9c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005da0:	f023 030f 	bic.w	r3, r3, #15
 8005da4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a2b      	ldr	r2, [pc, #172]	; (8005e58 <HAL_I2S_Init+0x278>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d101      	bne.n	8005db4 <HAL_I2S_Init+0x1d4>
 8005db0:	4b2a      	ldr	r3, [pc, #168]	; (8005e5c <HAL_I2S_Init+0x27c>)
 8005db2:	e001      	b.n	8005db8 <HAL_I2S_Init+0x1d8>
 8005db4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005db8:	2202      	movs	r2, #2
 8005dba:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a25      	ldr	r2, [pc, #148]	; (8005e58 <HAL_I2S_Init+0x278>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d101      	bne.n	8005dca <HAL_I2S_Init+0x1ea>
 8005dc6:	4b25      	ldr	r3, [pc, #148]	; (8005e5c <HAL_I2S_Init+0x27c>)
 8005dc8:	e001      	b.n	8005dce <HAL_I2S_Init+0x1ee>
 8005dca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dda:	d003      	beq.n	8005de4 <HAL_I2S_Init+0x204>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d103      	bne.n	8005dec <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005de8:	613b      	str	r3, [r7, #16]
 8005dea:	e001      	b.n	8005df0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005dec:	2300      	movs	r3, #0
 8005dee:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005e04:	4313      	orrs	r3, r2
 8005e06:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	897b      	ldrh	r3, [r7, #10]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e1c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a0d      	ldr	r2, [pc, #52]	; (8005e58 <HAL_I2S_Init+0x278>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d101      	bne.n	8005e2c <HAL_I2S_Init+0x24c>
 8005e28:	4b0c      	ldr	r3, [pc, #48]	; (8005e5c <HAL_I2S_Init+0x27c>)
 8005e2a:	e001      	b.n	8005e30 <HAL_I2S_Init+0x250>
 8005e2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e30:	897a      	ldrh	r2, [r7, #10]
 8005e32:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3720      	adds	r7, #32
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	080066e5 	.word	0x080066e5
 8005e50:	cccccccd 	.word	0xcccccccd
 8005e54:	0800686d 	.word	0x0800686d
 8005e58:	40003800 	.word	0x40003800
 8005e5c:	40003400 	.word	0x40003400

08005e60 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <HAL_I2S_Transmit_DMA+0x1a>
 8005e74:	88fb      	ldrh	r3, [r7, #6]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e08e      	b.n	8005f9c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_I2S_Transmit_DMA+0x2e>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e086      	b.n	8005f9c <HAL_I2S_Transmit_DMA+0x13c>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d005      	beq.n	8005eae <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005eaa:	2302      	movs	r3, #2
 8005eac:	e076      	b.n	8005f9c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2203      	movs	r2, #3
 8005eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d002      	beq.n	8005eda <HAL_I2S_Transmit_DMA+0x7a>
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2b05      	cmp	r3, #5
 8005ed8:	d10a      	bne.n	8005ef0 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005eda:	88fb      	ldrh	r3, [r7, #6]
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005ee4:	88fb      	ldrh	r3, [r7, #6]
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005eee:	e005      	b.n	8005efc <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	88fa      	ldrh	r2, [r7, #6]
 8005ef4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	88fa      	ldrh	r2, [r7, #6]
 8005efa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f00:	4a28      	ldr	r2, [pc, #160]	; (8005fa4 <HAL_I2S_Transmit_DMA+0x144>)
 8005f02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f08:	4a27      	ldr	r2, [pc, #156]	; (8005fa8 <HAL_I2S_Transmit_DMA+0x148>)
 8005f0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	4a26      	ldr	r2, [pc, #152]	; (8005fac <HAL_I2S_Transmit_DMA+0x14c>)
 8005f12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005f1c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005f24:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005f2c:	f7fc fc62 	bl	80027f4 <HAL_DMA_Start_IT>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00f      	beq.n	8005f56 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3a:	f043 0208 	orr.w	r2, r3, #8
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e022      	b.n	8005f9c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d107      	bne.n	8005f74 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	69da      	ldr	r2, [r3, #28]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f72:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d107      	bne.n	8005f92 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f042 0202 	orr.w	r2, r2, #2
 8005f90:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	080065c3 	.word	0x080065c3
 8005fa8:	08006581 	.word	0x08006581
 8005fac:	080065df 	.word	0x080065df

08005fb0 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d101      	bne.n	8005fc8 <HAL_I2S_DMAPause+0x18>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e04a      	b.n	800605e <HAL_I2S_DMAPause+0xae>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d108      	bne.n	8005fee <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0202 	bic.w	r2, r2, #2
 8005fea:	605a      	str	r2, [r3, #4]
 8005fec:	e032      	b.n	8006054 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d108      	bne.n	800600c <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0201 	bic.w	r2, r2, #1
 8006008:	605a      	str	r2, [r3, #4]
 800600a:	e023      	b.n	8006054 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b05      	cmp	r3, #5
 8006016:	d11d      	bne.n	8006054 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0203 	bic.w	r2, r2, #3
 8006026:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a0f      	ldr	r2, [pc, #60]	; (800606c <HAL_I2S_DMAPause+0xbc>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d101      	bne.n	8006036 <HAL_I2S_DMAPause+0x86>
 8006032:	4b0f      	ldr	r3, [pc, #60]	; (8006070 <HAL_I2S_DMAPause+0xc0>)
 8006034:	e001      	b.n	800603a <HAL_I2S_DMAPause+0x8a>
 8006036:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	490a      	ldr	r1, [pc, #40]	; (800606c <HAL_I2S_DMAPause+0xbc>)
 8006042:	428b      	cmp	r3, r1
 8006044:	d101      	bne.n	800604a <HAL_I2S_DMAPause+0x9a>
 8006046:	4b0a      	ldr	r3, [pc, #40]	; (8006070 <HAL_I2S_DMAPause+0xc0>)
 8006048:	e001      	b.n	800604e <HAL_I2S_DMAPause+0x9e>
 800604a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800604e:	f022 0203 	bic.w	r2, r2, #3
 8006052:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40003800 	.word	0x40003800
 8006070:	40003400 	.word	0x40003400

08006074 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_I2S_DMAResume+0x18>
 8006088:	2302      	movs	r3, #2
 800608a:	e07d      	b.n	8006188 <HAL_I2S_DMAResume+0x114>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b03      	cmp	r3, #3
 800609e:	d108      	bne.n	80060b2 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0202 	orr.w	r2, r2, #2
 80060ae:	605a      	str	r2, [r3, #4]
 80060b0:	e056      	b.n	8006160 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d108      	bne.n	80060d0 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f042 0201 	orr.w	r2, r2, #1
 80060cc:	605a      	str	r2, [r3, #4]
 80060ce:	e047      	b.n	8006160 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b05      	cmp	r3, #5
 80060da:	d141      	bne.n	8006160 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0203 	orr.w	r2, r2, #3
 80060ea:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a28      	ldr	r2, [pc, #160]	; (8006194 <HAL_I2S_DMAResume+0x120>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d101      	bne.n	80060fa <HAL_I2S_DMAResume+0x86>
 80060f6:	4b28      	ldr	r3, [pc, #160]	; (8006198 <HAL_I2S_DMAResume+0x124>)
 80060f8:	e001      	b.n	80060fe <HAL_I2S_DMAResume+0x8a>
 80060fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4923      	ldr	r1, [pc, #140]	; (8006194 <HAL_I2S_DMAResume+0x120>)
 8006106:	428b      	cmp	r3, r1
 8006108:	d101      	bne.n	800610e <HAL_I2S_DMAResume+0x9a>
 800610a:	4b23      	ldr	r3, [pc, #140]	; (8006198 <HAL_I2S_DMAResume+0x124>)
 800610c:	e001      	b.n	8006112 <HAL_I2S_DMAResume+0x9e>
 800610e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006112:	f042 0203 	orr.w	r2, r2, #3
 8006116:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a1d      	ldr	r2, [pc, #116]	; (8006194 <HAL_I2S_DMAResume+0x120>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d101      	bne.n	8006126 <HAL_I2S_DMAResume+0xb2>
 8006122:	4b1d      	ldr	r3, [pc, #116]	; (8006198 <HAL_I2S_DMAResume+0x124>)
 8006124:	e001      	b.n	800612a <HAL_I2S_DMAResume+0xb6>
 8006126:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006130:	2b00      	cmp	r3, #0
 8006132:	d115      	bne.n	8006160 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a16      	ldr	r2, [pc, #88]	; (8006194 <HAL_I2S_DMAResume+0x120>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d101      	bne.n	8006142 <HAL_I2S_DMAResume+0xce>
 800613e:	4b16      	ldr	r3, [pc, #88]	; (8006198 <HAL_I2S_DMAResume+0x124>)
 8006140:	e001      	b.n	8006146 <HAL_I2S_DMAResume+0xd2>
 8006142:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006146:	69da      	ldr	r2, [r3, #28]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4911      	ldr	r1, [pc, #68]	; (8006194 <HAL_I2S_DMAResume+0x120>)
 800614e:	428b      	cmp	r3, r1
 8006150:	d101      	bne.n	8006156 <HAL_I2S_DMAResume+0xe2>
 8006152:	4b11      	ldr	r3, [pc, #68]	; (8006198 <HAL_I2S_DMAResume+0x124>)
 8006154:	e001      	b.n	800615a <HAL_I2S_DMAResume+0xe6>
 8006156:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800615a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800615e:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800616a:	2b00      	cmp	r3, #0
 800616c:	d107      	bne.n	800617e <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	69da      	ldr	r2, [r3, #28]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800617c:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	40003800 	.word	0x40003800
 8006198:	40003400 	.word	0x40003400

0800619c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061b0:	d004      	beq.n	80061bc <HAL_I2S_DMAStop+0x20>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f040 80d1 	bne.w	800635e <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00f      	beq.n	80061e4 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fc fb6b 	bl	80028a4 <HAL_DMA_Abort>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d007      	beq.n	80061e4 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d8:	f043 0208 	orr.w	r2, r3, #8
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80061e4:	2364      	movs	r3, #100	; 0x64
 80061e6:	2201      	movs	r2, #1
 80061e8:	2102      	movs	r1, #2
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fb04 	bl	80067f8 <I2S_WaitFlagStateUntilTimeout>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00b      	beq.n	800620e <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fa:	f043 0201 	orr.w	r2, r3, #1
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800620e:	2364      	movs	r3, #100	; 0x64
 8006210:	2200      	movs	r2, #0
 8006212:	2180      	movs	r1, #128	; 0x80
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 faef 	bl	80067f8 <I2S_WaitFlagStateUntilTimeout>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00b      	beq.n	8006238 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006224:	f043 0201 	orr.w	r2, r3, #1
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	69da      	ldr	r2, [r3, #28]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006246:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006248:	2300      	movs	r3, #0
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	617b      	str	r3, [r7, #20]
 8006254:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0202 	bic.w	r2, r2, #2
 8006264:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b05      	cmp	r3, #5
 8006270:	f040 8165 	bne.w	800653e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00f      	beq.n	800629c <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006280:	4618      	mov	r0, r3
 8006282:	f7fc fb0f 	bl	80028a4 <HAL_DMA_Abort>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d007      	beq.n	800629c <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006290:	f043 0208 	orr.w	r2, r3, #8
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a8a      	ldr	r2, [pc, #552]	; (80064cc <HAL_I2S_DMAStop+0x330>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d101      	bne.n	80062aa <HAL_I2S_DMAStop+0x10e>
 80062a6:	4b8a      	ldr	r3, [pc, #552]	; (80064d0 <HAL_I2S_DMAStop+0x334>)
 80062a8:	e001      	b.n	80062ae <HAL_I2S_DMAStop+0x112>
 80062aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062ae:	69da      	ldr	r2, [r3, #28]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4985      	ldr	r1, [pc, #532]	; (80064cc <HAL_I2S_DMAStop+0x330>)
 80062b6:	428b      	cmp	r3, r1
 80062b8:	d101      	bne.n	80062be <HAL_I2S_DMAStop+0x122>
 80062ba:	4b85      	ldr	r3, [pc, #532]	; (80064d0 <HAL_I2S_DMAStop+0x334>)
 80062bc:	e001      	b.n	80062c2 <HAL_I2S_DMAStop+0x126>
 80062be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062c6:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80062c8:	2300      	movs	r3, #0
 80062ca:	613b      	str	r3, [r7, #16]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a7e      	ldr	r2, [pc, #504]	; (80064cc <HAL_I2S_DMAStop+0x330>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d101      	bne.n	80062da <HAL_I2S_DMAStop+0x13e>
 80062d6:	4b7e      	ldr	r3, [pc, #504]	; (80064d0 <HAL_I2S_DMAStop+0x334>)
 80062d8:	e001      	b.n	80062de <HAL_I2S_DMAStop+0x142>
 80062da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	613b      	str	r3, [r7, #16]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a79      	ldr	r2, [pc, #484]	; (80064cc <HAL_I2S_DMAStop+0x330>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d101      	bne.n	80062f0 <HAL_I2S_DMAStop+0x154>
 80062ec:	4b78      	ldr	r3, [pc, #480]	; (80064d0 <HAL_I2S_DMAStop+0x334>)
 80062ee:	e001      	b.n	80062f4 <HAL_I2S_DMAStop+0x158>
 80062f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	613b      	str	r3, [r7, #16]
 80062f8:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a73      	ldr	r2, [pc, #460]	; (80064cc <HAL_I2S_DMAStop+0x330>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d101      	bne.n	8006308 <HAL_I2S_DMAStop+0x16c>
 8006304:	4b72      	ldr	r3, [pc, #456]	; (80064d0 <HAL_I2S_DMAStop+0x334>)
 8006306:	e001      	b.n	800630c <HAL_I2S_DMAStop+0x170>
 8006308:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	496e      	ldr	r1, [pc, #440]	; (80064cc <HAL_I2S_DMAStop+0x330>)
 8006314:	428b      	cmp	r3, r1
 8006316:	d101      	bne.n	800631c <HAL_I2S_DMAStop+0x180>
 8006318:	4b6d      	ldr	r3, [pc, #436]	; (80064d0 <HAL_I2S_DMAStop+0x334>)
 800631a:	e001      	b.n	8006320 <HAL_I2S_DMAStop+0x184>
 800631c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006320:	f022 0201 	bic.w	r2, r2, #1
 8006324:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10c      	bne.n	8006348 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006332:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006346:	e0fa      	b.n	800653e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a5f      	ldr	r2, [pc, #380]	; (80064cc <HAL_I2S_DMAStop+0x330>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d101      	bne.n	8006356 <HAL_I2S_DMAStop+0x1ba>
 8006352:	4b5f      	ldr	r3, [pc, #380]	; (80064d0 <HAL_I2S_DMAStop+0x334>)
 8006354:	e001      	b.n	800635a <HAL_I2S_DMAStop+0x1be>
 8006356:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800635a:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800635c:	e0ef      	b.n	800653e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006366:	d005      	beq.n	8006374 <HAL_I2S_DMAStop+0x1d8>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006370:	f040 80e5 	bne.w	800653e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00f      	beq.n	800639c <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006380:	4618      	mov	r0, r3
 8006382:	f7fc fa8f 	bl	80028a4 <HAL_DMA_Abort>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d007      	beq.n	800639c <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006390:	f043 0208 	orr.w	r2, r3, #8
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b05      	cmp	r3, #5
 80063a6:	f040 809a 	bne.w	80064de <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00f      	beq.n	80063d2 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fc fa74 	bl	80028a4 <HAL_DMA_Abort>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d007      	beq.n	80063d2 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	f043 0208 	orr.w	r2, r3, #8
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80063d2:	f7fb ffc1 	bl	8002358 <HAL_GetTick>
 80063d6:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80063d8:	e012      	b.n	8006400 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80063da:	f7fb ffbd 	bl	8002358 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	2b64      	cmp	r3, #100	; 0x64
 80063e6:	d90b      	bls.n	8006400 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ec:	f043 0201 	orr.w	r2, r3, #1
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a31      	ldr	r2, [pc, #196]	; (80064cc <HAL_I2S_DMAStop+0x330>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d101      	bne.n	800640e <HAL_I2S_DMAStop+0x272>
 800640a:	4b31      	ldr	r3, [pc, #196]	; (80064d0 <HAL_I2S_DMAStop+0x334>)
 800640c:	e001      	b.n	8006412 <HAL_I2S_DMAStop+0x276>
 800640e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b02      	cmp	r3, #2
 800641a:	d1de      	bne.n	80063da <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 800641c:	e012      	b.n	8006444 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800641e:	f7fb ff9b 	bl	8002358 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b64      	cmp	r3, #100	; 0x64
 800642a:	d90b      	bls.n	8006444 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006430:	f043 0201 	orr.w	r2, r3, #1
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a20      	ldr	r2, [pc, #128]	; (80064cc <HAL_I2S_DMAStop+0x330>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d101      	bne.n	8006452 <HAL_I2S_DMAStop+0x2b6>
 800644e:	4b20      	ldr	r3, [pc, #128]	; (80064d0 <HAL_I2S_DMAStop+0x334>)
 8006450:	e001      	b.n	8006456 <HAL_I2S_DMAStop+0x2ba>
 8006452:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800645c:	2b80      	cmp	r3, #128	; 0x80
 800645e:	d0de      	beq.n	800641e <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a19      	ldr	r2, [pc, #100]	; (80064cc <HAL_I2S_DMAStop+0x330>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d101      	bne.n	800646e <HAL_I2S_DMAStop+0x2d2>
 800646a:	4b19      	ldr	r3, [pc, #100]	; (80064d0 <HAL_I2S_DMAStop+0x334>)
 800646c:	e001      	b.n	8006472 <HAL_I2S_DMAStop+0x2d6>
 800646e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4914      	ldr	r1, [pc, #80]	; (80064cc <HAL_I2S_DMAStop+0x330>)
 800647a:	428b      	cmp	r3, r1
 800647c:	d101      	bne.n	8006482 <HAL_I2S_DMAStop+0x2e6>
 800647e:	4b14      	ldr	r3, [pc, #80]	; (80064d0 <HAL_I2S_DMAStop+0x334>)
 8006480:	e001      	b.n	8006486 <HAL_I2S_DMAStop+0x2ea>
 8006482:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800648a:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 800648c:	2300      	movs	r3, #0
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a0d      	ldr	r2, [pc, #52]	; (80064cc <HAL_I2S_DMAStop+0x330>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d101      	bne.n	800649e <HAL_I2S_DMAStop+0x302>
 800649a:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <HAL_I2S_DMAStop+0x334>)
 800649c:	e001      	b.n	80064a2 <HAL_I2S_DMAStop+0x306>
 800649e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	60fb      	str	r3, [r7, #12]
 80064a6:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a07      	ldr	r2, [pc, #28]	; (80064cc <HAL_I2S_DMAStop+0x330>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d101      	bne.n	80064b6 <HAL_I2S_DMAStop+0x31a>
 80064b2:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <HAL_I2S_DMAStop+0x334>)
 80064b4:	e001      	b.n	80064ba <HAL_I2S_DMAStop+0x31e>
 80064b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4902      	ldr	r1, [pc, #8]	; (80064cc <HAL_I2S_DMAStop+0x330>)
 80064c2:	428b      	cmp	r3, r1
 80064c4:	d106      	bne.n	80064d4 <HAL_I2S_DMAStop+0x338>
 80064c6:	4b02      	ldr	r3, [pc, #8]	; (80064d0 <HAL_I2S_DMAStop+0x334>)
 80064c8:	e006      	b.n	80064d8 <HAL_I2S_DMAStop+0x33c>
 80064ca:	bf00      	nop
 80064cc:	40003800 	.word	0x40003800
 80064d0:	40003400 	.word	0x40003400
 80064d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064d8:	f022 0202 	bic.w	r2, r2, #2
 80064dc:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69da      	ldr	r2, [r3, #28]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ec:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80064ee:	2300      	movs	r3, #0
 80064f0:	60bb      	str	r3, [r7, #8]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	60bb      	str	r3, [r7, #8]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	60bb      	str	r3, [r7, #8]
 8006502:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0201 	bic.w	r2, r2, #1
 8006512:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800651c:	d10c      	bne.n	8006538 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006522:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	77fb      	strb	r3, [r7, #31]
 8006536:	e002      	b.n	800653e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8006546:	7ffb      	ldrb	r3, [r7, #31]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3720      	adds	r7, #32
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006572:	b2db      	uxtb	r3, r3
}
 8006574:	4618      	mov	r0, r3
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10e      	bne.n	80065b4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 0202 	bic.w	r2, r2, #2
 80065a4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f7fa f887 	bl	80006c8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80065ba:	bf00      	nop
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b084      	sub	sp, #16
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f7fa f88b 	bl	80006ec <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80065d6:	bf00      	nop
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b084      	sub	sp, #16
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0203 	bic.w	r2, r2, #3
 80065fa:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006614:	f043 0208 	orr.w	r2, r3, #8
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f7fa f9d5 	bl	80009cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006622:	bf00      	nop
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b082      	sub	sp, #8
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	881a      	ldrh	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	1c9a      	adds	r2, r3, #2
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665a:	b29b      	uxth	r3, r3
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10e      	bne.n	800667e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800666e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7fa f825 	bl	80006c8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800667e:	bf00      	nop
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b082      	sub	sp, #8
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	b292      	uxth	r2, r2
 800669a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	1c9a      	adds	r2, r3, #2
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	3b01      	subs	r3, #1
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10e      	bne.n	80066dc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066cc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7ff ff3a 	bl	8006550 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80066dc:	bf00      	nop
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b04      	cmp	r3, #4
 80066fe:	d13a      	bne.n	8006776 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b01      	cmp	r3, #1
 8006708:	d109      	bne.n	800671e <I2S_IRQHandler+0x3a>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006714:	2b40      	cmp	r3, #64	; 0x40
 8006716:	d102      	bne.n	800671e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff ffb4 	bl	8006686 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006724:	2b40      	cmp	r3, #64	; 0x40
 8006726:	d126      	bne.n	8006776 <I2S_IRQHandler+0x92>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f003 0320 	and.w	r3, r3, #32
 8006732:	2b20      	cmp	r3, #32
 8006734:	d11f      	bne.n	8006776 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006744:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006746:	2300      	movs	r3, #0
 8006748:	613b      	str	r3, [r7, #16]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	613b      	str	r3, [r7, #16]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	613b      	str	r3, [r7, #16]
 800675a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006768:	f043 0202 	orr.w	r2, r3, #2
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7fa f92b 	bl	80009cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b03      	cmp	r3, #3
 8006780:	d136      	bne.n	80067f0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b02      	cmp	r3, #2
 800678a:	d109      	bne.n	80067a0 <I2S_IRQHandler+0xbc>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006796:	2b80      	cmp	r3, #128	; 0x80
 8006798:	d102      	bne.n	80067a0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7ff ff45 	bl	800662a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f003 0308 	and.w	r3, r3, #8
 80067a6:	2b08      	cmp	r3, #8
 80067a8:	d122      	bne.n	80067f0 <I2S_IRQHandler+0x10c>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f003 0320 	and.w	r3, r3, #32
 80067b4:	2b20      	cmp	r3, #32
 80067b6:	d11b      	bne.n	80067f0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067c6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80067c8:	2300      	movs	r3, #0
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	60fb      	str	r3, [r7, #12]
 80067d4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e2:	f043 0204 	orr.w	r2, r3, #4
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7fa f8ee 	bl	80009cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067f0:	bf00      	nop
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	603b      	str	r3, [r7, #0]
 8006804:	4613      	mov	r3, r2
 8006806:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006808:	f7fb fda6 	bl	8002358 <HAL_GetTick>
 800680c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800680e:	e018      	b.n	8006842 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006816:	d014      	beq.n	8006842 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006818:	f7fb fd9e 	bl	8002358 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	429a      	cmp	r2, r3
 8006826:	d902      	bls.n	800682e <I2S_WaitFlagStateUntilTimeout+0x36>
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d109      	bne.n	8006842 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e00f      	b.n	8006862 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	689a      	ldr	r2, [r3, #8]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	4013      	ands	r3, r2
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	429a      	cmp	r2, r3
 8006850:	bf0c      	ite	eq
 8006852:	2301      	moveq	r3, #1
 8006854:	2300      	movne	r3, #0
 8006856:	b2db      	uxtb	r3, r3
 8006858:	461a      	mov	r2, r3
 800685a:	79fb      	ldrb	r3, [r7, #7]
 800685c:	429a      	cmp	r2, r3
 800685e:	d1d7      	bne.n	8006810 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
	...

0800686c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b088      	sub	sp, #32
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a92      	ldr	r2, [pc, #584]	; (8006acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d101      	bne.n	800688a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006886:	4b92      	ldr	r3, [pc, #584]	; (8006ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006888:	e001      	b.n	800688e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800688a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a8b      	ldr	r2, [pc, #556]	; (8006acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d101      	bne.n	80068a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80068a4:	4b8a      	ldr	r3, [pc, #552]	; (8006ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068a6:	e001      	b.n	80068ac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80068a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068b8:	d004      	beq.n	80068c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f040 8099 	bne.w	80069f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d107      	bne.n	80068de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f925 	bl	8006b28 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d107      	bne.n	80068f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f9c8 	bl	8006c88 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fe:	2b40      	cmp	r3, #64	; 0x40
 8006900:	d13a      	bne.n	8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f003 0320 	and.w	r3, r3, #32
 8006908:	2b00      	cmp	r3, #0
 800690a:	d035      	beq.n	8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a6e      	ldr	r2, [pc, #440]	; (8006acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d101      	bne.n	800691a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006916:	4b6e      	ldr	r3, [pc, #440]	; (8006ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006918:	e001      	b.n	800691e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800691a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4969      	ldr	r1, [pc, #420]	; (8006acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006926:	428b      	cmp	r3, r1
 8006928:	d101      	bne.n	800692e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800692a:	4b69      	ldr	r3, [pc, #420]	; (8006ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800692c:	e001      	b.n	8006932 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800692e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006932:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006936:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006946:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006948:	2300      	movs	r3, #0
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696a:	f043 0202 	orr.w	r2, r3, #2
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fa f82a 	bl	80009cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	f003 0308 	and.w	r3, r3, #8
 800697e:	2b08      	cmp	r3, #8
 8006980:	f040 80c3 	bne.w	8006b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f003 0320 	and.w	r3, r3, #32
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 80bd 	beq.w	8006b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800699e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a49      	ldr	r2, [pc, #292]	; (8006acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d101      	bne.n	80069ae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80069aa:	4b49      	ldr	r3, [pc, #292]	; (8006ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80069ac:	e001      	b.n	80069b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80069ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4944      	ldr	r1, [pc, #272]	; (8006acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80069ba:	428b      	cmp	r3, r1
 80069bc:	d101      	bne.n	80069c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80069be:	4b44      	ldr	r3, [pc, #272]	; (8006ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80069c0:	e001      	b.n	80069c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80069c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069ca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80069cc:	2300      	movs	r3, #0
 80069ce:	60bb      	str	r3, [r7, #8]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	60bb      	str	r3, [r7, #8]
 80069d8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e6:	f043 0204 	orr.w	r2, r3, #4
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7f9 ffec 	bl	80009cc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069f4:	e089      	b.n	8006b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d107      	bne.n	8006a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d002      	beq.n	8006a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f8be 	bl	8006b8c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d107      	bne.n	8006a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f8fd 	bl	8006c24 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a30:	2b40      	cmp	r3, #64	; 0x40
 8006a32:	d12f      	bne.n	8006a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f003 0320 	and.w	r3, r3, #32
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d02a      	beq.n	8006a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a4c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a1e      	ldr	r2, [pc, #120]	; (8006acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d101      	bne.n	8006a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006a58:	4b1d      	ldr	r3, [pc, #116]	; (8006ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006a5a:	e001      	b.n	8006a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006a5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4919      	ldr	r1, [pc, #100]	; (8006acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006a68:	428b      	cmp	r3, r1
 8006a6a:	d101      	bne.n	8006a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006a6c:	4b18      	ldr	r3, [pc, #96]	; (8006ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006a6e:	e001      	b.n	8006a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006a70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a78:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a86:	f043 0202 	orr.w	r2, r3, #2
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7f9 ff9c 	bl	80009cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	f003 0308 	and.w	r3, r3, #8
 8006a9a:	2b08      	cmp	r3, #8
 8006a9c:	d136      	bne.n	8006b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f003 0320 	and.w	r3, r3, #32
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d031      	beq.n	8006b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a07      	ldr	r2, [pc, #28]	; (8006acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d101      	bne.n	8006ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006ab2:	4b07      	ldr	r3, [pc, #28]	; (8006ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006ab4:	e001      	b.n	8006aba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006ab6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4902      	ldr	r1, [pc, #8]	; (8006acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006ac2:	428b      	cmp	r3, r1
 8006ac4:	d106      	bne.n	8006ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006ac6:	4b02      	ldr	r3, [pc, #8]	; (8006ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006ac8:	e006      	b.n	8006ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006aca:	bf00      	nop
 8006acc:	40003800 	.word	0x40003800
 8006ad0:	40003400 	.word	0x40003400
 8006ad4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ad8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006adc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006aec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afa:	f043 0204 	orr.w	r2, r3, #4
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7f9 ff62 	bl	80009cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b08:	e000      	b.n	8006b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006b0a:	bf00      	nop
}
 8006b0c:	bf00      	nop
 8006b0e:	3720      	adds	r7, #32
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b34:	1c99      	adds	r1, r3, #2
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6251      	str	r1, [r2, #36]	; 0x24
 8006b3a:	881a      	ldrh	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d113      	bne.n	8006b82 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d106      	bne.n	8006b82 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff ffc9 	bl	8006b14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b82:	bf00      	nop
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	1c99      	adds	r1, r3, #2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6251      	str	r1, [r2, #36]	; 0x24
 8006b9e:	8819      	ldrh	r1, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a1d      	ldr	r2, [pc, #116]	; (8006c1c <I2SEx_TxISR_I2SExt+0x90>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d101      	bne.n	8006bae <I2SEx_TxISR_I2SExt+0x22>
 8006baa:	4b1d      	ldr	r3, [pc, #116]	; (8006c20 <I2SEx_TxISR_I2SExt+0x94>)
 8006bac:	e001      	b.n	8006bb2 <I2SEx_TxISR_I2SExt+0x26>
 8006bae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bb2:	460a      	mov	r2, r1
 8006bb4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d121      	bne.n	8006c12 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a12      	ldr	r2, [pc, #72]	; (8006c1c <I2SEx_TxISR_I2SExt+0x90>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d101      	bne.n	8006bdc <I2SEx_TxISR_I2SExt+0x50>
 8006bd8:	4b11      	ldr	r3, [pc, #68]	; (8006c20 <I2SEx_TxISR_I2SExt+0x94>)
 8006bda:	e001      	b.n	8006be0 <I2SEx_TxISR_I2SExt+0x54>
 8006bdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	490d      	ldr	r1, [pc, #52]	; (8006c1c <I2SEx_TxISR_I2SExt+0x90>)
 8006be8:	428b      	cmp	r3, r1
 8006bea:	d101      	bne.n	8006bf0 <I2SEx_TxISR_I2SExt+0x64>
 8006bec:	4b0c      	ldr	r3, [pc, #48]	; (8006c20 <I2SEx_TxISR_I2SExt+0x94>)
 8006bee:	e001      	b.n	8006bf4 <I2SEx_TxISR_I2SExt+0x68>
 8006bf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bf4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006bf8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d106      	bne.n	8006c12 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7ff ff81 	bl	8006b14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c12:	bf00      	nop
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	40003800 	.word	0x40003800
 8006c20:	40003400 	.word	0x40003400

08006c24 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68d8      	ldr	r0, [r3, #12]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c36:	1c99      	adds	r1, r3, #2
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006c3c:	b282      	uxth	r2, r0
 8006c3e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	3b01      	subs	r3, #1
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d113      	bne.n	8006c80 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c66:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d106      	bne.n	8006c80 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7ff ff4a 	bl	8006b14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c80:	bf00      	nop
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a20      	ldr	r2, [pc, #128]	; (8006d18 <I2SEx_RxISR_I2SExt+0x90>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d101      	bne.n	8006c9e <I2SEx_RxISR_I2SExt+0x16>
 8006c9a:	4b20      	ldr	r3, [pc, #128]	; (8006d1c <I2SEx_RxISR_I2SExt+0x94>)
 8006c9c:	e001      	b.n	8006ca2 <I2SEx_RxISR_I2SExt+0x1a>
 8006c9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ca2:	68d8      	ldr	r0, [r3, #12]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca8:	1c99      	adds	r1, r3, #2
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006cae:	b282      	uxth	r2, r0
 8006cb0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d121      	bne.n	8006d0e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a12      	ldr	r2, [pc, #72]	; (8006d18 <I2SEx_RxISR_I2SExt+0x90>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d101      	bne.n	8006cd8 <I2SEx_RxISR_I2SExt+0x50>
 8006cd4:	4b11      	ldr	r3, [pc, #68]	; (8006d1c <I2SEx_RxISR_I2SExt+0x94>)
 8006cd6:	e001      	b.n	8006cdc <I2SEx_RxISR_I2SExt+0x54>
 8006cd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	490d      	ldr	r1, [pc, #52]	; (8006d18 <I2SEx_RxISR_I2SExt+0x90>)
 8006ce4:	428b      	cmp	r3, r1
 8006ce6:	d101      	bne.n	8006cec <I2SEx_RxISR_I2SExt+0x64>
 8006ce8:	4b0c      	ldr	r3, [pc, #48]	; (8006d1c <I2SEx_RxISR_I2SExt+0x94>)
 8006cea:	e001      	b.n	8006cf0 <I2SEx_RxISR_I2SExt+0x68>
 8006cec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cf0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006cf4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d106      	bne.n	8006d0e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7ff ff03 	bl	8006b14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006d0e:	bf00      	nop
 8006d10:	3708      	adds	r7, #8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	40003800 	.word	0x40003800
 8006d1c:	40003400 	.word	0x40003400

08006d20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e267      	b.n	8007202 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d075      	beq.n	8006e2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d3e:	4b88      	ldr	r3, [pc, #544]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f003 030c 	and.w	r3, r3, #12
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	d00c      	beq.n	8006d64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d4a:	4b85      	ldr	r3, [pc, #532]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d52:	2b08      	cmp	r3, #8
 8006d54:	d112      	bne.n	8006d7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d56:	4b82      	ldr	r3, [pc, #520]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d62:	d10b      	bne.n	8006d7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d64:	4b7e      	ldr	r3, [pc, #504]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d05b      	beq.n	8006e28 <HAL_RCC_OscConfig+0x108>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d157      	bne.n	8006e28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e242      	b.n	8007202 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d84:	d106      	bne.n	8006d94 <HAL_RCC_OscConfig+0x74>
 8006d86:	4b76      	ldr	r3, [pc, #472]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a75      	ldr	r2, [pc, #468]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	e01d      	b.n	8006dd0 <HAL_RCC_OscConfig+0xb0>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d9c:	d10c      	bne.n	8006db8 <HAL_RCC_OscConfig+0x98>
 8006d9e:	4b70      	ldr	r3, [pc, #448]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a6f      	ldr	r2, [pc, #444]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	4b6d      	ldr	r3, [pc, #436]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a6c      	ldr	r2, [pc, #432]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006db4:	6013      	str	r3, [r2, #0]
 8006db6:	e00b      	b.n	8006dd0 <HAL_RCC_OscConfig+0xb0>
 8006db8:	4b69      	ldr	r3, [pc, #420]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a68      	ldr	r2, [pc, #416]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dc2:	6013      	str	r3, [r2, #0]
 8006dc4:	4b66      	ldr	r3, [pc, #408]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a65      	ldr	r2, [pc, #404]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d013      	beq.n	8006e00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dd8:	f7fb fabe 	bl	8002358 <HAL_GetTick>
 8006ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dde:	e008      	b.n	8006df2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006de0:	f7fb faba 	bl	8002358 <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b64      	cmp	r3, #100	; 0x64
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e207      	b.n	8007202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006df2:	4b5b      	ldr	r3, [pc, #364]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0f0      	beq.n	8006de0 <HAL_RCC_OscConfig+0xc0>
 8006dfe:	e014      	b.n	8006e2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e00:	f7fb faaa 	bl	8002358 <HAL_GetTick>
 8006e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e06:	e008      	b.n	8006e1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e08:	f7fb faa6 	bl	8002358 <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	2b64      	cmp	r3, #100	; 0x64
 8006e14:	d901      	bls.n	8006e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e1f3      	b.n	8007202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e1a:	4b51      	ldr	r3, [pc, #324]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1f0      	bne.n	8006e08 <HAL_RCC_OscConfig+0xe8>
 8006e26:	e000      	b.n	8006e2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d063      	beq.n	8006efe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e36:	4b4a      	ldr	r3, [pc, #296]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f003 030c 	and.w	r3, r3, #12
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00b      	beq.n	8006e5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e42:	4b47      	ldr	r3, [pc, #284]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e4a:	2b08      	cmp	r3, #8
 8006e4c:	d11c      	bne.n	8006e88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e4e:	4b44      	ldr	r3, [pc, #272]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d116      	bne.n	8006e88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e5a:	4b41      	ldr	r3, [pc, #260]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d005      	beq.n	8006e72 <HAL_RCC_OscConfig+0x152>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d001      	beq.n	8006e72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e1c7      	b.n	8007202 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e72:	4b3b      	ldr	r3, [pc, #236]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	4937      	ldr	r1, [pc, #220]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e86:	e03a      	b.n	8006efe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d020      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e90:	4b34      	ldr	r3, [pc, #208]	; (8006f64 <HAL_RCC_OscConfig+0x244>)
 8006e92:	2201      	movs	r2, #1
 8006e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e96:	f7fb fa5f 	bl	8002358 <HAL_GetTick>
 8006e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e9c:	e008      	b.n	8006eb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e9e:	f7fb fa5b 	bl	8002358 <HAL_GetTick>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d901      	bls.n	8006eb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e1a8      	b.n	8007202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eb0:	4b2b      	ldr	r3, [pc, #172]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d0f0      	beq.n	8006e9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ebc:	4b28      	ldr	r3, [pc, #160]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	00db      	lsls	r3, r3, #3
 8006eca:	4925      	ldr	r1, [pc, #148]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	600b      	str	r3, [r1, #0]
 8006ed0:	e015      	b.n	8006efe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ed2:	4b24      	ldr	r3, [pc, #144]	; (8006f64 <HAL_RCC_OscConfig+0x244>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed8:	f7fb fa3e 	bl	8002358 <HAL_GetTick>
 8006edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ede:	e008      	b.n	8006ef2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ee0:	f7fb fa3a 	bl	8002358 <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e187      	b.n	8007202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ef2:	4b1b      	ldr	r3, [pc, #108]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1f0      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0308 	and.w	r3, r3, #8
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d036      	beq.n	8006f78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d016      	beq.n	8006f40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f12:	4b15      	ldr	r3, [pc, #84]	; (8006f68 <HAL_RCC_OscConfig+0x248>)
 8006f14:	2201      	movs	r2, #1
 8006f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f18:	f7fb fa1e 	bl	8002358 <HAL_GetTick>
 8006f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f1e:	e008      	b.n	8006f32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f20:	f7fb fa1a 	bl	8002358 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e167      	b.n	8007202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f32:	4b0b      	ldr	r3, [pc, #44]	; (8006f60 <HAL_RCC_OscConfig+0x240>)
 8006f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d0f0      	beq.n	8006f20 <HAL_RCC_OscConfig+0x200>
 8006f3e:	e01b      	b.n	8006f78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f40:	4b09      	ldr	r3, [pc, #36]	; (8006f68 <HAL_RCC_OscConfig+0x248>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f46:	f7fb fa07 	bl	8002358 <HAL_GetTick>
 8006f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f4c:	e00e      	b.n	8006f6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f4e:	f7fb fa03 	bl	8002358 <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d907      	bls.n	8006f6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e150      	b.n	8007202 <HAL_RCC_OscConfig+0x4e2>
 8006f60:	40023800 	.word	0x40023800
 8006f64:	42470000 	.word	0x42470000
 8006f68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f6c:	4b88      	ldr	r3, [pc, #544]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 8006f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f70:	f003 0302 	and.w	r3, r3, #2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1ea      	bne.n	8006f4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0304 	and.w	r3, r3, #4
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 8097 	beq.w	80070b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f86:	2300      	movs	r3, #0
 8006f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f8a:	4b81      	ldr	r3, [pc, #516]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10f      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f96:	2300      	movs	r3, #0
 8006f98:	60bb      	str	r3, [r7, #8]
 8006f9a:	4b7d      	ldr	r3, [pc, #500]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9e:	4a7c      	ldr	r2, [pc, #496]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 8006fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8006fa6:	4b7a      	ldr	r3, [pc, #488]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fae:	60bb      	str	r3, [r7, #8]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fb6:	4b77      	ldr	r3, [pc, #476]	; (8007194 <HAL_RCC_OscConfig+0x474>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d118      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fc2:	4b74      	ldr	r3, [pc, #464]	; (8007194 <HAL_RCC_OscConfig+0x474>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a73      	ldr	r2, [pc, #460]	; (8007194 <HAL_RCC_OscConfig+0x474>)
 8006fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fce:	f7fb f9c3 	bl	8002358 <HAL_GetTick>
 8006fd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fd4:	e008      	b.n	8006fe8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fd6:	f7fb f9bf 	bl	8002358 <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d901      	bls.n	8006fe8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e10c      	b.n	8007202 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fe8:	4b6a      	ldr	r3, [pc, #424]	; (8007194 <HAL_RCC_OscConfig+0x474>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d0f0      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d106      	bne.n	800700a <HAL_RCC_OscConfig+0x2ea>
 8006ffc:	4b64      	ldr	r3, [pc, #400]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 8006ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007000:	4a63      	ldr	r2, [pc, #396]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 8007002:	f043 0301 	orr.w	r3, r3, #1
 8007006:	6713      	str	r3, [r2, #112]	; 0x70
 8007008:	e01c      	b.n	8007044 <HAL_RCC_OscConfig+0x324>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	2b05      	cmp	r3, #5
 8007010:	d10c      	bne.n	800702c <HAL_RCC_OscConfig+0x30c>
 8007012:	4b5f      	ldr	r3, [pc, #380]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 8007014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007016:	4a5e      	ldr	r2, [pc, #376]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 8007018:	f043 0304 	orr.w	r3, r3, #4
 800701c:	6713      	str	r3, [r2, #112]	; 0x70
 800701e:	4b5c      	ldr	r3, [pc, #368]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 8007020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007022:	4a5b      	ldr	r2, [pc, #364]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 8007024:	f043 0301 	orr.w	r3, r3, #1
 8007028:	6713      	str	r3, [r2, #112]	; 0x70
 800702a:	e00b      	b.n	8007044 <HAL_RCC_OscConfig+0x324>
 800702c:	4b58      	ldr	r3, [pc, #352]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 800702e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007030:	4a57      	ldr	r2, [pc, #348]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 8007032:	f023 0301 	bic.w	r3, r3, #1
 8007036:	6713      	str	r3, [r2, #112]	; 0x70
 8007038:	4b55      	ldr	r3, [pc, #340]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 800703a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703c:	4a54      	ldr	r2, [pc, #336]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 800703e:	f023 0304 	bic.w	r3, r3, #4
 8007042:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d015      	beq.n	8007078 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800704c:	f7fb f984 	bl	8002358 <HAL_GetTick>
 8007050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007052:	e00a      	b.n	800706a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007054:	f7fb f980 	bl	8002358 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007062:	4293      	cmp	r3, r2
 8007064:	d901      	bls.n	800706a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e0cb      	b.n	8007202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800706a:	4b49      	ldr	r3, [pc, #292]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 800706c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b00      	cmp	r3, #0
 8007074:	d0ee      	beq.n	8007054 <HAL_RCC_OscConfig+0x334>
 8007076:	e014      	b.n	80070a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007078:	f7fb f96e 	bl	8002358 <HAL_GetTick>
 800707c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800707e:	e00a      	b.n	8007096 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007080:	f7fb f96a 	bl	8002358 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	f241 3288 	movw	r2, #5000	; 0x1388
 800708e:	4293      	cmp	r3, r2
 8007090:	d901      	bls.n	8007096 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e0b5      	b.n	8007202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007096:	4b3e      	ldr	r3, [pc, #248]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 8007098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1ee      	bne.n	8007080 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070a2:	7dfb      	ldrb	r3, [r7, #23]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d105      	bne.n	80070b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070a8:	4b39      	ldr	r3, [pc, #228]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 80070aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ac:	4a38      	ldr	r2, [pc, #224]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 80070ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f000 80a1 	beq.w	8007200 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070be:	4b34      	ldr	r3, [pc, #208]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f003 030c 	and.w	r3, r3, #12
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	d05c      	beq.n	8007184 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d141      	bne.n	8007156 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070d2:	4b31      	ldr	r3, [pc, #196]	; (8007198 <HAL_RCC_OscConfig+0x478>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070d8:	f7fb f93e 	bl	8002358 <HAL_GetTick>
 80070dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070de:	e008      	b.n	80070f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070e0:	f7fb f93a 	bl	8002358 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d901      	bls.n	80070f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e087      	b.n	8007202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070f2:	4b27      	ldr	r3, [pc, #156]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1f0      	bne.n	80070e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	69da      	ldr	r2, [r3, #28]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	431a      	orrs	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	019b      	lsls	r3, r3, #6
 800710e:	431a      	orrs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007114:	085b      	lsrs	r3, r3, #1
 8007116:	3b01      	subs	r3, #1
 8007118:	041b      	lsls	r3, r3, #16
 800711a:	431a      	orrs	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	061b      	lsls	r3, r3, #24
 8007122:	491b      	ldr	r1, [pc, #108]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 8007124:	4313      	orrs	r3, r2
 8007126:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007128:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <HAL_RCC_OscConfig+0x478>)
 800712a:	2201      	movs	r2, #1
 800712c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800712e:	f7fb f913 	bl	8002358 <HAL_GetTick>
 8007132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007134:	e008      	b.n	8007148 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007136:	f7fb f90f 	bl	8002358 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	2b02      	cmp	r3, #2
 8007142:	d901      	bls.n	8007148 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e05c      	b.n	8007202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007148:	4b11      	ldr	r3, [pc, #68]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0f0      	beq.n	8007136 <HAL_RCC_OscConfig+0x416>
 8007154:	e054      	b.n	8007200 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007156:	4b10      	ldr	r3, [pc, #64]	; (8007198 <HAL_RCC_OscConfig+0x478>)
 8007158:	2200      	movs	r2, #0
 800715a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800715c:	f7fb f8fc 	bl	8002358 <HAL_GetTick>
 8007160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007162:	e008      	b.n	8007176 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007164:	f7fb f8f8 	bl	8002358 <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	2b02      	cmp	r3, #2
 8007170:	d901      	bls.n	8007176 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e045      	b.n	8007202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007176:	4b06      	ldr	r3, [pc, #24]	; (8007190 <HAL_RCC_OscConfig+0x470>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1f0      	bne.n	8007164 <HAL_RCC_OscConfig+0x444>
 8007182:	e03d      	b.n	8007200 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d107      	bne.n	800719c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e038      	b.n	8007202 <HAL_RCC_OscConfig+0x4e2>
 8007190:	40023800 	.word	0x40023800
 8007194:	40007000 	.word	0x40007000
 8007198:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800719c:	4b1b      	ldr	r3, [pc, #108]	; (800720c <HAL_RCC_OscConfig+0x4ec>)
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d028      	beq.n	80071fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d121      	bne.n	80071fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d11a      	bne.n	80071fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071cc:	4013      	ands	r3, r2
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d111      	bne.n	80071fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e2:	085b      	lsrs	r3, r3, #1
 80071e4:	3b01      	subs	r3, #1
 80071e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d107      	bne.n	80071fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d001      	beq.n	8007200 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e000      	b.n	8007202 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	40023800 	.word	0x40023800

08007210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d101      	bne.n	8007224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e0cc      	b.n	80073be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007224:	4b68      	ldr	r3, [pc, #416]	; (80073c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0307 	and.w	r3, r3, #7
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	429a      	cmp	r2, r3
 8007230:	d90c      	bls.n	800724c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007232:	4b65      	ldr	r3, [pc, #404]	; (80073c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	b2d2      	uxtb	r2, r2
 8007238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800723a:	4b63      	ldr	r3, [pc, #396]	; (80073c8 <HAL_RCC_ClockConfig+0x1b8>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0307 	and.w	r3, r3, #7
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	429a      	cmp	r2, r3
 8007246:	d001      	beq.n	800724c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e0b8      	b.n	80073be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d020      	beq.n	800729a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0304 	and.w	r3, r3, #4
 8007260:	2b00      	cmp	r3, #0
 8007262:	d005      	beq.n	8007270 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007264:	4b59      	ldr	r3, [pc, #356]	; (80073cc <HAL_RCC_ClockConfig+0x1bc>)
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	4a58      	ldr	r2, [pc, #352]	; (80073cc <HAL_RCC_ClockConfig+0x1bc>)
 800726a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800726e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0308 	and.w	r3, r3, #8
 8007278:	2b00      	cmp	r3, #0
 800727a:	d005      	beq.n	8007288 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800727c:	4b53      	ldr	r3, [pc, #332]	; (80073cc <HAL_RCC_ClockConfig+0x1bc>)
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	4a52      	ldr	r2, [pc, #328]	; (80073cc <HAL_RCC_ClockConfig+0x1bc>)
 8007282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007286:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007288:	4b50      	ldr	r3, [pc, #320]	; (80073cc <HAL_RCC_ClockConfig+0x1bc>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	494d      	ldr	r1, [pc, #308]	; (80073cc <HAL_RCC_ClockConfig+0x1bc>)
 8007296:	4313      	orrs	r3, r2
 8007298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d044      	beq.n	8007330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d107      	bne.n	80072be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072ae:	4b47      	ldr	r3, [pc, #284]	; (80073cc <HAL_RCC_ClockConfig+0x1bc>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d119      	bne.n	80072ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e07f      	b.n	80073be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d003      	beq.n	80072ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	d107      	bne.n	80072de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072ce:	4b3f      	ldr	r3, [pc, #252]	; (80073cc <HAL_RCC_ClockConfig+0x1bc>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d109      	bne.n	80072ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e06f      	b.n	80073be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072de:	4b3b      	ldr	r3, [pc, #236]	; (80073cc <HAL_RCC_ClockConfig+0x1bc>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 0302 	and.w	r3, r3, #2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d101      	bne.n	80072ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e067      	b.n	80073be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072ee:	4b37      	ldr	r3, [pc, #220]	; (80073cc <HAL_RCC_ClockConfig+0x1bc>)
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f023 0203 	bic.w	r2, r3, #3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	4934      	ldr	r1, [pc, #208]	; (80073cc <HAL_RCC_ClockConfig+0x1bc>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007300:	f7fb f82a 	bl	8002358 <HAL_GetTick>
 8007304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007306:	e00a      	b.n	800731e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007308:	f7fb f826 	bl	8002358 <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	f241 3288 	movw	r2, #5000	; 0x1388
 8007316:	4293      	cmp	r3, r2
 8007318:	d901      	bls.n	800731e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e04f      	b.n	80073be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800731e:	4b2b      	ldr	r3, [pc, #172]	; (80073cc <HAL_RCC_ClockConfig+0x1bc>)
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f003 020c 	and.w	r2, r3, #12
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	429a      	cmp	r2, r3
 800732e:	d1eb      	bne.n	8007308 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007330:	4b25      	ldr	r3, [pc, #148]	; (80073c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0307 	and.w	r3, r3, #7
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	429a      	cmp	r2, r3
 800733c:	d20c      	bcs.n	8007358 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800733e:	4b22      	ldr	r3, [pc, #136]	; (80073c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	b2d2      	uxtb	r2, r2
 8007344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007346:	4b20      	ldr	r3, [pc, #128]	; (80073c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0307 	and.w	r3, r3, #7
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	429a      	cmp	r2, r3
 8007352:	d001      	beq.n	8007358 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e032      	b.n	80073be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0304 	and.w	r3, r3, #4
 8007360:	2b00      	cmp	r3, #0
 8007362:	d008      	beq.n	8007376 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007364:	4b19      	ldr	r3, [pc, #100]	; (80073cc <HAL_RCC_ClockConfig+0x1bc>)
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	4916      	ldr	r1, [pc, #88]	; (80073cc <HAL_RCC_ClockConfig+0x1bc>)
 8007372:	4313      	orrs	r3, r2
 8007374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0308 	and.w	r3, r3, #8
 800737e:	2b00      	cmp	r3, #0
 8007380:	d009      	beq.n	8007396 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007382:	4b12      	ldr	r3, [pc, #72]	; (80073cc <HAL_RCC_ClockConfig+0x1bc>)
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	00db      	lsls	r3, r3, #3
 8007390:	490e      	ldr	r1, [pc, #56]	; (80073cc <HAL_RCC_ClockConfig+0x1bc>)
 8007392:	4313      	orrs	r3, r2
 8007394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007396:	f000 f821 	bl	80073dc <HAL_RCC_GetSysClockFreq>
 800739a:	4602      	mov	r2, r0
 800739c:	4b0b      	ldr	r3, [pc, #44]	; (80073cc <HAL_RCC_ClockConfig+0x1bc>)
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	091b      	lsrs	r3, r3, #4
 80073a2:	f003 030f 	and.w	r3, r3, #15
 80073a6:	490a      	ldr	r1, [pc, #40]	; (80073d0 <HAL_RCC_ClockConfig+0x1c0>)
 80073a8:	5ccb      	ldrb	r3, [r1, r3]
 80073aa:	fa22 f303 	lsr.w	r3, r2, r3
 80073ae:	4a09      	ldr	r2, [pc, #36]	; (80073d4 <HAL_RCC_ClockConfig+0x1c4>)
 80073b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80073b2:	4b09      	ldr	r3, [pc, #36]	; (80073d8 <HAL_RCC_ClockConfig+0x1c8>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fa ff8a 	bl	80022d0 <HAL_InitTick>

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	40023c00 	.word	0x40023c00
 80073cc:	40023800 	.word	0x40023800
 80073d0:	080104ec 	.word	0x080104ec
 80073d4:	20000068 	.word	0x20000068
 80073d8:	20000070 	.word	0x20000070

080073dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073e0:	b094      	sub	sp, #80	; 0x50
 80073e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	647b      	str	r3, [r7, #68]	; 0x44
 80073e8:	2300      	movs	r3, #0
 80073ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073ec:	2300      	movs	r3, #0
 80073ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073f4:	4b79      	ldr	r3, [pc, #484]	; (80075dc <HAL_RCC_GetSysClockFreq+0x200>)
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f003 030c 	and.w	r3, r3, #12
 80073fc:	2b08      	cmp	r3, #8
 80073fe:	d00d      	beq.n	800741c <HAL_RCC_GetSysClockFreq+0x40>
 8007400:	2b08      	cmp	r3, #8
 8007402:	f200 80e1 	bhi.w	80075c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <HAL_RCC_GetSysClockFreq+0x34>
 800740a:	2b04      	cmp	r3, #4
 800740c:	d003      	beq.n	8007416 <HAL_RCC_GetSysClockFreq+0x3a>
 800740e:	e0db      	b.n	80075c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007410:	4b73      	ldr	r3, [pc, #460]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007412:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007414:	e0db      	b.n	80075ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007416:	4b73      	ldr	r3, [pc, #460]	; (80075e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007418:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800741a:	e0d8      	b.n	80075ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800741c:	4b6f      	ldr	r3, [pc, #444]	; (80075dc <HAL_RCC_GetSysClockFreq+0x200>)
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007424:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007426:	4b6d      	ldr	r3, [pc, #436]	; (80075dc <HAL_RCC_GetSysClockFreq+0x200>)
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d063      	beq.n	80074fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007432:	4b6a      	ldr	r3, [pc, #424]	; (80075dc <HAL_RCC_GetSysClockFreq+0x200>)
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	099b      	lsrs	r3, r3, #6
 8007438:	2200      	movs	r2, #0
 800743a:	63bb      	str	r3, [r7, #56]	; 0x38
 800743c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800743e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007444:	633b      	str	r3, [r7, #48]	; 0x30
 8007446:	2300      	movs	r3, #0
 8007448:	637b      	str	r3, [r7, #52]	; 0x34
 800744a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800744e:	4622      	mov	r2, r4
 8007450:	462b      	mov	r3, r5
 8007452:	f04f 0000 	mov.w	r0, #0
 8007456:	f04f 0100 	mov.w	r1, #0
 800745a:	0159      	lsls	r1, r3, #5
 800745c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007460:	0150      	lsls	r0, r2, #5
 8007462:	4602      	mov	r2, r0
 8007464:	460b      	mov	r3, r1
 8007466:	4621      	mov	r1, r4
 8007468:	1a51      	subs	r1, r2, r1
 800746a:	6139      	str	r1, [r7, #16]
 800746c:	4629      	mov	r1, r5
 800746e:	eb63 0301 	sbc.w	r3, r3, r1
 8007472:	617b      	str	r3, [r7, #20]
 8007474:	f04f 0200 	mov.w	r2, #0
 8007478:	f04f 0300 	mov.w	r3, #0
 800747c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007480:	4659      	mov	r1, fp
 8007482:	018b      	lsls	r3, r1, #6
 8007484:	4651      	mov	r1, sl
 8007486:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800748a:	4651      	mov	r1, sl
 800748c:	018a      	lsls	r2, r1, #6
 800748e:	4651      	mov	r1, sl
 8007490:	ebb2 0801 	subs.w	r8, r2, r1
 8007494:	4659      	mov	r1, fp
 8007496:	eb63 0901 	sbc.w	r9, r3, r1
 800749a:	f04f 0200 	mov.w	r2, #0
 800749e:	f04f 0300 	mov.w	r3, #0
 80074a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074ae:	4690      	mov	r8, r2
 80074b0:	4699      	mov	r9, r3
 80074b2:	4623      	mov	r3, r4
 80074b4:	eb18 0303 	adds.w	r3, r8, r3
 80074b8:	60bb      	str	r3, [r7, #8]
 80074ba:	462b      	mov	r3, r5
 80074bc:	eb49 0303 	adc.w	r3, r9, r3
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	f04f 0200 	mov.w	r2, #0
 80074c6:	f04f 0300 	mov.w	r3, #0
 80074ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80074ce:	4629      	mov	r1, r5
 80074d0:	024b      	lsls	r3, r1, #9
 80074d2:	4621      	mov	r1, r4
 80074d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80074d8:	4621      	mov	r1, r4
 80074da:	024a      	lsls	r2, r1, #9
 80074dc:	4610      	mov	r0, r2
 80074de:	4619      	mov	r1, r3
 80074e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074e2:	2200      	movs	r2, #0
 80074e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80074e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074ec:	f7f8 fe74 	bl	80001d8 <__aeabi_uldivmod>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	4613      	mov	r3, r2
 80074f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074f8:	e058      	b.n	80075ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074fa:	4b38      	ldr	r3, [pc, #224]	; (80075dc <HAL_RCC_GetSysClockFreq+0x200>)
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	099b      	lsrs	r3, r3, #6
 8007500:	2200      	movs	r2, #0
 8007502:	4618      	mov	r0, r3
 8007504:	4611      	mov	r1, r2
 8007506:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800750a:	623b      	str	r3, [r7, #32]
 800750c:	2300      	movs	r3, #0
 800750e:	627b      	str	r3, [r7, #36]	; 0x24
 8007510:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007514:	4642      	mov	r2, r8
 8007516:	464b      	mov	r3, r9
 8007518:	f04f 0000 	mov.w	r0, #0
 800751c:	f04f 0100 	mov.w	r1, #0
 8007520:	0159      	lsls	r1, r3, #5
 8007522:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007526:	0150      	lsls	r0, r2, #5
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	4641      	mov	r1, r8
 800752e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007532:	4649      	mov	r1, r9
 8007534:	eb63 0b01 	sbc.w	fp, r3, r1
 8007538:	f04f 0200 	mov.w	r2, #0
 800753c:	f04f 0300 	mov.w	r3, #0
 8007540:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007544:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007548:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800754c:	ebb2 040a 	subs.w	r4, r2, sl
 8007550:	eb63 050b 	sbc.w	r5, r3, fp
 8007554:	f04f 0200 	mov.w	r2, #0
 8007558:	f04f 0300 	mov.w	r3, #0
 800755c:	00eb      	lsls	r3, r5, #3
 800755e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007562:	00e2      	lsls	r2, r4, #3
 8007564:	4614      	mov	r4, r2
 8007566:	461d      	mov	r5, r3
 8007568:	4643      	mov	r3, r8
 800756a:	18e3      	adds	r3, r4, r3
 800756c:	603b      	str	r3, [r7, #0]
 800756e:	464b      	mov	r3, r9
 8007570:	eb45 0303 	adc.w	r3, r5, r3
 8007574:	607b      	str	r3, [r7, #4]
 8007576:	f04f 0200 	mov.w	r2, #0
 800757a:	f04f 0300 	mov.w	r3, #0
 800757e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007582:	4629      	mov	r1, r5
 8007584:	028b      	lsls	r3, r1, #10
 8007586:	4621      	mov	r1, r4
 8007588:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800758c:	4621      	mov	r1, r4
 800758e:	028a      	lsls	r2, r1, #10
 8007590:	4610      	mov	r0, r2
 8007592:	4619      	mov	r1, r3
 8007594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007596:	2200      	movs	r2, #0
 8007598:	61bb      	str	r3, [r7, #24]
 800759a:	61fa      	str	r2, [r7, #28]
 800759c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075a0:	f7f8 fe1a 	bl	80001d8 <__aeabi_uldivmod>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	4613      	mov	r3, r2
 80075aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80075ac:	4b0b      	ldr	r3, [pc, #44]	; (80075dc <HAL_RCC_GetSysClockFreq+0x200>)
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	0c1b      	lsrs	r3, r3, #16
 80075b2:	f003 0303 	and.w	r3, r3, #3
 80075b6:	3301      	adds	r3, #1
 80075b8:	005b      	lsls	r3, r3, #1
 80075ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80075bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80075c6:	e002      	b.n	80075ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075c8:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80075ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80075cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3750      	adds	r7, #80	; 0x50
 80075d4:	46bd      	mov	sp, r7
 80075d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075da:	bf00      	nop
 80075dc:	40023800 	.word	0x40023800
 80075e0:	00f42400 	.word	0x00f42400
 80075e4:	007a1200 	.word	0x007a1200

080075e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075e8:	b480      	push	{r7}
 80075ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075ec:	4b03      	ldr	r3, [pc, #12]	; (80075fc <HAL_RCC_GetHCLKFreq+0x14>)
 80075ee:	681b      	ldr	r3, [r3, #0]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	20000068 	.word	0x20000068

08007600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007604:	f7ff fff0 	bl	80075e8 <HAL_RCC_GetHCLKFreq>
 8007608:	4602      	mov	r2, r0
 800760a:	4b05      	ldr	r3, [pc, #20]	; (8007620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	0a9b      	lsrs	r3, r3, #10
 8007610:	f003 0307 	and.w	r3, r3, #7
 8007614:	4903      	ldr	r1, [pc, #12]	; (8007624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007616:	5ccb      	ldrb	r3, [r1, r3]
 8007618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800761c:	4618      	mov	r0, r3
 800761e:	bd80      	pop	{r7, pc}
 8007620:	40023800 	.word	0x40023800
 8007624:	080104fc 	.word	0x080104fc

08007628 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007630:	2300      	movs	r3, #0
 8007632:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d105      	bne.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800764c:	2b00      	cmp	r3, #0
 800764e:	d038      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007650:	4b68      	ldr	r3, [pc, #416]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007656:	f7fa fe7f 	bl	8002358 <HAL_GetTick>
 800765a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800765c:	e008      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800765e:	f7fa fe7b 	bl	8002358 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	2b02      	cmp	r3, #2
 800766a:	d901      	bls.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e0bd      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007670:	4b61      	ldr	r3, [pc, #388]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1f0      	bne.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	019b      	lsls	r3, r3, #6
 8007686:	431a      	orrs	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	071b      	lsls	r3, r3, #28
 800768e:	495a      	ldr	r1, [pc, #360]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007690:	4313      	orrs	r3, r2
 8007692:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007696:	4b57      	ldr	r3, [pc, #348]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007698:	2201      	movs	r2, #1
 800769a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800769c:	f7fa fe5c 	bl	8002358 <HAL_GetTick>
 80076a0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80076a2:	e008      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80076a4:	f7fa fe58 	bl	8002358 <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d901      	bls.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e09a      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80076b6:	4b50      	ldr	r3, [pc, #320]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0f0      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0302 	and.w	r3, r3, #2
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 8083 	beq.w	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80076d0:	2300      	movs	r3, #0
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	4b48      	ldr	r3, [pc, #288]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d8:	4a47      	ldr	r2, [pc, #284]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076de:	6413      	str	r3, [r2, #64]	; 0x40
 80076e0:	4b45      	ldr	r3, [pc, #276]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076e8:	60fb      	str	r3, [r7, #12]
 80076ea:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80076ec:	4b43      	ldr	r3, [pc, #268]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a42      	ldr	r2, [pc, #264]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80076f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076f6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80076f8:	f7fa fe2e 	bl	8002358 <HAL_GetTick>
 80076fc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80076fe:	e008      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007700:	f7fa fe2a 	bl	8002358 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b02      	cmp	r3, #2
 800770c:	d901      	bls.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e06c      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007712:	4b3a      	ldr	r3, [pc, #232]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800771a:	2b00      	cmp	r3, #0
 800771c:	d0f0      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800771e:	4b36      	ldr	r3, [pc, #216]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007726:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d02f      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	429a      	cmp	r2, r3
 800773a:	d028      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800773c:	4b2e      	ldr	r3, [pc, #184]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800773e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007744:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007746:	4b2e      	ldr	r3, [pc, #184]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007748:	2201      	movs	r2, #1
 800774a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800774c:	4b2c      	ldr	r3, [pc, #176]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007752:	4a29      	ldr	r2, [pc, #164]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007758:	4b27      	ldr	r3, [pc, #156]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800775a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800775c:	f003 0301 	and.w	r3, r3, #1
 8007760:	2b01      	cmp	r3, #1
 8007762:	d114      	bne.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007764:	f7fa fdf8 	bl	8002358 <HAL_GetTick>
 8007768:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800776a:	e00a      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800776c:	f7fa fdf4 	bl	8002358 <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	f241 3288 	movw	r2, #5000	; 0x1388
 800777a:	4293      	cmp	r3, r2
 800777c:	d901      	bls.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e034      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007782:	4b1d      	ldr	r3, [pc, #116]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007786:	f003 0302 	and.w	r3, r3, #2
 800778a:	2b00      	cmp	r3, #0
 800778c:	d0ee      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800779a:	d10d      	bne.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800779c:	4b16      	ldr	r3, [pc, #88]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80077ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077b0:	4911      	ldr	r1, [pc, #68]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	608b      	str	r3, [r1, #8]
 80077b6:	e005      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80077b8:	4b0f      	ldr	r3, [pc, #60]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	4a0e      	ldr	r2, [pc, #56]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80077c2:	6093      	str	r3, [r2, #8]
 80077c4:	4b0c      	ldr	r3, [pc, #48]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077d0:	4909      	ldr	r1, [pc, #36]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0308 	and.w	r3, r3, #8
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	7d1a      	ldrb	r2, [r3, #20]
 80077e6:	4b07      	ldr	r3, [pc, #28]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80077e8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	42470068 	.word	0x42470068
 80077f8:	40023800 	.word	0x40023800
 80077fc:	40007000 	.word	0x40007000
 8007800:	42470e40 	.word	0x42470e40
 8007804:	424711e0 	.word	0x424711e0

08007808 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2203      	movs	r2, #3
 8007814:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007816:	4b1c      	ldr	r3, [pc, #112]	; (8007888 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800781c:	099b      	lsrs	r3, r3, #6
 800781e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007826:	4b18      	ldr	r3, [pc, #96]	; (8007888 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800782c:	0f1b      	lsrs	r3, r3, #28
 800782e:	f003 0207 	and.w	r2, r3, #7
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 8007836:	4b14      	ldr	r3, [pc, #80]	; (8007888 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800783c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007844:	4b10      	ldr	r3, [pc, #64]	; (8007888 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800784c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800784e:	4b0e      	ldr	r3, [pc, #56]	; (8007888 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007852:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	431a      	orrs	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 800785e:	4b0a      	ldr	r3, [pc, #40]	; (8007888 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d103      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8007872:	e002      	b.n	800787a <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	751a      	strb	r2, [r3, #20]
}
 800787a:	bf00      	nop
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	40023800 	.word	0x40023800

0800788c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007894:	2300      	movs	r3, #0
 8007896:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007898:	2300      	movs	r3, #0
 800789a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800789c:	2300      	movs	r3, #0
 800789e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80078a0:	2300      	movs	r3, #0
 80078a2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d140      	bne.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80078aa:	4b24      	ldr	r3, [pc, #144]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d005      	beq.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d131      	bne.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80078c0:	4b1f      	ldr	r3, [pc, #124]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80078c2:	617b      	str	r3, [r7, #20]
          break;
 80078c4:	e031      	b.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80078c6:	4b1d      	ldr	r3, [pc, #116]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078d2:	d109      	bne.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80078d4:	4b19      	ldr	r3, [pc, #100]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078de:	4a19      	ldr	r2, [pc, #100]	; (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80078e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e4:	613b      	str	r3, [r7, #16]
 80078e6:	e008      	b.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80078e8:	4b14      	ldr	r3, [pc, #80]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078f2:	4a15      	ldr	r2, [pc, #84]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80078f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f8:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80078fa:	4b10      	ldr	r3, [pc, #64]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007900:	099b      	lsrs	r3, r3, #6
 8007902:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	fb02 f303 	mul.w	r3, r2, r3
 800790c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800790e:	4b0b      	ldr	r3, [pc, #44]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007914:	0f1b      	lsrs	r3, r3, #28
 8007916:	f003 0307 	and.w	r3, r3, #7
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007920:	617b      	str	r3, [r7, #20]
          break;
 8007922:	e002      	b.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007924:	2300      	movs	r3, #0
 8007926:	617b      	str	r3, [r7, #20]
          break;
 8007928:	bf00      	nop
        }
      }
      break;
 800792a:	bf00      	nop
    }
  }
  return frequency;
 800792c:	697b      	ldr	r3, [r7, #20]
}
 800792e:	4618      	mov	r0, r3
 8007930:	371c      	adds	r7, #28
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	40023800 	.word	0x40023800
 8007940:	00bb8000 	.word	0x00bb8000
 8007944:	007a1200 	.word	0x007a1200
 8007948:	00f42400 	.word	0x00f42400

0800794c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	4613      	mov	r3, r2
 8007958:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b20      	cmp	r3, #32
 8007964:	d11d      	bne.n	80079a2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <HAL_UART_Receive_IT+0x26>
 800796c:	88fb      	ldrh	r3, [r7, #6]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d101      	bne.n	8007976 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e016      	b.n	80079a4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800797c:	2b01      	cmp	r3, #1
 800797e:	d101      	bne.n	8007984 <HAL_UART_Receive_IT+0x38>
 8007980:	2302      	movs	r3, #2
 8007982:	e00f      	b.n	80079a4 <HAL_UART_Receive_IT+0x58>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007992:	88fb      	ldrh	r3, [r7, #6]
 8007994:	461a      	mov	r2, r3
 8007996:	68b9      	ldr	r1, [r7, #8]
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f000 fab5 	bl	8007f08 <UART_Start_Receive_IT>
 800799e:	4603      	mov	r3, r0
 80079a0:	e000      	b.n	80079a4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80079a2:	2302      	movs	r3, #2
  }
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b0ba      	sub	sp, #232	; 0xe8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80079d8:	2300      	movs	r3, #0
 80079da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079e2:	f003 030f 	and.w	r3, r3, #15
 80079e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80079ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10f      	bne.n	8007a12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f6:	f003 0320 	and.w	r3, r3, #32
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d009      	beq.n	8007a12 <HAL_UART_IRQHandler+0x66>
 80079fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a02:	f003 0320 	and.w	r3, r3, #32
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fb99 	bl	8008142 <UART_Receive_IT>
      return;
 8007a10:	e256      	b.n	8007ec0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 80de 	beq.w	8007bd8 <HAL_UART_IRQHandler+0x22c>
 8007a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d106      	bne.n	8007a36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 80d1 	beq.w	8007bd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00b      	beq.n	8007a5a <HAL_UART_IRQHandler+0xae>
 8007a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d005      	beq.n	8007a5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	f043 0201 	orr.w	r2, r3, #1
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a5e:	f003 0304 	and.w	r3, r3, #4
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00b      	beq.n	8007a7e <HAL_UART_IRQHandler+0xd2>
 8007a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d005      	beq.n	8007a7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a76:	f043 0202 	orr.w	r2, r3, #2
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00b      	beq.n	8007aa2 <HAL_UART_IRQHandler+0xf6>
 8007a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d005      	beq.n	8007aa2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9a:	f043 0204 	orr.w	r2, r3, #4
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa6:	f003 0308 	and.w	r3, r3, #8
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d011      	beq.n	8007ad2 <HAL_UART_IRQHandler+0x126>
 8007aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab2:	f003 0320 	and.w	r3, r3, #32
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d105      	bne.n	8007ac6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d005      	beq.n	8007ad2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aca:	f043 0208 	orr.w	r2, r3, #8
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 81ed 	beq.w	8007eb6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae0:	f003 0320 	and.w	r3, r3, #32
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d008      	beq.n	8007afa <HAL_UART_IRQHandler+0x14e>
 8007ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aec:	f003 0320 	and.w	r3, r3, #32
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d002      	beq.n	8007afa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fb24 	bl	8008142 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b04:	2b40      	cmp	r3, #64	; 0x40
 8007b06:	bf0c      	ite	eq
 8007b08:	2301      	moveq	r3, #1
 8007b0a:	2300      	movne	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b16:	f003 0308 	and.w	r3, r3, #8
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d103      	bne.n	8007b26 <HAL_UART_IRQHandler+0x17a>
 8007b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d04f      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fa2c 	bl	8007f84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b36:	2b40      	cmp	r3, #64	; 0x40
 8007b38:	d141      	bne.n	8007bbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3314      	adds	r3, #20
 8007b40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b48:	e853 3f00 	ldrex	r3, [r3]
 8007b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3314      	adds	r3, #20
 8007b62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1d9      	bne.n	8007b3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d013      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b92:	4a7d      	ldr	r2, [pc, #500]	; (8007d88 <HAL_UART_IRQHandler+0x3dc>)
 8007b94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fa fef2 	bl	8002984 <HAL_DMA_Abort_IT>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d016      	beq.n	8007bd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb4:	e00e      	b.n	8007bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f990 	bl	8007edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bbc:	e00a      	b.n	8007bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f98c 	bl	8007edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc4:	e006      	b.n	8007bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f988 	bl	8007edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007bd2:	e170      	b.n	8007eb6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd4:	bf00      	nop
    return;
 8007bd6:	e16e      	b.n	8007eb6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	f040 814a 	bne.w	8007e76 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be6:	f003 0310 	and.w	r3, r3, #16
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 8143 	beq.w	8007e76 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf4:	f003 0310 	and.w	r3, r3, #16
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 813c 	beq.w	8007e76 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bfe:	2300      	movs	r3, #0
 8007c00:	60bb      	str	r3, [r7, #8]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	60bb      	str	r3, [r7, #8]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	60bb      	str	r3, [r7, #8]
 8007c12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1e:	2b40      	cmp	r3, #64	; 0x40
 8007c20:	f040 80b4 	bne.w	8007d8c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 8140 	beq.w	8007eba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c42:	429a      	cmp	r2, r3
 8007c44:	f080 8139 	bcs.w	8007eba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c5a:	f000 8088 	beq.w	8007d6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	330c      	adds	r3, #12
 8007c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c6c:	e853 3f00 	ldrex	r3, [r3]
 8007c70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	330c      	adds	r3, #12
 8007c86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007c8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c9a:	e841 2300 	strex	r3, r2, [r1]
 8007c9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1d9      	bne.n	8007c5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	3314      	adds	r3, #20
 8007cb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cb4:	e853 3f00 	ldrex	r3, [r3]
 8007cb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cbc:	f023 0301 	bic.w	r3, r3, #1
 8007cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3314      	adds	r3, #20
 8007cca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007cd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cda:	e841 2300 	strex	r3, r2, [r1]
 8007cde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ce0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1e1      	bne.n	8007caa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3314      	adds	r3, #20
 8007cec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cf0:	e853 3f00 	ldrex	r3, [r3]
 8007cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3314      	adds	r3, #20
 8007d06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e3      	bne.n	8007ce6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	330c      	adds	r3, #12
 8007d32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d36:	e853 3f00 	ldrex	r3, [r3]
 8007d3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d3e:	f023 0310 	bic.w	r3, r3, #16
 8007d42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	330c      	adds	r3, #12
 8007d4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d50:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d58:	e841 2300 	strex	r3, r2, [r1]
 8007d5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1e3      	bne.n	8007d2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7fa fd9b 	bl	80028a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f8b6 	bl	8007ef0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d84:	e099      	b.n	8007eba <HAL_UART_IRQHandler+0x50e>
 8007d86:	bf00      	nop
 8007d88:	0800804b 	.word	0x0800804b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 808b 	beq.w	8007ebe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007da8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 8086 	beq.w	8007ebe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	330c      	adds	r3, #12
 8007db8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	330c      	adds	r3, #12
 8007dd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007dd6:	647a      	str	r2, [r7, #68]	; 0x44
 8007dd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ddc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e3      	bne.n	8007db2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3314      	adds	r3, #20
 8007df0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	e853 3f00 	ldrex	r3, [r3]
 8007df8:	623b      	str	r3, [r7, #32]
   return(result);
 8007dfa:	6a3b      	ldr	r3, [r7, #32]
 8007dfc:	f023 0301 	bic.w	r3, r3, #1
 8007e00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3314      	adds	r3, #20
 8007e0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e0e:	633a      	str	r2, [r7, #48]	; 0x30
 8007e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e3      	bne.n	8007dea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2220      	movs	r2, #32
 8007e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	330c      	adds	r3, #12
 8007e36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	e853 3f00 	ldrex	r3, [r3]
 8007e3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f023 0310 	bic.w	r3, r3, #16
 8007e46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	330c      	adds	r3, #12
 8007e50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e54:	61fa      	str	r2, [r7, #28]
 8007e56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e58:	69b9      	ldr	r1, [r7, #24]
 8007e5a:	69fa      	ldr	r2, [r7, #28]
 8007e5c:	e841 2300 	strex	r3, r2, [r1]
 8007e60:	617b      	str	r3, [r7, #20]
   return(result);
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e3      	bne.n	8007e30 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f83e 	bl	8007ef0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e74:	e023      	b.n	8007ebe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d009      	beq.n	8007e96 <HAL_UART_IRQHandler+0x4ea>
 8007e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f8ef 	bl	8008072 <UART_Transmit_IT>
    return;
 8007e94:	e014      	b.n	8007ec0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00e      	beq.n	8007ec0 <HAL_UART_IRQHandler+0x514>
 8007ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d008      	beq.n	8007ec0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f92f 	bl	8008112 <UART_EndTransmit_IT>
    return;
 8007eb4:	e004      	b.n	8007ec0 <HAL_UART_IRQHandler+0x514>
    return;
 8007eb6:	bf00      	nop
 8007eb8:	e002      	b.n	8007ec0 <HAL_UART_IRQHandler+0x514>
      return;
 8007eba:	bf00      	nop
 8007ebc:	e000      	b.n	8007ec0 <HAL_UART_IRQHandler+0x514>
      return;
 8007ebe:	bf00      	nop
  }
}
 8007ec0:	37e8      	adds	r7, #232	; 0xe8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop

08007ec8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	4613      	mov	r3, r2
 8007f14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	88fa      	ldrh	r2, [r7, #6]
 8007f20:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	88fa      	ldrh	r2, [r7, #6]
 8007f26:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2222      	movs	r2, #34	; 0x22
 8007f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d007      	beq.n	8007f56 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68da      	ldr	r2, [r3, #12]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f54:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	695a      	ldr	r2, [r3, #20]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f042 0201 	orr.w	r2, r2, #1
 8007f64:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68da      	ldr	r2, [r3, #12]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f042 0220 	orr.w	r2, r2, #32
 8007f74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b095      	sub	sp, #84	; 0x54
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	330c      	adds	r3, #12
 8007f92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f96:	e853 3f00 	ldrex	r3, [r3]
 8007f9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	330c      	adds	r3, #12
 8007faa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fac:	643a      	str	r2, [r7, #64]	; 0x40
 8007fae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fb4:	e841 2300 	strex	r3, r2, [r1]
 8007fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1e5      	bne.n	8007f8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3314      	adds	r3, #20
 8007fc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	e853 3f00 	ldrex	r3, [r3]
 8007fce:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	f023 0301 	bic.w	r3, r3, #1
 8007fd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3314      	adds	r3, #20
 8007fde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fe0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e5      	bne.n	8007fc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d119      	bne.n	8008030 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	330c      	adds	r3, #12
 8008002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	e853 3f00 	ldrex	r3, [r3]
 800800a:	60bb      	str	r3, [r7, #8]
   return(result);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f023 0310 	bic.w	r3, r3, #16
 8008012:	647b      	str	r3, [r7, #68]	; 0x44
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	330c      	adds	r3, #12
 800801a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800801c:	61ba      	str	r2, [r7, #24]
 800801e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	6979      	ldr	r1, [r7, #20]
 8008022:	69ba      	ldr	r2, [r7, #24]
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	613b      	str	r3, [r7, #16]
   return(result);
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e5      	bne.n	8007ffc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2220      	movs	r2, #32
 8008034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800803e:	bf00      	nop
 8008040:	3754      	adds	r7, #84	; 0x54
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b084      	sub	sp, #16
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008056:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f7ff ff39 	bl	8007edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800806a:	bf00      	nop
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008072:	b480      	push	{r7}
 8008074:	b085      	sub	sp, #20
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b21      	cmp	r3, #33	; 0x21
 8008084:	d13e      	bne.n	8008104 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800808e:	d114      	bne.n	80080ba <UART_Transmit_IT+0x48>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d110      	bne.n	80080ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a1b      	ldr	r3, [r3, #32]
 800809c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	461a      	mov	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	1c9a      	adds	r2, r3, #2
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	621a      	str	r2, [r3, #32]
 80080b8:	e008      	b.n	80080cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	1c59      	adds	r1, r3, #1
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	6211      	str	r1, [r2, #32]
 80080c4:	781a      	ldrb	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	3b01      	subs	r3, #1
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	4619      	mov	r1, r3
 80080da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10f      	bne.n	8008100 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68da      	ldr	r2, [r3, #12]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68da      	ldr	r2, [r3, #12]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	e000      	b.n	8008106 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008104:	2302      	movs	r3, #2
  }
}
 8008106:	4618      	mov	r0, r3
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68da      	ldr	r2, [r3, #12]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008128:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2220      	movs	r2, #32
 800812e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7ff fec8 	bl	8007ec8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b08c      	sub	sp, #48	; 0x30
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b22      	cmp	r3, #34	; 0x22
 8008154:	f040 80ab 	bne.w	80082ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008160:	d117      	bne.n	8008192 <UART_Receive_IT+0x50>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d113      	bne.n	8008192 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800816a:	2300      	movs	r3, #0
 800816c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008172:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	b29b      	uxth	r3, r3
 800817c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008180:	b29a      	uxth	r2, r3
 8008182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008184:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818a:	1c9a      	adds	r2, r3, #2
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	629a      	str	r2, [r3, #40]	; 0x28
 8008190:	e026      	b.n	80081e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008196:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008198:	2300      	movs	r3, #0
 800819a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081a4:	d007      	beq.n	80081b6 <UART_Receive_IT+0x74>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10a      	bne.n	80081c4 <UART_Receive_IT+0x82>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d106      	bne.n	80081c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c0:	701a      	strb	r2, [r3, #0]
 80081c2:	e008      	b.n	80081d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081da:	1c5a      	adds	r2, r3, #1
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	3b01      	subs	r3, #1
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	4619      	mov	r1, r3
 80081ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d15a      	bne.n	80082aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68da      	ldr	r2, [r3, #12]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 0220 	bic.w	r2, r2, #32
 8008202:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	68da      	ldr	r2, [r3, #12]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008212:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	695a      	ldr	r2, [r3, #20]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f022 0201 	bic.w	r2, r2, #1
 8008222:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2220      	movs	r2, #32
 8008228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008230:	2b01      	cmp	r3, #1
 8008232:	d135      	bne.n	80082a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	330c      	adds	r3, #12
 8008240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	e853 3f00 	ldrex	r3, [r3]
 8008248:	613b      	str	r3, [r7, #16]
   return(result);
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f023 0310 	bic.w	r3, r3, #16
 8008250:	627b      	str	r3, [r7, #36]	; 0x24
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	330c      	adds	r3, #12
 8008258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800825a:	623a      	str	r2, [r7, #32]
 800825c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825e:	69f9      	ldr	r1, [r7, #28]
 8008260:	6a3a      	ldr	r2, [r7, #32]
 8008262:	e841 2300 	strex	r3, r2, [r1]
 8008266:	61bb      	str	r3, [r7, #24]
   return(result);
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1e5      	bne.n	800823a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0310 	and.w	r3, r3, #16
 8008278:	2b10      	cmp	r3, #16
 800827a:	d10a      	bne.n	8008292 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800827c:	2300      	movs	r3, #0
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f7ff fe29 	bl	8007ef0 <HAL_UARTEx_RxEventCallback>
 800829e:	e002      	b.n	80082a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7f9 fc93 	bl	8001bcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082a6:	2300      	movs	r3, #0
 80082a8:	e002      	b.n	80082b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	e000      	b.n	80082b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80082ae:	2302      	movs	r3, #2
  }
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3730      	adds	r7, #48	; 0x30
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082b8:	b084      	sub	sp, #16
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b084      	sub	sp, #16
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	f107 001c 	add.w	r0, r7, #28
 80082c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d122      	bne.n	8008316 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80082e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80082f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d105      	bne.n	800830a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f9c0 	bl	8008690 <USB_CoreReset>
 8008310:	4603      	mov	r3, r0
 8008312:	73fb      	strb	r3, [r7, #15]
 8008314:	e01a      	b.n	800834c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f9b4 	bl	8008690 <USB_CoreReset>
 8008328:	4603      	mov	r3, r0
 800832a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800832c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800832e:	2b00      	cmp	r3, #0
 8008330:	d106      	bne.n	8008340 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008336:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	639a      	str	r2, [r3, #56]	; 0x38
 800833e:	e005      	b.n	800834c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008344:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800834c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834e:	2b01      	cmp	r3, #1
 8008350:	d10b      	bne.n	800836a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f043 0206 	orr.w	r2, r3, #6
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f043 0220 	orr.w	r2, r3, #32
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800836a:	7bfb      	ldrb	r3, [r7, #15]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008376:	b004      	add	sp, #16
 8008378:	4770      	bx	lr

0800837a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800837a:	b480      	push	{r7}
 800837c:	b083      	sub	sp, #12
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f043 0201 	orr.w	r2, r3, #1
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f023 0201 	bic.w	r2, r3, #1
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	460b      	mov	r3, r1
 80083c8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80083ca:	2300      	movs	r3, #0
 80083cc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80083da:	78fb      	ldrb	r3, [r7, #3]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d115      	bne.n	800840c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80083ec:	2001      	movs	r0, #1
 80083ee:	f7f9 ffbf 	bl	8002370 <HAL_Delay>
      ms++;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	3301      	adds	r3, #1
 80083f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f93a 	bl	8008672 <USB_GetMode>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b01      	cmp	r3, #1
 8008402:	d01e      	beq.n	8008442 <USB_SetCurrentMode+0x84>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2b31      	cmp	r3, #49	; 0x31
 8008408:	d9f0      	bls.n	80083ec <USB_SetCurrentMode+0x2e>
 800840a:	e01a      	b.n	8008442 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800840c:	78fb      	ldrb	r3, [r7, #3]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d115      	bne.n	800843e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800841e:	2001      	movs	r0, #1
 8008420:	f7f9 ffa6 	bl	8002370 <HAL_Delay>
      ms++;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	3301      	adds	r3, #1
 8008428:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f921 	bl	8008672 <USB_GetMode>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d005      	beq.n	8008442 <USB_SetCurrentMode+0x84>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2b31      	cmp	r3, #49	; 0x31
 800843a:	d9f0      	bls.n	800841e <USB_SetCurrentMode+0x60>
 800843c:	e001      	b.n	8008442 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e005      	b.n	800844e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2b32      	cmp	r3, #50	; 0x32
 8008446:	d101      	bne.n	800844c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e000      	b.n	800844e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008462:	2300      	movs	r3, #0
 8008464:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	3301      	adds	r3, #1
 800846a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	4a13      	ldr	r2, [pc, #76]	; (80084bc <USB_FlushTxFifo+0x64>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d901      	bls.n	8008478 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	e01b      	b.n	80084b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	2b00      	cmp	r3, #0
 800847e:	daf2      	bge.n	8008466 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008480:	2300      	movs	r3, #0
 8008482:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	019b      	lsls	r3, r3, #6
 8008488:	f043 0220 	orr.w	r2, r3, #32
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	3301      	adds	r3, #1
 8008494:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	4a08      	ldr	r2, [pc, #32]	; (80084bc <USB_FlushTxFifo+0x64>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d901      	bls.n	80084a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e006      	b.n	80084b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	f003 0320 	and.w	r3, r3, #32
 80084aa:	2b20      	cmp	r3, #32
 80084ac:	d0f0      	beq.n	8008490 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	00030d40 	.word	0x00030d40

080084c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	3301      	adds	r3, #1
 80084d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	4a11      	ldr	r2, [pc, #68]	; (800851c <USB_FlushRxFifo+0x5c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d901      	bls.n	80084de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e018      	b.n	8008510 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	daf2      	bge.n	80084cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80084e6:	2300      	movs	r3, #0
 80084e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2210      	movs	r2, #16
 80084ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3301      	adds	r3, #1
 80084f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	4a08      	ldr	r2, [pc, #32]	; (800851c <USB_FlushRxFifo+0x5c>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d901      	bls.n	8008502 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e006      	b.n	8008510 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	f003 0310 	and.w	r3, r3, #16
 800850a:	2b10      	cmp	r3, #16
 800850c:	d0f0      	beq.n	80084f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3714      	adds	r7, #20
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr
 800851c:	00030d40 	.word	0x00030d40

08008520 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008520:	b480      	push	{r7}
 8008522:	b089      	sub	sp, #36	; 0x24
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	4611      	mov	r1, r2
 800852c:	461a      	mov	r2, r3
 800852e:	460b      	mov	r3, r1
 8008530:	71fb      	strb	r3, [r7, #7]
 8008532:	4613      	mov	r3, r2
 8008534:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800853e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008542:	2b00      	cmp	r3, #0
 8008544:	d123      	bne.n	800858e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008546:	88bb      	ldrh	r3, [r7, #4]
 8008548:	3303      	adds	r3, #3
 800854a:	089b      	lsrs	r3, r3, #2
 800854c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800854e:	2300      	movs	r3, #0
 8008550:	61bb      	str	r3, [r7, #24]
 8008552:	e018      	b.n	8008586 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008554:	79fb      	ldrb	r3, [r7, #7]
 8008556:	031a      	lsls	r2, r3, #12
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	4413      	add	r3, r2
 800855c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008560:	461a      	mov	r2, r3
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	3301      	adds	r3, #1
 800856c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	3301      	adds	r3, #1
 8008572:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	3301      	adds	r3, #1
 8008578:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	3301      	adds	r3, #1
 800857e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	3301      	adds	r3, #1
 8008584:	61bb      	str	r3, [r7, #24]
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	429a      	cmp	r2, r3
 800858c:	d3e2      	bcc.n	8008554 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	3724      	adds	r7, #36	; 0x24
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800859c:	b480      	push	{r7}
 800859e:	b08b      	sub	sp, #44	; 0x2c
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	4613      	mov	r3, r2
 80085a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80085b2:	88fb      	ldrh	r3, [r7, #6]
 80085b4:	089b      	lsrs	r3, r3, #2
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80085ba:	88fb      	ldrh	r3, [r7, #6]
 80085bc:	f003 0303 	and.w	r3, r3, #3
 80085c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80085c2:	2300      	movs	r3, #0
 80085c4:	623b      	str	r3, [r7, #32]
 80085c6:	e014      	b.n	80085f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	3301      	adds	r3, #1
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	3301      	adds	r3, #1
 80085de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e2:	3301      	adds	r3, #1
 80085e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80085e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e8:	3301      	adds	r3, #1
 80085ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	3301      	adds	r3, #1
 80085f0:	623b      	str	r3, [r7, #32]
 80085f2:	6a3a      	ldr	r2, [r7, #32]
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d3e6      	bcc.n	80085c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80085fa:	8bfb      	ldrh	r3, [r7, #30]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d01e      	beq.n	800863e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008600:	2300      	movs	r3, #0
 8008602:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800860a:	461a      	mov	r2, r3
 800860c:	f107 0310 	add.w	r3, r7, #16
 8008610:	6812      	ldr	r2, [r2, #0]
 8008612:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	b2db      	uxtb	r3, r3
 800861a:	00db      	lsls	r3, r3, #3
 800861c:	fa22 f303 	lsr.w	r3, r2, r3
 8008620:	b2da      	uxtb	r2, r3
 8008622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008624:	701a      	strb	r2, [r3, #0]
      i++;
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	3301      	adds	r3, #1
 800862a:	623b      	str	r3, [r7, #32]
      pDest++;
 800862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862e:	3301      	adds	r3, #1
 8008630:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008632:	8bfb      	ldrh	r3, [r7, #30]
 8008634:	3b01      	subs	r3, #1
 8008636:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008638:	8bfb      	ldrh	r3, [r7, #30]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1ea      	bne.n	8008614 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800863e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008640:	4618      	mov	r0, r3
 8008642:	372c      	adds	r7, #44	; 0x2c
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	695b      	ldr	r3, [r3, #20]
 8008658:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	4013      	ands	r3, r2
 8008662:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008664:	68fb      	ldr	r3, [r7, #12]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008672:	b480      	push	{r7}
 8008674:	b083      	sub	sp, #12
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	695b      	ldr	r3, [r3, #20]
 800867e:	f003 0301 	and.w	r3, r3, #1
}
 8008682:	4618      	mov	r0, r3
 8008684:	370c      	adds	r7, #12
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
	...

08008690 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008698:	2300      	movs	r3, #0
 800869a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	3301      	adds	r3, #1
 80086a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	4a13      	ldr	r2, [pc, #76]	; (80086f4 <USB_CoreReset+0x64>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d901      	bls.n	80086ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e01b      	b.n	80086e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	daf2      	bge.n	800869c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80086b6:	2300      	movs	r3, #0
 80086b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	f043 0201 	orr.w	r2, r3, #1
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	3301      	adds	r3, #1
 80086ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	4a09      	ldr	r2, [pc, #36]	; (80086f4 <USB_CoreReset+0x64>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d901      	bls.n	80086d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e006      	b.n	80086e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	f003 0301 	and.w	r3, r3, #1
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d0f0      	beq.n	80086c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	00030d40 	.word	0x00030d40

080086f8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086f8:	b084      	sub	sp, #16
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b086      	sub	sp, #24
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008718:	461a      	mov	r2, r3
 800871a:	2300      	movs	r3, #0
 800871c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008722:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800874a:	2b00      	cmp	r3, #0
 800874c:	d018      	beq.n	8008780 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800874e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008750:	2b01      	cmp	r3, #1
 8008752:	d10a      	bne.n	800876a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008762:	f043 0304 	orr.w	r3, r3, #4
 8008766:	6013      	str	r3, [r2, #0]
 8008768:	e014      	b.n	8008794 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008778:	f023 0304 	bic.w	r3, r3, #4
 800877c:	6013      	str	r3, [r2, #0]
 800877e:	e009      	b.n	8008794 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800878e:	f023 0304 	bic.w	r3, r3, #4
 8008792:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008794:	2110      	movs	r1, #16
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f7ff fe5e 	bl	8008458 <USB_FlushTxFifo>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7ff fe8a 	bl	80084c0 <USB_FlushRxFifo>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d001      	beq.n	80087b6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80087b6:	2300      	movs	r3, #0
 80087b8:	613b      	str	r3, [r7, #16]
 80087ba:	e015      	b.n	80087e8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	4413      	add	r3, r2
 80087c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c8:	461a      	mov	r2, r3
 80087ca:	f04f 33ff 	mov.w	r3, #4294967295
 80087ce:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	015a      	lsls	r2, r3, #5
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	4413      	add	r3, r2
 80087d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087dc:	461a      	mov	r2, r3
 80087de:	2300      	movs	r3, #0
 80087e0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	3301      	adds	r3, #1
 80087e6:	613b      	str	r3, [r7, #16]
 80087e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d3e5      	bcc.n	80087bc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f04f 32ff 	mov.w	r2, #4294967295
 80087fc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00b      	beq.n	8008822 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008810:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a13      	ldr	r2, [pc, #76]	; (8008864 <USB_HostInit+0x16c>)
 8008816:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a13      	ldr	r2, [pc, #76]	; (8008868 <USB_HostInit+0x170>)
 800881c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008820:	e009      	b.n	8008836 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2280      	movs	r2, #128	; 0x80
 8008826:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a10      	ldr	r2, [pc, #64]	; (800886c <USB_HostInit+0x174>)
 800882c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a0f      	ldr	r2, [pc, #60]	; (8008870 <USB_HostInit+0x178>)
 8008832:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	2b00      	cmp	r3, #0
 800883a:	d105      	bne.n	8008848 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	f043 0210 	orr.w	r2, r3, #16
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	699a      	ldr	r2, [r3, #24]
 800884c:	4b09      	ldr	r3, [pc, #36]	; (8008874 <USB_HostInit+0x17c>)
 800884e:	4313      	orrs	r3, r2
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008854:	7dfb      	ldrb	r3, [r7, #23]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3718      	adds	r7, #24
 800885a:	46bd      	mov	sp, r7
 800885c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008860:	b004      	add	sp, #16
 8008862:	4770      	bx	lr
 8008864:	01000200 	.word	0x01000200
 8008868:	00e00300 	.word	0x00e00300
 800886c:	00600080 	.word	0x00600080
 8008870:	004000e0 	.word	0x004000e0
 8008874:	a3200008 	.word	0xa3200008

08008878 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	460b      	mov	r3, r1
 8008882:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008896:	f023 0303 	bic.w	r3, r3, #3
 800889a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	78fb      	ldrb	r3, [r7, #3]
 80088a6:	f003 0303 	and.w	r3, r3, #3
 80088aa:	68f9      	ldr	r1, [r7, #12]
 80088ac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80088b0:	4313      	orrs	r3, r2
 80088b2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80088b4:	78fb      	ldrb	r3, [r7, #3]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d107      	bne.n	80088ca <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088c0:	461a      	mov	r2, r3
 80088c2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80088c6:	6053      	str	r3, [r2, #4]
 80088c8:	e009      	b.n	80088de <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80088ca:	78fb      	ldrb	r3, [r7, #3]
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d106      	bne.n	80088de <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088d6:	461a      	mov	r2, r3
 80088d8:	f241 7370 	movw	r3, #6000	; 0x1770
 80088dc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3714      	adds	r7, #20
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80088f8:	2300      	movs	r3, #0
 80088fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800890c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800891a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800891c:	2064      	movs	r0, #100	; 0x64
 800891e:	f7f9 fd27 	bl	8002370 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800892a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800892e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008930:	200a      	movs	r0, #10
 8008932:	f7f9 fd1d 	bl	8002370 <HAL_Delay>

  return HAL_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	460b      	mov	r3, r1
 800894a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008950:	2300      	movs	r3, #0
 8008952:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008964:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800896c:	2b00      	cmp	r3, #0
 800896e:	d109      	bne.n	8008984 <USB_DriveVbus+0x44>
 8008970:	78fb      	ldrb	r3, [r7, #3]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d106      	bne.n	8008984 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800897e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008982:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800898a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800898e:	d109      	bne.n	80089a4 <USB_DriveVbus+0x64>
 8008990:	78fb      	ldrb	r3, [r7, #3]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d106      	bne.n	80089a4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800899e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089a2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80089b2:	b480      	push	{r7}
 80089b4:	b085      	sub	sp, #20
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80089be:	2300      	movs	r3, #0
 80089c0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	0c5b      	lsrs	r3, r3, #17
 80089d0:	f003 0303 	and.w	r3, r3, #3
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3714      	adds	r7, #20
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	b29b      	uxth	r3, r3
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
	...

08008a04 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b088      	sub	sp, #32
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	4608      	mov	r0, r1
 8008a0e:	4611      	mov	r1, r2
 8008a10:	461a      	mov	r2, r3
 8008a12:	4603      	mov	r3, r0
 8008a14:	70fb      	strb	r3, [r7, #3]
 8008a16:	460b      	mov	r3, r1
 8008a18:	70bb      	strb	r3, [r7, #2]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008a26:	78fb      	ldrb	r3, [r7, #3]
 8008a28:	015a      	lsls	r2, r3, #5
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a32:	461a      	mov	r2, r3
 8008a34:	f04f 33ff 	mov.w	r3, #4294967295
 8008a38:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008a3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a3e:	2b03      	cmp	r3, #3
 8008a40:	d87e      	bhi.n	8008b40 <USB_HC_Init+0x13c>
 8008a42:	a201      	add	r2, pc, #4	; (adr r2, 8008a48 <USB_HC_Init+0x44>)
 8008a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a48:	08008a59 	.word	0x08008a59
 8008a4c:	08008b03 	.word	0x08008b03
 8008a50:	08008a59 	.word	0x08008a59
 8008a54:	08008ac5 	.word	0x08008ac5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008a58:	78fb      	ldrb	r3, [r7, #3]
 8008a5a:	015a      	lsls	r2, r3, #5
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a64:	461a      	mov	r2, r3
 8008a66:	f240 439d 	movw	r3, #1181	; 0x49d
 8008a6a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008a6c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	da10      	bge.n	8008a96 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008a74:	78fb      	ldrb	r3, [r7, #3]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	78fa      	ldrb	r2, [r7, #3]
 8008a84:	0151      	lsls	r1, r2, #5
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	440a      	add	r2, r1
 8008a8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a92:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008a94:	e057      	b.n	8008b46 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d051      	beq.n	8008b46 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008aa2:	78fb      	ldrb	r3, [r7, #3]
 8008aa4:	015a      	lsls	r2, r3, #5
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	78fa      	ldrb	r2, [r7, #3]
 8008ab2:	0151      	lsls	r1, r2, #5
 8008ab4:	693a      	ldr	r2, [r7, #16]
 8008ab6:	440a      	add	r2, r1
 8008ab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008abc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008ac0:	60d3      	str	r3, [r2, #12]
      break;
 8008ac2:	e040      	b.n	8008b46 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ac4:	78fb      	ldrb	r3, [r7, #3]
 8008ac6:	015a      	lsls	r2, r3, #5
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	4413      	add	r3, r2
 8008acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	f240 639d 	movw	r3, #1693	; 0x69d
 8008ad6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008ad8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	da34      	bge.n	8008b4a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008ae0:	78fb      	ldrb	r3, [r7, #3]
 8008ae2:	015a      	lsls	r2, r3, #5
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	78fa      	ldrb	r2, [r7, #3]
 8008af0:	0151      	lsls	r1, r2, #5
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	440a      	add	r2, r1
 8008af6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008afe:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008b00:	e023      	b.n	8008b4a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008b02:	78fb      	ldrb	r3, [r7, #3]
 8008b04:	015a      	lsls	r2, r3, #5
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	4413      	add	r3, r2
 8008b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b0e:	461a      	mov	r2, r3
 8008b10:	f240 2325 	movw	r3, #549	; 0x225
 8008b14:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008b16:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	da17      	bge.n	8008b4e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008b1e:	78fb      	ldrb	r3, [r7, #3]
 8008b20:	015a      	lsls	r2, r3, #5
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	4413      	add	r3, r2
 8008b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	78fa      	ldrb	r2, [r7, #3]
 8008b2e:	0151      	lsls	r1, r2, #5
 8008b30:	693a      	ldr	r2, [r7, #16]
 8008b32:	440a      	add	r2, r1
 8008b34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b38:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008b3c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008b3e:	e006      	b.n	8008b4e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	77fb      	strb	r3, [r7, #31]
      break;
 8008b44:	e004      	b.n	8008b50 <USB_HC_Init+0x14c>
      break;
 8008b46:	bf00      	nop
 8008b48:	e002      	b.n	8008b50 <USB_HC_Init+0x14c>
      break;
 8008b4a:	bf00      	nop
 8008b4c:	e000      	b.n	8008b50 <USB_HC_Init+0x14c>
      break;
 8008b4e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008b50:	78fb      	ldrb	r3, [r7, #3]
 8008b52:	015a      	lsls	r2, r3, #5
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	4413      	add	r3, r2
 8008b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	78fa      	ldrb	r2, [r7, #3]
 8008b60:	0151      	lsls	r1, r2, #5
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	440a      	add	r2, r1
 8008b66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b6a:	f043 0302 	orr.w	r3, r3, #2
 8008b6e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b76:	699a      	ldr	r2, [r3, #24]
 8008b78:	78fb      	ldrb	r3, [r7, #3]
 8008b7a:	f003 030f 	and.w	r3, r3, #15
 8008b7e:	2101      	movs	r1, #1
 8008b80:	fa01 f303 	lsl.w	r3, r1, r3
 8008b84:	6939      	ldr	r1, [r7, #16]
 8008b86:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008b9a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	da03      	bge.n	8008baa <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ba6:	61bb      	str	r3, [r7, #24]
 8008ba8:	e001      	b.n	8008bae <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8008baa:	2300      	movs	r3, #0
 8008bac:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f7ff feff 	bl	80089b2 <USB_GetHostSpeed>
 8008bb4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008bb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d106      	bne.n	8008bcc <USB_HC_Init+0x1c8>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d003      	beq.n	8008bcc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008bc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008bc8:	617b      	str	r3, [r7, #20]
 8008bca:	e001      	b.n	8008bd0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008bd0:	787b      	ldrb	r3, [r7, #1]
 8008bd2:	059b      	lsls	r3, r3, #22
 8008bd4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008bd8:	78bb      	ldrb	r3, [r7, #2]
 8008bda:	02db      	lsls	r3, r3, #11
 8008bdc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008be0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008be2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008be6:	049b      	lsls	r3, r3, #18
 8008be8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008bec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008bee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008bf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008bf4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008bfa:	78fb      	ldrb	r3, [r7, #3]
 8008bfc:	0159      	lsls	r1, r3, #5
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	440b      	add	r3, r1
 8008c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c06:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c0c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008c0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c12:	2b03      	cmp	r3, #3
 8008c14:	d003      	beq.n	8008c1e <USB_HC_Init+0x21a>
 8008c16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d10f      	bne.n	8008c3e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008c1e:	78fb      	ldrb	r3, [r7, #3]
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	78fa      	ldrb	r2, [r7, #3]
 8008c2e:	0151      	lsls	r1, r2, #5
 8008c30:	693a      	ldr	r2, [r7, #16]
 8008c32:	440a      	add	r2, r1
 8008c34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c3c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008c3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3720      	adds	r7, #32
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b08c      	sub	sp, #48	; 0x30
 8008c4c:	af02      	add	r7, sp, #8
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	4613      	mov	r3, r2
 8008c54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	785b      	ldrb	r3, [r3, #1]
 8008c5e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c64:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d02d      	beq.n	8008cce <USB_HC_StartXfer+0x86>
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	791b      	ldrb	r3, [r3, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d129      	bne.n	8008cce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008c7a:	79fb      	ldrb	r3, [r7, #7]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d117      	bne.n	8008cb0 <USB_HC_StartXfer+0x68>
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	79db      	ldrb	r3, [r3, #7]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d003      	beq.n	8008c90 <USB_HC_StartXfer+0x48>
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	79db      	ldrb	r3, [r3, #7]
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d10f      	bne.n	8008cb0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	6a3b      	ldr	r3, [r7, #32]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	69fa      	ldr	r2, [r7, #28]
 8008ca0:	0151      	lsls	r1, r2, #5
 8008ca2:	6a3a      	ldr	r2, [r7, #32]
 8008ca4:	440a      	add	r2, r1
 8008ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cae:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008cb0:	79fb      	ldrb	r3, [r7, #7]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d10b      	bne.n	8008cce <USB_HC_StartXfer+0x86>
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	795b      	ldrb	r3, [r3, #5]
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d107      	bne.n	8008cce <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	785b      	ldrb	r3, [r3, #1]
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f000 fa0f 	bl	80090e8 <USB_DoPing>
      return HAL_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	e0f8      	b.n	8008ec0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d018      	beq.n	8008d08 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	695b      	ldr	r3, [r3, #20]
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	8912      	ldrh	r2, [r2, #8]
 8008cde:	4413      	add	r3, r2
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	8912      	ldrh	r2, [r2, #8]
 8008ce6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cea:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008cec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008cee:	8b7b      	ldrh	r3, [r7, #26]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d90b      	bls.n	8008d0c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008cf4:	8b7b      	ldrh	r3, [r7, #26]
 8008cf6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008cf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	8912      	ldrh	r2, [r2, #8]
 8008cfe:	fb03 f202 	mul.w	r2, r3, r2
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	611a      	str	r2, [r3, #16]
 8008d06:	e001      	b.n	8008d0c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	78db      	ldrb	r3, [r3, #3]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d007      	beq.n	8008d24 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008d14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	8912      	ldrh	r2, [r2, #8]
 8008d1a:	fb03 f202 	mul.w	r2, r3, r2
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	611a      	str	r2, [r3, #16]
 8008d22:	e003      	b.n	8008d2c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	695a      	ldr	r2, [r3, #20]
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d36:	04d9      	lsls	r1, r3, #19
 8008d38:	4b63      	ldr	r3, [pc, #396]	; (8008ec8 <USB_HC_StartXfer+0x280>)
 8008d3a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d3c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	7a9b      	ldrb	r3, [r3, #10]
 8008d42:	075b      	lsls	r3, r3, #29
 8008d44:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d48:	69f9      	ldr	r1, [r7, #28]
 8008d4a:	0148      	lsls	r0, r1, #5
 8008d4c:	6a39      	ldr	r1, [r7, #32]
 8008d4e:	4401      	add	r1, r0
 8008d50:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d54:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d56:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008d58:	79fb      	ldrb	r3, [r7, #7]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d009      	beq.n	8008d72 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	68d9      	ldr	r1, [r3, #12]
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	015a      	lsls	r2, r3, #5
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	4413      	add	r3, r2
 8008d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d6e:	460a      	mov	r2, r1
 8008d70:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008d72:	6a3b      	ldr	r3, [r7, #32]
 8008d74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	bf0c      	ite	eq
 8008d82:	2301      	moveq	r3, #1
 8008d84:	2300      	movne	r3, #0
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	015a      	lsls	r2, r3, #5
 8008d8e:	6a3b      	ldr	r3, [r7, #32]
 8008d90:	4413      	add	r3, r2
 8008d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	69fa      	ldr	r2, [r7, #28]
 8008d9a:	0151      	lsls	r1, r2, #5
 8008d9c:	6a3a      	ldr	r2, [r7, #32]
 8008d9e:	440a      	add	r2, r1
 8008da0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008da4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008da8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	015a      	lsls	r2, r3, #5
 8008dae:	6a3b      	ldr	r3, [r7, #32]
 8008db0:	4413      	add	r3, r2
 8008db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	7e7b      	ldrb	r3, [r7, #25]
 8008dba:	075b      	lsls	r3, r3, #29
 8008dbc:	69f9      	ldr	r1, [r7, #28]
 8008dbe:	0148      	lsls	r0, r1, #5
 8008dc0:	6a39      	ldr	r1, [r7, #32]
 8008dc2:	4401      	add	r1, r0
 8008dc4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	015a      	lsls	r2, r3, #5
 8008dd0:	6a3b      	ldr	r3, [r7, #32]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008de2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	78db      	ldrb	r3, [r3, #3]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d004      	beq.n	8008df6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008df2:	613b      	str	r3, [r7, #16]
 8008df4:	e003      	b.n	8008dfe <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008dfc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e04:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	6a3b      	ldr	r3, [r7, #32]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e12:	461a      	mov	r2, r3
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008e18:	79fb      	ldrb	r3, [r7, #7]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	e04e      	b.n	8008ec0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	78db      	ldrb	r3, [r3, #3]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d149      	bne.n	8008ebe <USB_HC_StartXfer+0x276>
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d045      	beq.n	8008ebe <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	79db      	ldrb	r3, [r3, #7]
 8008e36:	2b03      	cmp	r3, #3
 8008e38:	d830      	bhi.n	8008e9c <USB_HC_StartXfer+0x254>
 8008e3a:	a201      	add	r2, pc, #4	; (adr r2, 8008e40 <USB_HC_StartXfer+0x1f8>)
 8008e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e40:	08008e51 	.word	0x08008e51
 8008e44:	08008e75 	.word	0x08008e75
 8008e48:	08008e51 	.word	0x08008e51
 8008e4c:	08008e75 	.word	0x08008e75
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	695b      	ldr	r3, [r3, #20]
 8008e54:	3303      	adds	r3, #3
 8008e56:	089b      	lsrs	r3, r3, #2
 8008e58:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008e5a:	8afa      	ldrh	r2, [r7, #22]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d91c      	bls.n	8008ea0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	f043 0220 	orr.w	r2, r3, #32
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	619a      	str	r2, [r3, #24]
        }
        break;
 8008e72:	e015      	b.n	8008ea0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	3303      	adds	r3, #3
 8008e7a:	089b      	lsrs	r3, r3, #2
 8008e7c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008e7e:	8afa      	ldrh	r2, [r7, #22]
 8008e80:	6a3b      	ldr	r3, [r7, #32]
 8008e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d90a      	bls.n	8008ea4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	619a      	str	r2, [r3, #24]
        }
        break;
 8008e9a:	e003      	b.n	8008ea4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008e9c:	bf00      	nop
 8008e9e:	e002      	b.n	8008ea6 <USB_HC_StartXfer+0x25e>
        break;
 8008ea0:	bf00      	nop
 8008ea2:	e000      	b.n	8008ea6 <USB_HC_StartXfer+0x25e>
        break;
 8008ea4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	68d9      	ldr	r1, [r3, #12]
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	785a      	ldrb	r2, [r3, #1]
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	695b      	ldr	r3, [r3, #20]
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	9000      	str	r0, [sp, #0]
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f7ff fb31 	bl	8008520 <USB_WritePacket>
  }

  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3728      	adds	r7, #40	; 0x28
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	1ff80000 	.word	0x1ff80000

08008ecc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	b29b      	uxth	r3, r3
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3714      	adds	r7, #20
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b089      	sub	sp, #36	; 0x24
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008efe:	78fb      	ldrb	r3, [r7, #3]
 8008f00:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008f02:	2300      	movs	r3, #0
 8008f04:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	015a      	lsls	r2, r3, #5
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	0c9b      	lsrs	r3, r3, #18
 8008f16:	f003 0303 	and.w	r3, r3, #3
 8008f1a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	0fdb      	lsrs	r3, r3, #31
 8008f2c:	f003 0301 	and.w	r3, r3, #1
 8008f30:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	f003 0320 	and.w	r3, r3, #32
 8008f3a:	2b20      	cmp	r3, #32
 8008f3c:	d104      	bne.n	8008f48 <USB_HC_Halt+0x5a>
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d101      	bne.n	8008f48 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	e0c8      	b.n	80090da <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d002      	beq.n	8008f54 <USB_HC_Halt+0x66>
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d163      	bne.n	800901c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	015a      	lsls	r2, r3, #5
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	69ba      	ldr	r2, [r7, #24]
 8008f64:	0151      	lsls	r1, r2, #5
 8008f66:	69fa      	ldr	r2, [r7, #28]
 8008f68:	440a      	add	r2, r1
 8008f6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f72:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	f003 0320 	and.w	r3, r3, #32
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f040 80ab 	bne.w	80090d8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d133      	bne.n	8008ff6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	015a      	lsls	r2, r3, #5
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	4413      	add	r3, r2
 8008f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	69ba      	ldr	r2, [r7, #24]
 8008f9e:	0151      	lsls	r1, r2, #5
 8008fa0:	69fa      	ldr	r2, [r7, #28]
 8008fa2:	440a      	add	r2, r1
 8008fa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	015a      	lsls	r2, r3, #5
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	69ba      	ldr	r2, [r7, #24]
 8008fbe:	0151      	lsls	r1, r2, #5
 8008fc0:	69fa      	ldr	r2, [r7, #28]
 8008fc2:	440a      	add	r2, r1
 8008fc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008fcc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fda:	d81d      	bhi.n	8009018 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ff2:	d0ec      	beq.n	8008fce <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ff4:	e070      	b.n	80090d8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	69ba      	ldr	r2, [r7, #24]
 8009006:	0151      	lsls	r1, r2, #5
 8009008:	69fa      	ldr	r2, [r7, #28]
 800900a:	440a      	add	r2, r1
 800900c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009010:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009014:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009016:	e05f      	b.n	80090d8 <USB_HC_Halt+0x1ea>
            break;
 8009018:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800901a:	e05d      	b.n	80090d8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	015a      	lsls	r2, r3, #5
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	4413      	add	r3, r2
 8009024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	69ba      	ldr	r2, [r7, #24]
 800902c:	0151      	lsls	r1, r2, #5
 800902e:	69fa      	ldr	r2, [r7, #28]
 8009030:	440a      	add	r2, r1
 8009032:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009036:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800903a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d133      	bne.n	80090b4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	015a      	lsls	r2, r3, #5
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	4413      	add	r3, r2
 8009054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	69ba      	ldr	r2, [r7, #24]
 800905c:	0151      	lsls	r1, r2, #5
 800905e:	69fa      	ldr	r2, [r7, #28]
 8009060:	440a      	add	r2, r1
 8009062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009066:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800906a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	015a      	lsls	r2, r3, #5
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	4413      	add	r3, r2
 8009074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	69ba      	ldr	r2, [r7, #24]
 800907c:	0151      	lsls	r1, r2, #5
 800907e:	69fa      	ldr	r2, [r7, #28]
 8009080:	440a      	add	r2, r1
 8009082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009086:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800908a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	3301      	adds	r3, #1
 8009090:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009098:	d81d      	bhi.n	80090d6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	015a      	lsls	r2, r3, #5
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	4413      	add	r3, r2
 80090a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090b0:	d0ec      	beq.n	800908c <USB_HC_Halt+0x19e>
 80090b2:	e011      	b.n	80090d8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	0151      	lsls	r1, r2, #5
 80090c6:	69fa      	ldr	r2, [r7, #28]
 80090c8:	440a      	add	r2, r1
 80090ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80090d2:	6013      	str	r3, [r2, #0]
 80090d4:	e000      	b.n	80090d8 <USB_HC_Halt+0x1ea>
          break;
 80090d6:	bf00      	nop
    }
  }

  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3724      	adds	r7, #36	; 0x24
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
	...

080090e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b087      	sub	sp, #28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80090f8:	78fb      	ldrb	r3, [r7, #3]
 80090fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80090fc:	2301      	movs	r3, #1
 80090fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	04da      	lsls	r2, r3, #19
 8009104:	4b15      	ldr	r3, [pc, #84]	; (800915c <USB_DoPing+0x74>)
 8009106:	4013      	ands	r3, r2
 8009108:	693a      	ldr	r2, [r7, #16]
 800910a:	0151      	lsls	r1, r2, #5
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	440a      	add	r2, r1
 8009110:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009118:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	015a      	lsls	r2, r3, #5
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	4413      	add	r3, r2
 8009122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009130:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009138:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	015a      	lsls	r2, r3, #5
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	4413      	add	r3, r2
 8009142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009146:	461a      	mov	r2, r3
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	371c      	adds	r7, #28
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	1ff80000 	.word	0x1ff80000

08009160 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b088      	sub	sp, #32
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009170:	2300      	movs	r3, #0
 8009172:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f7ff f911 	bl	800839c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800917a:	2110      	movs	r1, #16
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f7ff f96b 	bl	8008458 <USB_FlushTxFifo>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d001      	beq.n	800918c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7ff f997 	bl	80084c0 <USB_FlushRxFifo>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800919c:	2300      	movs	r3, #0
 800919e:	61bb      	str	r3, [r7, #24]
 80091a0:	e01f      	b.n	80091e2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	015a      	lsls	r2, r3, #5
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	4413      	add	r3, r2
 80091aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80091c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091d6:	461a      	mov	r2, r3
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	3301      	adds	r3, #1
 80091e0:	61bb      	str	r3, [r7, #24]
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	2b0f      	cmp	r3, #15
 80091e6:	d9dc      	bls.n	80091a2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80091e8:	2300      	movs	r3, #0
 80091ea:	61bb      	str	r3, [r7, #24]
 80091ec:	e034      	b.n	8009258 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009204:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800920c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009214:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	015a      	lsls	r2, r3, #5
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	4413      	add	r3, r2
 800921e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009222:	461a      	mov	r2, r3
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	3301      	adds	r3, #1
 800922c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009234:	d80c      	bhi.n	8009250 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	015a      	lsls	r2, r3, #5
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	4413      	add	r3, r2
 800923e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009248:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800924c:	d0ec      	beq.n	8009228 <USB_StopHost+0xc8>
 800924e:	e000      	b.n	8009252 <USB_StopHost+0xf2>
        break;
 8009250:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	3301      	adds	r3, #1
 8009256:	61bb      	str	r3, [r7, #24]
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	2b0f      	cmp	r3, #15
 800925c:	d9c7      	bls.n	80091ee <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009264:	461a      	mov	r2, r3
 8009266:	f04f 33ff 	mov.w	r3, #4294967295
 800926a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f04f 32ff 	mov.w	r2, #4294967295
 8009272:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f7ff f880 	bl	800837a <USB_EnableGlobalInt>

  return ret;
 800927a:	7ffb      	ldrb	r3, [r7, #31]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3720      	adds	r7, #32
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8009288:	4904      	ldr	r1, [pc, #16]	; (800929c <MX_FATFS_Init+0x18>)
 800928a:	4805      	ldr	r0, [pc, #20]	; (80092a0 <MX_FATFS_Init+0x1c>)
 800928c:	f006 fb36 	bl	800f8fc <FATFS_LinkDriver>
 8009290:	4603      	mov	r3, r0
 8009292:	461a      	mov	r2, r3
 8009294:	4b03      	ldr	r3, [pc, #12]	; (80092a4 <MX_FATFS_Init+0x20>)
 8009296:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009298:	bf00      	nop
 800929a:	bd80      	pop	{r7, pc}
 800929c:	20001a10 	.word	0x20001a10
 80092a0:	0801050c 	.word	0x0801050c
 80092a4:	20001a0c 	.word	0x20001a0c

080092a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80092a8:	b480      	push	{r7}
 80092aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80092ac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	4603      	mov	r3, r0
 80092c0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80092de:	79fb      	ldrb	r3, [r7, #7]
 80092e0:	4619      	mov	r1, r3
 80092e2:	4808      	ldr	r0, [pc, #32]	; (8009304 <USBH_status+0x34>)
 80092e4:	f000 fe32 	bl	8009f4c <USBH_MSC_UnitIsReady>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d002      	beq.n	80092f4 <USBH_status+0x24>
  {
    res = RES_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	73fb      	strb	r3, [r7, #15]
 80092f2:	e001      	b.n	80092f8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	20001e7c 	.word	0x20001e7c

08009308 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b094      	sub	sp, #80	; 0x50
 800930c:	af02      	add	r7, sp, #8
 800930e:	60b9      	str	r1, [r7, #8]
 8009310:	607a      	str	r2, [r7, #4]
 8009312:	603b      	str	r3, [r7, #0]
 8009314:	4603      	mov	r3, r0
 8009316:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800931e:	7bf9      	ldrb	r1, [r7, #15]
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	4813      	ldr	r0, [pc, #76]	; (8009378 <USBH_read+0x70>)
 800932a:	f000 fe59 	bl	8009fe0 <USBH_MSC_Read>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d103      	bne.n	800933c <USBH_read+0x34>
  {
    res = RES_OK;
 8009334:	2300      	movs	r3, #0
 8009336:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800933a:	e017      	b.n	800936c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800933c:	f107 0210 	add.w	r2, r7, #16
 8009340:	7bfb      	ldrb	r3, [r7, #15]
 8009342:	4619      	mov	r1, r3
 8009344:	480c      	ldr	r0, [pc, #48]	; (8009378 <USBH_read+0x70>)
 8009346:	f000 fe27 	bl	8009f98 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800934a:	7f7b      	ldrb	r3, [r7, #29]
 800934c:	2b3a      	cmp	r3, #58	; 0x3a
 800934e:	d005      	beq.n	800935c <USBH_read+0x54>
 8009350:	2b3a      	cmp	r3, #58	; 0x3a
 8009352:	dc07      	bgt.n	8009364 <USBH_read+0x5c>
 8009354:	2b04      	cmp	r3, #4
 8009356:	d001      	beq.n	800935c <USBH_read+0x54>
 8009358:	2b28      	cmp	r3, #40	; 0x28
 800935a:	d103      	bne.n	8009364 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800935c:	2303      	movs	r3, #3
 800935e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009362:	e003      	b.n	800936c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800936a:	bf00      	nop
    }
  }

  return res;
 800936c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009370:	4618      	mov	r0, r3
 8009372:	3748      	adds	r7, #72	; 0x48
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	20001e7c 	.word	0x20001e7c

0800937c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b094      	sub	sp, #80	; 0x50
 8009380:	af02      	add	r7, sp, #8
 8009382:	60b9      	str	r1, [r7, #8]
 8009384:	607a      	str	r2, [r7, #4]
 8009386:	603b      	str	r3, [r7, #0]
 8009388:	4603      	mov	r3, r0
 800938a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009392:	7bf9      	ldrb	r1, [r7, #15]
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	4817      	ldr	r0, [pc, #92]	; (80093fc <USBH_write+0x80>)
 800939e:	f000 fe88 	bl	800a0b2 <USBH_MSC_Write>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d103      	bne.n	80093b0 <USBH_write+0x34>
  {
    res = RES_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80093ae:	e01f      	b.n	80093f0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80093b0:	f107 0210 	add.w	r2, r7, #16
 80093b4:	7bfb      	ldrb	r3, [r7, #15]
 80093b6:	4619      	mov	r1, r3
 80093b8:	4810      	ldr	r0, [pc, #64]	; (80093fc <USBH_write+0x80>)
 80093ba:	f000 fded 	bl	8009f98 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80093be:	7f7b      	ldrb	r3, [r7, #29]
 80093c0:	2b3a      	cmp	r3, #58	; 0x3a
 80093c2:	d00d      	beq.n	80093e0 <USBH_write+0x64>
 80093c4:	2b3a      	cmp	r3, #58	; 0x3a
 80093c6:	dc0f      	bgt.n	80093e8 <USBH_write+0x6c>
 80093c8:	2b28      	cmp	r3, #40	; 0x28
 80093ca:	d009      	beq.n	80093e0 <USBH_write+0x64>
 80093cc:	2b28      	cmp	r3, #40	; 0x28
 80093ce:	dc0b      	bgt.n	80093e8 <USBH_write+0x6c>
 80093d0:	2b04      	cmp	r3, #4
 80093d2:	d005      	beq.n	80093e0 <USBH_write+0x64>
 80093d4:	2b27      	cmp	r3, #39	; 0x27
 80093d6:	d107      	bne.n	80093e8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80093d8:	2302      	movs	r3, #2
 80093da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80093de:	e007      	b.n	80093f0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80093e0:	2303      	movs	r3, #3
 80093e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80093e6:	e003      	b.n	80093f0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80093ee:	bf00      	nop
    }
  }

  return res;
 80093f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3748      	adds	r7, #72	; 0x48
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	20001e7c 	.word	0x20001e7c

08009400 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b090      	sub	sp, #64	; 0x40
 8009404:	af00      	add	r7, sp, #0
 8009406:	4603      	mov	r3, r0
 8009408:	603a      	str	r2, [r7, #0]
 800940a:	71fb      	strb	r3, [r7, #7]
 800940c:	460b      	mov	r3, r1
 800940e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009416:	79bb      	ldrb	r3, [r7, #6]
 8009418:	2b03      	cmp	r3, #3
 800941a:	d852      	bhi.n	80094c2 <USBH_ioctl+0xc2>
 800941c:	a201      	add	r2, pc, #4	; (adr r2, 8009424 <USBH_ioctl+0x24>)
 800941e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009422:	bf00      	nop
 8009424:	08009435 	.word	0x08009435
 8009428:	0800943d 	.word	0x0800943d
 800942c:	08009467 	.word	0x08009467
 8009430:	08009493 	.word	0x08009493
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800943a:	e045      	b.n	80094c8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800943c:	f107 0208 	add.w	r2, r7, #8
 8009440:	79fb      	ldrb	r3, [r7, #7]
 8009442:	4619      	mov	r1, r3
 8009444:	4823      	ldr	r0, [pc, #140]	; (80094d4 <USBH_ioctl+0xd4>)
 8009446:	f000 fda7 	bl	8009f98 <USBH_MSC_GetLUNInfo>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d106      	bne.n	800945e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009456:	2300      	movs	r3, #0
 8009458:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800945c:	e034      	b.n	80094c8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009464:	e030      	b.n	80094c8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009466:	f107 0208 	add.w	r2, r7, #8
 800946a:	79fb      	ldrb	r3, [r7, #7]
 800946c:	4619      	mov	r1, r3
 800946e:	4819      	ldr	r0, [pc, #100]	; (80094d4 <USBH_ioctl+0xd4>)
 8009470:	f000 fd92 	bl	8009f98 <USBH_MSC_GetLUNInfo>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d107      	bne.n	800948a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800947a:	8a3b      	ldrh	r3, [r7, #16]
 800947c:	461a      	mov	r2, r3
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009488:	e01e      	b.n	80094c8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009490:	e01a      	b.n	80094c8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009492:	f107 0208 	add.w	r2, r7, #8
 8009496:	79fb      	ldrb	r3, [r7, #7]
 8009498:	4619      	mov	r1, r3
 800949a:	480e      	ldr	r0, [pc, #56]	; (80094d4 <USBH_ioctl+0xd4>)
 800949c:	f000 fd7c 	bl	8009f98 <USBH_MSC_GetLUNInfo>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d109      	bne.n	80094ba <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80094a6:	8a3b      	ldrh	r3, [r7, #16]
 80094a8:	0a5b      	lsrs	r3, r3, #9
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	461a      	mov	r2, r3
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80094b8:	e006      	b.n	80094c8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80094c0:	e002      	b.n	80094c8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80094c2:	2304      	movs	r3, #4
 80094c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80094c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3740      	adds	r7, #64	; 0x40
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	20001e7c 	.word	0x20001e7c

080094d8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80094d8:	b590      	push	{r4, r7, lr}
 80094da:	b089      	sub	sp, #36	; 0x24
 80094dc:	af04      	add	r7, sp, #16
 80094de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094e6:	7919      	ldrb	r1, [r3, #4]
 80094e8:	2350      	movs	r3, #80	; 0x50
 80094ea:	2206      	movs	r2, #6
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f001 fc6b 	bl	800adc8 <USBH_FindInterface>
 80094f2:	4603      	mov	r3, r0
 80094f4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80094f6:	7bfb      	ldrb	r3, [r7, #15]
 80094f8:	2bff      	cmp	r3, #255	; 0xff
 80094fa:	d002      	beq.n	8009502 <USBH_MSC_InterfaceInit+0x2a>
 80094fc:	7bfb      	ldrb	r3, [r7, #15]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d901      	bls.n	8009506 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009502:	2302      	movs	r3, #2
 8009504:	e106      	b.n	8009714 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8009506:	7bfb      	ldrb	r3, [r7, #15]
 8009508:	4619      	mov	r1, r3
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f001 fc40 	bl	800ad90 <USBH_SelectInterface>
 8009510:	4603      	mov	r3, r0
 8009512:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009514:	7bbb      	ldrb	r3, [r7, #14]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800951a:	2302      	movs	r3, #2
 800951c:	e0fa      	b.n	8009714 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009524:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009528:	f006 fdf6 	bl	8010118 <malloc>
 800952c:	4603      	mov	r3, r0
 800952e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009536:	69db      	ldr	r3, [r3, #28]
 8009538:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d101      	bne.n	8009544 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8009540:	2302      	movs	r3, #2
 8009542:	e0e7      	b.n	8009714 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009544:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009548:	2100      	movs	r1, #0
 800954a:	68b8      	ldr	r0, [r7, #8]
 800954c:	f006 fea0 	bl	8010290 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009550:	7bfb      	ldrb	r3, [r7, #15]
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	211a      	movs	r1, #26
 8009556:	fb01 f303 	mul.w	r3, r1, r3
 800955a:	4413      	add	r3, r2
 800955c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	b25b      	sxtb	r3, r3
 8009564:	2b00      	cmp	r3, #0
 8009566:	da16      	bge.n	8009596 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009568:	7bfb      	ldrb	r3, [r7, #15]
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	211a      	movs	r1, #26
 800956e:	fb01 f303 	mul.w	r3, r1, r3
 8009572:	4413      	add	r3, r2
 8009574:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009578:	781a      	ldrb	r2, [r3, #0]
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800957e:	7bfb      	ldrb	r3, [r7, #15]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	211a      	movs	r1, #26
 8009584:	fb01 f303 	mul.w	r3, r1, r3
 8009588:	4413      	add	r3, r2
 800958a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800958e:	881a      	ldrh	r2, [r3, #0]
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	815a      	strh	r2, [r3, #10]
 8009594:	e015      	b.n	80095c2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009596:	7bfb      	ldrb	r3, [r7, #15]
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	211a      	movs	r1, #26
 800959c:	fb01 f303 	mul.w	r3, r1, r3
 80095a0:	4413      	add	r3, r2
 80095a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80095a6:	781a      	ldrb	r2, [r3, #0]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	211a      	movs	r1, #26
 80095b2:	fb01 f303 	mul.w	r3, r1, r3
 80095b6:	4413      	add	r3, r2
 80095b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80095bc:	881a      	ldrh	r2, [r3, #0]
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80095c2:	7bfb      	ldrb	r3, [r7, #15]
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	211a      	movs	r1, #26
 80095c8:	fb01 f303 	mul.w	r3, r1, r3
 80095cc:	4413      	add	r3, r2
 80095ce:	f203 3356 	addw	r3, r3, #854	; 0x356
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	b25b      	sxtb	r3, r3
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	da16      	bge.n	8009608 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80095da:	7bfb      	ldrb	r3, [r7, #15]
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	211a      	movs	r1, #26
 80095e0:	fb01 f303 	mul.w	r3, r1, r3
 80095e4:	4413      	add	r3, r2
 80095e6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80095ea:	781a      	ldrb	r2, [r3, #0]
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80095f0:	7bfb      	ldrb	r3, [r7, #15]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	211a      	movs	r1, #26
 80095f6:	fb01 f303 	mul.w	r3, r1, r3
 80095fa:	4413      	add	r3, r2
 80095fc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009600:	881a      	ldrh	r2, [r3, #0]
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	815a      	strh	r2, [r3, #10]
 8009606:	e015      	b.n	8009634 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009608:	7bfb      	ldrb	r3, [r7, #15]
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	211a      	movs	r1, #26
 800960e:	fb01 f303 	mul.w	r3, r1, r3
 8009612:	4413      	add	r3, r2
 8009614:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009618:	781a      	ldrb	r2, [r3, #0]
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800961e:	7bfb      	ldrb	r3, [r7, #15]
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	211a      	movs	r1, #26
 8009624:	fb01 f303 	mul.w	r3, r1, r3
 8009628:	4413      	add	r3, r2
 800962a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800962e:	881a      	ldrh	r2, [r3, #0]
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2200      	movs	r2, #0
 8009638:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	2200      	movs	r2, #0
 800963e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	2200      	movs	r2, #0
 8009644:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	799b      	ldrb	r3, [r3, #6]
 800964a:	4619      	mov	r1, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f002 fed8 	bl	800c402 <USBH_AllocPipe>
 8009652:	4603      	mov	r3, r0
 8009654:	461a      	mov	r2, r3
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	79db      	ldrb	r3, [r3, #7]
 800965e:	4619      	mov	r1, r3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f002 fece 	bl	800c402 <USBH_AllocPipe>
 8009666:	4603      	mov	r3, r0
 8009668:	461a      	mov	r2, r3
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fdc4 	bl	800a1fc <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	799b      	ldrb	r3, [r3, #6]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d01e      	beq.n	80096ba <USBH_MSC_InterfaceInit+0x1e2>
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	891b      	ldrh	r3, [r3, #8]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d01a      	beq.n	80096ba <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	7959      	ldrb	r1, [r3, #5]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	7998      	ldrb	r0, [r3, #6]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	8912      	ldrh	r2, [r2, #8]
 800969c:	9202      	str	r2, [sp, #8]
 800969e:	2202      	movs	r2, #2
 80096a0:	9201      	str	r2, [sp, #4]
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	4623      	mov	r3, r4
 80096a6:	4602      	mov	r2, r0
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f002 fe7b 	bl	800c3a4 <USBH_OpenPipe>
 80096ae:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	79db      	ldrb	r3, [r3, #7]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d02c      	beq.n	8009712 <USBH_MSC_InterfaceInit+0x23a>
 80096b8:	e001      	b.n	80096be <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 80096ba:	2303      	movs	r3, #3
 80096bc:	e02a      	b.n	8009714 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	895b      	ldrh	r3, [r3, #10]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d025      	beq.n	8009712 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	7919      	ldrb	r1, [r3, #4]
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	79d8      	ldrb	r0, [r3, #7]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	8952      	ldrh	r2, [r2, #10]
 80096de:	9202      	str	r2, [sp, #8]
 80096e0:	2202      	movs	r2, #2
 80096e2:	9201      	str	r2, [sp, #4]
 80096e4:	9300      	str	r3, [sp, #0]
 80096e6:	4623      	mov	r3, r4
 80096e8:	4602      	mov	r2, r0
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f002 fe5a 	bl	800c3a4 <USBH_OpenPipe>
 80096f0:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	791b      	ldrb	r3, [r3, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	4619      	mov	r1, r3
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f006 fc58 	bl	800ffb0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	795b      	ldrb	r3, [r3, #5]
 8009704:	2200      	movs	r2, #0
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f006 fc51 	bl	800ffb0 <USBH_LL_SetToggle>

  return USBH_OK;
 800970e:	2300      	movs	r3, #0
 8009710:	e000      	b.n	8009714 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8009712:	2303      	movs	r3, #3
}
 8009714:	4618      	mov	r0, r3
 8009716:	3714      	adds	r7, #20
 8009718:	46bd      	mov	sp, r7
 800971a:	bd90      	pop	{r4, r7, pc}

0800971c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800972a:	69db      	ldr	r3, [r3, #28]
 800972c:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	795b      	ldrb	r3, [r3, #5]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00e      	beq.n	8009754 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	795b      	ldrb	r3, [r3, #5]
 800973a:	4619      	mov	r1, r3
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f002 fe50 	bl	800c3e2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	795b      	ldrb	r3, [r3, #5]
 8009746:	4619      	mov	r1, r3
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f002 fe7b 	bl	800c444 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2200      	movs	r2, #0
 8009752:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	791b      	ldrb	r3, [r3, #4]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00e      	beq.n	800977a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	791b      	ldrb	r3, [r3, #4]
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f002 fe3d 	bl	800c3e2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	791b      	ldrb	r3, [r3, #4]
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f002 fe68 	bl	800c444 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009780:	69db      	ldr	r3, [r3, #28]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00b      	beq.n	800979e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800978c:	69db      	ldr	r3, [r3, #28]
 800978e:	4618      	mov	r0, r3
 8009790:	f006 fcca 	bl	8010128 <free>
    phost->pActiveClass->pData = 0U;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800979a:	2200      	movs	r2, #0
 800979c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097b6:	69db      	ldr	r3, [r3, #28]
 80097b8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80097ba:	2301      	movs	r3, #1
 80097bc:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	7b9b      	ldrb	r3, [r3, #14]
 80097c2:	2b03      	cmp	r3, #3
 80097c4:	d041      	beq.n	800984a <USBH_MSC_ClassRequest+0xa2>
 80097c6:	2b03      	cmp	r3, #3
 80097c8:	dc4b      	bgt.n	8009862 <USBH_MSC_ClassRequest+0xba>
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <USBH_MSC_ClassRequest+0x2a>
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d147      	bne.n	8009862 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	4619      	mov	r1, r3
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fcf1 	bl	800a1be <USBH_MSC_BOT_REQ_GetMaxLUN>
 80097dc:	4603      	mov	r3, r0
 80097de:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80097e0:	7bfb      	ldrb	r3, [r7, #15]
 80097e2:	2b03      	cmp	r3, #3
 80097e4:	d104      	bne.n	80097f0 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	2200      	movs	r2, #0
 80097ea:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d137      	bne.n	8009866 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d804      	bhi.n	8009808 <USBH_MSC_ClassRequest+0x60>
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	3301      	adds	r3, #1
 8009804:	b2da      	uxtb	r2, r3
 8009806:	e000      	b.n	800980a <USBH_MSC_ClassRequest+0x62>
 8009808:	2202      	movs	r2, #2
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800980e:	2300      	movs	r3, #0
 8009810:	73bb      	strb	r3, [r7, #14]
 8009812:	e014      	b.n	800983e <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009814:	7bbb      	ldrb	r3, [r7, #14]
 8009816:	68ba      	ldr	r2, [r7, #8]
 8009818:	2134      	movs	r1, #52	; 0x34
 800981a:	fb01 f303 	mul.w	r3, r1, r3
 800981e:	4413      	add	r3, r2
 8009820:	3392      	adds	r3, #146	; 0x92
 8009822:	2202      	movs	r2, #2
 8009824:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009826:	7bbb      	ldrb	r3, [r7, #14]
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	2134      	movs	r1, #52	; 0x34
 800982c:	fb01 f303 	mul.w	r3, r1, r3
 8009830:	4413      	add	r3, r2
 8009832:	33c1      	adds	r3, #193	; 0xc1
 8009834:	2200      	movs	r2, #0
 8009836:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009838:	7bbb      	ldrb	r3, [r7, #14]
 800983a:	3301      	adds	r3, #1
 800983c:	73bb      	strb	r3, [r7, #14]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	7bba      	ldrb	r2, [r7, #14]
 8009844:	429a      	cmp	r2, r3
 8009846:	d3e5      	bcc.n	8009814 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8009848:	e00d      	b.n	8009866 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800984a:	2100      	movs	r1, #0
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f002 f888 	bl	800b962 <USBH_ClrFeature>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d108      	bne.n	800986a <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	7bda      	ldrb	r2, [r3, #15]
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	739a      	strb	r2, [r3, #14]
      }
      break;
 8009860:	e003      	b.n	800986a <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8009862:	bf00      	nop
 8009864:	e002      	b.n	800986c <USBH_MSC_ClassRequest+0xc4>
      break;
 8009866:	bf00      	nop
 8009868:	e000      	b.n	800986c <USBH_MSC_ClassRequest+0xc4>
      break;
 800986a:	bf00      	nop
  }

  return status;
 800986c:	7bfb      	ldrb	r3, [r7, #15]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
	...

08009878 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b086      	sub	sp, #24
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009886:	69db      	ldr	r3, [r3, #28]
 8009888:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800988a:	2301      	movs	r3, #1
 800988c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800988e:	2301      	movs	r3, #1
 8009890:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009892:	2301      	movs	r3, #1
 8009894:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	7b1b      	ldrb	r3, [r3, #12]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d003      	beq.n	80098a6 <USBH_MSC_Process+0x2e>
 800989e:	2b01      	cmp	r3, #1
 80098a0:	f000 8271 	beq.w	8009d86 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80098a4:	e272      	b.n	8009d8c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	429a      	cmp	r2, r3
 80098b4:	f080 824f 	bcs.w	8009d56 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098be:	4619      	mov	r1, r3
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	2334      	movs	r3, #52	; 0x34
 80098c4:	fb01 f303 	mul.w	r3, r1, r3
 80098c8:	4413      	add	r3, r2
 80098ca:	3391      	adds	r3, #145	; 0x91
 80098cc:	2201      	movs	r2, #1
 80098ce:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098d6:	4619      	mov	r1, r3
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	2334      	movs	r3, #52	; 0x34
 80098dc:	fb01 f303 	mul.w	r3, r1, r3
 80098e0:	4413      	add	r3, r2
 80098e2:	3390      	adds	r3, #144	; 0x90
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	2b08      	cmp	r3, #8
 80098e8:	f200 8243 	bhi.w	8009d72 <USBH_MSC_Process+0x4fa>
 80098ec:	a201      	add	r2, pc, #4	; (adr r2, 80098f4 <USBH_MSC_Process+0x7c>)
 80098ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f2:	bf00      	nop
 80098f4:	08009919 	.word	0x08009919
 80098f8:	08009d73 	.word	0x08009d73
 80098fc:	080099e1 	.word	0x080099e1
 8009900:	08009b65 	.word	0x08009b65
 8009904:	0800993f 	.word	0x0800993f
 8009908:	08009c31 	.word	0x08009c31
 800990c:	08009d73 	.word	0x08009d73
 8009910:	08009d73 	.word	0x08009d73
 8009914:	08009d45 	.word	0x08009d45
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800991e:	4619      	mov	r1, r3
 8009920:	693a      	ldr	r2, [r7, #16]
 8009922:	2334      	movs	r3, #52	; 0x34
 8009924:	fb01 f303 	mul.w	r3, r1, r3
 8009928:	4413      	add	r3, r2
 800992a:	3390      	adds	r3, #144	; 0x90
 800992c:	2204      	movs	r2, #4
 800992e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800993c:	e222      	b.n	8009d84 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009944:	b2d9      	uxtb	r1, r3
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800994c:	461a      	mov	r2, r3
 800994e:	2334      	movs	r3, #52	; 0x34
 8009950:	fb02 f303 	mul.w	r3, r2, r3
 8009954:	3398      	adds	r3, #152	; 0x98
 8009956:	693a      	ldr	r2, [r7, #16]
 8009958:	4413      	add	r3, r2
 800995a:	3307      	adds	r3, #7
 800995c:	461a      	mov	r2, r3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 ff6a 	bl	800a838 <USBH_MSC_SCSI_Inquiry>
 8009964:	4603      	mov	r3, r0
 8009966:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009968:	7bfb      	ldrb	r3, [r7, #15]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10b      	bne.n	8009986 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009974:	4619      	mov	r1, r3
 8009976:	693a      	ldr	r2, [r7, #16]
 8009978:	2334      	movs	r3, #52	; 0x34
 800997a:	fb01 f303 	mul.w	r3, r1, r3
 800997e:	4413      	add	r3, r2
 8009980:	3390      	adds	r3, #144	; 0x90
 8009982:	2202      	movs	r2, #2
 8009984:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009986:	7bfb      	ldrb	r3, [r7, #15]
 8009988:	2b02      	cmp	r3, #2
 800998a:	d10c      	bne.n	80099a6 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009992:	4619      	mov	r1, r3
 8009994:	693a      	ldr	r2, [r7, #16]
 8009996:	2334      	movs	r3, #52	; 0x34
 8009998:	fb01 f303 	mul.w	r3, r1, r3
 800999c:	4413      	add	r3, r2
 800999e:	3390      	adds	r3, #144	; 0x90
 80099a0:	2205      	movs	r2, #5
 80099a2:	701a      	strb	r2, [r3, #0]
            break;
 80099a4:	e1e7      	b.n	8009d76 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80099a6:	7bfb      	ldrb	r3, [r7, #15]
 80099a8:	2b04      	cmp	r3, #4
 80099aa:	f040 81e4 	bne.w	8009d76 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099b4:	4619      	mov	r1, r3
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	2334      	movs	r3, #52	; 0x34
 80099ba:	fb01 f303 	mul.w	r3, r1, r3
 80099be:	4413      	add	r3, r2
 80099c0:	3390      	adds	r3, #144	; 0x90
 80099c2:	2201      	movs	r2, #1
 80099c4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099cc:	4619      	mov	r1, r3
 80099ce:	693a      	ldr	r2, [r7, #16]
 80099d0:	2334      	movs	r3, #52	; 0x34
 80099d2:	fb01 f303 	mul.w	r3, r1, r3
 80099d6:	4413      	add	r3, r2
 80099d8:	3391      	adds	r3, #145	; 0x91
 80099da:	2202      	movs	r2, #2
 80099dc:	701a      	strb	r2, [r3, #0]
            break;
 80099de:	e1ca      	b.n	8009d76 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	4619      	mov	r1, r3
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fe66 	bl	800a6bc <USBH_MSC_SCSI_TestUnitReady>
 80099f0:	4603      	mov	r3, r0
 80099f2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80099f4:	7bbb      	ldrb	r3, [r7, #14]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d149      	bne.n	8009a8e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a00:	4619      	mov	r1, r3
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	2334      	movs	r3, #52	; 0x34
 8009a06:	fb01 f303 	mul.w	r3, r1, r3
 8009a0a:	4413      	add	r3, r2
 8009a0c:	3392      	adds	r3, #146	; 0x92
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00c      	beq.n	8009a2e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	693a      	ldr	r2, [r7, #16]
 8009a1e:	2334      	movs	r3, #52	; 0x34
 8009a20:	fb01 f303 	mul.w	r3, r1, r3
 8009a24:	4413      	add	r3, r2
 8009a26:	33c1      	adds	r3, #193	; 0xc1
 8009a28:	2201      	movs	r2, #1
 8009a2a:	701a      	strb	r2, [r3, #0]
 8009a2c:	e00b      	b.n	8009a46 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a34:	4619      	mov	r1, r3
 8009a36:	693a      	ldr	r2, [r7, #16]
 8009a38:	2334      	movs	r3, #52	; 0x34
 8009a3a:	fb01 f303 	mul.w	r3, r1, r3
 8009a3e:	4413      	add	r3, r2
 8009a40:	33c1      	adds	r3, #193	; 0xc1
 8009a42:	2200      	movs	r2, #0
 8009a44:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	693a      	ldr	r2, [r7, #16]
 8009a50:	2334      	movs	r3, #52	; 0x34
 8009a52:	fb01 f303 	mul.w	r3, r1, r3
 8009a56:	4413      	add	r3, r2
 8009a58:	3390      	adds	r3, #144	; 0x90
 8009a5a:	2203      	movs	r2, #3
 8009a5c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a64:	4619      	mov	r1, r3
 8009a66:	693a      	ldr	r2, [r7, #16]
 8009a68:	2334      	movs	r3, #52	; 0x34
 8009a6a:	fb01 f303 	mul.w	r3, r1, r3
 8009a6e:	4413      	add	r3, r2
 8009a70:	3391      	adds	r3, #145	; 0x91
 8009a72:	2200      	movs	r2, #0
 8009a74:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	693a      	ldr	r2, [r7, #16]
 8009a80:	2334      	movs	r3, #52	; 0x34
 8009a82:	fb01 f303 	mul.w	r3, r1, r3
 8009a86:	4413      	add	r3, r2
 8009a88:	3392      	adds	r3, #146	; 0x92
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009a8e:	7bbb      	ldrb	r3, [r7, #14]
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d14a      	bne.n	8009b2a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	693a      	ldr	r2, [r7, #16]
 8009a9e:	2334      	movs	r3, #52	; 0x34
 8009aa0:	fb01 f303 	mul.w	r3, r1, r3
 8009aa4:	4413      	add	r3, r2
 8009aa6:	3392      	adds	r3, #146	; 0x92
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d00c      	beq.n	8009ac8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	693a      	ldr	r2, [r7, #16]
 8009ab8:	2334      	movs	r3, #52	; 0x34
 8009aba:	fb01 f303 	mul.w	r3, r1, r3
 8009abe:	4413      	add	r3, r2
 8009ac0:	33c1      	adds	r3, #193	; 0xc1
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	701a      	strb	r2, [r3, #0]
 8009ac6:	e00b      	b.n	8009ae0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ace:	4619      	mov	r1, r3
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	2334      	movs	r3, #52	; 0x34
 8009ad4:	fb01 f303 	mul.w	r3, r1, r3
 8009ad8:	4413      	add	r3, r2
 8009ada:	33c1      	adds	r3, #193	; 0xc1
 8009adc:	2200      	movs	r2, #0
 8009ade:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	693a      	ldr	r2, [r7, #16]
 8009aea:	2334      	movs	r3, #52	; 0x34
 8009aec:	fb01 f303 	mul.w	r3, r1, r3
 8009af0:	4413      	add	r3, r2
 8009af2:	3390      	adds	r3, #144	; 0x90
 8009af4:	2205      	movs	r2, #5
 8009af6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009afe:	4619      	mov	r1, r3
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	2334      	movs	r3, #52	; 0x34
 8009b04:	fb01 f303 	mul.w	r3, r1, r3
 8009b08:	4413      	add	r3, r2
 8009b0a:	3391      	adds	r3, #145	; 0x91
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b16:	4619      	mov	r1, r3
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	2334      	movs	r3, #52	; 0x34
 8009b1c:	fb01 f303 	mul.w	r3, r1, r3
 8009b20:	4413      	add	r3, r2
 8009b22:	3392      	adds	r3, #146	; 0x92
 8009b24:	2202      	movs	r2, #2
 8009b26:	701a      	strb	r2, [r3, #0]
            break;
 8009b28:	e127      	b.n	8009d7a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009b2a:	7bbb      	ldrb	r3, [r7, #14]
 8009b2c:	2b04      	cmp	r3, #4
 8009b2e:	f040 8124 	bne.w	8009d7a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b38:	4619      	mov	r1, r3
 8009b3a:	693a      	ldr	r2, [r7, #16]
 8009b3c:	2334      	movs	r3, #52	; 0x34
 8009b3e:	fb01 f303 	mul.w	r3, r1, r3
 8009b42:	4413      	add	r3, r2
 8009b44:	3390      	adds	r3, #144	; 0x90
 8009b46:	2201      	movs	r2, #1
 8009b48:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b50:	4619      	mov	r1, r3
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	2334      	movs	r3, #52	; 0x34
 8009b56:	fb01 f303 	mul.w	r3, r1, r3
 8009b5a:	4413      	add	r3, r2
 8009b5c:	3391      	adds	r3, #145	; 0x91
 8009b5e:	2202      	movs	r2, #2
 8009b60:	701a      	strb	r2, [r3, #0]
            break;
 8009b62:	e10a      	b.n	8009d7a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b6a:	b2d9      	uxtb	r1, r3
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b72:	461a      	mov	r2, r3
 8009b74:	2334      	movs	r3, #52	; 0x34
 8009b76:	fb02 f303 	mul.w	r3, r2, r3
 8009b7a:	3390      	adds	r3, #144	; 0x90
 8009b7c:	693a      	ldr	r2, [r7, #16]
 8009b7e:	4413      	add	r3, r2
 8009b80:	3304      	adds	r3, #4
 8009b82:	461a      	mov	r2, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fddc 	bl	800a742 <USBH_MSC_SCSI_ReadCapacity>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009b8e:	7bfb      	ldrb	r3, [r7, #15]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d120      	bne.n	8009bd6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	693a      	ldr	r2, [r7, #16]
 8009b9e:	2334      	movs	r3, #52	; 0x34
 8009ba0:	fb01 f303 	mul.w	r3, r1, r3
 8009ba4:	4413      	add	r3, r2
 8009ba6:	3390      	adds	r3, #144	; 0x90
 8009ba8:	2201      	movs	r2, #1
 8009baa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	693a      	ldr	r2, [r7, #16]
 8009bb6:	2334      	movs	r3, #52	; 0x34
 8009bb8:	fb01 f303 	mul.w	r3, r1, r3
 8009bbc:	4413      	add	r3, r2
 8009bbe:	3391      	adds	r3, #145	; 0x91
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009bca:	3301      	adds	r3, #1
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009bd4:	e0d3      	b.n	8009d7e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8009bd6:	7bfb      	ldrb	r3, [r7, #15]
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d10c      	bne.n	8009bf6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009be2:	4619      	mov	r1, r3
 8009be4:	693a      	ldr	r2, [r7, #16]
 8009be6:	2334      	movs	r3, #52	; 0x34
 8009be8:	fb01 f303 	mul.w	r3, r1, r3
 8009bec:	4413      	add	r3, r2
 8009bee:	3390      	adds	r3, #144	; 0x90
 8009bf0:	2205      	movs	r2, #5
 8009bf2:	701a      	strb	r2, [r3, #0]
            break;
 8009bf4:	e0c3      	b.n	8009d7e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009bf6:	7bfb      	ldrb	r3, [r7, #15]
 8009bf8:	2b04      	cmp	r3, #4
 8009bfa:	f040 80c0 	bne.w	8009d7e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c04:	4619      	mov	r1, r3
 8009c06:	693a      	ldr	r2, [r7, #16]
 8009c08:	2334      	movs	r3, #52	; 0x34
 8009c0a:	fb01 f303 	mul.w	r3, r1, r3
 8009c0e:	4413      	add	r3, r2
 8009c10:	3390      	adds	r3, #144	; 0x90
 8009c12:	2201      	movs	r2, #1
 8009c14:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	2334      	movs	r3, #52	; 0x34
 8009c22:	fb01 f303 	mul.w	r3, r1, r3
 8009c26:	4413      	add	r3, r2
 8009c28:	3391      	adds	r3, #145	; 0x91
 8009c2a:	2202      	movs	r2, #2
 8009c2c:	701a      	strb	r2, [r3, #0]
            break;
 8009c2e:	e0a6      	b.n	8009d7e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c36:	b2d9      	uxtb	r1, r3
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c3e:	461a      	mov	r2, r3
 8009c40:	2334      	movs	r3, #52	; 0x34
 8009c42:	fb02 f303 	mul.w	r3, r2, r3
 8009c46:	3398      	adds	r3, #152	; 0x98
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	3304      	adds	r3, #4
 8009c4e:	461a      	mov	r2, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fe96 	bl	800a982 <USBH_MSC_SCSI_RequestSense>
 8009c56:	4603      	mov	r3, r0
 8009c58:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009c5a:	7bfb      	ldrb	r3, [r7, #15]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d145      	bne.n	8009cec <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c66:	4619      	mov	r1, r3
 8009c68:	693a      	ldr	r2, [r7, #16]
 8009c6a:	2334      	movs	r3, #52	; 0x34
 8009c6c:	fb01 f303 	mul.w	r3, r1, r3
 8009c70:	4413      	add	r3, r2
 8009c72:	339c      	adds	r3, #156	; 0x9c
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	2b06      	cmp	r3, #6
 8009c78:	d00c      	beq.n	8009c94 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c80:	4619      	mov	r1, r3
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	2334      	movs	r3, #52	; 0x34
 8009c86:	fb01 f303 	mul.w	r3, r1, r3
 8009c8a:	4413      	add	r3, r2
 8009c8c:	339c      	adds	r3, #156	; 0x9c
 8009c8e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d117      	bne.n	8009cc4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	f242 720f 	movw	r2, #9999	; 0x270f
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d80c      	bhi.n	8009cc4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	693a      	ldr	r2, [r7, #16]
 8009cb4:	2334      	movs	r3, #52	; 0x34
 8009cb6:	fb01 f303 	mul.w	r3, r1, r3
 8009cba:	4413      	add	r3, r2
 8009cbc:	3390      	adds	r3, #144	; 0x90
 8009cbe:	2202      	movs	r2, #2
 8009cc0:	701a      	strb	r2, [r3, #0]
                  break;
 8009cc2:	e05f      	b.n	8009d84 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009cca:	4619      	mov	r1, r3
 8009ccc:	693a      	ldr	r2, [r7, #16]
 8009cce:	2334      	movs	r3, #52	; 0x34
 8009cd0:	fb01 f303 	mul.w	r3, r1, r3
 8009cd4:	4413      	add	r3, r2
 8009cd6:	3390      	adds	r3, #144	; 0x90
 8009cd8:	2201      	movs	r2, #1
 8009cda:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8009cec:	7bfb      	ldrb	r3, [r7, #15]
 8009cee:	2b02      	cmp	r3, #2
 8009cf0:	d10c      	bne.n	8009d0c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	693a      	ldr	r2, [r7, #16]
 8009cfc:	2334      	movs	r3, #52	; 0x34
 8009cfe:	fb01 f303 	mul.w	r3, r1, r3
 8009d02:	4413      	add	r3, r2
 8009d04:	3390      	adds	r3, #144	; 0x90
 8009d06:	2208      	movs	r2, #8
 8009d08:	701a      	strb	r2, [r3, #0]
            break;
 8009d0a:	e03a      	b.n	8009d82 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
 8009d0e:	2b04      	cmp	r3, #4
 8009d10:	d137      	bne.n	8009d82 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d18:	4619      	mov	r1, r3
 8009d1a:	693a      	ldr	r2, [r7, #16]
 8009d1c:	2334      	movs	r3, #52	; 0x34
 8009d1e:	fb01 f303 	mul.w	r3, r1, r3
 8009d22:	4413      	add	r3, r2
 8009d24:	3390      	adds	r3, #144	; 0x90
 8009d26:	2201      	movs	r2, #1
 8009d28:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d30:	4619      	mov	r1, r3
 8009d32:	693a      	ldr	r2, [r7, #16]
 8009d34:	2334      	movs	r3, #52	; 0x34
 8009d36:	fb01 f303 	mul.w	r3, r1, r3
 8009d3a:	4413      	add	r3, r2
 8009d3c:	3391      	adds	r3, #145	; 0x91
 8009d3e:	2202      	movs	r2, #2
 8009d40:	701a      	strb	r2, [r3, #0]
            break;
 8009d42:	e01e      	b.n	8009d82 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	b29a      	uxth	r2, r3
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009d54:	e016      	b.n	8009d84 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	2201      	movs	r2, #1
 8009d62:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d6a:	2102      	movs	r1, #2
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	4798      	blx	r3
      break;
 8009d70:	e00c      	b.n	8009d8c <USBH_MSC_Process+0x514>
            break;
 8009d72:	bf00      	nop
 8009d74:	e00a      	b.n	8009d8c <USBH_MSC_Process+0x514>
            break;
 8009d76:	bf00      	nop
 8009d78:	e008      	b.n	8009d8c <USBH_MSC_Process+0x514>
            break;
 8009d7a:	bf00      	nop
 8009d7c:	e006      	b.n	8009d8c <USBH_MSC_Process+0x514>
            break;
 8009d7e:	bf00      	nop
 8009d80:	e004      	b.n	8009d8c <USBH_MSC_Process+0x514>
            break;
 8009d82:	bf00      	nop
      break;
 8009d84:	e002      	b.n	8009d8c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	75fb      	strb	r3, [r7, #23]
      break;
 8009d8a:	bf00      	nop
  }
  return error;
 8009d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3718      	adds	r7, #24
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop

08009d98 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b088      	sub	sp, #32
 8009db2:	af02      	add	r7, sp, #8
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	460b      	mov	r3, r1
 8009db8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dc0:	69db      	ldr	r3, [r3, #28]
 8009dc2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8009dcc:	78fb      	ldrb	r3, [r7, #3]
 8009dce:	693a      	ldr	r2, [r7, #16]
 8009dd0:	2134      	movs	r1, #52	; 0x34
 8009dd2:	fb01 f303 	mul.w	r3, r1, r3
 8009dd6:	4413      	add	r3, r2
 8009dd8:	3390      	adds	r3, #144	; 0x90
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	2b07      	cmp	r3, #7
 8009dde:	d03c      	beq.n	8009e5a <USBH_MSC_RdWrProcess+0xac>
 8009de0:	2b07      	cmp	r3, #7
 8009de2:	f300 80a7 	bgt.w	8009f34 <USBH_MSC_RdWrProcess+0x186>
 8009de6:	2b05      	cmp	r3, #5
 8009de8:	d06c      	beq.n	8009ec4 <USBH_MSC_RdWrProcess+0x116>
 8009dea:	2b06      	cmp	r3, #6
 8009dec:	f040 80a2 	bne.w	8009f34 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8009df0:	78f9      	ldrb	r1, [r7, #3]
 8009df2:	2300      	movs	r3, #0
 8009df4:	9300      	str	r3, [sp, #0]
 8009df6:	2300      	movs	r3, #0
 8009df8:	2200      	movs	r2, #0
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 fea5 	bl	800ab4a <USBH_MSC_SCSI_Read>
 8009e00:	4603      	mov	r3, r0
 8009e02:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009e04:	7bfb      	ldrb	r3, [r7, #15]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10b      	bne.n	8009e22 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009e0a:	78fb      	ldrb	r3, [r7, #3]
 8009e0c:	693a      	ldr	r2, [r7, #16]
 8009e0e:	2134      	movs	r1, #52	; 0x34
 8009e10:	fb01 f303 	mul.w	r3, r1, r3
 8009e14:	4413      	add	r3, r2
 8009e16:	3390      	adds	r3, #144	; 0x90
 8009e18:	2201      	movs	r2, #1
 8009e1a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009e20:	e08a      	b.n	8009f38 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8009e22:	7bfb      	ldrb	r3, [r7, #15]
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d109      	bne.n	8009e3c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009e28:	78fb      	ldrb	r3, [r7, #3]
 8009e2a:	693a      	ldr	r2, [r7, #16]
 8009e2c:	2134      	movs	r1, #52	; 0x34
 8009e2e:	fb01 f303 	mul.w	r3, r1, r3
 8009e32:	4413      	add	r3, r2
 8009e34:	3390      	adds	r3, #144	; 0x90
 8009e36:	2205      	movs	r2, #5
 8009e38:	701a      	strb	r2, [r3, #0]
      break;
 8009e3a:	e07d      	b.n	8009f38 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009e3c:	7bfb      	ldrb	r3, [r7, #15]
 8009e3e:	2b04      	cmp	r3, #4
 8009e40:	d17a      	bne.n	8009f38 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009e42:	78fb      	ldrb	r3, [r7, #3]
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	2134      	movs	r1, #52	; 0x34
 8009e48:	fb01 f303 	mul.w	r3, r1, r3
 8009e4c:	4413      	add	r3, r2
 8009e4e:	3390      	adds	r3, #144	; 0x90
 8009e50:	2208      	movs	r2, #8
 8009e52:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009e54:	2302      	movs	r3, #2
 8009e56:	75fb      	strb	r3, [r7, #23]
      break;
 8009e58:	e06e      	b.n	8009f38 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009e5a:	78f9      	ldrb	r1, [r7, #3]
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	9300      	str	r3, [sp, #0]
 8009e60:	2300      	movs	r3, #0
 8009e62:	2200      	movs	r2, #0
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fe05 	bl	800aa74 <USBH_MSC_SCSI_Write>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10b      	bne.n	8009e8c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009e74:	78fb      	ldrb	r3, [r7, #3]
 8009e76:	693a      	ldr	r2, [r7, #16]
 8009e78:	2134      	movs	r1, #52	; 0x34
 8009e7a:	fb01 f303 	mul.w	r3, r1, r3
 8009e7e:	4413      	add	r3, r2
 8009e80:	3390      	adds	r3, #144	; 0x90
 8009e82:	2201      	movs	r2, #1
 8009e84:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009e86:	2300      	movs	r3, #0
 8009e88:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009e8a:	e057      	b.n	8009f3c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	d109      	bne.n	8009ea6 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009e92:	78fb      	ldrb	r3, [r7, #3]
 8009e94:	693a      	ldr	r2, [r7, #16]
 8009e96:	2134      	movs	r1, #52	; 0x34
 8009e98:	fb01 f303 	mul.w	r3, r1, r3
 8009e9c:	4413      	add	r3, r2
 8009e9e:	3390      	adds	r3, #144	; 0x90
 8009ea0:	2205      	movs	r2, #5
 8009ea2:	701a      	strb	r2, [r3, #0]
      break;
 8009ea4:	e04a      	b.n	8009f3c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009ea6:	7bfb      	ldrb	r3, [r7, #15]
 8009ea8:	2b04      	cmp	r3, #4
 8009eaa:	d147      	bne.n	8009f3c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009eac:	78fb      	ldrb	r3, [r7, #3]
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	2134      	movs	r1, #52	; 0x34
 8009eb2:	fb01 f303 	mul.w	r3, r1, r3
 8009eb6:	4413      	add	r3, r2
 8009eb8:	3390      	adds	r3, #144	; 0x90
 8009eba:	2208      	movs	r2, #8
 8009ebc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009ebe:	2302      	movs	r3, #2
 8009ec0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ec2:	e03b      	b.n	8009f3c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009ec4:	78fb      	ldrb	r3, [r7, #3]
 8009ec6:	2234      	movs	r2, #52	; 0x34
 8009ec8:	fb02 f303 	mul.w	r3, r2, r3
 8009ecc:	3398      	adds	r3, #152	; 0x98
 8009ece:	693a      	ldr	r2, [r7, #16]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	1d1a      	adds	r2, r3, #4
 8009ed4:	78fb      	ldrb	r3, [r7, #3]
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 fd52 	bl	800a982 <USBH_MSC_SCSI_RequestSense>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009ee2:	7bfb      	ldrb	r3, [r7, #15]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d113      	bne.n	8009f10 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009ee8:	78fb      	ldrb	r3, [r7, #3]
 8009eea:	693a      	ldr	r2, [r7, #16]
 8009eec:	2134      	movs	r1, #52	; 0x34
 8009eee:	fb01 f303 	mul.w	r3, r1, r3
 8009ef2:	4413      	add	r3, r2
 8009ef4:	3390      	adds	r3, #144	; 0x90
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009efa:	78fb      	ldrb	r3, [r7, #3]
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	2134      	movs	r1, #52	; 0x34
 8009f00:	fb01 f303 	mul.w	r3, r1, r3
 8009f04:	4413      	add	r3, r2
 8009f06:	3391      	adds	r3, #145	; 0x91
 8009f08:	2202      	movs	r2, #2
 8009f0a:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009f0c:	2302      	movs	r3, #2
 8009f0e:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8009f10:	7bfb      	ldrb	r3, [r7, #15]
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d014      	beq.n	8009f40 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009f16:	7bfb      	ldrb	r3, [r7, #15]
 8009f18:	2b04      	cmp	r3, #4
 8009f1a:	d111      	bne.n	8009f40 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009f1c:	78fb      	ldrb	r3, [r7, #3]
 8009f1e:	693a      	ldr	r2, [r7, #16]
 8009f20:	2134      	movs	r1, #52	; 0x34
 8009f22:	fb01 f303 	mul.w	r3, r1, r3
 8009f26:	4413      	add	r3, r2
 8009f28:	3390      	adds	r3, #144	; 0x90
 8009f2a:	2208      	movs	r2, #8
 8009f2c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009f2e:	2302      	movs	r3, #2
 8009f30:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009f32:	e005      	b.n	8009f40 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8009f34:	bf00      	nop
 8009f36:	e004      	b.n	8009f42 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009f38:	bf00      	nop
 8009f3a:	e002      	b.n	8009f42 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009f3c:	bf00      	nop
 8009f3e:	e000      	b.n	8009f42 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009f40:	bf00      	nop

  }
  return error;
 8009f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3718      	adds	r7, #24
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	460b      	mov	r3, r1
 8009f56:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f5e:	69db      	ldr	r3, [r3, #28]
 8009f60:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	2b0b      	cmp	r3, #11
 8009f6a:	d10c      	bne.n	8009f86 <USBH_MSC_UnitIsReady+0x3a>
 8009f6c:	78fb      	ldrb	r3, [r7, #3]
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	2134      	movs	r1, #52	; 0x34
 8009f72:	fb01 f303 	mul.w	r3, r1, r3
 8009f76:	4413      	add	r3, r2
 8009f78:	3391      	adds	r3, #145	; 0x91
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d102      	bne.n	8009f86 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009f80:	2301      	movs	r3, #1
 8009f82:	73fb      	strb	r3, [r7, #15]
 8009f84:	e001      	b.n	8009f8a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009f86:	2300      	movs	r3, #0
 8009f88:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3714      	adds	r7, #20
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b086      	sub	sp, #24
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	607a      	str	r2, [r7, #4]
 8009fa4:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fac:	69db      	ldr	r3, [r3, #28]
 8009fae:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	2b0b      	cmp	r3, #11
 8009fb8:	d10d      	bne.n	8009fd6 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009fba:	7afb      	ldrb	r3, [r7, #11]
 8009fbc:	2234      	movs	r2, #52	; 0x34
 8009fbe:	fb02 f303 	mul.w	r3, r2, r3
 8009fc2:	3390      	adds	r3, #144	; 0x90
 8009fc4:	697a      	ldr	r2, [r7, #20]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	2234      	movs	r2, #52	; 0x34
 8009fca:	4619      	mov	r1, r3
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f006 f9cd 	bl	801036c <memcpy>
    return USBH_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	e000      	b.n	8009fd8 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8009fd6:	2302      	movs	r3, #2
  }
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3718      	adds	r7, #24
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b088      	sub	sp, #32
 8009fe4:	af02      	add	r7, sp, #8
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	607a      	str	r2, [r7, #4]
 8009fea:	603b      	str	r3, [r7, #0]
 8009fec:	460b      	mov	r3, r1
 8009fee:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ff6:	69db      	ldr	r3, [r3, #28]
 8009ff8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00e      	beq.n	800a024 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a00c:	2b0b      	cmp	r3, #11
 800a00e:	d109      	bne.n	800a024 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a010:	7afb      	ldrb	r3, [r7, #11]
 800a012:	697a      	ldr	r2, [r7, #20]
 800a014:	2134      	movs	r1, #52	; 0x34
 800a016:	fb01 f303 	mul.w	r3, r1, r3
 800a01a:	4413      	add	r3, r2
 800a01c:	3390      	adds	r3, #144	; 0x90
 800a01e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a020:	2b01      	cmp	r3, #1
 800a022:	d001      	beq.n	800a028 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800a024:	2302      	movs	r3, #2
 800a026:	e040      	b.n	800a0aa <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	2206      	movs	r2, #6
 800a02c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800a02e:	7afb      	ldrb	r3, [r7, #11]
 800a030:	697a      	ldr	r2, [r7, #20]
 800a032:	2134      	movs	r1, #52	; 0x34
 800a034:	fb01 f303 	mul.w	r3, r1, r3
 800a038:	4413      	add	r3, r2
 800a03a:	3390      	adds	r3, #144	; 0x90
 800a03c:	2206      	movs	r2, #6
 800a03e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a040:	7afb      	ldrb	r3, [r7, #11]
 800a042:	b29a      	uxth	r2, r3
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a04a:	7af9      	ldrb	r1, [r7, #11]
 800a04c:	6a3b      	ldr	r3, [r7, #32]
 800a04e:	9300      	str	r3, [sp, #0]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f000 fd78 	bl	800ab4a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a060:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a062:	e016      	b.n	800a092 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	1ad2      	subs	r2, r2, r3
 800a06e:	6a3b      	ldr	r3, [r7, #32]
 800a070:	f242 7110 	movw	r1, #10000	; 0x2710
 800a074:	fb01 f303 	mul.w	r3, r1, r3
 800a078:	429a      	cmp	r2, r3
 800a07a:	d805      	bhi.n	800a088 <USBH_MSC_Read+0xa8>
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a082:	b2db      	uxtb	r3, r3
 800a084:	2b00      	cmp	r3, #0
 800a086:	d104      	bne.n	800a092 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2201      	movs	r2, #1
 800a08c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a08e:	2302      	movs	r3, #2
 800a090:	e00b      	b.n	800a0aa <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a092:	7afb      	ldrb	r3, [r7, #11]
 800a094:	4619      	mov	r1, r3
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f7ff fe89 	bl	8009dae <USBH_MSC_RdWrProcess>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d0e0      	beq.n	800a064 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b088      	sub	sp, #32
 800a0b6:	af02      	add	r7, sp, #8
 800a0b8:	60f8      	str	r0, [r7, #12]
 800a0ba:	607a      	str	r2, [r7, #4]
 800a0bc:	603b      	str	r3, [r7, #0]
 800a0be:	460b      	mov	r3, r1
 800a0c0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0c8:	69db      	ldr	r3, [r3, #28]
 800a0ca:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00e      	beq.n	800a0f6 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a0de:	2b0b      	cmp	r3, #11
 800a0e0:	d109      	bne.n	800a0f6 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a0e2:	7afb      	ldrb	r3, [r7, #11]
 800a0e4:	697a      	ldr	r2, [r7, #20]
 800a0e6:	2134      	movs	r1, #52	; 0x34
 800a0e8:	fb01 f303 	mul.w	r3, r1, r3
 800a0ec:	4413      	add	r3, r2
 800a0ee:	3390      	adds	r3, #144	; 0x90
 800a0f0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d001      	beq.n	800a0fa <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800a0f6:	2302      	movs	r3, #2
 800a0f8:	e040      	b.n	800a17c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	2207      	movs	r2, #7
 800a0fe:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a100:	7afb      	ldrb	r3, [r7, #11]
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	2134      	movs	r1, #52	; 0x34
 800a106:	fb01 f303 	mul.w	r3, r1, r3
 800a10a:	4413      	add	r3, r2
 800a10c:	3390      	adds	r3, #144	; 0x90
 800a10e:	2207      	movs	r2, #7
 800a110:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a112:	7afb      	ldrb	r3, [r7, #11]
 800a114:	b29a      	uxth	r2, r3
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a11c:	7af9      	ldrb	r1, [r7, #11]
 800a11e:	6a3b      	ldr	r3, [r7, #32]
 800a120:	9300      	str	r3, [sp, #0]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f000 fca4 	bl	800aa74 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a132:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a134:	e016      	b.n	800a164 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	1ad2      	subs	r2, r2, r3
 800a140:	6a3b      	ldr	r3, [r7, #32]
 800a142:	f242 7110 	movw	r1, #10000	; 0x2710
 800a146:	fb01 f303 	mul.w	r3, r1, r3
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d805      	bhi.n	800a15a <USBH_MSC_Write+0xa8>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b00      	cmp	r3, #0
 800a158:	d104      	bne.n	800a164 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	2201      	movs	r2, #1
 800a15e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a160:	2302      	movs	r3, #2
 800a162:	e00b      	b.n	800a17c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a164:	7afb      	ldrb	r3, [r7, #11]
 800a166:	4619      	mov	r1, r3
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f7ff fe20 	bl	8009dae <USBH_MSC_RdWrProcess>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b01      	cmp	r3, #1
 800a172:	d0e0      	beq.n	800a136 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	2201      	movs	r2, #1
 800a178:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3718      	adds	r7, #24
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2221      	movs	r2, #33	; 0x21
 800a190:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	22ff      	movs	r2, #255	; 0xff
 800a196:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f001 fea6 	bl	800bf00 <USBH_CtlReq>
 800a1b4:	4603      	mov	r3, r0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b082      	sub	sp, #8
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
 800a1c6:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	22a1      	movs	r2, #161	; 0xa1
 800a1cc:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	22fe      	movs	r2, #254	; 0xfe
 800a1d2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	6839      	ldr	r1, [r7, #0]
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f001 fe88 	bl	800bf00 <USBH_CtlReq>
 800a1f0:	4603      	mov	r3, r0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
	...

0800a1fc <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a20a:	69db      	ldr	r3, [r3, #28]
 800a20c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	4a09      	ldr	r2, [pc, #36]	; (800a238 <USBH_MSC_BOT_Init+0x3c>)
 800a212:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	4a09      	ldr	r2, [pc, #36]	; (800a23c <USBH_MSC_BOT_Init+0x40>)
 800a218:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2201      	movs	r2, #1
 800a21e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2201      	movs	r2, #1
 800a226:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3714      	adds	r7, #20
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr
 800a238:	43425355 	.word	0x43425355
 800a23c:	20304050 	.word	0x20304050

0800a240 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b088      	sub	sp, #32
 800a244:	af02      	add	r7, sp, #8
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	460b      	mov	r3, r1
 800a24a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a24c:	2301      	movs	r3, #1
 800a24e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a250:	2301      	movs	r3, #1
 800a252:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a254:	2301      	movs	r3, #1
 800a256:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a258:	2300      	movs	r3, #0
 800a25a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a262:	69db      	ldr	r3, [r3, #28]
 800a264:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a266:	2300      	movs	r3, #0
 800a268:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a270:	3b01      	subs	r3, #1
 800a272:	2b0a      	cmp	r3, #10
 800a274:	f200 819e 	bhi.w	800a5b4 <USBH_MSC_BOT_Process+0x374>
 800a278:	a201      	add	r2, pc, #4	; (adr r2, 800a280 <USBH_MSC_BOT_Process+0x40>)
 800a27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27e:	bf00      	nop
 800a280:	0800a2ad 	.word	0x0800a2ad
 800a284:	0800a2d5 	.word	0x0800a2d5
 800a288:	0800a33f 	.word	0x0800a33f
 800a28c:	0800a35d 	.word	0x0800a35d
 800a290:	0800a3e1 	.word	0x0800a3e1
 800a294:	0800a403 	.word	0x0800a403
 800a298:	0800a49b 	.word	0x0800a49b
 800a29c:	0800a4b7 	.word	0x0800a4b7
 800a2a0:	0800a509 	.word	0x0800a509
 800a2a4:	0800a539 	.word	0x0800a539
 800a2a8:	0800a59b 	.word	0x0800a59b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	78fa      	ldrb	r2, [r7, #3]
 800a2b0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	795b      	ldrb	r3, [r3, #5]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	9200      	str	r2, [sp, #0]
 800a2ca:	221f      	movs	r2, #31
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f002 f826 	bl	800c31e <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a2d2:	e17e      	b.n	800a5d2 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	795b      	ldrb	r3, [r3, #5]
 800a2d8:	4619      	mov	r1, r3
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f005 fe3e 	bl	800ff5c <USBH_LL_GetURBState>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a2e4:	7d3b      	ldrb	r3, [r7, #20]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d118      	bne.n	800a31c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d00f      	beq.n	800a312 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a2f8:	b25b      	sxtb	r3, r3
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	da04      	bge.n	800a308 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	2203      	movs	r2, #3
 800a302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a306:	e157      	b.n	800a5b8 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	2205      	movs	r2, #5
 800a30c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a310:	e152      	b.n	800a5b8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	2207      	movs	r2, #7
 800a316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a31a:	e14d      	b.n	800a5b8 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a31c:	7d3b      	ldrb	r3, [r7, #20]
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d104      	bne.n	800a32c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	2201      	movs	r2, #1
 800a326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a32a:	e145      	b.n	800a5b8 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800a32c:	7d3b      	ldrb	r3, [r7, #20]
 800a32e:	2b05      	cmp	r3, #5
 800a330:	f040 8142 	bne.w	800a5b8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	220a      	movs	r2, #10
 800a338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a33c:	e13c      	b.n	800a5b8 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	895a      	ldrh	r2, [r3, #10]
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	791b      	ldrb	r3, [r3, #4]
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f002 f80b 	bl	800c368 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	2204      	movs	r2, #4
 800a356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800a35a:	e13a      	b.n	800a5d2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	791b      	ldrb	r3, [r3, #4]
 800a360:	4619      	mov	r1, r3
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f005 fdfa 	bl	800ff5c <USBH_LL_GetURBState>
 800a368:	4603      	mov	r3, r0
 800a36a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a36c:	7d3b      	ldrb	r3, [r7, #20]
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d12d      	bne.n	800a3ce <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a376:	693a      	ldr	r2, [r7, #16]
 800a378:	8952      	ldrh	r2, [r2, #10]
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d910      	bls.n	800a3a0 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a384:	693a      	ldr	r2, [r7, #16]
 800a386:	8952      	ldrh	r2, [r2, #10]
 800a388:	441a      	add	r2, r3
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a394:	693a      	ldr	r2, [r7, #16]
 800a396:	8952      	ldrh	r2, [r2, #10]
 800a398:	1a9a      	subs	r2, r3, r2
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	65da      	str	r2, [r3, #92]	; 0x5c
 800a39e:	e002      	b.n	800a3a6 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00a      	beq.n	800a3c4 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	895a      	ldrh	r2, [r3, #10]
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	791b      	ldrb	r3, [r3, #4]
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f001 ffd3 	bl	800c368 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a3c2:	e0fb      	b.n	800a5bc <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	2207      	movs	r2, #7
 800a3c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a3cc:	e0f6      	b.n	800a5bc <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800a3ce:	7d3b      	ldrb	r3, [r7, #20]
 800a3d0:	2b05      	cmp	r3, #5
 800a3d2:	f040 80f3 	bne.w	800a5bc <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	2209      	movs	r2, #9
 800a3da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a3de:	e0ed      	b.n	800a5bc <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	891a      	ldrh	r2, [r3, #8]
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	795b      	ldrb	r3, [r3, #5]
 800a3ee:	2001      	movs	r0, #1
 800a3f0:	9000      	str	r0, [sp, #0]
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f001 ff93 	bl	800c31e <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	2206      	movs	r2, #6
 800a3fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a400:	e0e7      	b.n	800a5d2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	795b      	ldrb	r3, [r3, #5]
 800a406:	4619      	mov	r1, r3
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f005 fda7 	bl	800ff5c <USBH_LL_GetURBState>
 800a40e:	4603      	mov	r3, r0
 800a410:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a412:	7d3b      	ldrb	r3, [r7, #20]
 800a414:	2b01      	cmp	r3, #1
 800a416:	d12f      	bne.n	800a478 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a41c:	693a      	ldr	r2, [r7, #16]
 800a41e:	8912      	ldrh	r2, [r2, #8]
 800a420:	4293      	cmp	r3, r2
 800a422:	d910      	bls.n	800a446 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a42a:	693a      	ldr	r2, [r7, #16]
 800a42c:	8912      	ldrh	r2, [r2, #8]
 800a42e:	441a      	add	r2, r3
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a43a:	693a      	ldr	r2, [r7, #16]
 800a43c:	8912      	ldrh	r2, [r2, #8]
 800a43e:	1a9a      	subs	r2, r3, r2
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	65da      	str	r2, [r3, #92]	; 0x5c
 800a444:	e002      	b.n	800a44c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	2200      	movs	r2, #0
 800a44a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00c      	beq.n	800a46e <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	891a      	ldrh	r2, [r3, #8]
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	795b      	ldrb	r3, [r3, #5]
 800a462:	2001      	movs	r0, #1
 800a464:	9000      	str	r0, [sp, #0]
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f001 ff59 	bl	800c31e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a46c:	e0a8      	b.n	800a5c0 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	2207      	movs	r2, #7
 800a472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a476:	e0a3      	b.n	800a5c0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a478:	7d3b      	ldrb	r3, [r7, #20]
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	d104      	bne.n	800a488 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	2205      	movs	r2, #5
 800a482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a486:	e09b      	b.n	800a5c0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800a488:	7d3b      	ldrb	r3, [r7, #20]
 800a48a:	2b05      	cmp	r3, #5
 800a48c:	f040 8098 	bne.w	800a5c0 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	220a      	movs	r2, #10
 800a494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a498:	e092      	b.n	800a5c0 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	791b      	ldrb	r3, [r3, #4]
 800a4a4:	220d      	movs	r2, #13
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f001 ff5e 	bl	800c368 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	2208      	movs	r2, #8
 800a4b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a4b4:	e08d      	b.n	800a5d2 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	791b      	ldrb	r3, [r3, #4]
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f005 fd4d 	bl	800ff5c <USBH_LL_GetURBState>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a4c6:	7d3b      	ldrb	r3, [r7, #20]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d115      	bne.n	800a4f8 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f8a9 	bl	800a634 <USBH_MSC_DecodeCSW>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a4e6:	7d7b      	ldrb	r3, [r7, #21]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d102      	bne.n	800a4f2 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a4f0:	e068      	b.n	800a5c4 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800a4f2:	2302      	movs	r3, #2
 800a4f4:	75fb      	strb	r3, [r7, #23]
      break;
 800a4f6:	e065      	b.n	800a5c4 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800a4f8:	7d3b      	ldrb	r3, [r7, #20]
 800a4fa:	2b05      	cmp	r3, #5
 800a4fc:	d162      	bne.n	800a5c4 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	2209      	movs	r2, #9
 800a502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a506:	e05d      	b.n	800a5c4 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a508:	78fb      	ldrb	r3, [r7, #3]
 800a50a:	2200      	movs	r2, #0
 800a50c:	4619      	mov	r1, r3
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f864 	bl	800a5dc <USBH_MSC_BOT_Abort>
 800a514:	4603      	mov	r3, r0
 800a516:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a518:	7dbb      	ldrb	r3, [r7, #22]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d104      	bne.n	800a528 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	2207      	movs	r2, #7
 800a522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a526:	e04f      	b.n	800a5c8 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a528:	7dbb      	ldrb	r3, [r7, #22]
 800a52a:	2b04      	cmp	r3, #4
 800a52c:	d14c      	bne.n	800a5c8 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	220b      	movs	r2, #11
 800a532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a536:	e047      	b.n	800a5c8 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a538:	78fb      	ldrb	r3, [r7, #3]
 800a53a:	2201      	movs	r2, #1
 800a53c:	4619      	mov	r1, r3
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 f84c 	bl	800a5dc <USBH_MSC_BOT_Abort>
 800a544:	4603      	mov	r3, r0
 800a546:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a548:	7dbb      	ldrb	r3, [r7, #22]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d11d      	bne.n	800a58a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	795b      	ldrb	r3, [r3, #5]
 800a552:	4619      	mov	r1, r3
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f005 fd5b 	bl	8010010 <USBH_LL_GetToggle>
 800a55a:	4603      	mov	r3, r0
 800a55c:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	7959      	ldrb	r1, [r3, #5]
 800a562:	7bfb      	ldrb	r3, [r7, #15]
 800a564:	f1c3 0301 	rsb	r3, r3, #1
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	461a      	mov	r2, r3
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f005 fd1f 	bl	800ffb0 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	791b      	ldrb	r3, [r3, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	4619      	mov	r1, r3
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f005 fd18 	bl	800ffb0 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	2209      	movs	r2, #9
 800a584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a588:	e020      	b.n	800a5cc <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800a58a:	7dbb      	ldrb	r3, [r7, #22]
 800a58c:	2b04      	cmp	r3, #4
 800a58e:	d11d      	bne.n	800a5cc <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	220b      	movs	r2, #11
 800a594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a598:	e018      	b.n	800a5cc <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f7ff fdf2 	bl	800a184 <USBH_MSC_BOT_REQ_Reset>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a5a4:	7dfb      	ldrb	r3, [r7, #23]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d112      	bne.n	800a5d0 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800a5b2:	e00d      	b.n	800a5d0 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800a5b4:	bf00      	nop
 800a5b6:	e00c      	b.n	800a5d2 <USBH_MSC_BOT_Process+0x392>
      break;
 800a5b8:	bf00      	nop
 800a5ba:	e00a      	b.n	800a5d2 <USBH_MSC_BOT_Process+0x392>
      break;
 800a5bc:	bf00      	nop
 800a5be:	e008      	b.n	800a5d2 <USBH_MSC_BOT_Process+0x392>
      break;
 800a5c0:	bf00      	nop
 800a5c2:	e006      	b.n	800a5d2 <USBH_MSC_BOT_Process+0x392>
      break;
 800a5c4:	bf00      	nop
 800a5c6:	e004      	b.n	800a5d2 <USBH_MSC_BOT_Process+0x392>
      break;
 800a5c8:	bf00      	nop
 800a5ca:	e002      	b.n	800a5d2 <USBH_MSC_BOT_Process+0x392>
      break;
 800a5cc:	bf00      	nop
 800a5ce:	e000      	b.n	800a5d2 <USBH_MSC_BOT_Process+0x392>
      break;
 800a5d0:	bf00      	nop
  }
  return status;
 800a5d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3718      	adds	r7, #24
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	70fb      	strb	r3, [r7, #3]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5f6:	69db      	ldr	r3, [r3, #28]
 800a5f8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800a5fa:	78bb      	ldrb	r3, [r7, #2]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d002      	beq.n	800a606 <USBH_MSC_BOT_Abort+0x2a>
 800a600:	2b01      	cmp	r3, #1
 800a602:	d009      	beq.n	800a618 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800a604:	e011      	b.n	800a62a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	79db      	ldrb	r3, [r3, #7]
 800a60a:	4619      	mov	r1, r3
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f001 f9a8 	bl	800b962 <USBH_ClrFeature>
 800a612:	4603      	mov	r3, r0
 800a614:	73fb      	strb	r3, [r7, #15]
      break;
 800a616:	e008      	b.n	800a62a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	799b      	ldrb	r3, [r3, #6]
 800a61c:	4619      	mov	r1, r3
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f001 f99f 	bl	800b962 <USBH_ClrFeature>
 800a624:	4603      	mov	r3, r0
 800a626:	73fb      	strb	r3, [r7, #15]
      break;
 800a628:	bf00      	nop
  }
  return status;
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a642:	69db      	ldr	r3, [r3, #28]
 800a644:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800a646:	2301      	movs	r3, #1
 800a648:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	791b      	ldrb	r3, [r3, #4]
 800a64e:	4619      	mov	r1, r3
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f005 fbf1 	bl	800fe38 <USBH_LL_GetLastXferSize>
 800a656:	4603      	mov	r3, r0
 800a658:	2b0d      	cmp	r3, #13
 800a65a:	d002      	beq.n	800a662 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800a65c:	2302      	movs	r3, #2
 800a65e:	73fb      	strb	r3, [r7, #15]
 800a660:	e024      	b.n	800a6ac <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a666:	4a14      	ldr	r2, [pc, #80]	; (800a6b8 <USBH_MSC_DecodeCSW+0x84>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d11d      	bne.n	800a6a8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a674:	429a      	cmp	r2, r3
 800a676:	d119      	bne.n	800a6ac <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d102      	bne.n	800a688 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800a682:	2300      	movs	r3, #0
 800a684:	73fb      	strb	r3, [r7, #15]
 800a686:	e011      	b.n	800a6ac <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d102      	bne.n	800a698 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a692:	2301      	movs	r3, #1
 800a694:	73fb      	strb	r3, [r7, #15]
 800a696:	e009      	b.n	800a6ac <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d104      	bne.n	800a6ac <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	73fb      	strb	r3, [r7, #15]
 800a6a6:	e001      	b.n	800a6ac <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a6a8:	2302      	movs	r3, #2
 800a6aa:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	53425355 	.word	0x53425355

0800a6bc <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a6c8:	2302      	movs	r3, #2
 800a6ca:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6d2:	69db      	ldr	r3, [r3, #28]
 800a6d4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d002      	beq.n	800a6e6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d021      	beq.n	800a728 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a6e4:	e028      	b.n	800a738 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	220a      	movs	r2, #10
 800a6f8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	3363      	adds	r3, #99	; 0x63
 800a700:	2210      	movs	r2, #16
 800a702:	2100      	movs	r1, #0
 800a704:	4618      	mov	r0, r3
 800a706:	f005 fdc3 	bl	8010290 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	2201      	movs	r2, #1
 800a716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	2202      	movs	r2, #2
 800a71e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800a722:	2301      	movs	r3, #1
 800a724:	73fb      	strb	r3, [r7, #15]
      break;
 800a726:	e007      	b.n	800a738 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a728:	78fb      	ldrb	r3, [r7, #3]
 800a72a:	4619      	mov	r1, r3
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f7ff fd87 	bl	800a240 <USBH_MSC_BOT_Process>
 800a732:	4603      	mov	r3, r0
 800a734:	73fb      	strb	r3, [r7, #15]
      break;
 800a736:	bf00      	nop
  }

  return error;
 800a738:	7bfb      	ldrb	r3, [r7, #15]
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a742:	b580      	push	{r7, lr}
 800a744:	b086      	sub	sp, #24
 800a746:	af00      	add	r7, sp, #0
 800a748:	60f8      	str	r0, [r7, #12]
 800a74a:	460b      	mov	r3, r1
 800a74c:	607a      	str	r2, [r7, #4]
 800a74e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800a750:	2301      	movs	r3, #1
 800a752:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a75a:	69db      	ldr	r3, [r3, #28]
 800a75c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a764:	2b01      	cmp	r3, #1
 800a766:	d002      	beq.n	800a76e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a768:	2b02      	cmp	r3, #2
 800a76a:	d027      	beq.n	800a7bc <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a76c:	e05f      	b.n	800a82e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	2208      	movs	r2, #8
 800a772:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	2280      	movs	r2, #128	; 0x80
 800a778:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	220a      	movs	r2, #10
 800a780:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	3363      	adds	r3, #99	; 0x63
 800a788:	2210      	movs	r2, #16
 800a78a:	2100      	movs	r1, #0
 800a78c:	4618      	mov	r0, r3
 800a78e:	f005 fd7f 	bl	8010290 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	2225      	movs	r2, #37	; 0x25
 800a796:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	2201      	movs	r2, #1
 800a79e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	2202      	movs	r2, #2
 800a7a6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	f103 0210 	add.w	r2, r3, #16
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	75fb      	strb	r3, [r7, #23]
      break;
 800a7ba:	e038      	b.n	800a82e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a7bc:	7afb      	ldrb	r3, [r7, #11]
 800a7be:	4619      	mov	r1, r3
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f7ff fd3d 	bl	800a240 <USBH_MSC_BOT_Process>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a7ca:	7dfb      	ldrb	r3, [r7, #23]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d12d      	bne.n	800a82c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7d6:	3303      	adds	r3, #3
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7e2:	3302      	adds	r3, #2
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	021b      	lsls	r3, r3, #8
 800a7e8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a7f6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	061b      	lsls	r3, r3, #24
 800a802:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a80e:	3307      	adds	r3, #7
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	b29a      	uxth	r2, r3
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a81a:	3306      	adds	r3, #6
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	b29b      	uxth	r3, r3
 800a820:	021b      	lsls	r3, r3, #8
 800a822:	b29b      	uxth	r3, r3
 800a824:	4313      	orrs	r3, r2
 800a826:	b29a      	uxth	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	809a      	strh	r2, [r3, #4]
      break;
 800a82c:	bf00      	nop
  }

  return error;
 800a82e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a830:	4618      	mov	r0, r3
 800a832:	3718      	adds	r7, #24
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b086      	sub	sp, #24
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	460b      	mov	r3, r1
 800a842:	607a      	str	r2, [r7, #4]
 800a844:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a846:	2302      	movs	r3, #2
 800a848:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a850:	69db      	ldr	r3, [r3, #28]
 800a852:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d002      	beq.n	800a864 <USBH_MSC_SCSI_Inquiry+0x2c>
 800a85e:	2b02      	cmp	r3, #2
 800a860:	d03d      	beq.n	800a8de <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a862:	e089      	b.n	800a978 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	2224      	movs	r2, #36	; 0x24
 800a868:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	2280      	movs	r2, #128	; 0x80
 800a86e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	220a      	movs	r2, #10
 800a876:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	3363      	adds	r3, #99	; 0x63
 800a87e:	220a      	movs	r2, #10
 800a880:	2100      	movs	r1, #0
 800a882:	4618      	mov	r0, r3
 800a884:	f005 fd04 	bl	8010290 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	2212      	movs	r2, #18
 800a88c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a890:	7afb      	ldrb	r3, [r7, #11]
 800a892:	015b      	lsls	r3, r3, #5
 800a894:	b2da      	uxtb	r2, r3
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	2224      	movs	r2, #36	; 0x24
 800a8b0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	2202      	movs	r2, #2
 800a8c8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	f103 0210 	add.w	r2, r3, #16
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	75fb      	strb	r3, [r7, #23]
      break;
 800a8dc:	e04c      	b.n	800a978 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a8de:	7afb      	ldrb	r3, [r7, #11]
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f7ff fcac 	bl	800a240 <USBH_MSC_BOT_Process>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a8ec:	7dfb      	ldrb	r3, [r7, #23]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d141      	bne.n	800a976 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a8f2:	2222      	movs	r2, #34	; 0x22
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f005 fcca 	bl	8010290 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	f003 031f 	and.w	r3, r3, #31
 800a908:	b2da      	uxtb	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	095b      	lsrs	r3, r3, #5
 800a918:	b2da      	uxtb	r2, r3
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a924:	3301      	adds	r3, #1
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	b25b      	sxtb	r3, r3
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	da03      	bge.n	800a936 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2201      	movs	r2, #1
 800a932:	709a      	strb	r2, [r3, #2]
 800a934:	e002      	b.n	800a93c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	1cd8      	adds	r0, r3, #3
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a946:	3308      	adds	r3, #8
 800a948:	2208      	movs	r2, #8
 800a94a:	4619      	mov	r1, r3
 800a94c:	f005 fd0e 	bl	801036c <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f103 000c 	add.w	r0, r3, #12
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a95c:	3310      	adds	r3, #16
 800a95e:	2210      	movs	r2, #16
 800a960:	4619      	mov	r1, r3
 800a962:	f005 fd03 	bl	801036c <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	331d      	adds	r3, #29
 800a96a:	693a      	ldr	r2, [r7, #16]
 800a96c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a970:	3220      	adds	r2, #32
 800a972:	6812      	ldr	r2, [r2, #0]
 800a974:	601a      	str	r2, [r3, #0]
      break;
 800a976:	bf00      	nop
  }

  return error;
 800a978:	7dfb      	ldrb	r3, [r7, #23]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3718      	adds	r7, #24
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b086      	sub	sp, #24
 800a986:	af00      	add	r7, sp, #0
 800a988:	60f8      	str	r0, [r7, #12]
 800a98a:	460b      	mov	r3, r1
 800a98c:	607a      	str	r2, [r7, #4]
 800a98e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a990:	2302      	movs	r3, #2
 800a992:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a99a:	69db      	ldr	r3, [r3, #28]
 800a99c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d002      	beq.n	800a9ae <USBH_MSC_SCSI_RequestSense+0x2c>
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	d03d      	beq.n	800aa28 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a9ac:	e05d      	b.n	800aa6a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	220e      	movs	r2, #14
 800a9b2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	2280      	movs	r2, #128	; 0x80
 800a9b8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	220a      	movs	r2, #10
 800a9c0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	3363      	adds	r3, #99	; 0x63
 800a9c8:	2210      	movs	r2, #16
 800a9ca:	2100      	movs	r1, #0
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f005 fc5f 	bl	8010290 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	2203      	movs	r2, #3
 800a9d6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a9da:	7afb      	ldrb	r3, [r7, #11]
 800a9dc:	015b      	lsls	r3, r3, #5
 800a9de:	b2da      	uxtb	r2, r3
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	220e      	movs	r2, #14
 800a9fa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	2202      	movs	r2, #2
 800aa12:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	f103 0210 	add.w	r2, r3, #16
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800aa22:	2301      	movs	r3, #1
 800aa24:	75fb      	strb	r3, [r7, #23]
      break;
 800aa26:	e020      	b.n	800aa6a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800aa28:	7afb      	ldrb	r3, [r7, #11]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f7ff fc07 	bl	800a240 <USBH_MSC_BOT_Process>
 800aa32:	4603      	mov	r3, r0
 800aa34:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800aa36:	7dfb      	ldrb	r3, [r7, #23]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d115      	bne.n	800aa68 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa42:	3302      	adds	r3, #2
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	f003 030f 	and.w	r3, r3, #15
 800aa4a:	b2da      	uxtb	r2, r3
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa56:	7b1a      	ldrb	r2, [r3, #12]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa62:	7b5a      	ldrb	r2, [r3, #13]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	709a      	strb	r2, [r3, #2]
      break;
 800aa68:	bf00      	nop
  }

  return error;
 800aa6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3718      	adds	r7, #24
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b086      	sub	sp, #24
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	607a      	str	r2, [r7, #4]
 800aa7e:	603b      	str	r3, [r7, #0]
 800aa80:	460b      	mov	r3, r1
 800aa82:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800aa84:	2302      	movs	r3, #2
 800aa86:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa8e:	69db      	ldr	r3, [r3, #28]
 800aa90:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d002      	beq.n	800aaa2 <USBH_MSC_SCSI_Write+0x2e>
 800aa9c:	2b02      	cmp	r3, #2
 800aa9e:	d047      	beq.n	800ab30 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800aaa0:	e04e      	b.n	800ab40 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	6a3b      	ldr	r3, [r7, #32]
 800aaac:	fb03 f202 	mul.w	r2, r3, r2
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	220a      	movs	r2, #10
 800aac0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	3363      	adds	r3, #99	; 0x63
 800aac8:	2210      	movs	r2, #16
 800aaca:	2100      	movs	r1, #0
 800aacc:	4618      	mov	r0, r3
 800aace:	f005 fbdf 	bl	8010290 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	222a      	movs	r2, #42	; 0x2a
 800aad6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800aada:	79fa      	ldrb	r2, [r7, #7]
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800aae2:	79ba      	ldrb	r2, [r7, #6]
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800aaea:	797a      	ldrb	r2, [r7, #5]
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800aaf2:	1d3b      	adds	r3, r7, #4
 800aaf4:	781a      	ldrb	r2, [r3, #0]
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800aafc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800ab06:	f107 0320 	add.w	r3, r7, #32
 800ab0a:	781a      	ldrb	r2, [r3, #0]
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	2201      	movs	r2, #1
 800ab16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	2202      	movs	r2, #2
 800ab1e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	683a      	ldr	r2, [r7, #0]
 800ab26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	75fb      	strb	r3, [r7, #23]
      break;
 800ab2e:	e007      	b.n	800ab40 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ab30:	7afb      	ldrb	r3, [r7, #11]
 800ab32:	4619      	mov	r1, r3
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f7ff fb83 	bl	800a240 <USBH_MSC_BOT_Process>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	75fb      	strb	r3, [r7, #23]
      break;
 800ab3e:	bf00      	nop
  }

  return error;
 800ab40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3718      	adds	r7, #24
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b086      	sub	sp, #24
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	60f8      	str	r0, [r7, #12]
 800ab52:	607a      	str	r2, [r7, #4]
 800ab54:	603b      	str	r3, [r7, #0]
 800ab56:	460b      	mov	r3, r1
 800ab58:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ab5a:	2302      	movs	r3, #2
 800ab5c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab64:	69db      	ldr	r3, [r3, #28]
 800ab66:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d002      	beq.n	800ab78 <USBH_MSC_SCSI_Read+0x2e>
 800ab72:	2b02      	cmp	r3, #2
 800ab74:	d047      	beq.n	800ac06 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800ab76:	e04e      	b.n	800ac16 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800ab7e:	461a      	mov	r2, r3
 800ab80:	6a3b      	ldr	r3, [r7, #32]
 800ab82:	fb03 f202 	mul.w	r2, r3, r2
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	2280      	movs	r2, #128	; 0x80
 800ab8e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	220a      	movs	r2, #10
 800ab96:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	3363      	adds	r3, #99	; 0x63
 800ab9e:	2210      	movs	r2, #16
 800aba0:	2100      	movs	r1, #0
 800aba2:	4618      	mov	r0, r3
 800aba4:	f005 fb74 	bl	8010290 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	2228      	movs	r2, #40	; 0x28
 800abac:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800abb0:	79fa      	ldrb	r2, [r7, #7]
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800abb8:	79ba      	ldrb	r2, [r7, #6]
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800abc0:	797a      	ldrb	r2, [r7, #5]
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800abc8:	1d3b      	adds	r3, r7, #4
 800abca:	781a      	ldrb	r2, [r3, #0]
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800abd2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800abdc:	f107 0320 	add.w	r3, r7, #32
 800abe0:	781a      	ldrb	r2, [r3, #0]
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	2202      	movs	r2, #2
 800abf4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	683a      	ldr	r2, [r7, #0]
 800abfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ac00:	2301      	movs	r3, #1
 800ac02:	75fb      	strb	r3, [r7, #23]
      break;
 800ac04:	e007      	b.n	800ac16 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ac06:	7afb      	ldrb	r3, [r7, #11]
 800ac08:	4619      	mov	r1, r3
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f7ff fb18 	bl	800a240 <USBH_MSC_BOT_Process>
 800ac10:	4603      	mov	r3, r0
 800ac12:	75fb      	strb	r3, [r7, #23]
      break;
 800ac14:	bf00      	nop
  }

  return error;
 800ac16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3718      	adds	r7, #24
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d101      	bne.n	800ac38 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ac34:	2302      	movs	r3, #2
 800ac36:	e029      	b.n	800ac8c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	79fa      	ldrb	r2, [r7, #7]
 800ac3c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2200      	movs	r2, #0
 800ac44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f000 f81f 	bl	800ac94 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2200      	movs	r2, #0
 800ac62:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d003      	beq.n	800ac84 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	f005 f823 	bl	800fcd0 <USBH_LL_Init>

  return USBH_OK;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3710      	adds	r7, #16
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aca0:	2300      	movs	r3, #0
 800aca2:	60fb      	str	r3, [r7, #12]
 800aca4:	e009      	b.n	800acba <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	33e0      	adds	r3, #224	; 0xe0
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4413      	add	r3, r2
 800acb0:	2200      	movs	r2, #0
 800acb2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	3301      	adds	r3, #1
 800acb8:	60fb      	str	r3, [r7, #12]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2b0f      	cmp	r3, #15
 800acbe:	d9f2      	bls.n	800aca6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800acc0:	2300      	movs	r3, #0
 800acc2:	60fb      	str	r3, [r7, #12]
 800acc4:	e009      	b.n	800acda <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	4413      	add	r3, r2
 800accc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800acd0:	2200      	movs	r2, #0
 800acd2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	3301      	adds	r3, #1
 800acd8:	60fb      	str	r3, [r7, #12]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ace0:	d3f1      	bcc.n	800acc6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2201      	movs	r2, #1
 800acf2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2201      	movs	r2, #1
 800ad00:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2240      	movs	r2, #64	; 0x40
 800ad06:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800ad2e:	2300      	movs	r3, #0
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3714      	adds	r7, #20
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ad46:	2300      	movs	r3, #0
 800ad48:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d016      	beq.n	800ad7e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d10e      	bne.n	800ad78 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ad60:	1c59      	adds	r1, r3, #1
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	33de      	adds	r3, #222	; 0xde
 800ad6c:	6839      	ldr	r1, [r7, #0]
 800ad6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ad72:	2300      	movs	r3, #0
 800ad74:	73fb      	strb	r3, [r7, #15]
 800ad76:	e004      	b.n	800ad82 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ad78:	2302      	movs	r3, #2
 800ad7a:	73fb      	strb	r3, [r7, #15]
 800ad7c:	e001      	b.n	800ad82 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ad7e:	2302      	movs	r3, #2
 800ad80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ad82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3714      	adds	r7, #20
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b085      	sub	sp, #20
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	460b      	mov	r3, r1
 800ad9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800ada6:	78fa      	ldrb	r2, [r7, #3]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d204      	bcs.n	800adb6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	78fa      	ldrb	r2, [r7, #3]
 800adb0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800adb4:	e001      	b.n	800adba <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800adb6:	2302      	movs	r3, #2
 800adb8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800adba:	7bfb      	ldrb	r3, [r7, #15]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3714      	adds	r7, #20
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800adc8:	b480      	push	{r7}
 800adca:	b087      	sub	sp, #28
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	4608      	mov	r0, r1
 800add2:	4611      	mov	r1, r2
 800add4:	461a      	mov	r2, r3
 800add6:	4603      	mov	r3, r0
 800add8:	70fb      	strb	r3, [r7, #3]
 800adda:	460b      	mov	r3, r1
 800addc:	70bb      	strb	r3, [r7, #2]
 800adde:	4613      	mov	r3, r2
 800ade0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ade2:	2300      	movs	r3, #0
 800ade4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ade6:	2300      	movs	r3, #0
 800ade8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800adf0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800adf2:	e025      	b.n	800ae40 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800adf4:	7dfb      	ldrb	r3, [r7, #23]
 800adf6:	221a      	movs	r2, #26
 800adf8:	fb02 f303 	mul.w	r3, r2, r3
 800adfc:	3308      	adds	r3, #8
 800adfe:	68fa      	ldr	r2, [r7, #12]
 800ae00:	4413      	add	r3, r2
 800ae02:	3302      	adds	r3, #2
 800ae04:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	795b      	ldrb	r3, [r3, #5]
 800ae0a:	78fa      	ldrb	r2, [r7, #3]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d002      	beq.n	800ae16 <USBH_FindInterface+0x4e>
 800ae10:	78fb      	ldrb	r3, [r7, #3]
 800ae12:	2bff      	cmp	r3, #255	; 0xff
 800ae14:	d111      	bne.n	800ae3a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ae1a:	78ba      	ldrb	r2, [r7, #2]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d002      	beq.n	800ae26 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ae20:	78bb      	ldrb	r3, [r7, #2]
 800ae22:	2bff      	cmp	r3, #255	; 0xff
 800ae24:	d109      	bne.n	800ae3a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ae2a:	787a      	ldrb	r2, [r7, #1]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d002      	beq.n	800ae36 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ae30:	787b      	ldrb	r3, [r7, #1]
 800ae32:	2bff      	cmp	r3, #255	; 0xff
 800ae34:	d101      	bne.n	800ae3a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ae36:	7dfb      	ldrb	r3, [r7, #23]
 800ae38:	e006      	b.n	800ae48 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ae3a:	7dfb      	ldrb	r3, [r7, #23]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ae40:	7dfb      	ldrb	r3, [r7, #23]
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d9d6      	bls.n	800adf4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ae46:	23ff      	movs	r3, #255	; 0xff
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	371c      	adds	r7, #28
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f004 ff73 	bl	800fd48 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800ae62:	2101      	movs	r1, #1
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f005 f88c 	bl	800ff82 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b088      	sub	sp, #32
 800ae78:	af04      	add	r7, sp, #16
 800ae7a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ae7c:	2302      	movs	r3, #2
 800ae7e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ae80:	2300      	movs	r3, #0
 800ae82:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d102      	bne.n	800ae96 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2203      	movs	r2, #3
 800ae94:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	2b0b      	cmp	r3, #11
 800ae9e:	f200 81be 	bhi.w	800b21e <USBH_Process+0x3aa>
 800aea2:	a201      	add	r2, pc, #4	; (adr r2, 800aea8 <USBH_Process+0x34>)
 800aea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea8:	0800aed9 	.word	0x0800aed9
 800aeac:	0800af0b 	.word	0x0800af0b
 800aeb0:	0800af73 	.word	0x0800af73
 800aeb4:	0800b1b9 	.word	0x0800b1b9
 800aeb8:	0800b21f 	.word	0x0800b21f
 800aebc:	0800b017 	.word	0x0800b017
 800aec0:	0800b15f 	.word	0x0800b15f
 800aec4:	0800b04d 	.word	0x0800b04d
 800aec8:	0800b06d 	.word	0x0800b06d
 800aecc:	0800b08d 	.word	0x0800b08d
 800aed0:	0800b0d1 	.word	0x0800b0d1
 800aed4:	0800b1a1 	.word	0x0800b1a1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f000 819e 	beq.w	800b222 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2201      	movs	r2, #1
 800aeea:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800aeec:	20c8      	movs	r0, #200	; 0xc8
 800aeee:	f005 f8bf 	bl	8010070 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f004 ff85 	bl	800fe02 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2200      	movs	r2, #0
 800af04:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800af08:	e18b      	b.n	800b222 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800af10:	2b01      	cmp	r3, #1
 800af12:	d107      	bne.n	800af24 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2202      	movs	r2, #2
 800af20:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800af22:	e18d      	b.n	800b240 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800af2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af2e:	d914      	bls.n	800af5a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800af36:	3301      	adds	r3, #1
 800af38:	b2da      	uxtb	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800af46:	2b03      	cmp	r3, #3
 800af48:	d903      	bls.n	800af52 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	220d      	movs	r2, #13
 800af4e:	701a      	strb	r2, [r3, #0]
      break;
 800af50:	e176      	b.n	800b240 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	701a      	strb	r2, [r3, #0]
      break;
 800af58:	e172      	b.n	800b240 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800af60:	f103 020a 	add.w	r2, r3, #10
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800af6a:	200a      	movs	r0, #10
 800af6c:	f005 f880 	bl	8010070 <USBH_Delay>
      break;
 800af70:	e166      	b.n	800b240 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d005      	beq.n	800af88 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af82:	2104      	movs	r1, #4
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800af88:	2064      	movs	r0, #100	; 0x64
 800af8a:	f005 f871 	bl	8010070 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f004 ff10 	bl	800fdb4 <USBH_LL_GetSpeed>
 800af94:	4603      	mov	r3, r0
 800af96:	461a      	mov	r2, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2205      	movs	r2, #5
 800afa2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800afa4:	2100      	movs	r1, #0
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f001 fa2b 	bl	800c402 <USBH_AllocPipe>
 800afac:	4603      	mov	r3, r0
 800afae:	461a      	mov	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800afb4:	2180      	movs	r1, #128	; 0x80
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f001 fa23 	bl	800c402 <USBH_AllocPipe>
 800afbc:	4603      	mov	r3, r0
 800afbe:	461a      	mov	r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	7919      	ldrb	r1, [r3, #4]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800afd8:	b292      	uxth	r2, r2
 800afda:	9202      	str	r2, [sp, #8]
 800afdc:	2200      	movs	r2, #0
 800afde:	9201      	str	r2, [sp, #4]
 800afe0:	9300      	str	r3, [sp, #0]
 800afe2:	4603      	mov	r3, r0
 800afe4:	2280      	movs	r2, #128	; 0x80
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f001 f9dc 	bl	800c3a4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	7959      	ldrb	r1, [r3, #5]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b000:	b292      	uxth	r2, r2
 800b002:	9202      	str	r2, [sp, #8]
 800b004:	2200      	movs	r2, #0
 800b006:	9201      	str	r2, [sp, #4]
 800b008:	9300      	str	r3, [sp, #0]
 800b00a:	4603      	mov	r3, r0
 800b00c:	2200      	movs	r2, #0
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f001 f9c8 	bl	800c3a4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b014:	e114      	b.n	800b240 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 f918 	bl	800b24c <USBH_HandleEnum>
 800b01c:	4603      	mov	r3, r0
 800b01e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b020:	7bbb      	ldrb	r3, [r7, #14]
 800b022:	b2db      	uxtb	r3, r3
 800b024:	2b00      	cmp	r3, #0
 800b026:	f040 80fe 	bne.w	800b226 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d103      	bne.n	800b044 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2208      	movs	r2, #8
 800b040:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b042:	e0f0      	b.n	800b226 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2207      	movs	r2, #7
 800b048:	701a      	strb	r2, [r3, #0]
      break;
 800b04a:	e0ec      	b.n	800b226 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b052:	2b00      	cmp	r3, #0
 800b054:	f000 80e9 	beq.w	800b22a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b05e:	2101      	movs	r1, #1
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2208      	movs	r2, #8
 800b068:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b06a:	e0de      	b.n	800b22a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b072:	b29b      	uxth	r3, r3
 800b074:	4619      	mov	r1, r3
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 fc2c 	bl	800b8d4 <USBH_SetCfg>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f040 80d5 	bne.w	800b22e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2209      	movs	r2, #9
 800b088:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b08a:	e0d0      	b.n	800b22e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b092:	f003 0320 	and.w	r3, r3, #32
 800b096:	2b00      	cmp	r3, #0
 800b098:	d016      	beq.n	800b0c8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b09a:	2101      	movs	r1, #1
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 fc3c 	bl	800b91a <USBH_SetFeature>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b0a6:	7bbb      	ldrb	r3, [r7, #14]
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d103      	bne.n	800b0b6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	220a      	movs	r2, #10
 800b0b2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b0b4:	e0bd      	b.n	800b232 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800b0b6:	7bbb      	ldrb	r3, [r7, #14]
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	2b03      	cmp	r3, #3
 800b0bc:	f040 80b9 	bne.w	800b232 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	220a      	movs	r2, #10
 800b0c4:	701a      	strb	r2, [r3, #0]
      break;
 800b0c6:	e0b4      	b.n	800b232 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	220a      	movs	r2, #10
 800b0cc:	701a      	strb	r2, [r3, #0]
      break;
 800b0ce:	e0b0      	b.n	800b232 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	f000 80ad 	beq.w	800b236 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	73fb      	strb	r3, [r7, #15]
 800b0e8:	e016      	b.n	800b118 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b0ea:	7bfa      	ldrb	r2, [r7, #15]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	32de      	adds	r2, #222	; 0xde
 800b0f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0f4:	791a      	ldrb	r2, [r3, #4]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d108      	bne.n	800b112 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b100:	7bfa      	ldrb	r2, [r7, #15]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	32de      	adds	r2, #222	; 0xde
 800b106:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b110:	e005      	b.n	800b11e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b112:	7bfb      	ldrb	r3, [r7, #15]
 800b114:	3301      	adds	r3, #1
 800b116:	73fb      	strb	r3, [r7, #15]
 800b118:	7bfb      	ldrb	r3, [r7, #15]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d0e5      	beq.n	800b0ea <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b124:	2b00      	cmp	r3, #0
 800b126:	d016      	beq.n	800b156 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	4798      	blx	r3
 800b134:	4603      	mov	r3, r0
 800b136:	2b00      	cmp	r3, #0
 800b138:	d109      	bne.n	800b14e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2206      	movs	r2, #6
 800b13e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b146:	2103      	movs	r1, #3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b14c:	e073      	b.n	800b236 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	220d      	movs	r2, #13
 800b152:	701a      	strb	r2, [r3, #0]
      break;
 800b154:	e06f      	b.n	800b236 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	220d      	movs	r2, #13
 800b15a:	701a      	strb	r2, [r3, #0]
      break;
 800b15c:	e06b      	b.n	800b236 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b164:	2b00      	cmp	r3, #0
 800b166:	d017      	beq.n	800b198 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b16e:	691b      	ldr	r3, [r3, #16]
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	4798      	blx	r3
 800b174:	4603      	mov	r3, r0
 800b176:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b178:	7bbb      	ldrb	r3, [r7, #14]
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d103      	bne.n	800b188 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	220b      	movs	r2, #11
 800b184:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b186:	e058      	b.n	800b23a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800b188:	7bbb      	ldrb	r3, [r7, #14]
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	d154      	bne.n	800b23a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	220d      	movs	r2, #13
 800b194:	701a      	strb	r2, [r3, #0]
      break;
 800b196:	e050      	b.n	800b23a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	220d      	movs	r2, #13
 800b19c:	701a      	strb	r2, [r3, #0]
      break;
 800b19e:	e04c      	b.n	800b23a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d049      	beq.n	800b23e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1b0:	695b      	ldr	r3, [r3, #20]
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	4798      	blx	r3
      }
      break;
 800b1b6:	e042      	b.n	800b23e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f7ff fd67 	bl	800ac94 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d009      	beq.n	800b1e4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d005      	beq.n	800b1fa <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b1f4:	2105      	movs	r1, #5
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b200:	b2db      	uxtb	r3, r3
 800b202:	2b01      	cmp	r3, #1
 800b204:	d107      	bne.n	800b216 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7ff fe20 	bl	800ae54 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b214:	e014      	b.n	800b240 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f004 fd96 	bl	800fd48 <USBH_LL_Start>
      break;
 800b21c:	e010      	b.n	800b240 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800b21e:	bf00      	nop
 800b220:	e00e      	b.n	800b240 <USBH_Process+0x3cc>
      break;
 800b222:	bf00      	nop
 800b224:	e00c      	b.n	800b240 <USBH_Process+0x3cc>
      break;
 800b226:	bf00      	nop
 800b228:	e00a      	b.n	800b240 <USBH_Process+0x3cc>
    break;
 800b22a:	bf00      	nop
 800b22c:	e008      	b.n	800b240 <USBH_Process+0x3cc>
      break;
 800b22e:	bf00      	nop
 800b230:	e006      	b.n	800b240 <USBH_Process+0x3cc>
      break;
 800b232:	bf00      	nop
 800b234:	e004      	b.n	800b240 <USBH_Process+0x3cc>
      break;
 800b236:	bf00      	nop
 800b238:	e002      	b.n	800b240 <USBH_Process+0x3cc>
      break;
 800b23a:	bf00      	nop
 800b23c:	e000      	b.n	800b240 <USBH_Process+0x3cc>
      break;
 800b23e:	bf00      	nop
  }
  return USBH_OK;
 800b240:	2300      	movs	r3, #0
}
 800b242:	4618      	mov	r0, r3
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop

0800b24c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b088      	sub	sp, #32
 800b250:	af04      	add	r7, sp, #16
 800b252:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b254:	2301      	movs	r3, #1
 800b256:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b258:	2301      	movs	r3, #1
 800b25a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	785b      	ldrb	r3, [r3, #1]
 800b260:	2b07      	cmp	r3, #7
 800b262:	f200 81c1 	bhi.w	800b5e8 <USBH_HandleEnum+0x39c>
 800b266:	a201      	add	r2, pc, #4	; (adr r2, 800b26c <USBH_HandleEnum+0x20>)
 800b268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b26c:	0800b28d 	.word	0x0800b28d
 800b270:	0800b34b 	.word	0x0800b34b
 800b274:	0800b3b5 	.word	0x0800b3b5
 800b278:	0800b443 	.word	0x0800b443
 800b27c:	0800b4ad 	.word	0x0800b4ad
 800b280:	0800b51d 	.word	0x0800b51d
 800b284:	0800b563 	.word	0x0800b563
 800b288:	0800b5a9 	.word	0x0800b5a9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b28c:	2108      	movs	r1, #8
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 fa50 	bl	800b734 <USBH_Get_DevDesc>
 800b294:	4603      	mov	r3, r0
 800b296:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b298:	7bbb      	ldrb	r3, [r7, #14]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d130      	bne.n	800b300 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	7919      	ldrb	r1, [r3, #4]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b2c2:	b292      	uxth	r2, r2
 800b2c4:	9202      	str	r2, [sp, #8]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	9201      	str	r2, [sp, #4]
 800b2ca:	9300      	str	r3, [sp, #0]
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2280      	movs	r2, #128	; 0x80
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f001 f867 	bl	800c3a4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	7959      	ldrb	r1, [r3, #5]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b2ea:	b292      	uxth	r2, r2
 800b2ec:	9202      	str	r2, [sp, #8]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	9201      	str	r2, [sp, #4]
 800b2f2:	9300      	str	r3, [sp, #0]
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f001 f853 	bl	800c3a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b2fe:	e175      	b.n	800b5ec <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b300:	7bbb      	ldrb	r3, [r7, #14]
 800b302:	2b03      	cmp	r3, #3
 800b304:	f040 8172 	bne.w	800b5ec <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b30e:	3301      	adds	r3, #1
 800b310:	b2da      	uxtb	r2, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b31e:	2b03      	cmp	r3, #3
 800b320:	d903      	bls.n	800b32a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	220d      	movs	r2, #13
 800b326:	701a      	strb	r2, [r3, #0]
      break;
 800b328:	e160      	b.n	800b5ec <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	795b      	ldrb	r3, [r3, #5]
 800b32e:	4619      	mov	r1, r3
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f001 f887 	bl	800c444 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	791b      	ldrb	r3, [r3, #4]
 800b33a:	4619      	mov	r1, r3
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f001 f881 	bl	800c444 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	701a      	strb	r2, [r3, #0]
      break;
 800b348:	e150      	b.n	800b5ec <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b34a:	2112      	movs	r1, #18
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 f9f1 	bl	800b734 <USBH_Get_DevDesc>
 800b352:	4603      	mov	r3, r0
 800b354:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b356:	7bbb      	ldrb	r3, [r7, #14]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d103      	bne.n	800b364 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2202      	movs	r2, #2
 800b360:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b362:	e145      	b.n	800b5f0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b364:	7bbb      	ldrb	r3, [r7, #14]
 800b366:	2b03      	cmp	r3, #3
 800b368:	f040 8142 	bne.w	800b5f0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b372:	3301      	adds	r3, #1
 800b374:	b2da      	uxtb	r2, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b382:	2b03      	cmp	r3, #3
 800b384:	d903      	bls.n	800b38e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	220d      	movs	r2, #13
 800b38a:	701a      	strb	r2, [r3, #0]
      break;
 800b38c:	e130      	b.n	800b5f0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	795b      	ldrb	r3, [r3, #5]
 800b392:	4619      	mov	r1, r3
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f001 f855 	bl	800c444 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	791b      	ldrb	r3, [r3, #4]
 800b39e:	4619      	mov	r1, r3
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f001 f84f 	bl	800c444 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	701a      	strb	r2, [r3, #0]
      break;
 800b3b2:	e11d      	b.n	800b5f0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b3b4:	2101      	movs	r1, #1
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fa68 	bl	800b88c <USBH_SetAddress>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b3c0:	7bbb      	ldrb	r3, [r7, #14]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d132      	bne.n	800b42c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b3c6:	2002      	movs	r0, #2
 800b3c8:	f004 fe52 	bl	8010070 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2203      	movs	r2, #3
 800b3d8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	7919      	ldrb	r1, [r3, #4]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b3ee:	b292      	uxth	r2, r2
 800b3f0:	9202      	str	r2, [sp, #8]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	9201      	str	r2, [sp, #4]
 800b3f6:	9300      	str	r3, [sp, #0]
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2280      	movs	r2, #128	; 0x80
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 ffd1 	bl	800c3a4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	7959      	ldrb	r1, [r3, #5]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b416:	b292      	uxth	r2, r2
 800b418:	9202      	str	r2, [sp, #8]
 800b41a:	2200      	movs	r2, #0
 800b41c:	9201      	str	r2, [sp, #4]
 800b41e:	9300      	str	r3, [sp, #0]
 800b420:	4603      	mov	r3, r0
 800b422:	2200      	movs	r2, #0
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 ffbd 	bl	800c3a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b42a:	e0e3      	b.n	800b5f4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b42c:	7bbb      	ldrb	r3, [r7, #14]
 800b42e:	2b03      	cmp	r3, #3
 800b430:	f040 80e0 	bne.w	800b5f4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	220d      	movs	r2, #13
 800b438:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	705a      	strb	r2, [r3, #1]
      break;
 800b440:	e0d8      	b.n	800b5f4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b442:	2109      	movs	r1, #9
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 f99d 	bl	800b784 <USBH_Get_CfgDesc>
 800b44a:	4603      	mov	r3, r0
 800b44c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b44e:	7bbb      	ldrb	r3, [r7, #14]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d103      	bne.n	800b45c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2204      	movs	r2, #4
 800b458:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b45a:	e0cd      	b.n	800b5f8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b45c:	7bbb      	ldrb	r3, [r7, #14]
 800b45e:	2b03      	cmp	r3, #3
 800b460:	f040 80ca 	bne.w	800b5f8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b46a:	3301      	adds	r3, #1
 800b46c:	b2da      	uxtb	r2, r3
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b47a:	2b03      	cmp	r3, #3
 800b47c:	d903      	bls.n	800b486 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	220d      	movs	r2, #13
 800b482:	701a      	strb	r2, [r3, #0]
      break;
 800b484:	e0b8      	b.n	800b5f8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	795b      	ldrb	r3, [r3, #5]
 800b48a:	4619      	mov	r1, r3
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 ffd9 	bl	800c444 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	791b      	ldrb	r3, [r3, #4]
 800b496:	4619      	mov	r1, r3
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 ffd3 	bl	800c444 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	701a      	strb	r2, [r3, #0]
      break;
 800b4aa:	e0a5      	b.n	800b5f8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 f965 	bl	800b784 <USBH_Get_CfgDesc>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b4be:	7bbb      	ldrb	r3, [r7, #14]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d103      	bne.n	800b4cc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2205      	movs	r2, #5
 800b4c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b4ca:	e097      	b.n	800b5fc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b4cc:	7bbb      	ldrb	r3, [r7, #14]
 800b4ce:	2b03      	cmp	r3, #3
 800b4d0:	f040 8094 	bne.w	800b5fc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b4da:	3301      	adds	r3, #1
 800b4dc:	b2da      	uxtb	r2, r3
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b4ea:	2b03      	cmp	r3, #3
 800b4ec:	d903      	bls.n	800b4f6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	220d      	movs	r2, #13
 800b4f2:	701a      	strb	r2, [r3, #0]
      break;
 800b4f4:	e082      	b.n	800b5fc <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	795b      	ldrb	r3, [r3, #5]
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 ffa1 	bl	800c444 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	791b      	ldrb	r3, [r3, #4]
 800b506:	4619      	mov	r1, r3
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 ff9b 	bl	800c444 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	701a      	strb	r2, [r3, #0]
      break;
 800b51a:	e06f      	b.n	800b5fc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b522:	2b00      	cmp	r3, #0
 800b524:	d019      	beq.n	800b55a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b532:	23ff      	movs	r3, #255	; 0xff
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 f949 	bl	800b7cc <USBH_Get_StringDesc>
 800b53a:	4603      	mov	r3, r0
 800b53c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b53e:	7bbb      	ldrb	r3, [r7, #14]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d103      	bne.n	800b54c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2206      	movs	r2, #6
 800b548:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b54a:	e059      	b.n	800b600 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b54c:	7bbb      	ldrb	r3, [r7, #14]
 800b54e:	2b03      	cmp	r3, #3
 800b550:	d156      	bne.n	800b600 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2206      	movs	r2, #6
 800b556:	705a      	strb	r2, [r3, #1]
      break;
 800b558:	e052      	b.n	800b600 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2206      	movs	r2, #6
 800b55e:	705a      	strb	r2, [r3, #1]
      break;
 800b560:	e04e      	b.n	800b600 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d019      	beq.n	800b5a0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b578:	23ff      	movs	r3, #255	; 0xff
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 f926 	bl	800b7cc <USBH_Get_StringDesc>
 800b580:	4603      	mov	r3, r0
 800b582:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b584:	7bbb      	ldrb	r3, [r7, #14]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d103      	bne.n	800b592 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2207      	movs	r2, #7
 800b58e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b590:	e038      	b.n	800b604 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b592:	7bbb      	ldrb	r3, [r7, #14]
 800b594:	2b03      	cmp	r3, #3
 800b596:	d135      	bne.n	800b604 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2207      	movs	r2, #7
 800b59c:	705a      	strb	r2, [r3, #1]
      break;
 800b59e:	e031      	b.n	800b604 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2207      	movs	r2, #7
 800b5a4:	705a      	strb	r2, [r3, #1]
      break;
 800b5a6:	e02d      	b.n	800b604 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d017      	beq.n	800b5e2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b5be:	23ff      	movs	r3, #255	; 0xff
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f903 	bl	800b7cc <USBH_Get_StringDesc>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b5ca:	7bbb      	ldrb	r3, [r7, #14]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d102      	bne.n	800b5d6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b5d4:	e018      	b.n	800b608 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b5d6:	7bbb      	ldrb	r3, [r7, #14]
 800b5d8:	2b03      	cmp	r3, #3
 800b5da:	d115      	bne.n	800b608 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	73fb      	strb	r3, [r7, #15]
      break;
 800b5e0:	e012      	b.n	800b608 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	73fb      	strb	r3, [r7, #15]
      break;
 800b5e6:	e00f      	b.n	800b608 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b5e8:	bf00      	nop
 800b5ea:	e00e      	b.n	800b60a <USBH_HandleEnum+0x3be>
      break;
 800b5ec:	bf00      	nop
 800b5ee:	e00c      	b.n	800b60a <USBH_HandleEnum+0x3be>
      break;
 800b5f0:	bf00      	nop
 800b5f2:	e00a      	b.n	800b60a <USBH_HandleEnum+0x3be>
      break;
 800b5f4:	bf00      	nop
 800b5f6:	e008      	b.n	800b60a <USBH_HandleEnum+0x3be>
      break;
 800b5f8:	bf00      	nop
 800b5fa:	e006      	b.n	800b60a <USBH_HandleEnum+0x3be>
      break;
 800b5fc:	bf00      	nop
 800b5fe:	e004      	b.n	800b60a <USBH_HandleEnum+0x3be>
      break;
 800b600:	bf00      	nop
 800b602:	e002      	b.n	800b60a <USBH_HandleEnum+0x3be>
      break;
 800b604:	bf00      	nop
 800b606:	e000      	b.n	800b60a <USBH_HandleEnum+0x3be>
      break;
 800b608:	bf00      	nop
  }
  return Status;
 800b60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3710      	adds	r7, #16
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	683a      	ldr	r2, [r7, #0]
 800b622:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b626:	bf00      	nop
 800b628:	370c      	adds	r7, #12
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr

0800b632 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b632:	b580      	push	{r7, lr}
 800b634:	b082      	sub	sp, #8
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b640:	1c5a      	adds	r2, r3, #1
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 f804 	bl	800b656 <USBH_HandleSof>
}
 800b64e:	bf00      	nop
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b656:	b580      	push	{r7, lr}
 800b658:	b082      	sub	sp, #8
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	b2db      	uxtb	r3, r3
 800b664:	2b0b      	cmp	r3, #11
 800b666:	d10a      	bne.n	800b67e <USBH_HandleSof+0x28>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d005      	beq.n	800b67e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b678:	699b      	ldr	r3, [r3, #24]
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	4798      	blx	r3
  }
}
 800b67e:	bf00      	nop
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b686:	b480      	push	{r7}
 800b688:	b083      	sub	sp, #12
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2201      	movs	r2, #1
 800b692:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b696:	bf00      	nop
}
 800b698:	370c      	adds	r7, #12
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr

0800b6a2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	b083      	sub	sp, #12
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b6b2:	bf00      	nop
}
 800b6b4:	370c      	adds	r7, #12
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr

0800b6be <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b6be:	b480      	push	{r7}
 800b6c0:	b083      	sub	sp, #12
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b6de:	2300      	movs	r3, #0
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	370c      	adds	r7, #12
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr

0800b6ec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2200      	movs	r2, #0
 800b708:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f004 fb36 	bl	800fd7e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	791b      	ldrb	r3, [r3, #4]
 800b716:	4619      	mov	r1, r3
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 fe93 	bl	800c444 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	795b      	ldrb	r3, [r3, #5]
 800b722:	4619      	mov	r1, r3
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 fe8d 	bl	800c444 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b72a:	2300      	movs	r3, #0
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3708      	adds	r7, #8
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b086      	sub	sp, #24
 800b738:	af02      	add	r7, sp, #8
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	460b      	mov	r3, r1
 800b73e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b746:	78fb      	ldrb	r3, [r7, #3]
 800b748:	b29b      	uxth	r3, r3
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	4613      	mov	r3, r2
 800b74e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b752:	2100      	movs	r1, #0
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 f864 	bl	800b822 <USBH_GetDescriptor>
 800b75a:	4603      	mov	r3, r0
 800b75c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800b75e:	7bfb      	ldrb	r3, [r7, #15]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d10a      	bne.n	800b77a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b770:	78fa      	ldrb	r2, [r7, #3]
 800b772:	b292      	uxth	r2, r2
 800b774:	4619      	mov	r1, r3
 800b776:	f000 f919 	bl	800b9ac <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b77a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af02      	add	r7, sp, #8
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	460b      	mov	r3, r1
 800b78e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	331c      	adds	r3, #28
 800b794:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b796:	887b      	ldrh	r3, [r7, #2]
 800b798:	9300      	str	r3, [sp, #0]
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 f83d 	bl	800b822 <USBH_GetDescriptor>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b7ac:	7bfb      	ldrb	r3, [r7, #15]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d107      	bne.n	800b7c2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b7b2:	887b      	ldrh	r3, [r7, #2]
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	68b9      	ldr	r1, [r7, #8]
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 f989 	bl	800bad0 <USBH_ParseCfgDesc>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b7c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3710      	adds	r7, #16
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b088      	sub	sp, #32
 800b7d0:	af02      	add	r7, sp, #8
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	607a      	str	r2, [r7, #4]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	460b      	mov	r3, r1
 800b7da:	72fb      	strb	r3, [r7, #11]
 800b7dc:	4613      	mov	r3, r2
 800b7de:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800b7e0:	7afb      	ldrb	r3, [r7, #11]
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b7e8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b7f0:	893b      	ldrh	r3, [r7, #8]
 800b7f2:	9300      	str	r3, [sp, #0]
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	2100      	movs	r1, #0
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f000 f812 	bl	800b822 <USBH_GetDescriptor>
 800b7fe:	4603      	mov	r3, r0
 800b800:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b802:	7dfb      	ldrb	r3, [r7, #23]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d107      	bne.n	800b818 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b80e:	893a      	ldrh	r2, [r7, #8]
 800b810:	6879      	ldr	r1, [r7, #4]
 800b812:	4618      	mov	r0, r3
 800b814:	f000 fb26 	bl	800be64 <USBH_ParseStringDesc>
  }

  return status;
 800b818:	7dfb      	ldrb	r3, [r7, #23]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3718      	adds	r7, #24
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b084      	sub	sp, #16
 800b826:	af00      	add	r7, sp, #0
 800b828:	60f8      	str	r0, [r7, #12]
 800b82a:	607b      	str	r3, [r7, #4]
 800b82c:	460b      	mov	r3, r1
 800b82e:	72fb      	strb	r3, [r7, #11]
 800b830:	4613      	mov	r3, r2
 800b832:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	789b      	ldrb	r3, [r3, #2]
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d11c      	bne.n	800b876 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b83c:	7afb      	ldrb	r3, [r7, #11]
 800b83e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b842:	b2da      	uxtb	r2, r3
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2206      	movs	r2, #6
 800b84c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	893a      	ldrh	r2, [r7, #8]
 800b852:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b854:	893b      	ldrh	r3, [r7, #8]
 800b856:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b85a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b85e:	d104      	bne.n	800b86a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f240 4209 	movw	r2, #1033	; 0x409
 800b866:	829a      	strh	r2, [r3, #20]
 800b868:	e002      	b.n	800b870 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	8b3a      	ldrh	r2, [r7, #24]
 800b874:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b876:	8b3b      	ldrh	r3, [r7, #24]
 800b878:	461a      	mov	r2, r3
 800b87a:	6879      	ldr	r1, [r7, #4]
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	f000 fb3f 	bl	800bf00 <USBH_CtlReq>
 800b882:	4603      	mov	r3, r0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	460b      	mov	r3, r1
 800b896:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	789b      	ldrb	r3, [r3, #2]
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d10f      	bne.n	800b8c0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2205      	movs	r2, #5
 800b8aa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b8ac:	78fb      	ldrb	r3, [r7, #3]
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 fb1b 	bl	800bf00 <USBH_CtlReq>
 800b8ca:	4603      	mov	r3, r0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	460b      	mov	r3, r1
 800b8de:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	789b      	ldrb	r3, [r3, #2]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d10e      	bne.n	800b906 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2209      	movs	r2, #9
 800b8f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	887a      	ldrh	r2, [r7, #2]
 800b8f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2200      	movs	r2, #0
 800b904:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b906:	2200      	movs	r2, #0
 800b908:	2100      	movs	r1, #0
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 faf8 	bl	800bf00 <USBH_CtlReq>
 800b910:	4603      	mov	r3, r0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b082      	sub	sp, #8
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
 800b922:	460b      	mov	r3, r1
 800b924:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	789b      	ldrb	r3, [r3, #2]
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d10f      	bne.n	800b94e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2200      	movs	r2, #0
 800b932:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2203      	movs	r2, #3
 800b938:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b93a:	78fb      	ldrb	r3, [r7, #3]
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2200      	movs	r2, #0
 800b946:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b94e:	2200      	movs	r2, #0
 800b950:	2100      	movs	r1, #0
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 fad4 	bl	800bf00 <USBH_CtlReq>
 800b958:	4603      	mov	r3, r0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3708      	adds	r7, #8
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}

0800b962 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b082      	sub	sp, #8
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
 800b96a:	460b      	mov	r3, r1
 800b96c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	789b      	ldrb	r3, [r3, #2]
 800b972:	2b01      	cmp	r3, #1
 800b974:	d10f      	bne.n	800b996 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2202      	movs	r2, #2
 800b97a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2200      	movs	r2, #0
 800b986:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b988:	78fb      	ldrb	r3, [r7, #3]
 800b98a:	b29a      	uxth	r2, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800b996:	2200      	movs	r2, #0
 800b998:	2100      	movs	r1, #0
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 fab0 	bl	800bf00 <USBH_CtlReq>
 800b9a0:	4603      	mov	r3, r0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3708      	adds	r7, #8
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
	...

0800b9ac <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	781a      	ldrb	r2, [r3, #0]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	785a      	ldrb	r2, [r3, #1]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	3302      	adds	r3, #2
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	3303      	adds	r3, #3
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	021b      	lsls	r3, r3, #8
 800b9dc:	b29b      	uxth	r3, r3
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	b29a      	uxth	r2, r3
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	791a      	ldrb	r2, [r3, #4]
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	795a      	ldrb	r2, [r3, #5]
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	799a      	ldrb	r2, [r3, #6]
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	79da      	ldrb	r2, [r3, #7]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	79db      	ldrb	r3, [r3, #7]
 800ba0a:	2b20      	cmp	r3, #32
 800ba0c:	dc0f      	bgt.n	800ba2e <USBH_ParseDevDesc+0x82>
 800ba0e:	2b08      	cmp	r3, #8
 800ba10:	db14      	blt.n	800ba3c <USBH_ParseDevDesc+0x90>
 800ba12:	3b08      	subs	r3, #8
 800ba14:	4a2d      	ldr	r2, [pc, #180]	; (800bacc <USBH_ParseDevDesc+0x120>)
 800ba16:	fa22 f303 	lsr.w	r3, r2, r3
 800ba1a:	f003 0301 	and.w	r3, r3, #1
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	bf14      	ite	ne
 800ba22:	2301      	movne	r3, #1
 800ba24:	2300      	moveq	r3, #0
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d102      	bne.n	800ba32 <USBH_ParseDevDesc+0x86>
 800ba2c:	e006      	b.n	800ba3c <USBH_ParseDevDesc+0x90>
 800ba2e:	2b40      	cmp	r3, #64	; 0x40
 800ba30:	d104      	bne.n	800ba3c <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	79da      	ldrb	r2, [r3, #7]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	71da      	strb	r2, [r3, #7]
      break;
 800ba3a:	e003      	b.n	800ba44 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2240      	movs	r2, #64	; 0x40
 800ba40:	71da      	strb	r2, [r3, #7]
      break;
 800ba42:	bf00      	nop
  }

  if (length > 8U)
 800ba44:	88fb      	ldrh	r3, [r7, #6]
 800ba46:	2b08      	cmp	r3, #8
 800ba48:	d939      	bls.n	800babe <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	3308      	adds	r3, #8
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	b29a      	uxth	r2, r3
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	3309      	adds	r3, #9
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	021b      	lsls	r3, r3, #8
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	330a      	adds	r3, #10
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	b29a      	uxth	r2, r3
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	330b      	adds	r3, #11
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	021b      	lsls	r3, r3, #8
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	330c      	adds	r3, #12
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	b29a      	uxth	r2, r3
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	330d      	adds	r3, #13
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	021b      	lsls	r3, r3, #8
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	4313      	orrs	r3, r2
 800ba98:	b29a      	uxth	r2, r3
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	7b9a      	ldrb	r2, [r3, #14]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	7bda      	ldrb	r2, [r3, #15]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	7c1a      	ldrb	r2, [r3, #16]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	7c5a      	ldrb	r2, [r3, #17]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	745a      	strb	r2, [r3, #17]
  }
}
 800babe:	bf00      	nop
 800bac0:	3714      	adds	r7, #20
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	01000101 	.word	0x01000101

0800bad0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b08c      	sub	sp, #48	; 0x30
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	4613      	mov	r3, r2
 800badc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bae4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800bae6:	2300      	movs	r3, #0
 800bae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800baf0:	2300      	movs	r3, #0
 800baf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800baf6:	2300      	movs	r3, #0
 800baf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	781a      	ldrb	r2, [r3, #0]
 800bb04:	6a3b      	ldr	r3, [r7, #32]
 800bb06:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	785a      	ldrb	r2, [r3, #1]
 800bb0c:	6a3b      	ldr	r3, [r7, #32]
 800bb0e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	3302      	adds	r3, #2
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	b29a      	uxth	r2, r3
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	3303      	adds	r3, #3
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	021b      	lsls	r3, r3, #8
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	4313      	orrs	r3, r2
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb2c:	bf28      	it	cs
 800bb2e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800bb32:	b29a      	uxth	r2, r3
 800bb34:	6a3b      	ldr	r3, [r7, #32]
 800bb36:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	791a      	ldrb	r2, [r3, #4]
 800bb3c:	6a3b      	ldr	r3, [r7, #32]
 800bb3e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	795a      	ldrb	r2, [r3, #5]
 800bb44:	6a3b      	ldr	r3, [r7, #32]
 800bb46:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	799a      	ldrb	r2, [r3, #6]
 800bb4c:	6a3b      	ldr	r3, [r7, #32]
 800bb4e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	79da      	ldrb	r2, [r3, #7]
 800bb54:	6a3b      	ldr	r3, [r7, #32]
 800bb56:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	7a1a      	ldrb	r2, [r3, #8]
 800bb5c:	6a3b      	ldr	r3, [r7, #32]
 800bb5e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800bb60:	6a3b      	ldr	r3, [r7, #32]
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	2b09      	cmp	r3, #9
 800bb66:	d002      	beq.n	800bb6e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800bb68:	6a3b      	ldr	r3, [r7, #32]
 800bb6a:	2209      	movs	r2, #9
 800bb6c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bb6e:	88fb      	ldrh	r3, [r7, #6]
 800bb70:	2b09      	cmp	r3, #9
 800bb72:	f240 809d 	bls.w	800bcb0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800bb76:	2309      	movs	r3, #9
 800bb78:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bb7e:	e081      	b.n	800bc84 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bb80:	f107 0316 	add.w	r3, r7, #22
 800bb84:	4619      	mov	r1, r3
 800bb86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb88:	f000 f99f 	bl	800beca <USBH_GetNextDesc>
 800bb8c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800bb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb90:	785b      	ldrb	r3, [r3, #1]
 800bb92:	2b04      	cmp	r3, #4
 800bb94:	d176      	bne.n	800bc84 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800bb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	2b09      	cmp	r3, #9
 800bb9c:	d002      	beq.n	800bba4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800bb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba0:	2209      	movs	r2, #9
 800bba2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800bba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bba8:	221a      	movs	r2, #26
 800bbaa:	fb02 f303 	mul.w	r3, r2, r3
 800bbae:	3308      	adds	r3, #8
 800bbb0:	6a3a      	ldr	r2, [r7, #32]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	3302      	adds	r3, #2
 800bbb6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bbb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbba:	69f8      	ldr	r0, [r7, #28]
 800bbbc:	f000 f87e 	bl	800bcbc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bbca:	e043      	b.n	800bc54 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bbcc:	f107 0316 	add.w	r3, r7, #22
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbd4:	f000 f979 	bl	800beca <USBH_GetNextDesc>
 800bbd8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbdc:	785b      	ldrb	r3, [r3, #1]
 800bbde:	2b05      	cmp	r3, #5
 800bbe0:	d138      	bne.n	800bc54 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800bbe2:	69fb      	ldr	r3, [r7, #28]
 800bbe4:	795b      	ldrb	r3, [r3, #5]
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d10f      	bne.n	800bc0a <USBH_ParseCfgDesc+0x13a>
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	799b      	ldrb	r3, [r3, #6]
 800bbee:	2b02      	cmp	r3, #2
 800bbf0:	d10b      	bne.n	800bc0a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	79db      	ldrb	r3, [r3, #7]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d10f      	bne.n	800bc1a <USBH_ParseCfgDesc+0x14a>
 800bbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	2b09      	cmp	r3, #9
 800bc00:	d00b      	beq.n	800bc1a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800bc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc04:	2209      	movs	r2, #9
 800bc06:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bc08:	e007      	b.n	800bc1a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800bc0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	2b07      	cmp	r3, #7
 800bc10:	d004      	beq.n	800bc1c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800bc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc14:	2207      	movs	r2, #7
 800bc16:	701a      	strb	r2, [r3, #0]
 800bc18:	e000      	b.n	800bc1c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bc1a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bc1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc20:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bc24:	3201      	adds	r2, #1
 800bc26:	00d2      	lsls	r2, r2, #3
 800bc28:	211a      	movs	r1, #26
 800bc2a:	fb01 f303 	mul.w	r3, r1, r3
 800bc2e:	4413      	add	r3, r2
 800bc30:	3308      	adds	r3, #8
 800bc32:	6a3a      	ldr	r2, [r7, #32]
 800bc34:	4413      	add	r3, r2
 800bc36:	3304      	adds	r3, #4
 800bc38:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800bc3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc3c:	69b9      	ldr	r1, [r7, #24]
 800bc3e:	68f8      	ldr	r0, [r7, #12]
 800bc40:	f000 f86b 	bl	800bd1a <USBH_ParseEPDesc>
 800bc44:	4603      	mov	r3, r0
 800bc46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800bc4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc4e:	3301      	adds	r3, #1
 800bc50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bc54:	69fb      	ldr	r3, [r7, #28]
 800bc56:	791b      	ldrb	r3, [r3, #4]
 800bc58:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d204      	bcs.n	800bc6a <USBH_ParseCfgDesc+0x19a>
 800bc60:	6a3b      	ldr	r3, [r7, #32]
 800bc62:	885a      	ldrh	r2, [r3, #2]
 800bc64:	8afb      	ldrh	r3, [r7, #22]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d8b0      	bhi.n	800bbcc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	791b      	ldrb	r3, [r3, #4]
 800bc6e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d201      	bcs.n	800bc7a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800bc76:	2303      	movs	r3, #3
 800bc78:	e01c      	b.n	800bcb4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800bc7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc7e:	3301      	adds	r3, #1
 800bc80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bc84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d805      	bhi.n	800bc98 <USBH_ParseCfgDesc+0x1c8>
 800bc8c:	6a3b      	ldr	r3, [r7, #32]
 800bc8e:	885a      	ldrh	r2, [r3, #2]
 800bc90:	8afb      	ldrh	r3, [r7, #22]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	f63f af74 	bhi.w	800bb80 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800bc98:	6a3b      	ldr	r3, [r7, #32]
 800bc9a:	791b      	ldrb	r3, [r3, #4]
 800bc9c:	2b02      	cmp	r3, #2
 800bc9e:	bf28      	it	cs
 800bca0:	2302      	movcs	r3, #2
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d201      	bcs.n	800bcb0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800bcac:	2303      	movs	r3, #3
 800bcae:	e001      	b.n	800bcb4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800bcb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3730      	adds	r7, #48	; 0x30
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	781a      	ldrb	r2, [r3, #0]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	785a      	ldrb	r2, [r3, #1]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	789a      	ldrb	r2, [r3, #2]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	78da      	ldrb	r2, [r3, #3]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	791a      	ldrb	r2, [r3, #4]
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	795a      	ldrb	r2, [r3, #5]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	799a      	ldrb	r2, [r3, #6]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	79da      	ldrb	r2, [r3, #7]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	7a1a      	ldrb	r2, [r3, #8]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	721a      	strb	r2, [r3, #8]
}
 800bd0e:	bf00      	nop
 800bd10:	370c      	adds	r7, #12
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr

0800bd1a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800bd1a:	b480      	push	{r7}
 800bd1c:	b087      	sub	sp, #28
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	60f8      	str	r0, [r7, #12]
 800bd22:	60b9      	str	r1, [r7, #8]
 800bd24:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800bd26:	2300      	movs	r3, #0
 800bd28:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	781a      	ldrb	r2, [r3, #0]
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	785a      	ldrb	r2, [r3, #1]
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	789a      	ldrb	r2, [r3, #2]
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	78da      	ldrb	r2, [r3, #3]
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	3304      	adds	r3, #4
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	b29a      	uxth	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	3305      	adds	r3, #5
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	021b      	lsls	r3, r3, #8
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	b29a      	uxth	r2, r3
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	799a      	ldrb	r2, [r3, #6]
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	889b      	ldrh	r3, [r3, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d102      	bne.n	800bd7c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800bd76:	2303      	movs	r3, #3
 800bd78:	75fb      	strb	r3, [r7, #23]
 800bd7a:	e033      	b.n	800bde4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	889b      	ldrh	r3, [r3, #4]
 800bd80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bd84:	f023 0307 	bic.w	r3, r3, #7
 800bd88:	b29a      	uxth	r2, r3
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	889b      	ldrh	r3, [r3, #4]
 800bd92:	b21a      	sxth	r2, r3
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	3304      	adds	r3, #4
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	b299      	uxth	r1, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	3305      	adds	r3, #5
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	021b      	lsls	r3, r3, #8
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	430b      	orrs	r3, r1
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d110      	bne.n	800bdd6 <USBH_ParseEPDesc+0xbc>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	3304      	adds	r3, #4
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	b299      	uxth	r1, r3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	3305      	adds	r3, #5
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	021b      	lsls	r3, r3, #8
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	430b      	orrs	r3, r1
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	b21b      	sxth	r3, r3
 800bdce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bdd2:	b21b      	sxth	r3, r3
 800bdd4:	e001      	b.n	800bdda <USBH_ParseEPDesc+0xc0>
 800bdd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdda:	4313      	orrs	r3, r2
 800bddc:	b21b      	sxth	r3, r3
 800bdde:	b29a      	uxth	r2, r3
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d116      	bne.n	800be1c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	78db      	ldrb	r3, [r3, #3]
 800bdf2:	f003 0303 	and.w	r3, r3, #3
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d005      	beq.n	800be06 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	78db      	ldrb	r3, [r3, #3]
 800bdfe:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800be02:	2b03      	cmp	r3, #3
 800be04:	d127      	bne.n	800be56 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	799b      	ldrb	r3, [r3, #6]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d003      	beq.n	800be16 <USBH_ParseEPDesc+0xfc>
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	799b      	ldrb	r3, [r3, #6]
 800be12:	2b10      	cmp	r3, #16
 800be14:	d91f      	bls.n	800be56 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800be16:	2303      	movs	r3, #3
 800be18:	75fb      	strb	r3, [r7, #23]
 800be1a:	e01c      	b.n	800be56 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	78db      	ldrb	r3, [r3, #3]
 800be20:	f003 0303 	and.w	r3, r3, #3
 800be24:	2b01      	cmp	r3, #1
 800be26:	d10a      	bne.n	800be3e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	799b      	ldrb	r3, [r3, #6]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d003      	beq.n	800be38 <USBH_ParseEPDesc+0x11e>
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	799b      	ldrb	r3, [r3, #6]
 800be34:	2b10      	cmp	r3, #16
 800be36:	d90e      	bls.n	800be56 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800be38:	2303      	movs	r3, #3
 800be3a:	75fb      	strb	r3, [r7, #23]
 800be3c:	e00b      	b.n	800be56 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	78db      	ldrb	r3, [r3, #3]
 800be42:	f003 0303 	and.w	r3, r3, #3
 800be46:	2b03      	cmp	r3, #3
 800be48:	d105      	bne.n	800be56 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	799b      	ldrb	r3, [r3, #6]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d101      	bne.n	800be56 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800be52:	2303      	movs	r3, #3
 800be54:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800be56:	7dfb      	ldrb	r3, [r7, #23]
}
 800be58:	4618      	mov	r0, r3
 800be5a:	371c      	adds	r7, #28
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800be64:	b480      	push	{r7}
 800be66:	b087      	sub	sp, #28
 800be68:	af00      	add	r7, sp, #0
 800be6a:	60f8      	str	r0, [r7, #12]
 800be6c:	60b9      	str	r1, [r7, #8]
 800be6e:	4613      	mov	r3, r2
 800be70:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	3301      	adds	r3, #1
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	2b03      	cmp	r3, #3
 800be7a:	d120      	bne.n	800bebe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	1e9a      	subs	r2, r3, #2
 800be82:	88fb      	ldrh	r3, [r7, #6]
 800be84:	4293      	cmp	r3, r2
 800be86:	bf28      	it	cs
 800be88:	4613      	movcs	r3, r2
 800be8a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	3302      	adds	r3, #2
 800be90:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800be92:	2300      	movs	r3, #0
 800be94:	82fb      	strh	r3, [r7, #22]
 800be96:	e00b      	b.n	800beb0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800be98:	8afb      	ldrh	r3, [r7, #22]
 800be9a:	68fa      	ldr	r2, [r7, #12]
 800be9c:	4413      	add	r3, r2
 800be9e:	781a      	ldrb	r2, [r3, #0]
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	3301      	adds	r3, #1
 800bea8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800beaa:	8afb      	ldrh	r3, [r7, #22]
 800beac:	3302      	adds	r3, #2
 800beae:	82fb      	strh	r3, [r7, #22]
 800beb0:	8afa      	ldrh	r2, [r7, #22]
 800beb2:	8abb      	ldrh	r3, [r7, #20]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d3ef      	bcc.n	800be98 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	2200      	movs	r2, #0
 800bebc:	701a      	strb	r2, [r3, #0]
  }
}
 800bebe:	bf00      	nop
 800bec0:	371c      	adds	r7, #28
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr

0800beca <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800beca:	b480      	push	{r7}
 800becc:	b085      	sub	sp, #20
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
 800bed2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	881a      	ldrh	r2, [r3, #0]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	b29b      	uxth	r3, r3
 800bede:	4413      	add	r3, r2
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4413      	add	r3, r2
 800bef0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bef2:	68fb      	ldr	r3, [r7, #12]
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3714      	adds	r7, #20
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b086      	sub	sp, #24
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	789b      	ldrb	r3, [r3, #2]
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d002      	beq.n	800bf20 <USBH_CtlReq+0x20>
 800bf1a:	2b02      	cmp	r3, #2
 800bf1c:	d00f      	beq.n	800bf3e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bf1e:	e027      	b.n	800bf70 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	68ba      	ldr	r2, [r7, #8]
 800bf24:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	88fa      	ldrh	r2, [r7, #6]
 800bf2a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2202      	movs	r2, #2
 800bf36:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	75fb      	strb	r3, [r7, #23]
      break;
 800bf3c:	e018      	b.n	800bf70 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bf3e:	68f8      	ldr	r0, [r7, #12]
 800bf40:	f000 f81c 	bl	800bf7c <USBH_HandleControl>
 800bf44:	4603      	mov	r3, r0
 800bf46:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bf48:	7dfb      	ldrb	r3, [r7, #23]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d002      	beq.n	800bf54 <USBH_CtlReq+0x54>
 800bf4e:	7dfb      	ldrb	r3, [r7, #23]
 800bf50:	2b03      	cmp	r3, #3
 800bf52:	d106      	bne.n	800bf62 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2201      	movs	r2, #1
 800bf58:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	761a      	strb	r2, [r3, #24]
      break;
 800bf60:	e005      	b.n	800bf6e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bf62:	7dfb      	ldrb	r3, [r7, #23]
 800bf64:	2b02      	cmp	r3, #2
 800bf66:	d102      	bne.n	800bf6e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	709a      	strb	r2, [r3, #2]
      break;
 800bf6e:	bf00      	nop
  }
  return status;
 800bf70:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3718      	adds	r7, #24
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
	...

0800bf7c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b086      	sub	sp, #24
 800bf80:	af02      	add	r7, sp, #8
 800bf82:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bf84:	2301      	movs	r3, #1
 800bf86:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	7e1b      	ldrb	r3, [r3, #24]
 800bf90:	3b01      	subs	r3, #1
 800bf92:	2b0a      	cmp	r3, #10
 800bf94:	f200 8156 	bhi.w	800c244 <USBH_HandleControl+0x2c8>
 800bf98:	a201      	add	r2, pc, #4	; (adr r2, 800bfa0 <USBH_HandleControl+0x24>)
 800bf9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf9e:	bf00      	nop
 800bfa0:	0800bfcd 	.word	0x0800bfcd
 800bfa4:	0800bfe7 	.word	0x0800bfe7
 800bfa8:	0800c051 	.word	0x0800c051
 800bfac:	0800c077 	.word	0x0800c077
 800bfb0:	0800c0af 	.word	0x0800c0af
 800bfb4:	0800c0d9 	.word	0x0800c0d9
 800bfb8:	0800c12b 	.word	0x0800c12b
 800bfbc:	0800c14d 	.word	0x0800c14d
 800bfc0:	0800c189 	.word	0x0800c189
 800bfc4:	0800c1af 	.word	0x0800c1af
 800bfc8:	0800c1ed 	.word	0x0800c1ed
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f103 0110 	add.w	r1, r3, #16
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	795b      	ldrb	r3, [r3, #5]
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 f943 	bl	800c264 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2202      	movs	r2, #2
 800bfe2:	761a      	strb	r2, [r3, #24]
      break;
 800bfe4:	e139      	b.n	800c25a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	795b      	ldrb	r3, [r3, #5]
 800bfea:	4619      	mov	r1, r3
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f003 ffb5 	bl	800ff5c <USBH_LL_GetURBState>
 800bff2:	4603      	mov	r3, r0
 800bff4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bff6:	7bbb      	ldrb	r3, [r7, #14]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d11e      	bne.n	800c03a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	7c1b      	ldrb	r3, [r3, #16]
 800c000:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c004:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	8adb      	ldrh	r3, [r3, #22]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00a      	beq.n	800c024 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c00e:	7b7b      	ldrb	r3, [r7, #13]
 800c010:	2b80      	cmp	r3, #128	; 0x80
 800c012:	d103      	bne.n	800c01c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2203      	movs	r2, #3
 800c018:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c01a:	e115      	b.n	800c248 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2205      	movs	r2, #5
 800c020:	761a      	strb	r2, [r3, #24]
      break;
 800c022:	e111      	b.n	800c248 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c024:	7b7b      	ldrb	r3, [r7, #13]
 800c026:	2b80      	cmp	r3, #128	; 0x80
 800c028:	d103      	bne.n	800c032 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2209      	movs	r2, #9
 800c02e:	761a      	strb	r2, [r3, #24]
      break;
 800c030:	e10a      	b.n	800c248 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2207      	movs	r2, #7
 800c036:	761a      	strb	r2, [r3, #24]
      break;
 800c038:	e106      	b.n	800c248 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c03a:	7bbb      	ldrb	r3, [r7, #14]
 800c03c:	2b04      	cmp	r3, #4
 800c03e:	d003      	beq.n	800c048 <USBH_HandleControl+0xcc>
 800c040:	7bbb      	ldrb	r3, [r7, #14]
 800c042:	2b02      	cmp	r3, #2
 800c044:	f040 8100 	bne.w	800c248 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	220b      	movs	r2, #11
 800c04c:	761a      	strb	r2, [r3, #24]
      break;
 800c04e:	e0fb      	b.n	800c248 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c056:	b29a      	uxth	r2, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6899      	ldr	r1, [r3, #8]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	899a      	ldrh	r2, [r3, #12]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	791b      	ldrb	r3, [r3, #4]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 f93a 	bl	800c2e2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2204      	movs	r2, #4
 800c072:	761a      	strb	r2, [r3, #24]
      break;
 800c074:	e0f1      	b.n	800c25a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	791b      	ldrb	r3, [r3, #4]
 800c07a:	4619      	mov	r1, r3
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f003 ff6d 	bl	800ff5c <USBH_LL_GetURBState>
 800c082:	4603      	mov	r3, r0
 800c084:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c086:	7bbb      	ldrb	r3, [r7, #14]
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d102      	bne.n	800c092 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2209      	movs	r2, #9
 800c090:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c092:	7bbb      	ldrb	r3, [r7, #14]
 800c094:	2b05      	cmp	r3, #5
 800c096:	d102      	bne.n	800c09e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c098:	2303      	movs	r3, #3
 800c09a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c09c:	e0d6      	b.n	800c24c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c09e:	7bbb      	ldrb	r3, [r7, #14]
 800c0a0:	2b04      	cmp	r3, #4
 800c0a2:	f040 80d3 	bne.w	800c24c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	220b      	movs	r2, #11
 800c0aa:	761a      	strb	r2, [r3, #24]
      break;
 800c0ac:	e0ce      	b.n	800c24c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6899      	ldr	r1, [r3, #8]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	899a      	ldrh	r2, [r3, #12]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	795b      	ldrb	r3, [r3, #5]
 800c0ba:	2001      	movs	r0, #1
 800c0bc:	9000      	str	r0, [sp, #0]
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 f8ea 	bl	800c298 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c0ca:	b29a      	uxth	r2, r3
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2206      	movs	r2, #6
 800c0d4:	761a      	strb	r2, [r3, #24]
      break;
 800c0d6:	e0c0      	b.n	800c25a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	795b      	ldrb	r3, [r3, #5]
 800c0dc:	4619      	mov	r1, r3
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f003 ff3c 	bl	800ff5c <USBH_LL_GetURBState>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c0e8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d103      	bne.n	800c0f6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2207      	movs	r2, #7
 800c0f2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c0f4:	e0ac      	b.n	800c250 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c0f6:	7bbb      	ldrb	r3, [r7, #14]
 800c0f8:	2b05      	cmp	r3, #5
 800c0fa:	d105      	bne.n	800c108 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	220c      	movs	r2, #12
 800c100:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c102:	2303      	movs	r3, #3
 800c104:	73fb      	strb	r3, [r7, #15]
      break;
 800c106:	e0a3      	b.n	800c250 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c108:	7bbb      	ldrb	r3, [r7, #14]
 800c10a:	2b02      	cmp	r3, #2
 800c10c:	d103      	bne.n	800c116 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2205      	movs	r2, #5
 800c112:	761a      	strb	r2, [r3, #24]
      break;
 800c114:	e09c      	b.n	800c250 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c116:	7bbb      	ldrb	r3, [r7, #14]
 800c118:	2b04      	cmp	r3, #4
 800c11a:	f040 8099 	bne.w	800c250 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	220b      	movs	r2, #11
 800c122:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c124:	2302      	movs	r3, #2
 800c126:	73fb      	strb	r3, [r7, #15]
      break;
 800c128:	e092      	b.n	800c250 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	791b      	ldrb	r3, [r3, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	2100      	movs	r1, #0
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 f8d5 	bl	800c2e2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c13e:	b29a      	uxth	r2, r3
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2208      	movs	r2, #8
 800c148:	761a      	strb	r2, [r3, #24]

      break;
 800c14a:	e086      	b.n	800c25a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	791b      	ldrb	r3, [r3, #4]
 800c150:	4619      	mov	r1, r3
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f003 ff02 	bl	800ff5c <USBH_LL_GetURBState>
 800c158:	4603      	mov	r3, r0
 800c15a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c15c:	7bbb      	ldrb	r3, [r7, #14]
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d105      	bne.n	800c16e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	220d      	movs	r2, #13
 800c166:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c168:	2300      	movs	r3, #0
 800c16a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c16c:	e072      	b.n	800c254 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c16e:	7bbb      	ldrb	r3, [r7, #14]
 800c170:	2b04      	cmp	r3, #4
 800c172:	d103      	bne.n	800c17c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	220b      	movs	r2, #11
 800c178:	761a      	strb	r2, [r3, #24]
      break;
 800c17a:	e06b      	b.n	800c254 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c17c:	7bbb      	ldrb	r3, [r7, #14]
 800c17e:	2b05      	cmp	r3, #5
 800c180:	d168      	bne.n	800c254 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c182:	2303      	movs	r3, #3
 800c184:	73fb      	strb	r3, [r7, #15]
      break;
 800c186:	e065      	b.n	800c254 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	795b      	ldrb	r3, [r3, #5]
 800c18c:	2201      	movs	r2, #1
 800c18e:	9200      	str	r2, [sp, #0]
 800c190:	2200      	movs	r2, #0
 800c192:	2100      	movs	r1, #0
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 f87f 	bl	800c298 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c1a0:	b29a      	uxth	r2, r3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	220a      	movs	r2, #10
 800c1aa:	761a      	strb	r2, [r3, #24]
      break;
 800c1ac:	e055      	b.n	800c25a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	795b      	ldrb	r3, [r3, #5]
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f003 fed1 	bl	800ff5c <USBH_LL_GetURBState>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c1be:	7bbb      	ldrb	r3, [r7, #14]
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d105      	bne.n	800c1d0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	220d      	movs	r2, #13
 800c1cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c1ce:	e043      	b.n	800c258 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c1d0:	7bbb      	ldrb	r3, [r7, #14]
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	d103      	bne.n	800c1de <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2209      	movs	r2, #9
 800c1da:	761a      	strb	r2, [r3, #24]
      break;
 800c1dc:	e03c      	b.n	800c258 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c1de:	7bbb      	ldrb	r3, [r7, #14]
 800c1e0:	2b04      	cmp	r3, #4
 800c1e2:	d139      	bne.n	800c258 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	220b      	movs	r2, #11
 800c1e8:	761a      	strb	r2, [r3, #24]
      break;
 800c1ea:	e035      	b.n	800c258 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	7e5b      	ldrb	r3, [r3, #25]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	b2da      	uxtb	r2, r3
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	765a      	strb	r2, [r3, #25]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	7e5b      	ldrb	r3, [r3, #25]
 800c1fc:	2b02      	cmp	r3, #2
 800c1fe:	d806      	bhi.n	800c20e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2201      	movs	r2, #1
 800c204:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2201      	movs	r2, #1
 800c20a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c20c:	e025      	b.n	800c25a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c214:	2106      	movs	r1, #6
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	795b      	ldrb	r3, [r3, #5]
 800c224:	4619      	mov	r1, r3
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 f90c 	bl	800c444 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	791b      	ldrb	r3, [r3, #4]
 800c230:	4619      	mov	r1, r3
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 f906 	bl	800c444 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c23e:	2302      	movs	r3, #2
 800c240:	73fb      	strb	r3, [r7, #15]
      break;
 800c242:	e00a      	b.n	800c25a <USBH_HandleControl+0x2de>

    default:
      break;
 800c244:	bf00      	nop
 800c246:	e008      	b.n	800c25a <USBH_HandleControl+0x2de>
      break;
 800c248:	bf00      	nop
 800c24a:	e006      	b.n	800c25a <USBH_HandleControl+0x2de>
      break;
 800c24c:	bf00      	nop
 800c24e:	e004      	b.n	800c25a <USBH_HandleControl+0x2de>
      break;
 800c250:	bf00      	nop
 800c252:	e002      	b.n	800c25a <USBH_HandleControl+0x2de>
      break;
 800c254:	bf00      	nop
 800c256:	e000      	b.n	800c25a <USBH_HandleControl+0x2de>
      break;
 800c258:	bf00      	nop
  }

  return status;
 800c25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b088      	sub	sp, #32
 800c268:	af04      	add	r7, sp, #16
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	4613      	mov	r3, r2
 800c270:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c272:	79f9      	ldrb	r1, [r7, #7]
 800c274:	2300      	movs	r3, #0
 800c276:	9303      	str	r3, [sp, #12]
 800c278:	2308      	movs	r3, #8
 800c27a:	9302      	str	r3, [sp, #8]
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	9301      	str	r3, [sp, #4]
 800c280:	2300      	movs	r3, #0
 800c282:	9300      	str	r3, [sp, #0]
 800c284:	2300      	movs	r3, #0
 800c286:	2200      	movs	r2, #0
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f003 fe36 	bl	800fefa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c28e:	2300      	movs	r3, #0
}
 800c290:	4618      	mov	r0, r3
 800c292:	3710      	adds	r7, #16
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b088      	sub	sp, #32
 800c29c:	af04      	add	r7, sp, #16
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	4611      	mov	r1, r2
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	80fb      	strh	r3, [r7, #6]
 800c2aa:	4613      	mov	r3, r2
 800c2ac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d001      	beq.n	800c2bc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c2bc:	7979      	ldrb	r1, [r7, #5]
 800c2be:	7e3b      	ldrb	r3, [r7, #24]
 800c2c0:	9303      	str	r3, [sp, #12]
 800c2c2:	88fb      	ldrh	r3, [r7, #6]
 800c2c4:	9302      	str	r3, [sp, #8]
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	9301      	str	r3, [sp, #4]
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	9300      	str	r3, [sp, #0]
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	68f8      	ldr	r0, [r7, #12]
 800c2d4:	f003 fe11 	bl	800fefa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c2d8:	2300      	movs	r3, #0
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3710      	adds	r7, #16
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b088      	sub	sp, #32
 800c2e6:	af04      	add	r7, sp, #16
 800c2e8:	60f8      	str	r0, [r7, #12]
 800c2ea:	60b9      	str	r1, [r7, #8]
 800c2ec:	4611      	mov	r1, r2
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	80fb      	strh	r3, [r7, #6]
 800c2f4:	4613      	mov	r3, r2
 800c2f6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c2f8:	7979      	ldrb	r1, [r7, #5]
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	9303      	str	r3, [sp, #12]
 800c2fe:	88fb      	ldrh	r3, [r7, #6]
 800c300:	9302      	str	r3, [sp, #8]
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	9301      	str	r3, [sp, #4]
 800c306:	2301      	movs	r3, #1
 800c308:	9300      	str	r3, [sp, #0]
 800c30a:	2300      	movs	r3, #0
 800c30c:	2201      	movs	r2, #1
 800c30e:	68f8      	ldr	r0, [r7, #12]
 800c310:	f003 fdf3 	bl	800fefa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c314:	2300      	movs	r3, #0

}
 800c316:	4618      	mov	r0, r3
 800c318:	3710      	adds	r7, #16
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c31e:	b580      	push	{r7, lr}
 800c320:	b088      	sub	sp, #32
 800c322:	af04      	add	r7, sp, #16
 800c324:	60f8      	str	r0, [r7, #12]
 800c326:	60b9      	str	r1, [r7, #8]
 800c328:	4611      	mov	r1, r2
 800c32a:	461a      	mov	r2, r3
 800c32c:	460b      	mov	r3, r1
 800c32e:	80fb      	strh	r3, [r7, #6]
 800c330:	4613      	mov	r3, r2
 800c332:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d001      	beq.n	800c342 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c33e:	2300      	movs	r3, #0
 800c340:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c342:	7979      	ldrb	r1, [r7, #5]
 800c344:	7e3b      	ldrb	r3, [r7, #24]
 800c346:	9303      	str	r3, [sp, #12]
 800c348:	88fb      	ldrh	r3, [r7, #6]
 800c34a:	9302      	str	r3, [sp, #8]
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	9301      	str	r3, [sp, #4]
 800c350:	2301      	movs	r3, #1
 800c352:	9300      	str	r3, [sp, #0]
 800c354:	2302      	movs	r3, #2
 800c356:	2200      	movs	r2, #0
 800c358:	68f8      	ldr	r0, [r7, #12]
 800c35a:	f003 fdce 	bl	800fefa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c35e:	2300      	movs	r3, #0
}
 800c360:	4618      	mov	r0, r3
 800c362:	3710      	adds	r7, #16
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b088      	sub	sp, #32
 800c36c:	af04      	add	r7, sp, #16
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	4611      	mov	r1, r2
 800c374:	461a      	mov	r2, r3
 800c376:	460b      	mov	r3, r1
 800c378:	80fb      	strh	r3, [r7, #6]
 800c37a:	4613      	mov	r3, r2
 800c37c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c37e:	7979      	ldrb	r1, [r7, #5]
 800c380:	2300      	movs	r3, #0
 800c382:	9303      	str	r3, [sp, #12]
 800c384:	88fb      	ldrh	r3, [r7, #6]
 800c386:	9302      	str	r3, [sp, #8]
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	9301      	str	r3, [sp, #4]
 800c38c:	2301      	movs	r3, #1
 800c38e:	9300      	str	r3, [sp, #0]
 800c390:	2302      	movs	r3, #2
 800c392:	2201      	movs	r2, #1
 800c394:	68f8      	ldr	r0, [r7, #12]
 800c396:	f003 fdb0 	bl	800fefa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c39a:	2300      	movs	r3, #0
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3710      	adds	r7, #16
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b086      	sub	sp, #24
 800c3a8:	af04      	add	r7, sp, #16
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	4608      	mov	r0, r1
 800c3ae:	4611      	mov	r1, r2
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	70fb      	strb	r3, [r7, #3]
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	70bb      	strb	r3, [r7, #2]
 800c3ba:	4613      	mov	r3, r2
 800c3bc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c3be:	7878      	ldrb	r0, [r7, #1]
 800c3c0:	78ba      	ldrb	r2, [r7, #2]
 800c3c2:	78f9      	ldrb	r1, [r7, #3]
 800c3c4:	8b3b      	ldrh	r3, [r7, #24]
 800c3c6:	9302      	str	r3, [sp, #8]
 800c3c8:	7d3b      	ldrb	r3, [r7, #20]
 800c3ca:	9301      	str	r3, [sp, #4]
 800c3cc:	7c3b      	ldrb	r3, [r7, #16]
 800c3ce:	9300      	str	r3, [sp, #0]
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f003 fd43 	bl	800fe5e <USBH_LL_OpenPipe>

  return USBH_OK;
 800c3d8:	2300      	movs	r3, #0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3708      	adds	r7, #8
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b082      	sub	sp, #8
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c3ee:	78fb      	ldrb	r3, [r7, #3]
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f003 fd62 	bl	800febc <USBH_LL_ClosePipe>

  return USBH_OK;
 800c3f8:	2300      	movs	r3, #0
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3708      	adds	r7, #8
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}

0800c402 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c402:	b580      	push	{r7, lr}
 800c404:	b084      	sub	sp, #16
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
 800c40a:	460b      	mov	r3, r1
 800c40c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 f836 	bl	800c480 <USBH_GetFreePipe>
 800c414:	4603      	mov	r3, r0
 800c416:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c418:	89fb      	ldrh	r3, [r7, #14]
 800c41a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c41e:	4293      	cmp	r3, r2
 800c420:	d00a      	beq.n	800c438 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c422:	78fa      	ldrb	r2, [r7, #3]
 800c424:	89fb      	ldrh	r3, [r7, #14]
 800c426:	f003 030f 	and.w	r3, r3, #15
 800c42a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c42e:	6879      	ldr	r1, [r7, #4]
 800c430:	33e0      	adds	r3, #224	; 0xe0
 800c432:	009b      	lsls	r3, r3, #2
 800c434:	440b      	add	r3, r1
 800c436:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c438:	89fb      	ldrh	r3, [r7, #14]
 800c43a:	b2db      	uxtb	r3, r3
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3710      	adds	r7, #16
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	460b      	mov	r3, r1
 800c44e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c450:	78fb      	ldrb	r3, [r7, #3]
 800c452:	2b0f      	cmp	r3, #15
 800c454:	d80d      	bhi.n	800c472 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c456:	78fb      	ldrb	r3, [r7, #3]
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	33e0      	adds	r3, #224	; 0xe0
 800c45c:	009b      	lsls	r3, r3, #2
 800c45e:	4413      	add	r3, r2
 800c460:	685a      	ldr	r2, [r3, #4]
 800c462:	78fb      	ldrb	r3, [r7, #3]
 800c464:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c468:	6879      	ldr	r1, [r7, #4]
 800c46a:	33e0      	adds	r3, #224	; 0xe0
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	440b      	add	r3, r1
 800c470:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c472:	2300      	movs	r3, #0
}
 800c474:	4618      	mov	r0, r3
 800c476:	370c      	adds	r7, #12
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c480:	b480      	push	{r7}
 800c482:	b085      	sub	sp, #20
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c488:	2300      	movs	r3, #0
 800c48a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c48c:	2300      	movs	r3, #0
 800c48e:	73fb      	strb	r3, [r7, #15]
 800c490:	e00f      	b.n	800c4b2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c492:	7bfb      	ldrb	r3, [r7, #15]
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	33e0      	adds	r3, #224	; 0xe0
 800c498:	009b      	lsls	r3, r3, #2
 800c49a:	4413      	add	r3, r2
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d102      	bne.n	800c4ac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c4a6:	7bfb      	ldrb	r3, [r7, #15]
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	e007      	b.n	800c4bc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c4ac:	7bfb      	ldrb	r3, [r7, #15]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	73fb      	strb	r3, [r7, #15]
 800c4b2:	7bfb      	ldrb	r3, [r7, #15]
 800c4b4:	2b0f      	cmp	r3, #15
 800c4b6:	d9ec      	bls.n	800c492 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c4b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3714      	adds	r7, #20
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c4d2:	79fb      	ldrb	r3, [r7, #7]
 800c4d4:	4a08      	ldr	r2, [pc, #32]	; (800c4f8 <disk_status+0x30>)
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	4413      	add	r3, r2
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	79fa      	ldrb	r2, [r7, #7]
 800c4e0:	4905      	ldr	r1, [pc, #20]	; (800c4f8 <disk_status+0x30>)
 800c4e2:	440a      	add	r2, r1
 800c4e4:	7a12      	ldrb	r2, [r2, #8]
 800c4e6:	4610      	mov	r0, r2
 800c4e8:	4798      	blx	r3
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3710      	adds	r7, #16
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	20001e70 	.word	0x20001e70

0800c4fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b084      	sub	sp, #16
 800c500:	af00      	add	r7, sp, #0
 800c502:	4603      	mov	r3, r0
 800c504:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c506:	2300      	movs	r3, #0
 800c508:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c50a:	79fb      	ldrb	r3, [r7, #7]
 800c50c:	4a0d      	ldr	r2, [pc, #52]	; (800c544 <disk_initialize+0x48>)
 800c50e:	5cd3      	ldrb	r3, [r2, r3]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d111      	bne.n	800c538 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c514:	79fb      	ldrb	r3, [r7, #7]
 800c516:	4a0b      	ldr	r2, [pc, #44]	; (800c544 <disk_initialize+0x48>)
 800c518:	2101      	movs	r1, #1
 800c51a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c51c:	79fb      	ldrb	r3, [r7, #7]
 800c51e:	4a09      	ldr	r2, [pc, #36]	; (800c544 <disk_initialize+0x48>)
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	4413      	add	r3, r2
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	79fa      	ldrb	r2, [r7, #7]
 800c52a:	4906      	ldr	r1, [pc, #24]	; (800c544 <disk_initialize+0x48>)
 800c52c:	440a      	add	r2, r1
 800c52e:	7a12      	ldrb	r2, [r2, #8]
 800c530:	4610      	mov	r0, r2
 800c532:	4798      	blx	r3
 800c534:	4603      	mov	r3, r0
 800c536:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c538:	7bfb      	ldrb	r3, [r7, #15]
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	20001e70 	.word	0x20001e70

0800c548 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c548:	b590      	push	{r4, r7, lr}
 800c54a:	b087      	sub	sp, #28
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	60b9      	str	r1, [r7, #8]
 800c550:	607a      	str	r2, [r7, #4]
 800c552:	603b      	str	r3, [r7, #0]
 800c554:	4603      	mov	r3, r0
 800c556:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c558:	7bfb      	ldrb	r3, [r7, #15]
 800c55a:	4a0a      	ldr	r2, [pc, #40]	; (800c584 <disk_read+0x3c>)
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	4413      	add	r3, r2
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	689c      	ldr	r4, [r3, #8]
 800c564:	7bfb      	ldrb	r3, [r7, #15]
 800c566:	4a07      	ldr	r2, [pc, #28]	; (800c584 <disk_read+0x3c>)
 800c568:	4413      	add	r3, r2
 800c56a:	7a18      	ldrb	r0, [r3, #8]
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	68b9      	ldr	r1, [r7, #8]
 800c572:	47a0      	blx	r4
 800c574:	4603      	mov	r3, r0
 800c576:	75fb      	strb	r3, [r7, #23]
  return res;
 800c578:	7dfb      	ldrb	r3, [r7, #23]
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	371c      	adds	r7, #28
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd90      	pop	{r4, r7, pc}
 800c582:	bf00      	nop
 800c584:	20001e70 	.word	0x20001e70

0800c588 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c588:	b590      	push	{r4, r7, lr}
 800c58a:	b087      	sub	sp, #28
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60b9      	str	r1, [r7, #8]
 800c590:	607a      	str	r2, [r7, #4]
 800c592:	603b      	str	r3, [r7, #0]
 800c594:	4603      	mov	r3, r0
 800c596:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c598:	7bfb      	ldrb	r3, [r7, #15]
 800c59a:	4a0a      	ldr	r2, [pc, #40]	; (800c5c4 <disk_write+0x3c>)
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	4413      	add	r3, r2
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	68dc      	ldr	r4, [r3, #12]
 800c5a4:	7bfb      	ldrb	r3, [r7, #15]
 800c5a6:	4a07      	ldr	r2, [pc, #28]	; (800c5c4 <disk_write+0x3c>)
 800c5a8:	4413      	add	r3, r2
 800c5aa:	7a18      	ldrb	r0, [r3, #8]
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	68b9      	ldr	r1, [r7, #8]
 800c5b2:	47a0      	blx	r4
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	75fb      	strb	r3, [r7, #23]
  return res;
 800c5b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	371c      	adds	r7, #28
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd90      	pop	{r4, r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	20001e70 	.word	0x20001e70

0800c5c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	603a      	str	r2, [r7, #0]
 800c5d2:	71fb      	strb	r3, [r7, #7]
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c5d8:	79fb      	ldrb	r3, [r7, #7]
 800c5da:	4a09      	ldr	r2, [pc, #36]	; (800c600 <disk_ioctl+0x38>)
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	4413      	add	r3, r2
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	691b      	ldr	r3, [r3, #16]
 800c5e4:	79fa      	ldrb	r2, [r7, #7]
 800c5e6:	4906      	ldr	r1, [pc, #24]	; (800c600 <disk_ioctl+0x38>)
 800c5e8:	440a      	add	r2, r1
 800c5ea:	7a10      	ldrb	r0, [r2, #8]
 800c5ec:	79b9      	ldrb	r1, [r7, #6]
 800c5ee:	683a      	ldr	r2, [r7, #0]
 800c5f0:	4798      	blx	r3
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	73fb      	strb	r3, [r7, #15]
  return res;
 800c5f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3710      	adds	r7, #16
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	20001e70 	.word	0x20001e70

0800c604 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	3301      	adds	r3, #1
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c614:	89fb      	ldrh	r3, [r7, #14]
 800c616:	021b      	lsls	r3, r3, #8
 800c618:	b21a      	sxth	r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	b21b      	sxth	r3, r3
 800c620:	4313      	orrs	r3, r2
 800c622:	b21b      	sxth	r3, r3
 800c624:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c626:	89fb      	ldrh	r3, [r7, #14]
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3714      	adds	r7, #20
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr

0800c634 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c634:	b480      	push	{r7}
 800c636:	b085      	sub	sp, #20
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	3303      	adds	r3, #3
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	021b      	lsls	r3, r3, #8
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	3202      	adds	r2, #2
 800c64c:	7812      	ldrb	r2, [r2, #0]
 800c64e:	4313      	orrs	r3, r2
 800c650:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	021b      	lsls	r3, r3, #8
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	3201      	adds	r2, #1
 800c65a:	7812      	ldrb	r2, [r2, #0]
 800c65c:	4313      	orrs	r3, r2
 800c65e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	021b      	lsls	r3, r3, #8
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	7812      	ldrb	r2, [r2, #0]
 800c668:	4313      	orrs	r3, r2
 800c66a:	60fb      	str	r3, [r7, #12]
	return rv;
 800c66c:	68fb      	ldr	r3, [r7, #12]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3714      	adds	r7, #20
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr

0800c67a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c67a:	b480      	push	{r7}
 800c67c:	b083      	sub	sp, #12
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
 800c682:	460b      	mov	r3, r1
 800c684:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	1c5a      	adds	r2, r3, #1
 800c68a:	607a      	str	r2, [r7, #4]
 800c68c:	887a      	ldrh	r2, [r7, #2]
 800c68e:	b2d2      	uxtb	r2, r2
 800c690:	701a      	strb	r2, [r3, #0]
 800c692:	887b      	ldrh	r3, [r7, #2]
 800c694:	0a1b      	lsrs	r3, r3, #8
 800c696:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	1c5a      	adds	r2, r3, #1
 800c69c:	607a      	str	r2, [r7, #4]
 800c69e:	887a      	ldrh	r2, [r7, #2]
 800c6a0:	b2d2      	uxtb	r2, r2
 800c6a2:	701a      	strb	r2, [r3, #0]
}
 800c6a4:	bf00      	nop
 800c6a6:	370c      	adds	r7, #12
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b083      	sub	sp, #12
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	1c5a      	adds	r2, r3, #1
 800c6be:	607a      	str	r2, [r7, #4]
 800c6c0:	683a      	ldr	r2, [r7, #0]
 800c6c2:	b2d2      	uxtb	r2, r2
 800c6c4:	701a      	strb	r2, [r3, #0]
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	0a1b      	lsrs	r3, r3, #8
 800c6ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	1c5a      	adds	r2, r3, #1
 800c6d0:	607a      	str	r2, [r7, #4]
 800c6d2:	683a      	ldr	r2, [r7, #0]
 800c6d4:	b2d2      	uxtb	r2, r2
 800c6d6:	701a      	strb	r2, [r3, #0]
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	0a1b      	lsrs	r3, r3, #8
 800c6dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	1c5a      	adds	r2, r3, #1
 800c6e2:	607a      	str	r2, [r7, #4]
 800c6e4:	683a      	ldr	r2, [r7, #0]
 800c6e6:	b2d2      	uxtb	r2, r2
 800c6e8:	701a      	strb	r2, [r3, #0]
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	0a1b      	lsrs	r3, r3, #8
 800c6ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	1c5a      	adds	r2, r3, #1
 800c6f4:	607a      	str	r2, [r7, #4]
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	b2d2      	uxtb	r2, r2
 800c6fa:	701a      	strb	r2, [r3, #0]
}
 800c6fc:	bf00      	nop
 800c6fe:	370c      	adds	r7, #12
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr

0800c708 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c708:	b480      	push	{r7}
 800c70a:	b087      	sub	sp, #28
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d00d      	beq.n	800c73e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c722:	693a      	ldr	r2, [r7, #16]
 800c724:	1c53      	adds	r3, r2, #1
 800c726:	613b      	str	r3, [r7, #16]
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	1c59      	adds	r1, r3, #1
 800c72c:	6179      	str	r1, [r7, #20]
 800c72e:	7812      	ldrb	r2, [r2, #0]
 800c730:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	3b01      	subs	r3, #1
 800c736:	607b      	str	r3, [r7, #4]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d1f1      	bne.n	800c722 <mem_cpy+0x1a>
	}
}
 800c73e:	bf00      	nop
 800c740:	371c      	adds	r7, #28
 800c742:	46bd      	mov	sp, r7
 800c744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c748:	4770      	bx	lr

0800c74a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c74a:	b480      	push	{r7}
 800c74c:	b087      	sub	sp, #28
 800c74e:	af00      	add	r7, sp, #0
 800c750:	60f8      	str	r0, [r7, #12]
 800c752:	60b9      	str	r1, [r7, #8]
 800c754:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	1c5a      	adds	r2, r3, #1
 800c75e:	617a      	str	r2, [r7, #20]
 800c760:	68ba      	ldr	r2, [r7, #8]
 800c762:	b2d2      	uxtb	r2, r2
 800c764:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	3b01      	subs	r3, #1
 800c76a:	607b      	str	r3, [r7, #4]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d1f3      	bne.n	800c75a <mem_set+0x10>
}
 800c772:	bf00      	nop
 800c774:	bf00      	nop
 800c776:	371c      	adds	r7, #28
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c780:	b480      	push	{r7}
 800c782:	b089      	sub	sp, #36	; 0x24
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	61fb      	str	r3, [r7, #28]
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c794:	2300      	movs	r3, #0
 800c796:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	1c5a      	adds	r2, r3, #1
 800c79c:	61fa      	str	r2, [r7, #28]
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	69bb      	ldr	r3, [r7, #24]
 800c7a4:	1c5a      	adds	r2, r3, #1
 800c7a6:	61ba      	str	r2, [r7, #24]
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	1acb      	subs	r3, r1, r3
 800c7ac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	3b01      	subs	r3, #1
 800c7b2:	607b      	str	r3, [r7, #4]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d002      	beq.n	800c7c0 <mem_cmp+0x40>
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d0eb      	beq.n	800c798 <mem_cmp+0x18>

	return r;
 800c7c0:	697b      	ldr	r3, [r7, #20]
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3724      	adds	r7, #36	; 0x24
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr

0800c7ce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c7ce:	b480      	push	{r7}
 800c7d0:	b083      	sub	sp, #12
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
 800c7d6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c7d8:	e002      	b.n	800c7e0 <chk_chr+0x12>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	607b      	str	r3, [r7, #4]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d005      	beq.n	800c7f4 <chk_chr+0x26>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d1f2      	bne.n	800c7da <chk_chr+0xc>
	return *str;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	781b      	ldrb	r3, [r3, #0]
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	370c      	adds	r7, #12
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c804:	b480      	push	{r7}
 800c806:	b085      	sub	sp, #20
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c80e:	2300      	movs	r3, #0
 800c810:	60bb      	str	r3, [r7, #8]
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	60fb      	str	r3, [r7, #12]
 800c816:	e029      	b.n	800c86c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c818:	4a27      	ldr	r2, [pc, #156]	; (800c8b8 <chk_lock+0xb4>)
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	011b      	lsls	r3, r3, #4
 800c81e:	4413      	add	r3, r2
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d01d      	beq.n	800c862 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c826:	4a24      	ldr	r2, [pc, #144]	; (800c8b8 <chk_lock+0xb4>)
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	011b      	lsls	r3, r3, #4
 800c82c:	4413      	add	r3, r2
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	429a      	cmp	r2, r3
 800c836:	d116      	bne.n	800c866 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c838:	4a1f      	ldr	r2, [pc, #124]	; (800c8b8 <chk_lock+0xb4>)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	011b      	lsls	r3, r3, #4
 800c83e:	4413      	add	r3, r2
 800c840:	3304      	adds	r3, #4
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c848:	429a      	cmp	r2, r3
 800c84a:	d10c      	bne.n	800c866 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c84c:	4a1a      	ldr	r2, [pc, #104]	; (800c8b8 <chk_lock+0xb4>)
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	011b      	lsls	r3, r3, #4
 800c852:	4413      	add	r3, r2
 800c854:	3308      	adds	r3, #8
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d102      	bne.n	800c866 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c860:	e007      	b.n	800c872 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c862:	2301      	movs	r3, #1
 800c864:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	3301      	adds	r3, #1
 800c86a:	60fb      	str	r3, [r7, #12]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d9d2      	bls.n	800c818 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2b02      	cmp	r3, #2
 800c876:	d109      	bne.n	800c88c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d102      	bne.n	800c884 <chk_lock+0x80>
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	2b02      	cmp	r3, #2
 800c882:	d101      	bne.n	800c888 <chk_lock+0x84>
 800c884:	2300      	movs	r3, #0
 800c886:	e010      	b.n	800c8aa <chk_lock+0xa6>
 800c888:	2312      	movs	r3, #18
 800c88a:	e00e      	b.n	800c8aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d108      	bne.n	800c8a4 <chk_lock+0xa0>
 800c892:	4a09      	ldr	r2, [pc, #36]	; (800c8b8 <chk_lock+0xb4>)
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	011b      	lsls	r3, r3, #4
 800c898:	4413      	add	r3, r2
 800c89a:	330c      	adds	r3, #12
 800c89c:	881b      	ldrh	r3, [r3, #0]
 800c89e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8a2:	d101      	bne.n	800c8a8 <chk_lock+0xa4>
 800c8a4:	2310      	movs	r3, #16
 800c8a6:	e000      	b.n	800c8aa <chk_lock+0xa6>
 800c8a8:	2300      	movs	r3, #0
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3714      	adds	r7, #20
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr
 800c8b6:	bf00      	nop
 800c8b8:	20001c50 	.word	0x20001c50

0800c8bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b083      	sub	sp, #12
 800c8c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	607b      	str	r3, [r7, #4]
 800c8c6:	e002      	b.n	800c8ce <enq_lock+0x12>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	607b      	str	r3, [r7, #4]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d806      	bhi.n	800c8e2 <enq_lock+0x26>
 800c8d4:	4a09      	ldr	r2, [pc, #36]	; (800c8fc <enq_lock+0x40>)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	011b      	lsls	r3, r3, #4
 800c8da:	4413      	add	r3, r2
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1f2      	bne.n	800c8c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2b02      	cmp	r3, #2
 800c8e6:	bf14      	ite	ne
 800c8e8:	2301      	movne	r3, #1
 800c8ea:	2300      	moveq	r3, #0
 800c8ec:	b2db      	uxtb	r3, r3
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	370c      	adds	r7, #12
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr
 800c8fa:	bf00      	nop
 800c8fc:	20001c50 	.word	0x20001c50

0800c900 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c90a:	2300      	movs	r3, #0
 800c90c:	60fb      	str	r3, [r7, #12]
 800c90e:	e01f      	b.n	800c950 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c910:	4a41      	ldr	r2, [pc, #260]	; (800ca18 <inc_lock+0x118>)
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	011b      	lsls	r3, r3, #4
 800c916:	4413      	add	r3, r2
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	429a      	cmp	r2, r3
 800c920:	d113      	bne.n	800c94a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c922:	4a3d      	ldr	r2, [pc, #244]	; (800ca18 <inc_lock+0x118>)
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	011b      	lsls	r3, r3, #4
 800c928:	4413      	add	r3, r2
 800c92a:	3304      	adds	r3, #4
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c932:	429a      	cmp	r2, r3
 800c934:	d109      	bne.n	800c94a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c936:	4a38      	ldr	r2, [pc, #224]	; (800ca18 <inc_lock+0x118>)
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	011b      	lsls	r3, r3, #4
 800c93c:	4413      	add	r3, r2
 800c93e:	3308      	adds	r3, #8
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c946:	429a      	cmp	r2, r3
 800c948:	d006      	beq.n	800c958 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	3301      	adds	r3, #1
 800c94e:	60fb      	str	r3, [r7, #12]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2b01      	cmp	r3, #1
 800c954:	d9dc      	bls.n	800c910 <inc_lock+0x10>
 800c956:	e000      	b.n	800c95a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c958:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2b02      	cmp	r3, #2
 800c95e:	d132      	bne.n	800c9c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c960:	2300      	movs	r3, #0
 800c962:	60fb      	str	r3, [r7, #12]
 800c964:	e002      	b.n	800c96c <inc_lock+0x6c>
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	3301      	adds	r3, #1
 800c96a:	60fb      	str	r3, [r7, #12]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d806      	bhi.n	800c980 <inc_lock+0x80>
 800c972:	4a29      	ldr	r2, [pc, #164]	; (800ca18 <inc_lock+0x118>)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	011b      	lsls	r3, r3, #4
 800c978:	4413      	add	r3, r2
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d1f2      	bne.n	800c966 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2b02      	cmp	r3, #2
 800c984:	d101      	bne.n	800c98a <inc_lock+0x8a>
 800c986:	2300      	movs	r3, #0
 800c988:	e040      	b.n	800ca0c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681a      	ldr	r2, [r3, #0]
 800c98e:	4922      	ldr	r1, [pc, #136]	; (800ca18 <inc_lock+0x118>)
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	011b      	lsls	r3, r3, #4
 800c994:	440b      	add	r3, r1
 800c996:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	689a      	ldr	r2, [r3, #8]
 800c99c:	491e      	ldr	r1, [pc, #120]	; (800ca18 <inc_lock+0x118>)
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	011b      	lsls	r3, r3, #4
 800c9a2:	440b      	add	r3, r1
 800c9a4:	3304      	adds	r3, #4
 800c9a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	695a      	ldr	r2, [r3, #20]
 800c9ac:	491a      	ldr	r1, [pc, #104]	; (800ca18 <inc_lock+0x118>)
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	011b      	lsls	r3, r3, #4
 800c9b2:	440b      	add	r3, r1
 800c9b4:	3308      	adds	r3, #8
 800c9b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c9b8:	4a17      	ldr	r2, [pc, #92]	; (800ca18 <inc_lock+0x118>)
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	011b      	lsls	r3, r3, #4
 800c9be:	4413      	add	r3, r2
 800c9c0:	330c      	adds	r3, #12
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d009      	beq.n	800c9e0 <inc_lock+0xe0>
 800c9cc:	4a12      	ldr	r2, [pc, #72]	; (800ca18 <inc_lock+0x118>)
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	011b      	lsls	r3, r3, #4
 800c9d2:	4413      	add	r3, r2
 800c9d4:	330c      	adds	r3, #12
 800c9d6:	881b      	ldrh	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d001      	beq.n	800c9e0 <inc_lock+0xe0>
 800c9dc:	2300      	movs	r3, #0
 800c9de:	e015      	b.n	800ca0c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d108      	bne.n	800c9f8 <inc_lock+0xf8>
 800c9e6:	4a0c      	ldr	r2, [pc, #48]	; (800ca18 <inc_lock+0x118>)
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	011b      	lsls	r3, r3, #4
 800c9ec:	4413      	add	r3, r2
 800c9ee:	330c      	adds	r3, #12
 800c9f0:	881b      	ldrh	r3, [r3, #0]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	b29a      	uxth	r2, r3
 800c9f6:	e001      	b.n	800c9fc <inc_lock+0xfc>
 800c9f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c9fc:	4906      	ldr	r1, [pc, #24]	; (800ca18 <inc_lock+0x118>)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	011b      	lsls	r3, r3, #4
 800ca02:	440b      	add	r3, r1
 800ca04:	330c      	adds	r3, #12
 800ca06:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	3301      	adds	r3, #1
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3714      	adds	r7, #20
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr
 800ca18:	20001c50 	.word	0x20001c50

0800ca1c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b085      	sub	sp, #20
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	3b01      	subs	r3, #1
 800ca28:	607b      	str	r3, [r7, #4]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d825      	bhi.n	800ca7c <dec_lock+0x60>
		n = Files[i].ctr;
 800ca30:	4a17      	ldr	r2, [pc, #92]	; (800ca90 <dec_lock+0x74>)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	011b      	lsls	r3, r3, #4
 800ca36:	4413      	add	r3, r2
 800ca38:	330c      	adds	r3, #12
 800ca3a:	881b      	ldrh	r3, [r3, #0]
 800ca3c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ca3e:	89fb      	ldrh	r3, [r7, #14]
 800ca40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca44:	d101      	bne.n	800ca4a <dec_lock+0x2e>
 800ca46:	2300      	movs	r3, #0
 800ca48:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ca4a:	89fb      	ldrh	r3, [r7, #14]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d002      	beq.n	800ca56 <dec_lock+0x3a>
 800ca50:	89fb      	ldrh	r3, [r7, #14]
 800ca52:	3b01      	subs	r3, #1
 800ca54:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ca56:	4a0e      	ldr	r2, [pc, #56]	; (800ca90 <dec_lock+0x74>)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	011b      	lsls	r3, r3, #4
 800ca5c:	4413      	add	r3, r2
 800ca5e:	330c      	adds	r3, #12
 800ca60:	89fa      	ldrh	r2, [r7, #14]
 800ca62:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ca64:	89fb      	ldrh	r3, [r7, #14]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d105      	bne.n	800ca76 <dec_lock+0x5a>
 800ca6a:	4a09      	ldr	r2, [pc, #36]	; (800ca90 <dec_lock+0x74>)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	011b      	lsls	r3, r3, #4
 800ca70:	4413      	add	r3, r2
 800ca72:	2200      	movs	r2, #0
 800ca74:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ca76:	2300      	movs	r3, #0
 800ca78:	737b      	strb	r3, [r7, #13]
 800ca7a:	e001      	b.n	800ca80 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ca7c:	2302      	movs	r3, #2
 800ca7e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ca80:	7b7b      	ldrb	r3, [r7, #13]
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3714      	adds	r7, #20
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr
 800ca8e:	bf00      	nop
 800ca90:	20001c50 	.word	0x20001c50

0800ca94 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	60fb      	str	r3, [r7, #12]
 800caa0:	e010      	b.n	800cac4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800caa2:	4a0d      	ldr	r2, [pc, #52]	; (800cad8 <clear_lock+0x44>)
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	011b      	lsls	r3, r3, #4
 800caa8:	4413      	add	r3, r2
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d105      	bne.n	800cabe <clear_lock+0x2a>
 800cab2:	4a09      	ldr	r2, [pc, #36]	; (800cad8 <clear_lock+0x44>)
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	011b      	lsls	r3, r3, #4
 800cab8:	4413      	add	r3, r2
 800caba:	2200      	movs	r2, #0
 800cabc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	3301      	adds	r3, #1
 800cac2:	60fb      	str	r3, [r7, #12]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d9eb      	bls.n	800caa2 <clear_lock+0xe>
	}
}
 800caca:	bf00      	nop
 800cacc:	bf00      	nop
 800cace:	3714      	adds	r7, #20
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr
 800cad8:	20001c50 	.word	0x20001c50

0800cadc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b086      	sub	sp, #24
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cae4:	2300      	movs	r3, #0
 800cae6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	78db      	ldrb	r3, [r3, #3]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d034      	beq.n	800cb5a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caf4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	7858      	ldrb	r0, [r3, #1]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cb00:	2301      	movs	r3, #1
 800cb02:	697a      	ldr	r2, [r7, #20]
 800cb04:	f7ff fd40 	bl	800c588 <disk_write>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d002      	beq.n	800cb14 <sync_window+0x38>
			res = FR_DISK_ERR;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	73fb      	strb	r3, [r7, #15]
 800cb12:	e022      	b.n	800cb5a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb1e:	697a      	ldr	r2, [r7, #20]
 800cb20:	1ad2      	subs	r2, r2, r3
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	69db      	ldr	r3, [r3, #28]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d217      	bcs.n	800cb5a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	789b      	ldrb	r3, [r3, #2]
 800cb2e:	613b      	str	r3, [r7, #16]
 800cb30:	e010      	b.n	800cb54 <sync_window+0x78>
					wsect += fs->fsize;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	69db      	ldr	r3, [r3, #28]
 800cb36:	697a      	ldr	r2, [r7, #20]
 800cb38:	4413      	add	r3, r2
 800cb3a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	7858      	ldrb	r0, [r3, #1]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cb46:	2301      	movs	r3, #1
 800cb48:	697a      	ldr	r2, [r7, #20]
 800cb4a:	f7ff fd1d 	bl	800c588 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	3b01      	subs	r3, #1
 800cb52:	613b      	str	r3, [r7, #16]
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	d8eb      	bhi.n	800cb32 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cb5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3718      	adds	r7, #24
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b084      	sub	sp, #16
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb76:	683a      	ldr	r2, [r7, #0]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d01b      	beq.n	800cbb4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f7ff ffad 	bl	800cadc <sync_window>
 800cb82:	4603      	mov	r3, r0
 800cb84:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cb86:	7bfb      	ldrb	r3, [r7, #15]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d113      	bne.n	800cbb4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	7858      	ldrb	r0, [r3, #1]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cb96:	2301      	movs	r3, #1
 800cb98:	683a      	ldr	r2, [r7, #0]
 800cb9a:	f7ff fcd5 	bl	800c548 <disk_read>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d004      	beq.n	800cbae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cba4:	f04f 33ff 	mov.w	r3, #4294967295
 800cba8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	683a      	ldr	r2, [r7, #0]
 800cbb2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800cbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3710      	adds	r7, #16
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
	...

0800cbc0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f7ff ff87 	bl	800cadc <sync_window>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cbd2:	7bfb      	ldrb	r3, [r7, #15]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d158      	bne.n	800cc8a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	2b03      	cmp	r3, #3
 800cbde:	d148      	bne.n	800cc72 <sync_fs+0xb2>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	791b      	ldrb	r3, [r3, #4]
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d144      	bne.n	800cc72 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	3334      	adds	r3, #52	; 0x34
 800cbec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cbf0:	2100      	movs	r1, #0
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7ff fda9 	bl	800c74a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	3334      	adds	r3, #52	; 0x34
 800cbfc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cc00:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7ff fd38 	bl	800c67a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	3334      	adds	r3, #52	; 0x34
 800cc0e:	4921      	ldr	r1, [pc, #132]	; (800cc94 <sync_fs+0xd4>)
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7ff fd4d 	bl	800c6b0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	3334      	adds	r3, #52	; 0x34
 800cc1a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cc1e:	491e      	ldr	r1, [pc, #120]	; (800cc98 <sync_fs+0xd8>)
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7ff fd45 	bl	800c6b0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	3334      	adds	r3, #52	; 0x34
 800cc2a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	695b      	ldr	r3, [r3, #20]
 800cc32:	4619      	mov	r1, r3
 800cc34:	4610      	mov	r0, r2
 800cc36:	f7ff fd3b 	bl	800c6b0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	3334      	adds	r3, #52	; 0x34
 800cc3e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	691b      	ldr	r3, [r3, #16]
 800cc46:	4619      	mov	r1, r3
 800cc48:	4610      	mov	r0, r2
 800cc4a:	f7ff fd31 	bl	800c6b0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6a1b      	ldr	r3, [r3, #32]
 800cc52:	1c5a      	adds	r2, r3, #1
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	7858      	ldrb	r0, [r3, #1]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc66:	2301      	movs	r3, #1
 800cc68:	f7ff fc8e 	bl	800c588 <disk_write>
			fs->fsi_flag = 0;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	785b      	ldrb	r3, [r3, #1]
 800cc76:	2200      	movs	r2, #0
 800cc78:	2100      	movs	r1, #0
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7ff fca4 	bl	800c5c8 <disk_ioctl>
 800cc80:	4603      	mov	r3, r0
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d001      	beq.n	800cc8a <sync_fs+0xca>
 800cc86:	2301      	movs	r3, #1
 800cc88:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cc8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3710      	adds	r7, #16
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	41615252 	.word	0x41615252
 800cc98:	61417272 	.word	0x61417272

0800cc9c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	3b02      	subs	r3, #2
 800ccaa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	699b      	ldr	r3, [r3, #24]
 800ccb0:	3b02      	subs	r3, #2
 800ccb2:	683a      	ldr	r2, [r7, #0]
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d301      	bcc.n	800ccbc <clust2sect+0x20>
 800ccb8:	2300      	movs	r3, #0
 800ccba:	e008      	b.n	800ccce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	895b      	ldrh	r3, [r3, #10]
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	fb03 f202 	mul.w	r2, r3, r2
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cccc:	4413      	add	r3, r2
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	370c      	adds	r7, #12
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr

0800ccda <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	b086      	sub	sp, #24
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
 800cce2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d904      	bls.n	800ccfa <get_fat+0x20>
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	699b      	ldr	r3, [r3, #24]
 800ccf4:	683a      	ldr	r2, [r7, #0]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d302      	bcc.n	800cd00 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	617b      	str	r3, [r7, #20]
 800ccfe:	e08f      	b.n	800ce20 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cd00:	f04f 33ff 	mov.w	r3, #4294967295
 800cd04:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	2b03      	cmp	r3, #3
 800cd0c:	d062      	beq.n	800cdd4 <get_fat+0xfa>
 800cd0e:	2b03      	cmp	r3, #3
 800cd10:	dc7c      	bgt.n	800ce0c <get_fat+0x132>
 800cd12:	2b01      	cmp	r3, #1
 800cd14:	d002      	beq.n	800cd1c <get_fat+0x42>
 800cd16:	2b02      	cmp	r3, #2
 800cd18:	d042      	beq.n	800cda0 <get_fat+0xc6>
 800cd1a:	e077      	b.n	800ce0c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	60fb      	str	r3, [r7, #12]
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	085b      	lsrs	r3, r3, #1
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	4413      	add	r3, r2
 800cd28:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	0a5b      	lsrs	r3, r3, #9
 800cd32:	4413      	add	r3, r2
 800cd34:	4619      	mov	r1, r3
 800cd36:	6938      	ldr	r0, [r7, #16]
 800cd38:	f7ff ff14 	bl	800cb64 <move_window>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d167      	bne.n	800ce12 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	1c5a      	adds	r2, r3, #1
 800cd46:	60fa      	str	r2, [r7, #12]
 800cd48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd4c:	693a      	ldr	r2, [r7, #16]
 800cd4e:	4413      	add	r3, r2
 800cd50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd54:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	0a5b      	lsrs	r3, r3, #9
 800cd5e:	4413      	add	r3, r2
 800cd60:	4619      	mov	r1, r3
 800cd62:	6938      	ldr	r0, [r7, #16]
 800cd64:	f7ff fefe 	bl	800cb64 <move_window>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d153      	bne.n	800ce16 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd74:	693a      	ldr	r2, [r7, #16]
 800cd76:	4413      	add	r3, r2
 800cd78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd7c:	021b      	lsls	r3, r3, #8
 800cd7e:	461a      	mov	r2, r3
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	4313      	orrs	r3, r2
 800cd84:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	f003 0301 	and.w	r3, r3, #1
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d002      	beq.n	800cd96 <get_fat+0xbc>
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	091b      	lsrs	r3, r3, #4
 800cd94:	e002      	b.n	800cd9c <get_fat+0xc2>
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd9c:	617b      	str	r3, [r7, #20]
			break;
 800cd9e:	e03f      	b.n	800ce20 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	0a1b      	lsrs	r3, r3, #8
 800cda8:	4413      	add	r3, r2
 800cdaa:	4619      	mov	r1, r3
 800cdac:	6938      	ldr	r0, [r7, #16]
 800cdae:	f7ff fed9 	bl	800cb64 <move_window>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d130      	bne.n	800ce1a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	005b      	lsls	r3, r3, #1
 800cdc2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cdc6:	4413      	add	r3, r2
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7ff fc1b 	bl	800c604 <ld_word>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	617b      	str	r3, [r7, #20]
			break;
 800cdd2:	e025      	b.n	800ce20 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	09db      	lsrs	r3, r3, #7
 800cddc:	4413      	add	r3, r2
 800cdde:	4619      	mov	r1, r3
 800cde0:	6938      	ldr	r0, [r7, #16]
 800cde2:	f7ff febf 	bl	800cb64 <move_window>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d118      	bne.n	800ce1e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cdfa:	4413      	add	r3, r2
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f7ff fc19 	bl	800c634 <ld_dword>
 800ce02:	4603      	mov	r3, r0
 800ce04:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ce08:	617b      	str	r3, [r7, #20]
			break;
 800ce0a:	e009      	b.n	800ce20 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	617b      	str	r3, [r7, #20]
 800ce10:	e006      	b.n	800ce20 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ce12:	bf00      	nop
 800ce14:	e004      	b.n	800ce20 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ce16:	bf00      	nop
 800ce18:	e002      	b.n	800ce20 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ce1a:	bf00      	nop
 800ce1c:	e000      	b.n	800ce20 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ce1e:	bf00      	nop
		}
	}

	return val;
 800ce20:	697b      	ldr	r3, [r7, #20]
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3718      	adds	r7, #24
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ce2a:	b590      	push	{r4, r7, lr}
 800ce2c:	b089      	sub	sp, #36	; 0x24
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	60f8      	str	r0, [r7, #12]
 800ce32:	60b9      	str	r1, [r7, #8]
 800ce34:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ce36:	2302      	movs	r3, #2
 800ce38:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	f240 80d9 	bls.w	800cff4 <put_fat+0x1ca>
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	699b      	ldr	r3, [r3, #24]
 800ce46:	68ba      	ldr	r2, [r7, #8]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	f080 80d3 	bcs.w	800cff4 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	2b03      	cmp	r3, #3
 800ce54:	f000 8096 	beq.w	800cf84 <put_fat+0x15a>
 800ce58:	2b03      	cmp	r3, #3
 800ce5a:	f300 80cb 	bgt.w	800cff4 <put_fat+0x1ca>
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d002      	beq.n	800ce68 <put_fat+0x3e>
 800ce62:	2b02      	cmp	r3, #2
 800ce64:	d06e      	beq.n	800cf44 <put_fat+0x11a>
 800ce66:	e0c5      	b.n	800cff4 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	61bb      	str	r3, [r7, #24]
 800ce6c:	69bb      	ldr	r3, [r7, #24]
 800ce6e:	085b      	lsrs	r3, r3, #1
 800ce70:	69ba      	ldr	r2, [r7, #24]
 800ce72:	4413      	add	r3, r2
 800ce74:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	0a5b      	lsrs	r3, r3, #9
 800ce7e:	4413      	add	r3, r2
 800ce80:	4619      	mov	r1, r3
 800ce82:	68f8      	ldr	r0, [r7, #12]
 800ce84:	f7ff fe6e 	bl	800cb64 <move_window>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ce8c:	7ffb      	ldrb	r3, [r7, #31]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	f040 80a9 	bne.w	800cfe6 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	1c59      	adds	r1, r3, #1
 800ce9e:	61b9      	str	r1, [r7, #24]
 800cea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cea4:	4413      	add	r3, r2
 800cea6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	f003 0301 	and.w	r3, r3, #1
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d00d      	beq.n	800cece <put_fat+0xa4>
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	b25b      	sxtb	r3, r3
 800ceb8:	f003 030f 	and.w	r3, r3, #15
 800cebc:	b25a      	sxtb	r2, r3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	011b      	lsls	r3, r3, #4
 800cec4:	b25b      	sxtb	r3, r3
 800cec6:	4313      	orrs	r3, r2
 800cec8:	b25b      	sxtb	r3, r3
 800ceca:	b2db      	uxtb	r3, r3
 800cecc:	e001      	b.n	800ced2 <put_fat+0xa8>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	697a      	ldr	r2, [r7, #20]
 800ced4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2201      	movs	r2, #1
 800ceda:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cee0:	69bb      	ldr	r3, [r7, #24]
 800cee2:	0a5b      	lsrs	r3, r3, #9
 800cee4:	4413      	add	r3, r2
 800cee6:	4619      	mov	r1, r3
 800cee8:	68f8      	ldr	r0, [r7, #12]
 800ceea:	f7ff fe3b 	bl	800cb64 <move_window>
 800ceee:	4603      	mov	r3, r0
 800cef0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cef2:	7ffb      	ldrb	r3, [r7, #31]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d178      	bne.n	800cfea <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cefe:	69bb      	ldr	r3, [r7, #24]
 800cf00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf04:	4413      	add	r3, r2
 800cf06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	f003 0301 	and.w	r3, r3, #1
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d003      	beq.n	800cf1a <put_fat+0xf0>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	091b      	lsrs	r3, r3, #4
 800cf16:	b2db      	uxtb	r3, r3
 800cf18:	e00e      	b.n	800cf38 <put_fat+0x10e>
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	781b      	ldrb	r3, [r3, #0]
 800cf1e:	b25b      	sxtb	r3, r3
 800cf20:	f023 030f 	bic.w	r3, r3, #15
 800cf24:	b25a      	sxtb	r2, r3
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	0a1b      	lsrs	r3, r3, #8
 800cf2a:	b25b      	sxtb	r3, r3
 800cf2c:	f003 030f 	and.w	r3, r3, #15
 800cf30:	b25b      	sxtb	r3, r3
 800cf32:	4313      	orrs	r3, r2
 800cf34:	b25b      	sxtb	r3, r3
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	697a      	ldr	r2, [r7, #20]
 800cf3a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2201      	movs	r2, #1
 800cf40:	70da      	strb	r2, [r3, #3]
			break;
 800cf42:	e057      	b.n	800cff4 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	0a1b      	lsrs	r3, r3, #8
 800cf4c:	4413      	add	r3, r2
 800cf4e:	4619      	mov	r1, r3
 800cf50:	68f8      	ldr	r0, [r7, #12]
 800cf52:	f7ff fe07 	bl	800cb64 <move_window>
 800cf56:	4603      	mov	r3, r0
 800cf58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf5a:	7ffb      	ldrb	r3, [r7, #31]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d146      	bne.n	800cfee <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	005b      	lsls	r3, r3, #1
 800cf6a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cf6e:	4413      	add	r3, r2
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	b292      	uxth	r2, r2
 800cf74:	4611      	mov	r1, r2
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7ff fb7f 	bl	800c67a <st_word>
			fs->wflag = 1;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	2201      	movs	r2, #1
 800cf80:	70da      	strb	r2, [r3, #3]
			break;
 800cf82:	e037      	b.n	800cff4 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	09db      	lsrs	r3, r3, #7
 800cf8c:	4413      	add	r3, r2
 800cf8e:	4619      	mov	r1, r3
 800cf90:	68f8      	ldr	r0, [r7, #12]
 800cf92:	f7ff fde7 	bl	800cb64 <move_window>
 800cf96:	4603      	mov	r3, r0
 800cf98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf9a:	7ffb      	ldrb	r3, [r7, #31]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d128      	bne.n	800cff2 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cfb4:	4413      	add	r3, r2
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7ff fb3c 	bl	800c634 <ld_dword>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cfc2:	4323      	orrs	r3, r4
 800cfc4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	009b      	lsls	r3, r3, #2
 800cfd0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cfd4:	4413      	add	r3, r2
 800cfd6:	6879      	ldr	r1, [r7, #4]
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7ff fb69 	bl	800c6b0 <st_dword>
			fs->wflag = 1;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	70da      	strb	r2, [r3, #3]
			break;
 800cfe4:	e006      	b.n	800cff4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cfe6:	bf00      	nop
 800cfe8:	e004      	b.n	800cff4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cfea:	bf00      	nop
 800cfec:	e002      	b.n	800cff4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cfee:	bf00      	nop
 800cff0:	e000      	b.n	800cff4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cff2:	bf00      	nop
		}
	}
	return res;
 800cff4:	7ffb      	ldrb	r3, [r7, #31]
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3724      	adds	r7, #36	; 0x24
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd90      	pop	{r4, r7, pc}

0800cffe <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cffe:	b580      	push	{r7, lr}
 800d000:	b088      	sub	sp, #32
 800d002:	af00      	add	r7, sp, #0
 800d004:	60f8      	str	r0, [r7, #12]
 800d006:	60b9      	str	r1, [r7, #8]
 800d008:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d00a:	2300      	movs	r3, #0
 800d00c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	2b01      	cmp	r3, #1
 800d018:	d904      	bls.n	800d024 <remove_chain+0x26>
 800d01a:	69bb      	ldr	r3, [r7, #24]
 800d01c:	699b      	ldr	r3, [r3, #24]
 800d01e:	68ba      	ldr	r2, [r7, #8]
 800d020:	429a      	cmp	r2, r3
 800d022:	d301      	bcc.n	800d028 <remove_chain+0x2a>
 800d024:	2302      	movs	r3, #2
 800d026:	e04b      	b.n	800d0c0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00c      	beq.n	800d048 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d02e:	f04f 32ff 	mov.w	r2, #4294967295
 800d032:	6879      	ldr	r1, [r7, #4]
 800d034:	69b8      	ldr	r0, [r7, #24]
 800d036:	f7ff fef8 	bl	800ce2a <put_fat>
 800d03a:	4603      	mov	r3, r0
 800d03c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d03e:	7ffb      	ldrb	r3, [r7, #31]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d001      	beq.n	800d048 <remove_chain+0x4a>
 800d044:	7ffb      	ldrb	r3, [r7, #31]
 800d046:	e03b      	b.n	800d0c0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d048:	68b9      	ldr	r1, [r7, #8]
 800d04a:	68f8      	ldr	r0, [r7, #12]
 800d04c:	f7ff fe45 	bl	800ccda <get_fat>
 800d050:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d031      	beq.n	800d0bc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	d101      	bne.n	800d062 <remove_chain+0x64>
 800d05e:	2302      	movs	r3, #2
 800d060:	e02e      	b.n	800d0c0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d068:	d101      	bne.n	800d06e <remove_chain+0x70>
 800d06a:	2301      	movs	r3, #1
 800d06c:	e028      	b.n	800d0c0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d06e:	2200      	movs	r2, #0
 800d070:	68b9      	ldr	r1, [r7, #8]
 800d072:	69b8      	ldr	r0, [r7, #24]
 800d074:	f7ff fed9 	bl	800ce2a <put_fat>
 800d078:	4603      	mov	r3, r0
 800d07a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d07c:	7ffb      	ldrb	r3, [r7, #31]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d001      	beq.n	800d086 <remove_chain+0x88>
 800d082:	7ffb      	ldrb	r3, [r7, #31]
 800d084:	e01c      	b.n	800d0c0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d086:	69bb      	ldr	r3, [r7, #24]
 800d088:	695a      	ldr	r2, [r3, #20]
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	699b      	ldr	r3, [r3, #24]
 800d08e:	3b02      	subs	r3, #2
 800d090:	429a      	cmp	r2, r3
 800d092:	d20b      	bcs.n	800d0ac <remove_chain+0xae>
			fs->free_clst++;
 800d094:	69bb      	ldr	r3, [r7, #24]
 800d096:	695b      	ldr	r3, [r3, #20]
 800d098:	1c5a      	adds	r2, r3, #1
 800d09a:	69bb      	ldr	r3, [r7, #24]
 800d09c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	791b      	ldrb	r3, [r3, #4]
 800d0a2:	f043 0301 	orr.w	r3, r3, #1
 800d0a6:	b2da      	uxtb	r2, r3
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	699b      	ldr	r3, [r3, #24]
 800d0b4:	68ba      	ldr	r2, [r7, #8]
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d3c6      	bcc.n	800d048 <remove_chain+0x4a>
 800d0ba:	e000      	b.n	800d0be <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d0bc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d0be:	2300      	movs	r3, #0
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3720      	adds	r7, #32
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}

0800d0c8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b088      	sub	sp, #32
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
 800d0d0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d10d      	bne.n	800d0fa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	691b      	ldr	r3, [r3, #16]
 800d0e2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d0e4:	69bb      	ldr	r3, [r7, #24]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d004      	beq.n	800d0f4 <create_chain+0x2c>
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	699b      	ldr	r3, [r3, #24]
 800d0ee:	69ba      	ldr	r2, [r7, #24]
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d31b      	bcc.n	800d12c <create_chain+0x64>
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	61bb      	str	r3, [r7, #24]
 800d0f8:	e018      	b.n	800d12c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d0fa:	6839      	ldr	r1, [r7, #0]
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f7ff fdec 	bl	800ccda <get_fat>
 800d102:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2b01      	cmp	r3, #1
 800d108:	d801      	bhi.n	800d10e <create_chain+0x46>
 800d10a:	2301      	movs	r3, #1
 800d10c:	e070      	b.n	800d1f0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d114:	d101      	bne.n	800d11a <create_chain+0x52>
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	e06a      	b.n	800d1f0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	699b      	ldr	r3, [r3, #24]
 800d11e:	68fa      	ldr	r2, [r7, #12]
 800d120:	429a      	cmp	r2, r3
 800d122:	d201      	bcs.n	800d128 <create_chain+0x60>
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	e063      	b.n	800d1f0 <create_chain+0x128>
		scl = clst;
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d12c:	69bb      	ldr	r3, [r7, #24]
 800d12e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d130:	69fb      	ldr	r3, [r7, #28]
 800d132:	3301      	adds	r3, #1
 800d134:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	699b      	ldr	r3, [r3, #24]
 800d13a:	69fa      	ldr	r2, [r7, #28]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d307      	bcc.n	800d150 <create_chain+0x88>
				ncl = 2;
 800d140:	2302      	movs	r3, #2
 800d142:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d144:	69fa      	ldr	r2, [r7, #28]
 800d146:	69bb      	ldr	r3, [r7, #24]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d901      	bls.n	800d150 <create_chain+0x88>
 800d14c:	2300      	movs	r3, #0
 800d14e:	e04f      	b.n	800d1f0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d150:	69f9      	ldr	r1, [r7, #28]
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f7ff fdc1 	bl	800ccda <get_fat>
 800d158:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00e      	beq.n	800d17e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2b01      	cmp	r3, #1
 800d164:	d003      	beq.n	800d16e <create_chain+0xa6>
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d16c:	d101      	bne.n	800d172 <create_chain+0xaa>
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	e03e      	b.n	800d1f0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d172:	69fa      	ldr	r2, [r7, #28]
 800d174:	69bb      	ldr	r3, [r7, #24]
 800d176:	429a      	cmp	r2, r3
 800d178:	d1da      	bne.n	800d130 <create_chain+0x68>
 800d17a:	2300      	movs	r3, #0
 800d17c:	e038      	b.n	800d1f0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d17e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d180:	f04f 32ff 	mov.w	r2, #4294967295
 800d184:	69f9      	ldr	r1, [r7, #28]
 800d186:	6938      	ldr	r0, [r7, #16]
 800d188:	f7ff fe4f 	bl	800ce2a <put_fat>
 800d18c:	4603      	mov	r3, r0
 800d18e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d190:	7dfb      	ldrb	r3, [r7, #23]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d109      	bne.n	800d1aa <create_chain+0xe2>
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d006      	beq.n	800d1aa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d19c:	69fa      	ldr	r2, [r7, #28]
 800d19e:	6839      	ldr	r1, [r7, #0]
 800d1a0:	6938      	ldr	r0, [r7, #16]
 800d1a2:	f7ff fe42 	bl	800ce2a <put_fat>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d1aa:	7dfb      	ldrb	r3, [r7, #23]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d116      	bne.n	800d1de <create_chain+0x116>
		fs->last_clst = ncl;
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	69fa      	ldr	r2, [r7, #28]
 800d1b4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	695a      	ldr	r2, [r3, #20]
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	699b      	ldr	r3, [r3, #24]
 800d1be:	3b02      	subs	r3, #2
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d804      	bhi.n	800d1ce <create_chain+0x106>
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	695b      	ldr	r3, [r3, #20]
 800d1c8:	1e5a      	subs	r2, r3, #1
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	791b      	ldrb	r3, [r3, #4]
 800d1d2:	f043 0301 	orr.w	r3, r3, #1
 800d1d6:	b2da      	uxtb	r2, r3
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	711a      	strb	r2, [r3, #4]
 800d1dc:	e007      	b.n	800d1ee <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d1de:	7dfb      	ldrb	r3, [r7, #23]
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	d102      	bne.n	800d1ea <create_chain+0x122>
 800d1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d1e8:	e000      	b.n	800d1ec <create_chain+0x124>
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d1ee:	69fb      	ldr	r3, [r7, #28]
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3720      	adds	r7, #32
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b087      	sub	sp, #28
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d20c:	3304      	adds	r3, #4
 800d20e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	0a5b      	lsrs	r3, r3, #9
 800d214:	68fa      	ldr	r2, [r7, #12]
 800d216:	8952      	ldrh	r2, [r2, #10]
 800d218:	fbb3 f3f2 	udiv	r3, r3, r2
 800d21c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	1d1a      	adds	r2, r3, #4
 800d222:	613a      	str	r2, [r7, #16]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d101      	bne.n	800d232 <clmt_clust+0x3a>
 800d22e:	2300      	movs	r3, #0
 800d230:	e010      	b.n	800d254 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d232:	697a      	ldr	r2, [r7, #20]
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	429a      	cmp	r2, r3
 800d238:	d307      	bcc.n	800d24a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d23a:	697a      	ldr	r2, [r7, #20]
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	1ad3      	subs	r3, r2, r3
 800d240:	617b      	str	r3, [r7, #20]
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	3304      	adds	r3, #4
 800d246:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d248:	e7e9      	b.n	800d21e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d24a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	4413      	add	r3, r2
}
 800d254:	4618      	mov	r0, r3
 800d256:	371c      	adds	r7, #28
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b086      	sub	sp, #24
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d276:	d204      	bcs.n	800d282 <dir_sdi+0x22>
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	f003 031f 	and.w	r3, r3, #31
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d001      	beq.n	800d286 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d282:	2302      	movs	r3, #2
 800d284:	e063      	b.n	800d34e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	683a      	ldr	r2, [r7, #0]
 800d28a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	689b      	ldr	r3, [r3, #8]
 800d290:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d106      	bne.n	800d2a6 <dir_sdi+0x46>
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	2b02      	cmp	r3, #2
 800d29e:	d902      	bls.n	800d2a6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2a4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d10c      	bne.n	800d2c6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	095b      	lsrs	r3, r3, #5
 800d2b0:	693a      	ldr	r2, [r7, #16]
 800d2b2:	8912      	ldrh	r2, [r2, #8]
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d301      	bcc.n	800d2bc <dir_sdi+0x5c>
 800d2b8:	2302      	movs	r3, #2
 800d2ba:	e048      	b.n	800d34e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	61da      	str	r2, [r3, #28]
 800d2c4:	e029      	b.n	800d31a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	895b      	ldrh	r3, [r3, #10]
 800d2ca:	025b      	lsls	r3, r3, #9
 800d2cc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d2ce:	e019      	b.n	800d304 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6979      	ldr	r1, [r7, #20]
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f7ff fd00 	bl	800ccda <get_fat>
 800d2da:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2e2:	d101      	bne.n	800d2e8 <dir_sdi+0x88>
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	e032      	b.n	800d34e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	2b01      	cmp	r3, #1
 800d2ec:	d904      	bls.n	800d2f8 <dir_sdi+0x98>
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	699b      	ldr	r3, [r3, #24]
 800d2f2:	697a      	ldr	r2, [r7, #20]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d301      	bcc.n	800d2fc <dir_sdi+0x9c>
 800d2f8:	2302      	movs	r3, #2
 800d2fa:	e028      	b.n	800d34e <dir_sdi+0xee>
			ofs -= csz;
 800d2fc:	683a      	ldr	r2, [r7, #0]
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d304:	683a      	ldr	r2, [r7, #0]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	429a      	cmp	r2, r3
 800d30a:	d2e1      	bcs.n	800d2d0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d30c:	6979      	ldr	r1, [r7, #20]
 800d30e:	6938      	ldr	r0, [r7, #16]
 800d310:	f7ff fcc4 	bl	800cc9c <clust2sect>
 800d314:	4602      	mov	r2, r0
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	697a      	ldr	r2, [r7, #20]
 800d31e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	69db      	ldr	r3, [r3, #28]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d101      	bne.n	800d32c <dir_sdi+0xcc>
 800d328:	2302      	movs	r3, #2
 800d32a:	e010      	b.n	800d34e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	69da      	ldr	r2, [r3, #28]
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	0a5b      	lsrs	r3, r3, #9
 800d334:	441a      	add	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d346:	441a      	add	r2, r3
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d34c:	2300      	movs	r3, #0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3718      	adds	r7, #24
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d356:	b580      	push	{r7, lr}
 800d358:	b086      	sub	sp, #24
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
 800d35e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	695b      	ldr	r3, [r3, #20]
 800d36a:	3320      	adds	r3, #32
 800d36c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	69db      	ldr	r3, [r3, #28]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d003      	beq.n	800d37e <dir_next+0x28>
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d37c:	d301      	bcc.n	800d382 <dir_next+0x2c>
 800d37e:	2304      	movs	r3, #4
 800d380:	e0aa      	b.n	800d4d8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d388:	2b00      	cmp	r3, #0
 800d38a:	f040 8098 	bne.w	800d4be <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	69db      	ldr	r3, [r3, #28]
 800d392:	1c5a      	adds	r2, r3, #1
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	699b      	ldr	r3, [r3, #24]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d10b      	bne.n	800d3b8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	095b      	lsrs	r3, r3, #5
 800d3a4:	68fa      	ldr	r2, [r7, #12]
 800d3a6:	8912      	ldrh	r2, [r2, #8]
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	f0c0 8088 	bcc.w	800d4be <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	61da      	str	r2, [r3, #28]
 800d3b4:	2304      	movs	r3, #4
 800d3b6:	e08f      	b.n	800d4d8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	0a5b      	lsrs	r3, r3, #9
 800d3bc:	68fa      	ldr	r2, [r7, #12]
 800d3be:	8952      	ldrh	r2, [r2, #10]
 800d3c0:	3a01      	subs	r2, #1
 800d3c2:	4013      	ands	r3, r2
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d17a      	bne.n	800d4be <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	699b      	ldr	r3, [r3, #24]
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	4610      	mov	r0, r2
 800d3d2:	f7ff fc82 	bl	800ccda <get_fat>
 800d3d6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d801      	bhi.n	800d3e2 <dir_next+0x8c>
 800d3de:	2302      	movs	r3, #2
 800d3e0:	e07a      	b.n	800d4d8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3e8:	d101      	bne.n	800d3ee <dir_next+0x98>
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e074      	b.n	800d4d8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	699b      	ldr	r3, [r3, #24]
 800d3f2:	697a      	ldr	r2, [r7, #20]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d358      	bcc.n	800d4aa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d104      	bne.n	800d408 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2200      	movs	r2, #0
 800d402:	61da      	str	r2, [r3, #28]
 800d404:	2304      	movs	r3, #4
 800d406:	e067      	b.n	800d4d8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	699b      	ldr	r3, [r3, #24]
 800d40e:	4619      	mov	r1, r3
 800d410:	4610      	mov	r0, r2
 800d412:	f7ff fe59 	bl	800d0c8 <create_chain>
 800d416:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d101      	bne.n	800d422 <dir_next+0xcc>
 800d41e:	2307      	movs	r3, #7
 800d420:	e05a      	b.n	800d4d8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	2b01      	cmp	r3, #1
 800d426:	d101      	bne.n	800d42c <dir_next+0xd6>
 800d428:	2302      	movs	r3, #2
 800d42a:	e055      	b.n	800d4d8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d432:	d101      	bne.n	800d438 <dir_next+0xe2>
 800d434:	2301      	movs	r3, #1
 800d436:	e04f      	b.n	800d4d8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d438:	68f8      	ldr	r0, [r7, #12]
 800d43a:	f7ff fb4f 	bl	800cadc <sync_window>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d001      	beq.n	800d448 <dir_next+0xf2>
 800d444:	2301      	movs	r3, #1
 800d446:	e047      	b.n	800d4d8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	3334      	adds	r3, #52	; 0x34
 800d44c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d450:	2100      	movs	r1, #0
 800d452:	4618      	mov	r0, r3
 800d454:	f7ff f979 	bl	800c74a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d458:	2300      	movs	r3, #0
 800d45a:	613b      	str	r3, [r7, #16]
 800d45c:	6979      	ldr	r1, [r7, #20]
 800d45e:	68f8      	ldr	r0, [r7, #12]
 800d460:	f7ff fc1c 	bl	800cc9c <clust2sect>
 800d464:	4602      	mov	r2, r0
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	631a      	str	r2, [r3, #48]	; 0x30
 800d46a:	e012      	b.n	800d492 <dir_next+0x13c>
						fs->wflag = 1;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	2201      	movs	r2, #1
 800d470:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d472:	68f8      	ldr	r0, [r7, #12]
 800d474:	f7ff fb32 	bl	800cadc <sync_window>
 800d478:	4603      	mov	r3, r0
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d001      	beq.n	800d482 <dir_next+0x12c>
 800d47e:	2301      	movs	r3, #1
 800d480:	e02a      	b.n	800d4d8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d482:	693b      	ldr	r3, [r7, #16]
 800d484:	3301      	adds	r3, #1
 800d486:	613b      	str	r3, [r7, #16]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d48c:	1c5a      	adds	r2, r3, #1
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	631a      	str	r2, [r3, #48]	; 0x30
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	895b      	ldrh	r3, [r3, #10]
 800d496:	461a      	mov	r2, r3
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d3e6      	bcc.n	800d46c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	1ad2      	subs	r2, r2, r3
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	697a      	ldr	r2, [r7, #20]
 800d4ae:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d4b0:	6979      	ldr	r1, [r7, #20]
 800d4b2:	68f8      	ldr	r0, [r7, #12]
 800d4b4:	f7ff fbf2 	bl	800cc9c <clust2sect>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	68ba      	ldr	r2, [r7, #8]
 800d4c2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4d0:	441a      	add	r2, r3
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d4d6:	2300      	movs	r3, #0
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3718      	adds	r7, #24
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b086      	sub	sp, #24
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d4f0:	2100      	movs	r1, #0
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f7ff feb4 	bl	800d260 <dir_sdi>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d4fc:	7dfb      	ldrb	r3, [r7, #23]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d12b      	bne.n	800d55a <dir_alloc+0x7a>
		n = 0;
 800d502:	2300      	movs	r3, #0
 800d504:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	69db      	ldr	r3, [r3, #28]
 800d50a:	4619      	mov	r1, r3
 800d50c:	68f8      	ldr	r0, [r7, #12]
 800d50e:	f7ff fb29 	bl	800cb64 <move_window>
 800d512:	4603      	mov	r3, r0
 800d514:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d516:	7dfb      	ldrb	r3, [r7, #23]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d11d      	bne.n	800d558 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6a1b      	ldr	r3, [r3, #32]
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	2be5      	cmp	r3, #229	; 0xe5
 800d524:	d004      	beq.n	800d530 <dir_alloc+0x50>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6a1b      	ldr	r3, [r3, #32]
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d107      	bne.n	800d540 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	3301      	adds	r3, #1
 800d534:	613b      	str	r3, [r7, #16]
 800d536:	693a      	ldr	r2, [r7, #16]
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d102      	bne.n	800d544 <dir_alloc+0x64>
 800d53e:	e00c      	b.n	800d55a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d540:	2300      	movs	r3, #0
 800d542:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d544:	2101      	movs	r1, #1
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f7ff ff05 	bl	800d356 <dir_next>
 800d54c:	4603      	mov	r3, r0
 800d54e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d550:	7dfb      	ldrb	r3, [r7, #23]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d0d7      	beq.n	800d506 <dir_alloc+0x26>
 800d556:	e000      	b.n	800d55a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d558:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d55a:	7dfb      	ldrb	r3, [r7, #23]
 800d55c:	2b04      	cmp	r3, #4
 800d55e:	d101      	bne.n	800d564 <dir_alloc+0x84>
 800d560:	2307      	movs	r3, #7
 800d562:	75fb      	strb	r3, [r7, #23]
	return res;
 800d564:	7dfb      	ldrb	r3, [r7, #23]
}
 800d566:	4618      	mov	r0, r3
 800d568:	3718      	adds	r7, #24
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}

0800d56e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d56e:	b580      	push	{r7, lr}
 800d570:	b084      	sub	sp, #16
 800d572:	af00      	add	r7, sp, #0
 800d574:	6078      	str	r0, [r7, #4]
 800d576:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	331a      	adds	r3, #26
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7ff f841 	bl	800c604 <ld_word>
 800d582:	4603      	mov	r3, r0
 800d584:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	2b03      	cmp	r3, #3
 800d58c:	d109      	bne.n	800d5a2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	3314      	adds	r3, #20
 800d592:	4618      	mov	r0, r3
 800d594:	f7ff f836 	bl	800c604 <ld_word>
 800d598:	4603      	mov	r3, r0
 800d59a:	041b      	lsls	r3, r3, #16
 800d59c:	68fa      	ldr	r2, [r7, #12]
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3710      	adds	r7, #16
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b084      	sub	sp, #16
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	60f8      	str	r0, [r7, #12]
 800d5b4:	60b9      	str	r1, [r7, #8]
 800d5b6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	331a      	adds	r3, #26
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	b292      	uxth	r2, r2
 800d5c0:	4611      	mov	r1, r2
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7ff f859 	bl	800c67a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	2b03      	cmp	r3, #3
 800d5ce:	d109      	bne.n	800d5e4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	f103 0214 	add.w	r2, r3, #20
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	0c1b      	lsrs	r3, r3, #16
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	4619      	mov	r1, r3
 800d5de:	4610      	mov	r0, r2
 800d5e0:	f7ff f84b 	bl	800c67a <st_word>
	}
}
 800d5e4:	bf00      	nop
 800d5e6:	3710      	adds	r7, #16
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d5ec:	b590      	push	{r4, r7, lr}
 800d5ee:	b087      	sub	sp, #28
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	331a      	adds	r3, #26
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7ff f802 	bl	800c604 <ld_word>
 800d600:	4603      	mov	r3, r0
 800d602:	2b00      	cmp	r3, #0
 800d604:	d001      	beq.n	800d60a <cmp_lfn+0x1e>
 800d606:	2300      	movs	r3, #0
 800d608:	e059      	b.n	800d6be <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d612:	1e5a      	subs	r2, r3, #1
 800d614:	4613      	mov	r3, r2
 800d616:	005b      	lsls	r3, r3, #1
 800d618:	4413      	add	r3, r2
 800d61a:	009b      	lsls	r3, r3, #2
 800d61c:	4413      	add	r3, r2
 800d61e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d620:	2301      	movs	r3, #1
 800d622:	81fb      	strh	r3, [r7, #14]
 800d624:	2300      	movs	r3, #0
 800d626:	613b      	str	r3, [r7, #16]
 800d628:	e033      	b.n	800d692 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d62a:	4a27      	ldr	r2, [pc, #156]	; (800d6c8 <cmp_lfn+0xdc>)
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	4413      	add	r3, r2
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	461a      	mov	r2, r3
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	4413      	add	r3, r2
 800d638:	4618      	mov	r0, r3
 800d63a:	f7fe ffe3 	bl	800c604 <ld_word>
 800d63e:	4603      	mov	r3, r0
 800d640:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d642:	89fb      	ldrh	r3, [r7, #14]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d01a      	beq.n	800d67e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	2bfe      	cmp	r3, #254	; 0xfe
 800d64c:	d812      	bhi.n	800d674 <cmp_lfn+0x88>
 800d64e:	89bb      	ldrh	r3, [r7, #12]
 800d650:	4618      	mov	r0, r3
 800d652:	f002 f99f 	bl	800f994 <ff_wtoupper>
 800d656:	4603      	mov	r3, r0
 800d658:	461c      	mov	r4, r3
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	1c5a      	adds	r2, r3, #1
 800d65e:	617a      	str	r2, [r7, #20]
 800d660:	005b      	lsls	r3, r3, #1
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	4413      	add	r3, r2
 800d666:	881b      	ldrh	r3, [r3, #0]
 800d668:	4618      	mov	r0, r3
 800d66a:	f002 f993 	bl	800f994 <ff_wtoupper>
 800d66e:	4603      	mov	r3, r0
 800d670:	429c      	cmp	r4, r3
 800d672:	d001      	beq.n	800d678 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d674:	2300      	movs	r3, #0
 800d676:	e022      	b.n	800d6be <cmp_lfn+0xd2>
			}
			wc = uc;
 800d678:	89bb      	ldrh	r3, [r7, #12]
 800d67a:	81fb      	strh	r3, [r7, #14]
 800d67c:	e006      	b.n	800d68c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d67e:	89bb      	ldrh	r3, [r7, #12]
 800d680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d684:	4293      	cmp	r3, r2
 800d686:	d001      	beq.n	800d68c <cmp_lfn+0xa0>
 800d688:	2300      	movs	r3, #0
 800d68a:	e018      	b.n	800d6be <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d68c:	693b      	ldr	r3, [r7, #16]
 800d68e:	3301      	adds	r3, #1
 800d690:	613b      	str	r3, [r7, #16]
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	2b0c      	cmp	r3, #12
 800d696:	d9c8      	bls.n	800d62a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00b      	beq.n	800d6bc <cmp_lfn+0xd0>
 800d6a4:	89fb      	ldrh	r3, [r7, #14]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d008      	beq.n	800d6bc <cmp_lfn+0xd0>
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	005b      	lsls	r3, r3, #1
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	4413      	add	r3, r2
 800d6b2:	881b      	ldrh	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d001      	beq.n	800d6bc <cmp_lfn+0xd0>
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	e000      	b.n	800d6be <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d6bc:	2301      	movs	r3, #1
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	371c      	adds	r7, #28
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd90      	pop	{r4, r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	080105a0 	.word	0x080105a0

0800d6cc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b086      	sub	sp, #24
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	331a      	adds	r3, #26
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7fe ff92 	bl	800c604 <ld_word>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d001      	beq.n	800d6ea <pick_lfn+0x1e>
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	e04d      	b.n	800d786 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6f2:	1e5a      	subs	r2, r3, #1
 800d6f4:	4613      	mov	r3, r2
 800d6f6:	005b      	lsls	r3, r3, #1
 800d6f8:	4413      	add	r3, r2
 800d6fa:	009b      	lsls	r3, r3, #2
 800d6fc:	4413      	add	r3, r2
 800d6fe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d700:	2301      	movs	r3, #1
 800d702:	81fb      	strh	r3, [r7, #14]
 800d704:	2300      	movs	r3, #0
 800d706:	613b      	str	r3, [r7, #16]
 800d708:	e028      	b.n	800d75c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d70a:	4a21      	ldr	r2, [pc, #132]	; (800d790 <pick_lfn+0xc4>)
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	4413      	add	r3, r2
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	461a      	mov	r2, r3
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	4413      	add	r3, r2
 800d718:	4618      	mov	r0, r3
 800d71a:	f7fe ff73 	bl	800c604 <ld_word>
 800d71e:	4603      	mov	r3, r0
 800d720:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d722:	89fb      	ldrh	r3, [r7, #14]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d00f      	beq.n	800d748 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	2bfe      	cmp	r3, #254	; 0xfe
 800d72c:	d901      	bls.n	800d732 <pick_lfn+0x66>
 800d72e:	2300      	movs	r3, #0
 800d730:	e029      	b.n	800d786 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d732:	89bb      	ldrh	r3, [r7, #12]
 800d734:	81fb      	strh	r3, [r7, #14]
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	1c5a      	adds	r2, r3, #1
 800d73a:	617a      	str	r2, [r7, #20]
 800d73c:	005b      	lsls	r3, r3, #1
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	4413      	add	r3, r2
 800d742:	89fa      	ldrh	r2, [r7, #14]
 800d744:	801a      	strh	r2, [r3, #0]
 800d746:	e006      	b.n	800d756 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d748:	89bb      	ldrh	r3, [r7, #12]
 800d74a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d74e:	4293      	cmp	r3, r2
 800d750:	d001      	beq.n	800d756 <pick_lfn+0x8a>
 800d752:	2300      	movs	r3, #0
 800d754:	e017      	b.n	800d786 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	3301      	adds	r3, #1
 800d75a:	613b      	str	r3, [r7, #16]
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	2b0c      	cmp	r3, #12
 800d760:	d9d3      	bls.n	800d70a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00a      	beq.n	800d784 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	2bfe      	cmp	r3, #254	; 0xfe
 800d772:	d901      	bls.n	800d778 <pick_lfn+0xac>
 800d774:	2300      	movs	r3, #0
 800d776:	e006      	b.n	800d786 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	005b      	lsls	r3, r3, #1
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	4413      	add	r3, r2
 800d780:	2200      	movs	r2, #0
 800d782:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800d784:	2301      	movs	r3, #1
}
 800d786:	4618      	mov	r0, r3
 800d788:	3718      	adds	r7, #24
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	bf00      	nop
 800d790:	080105a0 	.word	0x080105a0

0800d794 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b088      	sub	sp, #32
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	4611      	mov	r1, r2
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	460b      	mov	r3, r1
 800d7a4:	71fb      	strb	r3, [r7, #7]
 800d7a6:	4613      	mov	r3, r2
 800d7a8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	330d      	adds	r3, #13
 800d7ae:	79ba      	ldrb	r2, [r7, #6]
 800d7b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	330b      	adds	r3, #11
 800d7b6:	220f      	movs	r2, #15
 800d7b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	330c      	adds	r3, #12
 800d7be:	2200      	movs	r2, #0
 800d7c0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	331a      	adds	r3, #26
 800d7c6:	2100      	movs	r1, #0
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7fe ff56 	bl	800c67a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d7ce:	79fb      	ldrb	r3, [r7, #7]
 800d7d0:	1e5a      	subs	r2, r3, #1
 800d7d2:	4613      	mov	r3, r2
 800d7d4:	005b      	lsls	r3, r3, #1
 800d7d6:	4413      	add	r3, r2
 800d7d8:	009b      	lsls	r3, r3, #2
 800d7da:	4413      	add	r3, r2
 800d7dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	82fb      	strh	r3, [r7, #22]
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d7e6:	8afb      	ldrh	r3, [r7, #22]
 800d7e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d007      	beq.n	800d800 <put_lfn+0x6c>
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	1c5a      	adds	r2, r3, #1
 800d7f4:	61fa      	str	r2, [r7, #28]
 800d7f6:	005b      	lsls	r3, r3, #1
 800d7f8:	68fa      	ldr	r2, [r7, #12]
 800d7fa:	4413      	add	r3, r2
 800d7fc:	881b      	ldrh	r3, [r3, #0]
 800d7fe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d800:	4a17      	ldr	r2, [pc, #92]	; (800d860 <put_lfn+0xcc>)
 800d802:	69bb      	ldr	r3, [r7, #24]
 800d804:	4413      	add	r3, r2
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	461a      	mov	r2, r3
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	4413      	add	r3, r2
 800d80e:	8afa      	ldrh	r2, [r7, #22]
 800d810:	4611      	mov	r1, r2
 800d812:	4618      	mov	r0, r3
 800d814:	f7fe ff31 	bl	800c67a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d818:	8afb      	ldrh	r3, [r7, #22]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d102      	bne.n	800d824 <put_lfn+0x90>
 800d81e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d822:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d824:	69bb      	ldr	r3, [r7, #24]
 800d826:	3301      	adds	r3, #1
 800d828:	61bb      	str	r3, [r7, #24]
 800d82a:	69bb      	ldr	r3, [r7, #24]
 800d82c:	2b0c      	cmp	r3, #12
 800d82e:	d9da      	bls.n	800d7e6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d830:	8afb      	ldrh	r3, [r7, #22]
 800d832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d836:	4293      	cmp	r3, r2
 800d838:	d006      	beq.n	800d848 <put_lfn+0xb4>
 800d83a:	69fb      	ldr	r3, [r7, #28]
 800d83c:	005b      	lsls	r3, r3, #1
 800d83e:	68fa      	ldr	r2, [r7, #12]
 800d840:	4413      	add	r3, r2
 800d842:	881b      	ldrh	r3, [r3, #0]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d103      	bne.n	800d850 <put_lfn+0xbc>
 800d848:	79fb      	ldrb	r3, [r7, #7]
 800d84a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d84e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	79fa      	ldrb	r2, [r7, #7]
 800d854:	701a      	strb	r2, [r3, #0]
}
 800d856:	bf00      	nop
 800d858:	3720      	adds	r7, #32
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	080105a0 	.word	0x080105a0

0800d864 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b08c      	sub	sp, #48	; 0x30
 800d868:	af00      	add	r7, sp, #0
 800d86a:	60f8      	str	r0, [r7, #12]
 800d86c:	60b9      	str	r1, [r7, #8]
 800d86e:	607a      	str	r2, [r7, #4]
 800d870:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d872:	220b      	movs	r2, #11
 800d874:	68b9      	ldr	r1, [r7, #8]
 800d876:	68f8      	ldr	r0, [r7, #12]
 800d878:	f7fe ff46 	bl	800c708 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	2b05      	cmp	r3, #5
 800d880:	d92b      	bls.n	800d8da <gen_numname+0x76>
		sr = seq;
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d886:	e022      	b.n	800d8ce <gen_numname+0x6a>
			wc = *lfn++;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	1c9a      	adds	r2, r3, #2
 800d88c:	607a      	str	r2, [r7, #4]
 800d88e:	881b      	ldrh	r3, [r3, #0]
 800d890:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d892:	2300      	movs	r3, #0
 800d894:	62bb      	str	r3, [r7, #40]	; 0x28
 800d896:	e017      	b.n	800d8c8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	005a      	lsls	r2, r3, #1
 800d89c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d89e:	f003 0301 	and.w	r3, r3, #1
 800d8a2:	4413      	add	r3, r2
 800d8a4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d8a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8a8:	085b      	lsrs	r3, r3, #1
 800d8aa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d005      	beq.n	800d8c2 <gen_numname+0x5e>
 800d8b6:	69fb      	ldr	r3, [r7, #28]
 800d8b8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d8bc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d8c0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ca:	2b0f      	cmp	r3, #15
 800d8cc:	d9e4      	bls.n	800d898 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	881b      	ldrh	r3, [r3, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d1d8      	bne.n	800d888 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d8d6:	69fb      	ldr	r3, [r7, #28]
 800d8d8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d8da:	2307      	movs	r3, #7
 800d8dc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	f003 030f 	and.w	r3, r3, #15
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	3330      	adds	r3, #48	; 0x30
 800d8ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d8ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8f2:	2b39      	cmp	r3, #57	; 0x39
 800d8f4:	d904      	bls.n	800d900 <gen_numname+0x9c>
 800d8f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8fa:	3307      	adds	r3, #7
 800d8fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d902:	1e5a      	subs	r2, r3, #1
 800d904:	62ba      	str	r2, [r7, #40]	; 0x28
 800d906:	3330      	adds	r3, #48	; 0x30
 800d908:	443b      	add	r3, r7
 800d90a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d90e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	091b      	lsrs	r3, r3, #4
 800d916:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d1df      	bne.n	800d8de <gen_numname+0x7a>
	ns[i] = '~';
 800d91e:	f107 0214 	add.w	r2, r7, #20
 800d922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d924:	4413      	add	r3, r2
 800d926:	227e      	movs	r2, #126	; 0x7e
 800d928:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d92a:	2300      	movs	r3, #0
 800d92c:	627b      	str	r3, [r7, #36]	; 0x24
 800d92e:	e002      	b.n	800d936 <gen_numname+0xd2>
 800d930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d932:	3301      	adds	r3, #1
 800d934:	627b      	str	r3, [r7, #36]	; 0x24
 800d936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d205      	bcs.n	800d94a <gen_numname+0xe6>
 800d93e:	68fa      	ldr	r2, [r7, #12]
 800d940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d942:	4413      	add	r3, r2
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	2b20      	cmp	r3, #32
 800d948:	d1f2      	bne.n	800d930 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d94c:	2b07      	cmp	r3, #7
 800d94e:	d807      	bhi.n	800d960 <gen_numname+0xfc>
 800d950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d952:	1c5a      	adds	r2, r3, #1
 800d954:	62ba      	str	r2, [r7, #40]	; 0x28
 800d956:	3330      	adds	r3, #48	; 0x30
 800d958:	443b      	add	r3, r7
 800d95a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d95e:	e000      	b.n	800d962 <gen_numname+0xfe>
 800d960:	2120      	movs	r1, #32
 800d962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d964:	1c5a      	adds	r2, r3, #1
 800d966:	627a      	str	r2, [r7, #36]	; 0x24
 800d968:	68fa      	ldr	r2, [r7, #12]
 800d96a:	4413      	add	r3, r2
 800d96c:	460a      	mov	r2, r1
 800d96e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d972:	2b07      	cmp	r3, #7
 800d974:	d9e9      	bls.n	800d94a <gen_numname+0xe6>
}
 800d976:	bf00      	nop
 800d978:	bf00      	nop
 800d97a:	3730      	adds	r7, #48	; 0x30
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d980:	b480      	push	{r7}
 800d982:	b085      	sub	sp, #20
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d988:	2300      	movs	r3, #0
 800d98a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d98c:	230b      	movs	r3, #11
 800d98e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d990:	7bfb      	ldrb	r3, [r7, #15]
 800d992:	b2da      	uxtb	r2, r3
 800d994:	0852      	lsrs	r2, r2, #1
 800d996:	01db      	lsls	r3, r3, #7
 800d998:	4313      	orrs	r3, r2
 800d99a:	b2da      	uxtb	r2, r3
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	1c59      	adds	r1, r3, #1
 800d9a0:	6079      	str	r1, [r7, #4]
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	4413      	add	r3, r2
 800d9a6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	3b01      	subs	r3, #1
 800d9ac:	60bb      	str	r3, [r7, #8]
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d1ed      	bne.n	800d990 <sum_sfn+0x10>
	return sum;
 800d9b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3714      	adds	r7, #20
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr

0800d9c2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d9c2:	b580      	push	{r7, lr}
 800d9c4:	b086      	sub	sp, #24
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
 800d9ca:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d9cc:	2304      	movs	r3, #4
 800d9ce:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d9d6:	23ff      	movs	r3, #255	; 0xff
 800d9d8:	757b      	strb	r3, [r7, #21]
 800d9da:	23ff      	movs	r3, #255	; 0xff
 800d9dc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d9de:	e081      	b.n	800dae4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	69db      	ldr	r3, [r3, #28]
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	6938      	ldr	r0, [r7, #16]
 800d9e8:	f7ff f8bc 	bl	800cb64 <move_window>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d9f0:	7dfb      	ldrb	r3, [r7, #23]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d17c      	bne.n	800daf0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6a1b      	ldr	r3, [r3, #32]
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d9fe:	7dbb      	ldrb	r3, [r7, #22]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d102      	bne.n	800da0a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800da04:	2304      	movs	r3, #4
 800da06:	75fb      	strb	r3, [r7, #23]
 800da08:	e077      	b.n	800dafa <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6a1b      	ldr	r3, [r3, #32]
 800da0e:	330b      	adds	r3, #11
 800da10:	781b      	ldrb	r3, [r3, #0]
 800da12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da16:	73fb      	strb	r3, [r7, #15]
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	7bfa      	ldrb	r2, [r7, #15]
 800da1c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800da1e:	7dbb      	ldrb	r3, [r7, #22]
 800da20:	2be5      	cmp	r3, #229	; 0xe5
 800da22:	d00e      	beq.n	800da42 <dir_read+0x80>
 800da24:	7dbb      	ldrb	r3, [r7, #22]
 800da26:	2b2e      	cmp	r3, #46	; 0x2e
 800da28:	d00b      	beq.n	800da42 <dir_read+0x80>
 800da2a:	7bfb      	ldrb	r3, [r7, #15]
 800da2c:	f023 0320 	bic.w	r3, r3, #32
 800da30:	2b08      	cmp	r3, #8
 800da32:	bf0c      	ite	eq
 800da34:	2301      	moveq	r3, #1
 800da36:	2300      	movne	r3, #0
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	461a      	mov	r2, r3
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	4293      	cmp	r3, r2
 800da40:	d002      	beq.n	800da48 <dir_read+0x86>
				ord = 0xFF;
 800da42:	23ff      	movs	r3, #255	; 0xff
 800da44:	757b      	strb	r3, [r7, #21]
 800da46:	e044      	b.n	800dad2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800da48:	7bfb      	ldrb	r3, [r7, #15]
 800da4a:	2b0f      	cmp	r3, #15
 800da4c:	d12f      	bne.n	800daae <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800da4e:	7dbb      	ldrb	r3, [r7, #22]
 800da50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da54:	2b00      	cmp	r3, #0
 800da56:	d00d      	beq.n	800da74 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6a1b      	ldr	r3, [r3, #32]
 800da5c:	7b5b      	ldrb	r3, [r3, #13]
 800da5e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800da60:	7dbb      	ldrb	r3, [r7, #22]
 800da62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da66:	75bb      	strb	r3, [r7, #22]
 800da68:	7dbb      	ldrb	r3, [r7, #22]
 800da6a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	695a      	ldr	r2, [r3, #20]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800da74:	7dba      	ldrb	r2, [r7, #22]
 800da76:	7d7b      	ldrb	r3, [r7, #21]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d115      	bne.n	800daa8 <dir_read+0xe6>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6a1b      	ldr	r3, [r3, #32]
 800da80:	330d      	adds	r3, #13
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	7d3a      	ldrb	r2, [r7, #20]
 800da86:	429a      	cmp	r2, r3
 800da88:	d10e      	bne.n	800daa8 <dir_read+0xe6>
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	68da      	ldr	r2, [r3, #12]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6a1b      	ldr	r3, [r3, #32]
 800da92:	4619      	mov	r1, r3
 800da94:	4610      	mov	r0, r2
 800da96:	f7ff fe19 	bl	800d6cc <pick_lfn>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d003      	beq.n	800daa8 <dir_read+0xe6>
 800daa0:	7d7b      	ldrb	r3, [r7, #21]
 800daa2:	3b01      	subs	r3, #1
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	e000      	b.n	800daaa <dir_read+0xe8>
 800daa8:	23ff      	movs	r3, #255	; 0xff
 800daaa:	757b      	strb	r3, [r7, #21]
 800daac:	e011      	b.n	800dad2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800daae:	7d7b      	ldrb	r3, [r7, #21]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d109      	bne.n	800dac8 <dir_read+0x106>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6a1b      	ldr	r3, [r3, #32]
 800dab8:	4618      	mov	r0, r3
 800daba:	f7ff ff61 	bl	800d980 <sum_sfn>
 800dabe:	4603      	mov	r3, r0
 800dac0:	461a      	mov	r2, r3
 800dac2:	7d3b      	ldrb	r3, [r7, #20]
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d015      	beq.n	800daf4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f04f 32ff 	mov.w	r2, #4294967295
 800dace:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800dad0:	e010      	b.n	800daf4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800dad2:	2100      	movs	r1, #0
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f7ff fc3e 	bl	800d356 <dir_next>
 800dada:	4603      	mov	r3, r0
 800dadc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dade:	7dfb      	ldrb	r3, [r7, #23]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d109      	bne.n	800daf8 <dir_read+0x136>
	while (dp->sect) {
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	69db      	ldr	r3, [r3, #28]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	f47f af79 	bne.w	800d9e0 <dir_read+0x1e>
 800daee:	e004      	b.n	800dafa <dir_read+0x138>
		if (res != FR_OK) break;
 800daf0:	bf00      	nop
 800daf2:	e002      	b.n	800dafa <dir_read+0x138>
					break;
 800daf4:	bf00      	nop
 800daf6:	e000      	b.n	800dafa <dir_read+0x138>
		if (res != FR_OK) break;
 800daf8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800dafa:	7dfb      	ldrb	r3, [r7, #23]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d002      	beq.n	800db06 <dir_read+0x144>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	61da      	str	r2, [r3, #28]
	return res;
 800db06:	7dfb      	ldrb	r3, [r7, #23]
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3718      	adds	r7, #24
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b086      	sub	sp, #24
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800db1e:	2100      	movs	r1, #0
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f7ff fb9d 	bl	800d260 <dir_sdi>
 800db26:	4603      	mov	r3, r0
 800db28:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800db2a:	7dfb      	ldrb	r3, [r7, #23]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d001      	beq.n	800db34 <dir_find+0x24>
 800db30:	7dfb      	ldrb	r3, [r7, #23]
 800db32:	e0a9      	b.n	800dc88 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800db34:	23ff      	movs	r3, #255	; 0xff
 800db36:	753b      	strb	r3, [r7, #20]
 800db38:	7d3b      	ldrb	r3, [r7, #20]
 800db3a:	757b      	strb	r3, [r7, #21]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f04f 32ff 	mov.w	r2, #4294967295
 800db42:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	69db      	ldr	r3, [r3, #28]
 800db48:	4619      	mov	r1, r3
 800db4a:	6938      	ldr	r0, [r7, #16]
 800db4c:	f7ff f80a 	bl	800cb64 <move_window>
 800db50:	4603      	mov	r3, r0
 800db52:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800db54:	7dfb      	ldrb	r3, [r7, #23]
 800db56:	2b00      	cmp	r3, #0
 800db58:	f040 8090 	bne.w	800dc7c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6a1b      	ldr	r3, [r3, #32]
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800db64:	7dbb      	ldrb	r3, [r7, #22]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d102      	bne.n	800db70 <dir_find+0x60>
 800db6a:	2304      	movs	r3, #4
 800db6c:	75fb      	strb	r3, [r7, #23]
 800db6e:	e08a      	b.n	800dc86 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6a1b      	ldr	r3, [r3, #32]
 800db74:	330b      	adds	r3, #11
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db7c:	73fb      	strb	r3, [r7, #15]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	7bfa      	ldrb	r2, [r7, #15]
 800db82:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800db84:	7dbb      	ldrb	r3, [r7, #22]
 800db86:	2be5      	cmp	r3, #229	; 0xe5
 800db88:	d007      	beq.n	800db9a <dir_find+0x8a>
 800db8a:	7bfb      	ldrb	r3, [r7, #15]
 800db8c:	f003 0308 	and.w	r3, r3, #8
 800db90:	2b00      	cmp	r3, #0
 800db92:	d009      	beq.n	800dba8 <dir_find+0x98>
 800db94:	7bfb      	ldrb	r3, [r7, #15]
 800db96:	2b0f      	cmp	r3, #15
 800db98:	d006      	beq.n	800dba8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800db9a:	23ff      	movs	r3, #255	; 0xff
 800db9c:	757b      	strb	r3, [r7, #21]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f04f 32ff 	mov.w	r2, #4294967295
 800dba4:	631a      	str	r2, [r3, #48]	; 0x30
 800dba6:	e05e      	b.n	800dc66 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800dba8:	7bfb      	ldrb	r3, [r7, #15]
 800dbaa:	2b0f      	cmp	r3, #15
 800dbac:	d136      	bne.n	800dc1c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dbb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d154      	bne.n	800dc66 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800dbbc:	7dbb      	ldrb	r3, [r7, #22]
 800dbbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d00d      	beq.n	800dbe2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6a1b      	ldr	r3, [r3, #32]
 800dbca:	7b5b      	ldrb	r3, [r3, #13]
 800dbcc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800dbce:	7dbb      	ldrb	r3, [r7, #22]
 800dbd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbd4:	75bb      	strb	r3, [r7, #22]
 800dbd6:	7dbb      	ldrb	r3, [r7, #22]
 800dbd8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	695a      	ldr	r2, [r3, #20]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dbe2:	7dba      	ldrb	r2, [r7, #22]
 800dbe4:	7d7b      	ldrb	r3, [r7, #21]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d115      	bne.n	800dc16 <dir_find+0x106>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6a1b      	ldr	r3, [r3, #32]
 800dbee:	330d      	adds	r3, #13
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	7d3a      	ldrb	r2, [r7, #20]
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d10e      	bne.n	800dc16 <dir_find+0x106>
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	68da      	ldr	r2, [r3, #12]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6a1b      	ldr	r3, [r3, #32]
 800dc00:	4619      	mov	r1, r3
 800dc02:	4610      	mov	r0, r2
 800dc04:	f7ff fcf2 	bl	800d5ec <cmp_lfn>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d003      	beq.n	800dc16 <dir_find+0x106>
 800dc0e:	7d7b      	ldrb	r3, [r7, #21]
 800dc10:	3b01      	subs	r3, #1
 800dc12:	b2db      	uxtb	r3, r3
 800dc14:	e000      	b.n	800dc18 <dir_find+0x108>
 800dc16:	23ff      	movs	r3, #255	; 0xff
 800dc18:	757b      	strb	r3, [r7, #21]
 800dc1a:	e024      	b.n	800dc66 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800dc1c:	7d7b      	ldrb	r3, [r7, #21]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d109      	bne.n	800dc36 <dir_find+0x126>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6a1b      	ldr	r3, [r3, #32]
 800dc26:	4618      	mov	r0, r3
 800dc28:	f7ff feaa 	bl	800d980 <sum_sfn>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	461a      	mov	r2, r3
 800dc30:	7d3b      	ldrb	r3, [r7, #20]
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d024      	beq.n	800dc80 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dc3c:	f003 0301 	and.w	r3, r3, #1
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d10a      	bne.n	800dc5a <dir_find+0x14a>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6a18      	ldr	r0, [r3, #32]
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	3324      	adds	r3, #36	; 0x24
 800dc4c:	220b      	movs	r2, #11
 800dc4e:	4619      	mov	r1, r3
 800dc50:	f7fe fd96 	bl	800c780 <mem_cmp>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d014      	beq.n	800dc84 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dc5a:	23ff      	movs	r3, #255	; 0xff
 800dc5c:	757b      	strb	r3, [r7, #21]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f04f 32ff 	mov.w	r2, #4294967295
 800dc64:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800dc66:	2100      	movs	r1, #0
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f7ff fb74 	bl	800d356 <dir_next>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800dc72:	7dfb      	ldrb	r3, [r7, #23]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	f43f af65 	beq.w	800db44 <dir_find+0x34>
 800dc7a:	e004      	b.n	800dc86 <dir_find+0x176>
		if (res != FR_OK) break;
 800dc7c:	bf00      	nop
 800dc7e:	e002      	b.n	800dc86 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800dc80:	bf00      	nop
 800dc82:	e000      	b.n	800dc86 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800dc84:	bf00      	nop

	return res;
 800dc86:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3718      	adds	r7, #24
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b08c      	sub	sp, #48	; 0x30
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dca4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d001      	beq.n	800dcb0 <dir_register+0x20>
 800dcac:	2306      	movs	r3, #6
 800dcae:	e0e0      	b.n	800de72 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	627b      	str	r3, [r7, #36]	; 0x24
 800dcb4:	e002      	b.n	800dcbc <dir_register+0x2c>
 800dcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb8:	3301      	adds	r3, #1
 800dcba:	627b      	str	r3, [r7, #36]	; 0x24
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	68da      	ldr	r2, [r3, #12]
 800dcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc2:	005b      	lsls	r3, r3, #1
 800dcc4:	4413      	add	r3, r2
 800dcc6:	881b      	ldrh	r3, [r3, #0]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d1f4      	bne.n	800dcb6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800dcd2:	f107 030c 	add.w	r3, r7, #12
 800dcd6:	220c      	movs	r2, #12
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7fe fd15 	bl	800c708 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800dcde:	7dfb      	ldrb	r3, [r7, #23]
 800dce0:	f003 0301 	and.w	r3, r3, #1
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d032      	beq.n	800dd4e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2240      	movs	r2, #64	; 0x40
 800dcec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	62bb      	str	r3, [r7, #40]	; 0x28
 800dcf4:	e016      	b.n	800dd24 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	68da      	ldr	r2, [r3, #12]
 800dd00:	f107 010c 	add.w	r1, r7, #12
 800dd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd06:	f7ff fdad 	bl	800d864 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f7ff ff00 	bl	800db10 <dir_find>
 800dd10:	4603      	mov	r3, r0
 800dd12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800dd16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d106      	bne.n	800dd2c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800dd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd20:	3301      	adds	r3, #1
 800dd22:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd26:	2b63      	cmp	r3, #99	; 0x63
 800dd28:	d9e5      	bls.n	800dcf6 <dir_register+0x66>
 800dd2a:	e000      	b.n	800dd2e <dir_register+0x9e>
			if (res != FR_OK) break;
 800dd2c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800dd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd30:	2b64      	cmp	r3, #100	; 0x64
 800dd32:	d101      	bne.n	800dd38 <dir_register+0xa8>
 800dd34:	2307      	movs	r3, #7
 800dd36:	e09c      	b.n	800de72 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800dd38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd3c:	2b04      	cmp	r3, #4
 800dd3e:	d002      	beq.n	800dd46 <dir_register+0xb6>
 800dd40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd44:	e095      	b.n	800de72 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800dd46:	7dfa      	ldrb	r2, [r7, #23]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800dd4e:	7dfb      	ldrb	r3, [r7, #23]
 800dd50:	f003 0302 	and.w	r3, r3, #2
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d007      	beq.n	800dd68 <dir_register+0xd8>
 800dd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd5a:	330c      	adds	r3, #12
 800dd5c:	4a47      	ldr	r2, [pc, #284]	; (800de7c <dir_register+0x1ec>)
 800dd5e:	fba2 2303 	umull	r2, r3, r2, r3
 800dd62:	089b      	lsrs	r3, r3, #2
 800dd64:	3301      	adds	r3, #1
 800dd66:	e000      	b.n	800dd6a <dir_register+0xda>
 800dd68:	2301      	movs	r3, #1
 800dd6a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800dd6c:	6a39      	ldr	r1, [r7, #32]
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f7ff fbb6 	bl	800d4e0 <dir_alloc>
 800dd74:	4603      	mov	r3, r0
 800dd76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800dd7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d148      	bne.n	800de14 <dir_register+0x184>
 800dd82:	6a3b      	ldr	r3, [r7, #32]
 800dd84:	3b01      	subs	r3, #1
 800dd86:	623b      	str	r3, [r7, #32]
 800dd88:	6a3b      	ldr	r3, [r7, #32]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d042      	beq.n	800de14 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	695a      	ldr	r2, [r3, #20]
 800dd92:	6a3b      	ldr	r3, [r7, #32]
 800dd94:	015b      	lsls	r3, r3, #5
 800dd96:	1ad3      	subs	r3, r2, r3
 800dd98:	4619      	mov	r1, r3
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7ff fa60 	bl	800d260 <dir_sdi>
 800dda0:	4603      	mov	r3, r0
 800dda2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800dda6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d132      	bne.n	800de14 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	3324      	adds	r3, #36	; 0x24
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7ff fde4 	bl	800d980 <sum_sfn>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	69db      	ldr	r3, [r3, #28]
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	69f8      	ldr	r0, [r7, #28]
 800ddc4:	f7fe fece 	bl	800cb64 <move_window>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800ddce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d11d      	bne.n	800de12 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ddd6:	69fb      	ldr	r3, [r7, #28]
 800ddd8:	68d8      	ldr	r0, [r3, #12]
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6a19      	ldr	r1, [r3, #32]
 800ddde:	6a3b      	ldr	r3, [r7, #32]
 800dde0:	b2da      	uxtb	r2, r3
 800dde2:	7efb      	ldrb	r3, [r7, #27]
 800dde4:	f7ff fcd6 	bl	800d794 <put_lfn>
				fs->wflag = 1;
 800dde8:	69fb      	ldr	r3, [r7, #28]
 800ddea:	2201      	movs	r2, #1
 800ddec:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ddee:	2100      	movs	r1, #0
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f7ff fab0 	bl	800d356 <dir_next>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ddfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de00:	2b00      	cmp	r3, #0
 800de02:	d107      	bne.n	800de14 <dir_register+0x184>
 800de04:	6a3b      	ldr	r3, [r7, #32]
 800de06:	3b01      	subs	r3, #1
 800de08:	623b      	str	r3, [r7, #32]
 800de0a:	6a3b      	ldr	r3, [r7, #32]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d1d5      	bne.n	800ddbc <dir_register+0x12c>
 800de10:	e000      	b.n	800de14 <dir_register+0x184>
				if (res != FR_OK) break;
 800de12:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800de14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d128      	bne.n	800de6e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	69db      	ldr	r3, [r3, #28]
 800de20:	4619      	mov	r1, r3
 800de22:	69f8      	ldr	r0, [r7, #28]
 800de24:	f7fe fe9e 	bl	800cb64 <move_window>
 800de28:	4603      	mov	r3, r0
 800de2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800de2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de32:	2b00      	cmp	r3, #0
 800de34:	d11b      	bne.n	800de6e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6a1b      	ldr	r3, [r3, #32]
 800de3a:	2220      	movs	r2, #32
 800de3c:	2100      	movs	r1, #0
 800de3e:	4618      	mov	r0, r3
 800de40:	f7fe fc83 	bl	800c74a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6a18      	ldr	r0, [r3, #32]
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	3324      	adds	r3, #36	; 0x24
 800de4c:	220b      	movs	r2, #11
 800de4e:	4619      	mov	r1, r3
 800de50:	f7fe fc5a 	bl	800c708 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6a1b      	ldr	r3, [r3, #32]
 800de5e:	330c      	adds	r3, #12
 800de60:	f002 0218 	and.w	r2, r2, #24
 800de64:	b2d2      	uxtb	r2, r2
 800de66:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	2201      	movs	r2, #1
 800de6c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800de6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800de72:	4618      	mov	r0, r3
 800de74:	3730      	adds	r7, #48	; 0x30
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	bf00      	nop
 800de7c:	4ec4ec4f 	.word	0x4ec4ec4f

0800de80 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b088      	sub	sp, #32
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	2200      	movs	r2, #0
 800de94:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	69db      	ldr	r3, [r3, #28]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	f000 80c9 	beq.w	800e032 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dea8:	d032      	beq.n	800df10 <get_fileinfo+0x90>
			i = j = 0;
 800deaa:	2300      	movs	r3, #0
 800deac:	61bb      	str	r3, [r7, #24]
 800deae:	69bb      	ldr	r3, [r7, #24]
 800deb0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800deb2:	e01b      	b.n	800deec <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800deb4:	89fb      	ldrh	r3, [r7, #14]
 800deb6:	2100      	movs	r1, #0
 800deb8:	4618      	mov	r0, r3
 800deba:	f001 fd2f 	bl	800f91c <ff_convert>
 800debe:	4603      	mov	r3, r0
 800dec0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800dec2:	89fb      	ldrh	r3, [r7, #14]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d102      	bne.n	800dece <get_fileinfo+0x4e>
 800dec8:	2300      	movs	r3, #0
 800deca:	61fb      	str	r3, [r7, #28]
 800decc:	e01a      	b.n	800df04 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	2bfe      	cmp	r3, #254	; 0xfe
 800ded2:	d902      	bls.n	800deda <get_fileinfo+0x5a>
 800ded4:	2300      	movs	r3, #0
 800ded6:	61fb      	str	r3, [r7, #28]
 800ded8:	e014      	b.n	800df04 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800deda:	69fb      	ldr	r3, [r7, #28]
 800dedc:	1c5a      	adds	r2, r3, #1
 800dede:	61fa      	str	r2, [r7, #28]
 800dee0:	89fa      	ldrh	r2, [r7, #14]
 800dee2:	b2d1      	uxtb	r1, r2
 800dee4:	683a      	ldr	r2, [r7, #0]
 800dee6:	4413      	add	r3, r2
 800dee8:	460a      	mov	r2, r1
 800deea:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	68da      	ldr	r2, [r3, #12]
 800def0:	69bb      	ldr	r3, [r7, #24]
 800def2:	1c59      	adds	r1, r3, #1
 800def4:	61b9      	str	r1, [r7, #24]
 800def6:	005b      	lsls	r3, r3, #1
 800def8:	4413      	add	r3, r2
 800defa:	881b      	ldrh	r3, [r3, #0]
 800defc:	81fb      	strh	r3, [r7, #14]
 800defe:	89fb      	ldrh	r3, [r7, #14]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d1d7      	bne.n	800deb4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800df04:	683a      	ldr	r2, [r7, #0]
 800df06:	69fb      	ldr	r3, [r7, #28]
 800df08:	4413      	add	r3, r2
 800df0a:	3316      	adds	r3, #22
 800df0c:	2200      	movs	r2, #0
 800df0e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800df10:	2300      	movs	r3, #0
 800df12:	61bb      	str	r3, [r7, #24]
 800df14:	69bb      	ldr	r3, [r7, #24]
 800df16:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800df18:	683a      	ldr	r2, [r7, #0]
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	4413      	add	r3, r2
 800df1e:	3316      	adds	r3, #22
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800df24:	e04c      	b.n	800dfc0 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6a1a      	ldr	r2, [r3, #32]
 800df2a:	69fb      	ldr	r3, [r7, #28]
 800df2c:	1c59      	adds	r1, r3, #1
 800df2e:	61f9      	str	r1, [r7, #28]
 800df30:	4413      	add	r3, r2
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800df36:	7dfb      	ldrb	r3, [r7, #23]
 800df38:	2b20      	cmp	r3, #32
 800df3a:	d100      	bne.n	800df3e <get_fileinfo+0xbe>
 800df3c:	e040      	b.n	800dfc0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800df3e:	7dfb      	ldrb	r3, [r7, #23]
 800df40:	2b05      	cmp	r3, #5
 800df42:	d101      	bne.n	800df48 <get_fileinfo+0xc8>
 800df44:	23e5      	movs	r3, #229	; 0xe5
 800df46:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800df48:	69fb      	ldr	r3, [r7, #28]
 800df4a:	2b09      	cmp	r3, #9
 800df4c:	d10f      	bne.n	800df6e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800df4e:	89bb      	ldrh	r3, [r7, #12]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d105      	bne.n	800df60 <get_fileinfo+0xe0>
 800df54:	683a      	ldr	r2, [r7, #0]
 800df56:	69bb      	ldr	r3, [r7, #24]
 800df58:	4413      	add	r3, r2
 800df5a:	3316      	adds	r3, #22
 800df5c:	222e      	movs	r2, #46	; 0x2e
 800df5e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800df60:	69bb      	ldr	r3, [r7, #24]
 800df62:	1c5a      	adds	r2, r3, #1
 800df64:	61ba      	str	r2, [r7, #24]
 800df66:	683a      	ldr	r2, [r7, #0]
 800df68:	4413      	add	r3, r2
 800df6a:	222e      	movs	r2, #46	; 0x2e
 800df6c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800df6e:	683a      	ldr	r2, [r7, #0]
 800df70:	69bb      	ldr	r3, [r7, #24]
 800df72:	4413      	add	r3, r2
 800df74:	3309      	adds	r3, #9
 800df76:	7dfa      	ldrb	r2, [r7, #23]
 800df78:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800df7a:	89bb      	ldrh	r3, [r7, #12]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d11c      	bne.n	800dfba <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800df80:	7dfb      	ldrb	r3, [r7, #23]
 800df82:	2b40      	cmp	r3, #64	; 0x40
 800df84:	d913      	bls.n	800dfae <get_fileinfo+0x12e>
 800df86:	7dfb      	ldrb	r3, [r7, #23]
 800df88:	2b5a      	cmp	r3, #90	; 0x5a
 800df8a:	d810      	bhi.n	800dfae <get_fileinfo+0x12e>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6a1b      	ldr	r3, [r3, #32]
 800df90:	330c      	adds	r3, #12
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	461a      	mov	r2, r3
 800df96:	69fb      	ldr	r3, [r7, #28]
 800df98:	2b08      	cmp	r3, #8
 800df9a:	d901      	bls.n	800dfa0 <get_fileinfo+0x120>
 800df9c:	2310      	movs	r3, #16
 800df9e:	e000      	b.n	800dfa2 <get_fileinfo+0x122>
 800dfa0:	2308      	movs	r3, #8
 800dfa2:	4013      	ands	r3, r2
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d002      	beq.n	800dfae <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800dfa8:	7dfb      	ldrb	r3, [r7, #23]
 800dfaa:	3320      	adds	r3, #32
 800dfac:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800dfae:	683a      	ldr	r2, [r7, #0]
 800dfb0:	69bb      	ldr	r3, [r7, #24]
 800dfb2:	4413      	add	r3, r2
 800dfb4:	3316      	adds	r3, #22
 800dfb6:	7dfa      	ldrb	r2, [r7, #23]
 800dfb8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800dfba:	69bb      	ldr	r3, [r7, #24]
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	2b0a      	cmp	r3, #10
 800dfc4:	d9af      	bls.n	800df26 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800dfc6:	89bb      	ldrh	r3, [r7, #12]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d10d      	bne.n	800dfe8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800dfcc:	683a      	ldr	r2, [r7, #0]
 800dfce:	69bb      	ldr	r3, [r7, #24]
 800dfd0:	4413      	add	r3, r2
 800dfd2:	3316      	adds	r3, #22
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6a1b      	ldr	r3, [r3, #32]
 800dfdc:	330c      	adds	r3, #12
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d101      	bne.n	800dfe8 <get_fileinfo+0x168>
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800dfe8:	683a      	ldr	r2, [r7, #0]
 800dfea:	69bb      	ldr	r3, [r7, #24]
 800dfec:	4413      	add	r3, r2
 800dfee:	3309      	adds	r3, #9
 800dff0:	2200      	movs	r2, #0
 800dff2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6a1b      	ldr	r3, [r3, #32]
 800dff8:	7ada      	ldrb	r2, [r3, #11]
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6a1b      	ldr	r3, [r3, #32]
 800e002:	331c      	adds	r3, #28
 800e004:	4618      	mov	r0, r3
 800e006:	f7fe fb15 	bl	800c634 <ld_dword>
 800e00a:	4602      	mov	r2, r0
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6a1b      	ldr	r3, [r3, #32]
 800e014:	3316      	adds	r3, #22
 800e016:	4618      	mov	r0, r3
 800e018:	f7fe fb0c 	bl	800c634 <ld_dword>
 800e01c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	b29a      	uxth	r2, r3
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	80da      	strh	r2, [r3, #6]
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	0c1b      	lsrs	r3, r3, #16
 800e02a:	b29a      	uxth	r2, r3
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	809a      	strh	r2, [r3, #4]
 800e030:	e000      	b.n	800e034 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e032:	bf00      	nop
}
 800e034:	3720      	adds	r7, #32
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
	...

0800e03c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b08a      	sub	sp, #40	; 0x28
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	613b      	str	r3, [r7, #16]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	68db      	ldr	r3, [r3, #12]
 800e052:	60fb      	str	r3, [r7, #12]
 800e054:	2300      	movs	r3, #0
 800e056:	617b      	str	r3, [r7, #20]
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e05c:	69bb      	ldr	r3, [r7, #24]
 800e05e:	1c5a      	adds	r2, r3, #1
 800e060:	61ba      	str	r2, [r7, #24]
 800e062:	693a      	ldr	r2, [r7, #16]
 800e064:	4413      	add	r3, r2
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e06a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e06c:	2b1f      	cmp	r3, #31
 800e06e:	d940      	bls.n	800e0f2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e070:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e072:	2b2f      	cmp	r3, #47	; 0x2f
 800e074:	d006      	beq.n	800e084 <create_name+0x48>
 800e076:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e078:	2b5c      	cmp	r3, #92	; 0x5c
 800e07a:	d110      	bne.n	800e09e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e07c:	e002      	b.n	800e084 <create_name+0x48>
 800e07e:	69bb      	ldr	r3, [r7, #24]
 800e080:	3301      	adds	r3, #1
 800e082:	61bb      	str	r3, [r7, #24]
 800e084:	693a      	ldr	r2, [r7, #16]
 800e086:	69bb      	ldr	r3, [r7, #24]
 800e088:	4413      	add	r3, r2
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	2b2f      	cmp	r3, #47	; 0x2f
 800e08e:	d0f6      	beq.n	800e07e <create_name+0x42>
 800e090:	693a      	ldr	r2, [r7, #16]
 800e092:	69bb      	ldr	r3, [r7, #24]
 800e094:	4413      	add	r3, r2
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	2b5c      	cmp	r3, #92	; 0x5c
 800e09a:	d0f0      	beq.n	800e07e <create_name+0x42>
			break;
 800e09c:	e02a      	b.n	800e0f4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	2bfe      	cmp	r3, #254	; 0xfe
 800e0a2:	d901      	bls.n	800e0a8 <create_name+0x6c>
 800e0a4:	2306      	movs	r3, #6
 800e0a6:	e17d      	b.n	800e3a4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e0a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e0ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0b0:	2101      	movs	r1, #1
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f001 fc32 	bl	800f91c <ff_convert>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e0bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d101      	bne.n	800e0c6 <create_name+0x8a>
 800e0c2:	2306      	movs	r3, #6
 800e0c4:	e16e      	b.n	800e3a4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e0c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0c8:	2b7f      	cmp	r3, #127	; 0x7f
 800e0ca:	d809      	bhi.n	800e0e0 <create_name+0xa4>
 800e0cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0ce:	4619      	mov	r1, r3
 800e0d0:	488d      	ldr	r0, [pc, #564]	; (800e308 <create_name+0x2cc>)
 800e0d2:	f7fe fb7c 	bl	800c7ce <chk_chr>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d001      	beq.n	800e0e0 <create_name+0xa4>
 800e0dc:	2306      	movs	r3, #6
 800e0de:	e161      	b.n	800e3a4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	1c5a      	adds	r2, r3, #1
 800e0e4:	617a      	str	r2, [r7, #20]
 800e0e6:	005b      	lsls	r3, r3, #1
 800e0e8:	68fa      	ldr	r2, [r7, #12]
 800e0ea:	4413      	add	r3, r2
 800e0ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e0ee:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e0f0:	e7b4      	b.n	800e05c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e0f2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e0f4:	693a      	ldr	r2, [r7, #16]
 800e0f6:	69bb      	ldr	r3, [r7, #24]
 800e0f8:	441a      	add	r2, r3
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e0fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e100:	2b1f      	cmp	r3, #31
 800e102:	d801      	bhi.n	800e108 <create_name+0xcc>
 800e104:	2304      	movs	r3, #4
 800e106:	e000      	b.n	800e10a <create_name+0xce>
 800e108:	2300      	movs	r3, #0
 800e10a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e10e:	e011      	b.n	800e134 <create_name+0xf8>
		w = lfn[di - 1];
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e116:	3b01      	subs	r3, #1
 800e118:	005b      	lsls	r3, r3, #1
 800e11a:	68fa      	ldr	r2, [r7, #12]
 800e11c:	4413      	add	r3, r2
 800e11e:	881b      	ldrh	r3, [r3, #0]
 800e120:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e122:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e124:	2b20      	cmp	r3, #32
 800e126:	d002      	beq.n	800e12e <create_name+0xf2>
 800e128:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e12a:	2b2e      	cmp	r3, #46	; 0x2e
 800e12c:	d106      	bne.n	800e13c <create_name+0x100>
		di--;
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	3b01      	subs	r3, #1
 800e132:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d1ea      	bne.n	800e110 <create_name+0xd4>
 800e13a:	e000      	b.n	800e13e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e13c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	005b      	lsls	r3, r3, #1
 800e142:	68fa      	ldr	r2, [r7, #12]
 800e144:	4413      	add	r3, r2
 800e146:	2200      	movs	r2, #0
 800e148:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d101      	bne.n	800e154 <create_name+0x118>
 800e150:	2306      	movs	r3, #6
 800e152:	e127      	b.n	800e3a4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	3324      	adds	r3, #36	; 0x24
 800e158:	220b      	movs	r2, #11
 800e15a:	2120      	movs	r1, #32
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7fe faf4 	bl	800c74a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e162:	2300      	movs	r3, #0
 800e164:	61bb      	str	r3, [r7, #24]
 800e166:	e002      	b.n	800e16e <create_name+0x132>
 800e168:	69bb      	ldr	r3, [r7, #24]
 800e16a:	3301      	adds	r3, #1
 800e16c:	61bb      	str	r3, [r7, #24]
 800e16e:	69bb      	ldr	r3, [r7, #24]
 800e170:	005b      	lsls	r3, r3, #1
 800e172:	68fa      	ldr	r2, [r7, #12]
 800e174:	4413      	add	r3, r2
 800e176:	881b      	ldrh	r3, [r3, #0]
 800e178:	2b20      	cmp	r3, #32
 800e17a:	d0f5      	beq.n	800e168 <create_name+0x12c>
 800e17c:	69bb      	ldr	r3, [r7, #24]
 800e17e:	005b      	lsls	r3, r3, #1
 800e180:	68fa      	ldr	r2, [r7, #12]
 800e182:	4413      	add	r3, r2
 800e184:	881b      	ldrh	r3, [r3, #0]
 800e186:	2b2e      	cmp	r3, #46	; 0x2e
 800e188:	d0ee      	beq.n	800e168 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e18a:	69bb      	ldr	r3, [r7, #24]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d009      	beq.n	800e1a4 <create_name+0x168>
 800e190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e194:	f043 0303 	orr.w	r3, r3, #3
 800e198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e19c:	e002      	b.n	800e1a4 <create_name+0x168>
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	3b01      	subs	r3, #1
 800e1a2:	617b      	str	r3, [r7, #20]
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d009      	beq.n	800e1be <create_name+0x182>
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e1b0:	3b01      	subs	r3, #1
 800e1b2:	005b      	lsls	r3, r3, #1
 800e1b4:	68fa      	ldr	r2, [r7, #12]
 800e1b6:	4413      	add	r3, r2
 800e1b8:	881b      	ldrh	r3, [r3, #0]
 800e1ba:	2b2e      	cmp	r3, #46	; 0x2e
 800e1bc:	d1ef      	bne.n	800e19e <create_name+0x162>

	i = b = 0; ni = 8;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	623b      	str	r3, [r7, #32]
 800e1c8:	2308      	movs	r3, #8
 800e1ca:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e1cc:	69bb      	ldr	r3, [r7, #24]
 800e1ce:	1c5a      	adds	r2, r3, #1
 800e1d0:	61ba      	str	r2, [r7, #24]
 800e1d2:	005b      	lsls	r3, r3, #1
 800e1d4:	68fa      	ldr	r2, [r7, #12]
 800e1d6:	4413      	add	r3, r2
 800e1d8:	881b      	ldrh	r3, [r3, #0]
 800e1da:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e1dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	f000 8090 	beq.w	800e304 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e1e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1e6:	2b20      	cmp	r3, #32
 800e1e8:	d006      	beq.n	800e1f8 <create_name+0x1bc>
 800e1ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1ec:	2b2e      	cmp	r3, #46	; 0x2e
 800e1ee:	d10a      	bne.n	800e206 <create_name+0x1ca>
 800e1f0:	69ba      	ldr	r2, [r7, #24]
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d006      	beq.n	800e206 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1fc:	f043 0303 	orr.w	r3, r3, #3
 800e200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e204:	e07d      	b.n	800e302 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e206:	6a3a      	ldr	r2, [r7, #32]
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d203      	bcs.n	800e216 <create_name+0x1da>
 800e20e:	69ba      	ldr	r2, [r7, #24]
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	429a      	cmp	r2, r3
 800e214:	d123      	bne.n	800e25e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e216:	69fb      	ldr	r3, [r7, #28]
 800e218:	2b0b      	cmp	r3, #11
 800e21a:	d106      	bne.n	800e22a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e21c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e220:	f043 0303 	orr.w	r3, r3, #3
 800e224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e228:	e075      	b.n	800e316 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e22a:	69ba      	ldr	r2, [r7, #24]
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d005      	beq.n	800e23e <create_name+0x202>
 800e232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e236:	f043 0303 	orr.w	r3, r3, #3
 800e23a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e23e:	69ba      	ldr	r2, [r7, #24]
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	429a      	cmp	r2, r3
 800e244:	d866      	bhi.n	800e314 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	61bb      	str	r3, [r7, #24]
 800e24a:	2308      	movs	r3, #8
 800e24c:	623b      	str	r3, [r7, #32]
 800e24e:	230b      	movs	r3, #11
 800e250:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e252:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e256:	009b      	lsls	r3, r3, #2
 800e258:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e25c:	e051      	b.n	800e302 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e25e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e260:	2b7f      	cmp	r3, #127	; 0x7f
 800e262:	d914      	bls.n	800e28e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e264:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e266:	2100      	movs	r1, #0
 800e268:	4618      	mov	r0, r3
 800e26a:	f001 fb57 	bl	800f91c <ff_convert>
 800e26e:	4603      	mov	r3, r0
 800e270:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e272:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e274:	2b00      	cmp	r3, #0
 800e276:	d004      	beq.n	800e282 <create_name+0x246>
 800e278:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e27a:	3b80      	subs	r3, #128	; 0x80
 800e27c:	4a23      	ldr	r2, [pc, #140]	; (800e30c <create_name+0x2d0>)
 800e27e:	5cd3      	ldrb	r3, [r2, r3]
 800e280:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e286:	f043 0302 	orr.w	r3, r3, #2
 800e28a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e28e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e290:	2b00      	cmp	r3, #0
 800e292:	d007      	beq.n	800e2a4 <create_name+0x268>
 800e294:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e296:	4619      	mov	r1, r3
 800e298:	481d      	ldr	r0, [pc, #116]	; (800e310 <create_name+0x2d4>)
 800e29a:	f7fe fa98 	bl	800c7ce <chk_chr>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d008      	beq.n	800e2b6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e2a4:	235f      	movs	r3, #95	; 0x5f
 800e2a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e2a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2ac:	f043 0303 	orr.w	r3, r3, #3
 800e2b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e2b4:	e01b      	b.n	800e2ee <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e2b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2b8:	2b40      	cmp	r3, #64	; 0x40
 800e2ba:	d909      	bls.n	800e2d0 <create_name+0x294>
 800e2bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2be:	2b5a      	cmp	r3, #90	; 0x5a
 800e2c0:	d806      	bhi.n	800e2d0 <create_name+0x294>
					b |= 2;
 800e2c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e2c6:	f043 0302 	orr.w	r3, r3, #2
 800e2ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e2ce:	e00e      	b.n	800e2ee <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e2d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2d2:	2b60      	cmp	r3, #96	; 0x60
 800e2d4:	d90b      	bls.n	800e2ee <create_name+0x2b2>
 800e2d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2d8:	2b7a      	cmp	r3, #122	; 0x7a
 800e2da:	d808      	bhi.n	800e2ee <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e2dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e2e0:	f043 0301 	orr.w	r3, r3, #1
 800e2e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e2e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2ea:	3b20      	subs	r3, #32
 800e2ec:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e2ee:	6a3b      	ldr	r3, [r7, #32]
 800e2f0:	1c5a      	adds	r2, r3, #1
 800e2f2:	623a      	str	r2, [r7, #32]
 800e2f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e2f6:	b2d1      	uxtb	r1, r2
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	4413      	add	r3, r2
 800e2fc:	460a      	mov	r2, r1
 800e2fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e302:	e763      	b.n	800e1cc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e304:	bf00      	nop
 800e306:	e006      	b.n	800e316 <create_name+0x2da>
 800e308:	08010444 	.word	0x08010444
 800e30c:	08010520 	.word	0x08010520
 800e310:	08010450 	.word	0x08010450
			if (si > di) break;			/* No extension */
 800e314:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e31c:	2be5      	cmp	r3, #229	; 0xe5
 800e31e:	d103      	bne.n	800e328 <create_name+0x2ec>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2205      	movs	r2, #5
 800e324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	2b08      	cmp	r3, #8
 800e32c:	d104      	bne.n	800e338 <create_name+0x2fc>
 800e32e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e332:	009b      	lsls	r3, r3, #2
 800e334:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e338:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e33c:	f003 030c 	and.w	r3, r3, #12
 800e340:	2b0c      	cmp	r3, #12
 800e342:	d005      	beq.n	800e350 <create_name+0x314>
 800e344:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e348:	f003 0303 	and.w	r3, r3, #3
 800e34c:	2b03      	cmp	r3, #3
 800e34e:	d105      	bne.n	800e35c <create_name+0x320>
 800e350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e354:	f043 0302 	orr.w	r3, r3, #2
 800e358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e35c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e360:	f003 0302 	and.w	r3, r3, #2
 800e364:	2b00      	cmp	r3, #0
 800e366:	d117      	bne.n	800e398 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e368:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e36c:	f003 0303 	and.w	r3, r3, #3
 800e370:	2b01      	cmp	r3, #1
 800e372:	d105      	bne.n	800e380 <create_name+0x344>
 800e374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e378:	f043 0310 	orr.w	r3, r3, #16
 800e37c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e380:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e384:	f003 030c 	and.w	r3, r3, #12
 800e388:	2b04      	cmp	r3, #4
 800e38a:	d105      	bne.n	800e398 <create_name+0x35c>
 800e38c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e390:	f043 0308 	orr.w	r3, r3, #8
 800e394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e39e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800e3a2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3728      	adds	r7, #40	; 0x28
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}

0800e3ac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b086      	sub	sp, #24
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e3ba:	693b      	ldr	r3, [r7, #16]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e3c0:	e002      	b.n	800e3c8 <follow_path+0x1c>
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	603b      	str	r3, [r7, #0]
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	2b2f      	cmp	r3, #47	; 0x2f
 800e3ce:	d0f8      	beq.n	800e3c2 <follow_path+0x16>
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	2b5c      	cmp	r3, #92	; 0x5c
 800e3d6:	d0f4      	beq.n	800e3c2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e3d8:	693b      	ldr	r3, [r7, #16]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	2b1f      	cmp	r3, #31
 800e3e4:	d80a      	bhi.n	800e3fc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2280      	movs	r2, #128	; 0x80
 800e3ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e3ee:	2100      	movs	r1, #0
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f7fe ff35 	bl	800d260 <dir_sdi>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	75fb      	strb	r3, [r7, #23]
 800e3fa:	e043      	b.n	800e484 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e3fc:	463b      	mov	r3, r7
 800e3fe:	4619      	mov	r1, r3
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f7ff fe1b 	bl	800e03c <create_name>
 800e406:	4603      	mov	r3, r0
 800e408:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e40a:	7dfb      	ldrb	r3, [r7, #23]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d134      	bne.n	800e47a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f7ff fb7d 	bl	800db10 <dir_find>
 800e416:	4603      	mov	r3, r0
 800e418:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e420:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e422:	7dfb      	ldrb	r3, [r7, #23]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d00a      	beq.n	800e43e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e428:	7dfb      	ldrb	r3, [r7, #23]
 800e42a:	2b04      	cmp	r3, #4
 800e42c:	d127      	bne.n	800e47e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e42e:	7afb      	ldrb	r3, [r7, #11]
 800e430:	f003 0304 	and.w	r3, r3, #4
 800e434:	2b00      	cmp	r3, #0
 800e436:	d122      	bne.n	800e47e <follow_path+0xd2>
 800e438:	2305      	movs	r3, #5
 800e43a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e43c:	e01f      	b.n	800e47e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e43e:	7afb      	ldrb	r3, [r7, #11]
 800e440:	f003 0304 	and.w	r3, r3, #4
 800e444:	2b00      	cmp	r3, #0
 800e446:	d11c      	bne.n	800e482 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	799b      	ldrb	r3, [r3, #6]
 800e44c:	f003 0310 	and.w	r3, r3, #16
 800e450:	2b00      	cmp	r3, #0
 800e452:	d102      	bne.n	800e45a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e454:	2305      	movs	r3, #5
 800e456:	75fb      	strb	r3, [r7, #23]
 800e458:	e014      	b.n	800e484 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	695b      	ldr	r3, [r3, #20]
 800e464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e468:	4413      	add	r3, r2
 800e46a:	4619      	mov	r1, r3
 800e46c:	68f8      	ldr	r0, [r7, #12]
 800e46e:	f7ff f87e 	bl	800d56e <ld_clust>
 800e472:	4602      	mov	r2, r0
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e478:	e7c0      	b.n	800e3fc <follow_path+0x50>
			if (res != FR_OK) break;
 800e47a:	bf00      	nop
 800e47c:	e002      	b.n	800e484 <follow_path+0xd8>
				break;
 800e47e:	bf00      	nop
 800e480:	e000      	b.n	800e484 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e482:	bf00      	nop
			}
		}
	}

	return res;
 800e484:	7dfb      	ldrb	r3, [r7, #23]
}
 800e486:	4618      	mov	r0, r3
 800e488:	3718      	adds	r7, #24
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}

0800e48e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e48e:	b480      	push	{r7}
 800e490:	b087      	sub	sp, #28
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e496:	f04f 33ff 	mov.w	r3, #4294967295
 800e49a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d031      	beq.n	800e508 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	617b      	str	r3, [r7, #20]
 800e4aa:	e002      	b.n	800e4b2 <get_ldnumber+0x24>
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	617b      	str	r3, [r7, #20]
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	2b1f      	cmp	r3, #31
 800e4b8:	d903      	bls.n	800e4c2 <get_ldnumber+0x34>
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	2b3a      	cmp	r3, #58	; 0x3a
 800e4c0:	d1f4      	bne.n	800e4ac <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	2b3a      	cmp	r3, #58	; 0x3a
 800e4c8:	d11c      	bne.n	800e504 <get_ldnumber+0x76>
			tp = *path;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	1c5a      	adds	r2, r3, #1
 800e4d4:	60fa      	str	r2, [r7, #12]
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	3b30      	subs	r3, #48	; 0x30
 800e4da:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	2b09      	cmp	r3, #9
 800e4e0:	d80e      	bhi.n	800e500 <get_ldnumber+0x72>
 800e4e2:	68fa      	ldr	r2, [r7, #12]
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d10a      	bne.n	800e500 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d107      	bne.n	800e500 <get_ldnumber+0x72>
					vol = (int)i;
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	617b      	str	r3, [r7, #20]
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	697a      	ldr	r2, [r7, #20]
 800e4fe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	e002      	b.n	800e50a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e504:	2300      	movs	r3, #0
 800e506:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e508:	693b      	ldr	r3, [r7, #16]
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	371c      	adds	r7, #28
 800e50e:	46bd      	mov	sp, r7
 800e510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e514:	4770      	bx	lr
	...

0800e518 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2200      	movs	r2, #0
 800e526:	70da      	strb	r2, [r3, #3]
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f04f 32ff 	mov.w	r2, #4294967295
 800e52e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e530:	6839      	ldr	r1, [r7, #0]
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f7fe fb16 	bl	800cb64 <move_window>
 800e538:	4603      	mov	r3, r0
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d001      	beq.n	800e542 <check_fs+0x2a>
 800e53e:	2304      	movs	r3, #4
 800e540:	e038      	b.n	800e5b4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	3334      	adds	r3, #52	; 0x34
 800e546:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fe f85a 	bl	800c604 <ld_word>
 800e550:	4603      	mov	r3, r0
 800e552:	461a      	mov	r2, r3
 800e554:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e558:	429a      	cmp	r2, r3
 800e55a:	d001      	beq.n	800e560 <check_fs+0x48>
 800e55c:	2303      	movs	r3, #3
 800e55e:	e029      	b.n	800e5b4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e566:	2be9      	cmp	r3, #233	; 0xe9
 800e568:	d009      	beq.n	800e57e <check_fs+0x66>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e570:	2beb      	cmp	r3, #235	; 0xeb
 800e572:	d11e      	bne.n	800e5b2 <check_fs+0x9a>
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e57a:	2b90      	cmp	r3, #144	; 0x90
 800e57c:	d119      	bne.n	800e5b2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	3334      	adds	r3, #52	; 0x34
 800e582:	3336      	adds	r3, #54	; 0x36
 800e584:	4618      	mov	r0, r3
 800e586:	f7fe f855 	bl	800c634 <ld_dword>
 800e58a:	4603      	mov	r3, r0
 800e58c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e590:	4a0a      	ldr	r2, [pc, #40]	; (800e5bc <check_fs+0xa4>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d101      	bne.n	800e59a <check_fs+0x82>
 800e596:	2300      	movs	r3, #0
 800e598:	e00c      	b.n	800e5b4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	3334      	adds	r3, #52	; 0x34
 800e59e:	3352      	adds	r3, #82	; 0x52
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7fe f847 	bl	800c634 <ld_dword>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	4a05      	ldr	r2, [pc, #20]	; (800e5c0 <check_fs+0xa8>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d101      	bne.n	800e5b2 <check_fs+0x9a>
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	e000      	b.n	800e5b4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e5b2:	2302      	movs	r3, #2
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3708      	adds	r7, #8
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	00544146 	.word	0x00544146
 800e5c0:	33544146 	.word	0x33544146

0800e5c4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b096      	sub	sp, #88	; 0x58
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	60f8      	str	r0, [r7, #12]
 800e5cc:	60b9      	str	r1, [r7, #8]
 800e5ce:	4613      	mov	r3, r2
 800e5d0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e5d8:	68f8      	ldr	r0, [r7, #12]
 800e5da:	f7ff ff58 	bl	800e48e <get_ldnumber>
 800e5de:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	da01      	bge.n	800e5ea <find_volume+0x26>
 800e5e6:	230b      	movs	r3, #11
 800e5e8:	e230      	b.n	800ea4c <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e5ea:	4aa1      	ldr	r2, [pc, #644]	; (800e870 <find_volume+0x2ac>)
 800e5ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5f2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d101      	bne.n	800e5fe <find_volume+0x3a>
 800e5fa:	230c      	movs	r3, #12
 800e5fc:	e226      	b.n	800ea4c <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e602:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e604:	79fb      	ldrb	r3, [r7, #7]
 800e606:	f023 0301 	bic.w	r3, r3, #1
 800e60a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e60e:	781b      	ldrb	r3, [r3, #0]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d01a      	beq.n	800e64a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e616:	785b      	ldrb	r3, [r3, #1]
 800e618:	4618      	mov	r0, r3
 800e61a:	f7fd ff55 	bl	800c4c8 <disk_status>
 800e61e:	4603      	mov	r3, r0
 800e620:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e624:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e628:	f003 0301 	and.w	r3, r3, #1
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d10c      	bne.n	800e64a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e630:	79fb      	ldrb	r3, [r7, #7]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d007      	beq.n	800e646 <find_volume+0x82>
 800e636:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e63a:	f003 0304 	and.w	r3, r3, #4
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d001      	beq.n	800e646 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e642:	230a      	movs	r3, #10
 800e644:	e202      	b.n	800ea4c <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800e646:	2300      	movs	r3, #0
 800e648:	e200      	b.n	800ea4c <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e64c:	2200      	movs	r2, #0
 800e64e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e652:	b2da      	uxtb	r2, r3
 800e654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e656:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65a:	785b      	ldrb	r3, [r3, #1]
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7fd ff4d 	bl	800c4fc <disk_initialize>
 800e662:	4603      	mov	r3, r0
 800e664:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e668:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e66c:	f003 0301 	and.w	r3, r3, #1
 800e670:	2b00      	cmp	r3, #0
 800e672:	d001      	beq.n	800e678 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e674:	2303      	movs	r3, #3
 800e676:	e1e9      	b.n	800ea4c <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e678:	79fb      	ldrb	r3, [r7, #7]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d007      	beq.n	800e68e <find_volume+0xca>
 800e67e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e682:	f003 0304 	and.w	r3, r3, #4
 800e686:	2b00      	cmp	r3, #0
 800e688:	d001      	beq.n	800e68e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e68a:	230a      	movs	r3, #10
 800e68c:	e1de      	b.n	800ea4c <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e68e:	2300      	movs	r3, #0
 800e690:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e692:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e694:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e696:	f7ff ff3f 	bl	800e518 <check_fs>
 800e69a:	4603      	mov	r3, r0
 800e69c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e6a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e6a4:	2b02      	cmp	r3, #2
 800e6a6:	d149      	bne.n	800e73c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	643b      	str	r3, [r7, #64]	; 0x40
 800e6ac:	e01e      	b.n	800e6ec <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e6b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6b6:	011b      	lsls	r3, r3, #4
 800e6b8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e6bc:	4413      	add	r3, r2
 800e6be:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c2:	3304      	adds	r3, #4
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d006      	beq.n	800e6d8 <find_volume+0x114>
 800e6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6cc:	3308      	adds	r3, #8
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7fd ffb0 	bl	800c634 <ld_dword>
 800e6d4:	4602      	mov	r2, r0
 800e6d6:	e000      	b.n	800e6da <find_volume+0x116>
 800e6d8:	2200      	movs	r2, #0
 800e6da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6dc:	009b      	lsls	r3, r3, #2
 800e6de:	3358      	adds	r3, #88	; 0x58
 800e6e0:	443b      	add	r3, r7
 800e6e2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e6e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	643b      	str	r3, [r7, #64]	; 0x40
 800e6ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6ee:	2b03      	cmp	r3, #3
 800e6f0:	d9dd      	bls.n	800e6ae <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e6f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d002      	beq.n	800e702 <find_volume+0x13e>
 800e6fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6fe:	3b01      	subs	r3, #1
 800e700:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e704:	009b      	lsls	r3, r3, #2
 800e706:	3358      	adds	r3, #88	; 0x58
 800e708:	443b      	add	r3, r7
 800e70a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e70e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e712:	2b00      	cmp	r3, #0
 800e714:	d005      	beq.n	800e722 <find_volume+0x15e>
 800e716:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e718:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e71a:	f7ff fefd 	bl	800e518 <check_fs>
 800e71e:	4603      	mov	r3, r0
 800e720:	e000      	b.n	800e724 <find_volume+0x160>
 800e722:	2303      	movs	r3, #3
 800e724:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e728:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e72c:	2b01      	cmp	r3, #1
 800e72e:	d905      	bls.n	800e73c <find_volume+0x178>
 800e730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e732:	3301      	adds	r3, #1
 800e734:	643b      	str	r3, [r7, #64]	; 0x40
 800e736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e738:	2b03      	cmp	r3, #3
 800e73a:	d9e2      	bls.n	800e702 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e73c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e740:	2b04      	cmp	r3, #4
 800e742:	d101      	bne.n	800e748 <find_volume+0x184>
 800e744:	2301      	movs	r3, #1
 800e746:	e181      	b.n	800ea4c <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e748:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d901      	bls.n	800e754 <find_volume+0x190>
 800e750:	230d      	movs	r3, #13
 800e752:	e17b      	b.n	800ea4c <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e756:	3334      	adds	r3, #52	; 0x34
 800e758:	330b      	adds	r3, #11
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7fd ff52 	bl	800c604 <ld_word>
 800e760:	4603      	mov	r3, r0
 800e762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e766:	d001      	beq.n	800e76c <find_volume+0x1a8>
 800e768:	230d      	movs	r3, #13
 800e76a:	e16f      	b.n	800ea4c <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76e:	3334      	adds	r3, #52	; 0x34
 800e770:	3316      	adds	r3, #22
 800e772:	4618      	mov	r0, r3
 800e774:	f7fd ff46 	bl	800c604 <ld_word>
 800e778:	4603      	mov	r3, r0
 800e77a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e77c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d106      	bne.n	800e790 <find_volume+0x1cc>
 800e782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e784:	3334      	adds	r3, #52	; 0x34
 800e786:	3324      	adds	r3, #36	; 0x24
 800e788:	4618      	mov	r0, r3
 800e78a:	f7fd ff53 	bl	800c634 <ld_dword>
 800e78e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e792:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e794:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e798:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a2:	789b      	ldrb	r3, [r3, #2]
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d005      	beq.n	800e7b4 <find_volume+0x1f0>
 800e7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7aa:	789b      	ldrb	r3, [r3, #2]
 800e7ac:	2b02      	cmp	r3, #2
 800e7ae:	d001      	beq.n	800e7b4 <find_volume+0x1f0>
 800e7b0:	230d      	movs	r3, #13
 800e7b2:	e14b      	b.n	800ea4c <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b6:	789b      	ldrb	r3, [r3, #2]
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7bc:	fb02 f303 	mul.w	r3, r2, r3
 800e7c0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e7c8:	b29a      	uxth	r2, r3
 800e7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d0:	895b      	ldrh	r3, [r3, #10]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d008      	beq.n	800e7e8 <find_volume+0x224>
 800e7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d8:	895b      	ldrh	r3, [r3, #10]
 800e7da:	461a      	mov	r2, r3
 800e7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7de:	895b      	ldrh	r3, [r3, #10]
 800e7e0:	3b01      	subs	r3, #1
 800e7e2:	4013      	ands	r3, r2
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d001      	beq.n	800e7ec <find_volume+0x228>
 800e7e8:	230d      	movs	r3, #13
 800e7ea:	e12f      	b.n	800ea4c <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ee:	3334      	adds	r3, #52	; 0x34
 800e7f0:	3311      	adds	r3, #17
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7fd ff06 	bl	800c604 <ld_word>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e802:	891b      	ldrh	r3, [r3, #8]
 800e804:	f003 030f 	and.w	r3, r3, #15
 800e808:	b29b      	uxth	r3, r3
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d001      	beq.n	800e812 <find_volume+0x24e>
 800e80e:	230d      	movs	r3, #13
 800e810:	e11c      	b.n	800ea4c <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e814:	3334      	adds	r3, #52	; 0x34
 800e816:	3313      	adds	r3, #19
 800e818:	4618      	mov	r0, r3
 800e81a:	f7fd fef3 	bl	800c604 <ld_word>
 800e81e:	4603      	mov	r3, r0
 800e820:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e824:	2b00      	cmp	r3, #0
 800e826:	d106      	bne.n	800e836 <find_volume+0x272>
 800e828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82a:	3334      	adds	r3, #52	; 0x34
 800e82c:	3320      	adds	r3, #32
 800e82e:	4618      	mov	r0, r3
 800e830:	f7fd ff00 	bl	800c634 <ld_dword>
 800e834:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e838:	3334      	adds	r3, #52	; 0x34
 800e83a:	330e      	adds	r3, #14
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7fd fee1 	bl	800c604 <ld_word>
 800e842:	4603      	mov	r3, r0
 800e844:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e846:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d101      	bne.n	800e850 <find_volume+0x28c>
 800e84c:	230d      	movs	r3, #13
 800e84e:	e0fd      	b.n	800ea4c <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e850:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e854:	4413      	add	r3, r2
 800e856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e858:	8912      	ldrh	r2, [r2, #8]
 800e85a:	0912      	lsrs	r2, r2, #4
 800e85c:	b292      	uxth	r2, r2
 800e85e:	4413      	add	r3, r2
 800e860:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e862:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e866:	429a      	cmp	r2, r3
 800e868:	d204      	bcs.n	800e874 <find_volume+0x2b0>
 800e86a:	230d      	movs	r3, #13
 800e86c:	e0ee      	b.n	800ea4c <find_volume+0x488>
 800e86e:	bf00      	nop
 800e870:	20001c48 	.word	0x20001c48
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e874:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e878:	1ad3      	subs	r3, r2, r3
 800e87a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e87c:	8952      	ldrh	r2, [r2, #10]
 800e87e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e882:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e886:	2b00      	cmp	r3, #0
 800e888:	d101      	bne.n	800e88e <find_volume+0x2ca>
 800e88a:	230d      	movs	r3, #13
 800e88c:	e0de      	b.n	800ea4c <find_volume+0x488>
		fmt = FS_FAT32;
 800e88e:	2303      	movs	r3, #3
 800e890:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e896:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d802      	bhi.n	800e8a4 <find_volume+0x2e0>
 800e89e:	2302      	movs	r3, #2
 800e8a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d802      	bhi.n	800e8b4 <find_volume+0x2f0>
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b6:	1c9a      	adds	r2, r3, #2
 800e8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ba:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e8c0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e8c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e8c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8c6:	441a      	add	r2, r3
 800e8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ca:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e8cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d0:	441a      	add	r2, r3
 800e8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e8d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e8da:	2b03      	cmp	r3, #3
 800e8dc:	d11e      	bne.n	800e91c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e0:	3334      	adds	r3, #52	; 0x34
 800e8e2:	332a      	adds	r3, #42	; 0x2a
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f7fd fe8d 	bl	800c604 <ld_word>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d001      	beq.n	800e8f4 <find_volume+0x330>
 800e8f0:	230d      	movs	r3, #13
 800e8f2:	e0ab      	b.n	800ea4c <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f6:	891b      	ldrh	r3, [r3, #8]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d001      	beq.n	800e900 <find_volume+0x33c>
 800e8fc:	230d      	movs	r3, #13
 800e8fe:	e0a5      	b.n	800ea4c <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e902:	3334      	adds	r3, #52	; 0x34
 800e904:	332c      	adds	r3, #44	; 0x2c
 800e906:	4618      	mov	r0, r3
 800e908:	f7fd fe94 	bl	800c634 <ld_dword>
 800e90c:	4602      	mov	r2, r0
 800e90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e910:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e914:	699b      	ldr	r3, [r3, #24]
 800e916:	009b      	lsls	r3, r3, #2
 800e918:	647b      	str	r3, [r7, #68]	; 0x44
 800e91a:	e01f      	b.n	800e95c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e91e:	891b      	ldrh	r3, [r3, #8]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d101      	bne.n	800e928 <find_volume+0x364>
 800e924:	230d      	movs	r3, #13
 800e926:	e091      	b.n	800ea4c <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e92a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e92c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e92e:	441a      	add	r2, r3
 800e930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e932:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e934:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e938:	2b02      	cmp	r3, #2
 800e93a:	d103      	bne.n	800e944 <find_volume+0x380>
 800e93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e93e:	699b      	ldr	r3, [r3, #24]
 800e940:	005b      	lsls	r3, r3, #1
 800e942:	e00a      	b.n	800e95a <find_volume+0x396>
 800e944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e946:	699a      	ldr	r2, [r3, #24]
 800e948:	4613      	mov	r3, r2
 800e94a:	005b      	lsls	r3, r3, #1
 800e94c:	4413      	add	r3, r2
 800e94e:	085a      	lsrs	r2, r3, #1
 800e950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e952:	699b      	ldr	r3, [r3, #24]
 800e954:	f003 0301 	and.w	r3, r3, #1
 800e958:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e95a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e95e:	69da      	ldr	r2, [r3, #28]
 800e960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e962:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e966:	0a5b      	lsrs	r3, r3, #9
 800e968:	429a      	cmp	r2, r3
 800e96a:	d201      	bcs.n	800e970 <find_volume+0x3ac>
 800e96c:	230d      	movs	r3, #13
 800e96e:	e06d      	b.n	800ea4c <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e972:	f04f 32ff 	mov.w	r2, #4294967295
 800e976:	615a      	str	r2, [r3, #20]
 800e978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e97a:	695a      	ldr	r2, [r3, #20]
 800e97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e97e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e982:	2280      	movs	r2, #128	; 0x80
 800e984:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e986:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e98a:	2b03      	cmp	r3, #3
 800e98c:	d149      	bne.n	800ea22 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e990:	3334      	adds	r3, #52	; 0x34
 800e992:	3330      	adds	r3, #48	; 0x30
 800e994:	4618      	mov	r0, r3
 800e996:	f7fd fe35 	bl	800c604 <ld_word>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b01      	cmp	r3, #1
 800e99e:	d140      	bne.n	800ea22 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e9a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e9a8:	f7fe f8dc 	bl	800cb64 <move_window>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d137      	bne.n	800ea22 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ba:	3334      	adds	r3, #52	; 0x34
 800e9bc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f7fd fe1f 	bl	800c604 <ld_word>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d127      	bne.n	800ea22 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d4:	3334      	adds	r3, #52	; 0x34
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f7fd fe2c 	bl	800c634 <ld_dword>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	4a1d      	ldr	r2, [pc, #116]	; (800ea54 <find_volume+0x490>)
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d11e      	bne.n	800ea22 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e6:	3334      	adds	r3, #52	; 0x34
 800e9e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f7fd fe21 	bl	800c634 <ld_dword>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	4a18      	ldr	r2, [pc, #96]	; (800ea58 <find_volume+0x494>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d113      	bne.n	800ea22 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9fc:	3334      	adds	r3, #52	; 0x34
 800e9fe:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7fd fe16 	bl	800c634 <ld_dword>
 800ea08:	4602      	mov	r2, r0
 800ea0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea0c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ea0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea10:	3334      	adds	r3, #52	; 0x34
 800ea12:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7fd fe0c 	bl	800c634 <ld_dword>
 800ea1c:	4602      	mov	r2, r0
 800ea1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea20:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ea22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea24:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ea28:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ea2a:	4b0c      	ldr	r3, [pc, #48]	; (800ea5c <find_volume+0x498>)
 800ea2c:	881b      	ldrh	r3, [r3, #0]
 800ea2e:	3301      	adds	r3, #1
 800ea30:	b29a      	uxth	r2, r3
 800ea32:	4b0a      	ldr	r3, [pc, #40]	; (800ea5c <find_volume+0x498>)
 800ea34:	801a      	strh	r2, [r3, #0]
 800ea36:	4b09      	ldr	r3, [pc, #36]	; (800ea5c <find_volume+0x498>)
 800ea38:	881a      	ldrh	r2, [r3, #0]
 800ea3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea3c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ea3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea40:	4a07      	ldr	r2, [pc, #28]	; (800ea60 <find_volume+0x49c>)
 800ea42:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ea44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ea46:	f7fe f825 	bl	800ca94 <clear_lock>
#endif
	return FR_OK;
 800ea4a:	2300      	movs	r3, #0
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3758      	adds	r7, #88	; 0x58
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}
 800ea54:	41615252 	.word	0x41615252
 800ea58:	61417272 	.word	0x61417272
 800ea5c:	20001c4c 	.word	0x20001c4c
 800ea60:	20001c70 	.word	0x20001c70

0800ea64 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b084      	sub	sp, #16
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
 800ea6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ea6e:	2309      	movs	r3, #9
 800ea70:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d01c      	beq.n	800eab2 <validate+0x4e>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d018      	beq.n	800eab2 <validate+0x4e>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d013      	beq.n	800eab2 <validate+0x4e>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	889a      	ldrh	r2, [r3, #4]
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	88db      	ldrh	r3, [r3, #6]
 800ea94:	429a      	cmp	r2, r3
 800ea96:	d10c      	bne.n	800eab2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	785b      	ldrb	r3, [r3, #1]
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7fd fd12 	bl	800c4c8 <disk_status>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	f003 0301 	and.w	r3, r3, #1
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d101      	bne.n	800eab2 <validate+0x4e>
			res = FR_OK;
 800eaae:	2300      	movs	r3, #0
 800eab0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800eab2:	7bfb      	ldrb	r3, [r7, #15]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d102      	bne.n	800eabe <validate+0x5a>
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	e000      	b.n	800eac0 <validate+0x5c>
 800eabe:	2300      	movs	r3, #0
 800eac0:	683a      	ldr	r2, [r7, #0]
 800eac2:	6013      	str	r3, [r2, #0]
	return res;
 800eac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	3710      	adds	r7, #16
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}
	...

0800ead0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b088      	sub	sp, #32
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	60f8      	str	r0, [r7, #12]
 800ead8:	60b9      	str	r1, [r7, #8]
 800eada:	4613      	mov	r3, r2
 800eadc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800eae2:	f107 0310 	add.w	r3, r7, #16
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7ff fcd1 	bl	800e48e <get_ldnumber>
 800eaec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800eaee:	69fb      	ldr	r3, [r7, #28]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	da01      	bge.n	800eaf8 <f_mount+0x28>
 800eaf4:	230b      	movs	r3, #11
 800eaf6:	e02b      	b.n	800eb50 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800eaf8:	4a17      	ldr	r2, [pc, #92]	; (800eb58 <f_mount+0x88>)
 800eafa:	69fb      	ldr	r3, [r7, #28]
 800eafc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb00:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800eb02:	69bb      	ldr	r3, [r7, #24]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d005      	beq.n	800eb14 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800eb08:	69b8      	ldr	r0, [r7, #24]
 800eb0a:	f7fd ffc3 	bl	800ca94 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800eb0e:	69bb      	ldr	r3, [r7, #24]
 800eb10:	2200      	movs	r2, #0
 800eb12:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d002      	beq.n	800eb20 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800eb20:	68fa      	ldr	r2, [r7, #12]
 800eb22:	490d      	ldr	r1, [pc, #52]	; (800eb58 <f_mount+0x88>)
 800eb24:	69fb      	ldr	r3, [r7, #28]
 800eb26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d002      	beq.n	800eb36 <f_mount+0x66>
 800eb30:	79fb      	ldrb	r3, [r7, #7]
 800eb32:	2b01      	cmp	r3, #1
 800eb34:	d001      	beq.n	800eb3a <f_mount+0x6a>
 800eb36:	2300      	movs	r3, #0
 800eb38:	e00a      	b.n	800eb50 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800eb3a:	f107 010c 	add.w	r1, r7, #12
 800eb3e:	f107 0308 	add.w	r3, r7, #8
 800eb42:	2200      	movs	r2, #0
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7ff fd3d 	bl	800e5c4 <find_volume>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800eb4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3720      	adds	r7, #32
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	20001c48 	.word	0x20001c48

0800eb5c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b09a      	sub	sp, #104	; 0x68
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	60b9      	str	r1, [r7, #8]
 800eb66:	4613      	mov	r3, r2
 800eb68:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d101      	bne.n	800eb74 <f_open+0x18>
 800eb70:	2309      	movs	r3, #9
 800eb72:	e1ad      	b.n	800eed0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800eb74:	79fb      	ldrb	r3, [r7, #7]
 800eb76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb7a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800eb7c:	79fa      	ldrb	r2, [r7, #7]
 800eb7e:	f107 0114 	add.w	r1, r7, #20
 800eb82:	f107 0308 	add.w	r3, r7, #8
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7ff fd1c 	bl	800e5c4 <find_volume>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800eb92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	f040 8191 	bne.w	800eebe <f_open+0x362>
		dj.obj.fs = fs;
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800eba0:	68ba      	ldr	r2, [r7, #8]
 800eba2:	f107 0318 	add.w	r3, r7, #24
 800eba6:	4611      	mov	r1, r2
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7ff fbff 	bl	800e3ac <follow_path>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ebb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d11a      	bne.n	800ebf2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ebbc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ebc0:	b25b      	sxtb	r3, r3
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	da03      	bge.n	800ebce <f_open+0x72>
				res = FR_INVALID_NAME;
 800ebc6:	2306      	movs	r3, #6
 800ebc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ebcc:	e011      	b.n	800ebf2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ebce:	79fb      	ldrb	r3, [r7, #7]
 800ebd0:	f023 0301 	bic.w	r3, r3, #1
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	bf14      	ite	ne
 800ebd8:	2301      	movne	r3, #1
 800ebda:	2300      	moveq	r3, #0
 800ebdc:	b2db      	uxtb	r3, r3
 800ebde:	461a      	mov	r2, r3
 800ebe0:	f107 0318 	add.w	r3, r7, #24
 800ebe4:	4611      	mov	r1, r2
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7fd fe0c 	bl	800c804 <chk_lock>
 800ebec:	4603      	mov	r3, r0
 800ebee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ebf2:	79fb      	ldrb	r3, [r7, #7]
 800ebf4:	f003 031c 	and.w	r3, r3, #28
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d07f      	beq.n	800ecfc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ebfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d017      	beq.n	800ec34 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ec04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ec08:	2b04      	cmp	r3, #4
 800ec0a:	d10e      	bne.n	800ec2a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ec0c:	f7fd fe56 	bl	800c8bc <enq_lock>
 800ec10:	4603      	mov	r3, r0
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d006      	beq.n	800ec24 <f_open+0xc8>
 800ec16:	f107 0318 	add.w	r3, r7, #24
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f7ff f838 	bl	800dc90 <dir_register>
 800ec20:	4603      	mov	r3, r0
 800ec22:	e000      	b.n	800ec26 <f_open+0xca>
 800ec24:	2312      	movs	r3, #18
 800ec26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ec2a:	79fb      	ldrb	r3, [r7, #7]
 800ec2c:	f043 0308 	orr.w	r3, r3, #8
 800ec30:	71fb      	strb	r3, [r7, #7]
 800ec32:	e010      	b.n	800ec56 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ec34:	7fbb      	ldrb	r3, [r7, #30]
 800ec36:	f003 0311 	and.w	r3, r3, #17
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d003      	beq.n	800ec46 <f_open+0xea>
					res = FR_DENIED;
 800ec3e:	2307      	movs	r3, #7
 800ec40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ec44:	e007      	b.n	800ec56 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ec46:	79fb      	ldrb	r3, [r7, #7]
 800ec48:	f003 0304 	and.w	r3, r3, #4
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d002      	beq.n	800ec56 <f_open+0xfa>
 800ec50:	2308      	movs	r3, #8
 800ec52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ec56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d168      	bne.n	800ed30 <f_open+0x1d4>
 800ec5e:	79fb      	ldrb	r3, [r7, #7]
 800ec60:	f003 0308 	and.w	r3, r3, #8
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d063      	beq.n	800ed30 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ec68:	f7fa fb1e 	bl	80092a8 <get_fattime>
 800ec6c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ec6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec70:	330e      	adds	r3, #14
 800ec72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7fd fd1b 	bl	800c6b0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ec7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec7c:	3316      	adds	r3, #22
 800ec7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7fd fd15 	bl	800c6b0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ec86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec88:	330b      	adds	r3, #11
 800ec8a:	2220      	movs	r2, #32
 800ec8c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec92:	4611      	mov	r1, r2
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7fe fc6a 	bl	800d56e <ld_clust>
 800ec9a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eca0:	2200      	movs	r2, #0
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7fe fc82 	bl	800d5ac <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800eca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecaa:	331c      	adds	r3, #28
 800ecac:	2100      	movs	r1, #0
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7fd fcfe 	bl	800c6b0 <st_dword>
					fs->wflag = 1;
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ecba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d037      	beq.n	800ed30 <f_open+0x1d4>
						dw = fs->winsect;
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecc4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ecc6:	f107 0318 	add.w	r3, r7, #24
 800ecca:	2200      	movs	r2, #0
 800eccc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7fe f995 	bl	800cffe <remove_chain>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ecda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d126      	bne.n	800ed30 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7fd ff3c 	bl	800cb64 <move_window>
 800ecec:	4603      	mov	r3, r0
 800ecee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ecf6:	3a01      	subs	r2, #1
 800ecf8:	611a      	str	r2, [r3, #16]
 800ecfa:	e019      	b.n	800ed30 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ecfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d115      	bne.n	800ed30 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ed04:	7fbb      	ldrb	r3, [r7, #30]
 800ed06:	f003 0310 	and.w	r3, r3, #16
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d003      	beq.n	800ed16 <f_open+0x1ba>
					res = FR_NO_FILE;
 800ed0e:	2304      	movs	r3, #4
 800ed10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ed14:	e00c      	b.n	800ed30 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ed16:	79fb      	ldrb	r3, [r7, #7]
 800ed18:	f003 0302 	and.w	r3, r3, #2
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d007      	beq.n	800ed30 <f_open+0x1d4>
 800ed20:	7fbb      	ldrb	r3, [r7, #30]
 800ed22:	f003 0301 	and.w	r3, r3, #1
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d002      	beq.n	800ed30 <f_open+0x1d4>
						res = FR_DENIED;
 800ed2a:	2307      	movs	r3, #7
 800ed2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800ed30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d128      	bne.n	800ed8a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ed38:	79fb      	ldrb	r3, [r7, #7]
 800ed3a:	f003 0308 	and.w	r3, r3, #8
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d003      	beq.n	800ed4a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ed42:	79fb      	ldrb	r3, [r7, #7]
 800ed44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed48:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ed52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ed58:	79fb      	ldrb	r3, [r7, #7]
 800ed5a:	f023 0301 	bic.w	r3, r3, #1
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	bf14      	ite	ne
 800ed62:	2301      	movne	r3, #1
 800ed64:	2300      	moveq	r3, #0
 800ed66:	b2db      	uxtb	r3, r3
 800ed68:	461a      	mov	r2, r3
 800ed6a:	f107 0318 	add.w	r3, r7, #24
 800ed6e:	4611      	mov	r1, r2
 800ed70:	4618      	mov	r0, r3
 800ed72:	f7fd fdc5 	bl	800c900 <inc_lock>
 800ed76:	4602      	mov	r2, r0
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	691b      	ldr	r3, [r3, #16]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d102      	bne.n	800ed8a <f_open+0x22e>
 800ed84:	2302      	movs	r3, #2
 800ed86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ed8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	f040 8095 	bne.w	800eebe <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed98:	4611      	mov	r1, r2
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7fe fbe7 	bl	800d56e <ld_clust>
 800eda0:	4602      	mov	r2, r0
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800eda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda8:	331c      	adds	r3, #28
 800edaa:	4618      	mov	r0, r3
 800edac:	f7fd fc42 	bl	800c634 <ld_dword>
 800edb0:	4602      	mov	r2, r0
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	2200      	movs	r2, #0
 800edba:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800edbc:	697a      	ldr	r2, [r7, #20]
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	88da      	ldrh	r2, [r3, #6]
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	79fa      	ldrb	r2, [r7, #7]
 800edce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2200      	movs	r2, #0
 800edd4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	2200      	movs	r2, #0
 800edda:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2200      	movs	r2, #0
 800ede0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	3330      	adds	r3, #48	; 0x30
 800ede6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800edea:	2100      	movs	r1, #0
 800edec:	4618      	mov	r0, r3
 800edee:	f7fd fcac 	bl	800c74a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800edf2:	79fb      	ldrb	r3, [r7, #7]
 800edf4:	f003 0320 	and.w	r3, r3, #32
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d060      	beq.n	800eebe <f_open+0x362>
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	68db      	ldr	r3, [r3, #12]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d05c      	beq.n	800eebe <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	68da      	ldr	r2, [r3, #12]
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	895b      	ldrh	r3, [r3, #10]
 800ee10:	025b      	lsls	r3, r3, #9
 800ee12:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	689b      	ldr	r3, [r3, #8]
 800ee18:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	68db      	ldr	r3, [r3, #12]
 800ee1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee20:	e016      	b.n	800ee50 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7fd ff57 	bl	800ccda <get_fat>
 800ee2c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ee2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d802      	bhi.n	800ee3a <f_open+0x2de>
 800ee34:	2302      	movs	r3, #2
 800ee36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ee3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee40:	d102      	bne.n	800ee48 <f_open+0x2ec>
 800ee42:	2301      	movs	r3, #1
 800ee44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ee48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ee4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee4c:	1ad3      	subs	r3, r2, r3
 800ee4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d103      	bne.n	800ee60 <f_open+0x304>
 800ee58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ee5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d8e0      	bhi.n	800ee22 <f_open+0x2c6>
				}
				fp->clust = clst;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ee64:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ee66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d127      	bne.n	800eebe <f_open+0x362>
 800ee6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d022      	beq.n	800eebe <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7fd ff0d 	bl	800cc9c <clust2sect>
 800ee82:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ee84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d103      	bne.n	800ee92 <f_open+0x336>
						res = FR_INT_ERR;
 800ee8a:	2302      	movs	r3, #2
 800ee8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ee90:	e015      	b.n	800eebe <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ee92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee94:	0a5a      	lsrs	r2, r3, #9
 800ee96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee98:	441a      	add	r2, r3
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	7858      	ldrb	r0, [r3, #1]
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	6a1a      	ldr	r2, [r3, #32]
 800eeac:	2301      	movs	r3, #1
 800eeae:	f7fd fb4b 	bl	800c548 <disk_read>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d002      	beq.n	800eebe <f_open+0x362>
 800eeb8:	2301      	movs	r3, #1
 800eeba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800eebe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d002      	beq.n	800eecc <f_open+0x370>
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2200      	movs	r2, #0
 800eeca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eecc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3768      	adds	r7, #104	; 0x68
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b08e      	sub	sp, #56	; 0x38
 800eedc:	af00      	add	r7, sp, #0
 800eede:	60f8      	str	r0, [r7, #12]
 800eee0:	60b9      	str	r1, [r7, #8]
 800eee2:	607a      	str	r2, [r7, #4]
 800eee4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	2200      	movs	r2, #0
 800eeee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	f107 0214 	add.w	r2, r7, #20
 800eef6:	4611      	mov	r1, r2
 800eef8:	4618      	mov	r0, r3
 800eefa:	f7ff fdb3 	bl	800ea64 <validate>
 800eefe:	4603      	mov	r3, r0
 800ef00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ef04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d107      	bne.n	800ef1c <f_read+0x44>
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	7d5b      	ldrb	r3, [r3, #21]
 800ef10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ef14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d002      	beq.n	800ef22 <f_read+0x4a>
 800ef1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef20:	e115      	b.n	800f14e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	7d1b      	ldrb	r3, [r3, #20]
 800ef26:	f003 0301 	and.w	r3, r3, #1
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d101      	bne.n	800ef32 <f_read+0x5a>
 800ef2e:	2307      	movs	r3, #7
 800ef30:	e10d      	b.n	800f14e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	68da      	ldr	r2, [r3, #12]
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	699b      	ldr	r3, [r3, #24]
 800ef3a:	1ad3      	subs	r3, r2, r3
 800ef3c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ef3e:	687a      	ldr	r2, [r7, #4]
 800ef40:	6a3b      	ldr	r3, [r7, #32]
 800ef42:	429a      	cmp	r2, r3
 800ef44:	f240 80fe 	bls.w	800f144 <f_read+0x26c>
 800ef48:	6a3b      	ldr	r3, [r7, #32]
 800ef4a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ef4c:	e0fa      	b.n	800f144 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	699b      	ldr	r3, [r3, #24]
 800ef52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	f040 80c6 	bne.w	800f0e8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	699b      	ldr	r3, [r3, #24]
 800ef60:	0a5b      	lsrs	r3, r3, #9
 800ef62:	697a      	ldr	r2, [r7, #20]
 800ef64:	8952      	ldrh	r2, [r2, #10]
 800ef66:	3a01      	subs	r2, #1
 800ef68:	4013      	ands	r3, r2
 800ef6a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ef6c:	69fb      	ldr	r3, [r7, #28]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d12f      	bne.n	800efd2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	699b      	ldr	r3, [r3, #24]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d103      	bne.n	800ef82 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	689b      	ldr	r3, [r3, #8]
 800ef7e:	633b      	str	r3, [r7, #48]	; 0x30
 800ef80:	e013      	b.n	800efaa <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d007      	beq.n	800ef9a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	699b      	ldr	r3, [r3, #24]
 800ef8e:	4619      	mov	r1, r3
 800ef90:	68f8      	ldr	r0, [r7, #12]
 800ef92:	f7fe f931 	bl	800d1f8 <clmt_clust>
 800ef96:	6338      	str	r0, [r7, #48]	; 0x30
 800ef98:	e007      	b.n	800efaa <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ef9a:	68fa      	ldr	r2, [r7, #12]
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	69db      	ldr	r3, [r3, #28]
 800efa0:	4619      	mov	r1, r3
 800efa2:	4610      	mov	r0, r2
 800efa4:	f7fd fe99 	bl	800ccda <get_fat>
 800efa8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800efaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efac:	2b01      	cmp	r3, #1
 800efae:	d804      	bhi.n	800efba <f_read+0xe2>
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2202      	movs	r2, #2
 800efb4:	755a      	strb	r2, [r3, #21]
 800efb6:	2302      	movs	r3, #2
 800efb8:	e0c9      	b.n	800f14e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800efba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efc0:	d104      	bne.n	800efcc <f_read+0xf4>
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	2201      	movs	r2, #1
 800efc6:	755a      	strb	r2, [r3, #21]
 800efc8:	2301      	movs	r3, #1
 800efca:	e0c0      	b.n	800f14e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efd0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800efd2:	697a      	ldr	r2, [r7, #20]
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	69db      	ldr	r3, [r3, #28]
 800efd8:	4619      	mov	r1, r3
 800efda:	4610      	mov	r0, r2
 800efdc:	f7fd fe5e 	bl	800cc9c <clust2sect>
 800efe0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800efe2:	69bb      	ldr	r3, [r7, #24]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d104      	bne.n	800eff2 <f_read+0x11a>
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	2202      	movs	r2, #2
 800efec:	755a      	strb	r2, [r3, #21]
 800efee:	2302      	movs	r3, #2
 800eff0:	e0ad      	b.n	800f14e <f_read+0x276>
			sect += csect;
 800eff2:	69ba      	ldr	r2, [r7, #24]
 800eff4:	69fb      	ldr	r3, [r7, #28]
 800eff6:	4413      	add	r3, r2
 800eff8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	0a5b      	lsrs	r3, r3, #9
 800effe:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f002:	2b00      	cmp	r3, #0
 800f004:	d039      	beq.n	800f07a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f006:	69fa      	ldr	r2, [r7, #28]
 800f008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f00a:	4413      	add	r3, r2
 800f00c:	697a      	ldr	r2, [r7, #20]
 800f00e:	8952      	ldrh	r2, [r2, #10]
 800f010:	4293      	cmp	r3, r2
 800f012:	d905      	bls.n	800f020 <f_read+0x148>
					cc = fs->csize - csect;
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	895b      	ldrh	r3, [r3, #10]
 800f018:	461a      	mov	r2, r3
 800f01a:	69fb      	ldr	r3, [r7, #28]
 800f01c:	1ad3      	subs	r3, r2, r3
 800f01e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	7858      	ldrb	r0, [r3, #1]
 800f024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f026:	69ba      	ldr	r2, [r7, #24]
 800f028:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f02a:	f7fd fa8d 	bl	800c548 <disk_read>
 800f02e:	4603      	mov	r3, r0
 800f030:	2b00      	cmp	r3, #0
 800f032:	d004      	beq.n	800f03e <f_read+0x166>
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	2201      	movs	r2, #1
 800f038:	755a      	strb	r2, [r3, #21]
 800f03a:	2301      	movs	r3, #1
 800f03c:	e087      	b.n	800f14e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	7d1b      	ldrb	r3, [r3, #20]
 800f042:	b25b      	sxtb	r3, r3
 800f044:	2b00      	cmp	r3, #0
 800f046:	da14      	bge.n	800f072 <f_read+0x19a>
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	6a1a      	ldr	r2, [r3, #32]
 800f04c:	69bb      	ldr	r3, [r7, #24]
 800f04e:	1ad3      	subs	r3, r2, r3
 800f050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f052:	429a      	cmp	r2, r3
 800f054:	d90d      	bls.n	800f072 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	6a1a      	ldr	r2, [r3, #32]
 800f05a:	69bb      	ldr	r3, [r7, #24]
 800f05c:	1ad3      	subs	r3, r2, r3
 800f05e:	025b      	lsls	r3, r3, #9
 800f060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f062:	18d0      	adds	r0, r2, r3
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	3330      	adds	r3, #48	; 0x30
 800f068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f06c:	4619      	mov	r1, r3
 800f06e:	f7fd fb4b 	bl	800c708 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f074:	025b      	lsls	r3, r3, #9
 800f076:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800f078:	e050      	b.n	800f11c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	6a1b      	ldr	r3, [r3, #32]
 800f07e:	69ba      	ldr	r2, [r7, #24]
 800f080:	429a      	cmp	r2, r3
 800f082:	d02e      	beq.n	800f0e2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	7d1b      	ldrb	r3, [r3, #20]
 800f088:	b25b      	sxtb	r3, r3
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	da18      	bge.n	800f0c0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	7858      	ldrb	r0, [r3, #1]
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	6a1a      	ldr	r2, [r3, #32]
 800f09c:	2301      	movs	r3, #1
 800f09e:	f7fd fa73 	bl	800c588 <disk_write>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d004      	beq.n	800f0b2 <f_read+0x1da>
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	755a      	strb	r2, [r3, #21]
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	e04d      	b.n	800f14e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	7d1b      	ldrb	r3, [r3, #20]
 800f0b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0ba:	b2da      	uxtb	r2, r3
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	7858      	ldrb	r0, [r3, #1]
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	69ba      	ldr	r2, [r7, #24]
 800f0ce:	f7fd fa3b 	bl	800c548 <disk_read>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d004      	beq.n	800f0e2 <f_read+0x20a>
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2201      	movs	r2, #1
 800f0dc:	755a      	strb	r2, [r3, #21]
 800f0de:	2301      	movs	r3, #1
 800f0e0:	e035      	b.n	800f14e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	69ba      	ldr	r2, [r7, #24]
 800f0e6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	699b      	ldr	r3, [r3, #24]
 800f0ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0f0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f0f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d901      	bls.n	800f102 <f_read+0x22a>
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	699b      	ldr	r3, [r3, #24]
 800f10c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f110:	4413      	add	r3, r2
 800f112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f114:	4619      	mov	r1, r3
 800f116:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f118:	f7fd faf6 	bl	800c708 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f11c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f120:	4413      	add	r3, r2
 800f122:	627b      	str	r3, [r7, #36]	; 0x24
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	699a      	ldr	r2, [r3, #24]
 800f128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12a:	441a      	add	r2, r3
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	619a      	str	r2, [r3, #24]
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	681a      	ldr	r2, [r3, #0]
 800f134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f136:	441a      	add	r2, r3
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	601a      	str	r2, [r3, #0]
 800f13c:	687a      	ldr	r2, [r7, #4]
 800f13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f140:	1ad3      	subs	r3, r2, r3
 800f142:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2b00      	cmp	r3, #0
 800f148:	f47f af01 	bne.w	800ef4e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f14c:	2300      	movs	r3, #0
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3738      	adds	r7, #56	; 0x38
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}

0800f156 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f156:	b580      	push	{r7, lr}
 800f158:	b086      	sub	sp, #24
 800f15a:	af00      	add	r7, sp, #0
 800f15c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f107 0208 	add.w	r2, r7, #8
 800f164:	4611      	mov	r1, r2
 800f166:	4618      	mov	r0, r3
 800f168:	f7ff fc7c 	bl	800ea64 <validate>
 800f16c:	4603      	mov	r3, r0
 800f16e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f170:	7dfb      	ldrb	r3, [r7, #23]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d168      	bne.n	800f248 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	7d1b      	ldrb	r3, [r3, #20]
 800f17a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d062      	beq.n	800f248 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	7d1b      	ldrb	r3, [r3, #20]
 800f186:	b25b      	sxtb	r3, r3
 800f188:	2b00      	cmp	r3, #0
 800f18a:	da15      	bge.n	800f1b8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	7858      	ldrb	r0, [r3, #1]
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	6a1a      	ldr	r2, [r3, #32]
 800f19a:	2301      	movs	r3, #1
 800f19c:	f7fd f9f4 	bl	800c588 <disk_write>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d001      	beq.n	800f1aa <f_sync+0x54>
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	e04f      	b.n	800f24a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	7d1b      	ldrb	r3, [r3, #20]
 800f1ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1b2:	b2da      	uxtb	r2, r3
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f1b8:	f7fa f876 	bl	80092a8 <get_fattime>
 800f1bc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f1be:	68ba      	ldr	r2, [r7, #8]
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	4610      	mov	r0, r2
 800f1c8:	f7fd fccc 	bl	800cb64 <move_window>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f1d0:	7dfb      	ldrb	r3, [r7, #23]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d138      	bne.n	800f248 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1da:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	330b      	adds	r3, #11
 800f1e0:	781a      	ldrb	r2, [r3, #0]
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	330b      	adds	r3, #11
 800f1e6:	f042 0220 	orr.w	r2, r2, #32
 800f1ea:	b2d2      	uxtb	r2, r2
 800f1ec:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6818      	ldr	r0, [r3, #0]
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	689b      	ldr	r3, [r3, #8]
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	68f9      	ldr	r1, [r7, #12]
 800f1fa:	f7fe f9d7 	bl	800d5ac <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f103 021c 	add.w	r2, r3, #28
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	68db      	ldr	r3, [r3, #12]
 800f208:	4619      	mov	r1, r3
 800f20a:	4610      	mov	r0, r2
 800f20c:	f7fd fa50 	bl	800c6b0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	3316      	adds	r3, #22
 800f214:	6939      	ldr	r1, [r7, #16]
 800f216:	4618      	mov	r0, r3
 800f218:	f7fd fa4a 	bl	800c6b0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	3312      	adds	r3, #18
 800f220:	2100      	movs	r1, #0
 800f222:	4618      	mov	r0, r3
 800f224:	f7fd fa29 	bl	800c67a <st_word>
					fs->wflag = 1;
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	2201      	movs	r2, #1
 800f22c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	4618      	mov	r0, r3
 800f232:	f7fd fcc5 	bl	800cbc0 <sync_fs>
 800f236:	4603      	mov	r3, r0
 800f238:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	7d1b      	ldrb	r3, [r3, #20]
 800f23e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f242:	b2da      	uxtb	r2, r3
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f248:	7dfb      	ldrb	r3, [r7, #23]
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3718      	adds	r7, #24
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}

0800f252 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f252:	b580      	push	{r7, lr}
 800f254:	b084      	sub	sp, #16
 800f256:	af00      	add	r7, sp, #0
 800f258:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f7ff ff7b 	bl	800f156 <f_sync>
 800f260:	4603      	mov	r3, r0
 800f262:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f264:	7bfb      	ldrb	r3, [r7, #15]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d118      	bne.n	800f29c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f107 0208 	add.w	r2, r7, #8
 800f270:	4611      	mov	r1, r2
 800f272:	4618      	mov	r0, r3
 800f274:	f7ff fbf6 	bl	800ea64 <validate>
 800f278:	4603      	mov	r3, r0
 800f27a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f27c:	7bfb      	ldrb	r3, [r7, #15]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d10c      	bne.n	800f29c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	691b      	ldr	r3, [r3, #16]
 800f286:	4618      	mov	r0, r3
 800f288:	f7fd fbc8 	bl	800ca1c <dec_lock>
 800f28c:	4603      	mov	r3, r0
 800f28e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f290:	7bfb      	ldrb	r3, [r7, #15]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d102      	bne.n	800f29c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2200      	movs	r2, #0
 800f29a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3710      	adds	r7, #16
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}

0800f2a6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f2a6:	b580      	push	{r7, lr}
 800f2a8:	b090      	sub	sp, #64	; 0x40
 800f2aa:	af00      	add	r7, sp, #0
 800f2ac:	6078      	str	r0, [r7, #4]
 800f2ae:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f107 0208 	add.w	r2, r7, #8
 800f2b6:	4611      	mov	r1, r2
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7ff fbd3 	bl	800ea64 <validate>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f2c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d103      	bne.n	800f2d4 <f_lseek+0x2e>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	7d5b      	ldrb	r3, [r3, #21]
 800f2d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f2d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d002      	beq.n	800f2e2 <f_lseek+0x3c>
 800f2dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f2e0:	e1e6      	b.n	800f6b0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	f000 80d1 	beq.w	800f48e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2f2:	d15a      	bne.n	800f3aa <f_lseek+0x104>
			tbl = fp->cltbl;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2f8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fc:	1d1a      	adds	r2, r3, #4
 800f2fe:	627a      	str	r2, [r7, #36]	; 0x24
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	617b      	str	r3, [r7, #20]
 800f304:	2302      	movs	r3, #2
 800f306:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	689b      	ldr	r3, [r3, #8]
 800f30c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800f30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f310:	2b00      	cmp	r3, #0
 800f312:	d03a      	beq.n	800f38a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f316:	613b      	str	r3, [r7, #16]
 800f318:	2300      	movs	r3, #0
 800f31a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31e:	3302      	adds	r3, #2
 800f320:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800f322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f324:	60fb      	str	r3, [r7, #12]
 800f326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f328:	3301      	adds	r3, #1
 800f32a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f330:	4618      	mov	r0, r3
 800f332:	f7fd fcd2 	bl	800ccda <get_fat>
 800f336:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f33a:	2b01      	cmp	r3, #1
 800f33c:	d804      	bhi.n	800f348 <f_lseek+0xa2>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2202      	movs	r2, #2
 800f342:	755a      	strb	r2, [r3, #21]
 800f344:	2302      	movs	r3, #2
 800f346:	e1b3      	b.n	800f6b0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f34e:	d104      	bne.n	800f35a <f_lseek+0xb4>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2201      	movs	r2, #1
 800f354:	755a      	strb	r2, [r3, #21]
 800f356:	2301      	movs	r3, #1
 800f358:	e1aa      	b.n	800f6b0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	3301      	adds	r3, #1
 800f35e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f360:	429a      	cmp	r2, r3
 800f362:	d0de      	beq.n	800f322 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	429a      	cmp	r2, r3
 800f36a:	d809      	bhi.n	800f380 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800f36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f36e:	1d1a      	adds	r2, r3, #4
 800f370:	627a      	str	r2, [r7, #36]	; 0x24
 800f372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f374:	601a      	str	r2, [r3, #0]
 800f376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f378:	1d1a      	adds	r2, r3, #4
 800f37a:	627a      	str	r2, [r7, #36]	; 0x24
 800f37c:	693a      	ldr	r2, [r7, #16]
 800f37e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	699b      	ldr	r3, [r3, #24]
 800f384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f386:	429a      	cmp	r2, r3
 800f388:	d3c4      	bcc.n	800f314 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f38e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f390:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	429a      	cmp	r2, r3
 800f398:	d803      	bhi.n	800f3a2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800f39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39c:	2200      	movs	r2, #0
 800f39e:	601a      	str	r2, [r3, #0]
 800f3a0:	e184      	b.n	800f6ac <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f3a2:	2311      	movs	r3, #17
 800f3a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f3a8:	e180      	b.n	800f6ac <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	68db      	ldr	r3, [r3, #12]
 800f3ae:	683a      	ldr	r2, [r7, #0]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d902      	bls.n	800f3ba <f_lseek+0x114>
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	683a      	ldr	r2, [r7, #0]
 800f3be:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	f000 8172 	beq.w	800f6ac <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	3b01      	subs	r3, #1
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f7fd ff12 	bl	800d1f8 <clmt_clust>
 800f3d4:	4602      	mov	r2, r0
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f3da:	68ba      	ldr	r2, [r7, #8]
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	69db      	ldr	r3, [r3, #28]
 800f3e0:	4619      	mov	r1, r3
 800f3e2:	4610      	mov	r0, r2
 800f3e4:	f7fd fc5a 	bl	800cc9c <clust2sect>
 800f3e8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f3ea:	69bb      	ldr	r3, [r7, #24]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d104      	bne.n	800f3fa <f_lseek+0x154>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2202      	movs	r2, #2
 800f3f4:	755a      	strb	r2, [r3, #21]
 800f3f6:	2302      	movs	r3, #2
 800f3f8:	e15a      	b.n	800f6b0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	3b01      	subs	r3, #1
 800f3fe:	0a5b      	lsrs	r3, r3, #9
 800f400:	68ba      	ldr	r2, [r7, #8]
 800f402:	8952      	ldrh	r2, [r2, #10]
 800f404:	3a01      	subs	r2, #1
 800f406:	4013      	ands	r3, r2
 800f408:	69ba      	ldr	r2, [r7, #24]
 800f40a:	4413      	add	r3, r2
 800f40c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	699b      	ldr	r3, [r3, #24]
 800f412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f416:	2b00      	cmp	r3, #0
 800f418:	f000 8148 	beq.w	800f6ac <f_lseek+0x406>
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6a1b      	ldr	r3, [r3, #32]
 800f420:	69ba      	ldr	r2, [r7, #24]
 800f422:	429a      	cmp	r2, r3
 800f424:	f000 8142 	beq.w	800f6ac <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	7d1b      	ldrb	r3, [r3, #20]
 800f42c:	b25b      	sxtb	r3, r3
 800f42e:	2b00      	cmp	r3, #0
 800f430:	da18      	bge.n	800f464 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	7858      	ldrb	r0, [r3, #1]
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6a1a      	ldr	r2, [r3, #32]
 800f440:	2301      	movs	r3, #1
 800f442:	f7fd f8a1 	bl	800c588 <disk_write>
 800f446:	4603      	mov	r3, r0
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d004      	beq.n	800f456 <f_lseek+0x1b0>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2201      	movs	r2, #1
 800f450:	755a      	strb	r2, [r3, #21]
 800f452:	2301      	movs	r3, #1
 800f454:	e12c      	b.n	800f6b0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	7d1b      	ldrb	r3, [r3, #20]
 800f45a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f45e:	b2da      	uxtb	r2, r3
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	7858      	ldrb	r0, [r3, #1]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f46e:	2301      	movs	r3, #1
 800f470:	69ba      	ldr	r2, [r7, #24]
 800f472:	f7fd f869 	bl	800c548 <disk_read>
 800f476:	4603      	mov	r3, r0
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d004      	beq.n	800f486 <f_lseek+0x1e0>
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2201      	movs	r2, #1
 800f480:	755a      	strb	r2, [r3, #21]
 800f482:	2301      	movs	r3, #1
 800f484:	e114      	b.n	800f6b0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	69ba      	ldr	r2, [r7, #24]
 800f48a:	621a      	str	r2, [r3, #32]
 800f48c:	e10e      	b.n	800f6ac <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	68db      	ldr	r3, [r3, #12]
 800f492:	683a      	ldr	r2, [r7, #0]
 800f494:	429a      	cmp	r2, r3
 800f496:	d908      	bls.n	800f4aa <f_lseek+0x204>
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	7d1b      	ldrb	r3, [r3, #20]
 800f49c:	f003 0302 	and.w	r3, r3, #2
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d102      	bne.n	800f4aa <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	68db      	ldr	r3, [r3, #12]
 800f4a8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	699b      	ldr	r3, [r3, #24]
 800f4ae:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	637b      	str	r3, [r7, #52]	; 0x34
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4b8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	f000 80a7 	beq.w	800f610 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	895b      	ldrh	r3, [r3, #10]
 800f4c6:	025b      	lsls	r3, r3, #9
 800f4c8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f4ca:	6a3b      	ldr	r3, [r7, #32]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d01b      	beq.n	800f508 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	1e5a      	subs	r2, r3, #1
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	fbb2 f2f3 	udiv	r2, r2, r3
 800f4da:	6a3b      	ldr	r3, [r7, #32]
 800f4dc:	1e59      	subs	r1, r3, #1
 800f4de:	69fb      	ldr	r3, [r7, #28]
 800f4e0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d30f      	bcc.n	800f508 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f4e8:	6a3b      	ldr	r3, [r7, #32]
 800f4ea:	1e5a      	subs	r2, r3, #1
 800f4ec:	69fb      	ldr	r3, [r7, #28]
 800f4ee:	425b      	negs	r3, r3
 800f4f0:	401a      	ands	r2, r3
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	699b      	ldr	r3, [r3, #24]
 800f4fa:	683a      	ldr	r2, [r7, #0]
 800f4fc:	1ad3      	subs	r3, r2, r3
 800f4fe:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	69db      	ldr	r3, [r3, #28]
 800f504:	63bb      	str	r3, [r7, #56]	; 0x38
 800f506:	e022      	b.n	800f54e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	689b      	ldr	r3, [r3, #8]
 800f50c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f510:	2b00      	cmp	r3, #0
 800f512:	d119      	bne.n	800f548 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2100      	movs	r1, #0
 800f518:	4618      	mov	r0, r3
 800f51a:	f7fd fdd5 	bl	800d0c8 <create_chain>
 800f51e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f522:	2b01      	cmp	r3, #1
 800f524:	d104      	bne.n	800f530 <f_lseek+0x28a>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2202      	movs	r2, #2
 800f52a:	755a      	strb	r2, [r3, #21]
 800f52c:	2302      	movs	r3, #2
 800f52e:	e0bf      	b.n	800f6b0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f536:	d104      	bne.n	800f542 <f_lseek+0x29c>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2201      	movs	r2, #1
 800f53c:	755a      	strb	r2, [r3, #21]
 800f53e:	2301      	movs	r3, #1
 800f540:	e0b6      	b.n	800f6b0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f546:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f54c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f550:	2b00      	cmp	r3, #0
 800f552:	d05d      	beq.n	800f610 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f554:	e03a      	b.n	800f5cc <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f556:	683a      	ldr	r2, [r7, #0]
 800f558:	69fb      	ldr	r3, [r7, #28]
 800f55a:	1ad3      	subs	r3, r2, r3
 800f55c:	603b      	str	r3, [r7, #0]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	699a      	ldr	r2, [r3, #24]
 800f562:	69fb      	ldr	r3, [r7, #28]
 800f564:	441a      	add	r2, r3
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	7d1b      	ldrb	r3, [r3, #20]
 800f56e:	f003 0302 	and.w	r3, r3, #2
 800f572:	2b00      	cmp	r3, #0
 800f574:	d00b      	beq.n	800f58e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7fd fda4 	bl	800d0c8 <create_chain>
 800f580:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f584:	2b00      	cmp	r3, #0
 800f586:	d108      	bne.n	800f59a <f_lseek+0x2f4>
							ofs = 0; break;
 800f588:	2300      	movs	r3, #0
 800f58a:	603b      	str	r3, [r7, #0]
 800f58c:	e022      	b.n	800f5d4 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f592:	4618      	mov	r0, r3
 800f594:	f7fd fba1 	bl	800ccda <get_fat>
 800f598:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5a0:	d104      	bne.n	800f5ac <f_lseek+0x306>
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2201      	movs	r2, #1
 800f5a6:	755a      	strb	r2, [r3, #21]
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	e081      	b.n	800f6b0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ae:	2b01      	cmp	r3, #1
 800f5b0:	d904      	bls.n	800f5bc <f_lseek+0x316>
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	699b      	ldr	r3, [r3, #24]
 800f5b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d304      	bcc.n	800f5c6 <f_lseek+0x320>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2202      	movs	r2, #2
 800f5c0:	755a      	strb	r2, [r3, #21]
 800f5c2:	2302      	movs	r3, #2
 800f5c4:	e074      	b.n	800f6b0 <f_lseek+0x40a>
					fp->clust = clst;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f5ca:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f5cc:	683a      	ldr	r2, [r7, #0]
 800f5ce:	69fb      	ldr	r3, [r7, #28]
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d8c0      	bhi.n	800f556 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	699a      	ldr	r2, [r3, #24]
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	441a      	add	r2, r3
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d012      	beq.n	800f610 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f7fd fb54 	bl	800cc9c <clust2sect>
 800f5f4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d104      	bne.n	800f606 <f_lseek+0x360>
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2202      	movs	r2, #2
 800f600:	755a      	strb	r2, [r3, #21]
 800f602:	2302      	movs	r3, #2
 800f604:	e054      	b.n	800f6b0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	0a5b      	lsrs	r3, r3, #9
 800f60a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f60c:	4413      	add	r3, r2
 800f60e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	699a      	ldr	r2, [r3, #24]
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	68db      	ldr	r3, [r3, #12]
 800f618:	429a      	cmp	r2, r3
 800f61a:	d90a      	bls.n	800f632 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	699a      	ldr	r2, [r3, #24]
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	7d1b      	ldrb	r3, [r3, #20]
 800f628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f62c:	b2da      	uxtb	r2, r3
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	699b      	ldr	r3, [r3, #24]
 800f636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d036      	beq.n	800f6ac <f_lseek+0x406>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	6a1b      	ldr	r3, [r3, #32]
 800f642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f644:	429a      	cmp	r2, r3
 800f646:	d031      	beq.n	800f6ac <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	7d1b      	ldrb	r3, [r3, #20]
 800f64c:	b25b      	sxtb	r3, r3
 800f64e:	2b00      	cmp	r3, #0
 800f650:	da18      	bge.n	800f684 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	7858      	ldrb	r0, [r3, #1]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6a1a      	ldr	r2, [r3, #32]
 800f660:	2301      	movs	r3, #1
 800f662:	f7fc ff91 	bl	800c588 <disk_write>
 800f666:	4603      	mov	r3, r0
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d004      	beq.n	800f676 <f_lseek+0x3d0>
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2201      	movs	r2, #1
 800f670:	755a      	strb	r2, [r3, #21]
 800f672:	2301      	movs	r3, #1
 800f674:	e01c      	b.n	800f6b0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	7d1b      	ldrb	r3, [r3, #20]
 800f67a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f67e:	b2da      	uxtb	r2, r3
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	7858      	ldrb	r0, [r3, #1]
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f68e:	2301      	movs	r3, #1
 800f690:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f692:	f7fc ff59 	bl	800c548 <disk_read>
 800f696:	4603      	mov	r3, r0
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d004      	beq.n	800f6a6 <f_lseek+0x400>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2201      	movs	r2, #1
 800f6a0:	755a      	strb	r2, [r3, #21]
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	e004      	b.n	800f6b0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6aa:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f6ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	3740      	adds	r7, #64	; 0x40
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}

0800f6b8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b086      	sub	sp, #24
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
 800f6c0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d101      	bne.n	800f6cc <f_opendir+0x14>
 800f6c8:	2309      	movs	r3, #9
 800f6ca:	e064      	b.n	800f796 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800f6d0:	f107 010c 	add.w	r1, r7, #12
 800f6d4:	463b      	mov	r3, r7
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7fe ff73 	bl	800e5c4 <find_volume>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f6e2:	7dfb      	ldrb	r3, [r7, #23]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d14f      	bne.n	800f788 <f_opendir+0xd0>
		obj->fs = fs;
 800f6e8:	68fa      	ldr	r2, [r7, #12]
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	4619      	mov	r1, r3
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f7fe fe5a 	bl	800e3ac <follow_path>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800f6fc:	7dfb      	ldrb	r3, [r7, #23]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d13d      	bne.n	800f77e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f708:	b25b      	sxtb	r3, r3
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	db12      	blt.n	800f734 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	799b      	ldrb	r3, [r3, #6]
 800f712:	f003 0310 	and.w	r3, r3, #16
 800f716:	2b00      	cmp	r3, #0
 800f718:	d00a      	beq.n	800f730 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f71a:	68fa      	ldr	r2, [r7, #12]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6a1b      	ldr	r3, [r3, #32]
 800f720:	4619      	mov	r1, r3
 800f722:	4610      	mov	r0, r2
 800f724:	f7fd ff23 	bl	800d56e <ld_clust>
 800f728:	4602      	mov	r2, r0
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	609a      	str	r2, [r3, #8]
 800f72e:	e001      	b.n	800f734 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f730:	2305      	movs	r3, #5
 800f732:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800f734:	7dfb      	ldrb	r3, [r7, #23]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d121      	bne.n	800f77e <f_opendir+0xc6>
				obj->id = fs->id;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	88da      	ldrh	r2, [r3, #6]
 800f73e:	693b      	ldr	r3, [r7, #16]
 800f740:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f742:	2100      	movs	r1, #0
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f7fd fd8b 	bl	800d260 <dir_sdi>
 800f74a:	4603      	mov	r3, r0
 800f74c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800f74e:	7dfb      	ldrb	r3, [r7, #23]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d114      	bne.n	800f77e <f_opendir+0xc6>
					if (obj->sclust) {
 800f754:	693b      	ldr	r3, [r7, #16]
 800f756:	689b      	ldr	r3, [r3, #8]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d00d      	beq.n	800f778 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f75c:	2100      	movs	r1, #0
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f7fd f8ce 	bl	800c900 <inc_lock>
 800f764:	4602      	mov	r2, r0
 800f766:	693b      	ldr	r3, [r7, #16]
 800f768:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	691b      	ldr	r3, [r3, #16]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d105      	bne.n	800f77e <f_opendir+0xc6>
 800f772:	2312      	movs	r3, #18
 800f774:	75fb      	strb	r3, [r7, #23]
 800f776:	e002      	b.n	800f77e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	2200      	movs	r2, #0
 800f77c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f77e:	7dfb      	ldrb	r3, [r7, #23]
 800f780:	2b04      	cmp	r3, #4
 800f782:	d101      	bne.n	800f788 <f_opendir+0xd0>
 800f784:	2305      	movs	r3, #5
 800f786:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f788:	7dfb      	ldrb	r3, [r7, #23]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d002      	beq.n	800f794 <f_opendir+0xdc>
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	2200      	movs	r2, #0
 800f792:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f794:	7dfb      	ldrb	r3, [r7, #23]
}
 800f796:	4618      	mov	r0, r3
 800f798:	3718      	adds	r7, #24
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}

0800f79e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800f79e:	b580      	push	{r7, lr}
 800f7a0:	b084      	sub	sp, #16
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f107 0208 	add.w	r2, r7, #8
 800f7ac:	4611      	mov	r1, r2
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7ff f958 	bl	800ea64 <validate>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f7b8:	7bfb      	ldrb	r3, [r7, #15]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d110      	bne.n	800f7e0 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	691b      	ldr	r3, [r3, #16]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d006      	beq.n	800f7d4 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	691b      	ldr	r3, [r3, #16]
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7fd f926 	bl	800ca1c <dec_lock>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800f7d4:	7bfb      	ldrb	r3, [r7, #15]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d102      	bne.n	800f7e0 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2200      	movs	r2, #0
 800f7de:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800f7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3710      	adds	r7, #16
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}

0800f7ea <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f7ea:	b580      	push	{r7, lr}
 800f7ec:	b084      	sub	sp, #16
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	6078      	str	r0, [r7, #4]
 800f7f2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f107 0208 	add.w	r2, r7, #8
 800f7fa:	4611      	mov	r1, r2
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f7ff f931 	bl	800ea64 <validate>
 800f802:	4603      	mov	r3, r0
 800f804:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f806:	7bfb      	ldrb	r3, [r7, #15]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d126      	bne.n	800f85a <f_readdir+0x70>
		if (!fno) {
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d106      	bne.n	800f820 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f812:	2100      	movs	r1, #0
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f7fd fd23 	bl	800d260 <dir_sdi>
 800f81a:	4603      	mov	r3, r0
 800f81c:	73fb      	strb	r3, [r7, #15]
 800f81e:	e01c      	b.n	800f85a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800f820:	2100      	movs	r1, #0
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f7fe f8cd 	bl	800d9c2 <dir_read>
 800f828:	4603      	mov	r3, r0
 800f82a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800f82c:	7bfb      	ldrb	r3, [r7, #15]
 800f82e:	2b04      	cmp	r3, #4
 800f830:	d101      	bne.n	800f836 <f_readdir+0x4c>
 800f832:	2300      	movs	r3, #0
 800f834:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800f836:	7bfb      	ldrb	r3, [r7, #15]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d10e      	bne.n	800f85a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800f83c:	6839      	ldr	r1, [r7, #0]
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f7fe fb1e 	bl	800de80 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f844:	2100      	movs	r1, #0
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f7fd fd85 	bl	800d356 <dir_next>
 800f84c:	4603      	mov	r3, r0
 800f84e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800f850:	7bfb      	ldrb	r3, [r7, #15]
 800f852:	2b04      	cmp	r3, #4
 800f854:	d101      	bne.n	800f85a <f_readdir+0x70>
 800f856:	2300      	movs	r3, #0
 800f858:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800f85a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3710      	adds	r7, #16
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}

0800f864 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f864:	b480      	push	{r7}
 800f866:	b087      	sub	sp, #28
 800f868:	af00      	add	r7, sp, #0
 800f86a:	60f8      	str	r0, [r7, #12]
 800f86c:	60b9      	str	r1, [r7, #8]
 800f86e:	4613      	mov	r3, r2
 800f870:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f872:	2301      	movs	r3, #1
 800f874:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f876:	2300      	movs	r3, #0
 800f878:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f87a:	4b1f      	ldr	r3, [pc, #124]	; (800f8f8 <FATFS_LinkDriverEx+0x94>)
 800f87c:	7a5b      	ldrb	r3, [r3, #9]
 800f87e:	b2db      	uxtb	r3, r3
 800f880:	2b00      	cmp	r3, #0
 800f882:	d131      	bne.n	800f8e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f884:	4b1c      	ldr	r3, [pc, #112]	; (800f8f8 <FATFS_LinkDriverEx+0x94>)
 800f886:	7a5b      	ldrb	r3, [r3, #9]
 800f888:	b2db      	uxtb	r3, r3
 800f88a:	461a      	mov	r2, r3
 800f88c:	4b1a      	ldr	r3, [pc, #104]	; (800f8f8 <FATFS_LinkDriverEx+0x94>)
 800f88e:	2100      	movs	r1, #0
 800f890:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f892:	4b19      	ldr	r3, [pc, #100]	; (800f8f8 <FATFS_LinkDriverEx+0x94>)
 800f894:	7a5b      	ldrb	r3, [r3, #9]
 800f896:	b2db      	uxtb	r3, r3
 800f898:	4a17      	ldr	r2, [pc, #92]	; (800f8f8 <FATFS_LinkDriverEx+0x94>)
 800f89a:	009b      	lsls	r3, r3, #2
 800f89c:	4413      	add	r3, r2
 800f89e:	68fa      	ldr	r2, [r7, #12]
 800f8a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f8a2:	4b15      	ldr	r3, [pc, #84]	; (800f8f8 <FATFS_LinkDriverEx+0x94>)
 800f8a4:	7a5b      	ldrb	r3, [r3, #9]
 800f8a6:	b2db      	uxtb	r3, r3
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	4b13      	ldr	r3, [pc, #76]	; (800f8f8 <FATFS_LinkDriverEx+0x94>)
 800f8ac:	4413      	add	r3, r2
 800f8ae:	79fa      	ldrb	r2, [r7, #7]
 800f8b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f8b2:	4b11      	ldr	r3, [pc, #68]	; (800f8f8 <FATFS_LinkDriverEx+0x94>)
 800f8b4:	7a5b      	ldrb	r3, [r3, #9]
 800f8b6:	b2db      	uxtb	r3, r3
 800f8b8:	1c5a      	adds	r2, r3, #1
 800f8ba:	b2d1      	uxtb	r1, r2
 800f8bc:	4a0e      	ldr	r2, [pc, #56]	; (800f8f8 <FATFS_LinkDriverEx+0x94>)
 800f8be:	7251      	strb	r1, [r2, #9]
 800f8c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f8c2:	7dbb      	ldrb	r3, [r7, #22]
 800f8c4:	3330      	adds	r3, #48	; 0x30
 800f8c6:	b2da      	uxtb	r2, r3
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	3301      	adds	r3, #1
 800f8d0:	223a      	movs	r2, #58	; 0x3a
 800f8d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	3302      	adds	r3, #2
 800f8d8:	222f      	movs	r2, #47	; 0x2f
 800f8da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	3303      	adds	r3, #3
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f8e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	371c      	adds	r7, #28
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop
 800f8f8:	20001e70 	.word	0x20001e70

0800f8fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b082      	sub	sp, #8
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
 800f904:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f906:	2200      	movs	r2, #0
 800f908:	6839      	ldr	r1, [r7, #0]
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f7ff ffaa 	bl	800f864 <FATFS_LinkDriverEx>
 800f910:	4603      	mov	r3, r0
}
 800f912:	4618      	mov	r0, r3
 800f914:	3708      	adds	r7, #8
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}
	...

0800f91c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f91c:	b480      	push	{r7}
 800f91e:	b085      	sub	sp, #20
 800f920:	af00      	add	r7, sp, #0
 800f922:	4603      	mov	r3, r0
 800f924:	6039      	str	r1, [r7, #0]
 800f926:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f928:	88fb      	ldrh	r3, [r7, #6]
 800f92a:	2b7f      	cmp	r3, #127	; 0x7f
 800f92c:	d802      	bhi.n	800f934 <ff_convert+0x18>
		c = chr;
 800f92e:	88fb      	ldrh	r3, [r7, #6]
 800f930:	81fb      	strh	r3, [r7, #14]
 800f932:	e025      	b.n	800f980 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d00b      	beq.n	800f952 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f93a:	88fb      	ldrh	r3, [r7, #6]
 800f93c:	2bff      	cmp	r3, #255	; 0xff
 800f93e:	d805      	bhi.n	800f94c <ff_convert+0x30>
 800f940:	88fb      	ldrh	r3, [r7, #6]
 800f942:	3b80      	subs	r3, #128	; 0x80
 800f944:	4a12      	ldr	r2, [pc, #72]	; (800f990 <ff_convert+0x74>)
 800f946:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f94a:	e000      	b.n	800f94e <ff_convert+0x32>
 800f94c:	2300      	movs	r3, #0
 800f94e:	81fb      	strh	r3, [r7, #14]
 800f950:	e016      	b.n	800f980 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f952:	2300      	movs	r3, #0
 800f954:	81fb      	strh	r3, [r7, #14]
 800f956:	e009      	b.n	800f96c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f958:	89fb      	ldrh	r3, [r7, #14]
 800f95a:	4a0d      	ldr	r2, [pc, #52]	; (800f990 <ff_convert+0x74>)
 800f95c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f960:	88fa      	ldrh	r2, [r7, #6]
 800f962:	429a      	cmp	r2, r3
 800f964:	d006      	beq.n	800f974 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f966:	89fb      	ldrh	r3, [r7, #14]
 800f968:	3301      	adds	r3, #1
 800f96a:	81fb      	strh	r3, [r7, #14]
 800f96c:	89fb      	ldrh	r3, [r7, #14]
 800f96e:	2b7f      	cmp	r3, #127	; 0x7f
 800f970:	d9f2      	bls.n	800f958 <ff_convert+0x3c>
 800f972:	e000      	b.n	800f976 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f974:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f976:	89fb      	ldrh	r3, [r7, #14]
 800f978:	3380      	adds	r3, #128	; 0x80
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	b2db      	uxtb	r3, r3
 800f97e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f980:	89fb      	ldrh	r3, [r7, #14]
}
 800f982:	4618      	mov	r0, r3
 800f984:	3714      	adds	r7, #20
 800f986:	46bd      	mov	sp, r7
 800f988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98c:	4770      	bx	lr
 800f98e:	bf00      	nop
 800f990:	080105b0 	.word	0x080105b0

0800f994 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f994:	b480      	push	{r7}
 800f996:	b087      	sub	sp, #28
 800f998:	af00      	add	r7, sp, #0
 800f99a:	4603      	mov	r3, r0
 800f99c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f99e:	88fb      	ldrh	r3, [r7, #6]
 800f9a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f9a4:	d201      	bcs.n	800f9aa <ff_wtoupper+0x16>
 800f9a6:	4b3e      	ldr	r3, [pc, #248]	; (800faa0 <ff_wtoupper+0x10c>)
 800f9a8:	e000      	b.n	800f9ac <ff_wtoupper+0x18>
 800f9aa:	4b3e      	ldr	r3, [pc, #248]	; (800faa4 <ff_wtoupper+0x110>)
 800f9ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	1c9a      	adds	r2, r3, #2
 800f9b2:	617a      	str	r2, [r7, #20]
 800f9b4:	881b      	ldrh	r3, [r3, #0]
 800f9b6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f9b8:	8a7b      	ldrh	r3, [r7, #18]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d068      	beq.n	800fa90 <ff_wtoupper+0xfc>
 800f9be:	88fa      	ldrh	r2, [r7, #6]
 800f9c0:	8a7b      	ldrh	r3, [r7, #18]
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d364      	bcc.n	800fa90 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	1c9a      	adds	r2, r3, #2
 800f9ca:	617a      	str	r2, [r7, #20]
 800f9cc:	881b      	ldrh	r3, [r3, #0]
 800f9ce:	823b      	strh	r3, [r7, #16]
 800f9d0:	8a3b      	ldrh	r3, [r7, #16]
 800f9d2:	0a1b      	lsrs	r3, r3, #8
 800f9d4:	81fb      	strh	r3, [r7, #14]
 800f9d6:	8a3b      	ldrh	r3, [r7, #16]
 800f9d8:	b2db      	uxtb	r3, r3
 800f9da:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f9dc:	88fa      	ldrh	r2, [r7, #6]
 800f9de:	8a79      	ldrh	r1, [r7, #18]
 800f9e0:	8a3b      	ldrh	r3, [r7, #16]
 800f9e2:	440b      	add	r3, r1
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	da49      	bge.n	800fa7c <ff_wtoupper+0xe8>
			switch (cmd) {
 800f9e8:	89fb      	ldrh	r3, [r7, #14]
 800f9ea:	2b08      	cmp	r3, #8
 800f9ec:	d84f      	bhi.n	800fa8e <ff_wtoupper+0xfa>
 800f9ee:	a201      	add	r2, pc, #4	; (adr r2, 800f9f4 <ff_wtoupper+0x60>)
 800f9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9f4:	0800fa19 	.word	0x0800fa19
 800f9f8:	0800fa2b 	.word	0x0800fa2b
 800f9fc:	0800fa41 	.word	0x0800fa41
 800fa00:	0800fa49 	.word	0x0800fa49
 800fa04:	0800fa51 	.word	0x0800fa51
 800fa08:	0800fa59 	.word	0x0800fa59
 800fa0c:	0800fa61 	.word	0x0800fa61
 800fa10:	0800fa69 	.word	0x0800fa69
 800fa14:	0800fa71 	.word	0x0800fa71
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800fa18:	88fa      	ldrh	r2, [r7, #6]
 800fa1a:	8a7b      	ldrh	r3, [r7, #18]
 800fa1c:	1ad3      	subs	r3, r2, r3
 800fa1e:	005b      	lsls	r3, r3, #1
 800fa20:	697a      	ldr	r2, [r7, #20]
 800fa22:	4413      	add	r3, r2
 800fa24:	881b      	ldrh	r3, [r3, #0]
 800fa26:	80fb      	strh	r3, [r7, #6]
 800fa28:	e027      	b.n	800fa7a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fa2a:	88fa      	ldrh	r2, [r7, #6]
 800fa2c:	8a7b      	ldrh	r3, [r7, #18]
 800fa2e:	1ad3      	subs	r3, r2, r3
 800fa30:	b29b      	uxth	r3, r3
 800fa32:	f003 0301 	and.w	r3, r3, #1
 800fa36:	b29b      	uxth	r3, r3
 800fa38:	88fa      	ldrh	r2, [r7, #6]
 800fa3a:	1ad3      	subs	r3, r2, r3
 800fa3c:	80fb      	strh	r3, [r7, #6]
 800fa3e:	e01c      	b.n	800fa7a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800fa40:	88fb      	ldrh	r3, [r7, #6]
 800fa42:	3b10      	subs	r3, #16
 800fa44:	80fb      	strh	r3, [r7, #6]
 800fa46:	e018      	b.n	800fa7a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fa48:	88fb      	ldrh	r3, [r7, #6]
 800fa4a:	3b20      	subs	r3, #32
 800fa4c:	80fb      	strh	r3, [r7, #6]
 800fa4e:	e014      	b.n	800fa7a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fa50:	88fb      	ldrh	r3, [r7, #6]
 800fa52:	3b30      	subs	r3, #48	; 0x30
 800fa54:	80fb      	strh	r3, [r7, #6]
 800fa56:	e010      	b.n	800fa7a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fa58:	88fb      	ldrh	r3, [r7, #6]
 800fa5a:	3b1a      	subs	r3, #26
 800fa5c:	80fb      	strh	r3, [r7, #6]
 800fa5e:	e00c      	b.n	800fa7a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800fa60:	88fb      	ldrh	r3, [r7, #6]
 800fa62:	3308      	adds	r3, #8
 800fa64:	80fb      	strh	r3, [r7, #6]
 800fa66:	e008      	b.n	800fa7a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800fa68:	88fb      	ldrh	r3, [r7, #6]
 800fa6a:	3b50      	subs	r3, #80	; 0x50
 800fa6c:	80fb      	strh	r3, [r7, #6]
 800fa6e:	e004      	b.n	800fa7a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fa70:	88fb      	ldrh	r3, [r7, #6]
 800fa72:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800fa76:	80fb      	strh	r3, [r7, #6]
 800fa78:	bf00      	nop
			}
			break;
 800fa7a:	e008      	b.n	800fa8e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800fa7c:	89fb      	ldrh	r3, [r7, #14]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d195      	bne.n	800f9ae <ff_wtoupper+0x1a>
 800fa82:	8a3b      	ldrh	r3, [r7, #16]
 800fa84:	005b      	lsls	r3, r3, #1
 800fa86:	697a      	ldr	r2, [r7, #20]
 800fa88:	4413      	add	r3, r2
 800fa8a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800fa8c:	e78f      	b.n	800f9ae <ff_wtoupper+0x1a>
			break;
 800fa8e:	bf00      	nop
	}

	return chr;
 800fa90:	88fb      	ldrh	r3, [r7, #6]
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	371c      	adds	r7, #28
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr
 800fa9e:	bf00      	nop
 800faa0:	080106b0 	.word	0x080106b0
 800faa4:	080108a4 	.word	0x080108a4

0800faa8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800faac:	2201      	movs	r2, #1
 800faae:	490e      	ldr	r1, [pc, #56]	; (800fae8 <MX_USB_HOST_Init+0x40>)
 800fab0:	480e      	ldr	r0, [pc, #56]	; (800faec <MX_USB_HOST_Init+0x44>)
 800fab2:	f7fb f8b5 	bl	800ac20 <USBH_Init>
 800fab6:	4603      	mov	r3, r0
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d001      	beq.n	800fac0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800fabc:	f7f2 f8d4 	bl	8001c68 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800fac0:	490b      	ldr	r1, [pc, #44]	; (800faf0 <MX_USB_HOST_Init+0x48>)
 800fac2:	480a      	ldr	r0, [pc, #40]	; (800faec <MX_USB_HOST_Init+0x44>)
 800fac4:	f7fb f93a 	bl	800ad3c <USBH_RegisterClass>
 800fac8:	4603      	mov	r3, r0
 800faca:	2b00      	cmp	r3, #0
 800facc:	d001      	beq.n	800fad2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800face:	f7f2 f8cb 	bl	8001c68 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800fad2:	4806      	ldr	r0, [pc, #24]	; (800faec <MX_USB_HOST_Init+0x44>)
 800fad4:	f7fb f9be 	bl	800ae54 <USBH_Start>
 800fad8:	4603      	mov	r3, r0
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d001      	beq.n	800fae2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800fade:	f7f2 f8c3 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800fae2:	bf00      	nop
 800fae4:	bd80      	pop	{r7, pc}
 800fae6:	bf00      	nop
 800fae8:	0800fb09 	.word	0x0800fb09
 800faec:	20001e7c 	.word	0x20001e7c
 800faf0:	20000078 	.word	0x20000078

0800faf4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800faf8:	4802      	ldr	r0, [pc, #8]	; (800fb04 <MX_USB_HOST_Process+0x10>)
 800fafa:	f7fb f9bb 	bl	800ae74 <USBH_Process>
}
 800fafe:	bf00      	nop
 800fb00:	bd80      	pop	{r7, pc}
 800fb02:	bf00      	nop
 800fb04:	20001e7c 	.word	0x20001e7c

0800fb08 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b083      	sub	sp, #12
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	460b      	mov	r3, r1
 800fb12:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800fb14:	78fb      	ldrb	r3, [r7, #3]
 800fb16:	3b01      	subs	r3, #1
 800fb18:	2b04      	cmp	r3, #4
 800fb1a:	d819      	bhi.n	800fb50 <USBH_UserProcess+0x48>
 800fb1c:	a201      	add	r2, pc, #4	; (adr r2, 800fb24 <USBH_UserProcess+0x1c>)
 800fb1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb22:	bf00      	nop
 800fb24:	0800fb51 	.word	0x0800fb51
 800fb28:	0800fb41 	.word	0x0800fb41
 800fb2c:	0800fb51 	.word	0x0800fb51
 800fb30:	0800fb49 	.word	0x0800fb49
 800fb34:	0800fb39 	.word	0x0800fb39
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800fb38:	4b09      	ldr	r3, [pc, #36]	; (800fb60 <USBH_UserProcess+0x58>)
 800fb3a:	2203      	movs	r2, #3
 800fb3c:	701a      	strb	r2, [r3, #0]
  break;
 800fb3e:	e008      	b.n	800fb52 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800fb40:	4b07      	ldr	r3, [pc, #28]	; (800fb60 <USBH_UserProcess+0x58>)
 800fb42:	2202      	movs	r2, #2
 800fb44:	701a      	strb	r2, [r3, #0]
  break;
 800fb46:	e004      	b.n	800fb52 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800fb48:	4b05      	ldr	r3, [pc, #20]	; (800fb60 <USBH_UserProcess+0x58>)
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	701a      	strb	r2, [r3, #0]
  break;
 800fb4e:	e000      	b.n	800fb52 <USBH_UserProcess+0x4a>

  default:
  break;
 800fb50:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800fb52:	bf00      	nop
 800fb54:	370c      	adds	r7, #12
 800fb56:	46bd      	mov	sp, r7
 800fb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5c:	4770      	bx	lr
 800fb5e:	bf00      	nop
 800fb60:	20002254 	.word	0x20002254

0800fb64 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b08a      	sub	sp, #40	; 0x28
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fb6c:	f107 0314 	add.w	r3, r7, #20
 800fb70:	2200      	movs	r2, #0
 800fb72:	601a      	str	r2, [r3, #0]
 800fb74:	605a      	str	r2, [r3, #4]
 800fb76:	609a      	str	r2, [r3, #8]
 800fb78:	60da      	str	r2, [r3, #12]
 800fb7a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fb84:	d147      	bne.n	800fc16 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fb86:	2300      	movs	r3, #0
 800fb88:	613b      	str	r3, [r7, #16]
 800fb8a:	4b25      	ldr	r3, [pc, #148]	; (800fc20 <HAL_HCD_MspInit+0xbc>)
 800fb8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb8e:	4a24      	ldr	r2, [pc, #144]	; (800fc20 <HAL_HCD_MspInit+0xbc>)
 800fb90:	f043 0301 	orr.w	r3, r3, #1
 800fb94:	6313      	str	r3, [r2, #48]	; 0x30
 800fb96:	4b22      	ldr	r3, [pc, #136]	; (800fc20 <HAL_HCD_MspInit+0xbc>)
 800fb98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb9a:	f003 0301 	and.w	r3, r3, #1
 800fb9e:	613b      	str	r3, [r7, #16]
 800fba0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800fba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fbac:	2300      	movs	r3, #0
 800fbae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fbb0:	f107 0314 	add.w	r3, r7, #20
 800fbb4:	4619      	mov	r1, r3
 800fbb6:	481b      	ldr	r0, [pc, #108]	; (800fc24 <HAL_HCD_MspInit+0xc0>)
 800fbb8:	f7f3 f970 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fbbc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fbc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fbc2:	2302      	movs	r3, #2
 800fbc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fbca:	2303      	movs	r3, #3
 800fbcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fbce:	230a      	movs	r3, #10
 800fbd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fbd2:	f107 0314 	add.w	r3, r7, #20
 800fbd6:	4619      	mov	r1, r3
 800fbd8:	4812      	ldr	r0, [pc, #72]	; (800fc24 <HAL_HCD_MspInit+0xc0>)
 800fbda:	f7f3 f95f 	bl	8002e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fbde:	4b10      	ldr	r3, [pc, #64]	; (800fc20 <HAL_HCD_MspInit+0xbc>)
 800fbe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbe2:	4a0f      	ldr	r2, [pc, #60]	; (800fc20 <HAL_HCD_MspInit+0xbc>)
 800fbe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbe8:	6353      	str	r3, [r2, #52]	; 0x34
 800fbea:	2300      	movs	r3, #0
 800fbec:	60fb      	str	r3, [r7, #12]
 800fbee:	4b0c      	ldr	r3, [pc, #48]	; (800fc20 <HAL_HCD_MspInit+0xbc>)
 800fbf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbf2:	4a0b      	ldr	r2, [pc, #44]	; (800fc20 <HAL_HCD_MspInit+0xbc>)
 800fbf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fbf8:	6453      	str	r3, [r2, #68]	; 0x44
 800fbfa:	4b09      	ldr	r3, [pc, #36]	; (800fc20 <HAL_HCD_MspInit+0xbc>)
 800fbfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fc02:	60fb      	str	r3, [r7, #12]
 800fc04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fc06:	2200      	movs	r2, #0
 800fc08:	2100      	movs	r1, #0
 800fc0a:	2043      	movs	r0, #67	; 0x43
 800fc0c:	f7f2 fcaf 	bl	800256e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fc10:	2043      	movs	r0, #67	; 0x43
 800fc12:	f7f2 fcc8 	bl	80025a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fc16:	bf00      	nop
 800fc18:	3728      	adds	r7, #40	; 0x28
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	40023800 	.word	0x40023800
 800fc24:	40020000 	.word	0x40020000

0800fc28 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b082      	sub	sp, #8
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fc36:	4618      	mov	r0, r3
 800fc38:	f7fb fcfb 	bl	800b632 <USBH_LL_IncTimer>
}
 800fc3c:	bf00      	nop
 800fc3e:	3708      	adds	r7, #8
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}

0800fc44 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7fb fd33 	bl	800b6be <USBH_LL_Connect>
}
 800fc58:	bf00      	nop
 800fc5a:	3708      	adds	r7, #8
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}

0800fc60 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b082      	sub	sp, #8
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7fb fd3c 	bl	800b6ec <USBH_LL_Disconnect>
}
 800fc74:	bf00      	nop
 800fc76:	3708      	adds	r7, #8
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}

0800fc7c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b083      	sub	sp, #12
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	460b      	mov	r3, r1
 800fc86:	70fb      	strb	r3, [r7, #3]
 800fc88:	4613      	mov	r3, r2
 800fc8a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800fc8c:	bf00      	nop
 800fc8e:	370c      	adds	r7, #12
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr

0800fc98 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7fb fced 	bl	800b686 <USBH_LL_PortEnabled>
}
 800fcac:	bf00      	nop
 800fcae:	3708      	adds	r7, #8
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7fb fced 	bl	800b6a2 <USBH_LL_PortDisabled>
}
 800fcc8:	bf00      	nop
 800fcca:	3708      	adds	r7, #8
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b082      	sub	sp, #8
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800fcde:	2b01      	cmp	r3, #1
 800fce0:	d12a      	bne.n	800fd38 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800fce2:	4a18      	ldr	r2, [pc, #96]	; (800fd44 <USBH_LL_Init+0x74>)
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	4a15      	ldr	r2, [pc, #84]	; (800fd44 <USBH_LL_Init+0x74>)
 800fcee:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fcf2:	4b14      	ldr	r3, [pc, #80]	; (800fd44 <USBH_LL_Init+0x74>)
 800fcf4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fcf8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800fcfa:	4b12      	ldr	r3, [pc, #72]	; (800fd44 <USBH_LL_Init+0x74>)
 800fcfc:	2208      	movs	r2, #8
 800fcfe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800fd00:	4b10      	ldr	r3, [pc, #64]	; (800fd44 <USBH_LL_Init+0x74>)
 800fd02:	2201      	movs	r2, #1
 800fd04:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fd06:	4b0f      	ldr	r3, [pc, #60]	; (800fd44 <USBH_LL_Init+0x74>)
 800fd08:	2200      	movs	r2, #0
 800fd0a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800fd0c:	4b0d      	ldr	r3, [pc, #52]	; (800fd44 <USBH_LL_Init+0x74>)
 800fd0e:	2202      	movs	r2, #2
 800fd10:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fd12:	4b0c      	ldr	r3, [pc, #48]	; (800fd44 <USBH_LL_Init+0x74>)
 800fd14:	2200      	movs	r2, #0
 800fd16:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800fd18:	480a      	ldr	r0, [pc, #40]	; (800fd44 <USBH_LL_Init+0x74>)
 800fd1a:	f7f3 fb59 	bl	80033d0 <HAL_HCD_Init>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d001      	beq.n	800fd28 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800fd24:	f7f1 ffa0 	bl	8001c68 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800fd28:	4806      	ldr	r0, [pc, #24]	; (800fd44 <USBH_LL_Init+0x74>)
 800fd2a:	f7f3 ff3c 	bl	8003ba6 <HAL_HCD_GetCurrentFrame>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	4619      	mov	r1, r3
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f7fb fc6e 	bl	800b614 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800fd38:	2300      	movs	r3, #0
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	3708      	adds	r7, #8
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd80      	pop	{r7, pc}
 800fd42:	bf00      	nop
 800fd44:	20002258 	.word	0x20002258

0800fd48 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b084      	sub	sp, #16
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd50:	2300      	movs	r3, #0
 800fd52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fd54:	2300      	movs	r3, #0
 800fd56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7f3 feab 	bl	8003aba <HAL_HCD_Start>
 800fd64:	4603      	mov	r3, r0
 800fd66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fd68:	7bfb      	ldrb	r3, [r7, #15]
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f000 f98c 	bl	8010088 <USBH_Get_USB_Status>
 800fd70:	4603      	mov	r3, r0
 800fd72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd74:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3710      	adds	r7, #16
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}

0800fd7e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800fd7e:	b580      	push	{r7, lr}
 800fd80:	b084      	sub	sp, #16
 800fd82:	af00      	add	r7, sp, #0
 800fd84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd86:	2300      	movs	r3, #0
 800fd88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fd94:	4618      	mov	r0, r3
 800fd96:	f7f3 feb3 	bl	8003b00 <HAL_HCD_Stop>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fd9e:	7bfb      	ldrb	r3, [r7, #15]
 800fda0:	4618      	mov	r0, r3
 800fda2:	f000 f971 	bl	8010088 <USBH_Get_USB_Status>
 800fda6:	4603      	mov	r3, r0
 800fda8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fdaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdac:	4618      	mov	r0, r3
 800fdae:	3710      	adds	r7, #16
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}

0800fdb4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b084      	sub	sp, #16
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f7f3 fefb 	bl	8003bc2 <HAL_HCD_GetCurrentSpeed>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	2b02      	cmp	r3, #2
 800fdd0:	d00c      	beq.n	800fdec <USBH_LL_GetSpeed+0x38>
 800fdd2:	2b02      	cmp	r3, #2
 800fdd4:	d80d      	bhi.n	800fdf2 <USBH_LL_GetSpeed+0x3e>
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d002      	beq.n	800fde0 <USBH_LL_GetSpeed+0x2c>
 800fdda:	2b01      	cmp	r3, #1
 800fddc:	d003      	beq.n	800fde6 <USBH_LL_GetSpeed+0x32>
 800fdde:	e008      	b.n	800fdf2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800fde0:	2300      	movs	r3, #0
 800fde2:	73fb      	strb	r3, [r7, #15]
    break;
 800fde4:	e008      	b.n	800fdf8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800fde6:	2301      	movs	r3, #1
 800fde8:	73fb      	strb	r3, [r7, #15]
    break;
 800fdea:	e005      	b.n	800fdf8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800fdec:	2302      	movs	r3, #2
 800fdee:	73fb      	strb	r3, [r7, #15]
    break;
 800fdf0:	e002      	b.n	800fdf8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	73fb      	strb	r3, [r7, #15]
    break;
 800fdf6:	bf00      	nop
  }
  return  speed;
 800fdf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	3710      	adds	r7, #16
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}

0800fe02 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800fe02:	b580      	push	{r7, lr}
 800fe04:	b084      	sub	sp, #16
 800fe06:	af00      	add	r7, sp, #0
 800fe08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f7f3 fe8e 	bl	8003b3a <HAL_HCD_ResetPort>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fe22:	7bfb      	ldrb	r3, [r7, #15]
 800fe24:	4618      	mov	r0, r3
 800fe26:	f000 f92f 	bl	8010088 <USBH_Get_USB_Status>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe30:	4618      	mov	r0, r3
 800fe32:	3710      	adds	r7, #16
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}

0800fe38 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b082      	sub	sp, #8
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	460b      	mov	r3, r1
 800fe42:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fe4a:	78fa      	ldrb	r2, [r7, #3]
 800fe4c:	4611      	mov	r1, r2
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7f3 fe95 	bl	8003b7e <HAL_HCD_HC_GetXferCount>
 800fe54:	4603      	mov	r3, r0
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3708      	adds	r7, #8
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}

0800fe5e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fe5e:	b590      	push	{r4, r7, lr}
 800fe60:	b089      	sub	sp, #36	; 0x24
 800fe62:	af04      	add	r7, sp, #16
 800fe64:	6078      	str	r0, [r7, #4]
 800fe66:	4608      	mov	r0, r1
 800fe68:	4611      	mov	r1, r2
 800fe6a:	461a      	mov	r2, r3
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	70fb      	strb	r3, [r7, #3]
 800fe70:	460b      	mov	r3, r1
 800fe72:	70bb      	strb	r3, [r7, #2]
 800fe74:	4613      	mov	r3, r2
 800fe76:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fe86:	787c      	ldrb	r4, [r7, #1]
 800fe88:	78ba      	ldrb	r2, [r7, #2]
 800fe8a:	78f9      	ldrb	r1, [r7, #3]
 800fe8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fe8e:	9302      	str	r3, [sp, #8]
 800fe90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fe94:	9301      	str	r3, [sp, #4]
 800fe96:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fe9a:	9300      	str	r3, [sp, #0]
 800fe9c:	4623      	mov	r3, r4
 800fe9e:	f7f3 faf9 	bl	8003494 <HAL_HCD_HC_Init>
 800fea2:	4603      	mov	r3, r0
 800fea4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800fea6:	7bfb      	ldrb	r3, [r7, #15]
 800fea8:	4618      	mov	r0, r3
 800feaa:	f000 f8ed 	bl	8010088 <USBH_Get_USB_Status>
 800feae:	4603      	mov	r3, r0
 800feb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800feb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	3714      	adds	r7, #20
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd90      	pop	{r4, r7, pc}

0800febc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b084      	sub	sp, #16
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
 800fec4:	460b      	mov	r3, r1
 800fec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fec8:	2300      	movs	r3, #0
 800feca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fecc:	2300      	movs	r3, #0
 800fece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fed6:	78fa      	ldrb	r2, [r7, #3]
 800fed8:	4611      	mov	r1, r2
 800feda:	4618      	mov	r0, r3
 800fedc:	f7f3 fb69 	bl	80035b2 <HAL_HCD_HC_Halt>
 800fee0:	4603      	mov	r3, r0
 800fee2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fee4:	7bfb      	ldrb	r3, [r7, #15]
 800fee6:	4618      	mov	r0, r3
 800fee8:	f000 f8ce 	bl	8010088 <USBH_Get_USB_Status>
 800feec:	4603      	mov	r3, r0
 800feee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fef0:	7bbb      	ldrb	r3, [r7, #14]
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	3710      	adds	r7, #16
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}

0800fefa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800fefa:	b590      	push	{r4, r7, lr}
 800fefc:	b089      	sub	sp, #36	; 0x24
 800fefe:	af04      	add	r7, sp, #16
 800ff00:	6078      	str	r0, [r7, #4]
 800ff02:	4608      	mov	r0, r1
 800ff04:	4611      	mov	r1, r2
 800ff06:	461a      	mov	r2, r3
 800ff08:	4603      	mov	r3, r0
 800ff0a:	70fb      	strb	r3, [r7, #3]
 800ff0c:	460b      	mov	r3, r1
 800ff0e:	70bb      	strb	r3, [r7, #2]
 800ff10:	4613      	mov	r3, r2
 800ff12:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff14:	2300      	movs	r3, #0
 800ff16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ff22:	787c      	ldrb	r4, [r7, #1]
 800ff24:	78ba      	ldrb	r2, [r7, #2]
 800ff26:	78f9      	ldrb	r1, [r7, #3]
 800ff28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ff2c:	9303      	str	r3, [sp, #12]
 800ff2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ff30:	9302      	str	r3, [sp, #8]
 800ff32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff34:	9301      	str	r3, [sp, #4]
 800ff36:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ff3a:	9300      	str	r3, [sp, #0]
 800ff3c:	4623      	mov	r3, r4
 800ff3e:	f7f3 fb5b 	bl	80035f8 <HAL_HCD_HC_SubmitRequest>
 800ff42:	4603      	mov	r3, r0
 800ff44:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ff46:	7bfb      	ldrb	r3, [r7, #15]
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f000 f89d 	bl	8010088 <USBH_Get_USB_Status>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff52:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	3714      	adds	r7, #20
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd90      	pop	{r4, r7, pc}

0800ff5c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b082      	sub	sp, #8
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
 800ff64:	460b      	mov	r3, r1
 800ff66:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ff6e:	78fa      	ldrb	r2, [r7, #3]
 800ff70:	4611      	mov	r1, r2
 800ff72:	4618      	mov	r0, r3
 800ff74:	f7f3 fdef 	bl	8003b56 <HAL_HCD_HC_GetURBState>
 800ff78:	4603      	mov	r3, r0
}
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	3708      	adds	r7, #8
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}

0800ff82 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ff82:	b580      	push	{r7, lr}
 800ff84:	b082      	sub	sp, #8
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	6078      	str	r0, [r7, #4]
 800ff8a:	460b      	mov	r3, r1
 800ff8c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	d103      	bne.n	800ffa0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ff98:	78fb      	ldrb	r3, [r7, #3]
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f000 f8a0 	bl	80100e0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ffa0:	20c8      	movs	r0, #200	; 0xc8
 800ffa2:	f7f2 f9e5 	bl	8002370 <HAL_Delay>
  return USBH_OK;
 800ffa6:	2300      	movs	r3, #0
}
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3708      	adds	r7, #8
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}

0800ffb0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b085      	sub	sp, #20
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	460b      	mov	r3, r1
 800ffba:	70fb      	strb	r3, [r7, #3]
 800ffbc:	4613      	mov	r3, r2
 800ffbe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ffc6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ffc8:	78fb      	ldrb	r3, [r7, #3]
 800ffca:	68fa      	ldr	r2, [r7, #12]
 800ffcc:	212c      	movs	r1, #44	; 0x2c
 800ffce:	fb01 f303 	mul.w	r3, r1, r3
 800ffd2:	4413      	add	r3, r2
 800ffd4:	333b      	adds	r3, #59	; 0x3b
 800ffd6:	781b      	ldrb	r3, [r3, #0]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d009      	beq.n	800fff0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ffdc:	78fb      	ldrb	r3, [r7, #3]
 800ffde:	68fa      	ldr	r2, [r7, #12]
 800ffe0:	212c      	movs	r1, #44	; 0x2c
 800ffe2:	fb01 f303 	mul.w	r3, r1, r3
 800ffe6:	4413      	add	r3, r2
 800ffe8:	3354      	adds	r3, #84	; 0x54
 800ffea:	78ba      	ldrb	r2, [r7, #2]
 800ffec:	701a      	strb	r2, [r3, #0]
 800ffee:	e008      	b.n	8010002 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800fff0:	78fb      	ldrb	r3, [r7, #3]
 800fff2:	68fa      	ldr	r2, [r7, #12]
 800fff4:	212c      	movs	r1, #44	; 0x2c
 800fff6:	fb01 f303 	mul.w	r3, r1, r3
 800fffa:	4413      	add	r3, r2
 800fffc:	3355      	adds	r3, #85	; 0x55
 800fffe:	78ba      	ldrb	r2, [r7, #2]
 8010000:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010002:	2300      	movs	r3, #0
}
 8010004:	4618      	mov	r0, r3
 8010006:	3714      	adds	r7, #20
 8010008:	46bd      	mov	sp, r7
 801000a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000e:	4770      	bx	lr

08010010 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010010:	b480      	push	{r7}
 8010012:	b085      	sub	sp, #20
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
 8010018:	460b      	mov	r3, r1
 801001a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801001c:	2300      	movs	r3, #0
 801001e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010026:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8010028:	78fb      	ldrb	r3, [r7, #3]
 801002a:	68ba      	ldr	r2, [r7, #8]
 801002c:	212c      	movs	r1, #44	; 0x2c
 801002e:	fb01 f303 	mul.w	r3, r1, r3
 8010032:	4413      	add	r3, r2
 8010034:	333b      	adds	r3, #59	; 0x3b
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d009      	beq.n	8010050 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801003c:	78fb      	ldrb	r3, [r7, #3]
 801003e:	68ba      	ldr	r2, [r7, #8]
 8010040:	212c      	movs	r1, #44	; 0x2c
 8010042:	fb01 f303 	mul.w	r3, r1, r3
 8010046:	4413      	add	r3, r2
 8010048:	3354      	adds	r3, #84	; 0x54
 801004a:	781b      	ldrb	r3, [r3, #0]
 801004c:	73fb      	strb	r3, [r7, #15]
 801004e:	e008      	b.n	8010062 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8010050:	78fb      	ldrb	r3, [r7, #3]
 8010052:	68ba      	ldr	r2, [r7, #8]
 8010054:	212c      	movs	r1, #44	; 0x2c
 8010056:	fb01 f303 	mul.w	r3, r1, r3
 801005a:	4413      	add	r3, r2
 801005c:	3355      	adds	r3, #85	; 0x55
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8010062:	7bfb      	ldrb	r3, [r7, #15]
}
 8010064:	4618      	mov	r0, r3
 8010066:	3714      	adds	r7, #20
 8010068:	46bd      	mov	sp, r7
 801006a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006e:	4770      	bx	lr

08010070 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f7f2 f979 	bl	8002370 <HAL_Delay>
}
 801007e:	bf00      	nop
 8010080:	3708      	adds	r7, #8
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}
	...

08010088 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010088:	b480      	push	{r7}
 801008a:	b085      	sub	sp, #20
 801008c:	af00      	add	r7, sp, #0
 801008e:	4603      	mov	r3, r0
 8010090:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010092:	2300      	movs	r3, #0
 8010094:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010096:	79fb      	ldrb	r3, [r7, #7]
 8010098:	2b03      	cmp	r3, #3
 801009a:	d817      	bhi.n	80100cc <USBH_Get_USB_Status+0x44>
 801009c:	a201      	add	r2, pc, #4	; (adr r2, 80100a4 <USBH_Get_USB_Status+0x1c>)
 801009e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100a2:	bf00      	nop
 80100a4:	080100b5 	.word	0x080100b5
 80100a8:	080100bb 	.word	0x080100bb
 80100ac:	080100c1 	.word	0x080100c1
 80100b0:	080100c7 	.word	0x080100c7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80100b4:	2300      	movs	r3, #0
 80100b6:	73fb      	strb	r3, [r7, #15]
    break;
 80100b8:	e00b      	b.n	80100d2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80100ba:	2302      	movs	r3, #2
 80100bc:	73fb      	strb	r3, [r7, #15]
    break;
 80100be:	e008      	b.n	80100d2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80100c0:	2301      	movs	r3, #1
 80100c2:	73fb      	strb	r3, [r7, #15]
    break;
 80100c4:	e005      	b.n	80100d2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80100c6:	2302      	movs	r3, #2
 80100c8:	73fb      	strb	r3, [r7, #15]
    break;
 80100ca:	e002      	b.n	80100d2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80100cc:	2302      	movs	r3, #2
 80100ce:	73fb      	strb	r3, [r7, #15]
    break;
 80100d0:	bf00      	nop
  }
  return usb_status;
 80100d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80100d4:	4618      	mov	r0, r3
 80100d6:	3714      	adds	r7, #20
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr

080100e0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b084      	sub	sp, #16
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	4603      	mov	r3, r0
 80100e8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80100ea:	79fb      	ldrb	r3, [r7, #7]
 80100ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80100ee:	79fb      	ldrb	r3, [r7, #7]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d102      	bne.n	80100fa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80100f4:	2301      	movs	r3, #1
 80100f6:	73fb      	strb	r3, [r7, #15]
 80100f8:	e001      	b.n	80100fe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80100fa:	2300      	movs	r3, #0
 80100fc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80100fe:	7bfb      	ldrb	r3, [r7, #15]
 8010100:	461a      	mov	r2, r3
 8010102:	2101      	movs	r1, #1
 8010104:	4803      	ldr	r0, [pc, #12]	; (8010114 <MX_DriverVbusFS+0x34>)
 8010106:	f7f3 f931 	bl	800336c <HAL_GPIO_WritePin>
}
 801010a:	bf00      	nop
 801010c:	3710      	adds	r7, #16
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}
 8010112:	bf00      	nop
 8010114:	40020800 	.word	0x40020800

08010118 <malloc>:
 8010118:	4b02      	ldr	r3, [pc, #8]	; (8010124 <malloc+0xc>)
 801011a:	4601      	mov	r1, r0
 801011c:	6818      	ldr	r0, [r3, #0]
 801011e:	f000 b82b 	b.w	8010178 <_malloc_r>
 8010122:	bf00      	nop
 8010124:	200000e4 	.word	0x200000e4

08010128 <free>:
 8010128:	4b02      	ldr	r3, [pc, #8]	; (8010134 <free+0xc>)
 801012a:	4601      	mov	r1, r0
 801012c:	6818      	ldr	r0, [r3, #0]
 801012e:	f000 b92b 	b.w	8010388 <_free_r>
 8010132:	bf00      	nop
 8010134:	200000e4 	.word	0x200000e4

08010138 <sbrk_aligned>:
 8010138:	b570      	push	{r4, r5, r6, lr}
 801013a:	4e0e      	ldr	r6, [pc, #56]	; (8010174 <sbrk_aligned+0x3c>)
 801013c:	460c      	mov	r4, r1
 801013e:	6831      	ldr	r1, [r6, #0]
 8010140:	4605      	mov	r5, r0
 8010142:	b911      	cbnz	r1, 801014a <sbrk_aligned+0x12>
 8010144:	f000 f8d6 	bl	80102f4 <_sbrk_r>
 8010148:	6030      	str	r0, [r6, #0]
 801014a:	4621      	mov	r1, r4
 801014c:	4628      	mov	r0, r5
 801014e:	f000 f8d1 	bl	80102f4 <_sbrk_r>
 8010152:	1c43      	adds	r3, r0, #1
 8010154:	d00a      	beq.n	801016c <sbrk_aligned+0x34>
 8010156:	1cc4      	adds	r4, r0, #3
 8010158:	f024 0403 	bic.w	r4, r4, #3
 801015c:	42a0      	cmp	r0, r4
 801015e:	d007      	beq.n	8010170 <sbrk_aligned+0x38>
 8010160:	1a21      	subs	r1, r4, r0
 8010162:	4628      	mov	r0, r5
 8010164:	f000 f8c6 	bl	80102f4 <_sbrk_r>
 8010168:	3001      	adds	r0, #1
 801016a:	d101      	bne.n	8010170 <sbrk_aligned+0x38>
 801016c:	f04f 34ff 	mov.w	r4, #4294967295
 8010170:	4620      	mov	r0, r4
 8010172:	bd70      	pop	{r4, r5, r6, pc}
 8010174:	20002560 	.word	0x20002560

08010178 <_malloc_r>:
 8010178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801017c:	1ccd      	adds	r5, r1, #3
 801017e:	f025 0503 	bic.w	r5, r5, #3
 8010182:	3508      	adds	r5, #8
 8010184:	2d0c      	cmp	r5, #12
 8010186:	bf38      	it	cc
 8010188:	250c      	movcc	r5, #12
 801018a:	2d00      	cmp	r5, #0
 801018c:	4607      	mov	r7, r0
 801018e:	db01      	blt.n	8010194 <_malloc_r+0x1c>
 8010190:	42a9      	cmp	r1, r5
 8010192:	d905      	bls.n	80101a0 <_malloc_r+0x28>
 8010194:	230c      	movs	r3, #12
 8010196:	603b      	str	r3, [r7, #0]
 8010198:	2600      	movs	r6, #0
 801019a:	4630      	mov	r0, r6
 801019c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010274 <_malloc_r+0xfc>
 80101a4:	f000 f868 	bl	8010278 <__malloc_lock>
 80101a8:	f8d8 3000 	ldr.w	r3, [r8]
 80101ac:	461c      	mov	r4, r3
 80101ae:	bb5c      	cbnz	r4, 8010208 <_malloc_r+0x90>
 80101b0:	4629      	mov	r1, r5
 80101b2:	4638      	mov	r0, r7
 80101b4:	f7ff ffc0 	bl	8010138 <sbrk_aligned>
 80101b8:	1c43      	adds	r3, r0, #1
 80101ba:	4604      	mov	r4, r0
 80101bc:	d155      	bne.n	801026a <_malloc_r+0xf2>
 80101be:	f8d8 4000 	ldr.w	r4, [r8]
 80101c2:	4626      	mov	r6, r4
 80101c4:	2e00      	cmp	r6, #0
 80101c6:	d145      	bne.n	8010254 <_malloc_r+0xdc>
 80101c8:	2c00      	cmp	r4, #0
 80101ca:	d048      	beq.n	801025e <_malloc_r+0xe6>
 80101cc:	6823      	ldr	r3, [r4, #0]
 80101ce:	4631      	mov	r1, r6
 80101d0:	4638      	mov	r0, r7
 80101d2:	eb04 0903 	add.w	r9, r4, r3
 80101d6:	f000 f88d 	bl	80102f4 <_sbrk_r>
 80101da:	4581      	cmp	r9, r0
 80101dc:	d13f      	bne.n	801025e <_malloc_r+0xe6>
 80101de:	6821      	ldr	r1, [r4, #0]
 80101e0:	1a6d      	subs	r5, r5, r1
 80101e2:	4629      	mov	r1, r5
 80101e4:	4638      	mov	r0, r7
 80101e6:	f7ff ffa7 	bl	8010138 <sbrk_aligned>
 80101ea:	3001      	adds	r0, #1
 80101ec:	d037      	beq.n	801025e <_malloc_r+0xe6>
 80101ee:	6823      	ldr	r3, [r4, #0]
 80101f0:	442b      	add	r3, r5
 80101f2:	6023      	str	r3, [r4, #0]
 80101f4:	f8d8 3000 	ldr.w	r3, [r8]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d038      	beq.n	801026e <_malloc_r+0xf6>
 80101fc:	685a      	ldr	r2, [r3, #4]
 80101fe:	42a2      	cmp	r2, r4
 8010200:	d12b      	bne.n	801025a <_malloc_r+0xe2>
 8010202:	2200      	movs	r2, #0
 8010204:	605a      	str	r2, [r3, #4]
 8010206:	e00f      	b.n	8010228 <_malloc_r+0xb0>
 8010208:	6822      	ldr	r2, [r4, #0]
 801020a:	1b52      	subs	r2, r2, r5
 801020c:	d41f      	bmi.n	801024e <_malloc_r+0xd6>
 801020e:	2a0b      	cmp	r2, #11
 8010210:	d917      	bls.n	8010242 <_malloc_r+0xca>
 8010212:	1961      	adds	r1, r4, r5
 8010214:	42a3      	cmp	r3, r4
 8010216:	6025      	str	r5, [r4, #0]
 8010218:	bf18      	it	ne
 801021a:	6059      	strne	r1, [r3, #4]
 801021c:	6863      	ldr	r3, [r4, #4]
 801021e:	bf08      	it	eq
 8010220:	f8c8 1000 	streq.w	r1, [r8]
 8010224:	5162      	str	r2, [r4, r5]
 8010226:	604b      	str	r3, [r1, #4]
 8010228:	4638      	mov	r0, r7
 801022a:	f104 060b 	add.w	r6, r4, #11
 801022e:	f000 f829 	bl	8010284 <__malloc_unlock>
 8010232:	f026 0607 	bic.w	r6, r6, #7
 8010236:	1d23      	adds	r3, r4, #4
 8010238:	1af2      	subs	r2, r6, r3
 801023a:	d0ae      	beq.n	801019a <_malloc_r+0x22>
 801023c:	1b9b      	subs	r3, r3, r6
 801023e:	50a3      	str	r3, [r4, r2]
 8010240:	e7ab      	b.n	801019a <_malloc_r+0x22>
 8010242:	42a3      	cmp	r3, r4
 8010244:	6862      	ldr	r2, [r4, #4]
 8010246:	d1dd      	bne.n	8010204 <_malloc_r+0x8c>
 8010248:	f8c8 2000 	str.w	r2, [r8]
 801024c:	e7ec      	b.n	8010228 <_malloc_r+0xb0>
 801024e:	4623      	mov	r3, r4
 8010250:	6864      	ldr	r4, [r4, #4]
 8010252:	e7ac      	b.n	80101ae <_malloc_r+0x36>
 8010254:	4634      	mov	r4, r6
 8010256:	6876      	ldr	r6, [r6, #4]
 8010258:	e7b4      	b.n	80101c4 <_malloc_r+0x4c>
 801025a:	4613      	mov	r3, r2
 801025c:	e7cc      	b.n	80101f8 <_malloc_r+0x80>
 801025e:	230c      	movs	r3, #12
 8010260:	603b      	str	r3, [r7, #0]
 8010262:	4638      	mov	r0, r7
 8010264:	f000 f80e 	bl	8010284 <__malloc_unlock>
 8010268:	e797      	b.n	801019a <_malloc_r+0x22>
 801026a:	6025      	str	r5, [r4, #0]
 801026c:	e7dc      	b.n	8010228 <_malloc_r+0xb0>
 801026e:	605b      	str	r3, [r3, #4]
 8010270:	deff      	udf	#255	; 0xff
 8010272:	bf00      	nop
 8010274:	2000255c 	.word	0x2000255c

08010278 <__malloc_lock>:
 8010278:	4801      	ldr	r0, [pc, #4]	; (8010280 <__malloc_lock+0x8>)
 801027a:	f000 b875 	b.w	8010368 <__retarget_lock_acquire_recursive>
 801027e:	bf00      	nop
 8010280:	200026a0 	.word	0x200026a0

08010284 <__malloc_unlock>:
 8010284:	4801      	ldr	r0, [pc, #4]	; (801028c <__malloc_unlock+0x8>)
 8010286:	f000 b870 	b.w	801036a <__retarget_lock_release_recursive>
 801028a:	bf00      	nop
 801028c:	200026a0 	.word	0x200026a0

08010290 <memset>:
 8010290:	4402      	add	r2, r0
 8010292:	4603      	mov	r3, r0
 8010294:	4293      	cmp	r3, r2
 8010296:	d100      	bne.n	801029a <memset+0xa>
 8010298:	4770      	bx	lr
 801029a:	f803 1b01 	strb.w	r1, [r3], #1
 801029e:	e7f9      	b.n	8010294 <memset+0x4>

080102a0 <strncpy>:
 80102a0:	b510      	push	{r4, lr}
 80102a2:	3901      	subs	r1, #1
 80102a4:	4603      	mov	r3, r0
 80102a6:	b132      	cbz	r2, 80102b6 <strncpy+0x16>
 80102a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80102ac:	f803 4b01 	strb.w	r4, [r3], #1
 80102b0:	3a01      	subs	r2, #1
 80102b2:	2c00      	cmp	r4, #0
 80102b4:	d1f7      	bne.n	80102a6 <strncpy+0x6>
 80102b6:	441a      	add	r2, r3
 80102b8:	2100      	movs	r1, #0
 80102ba:	4293      	cmp	r3, r2
 80102bc:	d100      	bne.n	80102c0 <strncpy+0x20>
 80102be:	bd10      	pop	{r4, pc}
 80102c0:	f803 1b01 	strb.w	r1, [r3], #1
 80102c4:	e7f9      	b.n	80102ba <strncpy+0x1a>

080102c6 <strstr>:
 80102c6:	780a      	ldrb	r2, [r1, #0]
 80102c8:	b570      	push	{r4, r5, r6, lr}
 80102ca:	b96a      	cbnz	r2, 80102e8 <strstr+0x22>
 80102cc:	bd70      	pop	{r4, r5, r6, pc}
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d109      	bne.n	80102e6 <strstr+0x20>
 80102d2:	460c      	mov	r4, r1
 80102d4:	4605      	mov	r5, r0
 80102d6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d0f6      	beq.n	80102cc <strstr+0x6>
 80102de:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80102e2:	429e      	cmp	r6, r3
 80102e4:	d0f7      	beq.n	80102d6 <strstr+0x10>
 80102e6:	3001      	adds	r0, #1
 80102e8:	7803      	ldrb	r3, [r0, #0]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d1ef      	bne.n	80102ce <strstr+0x8>
 80102ee:	4618      	mov	r0, r3
 80102f0:	e7ec      	b.n	80102cc <strstr+0x6>
	...

080102f4 <_sbrk_r>:
 80102f4:	b538      	push	{r3, r4, r5, lr}
 80102f6:	4d06      	ldr	r5, [pc, #24]	; (8010310 <_sbrk_r+0x1c>)
 80102f8:	2300      	movs	r3, #0
 80102fa:	4604      	mov	r4, r0
 80102fc:	4608      	mov	r0, r1
 80102fe:	602b      	str	r3, [r5, #0]
 8010300:	f7f1 fd90 	bl	8001e24 <_sbrk>
 8010304:	1c43      	adds	r3, r0, #1
 8010306:	d102      	bne.n	801030e <_sbrk_r+0x1a>
 8010308:	682b      	ldr	r3, [r5, #0]
 801030a:	b103      	cbz	r3, 801030e <_sbrk_r+0x1a>
 801030c:	6023      	str	r3, [r4, #0]
 801030e:	bd38      	pop	{r3, r4, r5, pc}
 8010310:	2000269c 	.word	0x2000269c

08010314 <__errno>:
 8010314:	4b01      	ldr	r3, [pc, #4]	; (801031c <__errno+0x8>)
 8010316:	6818      	ldr	r0, [r3, #0]
 8010318:	4770      	bx	lr
 801031a:	bf00      	nop
 801031c:	200000e4 	.word	0x200000e4

08010320 <__libc_init_array>:
 8010320:	b570      	push	{r4, r5, r6, lr}
 8010322:	4d0d      	ldr	r5, [pc, #52]	; (8010358 <__libc_init_array+0x38>)
 8010324:	4c0d      	ldr	r4, [pc, #52]	; (801035c <__libc_init_array+0x3c>)
 8010326:	1b64      	subs	r4, r4, r5
 8010328:	10a4      	asrs	r4, r4, #2
 801032a:	2600      	movs	r6, #0
 801032c:	42a6      	cmp	r6, r4
 801032e:	d109      	bne.n	8010344 <__libc_init_array+0x24>
 8010330:	4d0b      	ldr	r5, [pc, #44]	; (8010360 <__libc_init_array+0x40>)
 8010332:	4c0c      	ldr	r4, [pc, #48]	; (8010364 <__libc_init_array+0x44>)
 8010334:	f000 f874 	bl	8010420 <_init>
 8010338:	1b64      	subs	r4, r4, r5
 801033a:	10a4      	asrs	r4, r4, #2
 801033c:	2600      	movs	r6, #0
 801033e:	42a6      	cmp	r6, r4
 8010340:	d105      	bne.n	801034e <__libc_init_array+0x2e>
 8010342:	bd70      	pop	{r4, r5, r6, pc}
 8010344:	f855 3b04 	ldr.w	r3, [r5], #4
 8010348:	4798      	blx	r3
 801034a:	3601      	adds	r6, #1
 801034c:	e7ee      	b.n	801032c <__libc_init_array+0xc>
 801034e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010352:	4798      	blx	r3
 8010354:	3601      	adds	r6, #1
 8010356:	e7f2      	b.n	801033e <__libc_init_array+0x1e>
 8010358:	08010968 	.word	0x08010968
 801035c:	08010968 	.word	0x08010968
 8010360:	08010968 	.word	0x08010968
 8010364:	0801096c 	.word	0x0801096c

08010368 <__retarget_lock_acquire_recursive>:
 8010368:	4770      	bx	lr

0801036a <__retarget_lock_release_recursive>:
 801036a:	4770      	bx	lr

0801036c <memcpy>:
 801036c:	440a      	add	r2, r1
 801036e:	4291      	cmp	r1, r2
 8010370:	f100 33ff 	add.w	r3, r0, #4294967295
 8010374:	d100      	bne.n	8010378 <memcpy+0xc>
 8010376:	4770      	bx	lr
 8010378:	b510      	push	{r4, lr}
 801037a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801037e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010382:	4291      	cmp	r1, r2
 8010384:	d1f9      	bne.n	801037a <memcpy+0xe>
 8010386:	bd10      	pop	{r4, pc}

08010388 <_free_r>:
 8010388:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801038a:	2900      	cmp	r1, #0
 801038c:	d044      	beq.n	8010418 <_free_r+0x90>
 801038e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010392:	9001      	str	r0, [sp, #4]
 8010394:	2b00      	cmp	r3, #0
 8010396:	f1a1 0404 	sub.w	r4, r1, #4
 801039a:	bfb8      	it	lt
 801039c:	18e4      	addlt	r4, r4, r3
 801039e:	f7ff ff6b 	bl	8010278 <__malloc_lock>
 80103a2:	4a1e      	ldr	r2, [pc, #120]	; (801041c <_free_r+0x94>)
 80103a4:	9801      	ldr	r0, [sp, #4]
 80103a6:	6813      	ldr	r3, [r2, #0]
 80103a8:	b933      	cbnz	r3, 80103b8 <_free_r+0x30>
 80103aa:	6063      	str	r3, [r4, #4]
 80103ac:	6014      	str	r4, [r2, #0]
 80103ae:	b003      	add	sp, #12
 80103b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80103b4:	f7ff bf66 	b.w	8010284 <__malloc_unlock>
 80103b8:	42a3      	cmp	r3, r4
 80103ba:	d908      	bls.n	80103ce <_free_r+0x46>
 80103bc:	6825      	ldr	r5, [r4, #0]
 80103be:	1961      	adds	r1, r4, r5
 80103c0:	428b      	cmp	r3, r1
 80103c2:	bf01      	itttt	eq
 80103c4:	6819      	ldreq	r1, [r3, #0]
 80103c6:	685b      	ldreq	r3, [r3, #4]
 80103c8:	1949      	addeq	r1, r1, r5
 80103ca:	6021      	streq	r1, [r4, #0]
 80103cc:	e7ed      	b.n	80103aa <_free_r+0x22>
 80103ce:	461a      	mov	r2, r3
 80103d0:	685b      	ldr	r3, [r3, #4]
 80103d2:	b10b      	cbz	r3, 80103d8 <_free_r+0x50>
 80103d4:	42a3      	cmp	r3, r4
 80103d6:	d9fa      	bls.n	80103ce <_free_r+0x46>
 80103d8:	6811      	ldr	r1, [r2, #0]
 80103da:	1855      	adds	r5, r2, r1
 80103dc:	42a5      	cmp	r5, r4
 80103de:	d10b      	bne.n	80103f8 <_free_r+0x70>
 80103e0:	6824      	ldr	r4, [r4, #0]
 80103e2:	4421      	add	r1, r4
 80103e4:	1854      	adds	r4, r2, r1
 80103e6:	42a3      	cmp	r3, r4
 80103e8:	6011      	str	r1, [r2, #0]
 80103ea:	d1e0      	bne.n	80103ae <_free_r+0x26>
 80103ec:	681c      	ldr	r4, [r3, #0]
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	6053      	str	r3, [r2, #4]
 80103f2:	440c      	add	r4, r1
 80103f4:	6014      	str	r4, [r2, #0]
 80103f6:	e7da      	b.n	80103ae <_free_r+0x26>
 80103f8:	d902      	bls.n	8010400 <_free_r+0x78>
 80103fa:	230c      	movs	r3, #12
 80103fc:	6003      	str	r3, [r0, #0]
 80103fe:	e7d6      	b.n	80103ae <_free_r+0x26>
 8010400:	6825      	ldr	r5, [r4, #0]
 8010402:	1961      	adds	r1, r4, r5
 8010404:	428b      	cmp	r3, r1
 8010406:	bf04      	itt	eq
 8010408:	6819      	ldreq	r1, [r3, #0]
 801040a:	685b      	ldreq	r3, [r3, #4]
 801040c:	6063      	str	r3, [r4, #4]
 801040e:	bf04      	itt	eq
 8010410:	1949      	addeq	r1, r1, r5
 8010412:	6021      	streq	r1, [r4, #0]
 8010414:	6054      	str	r4, [r2, #4]
 8010416:	e7ca      	b.n	80103ae <_free_r+0x26>
 8010418:	b003      	add	sp, #12
 801041a:	bd30      	pop	{r4, r5, pc}
 801041c:	2000255c 	.word	0x2000255c

08010420 <_init>:
 8010420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010422:	bf00      	nop
 8010424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010426:	bc08      	pop	{r3}
 8010428:	469e      	mov	lr, r3
 801042a:	4770      	bx	lr

0801042c <_fini>:
 801042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801042e:	bf00      	nop
 8010430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010432:	bc08      	pop	{r3}
 8010434:	469e      	mov	lr, r3
 8010436:	4770      	bx	lr
