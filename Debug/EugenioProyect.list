
EugenioProyect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000110cc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b04  08011264  08011264  00012264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d68  08012d68  000140fc  2**0
                  CONTENTS
  4 .ARM          00000008  08012d68  08012d68  00013d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d70  08012d70  000140fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012d70  08012d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012d74  08012d74  00013d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08012d78  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a18  200000fc  08012e74  000140fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002b14  08012e74  00014b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000140fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000241d5  00000000  00000000  0001412c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000066fb  00000000  00000000  00038301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  0003ea00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001390  00000000  00000000  000403c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e45c  00000000  00000000  00041758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b809  00000000  00000000  0005fbb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000928ea  00000000  00000000  0008b3bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011dca7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069d8  00000000  00000000  0011dcec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001246c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0801124c 	.word	0x0801124c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	0801124c 	.word	0x0801124c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	603a      	str	r2, [r7, #0]
 800050e:	80fb      	strh	r3, [r7, #6]
 8000510:	460b      	mov	r3, r1
 8000512:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 8000514:	2300      	movs	r3, #0
 8000516:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8000518:	2200      	movs	r2, #0
 800051a:	6839      	ldr	r1, [r7, #0]
 800051c:	481c      	ldr	r0, [pc, #112]	@ (8000590 <AUDIO_OUT_Init+0x8c>)
 800051e:	f000 f8f9 	bl	8000714 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 8000522:	4b1b      	ldr	r3, [pc, #108]	@ (8000590 <AUDIO_OUT_Init+0x8c>)
 8000524:	4a1b      	ldr	r2, [pc, #108]	@ (8000594 <AUDIO_OUT_Init+0x90>)
 8000526:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 8000528:	4819      	ldr	r0, [pc, #100]	@ (8000590 <AUDIO_OUT_Init+0x8c>)
 800052a:	f006 ff47 	bl	80073bc <HAL_I2S_GetState>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d103      	bne.n	800053c <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8000534:	2100      	movs	r1, #0
 8000536:	4816      	ldr	r0, [pc, #88]	@ (8000590 <AUDIO_OUT_Init+0x8c>)
 8000538:	f000 f94a 	bl	80007d0 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 800053c:	6838      	ldr	r0, [r7, #0]
 800053e:	f000 fa0f 	bl	8000960 <I2S3_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 8000548:	2301      	movs	r3, #1
 800054a:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d10e      	bne.n	8000570 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8000552:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <AUDIO_OUT_Init+0x94>)
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	2094      	movs	r0, #148	@ 0x94
 8000558:	4798      	blx	r3
 800055a:	4603      	mov	r3, r0
 800055c:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8000560:	2be0      	cmp	r3, #224	@ 0xe0
 8000562:	d103      	bne.n	800056c <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 8000564:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <AUDIO_OUT_Init+0x98>)
 8000566:	4a0c      	ldr	r2, [pc, #48]	@ (8000598 <AUDIO_OUT_Init+0x94>)
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	e001      	b.n	8000570 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 800056c:	2301      	movs	r3, #1
 800056e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d107      	bne.n	8000586 <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8000576:	4b09      	ldr	r3, [pc, #36]	@ (800059c <AUDIO_OUT_Init+0x98>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	681c      	ldr	r4, [r3, #0]
 800057c:	797a      	ldrb	r2, [r7, #5]
 800057e:	88f9      	ldrh	r1, [r7, #6]
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	2094      	movs	r0, #148	@ 0x94
 8000584:	47a0      	blx	r4
  }
  
  return ret;
 8000586:	7bfb      	ldrb	r3, [r7, #15]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3714      	adds	r7, #20
 800058c:	46bd      	mov	sp, r7
 800058e:	bd90      	pop	{r4, r7, pc}
 8000590:	2000011c 	.word	0x2000011c
 8000594:	40003c00 	.word	0x40003c00
 8000598:	20000004 	.word	0x20000004
 800059c:	20000118 	.word	0x20000118

080005a0 <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 80005aa:	4b10      	ldr	r3, [pc, #64]	@ (80005ec <AUDIO_OUT_Play+0x4c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	b292      	uxth	r2, r2
 80005b4:	6879      	ldr	r1, [r7, #4]
 80005b6:	2094      	movs	r0, #148	@ 0x94
 80005b8:	4798      	blx	r3
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 80005c0:	2301      	movs	r3, #1
 80005c2:	e00f      	b.n	80005e4 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80005ca:	d203      	bcs.n	80005d4 <AUDIO_OUT_Play+0x34>
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	085b      	lsrs	r3, r3, #1
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	e001      	b.n	80005d8 <AUDIO_OUT_Play+0x38>
 80005d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005d8:	461a      	mov	r2, r3
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	4804      	ldr	r0, [pc, #16]	@ (80005f0 <AUDIO_OUT_Play+0x50>)
 80005de:	f006 fb6b 	bl	8006cb8 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005e2:	2300      	movs	r3, #0
  }
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000118 	.word	0x20000118
 80005f0:	2000011c 	.word	0x2000011c

080005f4 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 80005f8:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <AUDIO_OUT_Pause+0x24>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	691b      	ldr	r3, [r3, #16]
 80005fe:	2094      	movs	r0, #148	@ 0x94
 8000600:	4798      	blx	r3
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 8000608:	2301      	movs	r3, #1
 800060a:	e003      	b.n	8000614 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 800060c:	4803      	ldr	r0, [pc, #12]	@ (800061c <AUDIO_OUT_Pause+0x28>)
 800060e:	f006 fbfb 	bl	8006e08 <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000612:	2300      	movs	r3, #0
  }
}
 8000614:	4618      	mov	r0, r3
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000118 	.word	0x20000118
 800061c:	2000011c 	.word	0x2000011c

08000620 <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8000624:	4b07      	ldr	r3, [pc, #28]	@ (8000644 <AUDIO_OUT_Resume+0x24>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	2094      	movs	r0, #148	@ 0x94
 800062c:	4798      	blx	r3
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 8000634:	2301      	movs	r3, #1
 8000636:	e003      	b.n	8000640 <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 8000638:	4803      	ldr	r0, [pc, #12]	@ (8000648 <AUDIO_OUT_Resume+0x28>)
 800063a:	f006 fc47 	bl	8006ecc <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800063e:	2300      	movs	r3, #0
  }
}
 8000640:	4618      	mov	r0, r3
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000118 	.word	0x20000118
 8000648:	2000011c 	.word	0x2000011c

0800064c <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8000654:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <AUDIO_OUT_Stop+0x44>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	2094      	movs	r0, #148	@ 0x94
 800065e:	4798      	blx	r3
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <AUDIO_OUT_Stop+0x1e>
  {
    return AUDIO_ERROR;
 8000666:	2301      	movs	r3, #1
 8000668:	e00e      	b.n	8000688 <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d107      	bne.n	8000680 <AUDIO_OUT_Stop+0x34>
    { 
      /* Wait at least 1ms */
      HAL_Delay(2);
 8000670:	2002      	movs	r0, #2
 8000672:	f002 fafb 	bl	8002c6c <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2110      	movs	r1, #16
 800067a:	4806      	ldr	r0, [pc, #24]	@ (8000694 <AUDIO_OUT_Stop+0x48>)
 800067c:	f003 faf4 	bl	8003c68 <HAL_GPIO_WritePin>
    }
    
    /* Call DMA Stop to disable DMA stream before stopping codec */
    HAL_I2S_DMAStop(&hAudioOutI2s);
 8000680:	4805      	ldr	r0, [pc, #20]	@ (8000698 <AUDIO_OUT_Stop+0x4c>)
 8000682:	f006 fcb7 	bl	8006ff4 <HAL_I2S_DMAStop>

    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000686:	2300      	movs	r3, #0
  }
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000118 	.word	0x20000118
 8000694:	40020c00 	.word	0x40020c00
 8000698:	2000011c 	.word	0x2000011c

0800069c <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 80006a6:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <AUDIO_OUT_SetVolume+0x2c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	6a1b      	ldr	r3, [r3, #32]
 80006ac:	79fa      	ldrb	r2, [r7, #7]
 80006ae:	4611      	mov	r1, r2
 80006b0:	2094      	movs	r0, #148	@ 0x94
 80006b2:	4798      	blx	r3
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e000      	b.n	80006c0 <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80006be:	2300      	movs	r3, #0
  }
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000118 	.word	0x20000118

080006cc <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a04      	ldr	r2, [pc, #16]	@ (80006ec <HAL_I2S_TxCpltCallback+0x20>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d101      	bne.n	80006e2 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 80006de:	f002 fa01 	bl	8002ae4 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40003c00 	.word	0x40003c00

080006f0 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a04      	ldr	r2, [pc, #16]	@ (8000710 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d101      	bne.n	8000706 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 8000702:	f002 fa03 	bl	8002b0c <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40003c00 	.word	0x40003c00

08000714 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 8000714:	b580      	push	{r7, lr}
 8000716:	b08c      	sub	sp, #48	@ 0x30
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000720:	2300      	movs	r3, #0
 8000722:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000726:	23ff      	movs	r3, #255	@ 0xff
 8000728:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  
  for(index = 0; index < 8; index++)
 800072c:	2300      	movs	r3, #0
 800072e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000732:	e010      	b.n	8000756 <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 8000734:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000738:	4a22      	ldr	r2, [pc, #136]	@ (80007c4 <AUDIO_OUT_ClockConfig+0xb0>)
 800073a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	429a      	cmp	r2, r3
 8000742:	d103      	bne.n	800074c <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 8000744:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000748:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  for(index = 0; index < 8; index++)
 800074c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000750:	3301      	adds	r3, #1
 8000752:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000756:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800075a:	2b07      	cmp	r3, #7
 800075c:	d9ea      	bls.n	8000734 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4618      	mov	r0, r3
 8000764:	f007 ff7c 	bl	8008660 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000768:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800076c:	f003 0307 	and.w	r3, r3, #7
 8000770:	2b00      	cmp	r3, #0
 8000772:	d115      	bne.n	80007a0 <AUDIO_OUT_ClockConfig+0x8c>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000774:	2301      	movs	r3, #1
 8000776:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8000778:	2308      	movs	r3, #8
 800077a:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 800077c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000780:	4a11      	ldr	r2, [pc, #68]	@ (80007c8 <AUDIO_OUT_ClockConfig+0xb4>)
 8000782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000786:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000788:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800078c:	4a0f      	ldr	r2, [pc, #60]	@ (80007cc <AUDIO_OUT_ClockConfig+0xb8>)
 800078e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000792:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4618      	mov	r0, r3
 800079a:	f007 fe71 	bl	8008480 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 800079e:	e00d      	b.n	80007bc <AUDIO_OUT_ClockConfig+0xa8>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007a0:	2301      	movs	r3, #1
 80007a2:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 80007a4:	2308      	movs	r3, #8
 80007a6:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80007a8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80007ac:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80007ae:	2303      	movs	r3, #3
 80007b0:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4618      	mov	r0, r3
 80007b8:	f007 fe62 	bl	8008480 <HAL_RCCEx_PeriphCLKConfig>
}
 80007bc:	bf00      	nop
 80007be:	3730      	adds	r7, #48	@ 0x30
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	080113cc 	.word	0x080113cc
 80007c8:	080113ec 	.word	0x080113ec
 80007cc:	0801140c 	.word	0x0801140c

080007d0 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	4b56      	ldr	r3, [pc, #344]	@ (8000938 <AUDIO_OUT_MspInit+0x168>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e2:	4a55      	ldr	r2, [pc, #340]	@ (8000938 <AUDIO_OUT_MspInit+0x168>)
 80007e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ea:	4b53      	ldr	r3, [pc, #332]	@ (8000938 <AUDIO_OUT_MspInit+0x168>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	4b4f      	ldr	r3, [pc, #316]	@ (8000938 <AUDIO_OUT_MspInit+0x168>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a4e      	ldr	r2, [pc, #312]	@ (8000938 <AUDIO_OUT_MspInit+0x168>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b4c      	ldr	r3, [pc, #304]	@ (8000938 <AUDIO_OUT_MspInit+0x168>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b48      	ldr	r3, [pc, #288]	@ (8000938 <AUDIO_OUT_MspInit+0x168>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a47      	ldr	r2, [pc, #284]	@ (8000938 <AUDIO_OUT_MspInit+0x168>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b45      	ldr	r3, [pc, #276]	@ (8000938 <AUDIO_OUT_MspInit+0x168>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 800082e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 800083c:	2302      	movs	r3, #2
 800083e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8000840:	2306      	movs	r3, #6
 8000842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	483c      	ldr	r0, [pc, #240]	@ (800093c <AUDIO_OUT_MspInit+0x16c>)
 800084c:	f002 ffa4 	bl	8003798 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8000850:	2310      	movs	r3, #16
 8000852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	4839      	ldr	r0, [pc, #228]	@ (8000940 <AUDIO_OUT_MspInit+0x170>)
 800085c:	f002 ff9c 	bl	8003798 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	4b34      	ldr	r3, [pc, #208]	@ (8000938 <AUDIO_OUT_MspInit+0x168>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000868:	4a33      	ldr	r2, [pc, #204]	@ (8000938 <AUDIO_OUT_MspInit+0x168>)
 800086a:	f043 0304 	orr.w	r3, r3, #4
 800086e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000870:	4b31      	ldr	r3, [pc, #196]	@ (8000938 <AUDIO_OUT_MspInit+0x168>)
 8000872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000874:	f003 0304 	and.w	r3, r3, #4
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 800087c:	2380      	movs	r3, #128	@ 0x80
 800087e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	482d      	ldr	r0, [pc, #180]	@ (800093c <AUDIO_OUT_MspInit+0x16c>)
 8000888:	f002 ff86 	bl	8003798 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	4b29      	ldr	r3, [pc, #164]	@ (8000938 <AUDIO_OUT_MspInit+0x168>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000894:	4a28      	ldr	r2, [pc, #160]	@ (8000938 <AUDIO_OUT_MspInit+0x168>)
 8000896:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800089a:	6313      	str	r3, [r2, #48]	@ 0x30
 800089c:	4b26      	ldr	r3, [pc, #152]	@ (8000938 <AUDIO_OUT_MspInit+0x168>)
 800089e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a25      	ldr	r2, [pc, #148]	@ (8000944 <AUDIO_OUT_MspInit+0x174>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d136      	bne.n	8000920 <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 80008b2:	4b25      	ldr	r3, [pc, #148]	@ (8000948 <AUDIO_OUT_MspInit+0x178>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80008b8:	4b23      	ldr	r3, [pc, #140]	@ (8000948 <AUDIO_OUT_MspInit+0x178>)
 80008ba:	2240      	movs	r2, #64	@ 0x40
 80008bc:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80008be:	4b22      	ldr	r3, [pc, #136]	@ (8000948 <AUDIO_OUT_MspInit+0x178>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 80008c4:	4b20      	ldr	r3, [pc, #128]	@ (8000948 <AUDIO_OUT_MspInit+0x178>)
 80008c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008ca:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 80008cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <AUDIO_OUT_MspInit+0x178>)
 80008ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008d2:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 80008d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000948 <AUDIO_OUT_MspInit+0x178>)
 80008d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008da:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <AUDIO_OUT_MspInit+0x178>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 80008e2:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <AUDIO_OUT_MspInit+0x178>)
 80008e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80008e8:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80008ea:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <AUDIO_OUT_MspInit+0x178>)
 80008ec:	2204      	movs	r2, #4
 80008ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80008f0:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <AUDIO_OUT_MspInit+0x178>)
 80008f2:	2203      	movs	r2, #3
 80008f4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80008f6:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <AUDIO_OUT_MspInit+0x178>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <AUDIO_OUT_MspInit+0x178>)
 80008fe:	2200      	movs	r2, #0
 8000900:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 8000902:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <AUDIO_OUT_MspInit+0x178>)
 8000904:	4a11      	ldr	r2, [pc, #68]	@ (800094c <AUDIO_OUT_MspInit+0x17c>)
 8000906:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a0f      	ldr	r2, [pc, #60]	@ (8000948 <AUDIO_OUT_MspInit+0x178>)
 800090c:	639a      	str	r2, [r3, #56]	@ 0x38
 800090e:	4a0e      	ldr	r2, [pc, #56]	@ (8000948 <AUDIO_OUT_MspInit+0x178>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 8000914:	480c      	ldr	r0, [pc, #48]	@ (8000948 <AUDIO_OUT_MspInit+0x178>)
 8000916:	f002 fb8d 	bl	8003034 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 800091a:	480b      	ldr	r0, [pc, #44]	@ (8000948 <AUDIO_OUT_MspInit+0x178>)
 800091c:	f002 fadc 	bl	8002ed8 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	210e      	movs	r1, #14
 8000924:	202f      	movs	r0, #47	@ 0x2f
 8000926:	f002 faa0 	bl	8002e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 800092a:	202f      	movs	r0, #47	@ 0x2f
 800092c:	f002 fab9 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
}
 8000930:	bf00      	nop
 8000932:	3730      	adds	r7, #48	@ 0x30
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800
 800093c:	40020800 	.word	0x40020800
 8000940:	40020000 	.word	0x40020000
 8000944:	40003c00 	.word	0x40003c00
 8000948:	20000164 	.word	0x20000164
 800094c:	400260b8 	.word	0x400260b8

08000950 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
	...

08000960 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8000968:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <I2S3_Init+0x68>)
 800096a:	4a18      	ldr	r2, [pc, #96]	@ (80009cc <I2S3_Init+0x6c>)
 800096c:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 800096e:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <I2S3_Init+0x68>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	69da      	ldr	r2, [r3, #28]
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <I2S3_Init+0x68>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800097c:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 800097e:	4a12      	ldr	r2, [pc, #72]	@ (80009c8 <I2S3_Init+0x68>)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000984:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <I2S3_Init+0x68>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 800098a:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <I2S3_Init+0x68>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000990:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <I2S3_Init+0x68>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000996:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <I2S3_Init+0x68>)
 8000998:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800099c:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 800099e:	4b0a      	ldr	r3, [pc, #40]	@ (80009c8 <I2S3_Init+0x68>)
 80009a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009a4:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 80009a6:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <I2S3_Init+0x68>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 80009ac:	4806      	ldr	r0, [pc, #24]	@ (80009c8 <I2S3_Init+0x68>)
 80009ae:	f006 f843 	bl	8006a38 <HAL_I2S_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 80009b8:	2301      	movs	r3, #1
 80009ba:	e000      	b.n	80009be <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 80009bc:	2300      	movs	r3, #0
  }
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000011c 	.word	0x2000011c
 80009cc:	40003c00 	.word	0x40003c00

080009d0 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a04      	ldr	r2, [pc, #16]	@ (80009f0 <HAL_I2S_ErrorCallback+0x20>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d101      	bne.n	80009e6 <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 80009e2:	f7ff ffb5 	bl	8000950 <AUDIO_OUT_Error_CallBack>
  }
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40003c00 	.word	0x40003c00

080009f4 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80009f8:	4814      	ldr	r0, [pc, #80]	@ (8000a4c <I2Cx_Init+0x58>)
 80009fa:	f005 fc31 	bl	8006260 <HAL_I2C_GetState>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d121      	bne.n	8000a48 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 8000a04:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <I2Cx_Init+0x58>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	@ (8000a50 <I2Cx_Init+0x5c>)
 8000a08:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <I2Cx_Init+0x58>)
 8000a0c:	2243      	movs	r2, #67	@ 0x43
 8000a0e:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8000a10:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <I2Cx_Init+0x58>)
 8000a12:	4a10      	ldr	r2, [pc, #64]	@ (8000a54 <I2Cx_Init+0x60>)
 8000a14:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a16:	4b0d      	ldr	r3, [pc, #52]	@ (8000a4c <I2Cx_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <I2Cx_Init+0x58>)
 8000a1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a22:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <I2Cx_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <I2Cx_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <I2Cx_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000a36:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <I2Cx_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000a3c:	4803      	ldr	r0, [pc, #12]	@ (8000a4c <I2Cx_Init+0x58>)
 8000a3e:	f000 f86b 	bl	8000b18 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000a42:	4802      	ldr	r0, [pc, #8]	@ (8000a4c <I2Cx_Init+0x58>)
 8000a44:	f004 fd4c 	bl	80054e0 <HAL_I2C_Init>
  }
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200001c4 	.word	0x200001c4
 8000a50:	40005400 	.word	0x40005400
 8000a54:	000186a0 	.word	0x000186a0

08000a58 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af04      	add	r7, sp, #16
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80fb      	strh	r3, [r7, #6]
 8000a62:	460b      	mov	r3, r1
 8000a64:	717b      	strb	r3, [r7, #5]
 8000a66:	4613      	mov	r3, r2
 8000a68:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000a6e:	797b      	ldrb	r3, [r7, #5]
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <I2Cx_WriteData+0x48>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	88f9      	ldrh	r1, [r7, #6]
 8000a78:	9302      	str	r3, [sp, #8]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	9301      	str	r3, [sp, #4]
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2301      	movs	r3, #1
 8000a84:	4807      	ldr	r0, [pc, #28]	@ (8000aa4 <I2Cx_WriteData+0x4c>)
 8000a86:	f004 ff9d 	bl	80059c4 <HAL_I2C_Mem_Write>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000a94:	f000 f834 	bl	8000b00 <I2Cx_Error>
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	200001c4 	.word	0x200001c4

08000aa8 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af04      	add	r7, sp, #16
 8000aae:	4603      	mov	r3, r0
 8000ab0:	460a      	mov	r2, r1
 8000ab2:	80fb      	strh	r3, [r7, #6]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000ac0:	797b      	ldrb	r3, [r7, #5]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <I2Cx_ReadData+0x50>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	88f9      	ldrh	r1, [r7, #6]
 8000aca:	9302      	str	r3, [sp, #8]
 8000acc:	2301      	movs	r3, #1
 8000ace:	9301      	str	r3, [sp, #4]
 8000ad0:	f107 030e 	add.w	r3, r7, #14
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	4808      	ldr	r0, [pc, #32]	@ (8000afc <I2Cx_ReadData+0x54>)
 8000ada:	f005 f86d 	bl	8005bb8 <HAL_I2C_Mem_Read>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000ae8:	f000 f80a 	bl	8000b00 <I2Cx_Error>
  }
  return value;
 8000aec:	7bbb      	ldrb	r3, [r7, #14]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000000 	.word	0x20000000
 8000afc:	200001c4 	.word	0x200001c4

08000b00 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000b04:	4803      	ldr	r0, [pc, #12]	@ (8000b14 <I2Cx_Error+0x14>)
 8000b06:	f004 fe2f 	bl	8005768 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000b0a:	f7ff ff73 	bl	80009f4 <I2Cx_Init>
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200001c4 	.word	0x200001c4

08000b18 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	@ 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	4b25      	ldr	r3, [pc, #148]	@ (8000bbc <I2Cx_MspInit+0xa4>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b28:	4a24      	ldr	r2, [pc, #144]	@ (8000bbc <I2Cx_MspInit+0xa4>)
 8000b2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b30:	4b22      	ldr	r3, [pc, #136]	@ (8000bbc <I2Cx_MspInit+0xa4>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	4b1e      	ldr	r3, [pc, #120]	@ (8000bbc <I2Cx_MspInit+0xa4>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b44:	4a1d      	ldr	r2, [pc, #116]	@ (8000bbc <I2Cx_MspInit+0xa4>)
 8000b46:	f043 0302 	orr.w	r3, r3, #2
 8000b4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bbc <I2Cx_MspInit+0xa4>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b50:	f003 0302 	and.w	r3, r3, #2
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000b58:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000b5e:	2312      	movs	r3, #18
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000b66:	2302      	movs	r3, #2
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4812      	ldr	r0, [pc, #72]	@ (8000bc0 <I2Cx_MspInit+0xa8>)
 8000b76:	f002 fe0f 	bl	8003798 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000b7a:	4b10      	ldr	r3, [pc, #64]	@ (8000bbc <I2Cx_MspInit+0xa4>)
 8000b7c:	6a1b      	ldr	r3, [r3, #32]
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bbc <I2Cx_MspInit+0xa4>)
 8000b80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b84:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000b86:	4b0d      	ldr	r3, [pc, #52]	@ (8000bbc <I2Cx_MspInit+0xa4>)
 8000b88:	6a1b      	ldr	r3, [r3, #32]
 8000b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8000bbc <I2Cx_MspInit+0xa4>)
 8000b8c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000b90:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	210f      	movs	r1, #15
 8000b96:	201f      	movs	r0, #31
 8000b98:	f002 f967 	bl	8002e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000b9c:	201f      	movs	r0, #31
 8000b9e:	f002 f980 	bl	8002ea2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	210f      	movs	r1, #15
 8000ba6:	2020      	movs	r0, #32
 8000ba8:	f002 f95f 	bl	8002e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000bac:	2020      	movs	r0, #32
 8000bae:	f002 f978 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	@ 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020400 	.word	0x40020400

08000bc4 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <AUDIO_IO_Init+0x68>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a16      	ldr	r2, [pc, #88]	@ (8000c2c <AUDIO_IO_Init+0x68>)
 8000bd4:	f043 0308 	orr.w	r3, r3, #8
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <AUDIO_IO_Init+0x68>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0308 	and.w	r3, r3, #8
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000be6:	2310      	movs	r3, #16
 8000be8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480d      	ldr	r0, [pc, #52]	@ (8000c30 <AUDIO_IO_Init+0x6c>)
 8000bfc:	f002 fdcc 	bl	8003798 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000c00:	f7ff fef8 	bl	80009f4 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000c04:	2200      	movs	r2, #0
 8000c06:	2110      	movs	r1, #16
 8000c08:	4809      	ldr	r0, [pc, #36]	@ (8000c30 <AUDIO_IO_Init+0x6c>)
 8000c0a:	f003 f82d 	bl	8003c68 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000c0e:	2005      	movs	r0, #5
 8000c10:	f002 f82c 	bl	8002c6c <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000c14:	2201      	movs	r2, #1
 8000c16:	2110      	movs	r1, #16
 8000c18:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <AUDIO_IO_Init+0x6c>)
 8000c1a:	f003 f825 	bl	8003c68 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000c1e:	2005      	movs	r0, #5
 8000c20:	f002 f824 	bl	8002c6c <HAL_Delay>
}
 8000c24:	bf00      	nop
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020c00 	.word	0x40020c00

08000c34 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	71fb      	strb	r3, [r7, #7]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	71bb      	strb	r3, [r7, #6]
 8000c50:	4613      	mov	r3, r2
 8000c52:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	797a      	ldrb	r2, [r7, #5]
 8000c5a:	79b9      	ldrb	r1, [r7, #6]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fefb 	bl	8000a58 <I2Cx_WriteData>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	460a      	mov	r2, r1
 8000c74:	71fb      	strb	r3, [r7, #7]
 8000c76:	4613      	mov	r3, r2
 8000c78:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	79ba      	ldrb	r2, [r7, #6]
 8000c80:	4611      	mov	r1, r2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff ff10 	bl	8000aa8 <I2Cx_ReadData>
 8000c88:	4603      	mov	r3, r0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <AUDIO_StorageParse>:

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0d6      	sub	sp, #344	@ 0x158
 8000c98:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USBHPath);
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	4946      	ldr	r1, [pc, #280]	@ (8000dbc <AUDIO_StorageParse+0x128>)
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f00f fc1d 	bl	80104e4 <f_opendir>
 8000caa:	4603      	mov	r3, r0
 8000cac:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
  FileList.ptr = 0;
 8000cb0:	4b43      	ldr	r3, [pc, #268]	@ (8000dc0 <AUDIO_StorageParse+0x12c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8

  if(res == FR_OK)
 8000cb8:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d16c      	bne.n	8000d9a <AUDIO_StorageParse+0x106>
  {
    while(Appli_state == APPLICATION_READY)
 8000cc0:	e067      	b.n	8000d92 <AUDIO_StorageParse+0xfe>
    {
      res = f_readdir(&dir, &fno);
 8000cc2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f00f fca3 	bl	8010616 <f_readdir>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
      if(res != FR_OK || fno.fname[0] == 0)
 8000cd6:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d15d      	bne.n	8000d9a <AUDIO_StorageParse+0x106>
 8000cde:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000ce2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000ce6:	7d9b      	ldrb	r3, [r3, #22]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d056      	beq.n	8000d9a <AUDIO_StorageParse+0x106>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000cec:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000cf0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000cf4:	7d9b      	ldrb	r3, [r3, #22]
 8000cf6:	2b2e      	cmp	r3, #46	@ 0x2e
 8000cf8:	d04a      	beq.n	8000d90 <AUDIO_StorageParse+0xfc>
      {
        continue;
      }

      fn = fno.fname;
 8000cfa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cfe:	3316      	adds	r3, #22
 8000d00:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000d04:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc0 <AUDIO_StorageParse+0x12c>)
 8000d06:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000d0a:	2b17      	cmp	r3, #23
 8000d0c:	d841      	bhi.n	8000d92 <AUDIO_StorageParse+0xfe>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000d0e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000d12:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000d16:	7a1b      	ldrb	r3, [r3, #8]
 8000d18:	f003 0310 	and.w	r3, r3, #16
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d138      	bne.n	8000d92 <AUDIO_StorageParse+0xfe>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000d20:	4928      	ldr	r1, [pc, #160]	@ (8000dc4 <AUDIO_StorageParse+0x130>)
 8000d22:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8000d26:	f010 f9e6 	bl	80110f6 <strstr>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d107      	bne.n	8000d40 <AUDIO_StorageParse+0xac>
 8000d30:	4925      	ldr	r1, [pc, #148]	@ (8000dc8 <AUDIO_StorageParse+0x134>)
 8000d32:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8000d36:	f010 f9de 	bl	80110f6 <strstr>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d028      	beq.n	8000d92 <AUDIO_StorageParse+0xfe>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000d40:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc0 <AUDIO_StorageParse+0x12c>)
 8000d42:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000d46:	461a      	mov	r2, r3
 8000d48:	4613      	mov	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	4413      	add	r3, r2
 8000d52:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc0 <AUDIO_StorageParse+0x12c>)
 8000d54:	4413      	add	r3, r2
 8000d56:	3301      	adds	r3, #1
 8000d58:	2228      	movs	r2, #40	@ 0x28
 8000d5a:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f010 f9b6 	bl	80110d0 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000d64:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <AUDIO_StorageParse+0x12c>)
 8000d66:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4914      	ldr	r1, [pc, #80]	@ (8000dc0 <AUDIO_StorageParse+0x12c>)
 8000d6e:	4613      	mov	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	4413      	add	r3, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <AUDIO_StorageParse+0x12c>)
 8000d80:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000d84:	3301      	adds	r3, #1
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc0 <AUDIO_StorageParse+0x12c>)
 8000d8a:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8
 8000d8e:	e000      	b.n	8000d92 <AUDIO_StorageParse+0xfe>
        continue;
 8000d90:	bf00      	nop
    while(Appli_state == APPLICATION_READY)
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <AUDIO_StorageParse+0x138>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d093      	beq.n	8000cc2 <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <AUDIO_StorageParse+0x12c>)
 8000d9c:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	@ 0x3d8
 8000da0:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <AUDIO_StorageParse+0x13c>)
 8000da2:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4618      	mov	r0, r3
 8000da8:	f00f fc0f 	bl	80105ca <f_closedir>
  return res;
 8000dac:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20001e80 	.word	0x20001e80
 8000dc0:	20001840 	.word	0x20001840
 8000dc4:	08011264 	.word	0x08011264
 8000dc8:	08011268 	.word	0x08011268
 8000dcc:	200026c4 	.word	0x200026c4
 8000dd0:	2000021a 	.word	0x2000021a

08000dd4 <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK) return NumObs;
 8000dd8:	f7ff ff5c 	bl	8000c94 <AUDIO_StorageParse>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d102      	bne.n	8000de8 <AUDIO_GetWavObjectNumber+0x14>
 8000de2:	4b03      	ldr	r3, [pc, #12]	@ (8000df0 <AUDIO_GetWavObjectNumber+0x1c>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	e000      	b.n	8000dea <AUDIO_GetWavObjectNumber+0x16>
	else
	{
		while (1);
 8000de8:	e7fe      	b.n	8000de8 <AUDIO_GetWavObjectNumber+0x14>
	}
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	2000021a 	.word	0x2000021a

08000df4 <Mount_USB>:

void Mount_USB (void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4905      	ldr	r1, [pc, #20]	@ (8000e10 <Mount_USB+0x1c>)
 8000dfc:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <Mount_USB+0x20>)
 8000dfe:	f00e fd81 	bl	800f904 <f_mount>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b04      	ldr	r3, [pc, #16]	@ (8000e18 <Mount_USB+0x24>)
 8000e08:	701a      	strb	r2, [r3, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20001e80 	.word	0x20001e80
 8000e14:	20001e84 	.word	0x20001e84
 8000e18:	20000218 	.word	0x20000218

08000e1c <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	4603      	mov	r3, r0
 8000e26:	81fb      	strh	r3, [r7, #14]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	81bb      	strh	r3, [r7, #12]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000e34:	f7ff fec6 	bl	8000bc4 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000e38:	89fb      	ldrh	r3, [r7, #14]
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2102      	movs	r1, #2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 fb01 	bl	8001448 <CODEC_IO_Write>
 8000e46:	4603      	mov	r3, r0
 8000e48:	461a      	mov	r2, r3
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000e50:	89bb      	ldrh	r3, [r7, #12]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	d81b      	bhi.n	8000e90 <cs43l22_Init+0x74>
 8000e58:	a201      	add	r2, pc, #4	@ (adr r2, 8000e60 <cs43l22_Init+0x44>)
 8000e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5e:	bf00      	nop
 8000e60:	08000e71 	.word	0x08000e71
 8000e64:	08000e79 	.word	0x08000e79
 8000e68:	08000e81 	.word	0x08000e81
 8000e6c:	08000e89 	.word	0x08000e89
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000e70:	4b5b      	ldr	r3, [pc, #364]	@ (8000fe0 <cs43l22_Init+0x1c4>)
 8000e72:	22fa      	movs	r2, #250	@ 0xfa
 8000e74:	701a      	strb	r2, [r3, #0]
    break;
 8000e76:	e00f      	b.n	8000e98 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000e78:	4b59      	ldr	r3, [pc, #356]	@ (8000fe0 <cs43l22_Init+0x1c4>)
 8000e7a:	22af      	movs	r2, #175	@ 0xaf
 8000e7c:	701a      	strb	r2, [r3, #0]
    break;
 8000e7e:	e00b      	b.n	8000e98 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000e80:	4b57      	ldr	r3, [pc, #348]	@ (8000fe0 <cs43l22_Init+0x1c4>)
 8000e82:	22aa      	movs	r2, #170	@ 0xaa
 8000e84:	701a      	strb	r2, [r3, #0]
    break;
 8000e86:	e007      	b.n	8000e98 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000e88:	4b55      	ldr	r3, [pc, #340]	@ (8000fe0 <cs43l22_Init+0x1c4>)
 8000e8a:	2205      	movs	r2, #5
 8000e8c:	701a      	strb	r2, [r3, #0]
    break;    
 8000e8e:	e003      	b.n	8000e98 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000e90:	4b53      	ldr	r3, [pc, #332]	@ (8000fe0 <cs43l22_Init+0x1c4>)
 8000e92:	2205      	movs	r2, #5
 8000e94:	701a      	strb	r2, [r3, #0]
    break;    
 8000e96:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000e98:	89fb      	ldrh	r3, [r7, #14]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4a50      	ldr	r2, [pc, #320]	@ (8000fe0 <cs43l22_Init+0x1c4>)
 8000e9e:	7812      	ldrb	r2, [r2, #0]
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	2104      	movs	r1, #4
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 facf 	bl	8001448 <CODEC_IO_Write>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000eb4:	89fb      	ldrh	r3, [r7, #14]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2281      	movs	r2, #129	@ 0x81
 8000eba:	2105      	movs	r1, #5
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fac3 	bl	8001448 <CODEC_IO_Write>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	4413      	add	r3, r2
 8000eca:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000ecc:	89fb      	ldrh	r3, [r7, #14]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	2106      	movs	r1, #6
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 fab7 	bl	8001448 <CODEC_IO_Write>
 8000eda:	4603      	mov	r3, r0
 8000edc:	461a      	mov	r2, r3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000ee4:	7afa      	ldrb	r2, [r7, #11]
 8000ee6:	89fb      	ldrh	r3, [r7, #14]
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f964 	bl	80011b8 <cs43l22_SetVolume>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000ef8:	89bb      	ldrh	r3, [r7, #12]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d023      	beq.n	8000f46 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000efe:	89fb      	ldrh	r3, [r7, #14]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2206      	movs	r2, #6
 8000f04:	210f      	movs	r1, #15
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 fa9e 	bl	8001448 <CODEC_IO_Write>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461a      	mov	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	4413      	add	r3, r2
 8000f14:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000f16:	89fb      	ldrh	r3, [r7, #14]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2124      	movs	r1, #36	@ 0x24
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fa92 	bl	8001448 <CODEC_IO_Write>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000f2e:	89fb      	ldrh	r3, [r7, #14]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2200      	movs	r2, #0
 8000f34:	2125      	movs	r1, #37	@ 0x25
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fa86 	bl	8001448 <CODEC_IO_Write>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	4413      	add	r3, r2
 8000f44:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000f46:	89fb      	ldrh	r3, [r7, #14]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	210a      	movs	r1, #10
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fa7a 	bl	8001448 <CODEC_IO_Write>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000f5e:	89fb      	ldrh	r3, [r7, #14]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2204      	movs	r2, #4
 8000f64:	210e      	movs	r1, #14
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 fa6e 	bl	8001448 <CODEC_IO_Write>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	4413      	add	r3, r2
 8000f74:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000f76:	89fb      	ldrh	r3, [r7, #14]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2127      	movs	r1, #39	@ 0x27
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fa62 	bl	8001448 <CODEC_IO_Write>
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000f8e:	89fb      	ldrh	r3, [r7, #14]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	220f      	movs	r2, #15
 8000f94:	211f      	movs	r1, #31
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 fa56 	bl	8001448 <CODEC_IO_Write>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000fa6:	89fb      	ldrh	r3, [r7, #14]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	220a      	movs	r2, #10
 8000fac:	211a      	movs	r1, #26
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 fa4a 	bl	8001448 <CODEC_IO_Write>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	4413      	add	r3, r2
 8000fbc:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000fbe:	89fb      	ldrh	r3, [r7, #14]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	220a      	movs	r2, #10
 8000fc4:	211b      	movs	r1, #27
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 fa3e 	bl	8001448 <CODEC_IO_Write>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	461a      	mov	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000fd6:	697b      	ldr	r3, [r7, #20]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2000021c 	.word	0x2000021c

08000fe4 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000fe8:	f7ff fe24 	bl	8000c34 <AUDIO_IO_DeInit>
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000ffa:	f7ff fde3 	bl	8000bc4 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2101      	movs	r1, #1
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fe30 	bl	8000c6a <AUDIO_IO_Read>
 800100a:	4603      	mov	r3, r0
 800100c:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	f023 0307 	bic.w	r3, r3, #7
 8001014:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8001016:	7bfb      	ldrb	r3, [r7, #15]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	80fb      	strh	r3, [r7, #6]
 800102c:	4613      	mov	r3, r2
 800102e:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8001034:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <cs43l22_Play+0x70>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d123      	bne.n	8001084 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2206      	movs	r2, #6
 8001042:	210e      	movs	r1, #14
 8001044:	4618      	mov	r0, r3
 8001046:	f000 f9ff 	bl	8001448 <CODEC_IO_Write>
 800104a:	4603      	mov	r3, r0
 800104c:	461a      	mov	r2, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4413      	add	r3, r2
 8001052:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f000 f919 	bl	8001290 <cs43l22_SetMute>
 800105e:	4602      	mov	r2, r0
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	229e      	movs	r2, #158	@ 0x9e
 800106c:	2102      	movs	r1, #2
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f9ea 	bl	8001448 <CODEC_IO_Write>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4413      	add	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 800107e:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <cs43l22_Play+0x70>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8001084:	68fb      	ldr	r3, [r7, #12]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000034 	.word	0x20000034

08001094 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	2101      	movs	r1, #1
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f8f2 	bl	8001290 <cs43l22_SetMute>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4413      	add	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2201      	movs	r2, #1
 80010ba:	2102      	movs	r1, #2
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 f9c3 	bl	8001448 <CODEC_IO_Write>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4413      	add	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]
 
  return counter;
 80010cc:	68fb      	ldr	r3, [r7, #12]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f8ce 	bl	8001290 <cs43l22_SetMute>
 80010f4:	4602      	mov	r2, r0
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4413      	add	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	e002      	b.n	8001108 <cs43l22_Resume+0x30>
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	3301      	adds	r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	2bfe      	cmp	r3, #254	@ 0xfe
 800110c:	d9f9      	bls.n	8001102 <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4a0e      	ldr	r2, [pc, #56]	@ (800114c <cs43l22_Resume+0x74>)
 8001114:	7812      	ldrb	r2, [r2, #0]
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	2104      	movs	r1, #4
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f994 	bl	8001448 <CODEC_IO_Write>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4413      	add	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	229e      	movs	r2, #158	@ 0x9e
 8001130:	2102      	movs	r1, #2
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f988 	bl	8001448 <CODEC_IO_Write>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000021c 	.word	0x2000021c

08001150 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	2101      	movs	r1, #1
 8001164:	4618      	mov	r0, r3
 8001166:	f000 f893 	bl	8001290 <cs43l22_SetMute>
 800116a:	4602      	mov	r2, r0
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2204      	movs	r2, #4
 8001178:	210e      	movs	r1, #14
 800117a:	4618      	mov	r0, r3
 800117c:	f000 f964 	bl	8001448 <CODEC_IO_Write>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4413      	add	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	229f      	movs	r2, #159	@ 0x9f
 8001190:	2102      	movs	r1, #2
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f958 	bl	8001448 <CODEC_IO_Write>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 80011a2:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <cs43l22_Stop+0x64>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
  return counter;    
 80011a8:	68fb      	ldr	r3, [r7, #12]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000034 	.word	0x20000034

080011b8 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	460a      	mov	r2, r1
 80011c2:	80fb      	strh	r3, [r7, #6]
 80011c4:	4613      	mov	r3, r2
 80011c6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80011cc:	797b      	ldrb	r3, [r7, #5]
 80011ce:	2b64      	cmp	r3, #100	@ 0x64
 80011d0:	d80b      	bhi.n	80011ea <cs43l22_SetVolume+0x32>
 80011d2:	797a      	ldrb	r2, [r7, #5]
 80011d4:	4613      	mov	r3, r2
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	1a9b      	subs	r3, r3, r2
 80011da:	4a25      	ldr	r2, [pc, #148]	@ (8001270 <cs43l22_SetVolume+0xb8>)
 80011dc:	fb82 1203 	smull	r1, r2, r2, r3
 80011e0:	1152      	asrs	r2, r2, #5
 80011e2:	17db      	asrs	r3, r3, #31
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	e000      	b.n	80011ec <cs43l22_SetVolume+0x34>
 80011ea:	23ff      	movs	r3, #255	@ 0xff
 80011ec:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80011ee:	7afb      	ldrb	r3, [r7, #11]
 80011f0:	2be6      	cmp	r3, #230	@ 0xe6
 80011f2:	d91c      	bls.n	800122e <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	b2d8      	uxtb	r0, r3
 80011f8:	7afb      	ldrb	r3, [r7, #11]
 80011fa:	3319      	adds	r3, #25
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	461a      	mov	r2, r3
 8001200:	2120      	movs	r1, #32
 8001202:	f000 f921 	bl	8001448 <CODEC_IO_Write>
 8001206:	4603      	mov	r3, r0
 8001208:	461a      	mov	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4413      	add	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	b2d8      	uxtb	r0, r3
 8001214:	7afb      	ldrb	r3, [r7, #11]
 8001216:	3319      	adds	r3, #25
 8001218:	b2db      	uxtb	r3, r3
 800121a:	461a      	mov	r2, r3
 800121c:	2121      	movs	r1, #33	@ 0x21
 800121e:	f000 f913 	bl	8001448 <CODEC_IO_Write>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4413      	add	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	e01b      	b.n	8001266 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	b2d8      	uxtb	r0, r3
 8001232:	7afb      	ldrb	r3, [r7, #11]
 8001234:	3319      	adds	r3, #25
 8001236:	b2db      	uxtb	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	2120      	movs	r1, #32
 800123c:	f000 f904 	bl	8001448 <CODEC_IO_Write>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4413      	add	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	b2d8      	uxtb	r0, r3
 800124e:	7afb      	ldrb	r3, [r7, #11]
 8001250:	3319      	adds	r3, #25
 8001252:	b2db      	uxtb	r3, r3
 8001254:	461a      	mov	r2, r3
 8001256:	2121      	movs	r1, #33	@ 0x21
 8001258:	f000 f8f6 	bl	8001448 <CODEC_IO_Write>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	51eb851f 	.word	0x51eb851f

08001274 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d124      	bne.n	80012f0 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	22ff      	movs	r2, #255	@ 0xff
 80012ac:	2104      	movs	r1, #4
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f8ca 	bl	8001448 <CODEC_IO_Write>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2201      	movs	r2, #1
 80012c4:	2122      	movs	r1, #34	@ 0x22
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f8be 	bl	8001448 <CODEC_IO_Write>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461a      	mov	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4413      	add	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2201      	movs	r2, #1
 80012dc:	2123      	movs	r1, #35	@ 0x23
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f8b2 	bl	8001448 <CODEC_IO_Write>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	e025      	b.n	800133c <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2200      	movs	r2, #0
 80012f6:	2122      	movs	r1, #34	@ 0x22
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 f8a5 	bl	8001448 <CODEC_IO_Write>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4413      	add	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2200      	movs	r2, #0
 800130e:	2123      	movs	r1, #35	@ 0x23
 8001310:	4618      	mov	r0, r3
 8001312:	f000 f899 	bl	8001448 <CODEC_IO_Write>
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	4a08      	ldr	r2, [pc, #32]	@ (8001348 <cs43l22_SetMute+0xb8>)
 8001326:	7812      	ldrb	r2, [r2, #0]
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	2104      	movs	r1, #4
 800132c:	4618      	mov	r0, r3
 800132e:	f000 f88b 	bl	8001448 <CODEC_IO_Write>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4413      	add	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800133c:	68fb      	ldr	r3, [r7, #12]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000021c 	.word	0x2000021c

0800134c <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	460a      	mov	r2, r1
 8001356:	80fb      	strh	r3, [r7, #6]
 8001358:	4613      	mov	r3, r2
 800135a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001360:	797b      	ldrb	r3, [r7, #5]
 8001362:	3b01      	subs	r3, #1
 8001364:	2b03      	cmp	r3, #3
 8001366:	d84b      	bhi.n	8001400 <cs43l22_SetOutputMode+0xb4>
 8001368:	a201      	add	r2, pc, #4	@ (adr r2, 8001370 <cs43l22_SetOutputMode+0x24>)
 800136a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136e:	bf00      	nop
 8001370:	08001381 	.word	0x08001381
 8001374:	080013a1 	.word	0x080013a1
 8001378:	080013c1 	.word	0x080013c1
 800137c:	080013e1 	.word	0x080013e1
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	22fa      	movs	r2, #250	@ 0xfa
 8001386:	2104      	movs	r1, #4
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f85d 	bl	8001448 <CODEC_IO_Write>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001398:	4b24      	ldr	r3, [pc, #144]	@ (800142c <cs43l22_SetOutputMode+0xe0>)
 800139a:	22fa      	movs	r2, #250	@ 0xfa
 800139c:	701a      	strb	r2, [r3, #0]
      break;
 800139e:	e03f      	b.n	8001420 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	22af      	movs	r2, #175	@ 0xaf
 80013a6:	2104      	movs	r1, #4
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 f84d 	bl	8001448 <CODEC_IO_Write>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4413      	add	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 80013b8:	4b1c      	ldr	r3, [pc, #112]	@ (800142c <cs43l22_SetOutputMode+0xe0>)
 80013ba:	22af      	movs	r2, #175	@ 0xaf
 80013bc:	701a      	strb	r2, [r3, #0]
      break;
 80013be:	e02f      	b.n	8001420 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	22aa      	movs	r2, #170	@ 0xaa
 80013c6:	2104      	movs	r1, #4
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 f83d 	bl	8001448 <CODEC_IO_Write>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4413      	add	r3, r2
 80013d6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 80013d8:	4b14      	ldr	r3, [pc, #80]	@ (800142c <cs43l22_SetOutputMode+0xe0>)
 80013da:	22aa      	movs	r2, #170	@ 0xaa
 80013dc:	701a      	strb	r2, [r3, #0]
      break;
 80013de:	e01f      	b.n	8001420 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2205      	movs	r2, #5
 80013e6:	2104      	movs	r1, #4
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 f82d 	bl	8001448 <CODEC_IO_Write>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461a      	mov	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4413      	add	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <cs43l22_SetOutputMode+0xe0>)
 80013fa:	2205      	movs	r2, #5
 80013fc:	701a      	strb	r2, [r3, #0]
      break;    
 80013fe:	e00f      	b.n	8001420 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2205      	movs	r2, #5
 8001406:	2104      	movs	r1, #4
 8001408:	4618      	mov	r0, r3
 800140a:	f000 f81d 	bl	8001448 <CODEC_IO_Write>
 800140e:	4603      	mov	r3, r0
 8001410:	461a      	mov	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4413      	add	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001418:	4b04      	ldr	r3, [pc, #16]	@ (800142c <cs43l22_SetOutputMode+0xe0>)
 800141a:	2205      	movs	r2, #5
 800141c:	701a      	strb	r2, [r3, #0]
      break;
 800141e:	bf00      	nop
  }  
  return counter;
 8001420:	68fb      	ldr	r3, [r7, #12]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000021c 	.word	0x2000021c

08001430 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	80fb      	strh	r3, [r7, #6]
  return 0;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
 8001452:	460b      	mov	r3, r1
 8001454:	71bb      	strb	r3, [r7, #6]
 8001456:	4613      	mov	r3, r2
 8001458:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 800145e:	797a      	ldrb	r2, [r7, #5]
 8001460:	79b9      	ldrb	r1, [r7, #6]
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fbec 	bl	8000c42 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	b2db      	uxtb	r3, r3
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <display_Init>:
#include "display.h"
#include "ssd1306_oled.h"


void display_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	//Iniciamos Pantalla//
	SSD1306_Init();
 800147c:	f000 fdee 	bl	800205c <SSD1306_Init>
	// MENSAJES INICIO //
	SSD1306_GotoXY(5,0);
 8001480:	2100      	movs	r1, #0
 8001482:	2005      	movs	r0, #5
 8001484:	f000 ff54 	bl	8002330 <SSD1306_GotoXY>
	SSD1306_Puts("HOLA, BIENVENIDO!", &Font_7x10, WHITE);
 8001488:	2201      	movs	r2, #1
 800148a:	4942      	ldr	r1, [pc, #264]	@ (8001594 <display_Init+0x11c>)
 800148c:	4842      	ldr	r0, [pc, #264]	@ (8001598 <display_Init+0x120>)
 800148e:	f000 ffe3 	bl	8002458 <SSD1306_Puts>
	SSD1306_GotoXY(25,20);
 8001492:	2114      	movs	r1, #20
 8001494:	2019      	movs	r0, #25
 8001496:	f000 ff4b 	bl	8002330 <SSD1306_GotoXY>
	SSD1306_Puts("EUGENIO", &Font_11x18, WHITE);
 800149a:	2201      	movs	r2, #1
 800149c:	493f      	ldr	r1, [pc, #252]	@ (800159c <display_Init+0x124>)
 800149e:	4840      	ldr	r0, [pc, #256]	@ (80015a0 <display_Init+0x128>)
 80014a0:	f000 ffda 	bl	8002458 <SSD1306_Puts>
	SSD1306_GotoXY(15,40);
 80014a4:	2128      	movs	r1, #40	@ 0x28
 80014a6:	200f      	movs	r0, #15
 80014a8:	f000 ff42 	bl	8002330 <SSD1306_GotoXY>
	SSD1306_Puts("SIMULATOR", &Font_11x18, WHITE);
 80014ac:	2201      	movs	r2, #1
 80014ae:	493b      	ldr	r1, [pc, #236]	@ (800159c <display_Init+0x124>)
 80014b0:	483c      	ldr	r0, [pc, #240]	@ (80015a4 <display_Init+0x12c>)
 80014b2:	f000 ffd1 	bl	8002458 <SSD1306_Puts>
	SSD1306_GotoXY(54,60);
 80014b6:	213c      	movs	r1, #60	@ 0x3c
 80014b8:	2036      	movs	r0, #54	@ 0x36
 80014ba:	f000 ff39 	bl	8002330 <SSD1306_GotoXY>
	SSD1306_Puts("3000", &Font_7x10, WHITE);
 80014be:	2201      	movs	r2, #1
 80014c0:	4934      	ldr	r1, [pc, #208]	@ (8001594 <display_Init+0x11c>)
 80014c2:	4839      	ldr	r0, [pc, #228]	@ (80015a8 <display_Init+0x130>)
 80014c4:	f000 ffc8 	bl	8002458 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80014c8:	f000 fe8c 	bl	80021e4 <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 80014cc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80014d0:	f001 fbcc 	bl	8002c6c <HAL_Delay>

	SSD1306_Clear();
 80014d4:	f000 ffe5 	bl	80024a2 <SSD1306_Clear>
	SSD1306_GotoXY(12,0);
 80014d8:	2100      	movs	r1, #0
 80014da:	200c      	movs	r0, #12
 80014dc:	f000 ff28 	bl	8002330 <SSD1306_GotoXY>
	SSD1306_Puts("INGENIERIA UCC", &Font_7x10, WHITE);
 80014e0:	2201      	movs	r2, #1
 80014e2:	492c      	ldr	r1, [pc, #176]	@ (8001594 <display_Init+0x11c>)
 80014e4:	4831      	ldr	r0, [pc, #196]	@ (80015ac <display_Init+0x134>)
 80014e6:	f000 ffb7 	bl	8002458 <SSD1306_Puts>
	SSD1306_GotoXY(0,20);
 80014ea:	2114      	movs	r1, #20
 80014ec:	2000      	movs	r0, #0
 80014ee:	f000 ff1f 	bl	8002330 <SSD1306_GotoXY>
	SSD1306_Puts("Profesores:", &Font_7x10, WHITE);
 80014f2:	2201      	movs	r2, #1
 80014f4:	4927      	ldr	r1, [pc, #156]	@ (8001594 <display_Init+0x11c>)
 80014f6:	482e      	ldr	r0, [pc, #184]	@ (80015b0 <display_Init+0x138>)
 80014f8:	f000 ffae 	bl	8002458 <SSD1306_Puts>
	SSD1306_GotoXY(0,30);
 80014fc:	211e      	movs	r1, #30
 80014fe:	2000      	movs	r0, #0
 8001500:	f000 ff16 	bl	8002330 <SSD1306_GotoXY>
	SSD1306_Puts("*Agustin Laprovitta", &Font_7x10, WHITE);
 8001504:	2201      	movs	r2, #1
 8001506:	4923      	ldr	r1, [pc, #140]	@ (8001594 <display_Init+0x11c>)
 8001508:	482a      	ldr	r0, [pc, #168]	@ (80015b4 <display_Init+0x13c>)
 800150a:	f000 ffa5 	bl	8002458 <SSD1306_Puts>
	SSD1306_GotoXY(0,40);
 800150e:	2128      	movs	r1, #40	@ 0x28
 8001510:	2000      	movs	r0, #0
 8001512:	f000 ff0d 	bl	8002330 <SSD1306_GotoXY>
	SSD1306_Puts("*Martin Molina", &Font_7x10, WHITE);
 8001516:	2201      	movs	r2, #1
 8001518:	491e      	ldr	r1, [pc, #120]	@ (8001594 <display_Init+0x11c>)
 800151a:	4827      	ldr	r0, [pc, #156]	@ (80015b8 <display_Init+0x140>)
 800151c:	f000 ff9c 	bl	8002458 <SSD1306_Puts>
	SSD1306_GotoXY(0,50);
 8001520:	2132      	movs	r1, #50	@ 0x32
 8001522:	2000      	movs	r0, #0
 8001524:	f000 ff04 	bl	8002330 <SSD1306_GotoXY>
	SSD1306_Puts("Alumno: Mateo C.", &Font_7x10, WHITE);
 8001528:	2201      	movs	r2, #1
 800152a:	491a      	ldr	r1, [pc, #104]	@ (8001594 <display_Init+0x11c>)
 800152c:	4823      	ldr	r0, [pc, #140]	@ (80015bc <display_Init+0x144>)
 800152e:	f000 ff93 	bl	8002458 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001532:	f000 fe57 	bl	80021e4 <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 8001536:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800153a:	f001 fb97 	bl	8002c6c <HAL_Delay>

	 // PANTALLA HOME //
	SSD1306_Clear();
 800153e:	f000 ffb0 	bl	80024a2 <SSD1306_Clear>
	SSD1306_GotoXY(30,0);
 8001542:	2100      	movs	r1, #0
 8001544:	201e      	movs	r0, #30
 8001546:	f000 fef3 	bl	8002330 <SSD1306_GotoXY>
	SSD1306_Puts("STATUS", &Font_11x18, WHITE);
 800154a:	2201      	movs	r2, #1
 800154c:	4913      	ldr	r1, [pc, #76]	@ (800159c <display_Init+0x124>)
 800154e:	481c      	ldr	r0, [pc, #112]	@ (80015c0 <display_Init+0x148>)
 8001550:	f000 ff82 	bl	8002458 <SSD1306_Puts>
	SSD1306_GotoXY(8,25);
 8001554:	2119      	movs	r1, #25
 8001556:	2008      	movs	r0, #8
 8001558:	f000 feea 	bl	8002330 <SSD1306_GotoXY>
	SSD1306_Puts("Reproduciendo...", &Font_7x10, WHITE);
 800155c:	2201      	movs	r2, #1
 800155e:	490d      	ldr	r1, [pc, #52]	@ (8001594 <display_Init+0x11c>)
 8001560:	4818      	ldr	r0, [pc, #96]	@ (80015c4 <display_Init+0x14c>)
 8001562:	f000 ff79 	bl	8002458 <SSD1306_Puts>
	SSD1306_GotoXY(18,40);
 8001566:	2128      	movs	r1, #40	@ 0x28
 8001568:	2012      	movs	r0, #18
 800156a:	f000 fee1 	bl	8002330 <SSD1306_GotoXY>
	SSD1306_Puts("* CD:Musica ", &Font_7x10, WHITE);
 800156e:	2201      	movs	r2, #1
 8001570:	4908      	ldr	r1, [pc, #32]	@ (8001594 <display_Init+0x11c>)
 8001572:	4815      	ldr	r0, [pc, #84]	@ (80015c8 <display_Init+0x150>)
 8001574:	f000 ff70 	bl	8002458 <SSD1306_Puts>
	SSD1306_GotoXY(18,50);
 8001578:	2132      	movs	r1, #50	@ 0x32
 800157a:	2012      	movs	r0, #18
 800157c:	f000 fed8 	bl	8002330 <SSD1306_GotoXY>
	SSD1306_Puts("* CI:Silencio ", &Font_7x10, WHITE);
 8001580:	2201      	movs	r2, #1
 8001582:	4904      	ldr	r1, [pc, #16]	@ (8001594 <display_Init+0x11c>)
 8001584:	4811      	ldr	r0, [pc, #68]	@ (80015cc <display_Init+0x154>)
 8001586:	f000 ff67 	bl	8002458 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800158a:	f000 fe2b 	bl	80021e4 <SSD1306_UpdateScreen>
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000038 	.word	0x20000038
 8001598:	0801126c 	.word	0x0801126c
 800159c:	20000040 	.word	0x20000040
 80015a0:	08011280 	.word	0x08011280
 80015a4:	08011288 	.word	0x08011288
 80015a8:	08011294 	.word	0x08011294
 80015ac:	0801129c 	.word	0x0801129c
 80015b0:	080112ac 	.word	0x080112ac
 80015b4:	080112b8 	.word	0x080112b8
 80015b8:	080112cc 	.word	0x080112cc
 80015bc:	080112dc 	.word	0x080112dc
 80015c0:	080112f0 	.word	0x080112f0
 80015c4:	080112f8 	.word	0x080112f8
 80015c8:	0801130c 	.word	0x0801130c
 80015cc:	0801131c 	.word	0x0801131c

080015d0 <display_cancion>:

void display_cancion(int idx)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	switch(idx){
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b03      	cmp	r3, #3
 80015dc:	f200 80a7 	bhi.w	800172e <display_cancion+0x15e>
 80015e0:	a201      	add	r2, pc, #4	@ (adr r2, 80015e8 <display_cancion+0x18>)
 80015e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e6:	bf00      	nop
 80015e8:	080015f9 	.word	0x080015f9
 80015ec:	0800164b 	.word	0x0800164b
 80015f0:	0800169d 	.word	0x0800169d
 80015f4:	080016ef 	.word	0x080016ef

	case 0:
		SSD1306_Clear();
 80015f8:	f000 ff53 	bl	80024a2 <SSD1306_Clear>
		SSD1306_GotoXY(30,0);
 80015fc:	2100      	movs	r1, #0
 80015fe:	201e      	movs	r0, #30
 8001600:	f000 fe96 	bl	8002330 <SSD1306_GotoXY>
		SSD1306_Puts("STATUS", &Font_11x18, WHITE);
 8001604:	2201      	movs	r2, #1
 8001606:	494c      	ldr	r1, [pc, #304]	@ (8001738 <display_cancion+0x168>)
 8001608:	484c      	ldr	r0, [pc, #304]	@ (800173c <display_cancion+0x16c>)
 800160a:	f000 ff25 	bl	8002458 <SSD1306_Puts>
		SSD1306_GotoXY(8,25);
 800160e:	2119      	movs	r1, #25
 8001610:	2008      	movs	r0, #8
 8001612:	f000 fe8d 	bl	8002330 <SSD1306_GotoXY>
		SSD1306_Puts("Reproduciendo...", &Font_7x10, WHITE);
 8001616:	2201      	movs	r2, #1
 8001618:	4949      	ldr	r1, [pc, #292]	@ (8001740 <display_cancion+0x170>)
 800161a:	484a      	ldr	r0, [pc, #296]	@ (8001744 <display_cancion+0x174>)
 800161c:	f000 ff1c 	bl	8002458 <SSD1306_Puts>
		SSD1306_GotoXY(18,40);
 8001620:	2128      	movs	r1, #40	@ 0x28
 8001622:	2012      	movs	r0, #18
 8001624:	f000 fe84 	bl	8002330 <SSD1306_GotoXY>
		SSD1306_Puts("* CD:Musica ", &Font_7x10, WHITE);
 8001628:	2201      	movs	r2, #1
 800162a:	4945      	ldr	r1, [pc, #276]	@ (8001740 <display_cancion+0x170>)
 800162c:	4846      	ldr	r0, [pc, #280]	@ (8001748 <display_cancion+0x178>)
 800162e:	f000 ff13 	bl	8002458 <SSD1306_Puts>
		SSD1306_GotoXY(18,50);
 8001632:	2132      	movs	r1, #50	@ 0x32
 8001634:	2012      	movs	r0, #18
 8001636:	f000 fe7b 	bl	8002330 <SSD1306_GotoXY>
		SSD1306_Puts("* CI:Silencio ", &Font_7x10, WHITE);
 800163a:	2201      	movs	r2, #1
 800163c:	4940      	ldr	r1, [pc, #256]	@ (8001740 <display_cancion+0x170>)
 800163e:	4843      	ldr	r0, [pc, #268]	@ (800174c <display_cancion+0x17c>)
 8001640:	f000 ff0a 	bl	8002458 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001644:	f000 fdce 	bl	80021e4 <SSD1306_UpdateScreen>
		break;
 8001648:	e071      	b.n	800172e <display_cancion+0x15e>


	case 1:
		SSD1306_Clear();
 800164a:	f000 ff2a 	bl	80024a2 <SSD1306_Clear>
		SSD1306_GotoXY(30,0);
 800164e:	2100      	movs	r1, #0
 8001650:	201e      	movs	r0, #30
 8001652:	f000 fe6d 	bl	8002330 <SSD1306_GotoXY>
		SSD1306_Puts("STATUS", &Font_11x18, WHITE);
 8001656:	2201      	movs	r2, #1
 8001658:	4937      	ldr	r1, [pc, #220]	@ (8001738 <display_cancion+0x168>)
 800165a:	4838      	ldr	r0, [pc, #224]	@ (800173c <display_cancion+0x16c>)
 800165c:	f000 fefc 	bl	8002458 <SSD1306_Puts>
		SSD1306_GotoXY(8,25);
 8001660:	2119      	movs	r1, #25
 8001662:	2008      	movs	r0, #8
 8001664:	f000 fe64 	bl	8002330 <SSD1306_GotoXY>
		SSD1306_Puts("Reproduciendo...", &Font_7x10, WHITE);
 8001668:	2201      	movs	r2, #1
 800166a:	4935      	ldr	r1, [pc, #212]	@ (8001740 <display_cancion+0x170>)
 800166c:	4835      	ldr	r0, [pc, #212]	@ (8001744 <display_cancion+0x174>)
 800166e:	f000 fef3 	bl	8002458 <SSD1306_Puts>
		SSD1306_GotoXY(18,40);
 8001672:	2128      	movs	r1, #40	@ 0x28
 8001674:	2012      	movs	r0, #18
 8001676:	f000 fe5b 	bl	8002330 <SSD1306_GotoXY>
		SSD1306_Puts("* CD:Electronica", &Font_7x10, WHITE);
 800167a:	2201      	movs	r2, #1
 800167c:	4930      	ldr	r1, [pc, #192]	@ (8001740 <display_cancion+0x170>)
 800167e:	4834      	ldr	r0, [pc, #208]	@ (8001750 <display_cancion+0x180>)
 8001680:	f000 feea 	bl	8002458 <SSD1306_Puts>
		SSD1306_GotoXY(18,50);
 8001684:	2132      	movs	r1, #50	@ 0x32
 8001686:	2012      	movs	r0, #18
 8001688:	f000 fe52 	bl	8002330 <SSD1306_GotoXY>
		SSD1306_Puts("* CI:The Strokes", &Font_7x10, WHITE);
 800168c:	2201      	movs	r2, #1
 800168e:	492c      	ldr	r1, [pc, #176]	@ (8001740 <display_cancion+0x170>)
 8001690:	4830      	ldr	r0, [pc, #192]	@ (8001754 <display_cancion+0x184>)
 8001692:	f000 fee1 	bl	8002458 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001696:	f000 fda5 	bl	80021e4 <SSD1306_UpdateScreen>
		break;
 800169a:	e048      	b.n	800172e <display_cancion+0x15e>

	case 2:
		SSD1306_Clear();
 800169c:	f000 ff01 	bl	80024a2 <SSD1306_Clear>
		SSD1306_GotoXY(30,0);
 80016a0:	2100      	movs	r1, #0
 80016a2:	201e      	movs	r0, #30
 80016a4:	f000 fe44 	bl	8002330 <SSD1306_GotoXY>
		SSD1306_Puts("STATUS", &Font_11x18, WHITE);
 80016a8:	2201      	movs	r2, #1
 80016aa:	4923      	ldr	r1, [pc, #140]	@ (8001738 <display_cancion+0x168>)
 80016ac:	4823      	ldr	r0, [pc, #140]	@ (800173c <display_cancion+0x16c>)
 80016ae:	f000 fed3 	bl	8002458 <SSD1306_Puts>
		SSD1306_GotoXY(8,25);
 80016b2:	2119      	movs	r1, #25
 80016b4:	2008      	movs	r0, #8
 80016b6:	f000 fe3b 	bl	8002330 <SSD1306_GotoXY>
		SSD1306_Puts("Reproduciendo...", &Font_7x10, WHITE);
 80016ba:	2201      	movs	r2, #1
 80016bc:	4920      	ldr	r1, [pc, #128]	@ (8001740 <display_cancion+0x170>)
 80016be:	4821      	ldr	r0, [pc, #132]	@ (8001744 <display_cancion+0x174>)
 80016c0:	f000 feca 	bl	8002458 <SSD1306_Puts>
		SSD1306_GotoXY(18,40);
 80016c4:	2128      	movs	r1, #40	@ 0x28
 80016c6:	2012      	movs	r0, #18
 80016c8:	f000 fe32 	bl	8002330 <SSD1306_GotoXY>
		SSD1306_Puts("* CD:Murmullo ", &Font_7x10, WHITE);
 80016cc:	2201      	movs	r2, #1
 80016ce:	491c      	ldr	r1, [pc, #112]	@ (8001740 <display_cancion+0x170>)
 80016d0:	4821      	ldr	r0, [pc, #132]	@ (8001758 <display_cancion+0x188>)
 80016d2:	f000 fec1 	bl	8002458 <SSD1306_Puts>
		SSD1306_GotoXY(18,50);
 80016d6:	2132      	movs	r1, #50	@ 0x32
 80016d8:	2012      	movs	r0, #18
 80016da:	f000 fe29 	bl	8002330 <SSD1306_GotoXY>
		SSD1306_Puts("* CI:Normal ", &Font_7x10, WHITE);
 80016de:	2201      	movs	r2, #1
 80016e0:	4917      	ldr	r1, [pc, #92]	@ (8001740 <display_cancion+0x170>)
 80016e2:	481e      	ldr	r0, [pc, #120]	@ (800175c <display_cancion+0x18c>)
 80016e4:	f000 feb8 	bl	8002458 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80016e8:	f000 fd7c 	bl	80021e4 <SSD1306_UpdateScreen>
		break;
 80016ec:	e01f      	b.n	800172e <display_cancion+0x15e>



	case 3:
		SSD1306_Clear();
 80016ee:	f000 fed8 	bl	80024a2 <SSD1306_Clear>
		SSD1306_GotoXY(30,0);
 80016f2:	2100      	movs	r1, #0
 80016f4:	201e      	movs	r0, #30
 80016f6:	f000 fe1b 	bl	8002330 <SSD1306_GotoXY>
		SSD1306_Puts("STATUS", &Font_11x18, WHITE);
 80016fa:	2201      	movs	r2, #1
 80016fc:	490e      	ldr	r1, [pc, #56]	@ (8001738 <display_cancion+0x168>)
 80016fe:	480f      	ldr	r0, [pc, #60]	@ (800173c <display_cancion+0x16c>)
 8001700:	f000 feaa 	bl	8002458 <SSD1306_Puts>
		SSD1306_GotoXY(8,25);
 8001704:	2119      	movs	r1, #25
 8001706:	2008      	movs	r0, #8
 8001708:	f000 fe12 	bl	8002330 <SSD1306_GotoXY>
		SSD1306_Puts("Reproduciendo...", &Font_7x10, WHITE);
 800170c:	2201      	movs	r2, #1
 800170e:	490c      	ldr	r1, [pc, #48]	@ (8001740 <display_cancion+0x170>)
 8001710:	480c      	ldr	r0, [pc, #48]	@ (8001744 <display_cancion+0x174>)
 8001712:	f000 fea1 	bl	8002458 <SSD1306_Puts>
		SSD1306_GotoXY(18,40);
 8001716:	2128      	movs	r1, #40	@ 0x28
 8001718:	2012      	movs	r0, #18
 800171a:	f000 fe09 	bl	8002330 <SSD1306_GotoXY>
		SSD1306_Puts("* Cancion", &Font_7x10, WHITE);
 800171e:	2201      	movs	r2, #1
 8001720:	4907      	ldr	r1, [pc, #28]	@ (8001740 <display_cancion+0x170>)
 8001722:	480f      	ldr	r0, [pc, #60]	@ (8001760 <display_cancion+0x190>)
 8001724:	f000 fe98 	bl	8002458 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001728:	f000 fd5c 	bl	80021e4 <SSD1306_UpdateScreen>

	}

}
 800172c:	e7ff      	b.n	800172e <display_cancion+0x15e>
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000040 	.word	0x20000040
 800173c:	080112f0 	.word	0x080112f0
 8001740:	20000038 	.word	0x20000038
 8001744:	080112f8 	.word	0x080112f8
 8001748:	0801130c 	.word	0x0801130c
 800174c:	0801131c 	.word	0x0801131c
 8001750:	0801132c 	.word	0x0801132c
 8001754:	08011340 	.word	0x08011340
 8001758:	08011354 	.word	0x08011354
 800175c:	08011364 	.word	0x08011364
 8001760:	08011374 	.word	0x08011374

08001764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	4b1b      	ldr	r3, [pc, #108]	@ (80017dc <MX_DMA_Init+0x78>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	4a1a      	ldr	r2, [pc, #104]	@ (80017dc <MX_DMA_Init+0x78>)
 8001774:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001778:	6313      	str	r3, [r2, #48]	@ 0x30
 800177a:	4b18      	ldr	r3, [pc, #96]	@ (80017dc <MX_DMA_Init+0x78>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	603b      	str	r3, [r7, #0]
 800178a:	4b14      	ldr	r3, [pc, #80]	@ (80017dc <MX_DMA_Init+0x78>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	4a13      	ldr	r2, [pc, #76]	@ (80017dc <MX_DMA_Init+0x78>)
 8001790:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001794:	6313      	str	r3, [r2, #48]	@ 0x30
 8001796:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <MX_DMA_Init+0x78>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	2010      	movs	r0, #16
 80017a8:	f001 fb5f 	bl	8002e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017ac:	2010      	movs	r0, #16
 80017ae:	f001 fb78 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	203a      	movs	r0, #58	@ 0x3a
 80017b8:	f001 fb57 	bl	8002e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80017bc:	203a      	movs	r0, #58	@ 0x3a
 80017be:	f001 fb70 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	2046      	movs	r0, #70	@ 0x46
 80017c8:	f001 fb4f 	bl	8002e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80017cc:	2046      	movs	r0, #70	@ 0x46
 80017ce:	f001 fb68 	bl	8002ea2 <HAL_NVIC_EnableIRQ>

}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800

080017e0 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	@ 0x28
 80017e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b59      	ldr	r3, [pc, #356]	@ (8001960 <MX_GPIO_Init+0x180>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a58      	ldr	r2, [pc, #352]	@ (8001960 <MX_GPIO_Init+0x180>)
 8001800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b56      	ldr	r3, [pc, #344]	@ (8001960 <MX_GPIO_Init+0x180>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b52      	ldr	r3, [pc, #328]	@ (8001960 <MX_GPIO_Init+0x180>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	4a51      	ldr	r2, [pc, #324]	@ (8001960 <MX_GPIO_Init+0x180>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6313      	str	r3, [r2, #48]	@ 0x30
 8001822:	4b4f      	ldr	r3, [pc, #316]	@ (8001960 <MX_GPIO_Init+0x180>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4b4b      	ldr	r3, [pc, #300]	@ (8001960 <MX_GPIO_Init+0x180>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	4a4a      	ldr	r2, [pc, #296]	@ (8001960 <MX_GPIO_Init+0x180>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6313      	str	r3, [r2, #48]	@ 0x30
 800183e:	4b48      	ldr	r3, [pc, #288]	@ (8001960 <MX_GPIO_Init+0x180>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	4b44      	ldr	r3, [pc, #272]	@ (8001960 <MX_GPIO_Init+0x180>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	4a43      	ldr	r2, [pc, #268]	@ (8001960 <MX_GPIO_Init+0x180>)
 8001854:	f043 0308 	orr.w	r3, r3, #8
 8001858:	6313      	str	r3, [r2, #48]	@ 0x30
 800185a:	4b41      	ldr	r3, [pc, #260]	@ (8001960 <MX_GPIO_Init+0x180>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	603b      	str	r3, [r7, #0]
 800186a:	4b3d      	ldr	r3, [pc, #244]	@ (8001960 <MX_GPIO_Init+0x180>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	4a3c      	ldr	r2, [pc, #240]	@ (8001960 <MX_GPIO_Init+0x180>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	6313      	str	r3, [r2, #48]	@ 0x30
 8001876:	4b3a      	ldr	r3, [pc, #232]	@ (8001960 <MX_GPIO_Init+0x180>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|PC1_Pin|PC3_Pin, GPIO_PIN_RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	210b      	movs	r1, #11
 8001886:	4837      	ldr	r0, [pc, #220]	@ (8001964 <MX_GPIO_Init+0x184>)
 8001888:	f002 f9ee 	bl	8003c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA1_Pin|PA3_Pin|PA5_Pin|PA7_Pin, GPIO_PIN_SET);
 800188c:	2201      	movs	r2, #1
 800188e:	21aa      	movs	r1, #170	@ 0xaa
 8001890:	4835      	ldr	r0, [pc, #212]	@ (8001968 <MX_GPIO_Init+0x188>)
 8001892:	f002 f9e9 	bl	8003c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PC1_Pin|PC3_Pin;
 8001896:	230b      	movs	r3, #11
 8001898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189a:	2301      	movs	r3, #1
 800189c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	482d      	ldr	r0, [pc, #180]	@ (8001964 <MX_GPIO_Init+0x184>)
 80018ae:	f001 ff73 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018b2:	2301      	movs	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018bc:	2302      	movs	r3, #2
 80018be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	4828      	ldr	r0, [pc, #160]	@ (8001968 <MX_GPIO_Init+0x188>)
 80018c8:	f001 ff66 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PA1_Pin|PA3_Pin|PA5_Pin|PA7_Pin;
 80018cc:	23aa      	movs	r3, #170	@ 0xaa
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4619      	mov	r1, r3
 80018e2:	4821      	ldr	r0, [pc, #132]	@ (8001968 <MX_GPIO_Init+0x188>)
 80018e4:	f001 ff58 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PD9_Pin|PD11_Pin|PD13_Pin|PD14_Pin;
 80018e8:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	481b      	ldr	r0, [pc, #108]	@ (800196c <MX_GPIO_Init+0x18c>)
 8001900:	f001 ff4a 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001904:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190a:	2312      	movs	r3, #18
 800190c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800190e:	2301      	movs	r3, #1
 8001910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001916:	2304      	movs	r3, #4
 8001918:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	4813      	ldr	r0, [pc, #76]	@ (8001970 <MX_GPIO_Init+0x190>)
 8001922:	f001 ff39 	bl	8003798 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	2006      	movs	r0, #6
 800192c:	f001 fa9d 	bl	8002e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001930:	2006      	movs	r0, #6
 8001932:	f001 fab6 	bl	8002ea2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	2017      	movs	r0, #23
 800193c:	f001 fa95 	bl	8002e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001940:	2017      	movs	r0, #23
 8001942:	f001 faae 	bl	8002ea2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	2028      	movs	r0, #40	@ 0x28
 800194c:	f001 fa8d 	bl	8002e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001950:	2028      	movs	r0, #40	@ 0x28
 8001952:	f001 faa6 	bl	8002ea2 <HAL_NVIC_EnableIRQ>

}
 8001956:	bf00      	nop
 8001958:	3728      	adds	r7, #40	@ 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	40020800 	.word	0x40020800
 8001968:	40020000 	.word	0x40020000
 800196c:	40020c00 	.word	0x40020c00
 8001970:	40020400 	.word	0x40020400

08001974 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001978:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <MX_I2C3_Init+0x50>)
 800197a:	4a13      	ldr	r2, [pc, #76]	@ (80019c8 <MX_I2C3_Init+0x54>)
 800197c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800197e:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <MX_I2C3_Init+0x50>)
 8001980:	4a12      	ldr	r2, [pc, #72]	@ (80019cc <MX_I2C3_Init+0x58>)
 8001982:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001984:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <MX_I2C3_Init+0x50>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800198a:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <MX_I2C3_Init+0x50>)
 800198c:	2200      	movs	r2, #0
 800198e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001990:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <MX_I2C3_Init+0x50>)
 8001992:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001996:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001998:	4b0a      	ldr	r3, [pc, #40]	@ (80019c4 <MX_I2C3_Init+0x50>)
 800199a:	2200      	movs	r2, #0
 800199c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <MX_I2C3_Init+0x50>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019a4:	4b07      	ldr	r3, [pc, #28]	@ (80019c4 <MX_I2C3_Init+0x50>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <MX_I2C3_Init+0x50>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80019b0:	4804      	ldr	r0, [pc, #16]	@ (80019c4 <MX_I2C3_Init+0x50>)
 80019b2:	f003 fd95 	bl	80054e0 <HAL_I2C_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80019bc:	f000 fb14 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000220 	.word	0x20000220
 80019c8:	40005c00 	.word	0x40005c00
 80019cc:	00061a80 	.word	0x00061a80

080019d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	@ 0x28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a29      	ldr	r2, [pc, #164]	@ (8001a94 <HAL_I2C_MspInit+0xc4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d14b      	bne.n	8001a8a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	4b28      	ldr	r3, [pc, #160]	@ (8001a98 <HAL_I2C_MspInit+0xc8>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	4a27      	ldr	r2, [pc, #156]	@ (8001a98 <HAL_I2C_MspInit+0xc8>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a02:	4b25      	ldr	r3, [pc, #148]	@ (8001a98 <HAL_I2C_MspInit+0xc8>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b21      	ldr	r3, [pc, #132]	@ (8001a98 <HAL_I2C_MspInit+0xc8>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	4a20      	ldr	r2, [pc, #128]	@ (8001a98 <HAL_I2C_MspInit+0xc8>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a98 <HAL_I2C_MspInit+0xc8>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a30:	2312      	movs	r3, #18
 8001a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	4815      	ldr	r0, [pc, #84]	@ (8001a9c <HAL_I2C_MspInit+0xcc>)
 8001a48:	f001 fea6 	bl	8003798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a52:	2312      	movs	r3, #18
 8001a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a5e:	2304      	movs	r3, #4
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	480d      	ldr	r0, [pc, #52]	@ (8001aa0 <HAL_I2C_MspInit+0xd0>)
 8001a6a:	f001 fe95 	bl	8003798 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	4b09      	ldr	r3, [pc, #36]	@ (8001a98 <HAL_I2C_MspInit+0xc8>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a76:	4a08      	ldr	r2, [pc, #32]	@ (8001a98 <HAL_I2C_MspInit+0xc8>)
 8001a78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a7e:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_I2C_MspInit+0xc8>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	3728      	adds	r7, #40	@ 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40005c00 	.word	0x40005c00
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020800 	.word	0x40020800
 8001aa0:	40020000 	.word	0x40020000

08001aa4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae0 <HAL_I2C_MspDeInit+0x3c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d10f      	bne.n	8001ad6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <HAL_I2C_MspDeInit+0x40>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <HAL_I2C_MspDeInit+0x40>)
 8001abc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001ac0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8001ac2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ac6:	4808      	ldr	r0, [pc, #32]	@ (8001ae8 <HAL_I2C_MspDeInit+0x44>)
 8001ac8:	f001 ffea 	bl	8003aa0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8001acc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ad0:	4806      	ldr	r0, [pc, #24]	@ (8001aec <HAL_I2C_MspDeInit+0x48>)
 8001ad2:	f001 ffe5 	bl	8003aa0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40005c00 	.word	0x40005c00
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40020800 	.word	0x40020800
 8001aec:	40020000 	.word	0x40020000

08001af0 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001af4:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <MX_I2S3_Init+0x54>)
 8001af6:	4a14      	ldr	r2, [pc, #80]	@ (8001b48 <MX_I2S3_Init+0x58>)
 8001af8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001afa:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <MX_I2S3_Init+0x54>)
 8001afc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b00:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001b02:	4b10      	ldr	r3, [pc, #64]	@ (8001b44 <MX_I2S3_Init+0x54>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001b08:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <MX_I2S3_Init+0x54>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b44 <MX_I2S3_Init+0x54>)
 8001b10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b14:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <MX_I2S3_Init+0x54>)
 8001b18:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001b1c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001b1e:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <MX_I2S3_Init+0x54>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001b24:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <MX_I2S3_Init+0x54>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001b2a:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <MX_I2S3_Init+0x54>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001b30:	4804      	ldr	r0, [pc, #16]	@ (8001b44 <MX_I2S3_Init+0x54>)
 8001b32:	f004 ff81 	bl	8006a38 <HAL_I2S_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001b3c:	f000 fa54 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000274 	.word	0x20000274
 8001b48:	40003c00 	.word	0x40003c00

08001b4c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b090      	sub	sp, #64	@ 0x40
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
 8001b74:	615a      	str	r2, [r3, #20]
  if(i2sHandle->Instance==SPI3)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a4f      	ldr	r2, [pc, #316]	@ (8001cb8 <HAL_I2S_MspInit+0x16c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	f040 8097 	bne.w	8001cb0 <HAL_I2S_MspInit+0x164>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001b82:	2301      	movs	r3, #1
 8001b84:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001b86:	23c8      	movs	r3, #200	@ 0xc8
 8001b88:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001b8a:	2305      	movs	r3, #5
 8001b8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4618      	mov	r0, r3
 8001b98:	f006 fc72 	bl	8008480 <HAL_RCCEx_PeriphCLKConfig>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8001ba2:	f000 fa21 	bl	8001fe8 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	4b44      	ldr	r3, [pc, #272]	@ (8001cbc <HAL_I2S_MspInit+0x170>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	4a43      	ldr	r2, [pc, #268]	@ (8001cbc <HAL_I2S_MspInit+0x170>)
 8001bb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb6:	4b41      	ldr	r3, [pc, #260]	@ (8001cbc <HAL_I2S_MspInit+0x170>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b3d      	ldr	r3, [pc, #244]	@ (8001cbc <HAL_I2S_MspInit+0x170>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	4a3c      	ldr	r2, [pc, #240]	@ (8001cbc <HAL_I2S_MspInit+0x170>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd2:	4b3a      	ldr	r3, [pc, #232]	@ (8001cbc <HAL_I2S_MspInit+0x170>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	4b36      	ldr	r3, [pc, #216]	@ (8001cbc <HAL_I2S_MspInit+0x170>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	4a35      	ldr	r2, [pc, #212]	@ (8001cbc <HAL_I2S_MspInit+0x170>)
 8001be8:	f043 0304 	orr.w	r3, r3, #4
 8001bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bee:	4b33      	ldr	r3, [pc, #204]	@ (8001cbc <HAL_I2S_MspInit+0x170>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bfa:	2310      	movs	r3, #16
 8001bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c0a:	2306      	movs	r3, #6
 8001c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c12:	4619      	mov	r1, r3
 8001c14:	482a      	ldr	r0, [pc, #168]	@ (8001cc0 <HAL_I2S_MspInit+0x174>)
 8001c16:	f001 fdbf 	bl	8003798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001c1a:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c2c:	2306      	movs	r3, #6
 8001c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c34:	4619      	mov	r1, r3
 8001c36:	4823      	ldr	r0, [pc, #140]	@ (8001cc4 <HAL_I2S_MspInit+0x178>)
 8001c38:	f001 fdae 	bl	8003798 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001c3c:	4b22      	ldr	r3, [pc, #136]	@ (8001cc8 <HAL_I2S_MspInit+0x17c>)
 8001c3e:	4a23      	ldr	r2, [pc, #140]	@ (8001ccc <HAL_I2S_MspInit+0x180>)
 8001c40:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001c42:	4b21      	ldr	r3, [pc, #132]	@ (8001cc8 <HAL_I2S_MspInit+0x17c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c48:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc8 <HAL_I2S_MspInit+0x17c>)
 8001c4a:	2240      	movs	r2, #64	@ 0x40
 8001c4c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc8 <HAL_I2S_MspInit+0x17c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c54:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc8 <HAL_I2S_MspInit+0x17c>)
 8001c56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c5a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc8 <HAL_I2S_MspInit+0x17c>)
 8001c5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c62:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c64:	4b18      	ldr	r3, [pc, #96]	@ (8001cc8 <HAL_I2S_MspInit+0x17c>)
 8001c66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c6a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001c6c:	4b16      	ldr	r3, [pc, #88]	@ (8001cc8 <HAL_I2S_MspInit+0x17c>)
 8001c6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c72:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c74:	4b14      	ldr	r3, [pc, #80]	@ (8001cc8 <HAL_I2S_MspInit+0x17c>)
 8001c76:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001c7a:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c7c:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <HAL_I2S_MspInit+0x17c>)
 8001c7e:	2204      	movs	r2, #4
 8001c80:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001c82:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <HAL_I2S_MspInit+0x17c>)
 8001c84:	2203      	movs	r2, #3
 8001c86:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001c88:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc8 <HAL_I2S_MspInit+0x17c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc8 <HAL_I2S_MspInit+0x17c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001c94:	480c      	ldr	r0, [pc, #48]	@ (8001cc8 <HAL_I2S_MspInit+0x17c>)
 8001c96:	f001 f91f 	bl	8002ed8 <HAL_DMA_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_I2S_MspInit+0x158>
    {
      Error_Handler();
 8001ca0:	f000 f9a2 	bl	8001fe8 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a08      	ldr	r2, [pc, #32]	@ (8001cc8 <HAL_I2S_MspInit+0x17c>)
 8001ca8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001caa:	4a07      	ldr	r2, [pc, #28]	@ (8001cc8 <HAL_I2S_MspInit+0x17c>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3740      	adds	r7, #64	@ 0x40
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40003c00 	.word	0x40003c00
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40020000 	.word	0x40020000
 8001cc4:	40020800 	.word	0x40020800
 8001cc8:	200002bc 	.word	0x200002bc
 8001ccc:	40026088 	.word	0x40026088

08001cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd4:	f000 ff58 	bl	8002b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd8:	f000 f8d0 	bl	8001e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cdc:	f7ff fd80 	bl	80017e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ce0:	f7ff fd40 	bl	8001764 <MX_DMA_Init>
  MX_I2S3_Init();
 8001ce4:	f7ff ff04 	bl	8001af0 <MX_I2S3_Init>
  MX_FATFS_Init();
 8001ce8:	f008 f9f8 	bl	800a0dc <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001cec:	f00e fdf2 	bl	80108d4 <MX_USB_HOST_Init>
  //MX_USART1_UART_Init();
  MX_I2C3_Init();
 8001cf0:	f7ff fe40 	bl	8001974 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  display_Init();
 8001cf4:	f7ff fbc0 	bl	8001478 <display_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001cf8:	f00e fe12 	bl	8010920 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

   	    if (Appli_state == APPLICATION_READY)
 8001cfc:	4b56      	ldr	r3, [pc, #344]	@ (8001e58 <main+0x188>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d1f9      	bne.n	8001cf8 <main+0x28>
   	    {
   	    	Mount_USB();
 8001d04:	f7ff f876 	bl	8000df4 <Mount_USB>
   	    	AUDIO_PLAYER_Start(idx);
 8001d08:	4b54      	ldr	r3, [pc, #336]	@ (8001e5c <main+0x18c>)
 8001d0a:	f993 3000 	ldrsb.w	r3, [r3]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fd75 	bl	8002800 <AUDIO_PLAYER_Start>
   	    	display_cancion(idx);
 8001d16:	4b51      	ldr	r3, [pc, #324]	@ (8001e5c <main+0x18c>)
 8001d18:	f993 3000 	ldrsb.w	r3, [r3]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fc57 	bl	80015d0 <display_cancion>
   	    	Activar_Parlante(idS);
 8001d22:	4b4f      	ldr	r3, [pc, #316]	@ (8001e60 <main+0x190>)
 8001d24:	f993 3000 	ldrsb.w	r3, [r3]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f962 	bl	8001ff4 <Activar_Parlante>
   	    	while (1)
   	    	{
   	    		AUDIO_PLAYER_Process(FALSE);
 8001d30:	2000      	movs	r0, #0
 8001d32:	f000 fdc5 	bl	80028c0 <AUDIO_PLAYER_Process>

   	    		if (next_song)
 8001d36:	4b4b      	ldr	r3, [pc, #300]	@ (8001e64 <main+0x194>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d019      	beq.n	8001d72 <main+0xa2>
   	    		{
   	    		    idx = idx + 1;
 8001d3e:	4b47      	ldr	r3, [pc, #284]	@ (8001e5c <main+0x18c>)
 8001d40:	f993 3000 	ldrsb.w	r3, [r3]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	3301      	adds	r3, #1
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	b25a      	sxtb	r2, r3
 8001d4c:	4b43      	ldr	r3, [pc, #268]	@ (8001e5c <main+0x18c>)
 8001d4e:	701a      	strb	r2, [r3, #0]
   	    		    /* Control de indice */
   	    		    if (idx >= cantidad_wavs)
 8001d50:	4b42      	ldr	r3, [pc, #264]	@ (8001e5c <main+0x18c>)
 8001d52:	f993 3000 	ldrsb.w	r3, [r3]
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b43      	ldr	r3, [pc, #268]	@ (8001e68 <main+0x198>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	db02      	blt.n	8001d66 <main+0x96>
   	    		    {
   	    		        idx = 0;
 8001d60:	4b3e      	ldr	r3, [pc, #248]	@ (8001e5c <main+0x18c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
   	    		    }
   	    		    AudioState = AUDIO_STATE_NEXT;
 8001d66:	4b41      	ldr	r3, [pc, #260]	@ (8001e6c <main+0x19c>)
 8001d68:	2205      	movs	r2, #5
 8001d6a:	701a      	strb	r2, [r3, #0]
   	    		    next_song = false;
 8001d6c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e64 <main+0x194>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
   	    		    //display_cancion(idx);
      	    	};

   	    		if (next_speaker)
 8001d72:	4b3f      	ldr	r3, [pc, #252]	@ (8001e70 <main+0x1a0>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d023      	beq.n	8001dc2 <main+0xf2>
   	    		{
   	    			idS = idS + 1;
 8001d7a:	4b39      	ldr	r3, [pc, #228]	@ (8001e60 <main+0x190>)
 8001d7c:	f993 3000 	ldrsb.w	r3, [r3]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	3301      	adds	r3, #1
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	b25a      	sxtb	r2, r3
 8001d88:	4b35      	ldr	r3, [pc, #212]	@ (8001e60 <main+0x190>)
 8001d8a:	701a      	strb	r2, [r3, #0]
   	    			/* Control de indice */
   	    			if(idS>NUM_PARLANTES - 1)
 8001d8c:	4b34      	ldr	r3, [pc, #208]	@ (8001e60 <main+0x190>)
 8001d8e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d92:	2b05      	cmp	r3, #5
 8001d94:	dd02      	ble.n	8001d9c <main+0xcc>
   	    			{
   	    				idS = 0;
 8001d96:	4b32      	ldr	r3, [pc, #200]	@ (8001e60 <main+0x190>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
   	    			}
   	    			Activar_Parlante(idS);
 8001d9c:	4b30      	ldr	r3, [pc, #192]	@ (8001e60 <main+0x190>)
 8001d9e:	f993 3000 	ldrsb.w	r3, [r3]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 f925 	bl	8001ff4 <Activar_Parlante>
   	    			next_speaker = false;
 8001daa:	4b31      	ldr	r3, [pc, #196]	@ (8001e70 <main+0x1a0>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
   	    			display_cancion(idx);
 8001db0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e5c <main+0x18c>)
 8001db2:	f993 3000 	ldrsb.w	r3, [r3]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fc0a 	bl	80015d0 <display_cancion>
   	    			AudioState = AUDIO_STATE_PLAY;
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001e6c <main+0x19c>)
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	701a      	strb	r2, [r3, #0]
   	    		}

   	    		if (prev_song)
 8001dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e74 <main+0x1a4>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d020      	beq.n	8001e0c <main+0x13c>
   	    		{
   	    			idx = idx - 1;
 8001dca:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <main+0x18c>)
 8001dcc:	f993 3000 	ldrsb.w	r3, [r3]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	b25a      	sxtb	r2, r3
 8001dd8:	4b20      	ldr	r3, [pc, #128]	@ (8001e5c <main+0x18c>)
 8001dda:	701a      	strb	r2, [r3, #0]
   	    			/* Control de indice */
   	    			if(idx<0)
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <main+0x18c>)
 8001dde:	f993 3000 	ldrsb.w	r3, [r3]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	da06      	bge.n	8001df4 <main+0x124>
   	    			{
   	    				idx = cantidad_wavs-1;
 8001de6:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <main+0x198>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	b25a      	sxtb	r2, r3
 8001df0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e5c <main+0x18c>)
 8001df2:	701a      	strb	r2, [r3, #0]
   	    			}
   	    			AudioState = AUDIO_STATE_PREVIOUS;
 8001df4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e6c <main+0x19c>)
 8001df6:	2206      	movs	r2, #6
 8001df8:	701a      	strb	r2, [r3, #0]
   	    			prev_song = false;
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001e74 <main+0x1a4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
   	    			display_cancion(idx);
 8001e00:	4b16      	ldr	r3, [pc, #88]	@ (8001e5c <main+0x18c>)
 8001e02:	f993 3000 	ldrsb.w	r3, [r3]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fbe2 	bl	80015d0 <display_cancion>
   	    		};

   	    		if (prev_speaker)
 8001e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e78 <main+0x1a8>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d08d      	beq.n	8001d30 <main+0x60>

   	    		{
   	    			idS = idS - 1;
 8001e14:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <main+0x190>)
 8001e16:	f993 3000 	ldrsb.w	r3, [r3]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	b25a      	sxtb	r2, r3
 8001e22:	4b0f      	ldr	r3, [pc, #60]	@ (8001e60 <main+0x190>)
 8001e24:	701a      	strb	r2, [r3, #0]
   	    			/* Control de indice */
   	    			if(idS<0)
 8001e26:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <main+0x190>)
 8001e28:	f993 3000 	ldrsb.w	r3, [r3]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	da02      	bge.n	8001e36 <main+0x166>
   	    			{
   	    				idS = NUM_PARLANTES - 1;
 8001e30:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <main+0x190>)
 8001e32:	2205      	movs	r2, #5
 8001e34:	701a      	strb	r2, [r3, #0]
   	    			}
   	    			Activar_Parlante(idS);
 8001e36:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <main+0x190>)
 8001e38:	f993 3000 	ldrsb.w	r3, [r3]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 f8d8 	bl	8001ff4 <Activar_Parlante>
   	    			prev_speaker = false;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <main+0x1a8>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
   	    			display_cancion(idx);
 8001e4a:	4b04      	ldr	r3, [pc, #16]	@ (8001e5c <main+0x18c>)
 8001e4c:	f993 3000 	ldrsb.w	r3, [r3]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fbbd 	bl	80015d0 <display_cancion>
   	    		AUDIO_PLAYER_Process(FALSE);
 8001e56:	e76b      	b.n	8001d30 <main+0x60>
 8001e58:	200026c4 	.word	0x200026c4
 8001e5c:	20000322 	.word	0x20000322
 8001e60:	20000323 	.word	0x20000323
 8001e64:	2000031e 	.word	0x2000031e
 8001e68:	20000048 	.word	0x20000048
 8001e6c:	2000183c 	.word	0x2000183c
 8001e70:	20000320 	.word	0x20000320
 8001e74:	2000031f 	.word	0x2000031f
 8001e78:	20000321 	.word	0x20000321

08001e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b094      	sub	sp, #80	@ 0x50
 8001e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e82:	f107 0320 	add.w	r3, r7, #32
 8001e86:	2230      	movs	r2, #48	@ 0x30
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f00f f918 	bl	80110c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	4b27      	ldr	r3, [pc, #156]	@ (8001f44 <SystemClock_Config+0xc8>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea8:	4a26      	ldr	r2, [pc, #152]	@ (8001f44 <SystemClock_Config+0xc8>)
 8001eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eb0:	4b24      	ldr	r3, [pc, #144]	@ (8001f44 <SystemClock_Config+0xc8>)
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	4b21      	ldr	r3, [pc, #132]	@ (8001f48 <SystemClock_Config+0xcc>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a20      	ldr	r2, [pc, #128]	@ (8001f48 <SystemClock_Config+0xcc>)
 8001ec6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f48 <SystemClock_Config+0xcc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001edc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ee6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001eec:	2304      	movs	r3, #4
 8001eee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001ef0:	23c0      	movs	r3, #192	@ 0xc0
 8001ef2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001ef8:	2308      	movs	r3, #8
 8001efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001efc:	f107 0320 	add.w	r3, r7, #32
 8001f00:	4618      	mov	r0, r3
 8001f02:	f005 fe39 	bl	8007b78 <HAL_RCC_OscConfig>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f0c:	f000 f86c 	bl	8001fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f10:	230f      	movs	r3, #15
 8001f12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f14:	2302      	movs	r3, #2
 8001f16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f1c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f26:	f107 030c 	add.w	r3, r7, #12
 8001f2a:	2103      	movs	r1, #3
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f006 f89b 	bl	8008068 <HAL_RCC_ClockConfig>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f38:	f000 f856 	bl	8001fe8 <Error_Handler>
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	3750      	adds	r7, #80	@ 0x50
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40007000 	.word	0x40007000

08001f4c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)  // Cambiá esto si usás otro UART
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a07      	ldr	r2, [pc, #28]	@ (8001f78 <HAL_UART_RxCpltCallback+0x2c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d107      	bne.n	8001f6e <HAL_UART_RxCpltCallback+0x22>
    {
        uart_cmd_received = true;
 8001f5e:	4b07      	ldr	r3, [pc, #28]	@ (8001f7c <HAL_UART_RxCpltCallback+0x30>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]

        // Reinicia la recepción para recibir el próximo byte
        HAL_UART_Receive_IT(&huart1, &uart_rx_byte, 1);
 8001f64:	2201      	movs	r2, #1
 8001f66:	4906      	ldr	r1, [pc, #24]	@ (8001f80 <HAL_UART_RxCpltCallback+0x34>)
 8001f68:	4806      	ldr	r0, [pc, #24]	@ (8001f84 <HAL_UART_RxCpltCallback+0x38>)
 8001f6a:	f006 fc1b 	bl	80087a4 <HAL_UART_Receive_IT>
    }
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40011000 	.word	0x40011000
 8001f7c:	2000031d 	.word	0x2000031d
 8001f80:	2000031c 	.word	0x2000031c
 8001f84:	20000730 	.word	0x20000730

08001f88 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == PD14_Pin)
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f98:	d102      	bne.n	8001fa0 <HAL_GPIO_EXTI_Callback+0x18>
	{
		next_song = true;
 8001f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd8 <HAL_GPIO_EXTI_Callback+0x50>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == PD13_Pin)
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fa6:	d102      	bne.n	8001fae <HAL_GPIO_EXTI_Callback+0x26>
	{
		next_speaker = true;
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <HAL_GPIO_EXTI_Callback+0x54>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == PD11_Pin)
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fb4:	d102      	bne.n	8001fbc <HAL_GPIO_EXTI_Callback+0x34>
	{
		prev_speaker = true;
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <HAL_GPIO_EXTI_Callback+0x58>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == PD9_Pin)
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fc2:	d102      	bne.n	8001fca <HAL_GPIO_EXTI_Callback+0x42>
	{
		prev_song = true;
 8001fc4:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
	}
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	2000031e 	.word	0x2000031e
 8001fdc:	20000320 	.word	0x20000320
 8001fe0:	20000321 	.word	0x20000321
 8001fe4:	2000031f 	.word	0x2000031f

08001fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fec:	b672      	cpsid	i
}
 8001fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <Error_Handler+0x8>

08001ff4 <Activar_Parlante>:
};


void Parlantes_Init(void) {}

void Activar_Parlante(uint8_t numero) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < NUM_PARLANTES; i++) {
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	e021      	b.n	8002048 <Activar_Parlante+0x54>
        if (i == (numero)) {
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	429a      	cmp	r2, r3
 800200a:	d10d      	bne.n	8002028 <Activar_Parlante+0x34>
            HAL_GPIO_WritePin(parlantes[i].puerto, parlantes[i].pin, GPIO_PIN_RESET);
 800200c:	4a12      	ldr	r2, [pc, #72]	@ (8002058 <Activar_Parlante+0x64>)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002014:	4a10      	ldr	r2, [pc, #64]	@ (8002058 <Activar_Parlante+0x64>)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4413      	add	r3, r2
 800201c:	889b      	ldrh	r3, [r3, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	4619      	mov	r1, r3
 8002022:	f001 fe21 	bl	8003c68 <HAL_GPIO_WritePin>
 8002026:	e00c      	b.n	8002042 <Activar_Parlante+0x4e>
        } else {
            HAL_GPIO_WritePin(parlantes[i].puerto, parlantes[i].pin, GPIO_PIN_SET);
 8002028:	4a0b      	ldr	r2, [pc, #44]	@ (8002058 <Activar_Parlante+0x64>)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002030:	4a09      	ldr	r2, [pc, #36]	@ (8002058 <Activar_Parlante+0x64>)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	889b      	ldrh	r3, [r3, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	4619      	mov	r1, r3
 800203e:	f001 fe13 	bl	8003c68 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_PARLANTES; i++) {
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3301      	adds	r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b05      	cmp	r3, #5
 800204c:	ddda      	ble.n	8002004 <Activar_Parlante+0x10>
        }
    }
}
 800204e:	bf00      	nop
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	2000004c 	.word	0x2000004c

0800205c <SSD1306_Init>:
        }
    }
}

uint8_t SSD1306_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
	SSD1306_I2C_Init();
 8002062:	f000 fa27 	bl	80024b4 <SSD1306_I2C_Init>
	if(HAL_I2C_IsDeviceReady(&hi2c3, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK){
 8002066:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800206a:	2201      	movs	r2, #1
 800206c:	2178      	movs	r1, #120	@ 0x78
 800206e:	485b      	ldr	r0, [pc, #364]	@ (80021dc <SSD1306_Init+0x180>)
 8002070:	f003 ffc8 	bl	8006004 <HAL_I2C_IsDeviceReady>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <SSD1306_Init+0x22>
		return 0;
 800207a:	2300      	movs	r3, #0
 800207c:	e0a9      	b.n	80021d2 <SSD1306_Init+0x176>
	}

	uint32_t p = 2500;
 800207e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002082:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002084:	e002      	b.n	800208c <SSD1306_Init+0x30>
		p--;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3b01      	subs	r3, #1
 800208a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f9      	bne.n	8002086 <SSD1306_Init+0x2a>

	SSD1306_WRITECOMMAND(0xAE);
 8002092:	22ae      	movs	r2, #174	@ 0xae
 8002094:	2100      	movs	r1, #0
 8002096:	2078      	movs	r0, #120	@ 0x78
 8002098:	f000 fa88 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 800209c:	2220      	movs	r2, #32
 800209e:	2100      	movs	r1, #0
 80020a0:	2078      	movs	r0, #120	@ 0x78
 80020a2:	f000 fa83 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 80020a6:	2210      	movs	r2, #16
 80020a8:	2100      	movs	r1, #0
 80020aa:	2078      	movs	r0, #120	@ 0x78
 80020ac:	f000 fa7e 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 80020b0:	22b0      	movs	r2, #176	@ 0xb0
 80020b2:	2100      	movs	r1, #0
 80020b4:	2078      	movs	r0, #120	@ 0x78
 80020b6:	f000 fa79 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 80020ba:	22c8      	movs	r2, #200	@ 0xc8
 80020bc:	2100      	movs	r1, #0
 80020be:	2078      	movs	r0, #120	@ 0x78
 80020c0:	f000 fa74 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 80020c4:	2200      	movs	r2, #0
 80020c6:	2100      	movs	r1, #0
 80020c8:	2078      	movs	r0, #120	@ 0x78
 80020ca:	f000 fa6f 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 80020ce:	2210      	movs	r2, #16
 80020d0:	2100      	movs	r1, #0
 80020d2:	2078      	movs	r0, #120	@ 0x78
 80020d4:	f000 fa6a 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 80020d8:	2240      	movs	r2, #64	@ 0x40
 80020da:	2100      	movs	r1, #0
 80020dc:	2078      	movs	r0, #120	@ 0x78
 80020de:	f000 fa65 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 80020e2:	2281      	movs	r2, #129	@ 0x81
 80020e4:	2100      	movs	r1, #0
 80020e6:	2078      	movs	r0, #120	@ 0x78
 80020e8:	f000 fa60 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80020ec:	22ff      	movs	r2, #255	@ 0xff
 80020ee:	2100      	movs	r1, #0
 80020f0:	2078      	movs	r0, #120	@ 0x78
 80020f2:	f000 fa5b 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 80020f6:	22a1      	movs	r2, #161	@ 0xa1
 80020f8:	2100      	movs	r1, #0
 80020fa:	2078      	movs	r0, #120	@ 0x78
 80020fc:	f000 fa56 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 8002100:	22a6      	movs	r2, #166	@ 0xa6
 8002102:	2100      	movs	r1, #0
 8002104:	2078      	movs	r0, #120	@ 0x78
 8002106:	f000 fa51 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 800210a:	22a8      	movs	r2, #168	@ 0xa8
 800210c:	2100      	movs	r1, #0
 800210e:	2078      	movs	r0, #120	@ 0x78
 8002110:	f000 fa4c 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 8002114:	223f      	movs	r2, #63	@ 0x3f
 8002116:	2100      	movs	r1, #0
 8002118:	2078      	movs	r0, #120	@ 0x78
 800211a:	f000 fa47 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 800211e:	22a4      	movs	r2, #164	@ 0xa4
 8002120:	2100      	movs	r1, #0
 8002122:	2078      	movs	r0, #120	@ 0x78
 8002124:	f000 fa42 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 8002128:	22d3      	movs	r2, #211	@ 0xd3
 800212a:	2100      	movs	r1, #0
 800212c:	2078      	movs	r0, #120	@ 0x78
 800212e:	f000 fa3d 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8002132:	2200      	movs	r2, #0
 8002134:	2100      	movs	r1, #0
 8002136:	2078      	movs	r0, #120	@ 0x78
 8002138:	f000 fa38 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 800213c:	22d5      	movs	r2, #213	@ 0xd5
 800213e:	2100      	movs	r1, #0
 8002140:	2078      	movs	r0, #120	@ 0x78
 8002142:	f000 fa33 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 8002146:	22f0      	movs	r2, #240	@ 0xf0
 8002148:	2100      	movs	r1, #0
 800214a:	2078      	movs	r0, #120	@ 0x78
 800214c:	f000 fa2e 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 8002150:	22d9      	movs	r2, #217	@ 0xd9
 8002152:	2100      	movs	r1, #0
 8002154:	2078      	movs	r0, #120	@ 0x78
 8002156:	f000 fa29 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 800215a:	2222      	movs	r2, #34	@ 0x22
 800215c:	2100      	movs	r1, #0
 800215e:	2078      	movs	r0, #120	@ 0x78
 8002160:	f000 fa24 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 8002164:	22da      	movs	r2, #218	@ 0xda
 8002166:	2100      	movs	r1, #0
 8002168:	2078      	movs	r0, #120	@ 0x78
 800216a:	f000 fa1f 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800216e:	2212      	movs	r2, #18
 8002170:	2100      	movs	r1, #0
 8002172:	2078      	movs	r0, #120	@ 0x78
 8002174:	f000 fa1a 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 8002178:	22db      	movs	r2, #219	@ 0xdb
 800217a:	2100      	movs	r1, #0
 800217c:	2078      	movs	r0, #120	@ 0x78
 800217e:	f000 fa15 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8002182:	2220      	movs	r2, #32
 8002184:	2100      	movs	r1, #0
 8002186:	2078      	movs	r0, #120	@ 0x78
 8002188:	f000 fa10 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 800218c:	228d      	movs	r2, #141	@ 0x8d
 800218e:	2100      	movs	r1, #0
 8002190:	2078      	movs	r0, #120	@ 0x78
 8002192:	f000 fa0b 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 8002196:	2214      	movs	r2, #20
 8002198:	2100      	movs	r1, #0
 800219a:	2078      	movs	r0, #120	@ 0x78
 800219c:	f000 fa06 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 80021a0:	22af      	movs	r2, #175	@ 0xaf
 80021a2:	2100      	movs	r1, #0
 80021a4:	2078      	movs	r0, #120	@ 0x78
 80021a6:	f000 fa01 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80021aa:	222e      	movs	r2, #46	@ 0x2e
 80021ac:	2100      	movs	r1, #0
 80021ae:	2078      	movs	r0, #120	@ 0x78
 80021b0:	f000 f9fc 	bl	80025ac <SSD1306_I2C_Write>
	SSD1306_Fill(BLACK);
 80021b4:	2000      	movs	r0, #0
 80021b6:	f000 f843 	bl	8002240 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80021ba:	f000 f813 	bl	80021e4 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 80021be:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <SSD1306_Init+0x184>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80021c4:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <SSD1306_Init+0x184>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 80021ca:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <SSD1306_Init+0x184>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	715a      	strb	r2, [r3, #5]
	return 1;
 80021d0:	2301      	movs	r3, #1
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000220 	.word	0x20000220
 80021e0:	20000724 	.word	0x20000724

080021e4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
	uint8_t m;
	for(m=0; m<8; m++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	71fb      	strb	r3, [r7, #7]
 80021ee:	e01d      	b.n	800222c <SSD1306_UpdateScreen+0x48>
	{
		SSD1306_WRITECOMMAND(0xB0 + m);
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	3b50      	subs	r3, #80	@ 0x50
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	2100      	movs	r1, #0
 80021fa:	2078      	movs	r0, #120	@ 0x78
 80021fc:	f000 f9d6 	bl	80025ac <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002200:	2200      	movs	r2, #0
 8002202:	2100      	movs	r1, #0
 8002204:	2078      	movs	r0, #120	@ 0x78
 8002206:	f000 f9d1 	bl	80025ac <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800220a:	2210      	movs	r2, #16
 800220c:	2100      	movs	r1, #0
 800220e:	2078      	movs	r0, #120	@ 0x78
 8002210:	f000 f9cc 	bl	80025ac <SSD1306_I2C_Write>
		SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	01db      	lsls	r3, r3, #7
 8002218:	4a08      	ldr	r2, [pc, #32]	@ (800223c <SSD1306_UpdateScreen+0x58>)
 800221a:	441a      	add	r2, r3
 800221c:	2380      	movs	r3, #128	@ 0x80
 800221e:	2140      	movs	r1, #64	@ 0x40
 8002220:	2078      	movs	r0, #120	@ 0x78
 8002222:	f000 f95d 	bl	80024e0 <SSD1306_I2C_WriteMulti>
	for(m=0; m<8; m++)
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	3301      	adds	r3, #1
 800222a:	71fb      	strb	r3, [r7, #7]
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	2b07      	cmp	r3, #7
 8002230:	d9de      	bls.n	80021f0 <SSD1306_UpdateScreen+0xc>
	}
}
 8002232:	bf00      	nop
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000324 	.word	0x20000324

08002240 <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <SSD1306_Fill+0x14>
 8002250:	2300      	movs	r3, #0
 8002252:	e000      	b.n	8002256 <SSD1306_Fill+0x16>
 8002254:	23ff      	movs	r3, #255	@ 0xff
 8002256:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800225a:	4619      	mov	r1, r3
 800225c:	4803      	ldr	r0, [pc, #12]	@ (800226c <SSD1306_Fill+0x2c>)
 800225e:	f00e ff2f 	bl	80110c0 <memset>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000324 	.word	0x20000324

08002270 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	80fb      	strh	r3, [r7, #6]
 800227a:	460b      	mov	r3, r1
 800227c:	80bb      	strh	r3, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	70fb      	strb	r3, [r7, #3]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	2b7f      	cmp	r3, #127	@ 0x7f
 8002286:	d848      	bhi.n	800231a <SSD1306_DrawPixel+0xaa>
 8002288:	88bb      	ldrh	r3, [r7, #4]
 800228a:	2b3f      	cmp	r3, #63	@ 0x3f
 800228c:	d845      	bhi.n	800231a <SSD1306_DrawPixel+0xaa>
		return;
	}

	if(SSD1306.Inverted){
 800228e:	4b26      	ldr	r3, [pc, #152]	@ (8002328 <SSD1306_DrawPixel+0xb8>)
 8002290:	791b      	ldrb	r3, [r3, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d006      	beq.n	80022a4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	2b00      	cmp	r3, #0
 800229a:	bf0c      	ite	eq
 800229c:	2301      	moveq	r3, #1
 800229e:	2300      	movne	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	70fb      	strb	r3, [r7, #3]
	}

	if(color == WHITE){
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d11a      	bne.n	80022e0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80022aa:	88fa      	ldrh	r2, [r7, #6]
 80022ac:	88bb      	ldrh	r3, [r7, #4]
 80022ae:	08db      	lsrs	r3, r3, #3
 80022b0:	b298      	uxth	r0, r3
 80022b2:	4603      	mov	r3, r0
 80022b4:	01db      	lsls	r3, r3, #7
 80022b6:	4413      	add	r3, r2
 80022b8:	4a1c      	ldr	r2, [pc, #112]	@ (800232c <SSD1306_DrawPixel+0xbc>)
 80022ba:	5cd3      	ldrb	r3, [r2, r3]
 80022bc:	b25a      	sxtb	r2, r3
 80022be:	88bb      	ldrh	r3, [r7, #4]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	2101      	movs	r1, #1
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	b25b      	sxtb	r3, r3
 80022cc:	4313      	orrs	r3, r2
 80022ce:	b259      	sxtb	r1, r3
 80022d0:	88fa      	ldrh	r2, [r7, #6]
 80022d2:	4603      	mov	r3, r0
 80022d4:	01db      	lsls	r3, r3, #7
 80022d6:	4413      	add	r3, r2
 80022d8:	b2c9      	uxtb	r1, r1
 80022da:	4a14      	ldr	r2, [pc, #80]	@ (800232c <SSD1306_DrawPixel+0xbc>)
 80022dc:	54d1      	strb	r1, [r2, r3]
 80022de:	e01d      	b.n	800231c <SSD1306_DrawPixel+0xac>
	}else{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80022e0:	88fa      	ldrh	r2, [r7, #6]
 80022e2:	88bb      	ldrh	r3, [r7, #4]
 80022e4:	08db      	lsrs	r3, r3, #3
 80022e6:	b298      	uxth	r0, r3
 80022e8:	4603      	mov	r3, r0
 80022ea:	01db      	lsls	r3, r3, #7
 80022ec:	4413      	add	r3, r2
 80022ee:	4a0f      	ldr	r2, [pc, #60]	@ (800232c <SSD1306_DrawPixel+0xbc>)
 80022f0:	5cd3      	ldrb	r3, [r2, r3]
 80022f2:	b25a      	sxtb	r2, r3
 80022f4:	88bb      	ldrh	r3, [r7, #4]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	2101      	movs	r1, #1
 80022fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002300:	b25b      	sxtb	r3, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	b25b      	sxtb	r3, r3
 8002306:	4013      	ands	r3, r2
 8002308:	b259      	sxtb	r1, r3
 800230a:	88fa      	ldrh	r2, [r7, #6]
 800230c:	4603      	mov	r3, r0
 800230e:	01db      	lsls	r3, r3, #7
 8002310:	4413      	add	r3, r2
 8002312:	b2c9      	uxtb	r1, r1
 8002314:	4a05      	ldr	r2, [pc, #20]	@ (800232c <SSD1306_DrawPixel+0xbc>)
 8002316:	54d1      	strb	r1, [r2, r3]
 8002318:	e000      	b.n	800231c <SSD1306_DrawPixel+0xac>
		return;
 800231a:	bf00      	nop
	}
}
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000724 	.word	0x20000724
 800232c:	20000324 	.word	0x20000324

08002330 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	460a      	mov	r2, r1
 800233a:	80fb      	strh	r3, [r7, #6]
 800233c:	4613      	mov	r3, r2
 800233e:	80bb      	strh	r3, [r7, #4]
	SSD1306.CurrentX = x;
 8002340:	4a05      	ldr	r2, [pc, #20]	@ (8002358 <SSD1306_GotoXY+0x28>)
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002346:	4a04      	ldr	r2, [pc, #16]	@ (8002358 <SSD1306_GotoXY+0x28>)
 8002348:	88bb      	ldrh	r3, [r7, #4]
 800234a:	8053      	strh	r3, [r2, #2]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	20000724 	.word	0x20000724

0800235c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
 8002368:	4613      	mov	r3, r2
 800236a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	if(SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) || SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)){
 800236c:	4b39      	ldr	r3, [pc, #228]	@ (8002454 <SSD1306_Putc+0xf8>)
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	4413      	add	r3, r2
 8002378:	2b7f      	cmp	r3, #127	@ 0x7f
 800237a:	dc07      	bgt.n	800238c <SSD1306_Putc+0x30>
 800237c:	4b35      	ldr	r3, [pc, #212]	@ (8002454 <SSD1306_Putc+0xf8>)
 800237e:	885b      	ldrh	r3, [r3, #2]
 8002380:	461a      	mov	r2, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	785b      	ldrb	r3, [r3, #1]
 8002386:	4413      	add	r3, r2
 8002388:	2b3f      	cmp	r3, #63	@ 0x3f
 800238a:	dd01      	ble.n	8002390 <SSD1306_Putc+0x34>
		return 0;
 800238c:	2300      	movs	r3, #0
 800238e:	e05d      	b.n	800244c <SSD1306_Putc+0xf0>
	}

	for(i=0; i<Font->FontHeight; i++){
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	e04b      	b.n	800242e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	3b20      	subs	r3, #32
 800239e:	6839      	ldr	r1, [r7, #0]
 80023a0:	7849      	ldrb	r1, [r1, #1]
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	4619      	mov	r1, r3
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	440b      	add	r3, r1
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	60fb      	str	r3, [r7, #12]
		for(j=0; j<Font->FontWidth; j++){
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	e030      	b.n	800241c <SSD1306_Putc+0xc0>
			if((b << j) & 0x8000){
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d010      	beq.n	80023ec <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80023ca:	4b22      	ldr	r3, [pc, #136]	@ (8002454 <SSD1306_Putc+0xf8>)
 80023cc:	881a      	ldrh	r2, [r3, #0]
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	b298      	uxth	r0, r3
 80023d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002454 <SSD1306_Putc+0xf8>)
 80023d8:	885a      	ldrh	r2, [r3, #2]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	4413      	add	r3, r2
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	79ba      	ldrb	r2, [r7, #6]
 80023e4:	4619      	mov	r1, r3
 80023e6:	f7ff ff43 	bl	8002270 <SSD1306_DrawPixel>
 80023ea:	e014      	b.n	8002416 <SSD1306_Putc+0xba>
			}else{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80023ec:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <SSD1306_Putc+0xf8>)
 80023ee:	881a      	ldrh	r2, [r3, #0]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	4413      	add	r3, r2
 80023f6:	b298      	uxth	r0, r3
 80023f8:	4b16      	ldr	r3, [pc, #88]	@ (8002454 <SSD1306_Putc+0xf8>)
 80023fa:	885a      	ldrh	r2, [r3, #2]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	4413      	add	r3, r2
 8002402:	b299      	uxth	r1, r3
 8002404:	79bb      	ldrb	r3, [r7, #6]
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf0c      	ite	eq
 800240a:	2301      	moveq	r3, #1
 800240c:	2300      	movne	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	f7ff ff2d 	bl	8002270 <SSD1306_DrawPixel>
		for(j=0; j<Font->FontWidth; j++){
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	3301      	adds	r3, #1
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4293      	cmp	r3, r2
 8002426:	d3c8      	bcc.n	80023ba <SSD1306_Putc+0x5e>
	for(i=0; i<Font->FontHeight; i++){
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3301      	adds	r3, #1
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	785b      	ldrb	r3, [r3, #1]
 8002432:	461a      	mov	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	4293      	cmp	r3, r2
 8002438:	d3ad      	bcc.n	8002396 <SSD1306_Putc+0x3a>
			}
		}
	}
	SSD1306.CurrentX += Font->FontWidth;
 800243a:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <SSD1306_Putc+0xf8>)
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	7812      	ldrb	r2, [r2, #0]
 8002442:	4413      	add	r3, r2
 8002444:	b29a      	uxth	r2, r3
 8002446:	4b03      	ldr	r3, [pc, #12]	@ (8002454 <SSD1306_Putc+0xf8>)
 8002448:	801a      	strh	r2, [r3, #0]
	return ch;
 800244a:	79fb      	ldrb	r3, [r7, #7]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000724 	.word	0x20000724

08002458 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	4613      	mov	r3, r2
 8002464:	71fb      	strb	r3, [r7, #7]
	while(*str)
 8002466:	e012      	b.n	800248e <SSD1306_Puts+0x36>
	{
		if(SSD1306_Putc(*str, Font, color) != *str){
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	79fa      	ldrb	r2, [r7, #7]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff73 	bl	800235c <SSD1306_Putc>
 8002476:	4603      	mov	r3, r0
 8002478:	461a      	mov	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d002      	beq.n	8002488 <SSD1306_Puts+0x30>
			return *str;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	e008      	b.n	800249a <SSD1306_Puts+0x42>
		}
		str++;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3301      	adds	r3, #1
 800248c:	60fb      	str	r3, [r7, #12]
	while(*str)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1e8      	bne.n	8002468 <SSD1306_Puts+0x10>
	}
	return *str;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	781b      	ldrb	r3, [r3, #0]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <SSD1306_Clear>:
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}

void SSD1306_Clear(void)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7ff feca 	bl	8002240 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80024ac:	f7ff fe9a 	bl	80021e4 <SSD1306_UpdateScreen>
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <SSD1306_I2C_Init>:
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);
}

void SSD1306_I2C_Init(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 80024ba:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <SSD1306_I2C_Init+0x28>)
 80024bc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80024be:	e002      	b.n	80024c6 <SSD1306_I2C_Init+0x12>
		p--;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1f9      	bne.n	80024c0 <SSD1306_I2C_Init+0xc>
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	0003d090 	.word	0x0003d090

080024e0 <SSD1306_I2C_WriteMulti>:

void SSD1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count)
{
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b0c7      	sub	sp, #284	@ 0x11c
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	4604      	mov	r4, r0
 80024e8:	4608      	mov	r0, r1
 80024ea:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80024ee:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80024f2:	600a      	str	r2, [r1, #0]
 80024f4:	4619      	mov	r1, r3
 80024f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80024fa:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80024fe:	4622      	mov	r2, r4
 8002500:	701a      	strb	r2, [r3, #0]
 8002502:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002506:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800250a:	4602      	mov	r2, r0
 800250c:	701a      	strb	r2, [r3, #0]
 800250e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002512:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002516:	460a      	mov	r2, r1
 8002518:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 800251a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800251e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002522:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002526:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800252a:	7812      	ldrb	r2, [r2, #0]
 800252c:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 800252e:	2300      	movs	r3, #0
 8002530:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002534:	e015      	b.n	8002562 <SSD1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 8002536:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800253a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800253e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	441a      	add	r2, r3
 8002546:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800254a:	3301      	adds	r3, #1
 800254c:	7811      	ldrb	r1, [r2, #0]
 800254e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002552:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002556:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8002558:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800255c:	3301      	adds	r3, #1
 800255e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002562:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002566:	b29b      	uxth	r3, r3
 8002568:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800256c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002570:	8812      	ldrh	r2, [r2, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d8df      	bhi.n	8002536 <SSD1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c3, address, dt, count+1, 10);
 8002576:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800257a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	b299      	uxth	r1, r3
 8002582:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002586:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	3301      	adds	r3, #1
 800258e:	b29b      	uxth	r3, r3
 8002590:	f107 020c 	add.w	r2, r7, #12
 8002594:	200a      	movs	r0, #10
 8002596:	9000      	str	r0, [sp, #0]
 8002598:	4803      	ldr	r0, [pc, #12]	@ (80025a8 <SSD1306_I2C_WriteMulti+0xc8>)
 800259a:	f003 f915 	bl	80057c8 <HAL_I2C_Master_Transmit>
}
 800259e:	bf00      	nop
 80025a0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd90      	pop	{r4, r7, pc}
 80025a8:	20000220 	.word	0x20000220

080025ac <SSD1306_I2C_Write>:


void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
 80025b6:	460b      	mov	r3, r1
 80025b8:	71bb      	strb	r3, [r7, #6]
 80025ba:	4613      	mov	r3, r2
 80025bc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80025be:	79bb      	ldrb	r3, [r7, #6]
 80025c0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80025c2:	797b      	ldrb	r3, [r7, #5]
 80025c4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c3, address, dt, 2, 10);
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	b299      	uxth	r1, r3
 80025ca:	f107 020c 	add.w	r2, r7, #12
 80025ce:	230a      	movs	r3, #10
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	2302      	movs	r3, #2
 80025d4:	4803      	ldr	r0, [pc, #12]	@ (80025e4 <SSD1306_I2C_Write+0x38>)
 80025d6:	f003 f8f7 	bl	80057c8 <HAL_I2C_Master_Transmit>
}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000220 	.word	0x20000220

080025e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	4b10      	ldr	r3, [pc, #64]	@ (8002634 <HAL_MspInit+0x4c>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002634 <HAL_MspInit+0x4c>)
 80025f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002634 <HAL_MspInit+0x4c>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002606:	607b      	str	r3, [r7, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	603b      	str	r3, [r7, #0]
 800260e:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <HAL_MspInit+0x4c>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	4a08      	ldr	r2, [pc, #32]	@ (8002634 <HAL_MspInit+0x4c>)
 8002614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002618:	6413      	str	r3, [r2, #64]	@ 0x40
 800261a:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <HAL_MspInit+0x4c>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002626:	2007      	movs	r0, #7
 8002628:	f000 fc14 	bl	8002e54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40023800 	.word	0x40023800

08002638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800263c:	bf00      	nop
 800263e:	e7fd      	b.n	800263c <NMI_Handler+0x4>

08002640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <HardFault_Handler+0x4>

08002648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800264c:	bf00      	nop
 800264e:	e7fd      	b.n	800264c <MemManage_Handler+0x4>

08002650 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002654:	bf00      	nop
 8002656:	e7fd      	b.n	8002654 <BusFault_Handler+0x4>

08002658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <UsageFault_Handler+0x4>

08002660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800268e:	f000 facd 	bl	8002c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}

08002696 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800269a:	2001      	movs	r0, #1
 800269c:	f001 fafe 	bl	8003c9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80026a8:	4802      	ldr	r0, [pc, #8]	@ (80026b4 <DMA1_Stream5_IRQHandler+0x10>)
 80026aa:	f000 fe0b 	bl	80032c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	200002bc 	.word	0x200002bc

080026b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PD9_Pin);
 80026bc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80026c0:	f001 faec 	bl	8003c9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80026c4:	bf00      	nop
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026cc:	4802      	ldr	r0, [pc, #8]	@ (80026d8 <USART1_IRQHandler+0x10>)
 80026ce:	f006 f899 	bl	8008804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000730 	.word	0x20000730

080026dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PD11_Pin);
 80026e0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80026e4:	f001 fada 	bl	8003c9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PD13_Pin);
 80026e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80026ec:	f001 fad6 	bl	8003c9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PD14_Pin);
 80026f0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80026f4:	f001 fad2 	bl	8003c9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}

080026fc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002700:	4802      	ldr	r0, [pc, #8]	@ (800270c <DMA2_Stream2_IRQHandler+0x10>)
 8002702:	f000 fddf 	bl	80032c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000774 	.word	0x20000774

08002710 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002714:	4802      	ldr	r0, [pc, #8]	@ (8002720 <OTG_FS_IRQHandler+0x10>)
 8002716:	f001 fd43 	bl	80041a0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200026c8 	.word	0x200026c8

08002724 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002728:	4802      	ldr	r0, [pc, #8]	@ (8002734 <DMA2_Stream7_IRQHandler+0x10>)
 800272a:	f000 fdcb 	bl	80032c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200007d4 	.word	0x200007d4

08002738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002740:	4a14      	ldr	r2, [pc, #80]	@ (8002794 <_sbrk+0x5c>)
 8002742:	4b15      	ldr	r3, [pc, #84]	@ (8002798 <_sbrk+0x60>)
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800274c:	4b13      	ldr	r3, [pc, #76]	@ (800279c <_sbrk+0x64>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d102      	bne.n	800275a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002754:	4b11      	ldr	r3, [pc, #68]	@ (800279c <_sbrk+0x64>)
 8002756:	4a12      	ldr	r2, [pc, #72]	@ (80027a0 <_sbrk+0x68>)
 8002758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800275a:	4b10      	ldr	r3, [pc, #64]	@ (800279c <_sbrk+0x64>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	429a      	cmp	r2, r3
 8002766:	d207      	bcs.n	8002778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002768:	f00e fcec 	bl	8011144 <__errno>
 800276c:	4603      	mov	r3, r0
 800276e:	220c      	movs	r2, #12
 8002770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002772:	f04f 33ff 	mov.w	r3, #4294967295
 8002776:	e009      	b.n	800278c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002778:	4b08      	ldr	r3, [pc, #32]	@ (800279c <_sbrk+0x64>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800277e:	4b07      	ldr	r3, [pc, #28]	@ (800279c <_sbrk+0x64>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	4a05      	ldr	r2, [pc, #20]	@ (800279c <_sbrk+0x64>)
 8002788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800278a:	68fb      	ldr	r3, [r7, #12]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20020000 	.word	0x20020000
 8002798:	00000400 	.word	0x00000400
 800279c:	2000072c 	.word	0x2000072c
 80027a0:	20002b18 	.word	0x20002b18

080027a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027a8:	4b08      	ldr	r3, [pc, #32]	@ (80027cc <SystemInit+0x28>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ae:	4a07      	ldr	r2, [pc, #28]	@ (80027cc <SystemInit+0x28>)
 80027b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027b8:	4b04      	ldr	r3, [pc, #16]	@ (80027cc <SystemInit+0x28>)
 80027ba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80027be:	609a      	str	r2, [r3, #8]
#endif
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, uwVolume, AudioFreq) != 0)
 80027d8:	4b08      	ldr	r3, [pc, #32]	@ (80027fc <PlayerInit+0x2c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4619      	mov	r1, r3
 80027e2:	2002      	movs	r0, #2
 80027e4:	f7fd fe8e 	bl	8000504 <AUDIO_OUT_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <PlayerInit+0x22>
	{
		return 1;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 80027f2:	2300      	movs	r3, #0
	}
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000080 	.word	0x20000080

08002800 <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
	UINT bytesread;

  f_close(&WavFile);
 800280a:	4828      	ldr	r0, [pc, #160]	@ (80028ac <AUDIO_PLAYER_Start+0xac>)
 800280c:	f00d fc37 	bl	801007e <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8002810:	f7fe fae0 	bl	8000dd4 <AUDIO_GetWavObjectNumber>
 8002814:	4603      	mov	r3, r0
 8002816:	461a      	mov	r2, r3
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	b29b      	uxth	r3, r3
 800281c:	429a      	cmp	r2, r3
 800281e:	d93f      	bls.n	80028a0 <AUDIO_PLAYER_Start+0xa0>
  {

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 8002820:	79fa      	ldrb	r2, [r7, #7]
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4413      	add	r3, r2
 800282c:	4a20      	ldr	r2, [pc, #128]	@ (80028b0 <AUDIO_PLAYER_Start+0xb0>)
 800282e:	4413      	add	r3, r2
 8002830:	3301      	adds	r3, #1
 8002832:	2201      	movs	r2, #1
 8002834:	4619      	mov	r1, r3
 8002836:	481d      	ldr	r0, [pc, #116]	@ (80028ac <AUDIO_PLAYER_Start+0xac>)
 8002838:	f00d f8aa 	bl	800f990 <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 800283c:	f107 030c 	add.w	r3, r7, #12
 8002840:	222c      	movs	r2, #44	@ 0x2c
 8002842:	491c      	ldr	r1, [pc, #112]	@ (80028b4 <AUDIO_PLAYER_Start+0xb4>)
 8002844:	4819      	ldr	r0, [pc, #100]	@ (80028ac <AUDIO_PLAYER_Start+0xac>)
 8002846:	f00d fa5d 	bl	800fd04 <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 800284a:	4b1a      	ldr	r3, [pc, #104]	@ (80028b4 <AUDIO_PLAYER_Start+0xb4>)
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff ffbe 	bl	80027d0 <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8002854:	4b18      	ldr	r3, [pc, #96]	@ (80028b8 <AUDIO_PLAYER_Start+0xb8>)
 8002856:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 44);
 800285e:	212c      	movs	r1, #44	@ 0x2c
 8002860:	4812      	ldr	r0, [pc, #72]	@ (80028ac <AUDIO_PLAYER_Start+0xac>)
 8002862:	f00d fc36 	bl	80100d2 <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 8002866:	f107 030c 	add.w	r3, r7, #12
 800286a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800286e:	4912      	ldr	r1, [pc, #72]	@ (80028b8 <AUDIO_PLAYER_Start+0xb8>)
 8002870:	480e      	ldr	r0, [pc, #56]	@ (80028ac <AUDIO_PLAYER_Start+0xac>)
 8002872:	f00d fa47 	bl	800fd04 <f_read>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d111      	bne.n	80028a0 <AUDIO_PLAYER_Start+0xa0>
    {
      AudioState = AUDIO_STATE_PLAY;
 800287c:	4b0f      	ldr	r3, [pc, #60]	@ (80028bc <AUDIO_PLAYER_Start+0xbc>)
 800287e:	2203      	movs	r2, #3
 8002880:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00b      	beq.n	80028a0 <AUDIO_PLAYER_Start+0xa0>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8002888:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800288c:	480a      	ldr	r0, [pc, #40]	@ (80028b8 <AUDIO_PLAYER_Start+0xb8>)
 800288e:	f7fd fe87 	bl	80005a0 <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4a08      	ldr	r2, [pc, #32]	@ (80028b8 <AUDIO_PLAYER_Start+0xb8>)
 8002896:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800289a:	6053      	str	r3, [r2, #4]
          return AUDIO_ERROR_NONE;
 800289c:	2300      	movs	r3, #0
 800289e:	e000      	b.n	80028a2 <AUDIO_PLAYER_Start+0xa2>
        }
      }
  }
  return AUDIO_ERROR_IO;
 80028a0:	2301      	movs	r3, #1
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20001c48 	.word	0x20001c48
 80028b0:	20001840 	.word	0x20001840
 80028b4:	20001c1c 	.word	0x20001c1c
 80028b8:	20000834 	.word	0x20000834
 80028bc:	2000183c 	.word	0x2000183c

080028c0 <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop)
{
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	73fb      	strb	r3, [r7, #15]
  
  switch(AudioState)
 80028ce:	4b7e      	ldr	r3, [pc, #504]	@ (8002ac8 <AUDIO_PLAYER_Process+0x208>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	3b03      	subs	r3, #3
 80028d4:	2b0a      	cmp	r3, #10
 80028d6:	f200 80ef 	bhi.w	8002ab8 <AUDIO_PLAYER_Process+0x1f8>
 80028da:	a201      	add	r2, pc, #4	@ (adr r2, 80028e0 <AUDIO_PLAYER_Process+0x20>)
 80028dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e0:	0800290d 	.word	0x0800290d
 80028e4:	08002ab9 	.word	0x08002ab9
 80028e8:	080029d3 	.word	0x080029d3
 80028ec:	08002a13 	.word	0x08002a13
 80028f0:	08002ab9 	.word	0x08002ab9
 80028f4:	08002ab9 	.word	0x08002ab9
 80028f8:	080029c1 	.word	0x080029c1
 80028fc:	08002a55 	.word	0x08002a55
 8002900:	08002a61 	.word	0x08002a61
 8002904:	08002a6d 	.word	0x08002a6d
 8002908:	08002a93 	.word	0x08002a93
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 800290c:	4b6f      	ldr	r3, [pc, #444]	@ (8002acc <AUDIO_PLAYER_Process+0x20c>)
 800290e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	4b6e      	ldr	r3, [pc, #440]	@ (8002ad0 <AUDIO_PLAYER_Process+0x210>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	429a      	cmp	r2, r3
 800291a:	d305      	bcc.n	8002928 <AUDIO_PLAYER_Process+0x68>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800291c:	2002      	movs	r0, #2
 800291e:	f7fd fe95 	bl	800064c <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 8002922:	4b69      	ldr	r3, [pc, #420]	@ (8002ac8 <AUDIO_PLAYER_Process+0x208>)
 8002924:	2205      	movs	r2, #5
 8002926:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8002928:	4b68      	ldr	r3, [pc, #416]	@ (8002acc <AUDIO_PLAYER_Process+0x20c>)
 800292a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d11e      	bne.n	8002972 <AUDIO_PLAYER_Process+0xb2>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8002934:	f107 0308 	add.w	r3, r7, #8
 8002938:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800293c:	4963      	ldr	r1, [pc, #396]	@ (8002acc <AUDIO_PLAYER_Process+0x20c>)
 800293e:	4865      	ldr	r0, [pc, #404]	@ (8002ad4 <AUDIO_PLAYER_Process+0x214>)
 8002940:	f00d f9e0 	bl	800fd04 <f_read>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d004      	beq.n	8002954 <AUDIO_PLAYER_Process+0x94>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800294a:	2002      	movs	r0, #2
 800294c:	f7fd fe7e 	bl	800064c <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8002950:	2301      	movs	r3, #1
 8002952:	e0b5      	b.n	8002ac0 <AUDIO_PLAYER_Process+0x200>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8002954:	4b5d      	ldr	r3, [pc, #372]	@ (8002acc <AUDIO_PLAYER_Process+0x20c>)
 8002956:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 800295e:	4b5b      	ldr	r3, [pc, #364]	@ (8002acc <AUDIO_PLAYER_Process+0x20c>)
 8002960:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4413      	add	r3, r2
 800296a:	4a58      	ldr	r2, [pc, #352]	@ (8002acc <AUDIO_PLAYER_Process+0x20c>)
 800296c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002970:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 8002972:	4b56      	ldr	r3, [pc, #344]	@ (8002acc <AUDIO_PLAYER_Process+0x20c>)
 8002974:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b02      	cmp	r3, #2
 800297c:	f040 809e 	bne.w	8002abc <AUDIO_PLAYER_Process+0x1fc>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8002980:	f107 0308 	add.w	r3, r7, #8
 8002984:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002988:	4953      	ldr	r1, [pc, #332]	@ (8002ad8 <AUDIO_PLAYER_Process+0x218>)
 800298a:	4852      	ldr	r0, [pc, #328]	@ (8002ad4 <AUDIO_PLAYER_Process+0x214>)
 800298c:	f00d f9ba 	bl	800fd04 <f_read>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d004      	beq.n	80029a0 <AUDIO_PLAYER_Process+0xe0>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002996:	2002      	movs	r0, #2
 8002998:	f7fd fe58 	bl	800064c <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 800299c:	2301      	movs	r3, #1
 800299e:	e08f      	b.n	8002ac0 <AUDIO_PLAYER_Process+0x200>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 80029a0:	4b4a      	ldr	r3, [pc, #296]	@ (8002acc <AUDIO_PLAYER_Process+0x20c>)
 80029a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 80029aa:	4b48      	ldr	r3, [pc, #288]	@ (8002acc <AUDIO_PLAYER_Process+0x20c>)
 80029ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	4413      	add	r3, r2
 80029b6:	4a45      	ldr	r2, [pc, #276]	@ (8002acc <AUDIO_PLAYER_Process+0x20c>)
 80029b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029bc:	6053      	str	r3, [r2, #4]
    }
    break;
 80029be:	e07d      	b.n	8002abc <AUDIO_PLAYER_Process+0x1fc>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80029c0:	2002      	movs	r0, #2
 80029c2:	f7fd fe43 	bl	800064c <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 80029c6:	4b40      	ldr	r3, [pc, #256]	@ (8002ac8 <AUDIO_PLAYER_Process+0x208>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
    break;
 80029d0:	e075      	b.n	8002abe <AUDIO_PLAYER_Process+0x1fe>
    
  case AUDIO_STATE_NEXT:
      if(++FilePos >= AUDIO_GetWavObjectNumber())
 80029d2:	4b42      	ldr	r3, [pc, #264]	@ (8002adc <AUDIO_PLAYER_Process+0x21c>)
 80029d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3301      	adds	r3, #1
 80029dc:	b29b      	uxth	r3, r3
 80029de:	b21a      	sxth	r2, r3
 80029e0:	4b3e      	ldr	r3, [pc, #248]	@ (8002adc <AUDIO_PLAYER_Process+0x21c>)
 80029e2:	801a      	strh	r2, [r3, #0]
 80029e4:	4b3d      	ldr	r3, [pc, #244]	@ (8002adc <AUDIO_PLAYER_Process+0x21c>)
 80029e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ea:	461c      	mov	r4, r3
 80029ec:	f7fe f9f2 	bl	8000dd4 <AUDIO_GetWavObjectNumber>
 80029f0:	4603      	mov	r3, r0
 80029f2:	429c      	cmp	r4, r3
 80029f4:	db02      	blt.n	80029fc <AUDIO_PLAYER_Process+0x13c>
      {
          FilePos = 0;
 80029f6:	4b39      	ldr	r3, [pc, #228]	@ (8002adc <AUDIO_PLAYER_Process+0x21c>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	801a      	strh	r2, [r3, #0]
      }
      AUDIO_OUT_Stop(CODEC_PDWN_HW);
 80029fc:	2001      	movs	r0, #1
 80029fe:	f7fd fe25 	bl	800064c <AUDIO_OUT_Stop>
      AUDIO_PLAYER_Start(FilePos);
 8002a02:	4b36      	ldr	r3, [pc, #216]	@ (8002adc <AUDIO_PLAYER_Process+0x21c>)
 8002a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fef8 	bl	8002800 <AUDIO_PLAYER_Start>
      break;
 8002a10:	e055      	b.n	8002abe <AUDIO_PLAYER_Process+0x1fe>

  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8002a12:	4b32      	ldr	r3, [pc, #200]	@ (8002adc <AUDIO_PLAYER_Process+0x21c>)
 8002a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	b21a      	sxth	r2, r3
 8002a20:	4b2e      	ldr	r3, [pc, #184]	@ (8002adc <AUDIO_PLAYER_Process+0x21c>)
 8002a22:	801a      	strh	r2, [r3, #0]
 8002a24:	4b2d      	ldr	r3, [pc, #180]	@ (8002adc <AUDIO_PLAYER_Process+0x21c>)
 8002a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	da07      	bge.n	8002a3e <AUDIO_PLAYER_Process+0x17e>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 8002a2e:	f7fe f9d1 	bl	8000dd4 <AUDIO_GetWavObjectNumber>
 8002a32:	4603      	mov	r3, r0
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	b21a      	sxth	r2, r3
 8002a3a:	4b28      	ldr	r3, [pc, #160]	@ (8002adc <AUDIO_PLAYER_Process+0x21c>)
 8002a3c:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_HW);
 8002a3e:	2001      	movs	r0, #1
 8002a40:	f7fd fe04 	bl	800064c <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8002a44:	4b25      	ldr	r3, [pc, #148]	@ (8002adc <AUDIO_PLAYER_Process+0x21c>)
 8002a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fed7 	bl	8002800 <AUDIO_PLAYER_Start>
    break;   
 8002a52:	e034      	b.n	8002abe <AUDIO_PLAYER_Process+0x1fe>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 8002a54:	f7fd fdce 	bl	80005f4 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8002a58:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac8 <AUDIO_PLAYER_Process+0x208>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
    break;
 8002a5e:	e02e      	b.n	8002abe <AUDIO_PLAYER_Process+0x1fe>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 8002a60:	f7fd fdde 	bl	8000620 <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 8002a64:	4b18      	ldr	r3, [pc, #96]	@ (8002ac8 <AUDIO_PLAYER_Process+0x208>)
 8002a66:	2203      	movs	r2, #3
 8002a68:	701a      	strb	r2, [r3, #0]
    break;
 8002a6a:	e028      	b.n	8002abe <AUDIO_PLAYER_Process+0x1fe>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 8002a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ae0 <AUDIO_PLAYER_Process+0x220>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b5a      	cmp	r3, #90	@ 0x5a
 8002a72:	d804      	bhi.n	8002a7e <AUDIO_PLAYER_Process+0x1be>
    {
      uwVolume += 10;
 8002a74:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae0 <AUDIO_PLAYER_Process+0x220>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	330a      	adds	r3, #10
 8002a7a:	4a19      	ldr	r2, [pc, #100]	@ (8002ae0 <AUDIO_PLAYER_Process+0x220>)
 8002a7c:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8002a7e:	4b18      	ldr	r3, [pc, #96]	@ (8002ae0 <AUDIO_PLAYER_Process+0x220>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd fe09 	bl	800069c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8002a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac8 <AUDIO_PLAYER_Process+0x208>)
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	701a      	strb	r2, [r3, #0]
    break;
 8002a90:	e015      	b.n	8002abe <AUDIO_PLAYER_Process+0x1fe>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 8002a92:	4b13      	ldr	r3, [pc, #76]	@ (8002ae0 <AUDIO_PLAYER_Process+0x220>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b09      	cmp	r3, #9
 8002a98:	d904      	bls.n	8002aa4 <AUDIO_PLAYER_Process+0x1e4>
    {
      uwVolume -= 10;
 8002a9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ae0 <AUDIO_PLAYER_Process+0x220>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	3b0a      	subs	r3, #10
 8002aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8002ae0 <AUDIO_PLAYER_Process+0x220>)
 8002aa2:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8002aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae0 <AUDIO_PLAYER_Process+0x220>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fd fdf6 	bl	800069c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8002ab0:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <AUDIO_PLAYER_Process+0x208>)
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	701a      	strb	r2, [r3, #0]
    break;
 8002ab6:	e002      	b.n	8002abe <AUDIO_PLAYER_Process+0x1fe>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 8002ab8:	bf00      	nop
 8002aba:	e000      	b.n	8002abe <AUDIO_PLAYER_Process+0x1fe>
    break;
 8002abc:	bf00      	nop
  }
  return audio_error;
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd90      	pop	{r4, r7, pc}
 8002ac8:	2000183c 	.word	0x2000183c
 8002acc:	20000834 	.word	0x20000834
 8002ad0:	20001c1c 	.word	0x20001c1c
 8002ad4:	20001c48 	.word	0x20001c48
 8002ad8:	20001034 	.word	0x20001034
 8002adc:	2000183e 	.word	0x2000183e
 8002ae0:	20000080 	.word	0x20000080

08002ae4 <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002ae8:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d104      	bne.n	8002afa <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 8002af0:	4b05      	ldr	r3, [pc, #20]	@ (8002b08 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8002af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002af6:	2202      	movs	r2, #2
 8002af8:	701a      	strb	r2, [r3, #0]
  }
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	2000183c 	.word	0x2000183c
 8002b08:	20000834 	.word	0x20000834

08002b0c <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002b10:	4b06      	ldr	r3, [pc, #24]	@ (8002b2c <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d104      	bne.n	8002b22 <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8002b18:	4b05      	ldr	r3, [pc, #20]	@ (8002b30 <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8002b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b1e:	2201      	movs	r2, #1
 8002b20:	701a      	strb	r2, [r3, #0]
  }
}
 8002b22:	bf00      	nop
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	2000183c 	.word	0x2000183c
 8002b30:	20000834 	.word	0x20000834

08002b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b3a:	e003      	b.n	8002b44 <LoopCopyDataInit>

08002b3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b42:	3104      	adds	r1, #4

08002b44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b44:	480b      	ldr	r0, [pc, #44]	@ (8002b74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b46:	4b0c      	ldr	r3, [pc, #48]	@ (8002b78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b4c:	d3f6      	bcc.n	8002b3c <CopyDataInit>
  ldr  r2, =_sbss
 8002b4e:	4a0b      	ldr	r2, [pc, #44]	@ (8002b7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b50:	e002      	b.n	8002b58 <LoopFillZerobss>

08002b52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b54:	f842 3b04 	str.w	r3, [r2], #4

08002b58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b58:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b5c:	d3f9      	bcc.n	8002b52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b5e:	f7ff fe21 	bl	80027a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b62:	f00e faf5 	bl	8011150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b66:	f7ff f8b3 	bl	8001cd0 <main>
  bx  lr    
 8002b6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b70:	08012d78 	.word	0x08012d78
  ldr  r0, =_sdata
 8002b74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b78:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 8002b7c:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 8002b80:	20002b14 	.word	0x20002b14

08002b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b84:	e7fe      	b.n	8002b84 <ADC_IRQHandler>
	...

08002b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc8 <HAL_Init+0x40>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc8 <HAL_Init+0x40>)
 8002b92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b98:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc8 <HAL_Init+0x40>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc8 <HAL_Init+0x40>)
 8002b9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ba4:	4b08      	ldr	r3, [pc, #32]	@ (8002bc8 <HAL_Init+0x40>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a07      	ldr	r2, [pc, #28]	@ (8002bc8 <HAL_Init+0x40>)
 8002baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bb0:	2003      	movs	r0, #3
 8002bb2:	f000 f94f 	bl	8002e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f000 f808 	bl	8002bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bbc:	f7ff fd14 	bl	80025e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023c00 	.word	0x40023c00

08002bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bd4:	4b12      	ldr	r3, [pc, #72]	@ (8002c20 <HAL_InitTick+0x54>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b12      	ldr	r3, [pc, #72]	@ (8002c24 <HAL_InitTick+0x58>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 f967 	bl	8002ebe <HAL_SYSTICK_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00e      	b.n	8002c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b0f      	cmp	r3, #15
 8002bfe:	d80a      	bhi.n	8002c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c00:	2200      	movs	r2, #0
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295
 8002c08:	f000 f92f 	bl	8002e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c0c:	4a06      	ldr	r2, [pc, #24]	@ (8002c28 <HAL_InitTick+0x5c>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e000      	b.n	8002c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	2000007c 	.word	0x2000007c
 8002c24:	20000088 	.word	0x20000088
 8002c28:	20000084 	.word	0x20000084

08002c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c30:	4b06      	ldr	r3, [pc, #24]	@ (8002c4c <HAL_IncTick+0x20>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b06      	ldr	r3, [pc, #24]	@ (8002c50 <HAL_IncTick+0x24>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	4a04      	ldr	r2, [pc, #16]	@ (8002c50 <HAL_IncTick+0x24>)
 8002c3e:	6013      	str	r3, [r2, #0]
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	20000088 	.word	0x20000088
 8002c50:	20001e78 	.word	0x20001e78

08002c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return uwTick;
 8002c58:	4b03      	ldr	r3, [pc, #12]	@ (8002c68 <HAL_GetTick+0x14>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20001e78 	.word	0x20001e78

08002c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c74:	f7ff ffee 	bl	8002c54 <HAL_GetTick>
 8002c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d005      	beq.n	8002c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c86:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <HAL_Delay+0x44>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4413      	add	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c92:	bf00      	nop
 8002c94:	f7ff ffde 	bl	8002c54 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d8f7      	bhi.n	8002c94 <HAL_Delay+0x28>
  {
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000088 	.word	0x20000088

08002cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ce6:	4a04      	ldr	r2, [pc, #16]	@ (8002cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	60d3      	str	r3, [r2, #12]
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d00:	4b04      	ldr	r3, [pc, #16]	@ (8002d14 <__NVIC_GetPriorityGrouping+0x18>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	0a1b      	lsrs	r3, r3, #8
 8002d06:	f003 0307 	and.w	r3, r3, #7
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	db0b      	blt.n	8002d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	f003 021f 	and.w	r2, r3, #31
 8002d30:	4907      	ldr	r1, [pc, #28]	@ (8002d50 <__NVIC_EnableIRQ+0x38>)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	2001      	movs	r0, #1
 8002d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	e000e100 	.word	0xe000e100

08002d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	6039      	str	r1, [r7, #0]
 8002d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	db0a      	blt.n	8002d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	490c      	ldr	r1, [pc, #48]	@ (8002da0 <__NVIC_SetPriority+0x4c>)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	0112      	lsls	r2, r2, #4
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	440b      	add	r3, r1
 8002d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d7c:	e00a      	b.n	8002d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	4908      	ldr	r1, [pc, #32]	@ (8002da4 <__NVIC_SetPriority+0x50>)
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	3b04      	subs	r3, #4
 8002d8c:	0112      	lsls	r2, r2, #4
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	440b      	add	r3, r1
 8002d92:	761a      	strb	r2, [r3, #24]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000e100 	.word	0xe000e100
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b089      	sub	sp, #36	@ 0x24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f1c3 0307 	rsb	r3, r3, #7
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	bf28      	it	cs
 8002dc6:	2304      	movcs	r3, #4
 8002dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	2b06      	cmp	r3, #6
 8002dd0:	d902      	bls.n	8002dd8 <NVIC_EncodePriority+0x30>
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3b03      	subs	r3, #3
 8002dd6:	e000      	b.n	8002dda <NVIC_EncodePriority+0x32>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43da      	mvns	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	401a      	ands	r2, r3
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df0:	f04f 31ff 	mov.w	r1, #4294967295
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	43d9      	mvns	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e00:	4313      	orrs	r3, r2
         );
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3724      	adds	r7, #36	@ 0x24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
	...

08002e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e20:	d301      	bcc.n	8002e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e22:	2301      	movs	r3, #1
 8002e24:	e00f      	b.n	8002e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e26:	4a0a      	ldr	r2, [pc, #40]	@ (8002e50 <SysTick_Config+0x40>)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e2e:	210f      	movs	r1, #15
 8002e30:	f04f 30ff 	mov.w	r0, #4294967295
 8002e34:	f7ff ff8e 	bl	8002d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e38:	4b05      	ldr	r3, [pc, #20]	@ (8002e50 <SysTick_Config+0x40>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e3e:	4b04      	ldr	r3, [pc, #16]	@ (8002e50 <SysTick_Config+0x40>)
 8002e40:	2207      	movs	r2, #7
 8002e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	e000e010 	.word	0xe000e010

08002e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff ff29 	bl	8002cb4 <__NVIC_SetPriorityGrouping>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b086      	sub	sp, #24
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	4603      	mov	r3, r0
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
 8002e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e7c:	f7ff ff3e 	bl	8002cfc <__NVIC_GetPriorityGrouping>
 8002e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	6978      	ldr	r0, [r7, #20]
 8002e88:	f7ff ff8e 	bl	8002da8 <NVIC_EncodePriority>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ff5d 	bl	8002d54 <__NVIC_SetPriority>
}
 8002e9a:	bf00      	nop
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff ff31 	bl	8002d18 <__NVIC_EnableIRQ>
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff ffa2 	bl	8002e10 <SysTick_Config>
 8002ecc:	4603      	mov	r3, r0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ee4:	f7ff feb6 	bl	8002c54 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e099      	b.n	8003028 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0201 	bic.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f14:	e00f      	b.n	8002f36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f16:	f7ff fe9d 	bl	8002c54 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b05      	cmp	r3, #5
 8002f22:	d908      	bls.n	8002f36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2220      	movs	r2, #32
 8002f28:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e078      	b.n	8003028 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1e8      	bne.n	8002f16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4b38      	ldr	r3, [pc, #224]	@ (8003030 <HAL_DMA_Init+0x158>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d107      	bne.n	8002fa0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f023 0307 	bic.w	r3, r3, #7
 8002fb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d117      	bne.n	8002ffa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00e      	beq.n	8002ffa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fb5f 	bl	80036a0 <DMA_CheckFifoParam>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2240      	movs	r2, #64	@ 0x40
 8002fec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e016      	b.n	8003028 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fb16 	bl	8003634 <DMA_CalcBaseAndBitshift>
 8003008:	4603      	mov	r3, r0
 800300a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003010:	223f      	movs	r2, #63	@ 0x3f
 8003012:	409a      	lsls	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	f010803f 	.word	0xf010803f

08003034 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e050      	b.n	80030e8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d101      	bne.n	8003056 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003052:	2302      	movs	r3, #2
 8003054:	e048      	b.n	80030e8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0201 	bic.w	r2, r2, #1
 8003064:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2200      	movs	r2, #0
 8003074:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2200      	movs	r2, #0
 8003084:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2200      	movs	r2, #0
 800308c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2221      	movs	r2, #33	@ 0x21
 8003094:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 facc 	bl	8003634 <DMA_CalcBaseAndBitshift>
 800309c:	4603      	mov	r3, r0
 800309e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c8:	223f      	movs	r2, #63	@ 0x3f
 80030ca:	409a      	lsls	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003106:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_DMA_Start_IT+0x26>
 8003112:	2302      	movs	r3, #2
 8003114:	e040      	b.n	8003198 <HAL_DMA_Start_IT+0xa8>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d12f      	bne.n	800318a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2202      	movs	r2, #2
 800312e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 fa4a 	bl	80035d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003148:	223f      	movs	r2, #63	@ 0x3f
 800314a:	409a      	lsls	r2, r3
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0216 	orr.w	r2, r2, #22
 800315e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003164:	2b00      	cmp	r3, #0
 8003166:	d007      	beq.n	8003178 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0208 	orr.w	r2, r2, #8
 8003176:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	e005      	b.n	8003196 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003192:	2302      	movs	r3, #2
 8003194:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003196:	7dfb      	ldrb	r3, [r7, #23]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031ae:	f7ff fd51 	bl	8002c54 <HAL_GetTick>
 80031b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d008      	beq.n	80031d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2280      	movs	r2, #128	@ 0x80
 80031c4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e052      	b.n	8003278 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0216 	bic.w	r2, r2, #22
 80031e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695a      	ldr	r2, [r3, #20]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d103      	bne.n	8003202 <HAL_DMA_Abort+0x62>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d007      	beq.n	8003212 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0208 	bic.w	r2, r2, #8
 8003210:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0201 	bic.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003222:	e013      	b.n	800324c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003224:	f7ff fd16 	bl	8002c54 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b05      	cmp	r3, #5
 8003230:	d90c      	bls.n	800324c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2220      	movs	r2, #32
 8003236:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2203      	movs	r2, #3
 800323c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e015      	b.n	8003278 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1e4      	bne.n	8003224 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325e:	223f      	movs	r2, #63	@ 0x3f
 8003260:	409a      	lsls	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d004      	beq.n	800329e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2280      	movs	r2, #128	@ 0x80
 8003298:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e00c      	b.n	80032b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2205      	movs	r2, #5
 80032a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032d0:	4b8e      	ldr	r3, [pc, #568]	@ (800350c <HAL_DMA_IRQHandler+0x248>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a8e      	ldr	r2, [pc, #568]	@ (8003510 <HAL_DMA_IRQHandler+0x24c>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	0a9b      	lsrs	r3, r3, #10
 80032dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ee:	2208      	movs	r2, #8
 80032f0:	409a      	lsls	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d01a      	beq.n	8003330 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d013      	beq.n	8003330 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0204 	bic.w	r2, r2, #4
 8003316:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800331c:	2208      	movs	r2, #8
 800331e:	409a      	lsls	r2, r3
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003328:	f043 0201 	orr.w	r2, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003334:	2201      	movs	r2, #1
 8003336:	409a      	lsls	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d012      	beq.n	8003366 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00b      	beq.n	8003366 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003352:	2201      	movs	r2, #1
 8003354:	409a      	lsls	r2, r3
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800335e:	f043 0202 	orr.w	r2, r3, #2
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800336a:	2204      	movs	r2, #4
 800336c:	409a      	lsls	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4013      	ands	r3, r2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d012      	beq.n	800339c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00b      	beq.n	800339c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003388:	2204      	movs	r2, #4
 800338a:	409a      	lsls	r2, r3
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003394:	f043 0204 	orr.w	r2, r3, #4
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a0:	2210      	movs	r2, #16
 80033a2:	409a      	lsls	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d043      	beq.n	8003434 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d03c      	beq.n	8003434 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033be:	2210      	movs	r2, #16
 80033c0:	409a      	lsls	r2, r3
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d018      	beq.n	8003406 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d108      	bne.n	80033f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d024      	beq.n	8003434 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	4798      	blx	r3
 80033f2:	e01f      	b.n	8003434 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01b      	beq.n	8003434 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	4798      	blx	r3
 8003404:	e016      	b.n	8003434 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d107      	bne.n	8003424 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0208 	bic.w	r2, r2, #8
 8003422:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003438:	2220      	movs	r2, #32
 800343a:	409a      	lsls	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4013      	ands	r3, r2
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 808f 	beq.w	8003564 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 8087 	beq.w	8003564 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345a:	2220      	movs	r2, #32
 800345c:	409a      	lsls	r2, r3
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b05      	cmp	r3, #5
 800346c:	d136      	bne.n	80034dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0216 	bic.w	r2, r2, #22
 800347c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800348c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	d103      	bne.n	800349e <HAL_DMA_IRQHandler+0x1da>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800349a:	2b00      	cmp	r3, #0
 800349c:	d007      	beq.n	80034ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0208 	bic.w	r2, r2, #8
 80034ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b2:	223f      	movs	r2, #63	@ 0x3f
 80034b4:	409a      	lsls	r2, r3
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d07e      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	4798      	blx	r3
        }
        return;
 80034da:	e079      	b.n	80035d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d01d      	beq.n	8003526 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10d      	bne.n	8003514 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d031      	beq.n	8003564 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	4798      	blx	r3
 8003508:	e02c      	b.n	8003564 <HAL_DMA_IRQHandler+0x2a0>
 800350a:	bf00      	nop
 800350c:	2000007c 	.word	0x2000007c
 8003510:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003518:	2b00      	cmp	r3, #0
 800351a:	d023      	beq.n	8003564 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	4798      	blx	r3
 8003524:	e01e      	b.n	8003564 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10f      	bne.n	8003554 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0210 	bic.w	r2, r2, #16
 8003542:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003568:	2b00      	cmp	r3, #0
 800356a:	d032      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d022      	beq.n	80035be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2205      	movs	r2, #5
 800357c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	3301      	adds	r3, #1
 8003594:	60bb      	str	r3, [r7, #8]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	429a      	cmp	r2, r3
 800359a:	d307      	bcc.n	80035ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f2      	bne.n	8003590 <HAL_DMA_IRQHandler+0x2cc>
 80035aa:	e000      	b.n	80035ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4798      	blx	r3
 80035ce:	e000      	b.n	80035d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80035d0:	bf00      	nop
    }
  }
}
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80035f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b40      	cmp	r3, #64	@ 0x40
 8003604:	d108      	bne.n	8003618 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003616:	e007      	b.n	8003628 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	60da      	str	r2, [r3, #12]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	3b10      	subs	r3, #16
 8003644:	4a14      	ldr	r2, [pc, #80]	@ (8003698 <DMA_CalcBaseAndBitshift+0x64>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800364e:	4a13      	ldr	r2, [pc, #76]	@ (800369c <DMA_CalcBaseAndBitshift+0x68>)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4413      	add	r3, r2
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b03      	cmp	r3, #3
 8003660:	d909      	bls.n	8003676 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800366a:	f023 0303 	bic.w	r3, r3, #3
 800366e:	1d1a      	adds	r2, r3, #4
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	659a      	str	r2, [r3, #88]	@ 0x58
 8003674:	e007      	b.n	8003686 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800367e:	f023 0303 	bic.w	r3, r3, #3
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800368a:	4618      	mov	r0, r3
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	aaaaaaab 	.word	0xaaaaaaab
 800369c:	0801290c 	.word	0x0801290c

080036a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d11f      	bne.n	80036fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d856      	bhi.n	800376e <DMA_CheckFifoParam+0xce>
 80036c0:	a201      	add	r2, pc, #4	@ (adr r2, 80036c8 <DMA_CheckFifoParam+0x28>)
 80036c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c6:	bf00      	nop
 80036c8:	080036d9 	.word	0x080036d9
 80036cc:	080036eb 	.word	0x080036eb
 80036d0:	080036d9 	.word	0x080036d9
 80036d4:	0800376f 	.word	0x0800376f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d046      	beq.n	8003772 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e8:	e043      	b.n	8003772 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036f2:	d140      	bne.n	8003776 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f8:	e03d      	b.n	8003776 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003702:	d121      	bne.n	8003748 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b03      	cmp	r3, #3
 8003708:	d837      	bhi.n	800377a <DMA_CheckFifoParam+0xda>
 800370a:	a201      	add	r2, pc, #4	@ (adr r2, 8003710 <DMA_CheckFifoParam+0x70>)
 800370c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003710:	08003721 	.word	0x08003721
 8003714:	08003727 	.word	0x08003727
 8003718:	08003721 	.word	0x08003721
 800371c:	08003739 	.word	0x08003739
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
      break;
 8003724:	e030      	b.n	8003788 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d025      	beq.n	800377e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003736:	e022      	b.n	800377e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003740:	d11f      	bne.n	8003782 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003746:	e01c      	b.n	8003782 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d903      	bls.n	8003756 <DMA_CheckFifoParam+0xb6>
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d003      	beq.n	800375c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003754:	e018      	b.n	8003788 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	73fb      	strb	r3, [r7, #15]
      break;
 800375a:	e015      	b.n	8003788 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003760:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00e      	beq.n	8003786 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	73fb      	strb	r3, [r7, #15]
      break;
 800376c:	e00b      	b.n	8003786 <DMA_CheckFifoParam+0xe6>
      break;
 800376e:	bf00      	nop
 8003770:	e00a      	b.n	8003788 <DMA_CheckFifoParam+0xe8>
      break;
 8003772:	bf00      	nop
 8003774:	e008      	b.n	8003788 <DMA_CheckFifoParam+0xe8>
      break;
 8003776:	bf00      	nop
 8003778:	e006      	b.n	8003788 <DMA_CheckFifoParam+0xe8>
      break;
 800377a:	bf00      	nop
 800377c:	e004      	b.n	8003788 <DMA_CheckFifoParam+0xe8>
      break;
 800377e:	bf00      	nop
 8003780:	e002      	b.n	8003788 <DMA_CheckFifoParam+0xe8>
      break;   
 8003782:	bf00      	nop
 8003784:	e000      	b.n	8003788 <DMA_CheckFifoParam+0xe8>
      break;
 8003786:	bf00      	nop
    }
  } 
  
  return status; 
 8003788:	7bfb      	ldrb	r3, [r7, #15]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop

08003798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003798:	b480      	push	{r7}
 800379a:	b089      	sub	sp, #36	@ 0x24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	e159      	b.n	8003a68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037b4:	2201      	movs	r2, #1
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4013      	ands	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	f040 8148 	bne.w	8003a62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d005      	beq.n	80037ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d130      	bne.n	800384c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	2203      	movs	r2, #3
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4013      	ands	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4313      	orrs	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003820:	2201      	movs	r2, #1
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 0201 	and.w	r2, r3, #1
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	2b03      	cmp	r3, #3
 8003856:	d017      	beq.n	8003888 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	2203      	movs	r2, #3
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4013      	ands	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d123      	bne.n	80038dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	08da      	lsrs	r2, r3, #3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3208      	adds	r2, #8
 800389c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	220f      	movs	r2, #15
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	08da      	lsrs	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3208      	adds	r2, #8
 80038d6:	69b9      	ldr	r1, [r7, #24]
 80038d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	2203      	movs	r2, #3
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 0203 	and.w	r2, r3, #3
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80a2 	beq.w	8003a62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	4b57      	ldr	r3, [pc, #348]	@ (8003a80 <HAL_GPIO_Init+0x2e8>)
 8003924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003926:	4a56      	ldr	r2, [pc, #344]	@ (8003a80 <HAL_GPIO_Init+0x2e8>)
 8003928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800392c:	6453      	str	r3, [r2, #68]	@ 0x44
 800392e:	4b54      	ldr	r3, [pc, #336]	@ (8003a80 <HAL_GPIO_Init+0x2e8>)
 8003930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800393a:	4a52      	ldr	r2, [pc, #328]	@ (8003a84 <HAL_GPIO_Init+0x2ec>)
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	089b      	lsrs	r3, r3, #2
 8003940:	3302      	adds	r3, #2
 8003942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	220f      	movs	r2, #15
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4013      	ands	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a49      	ldr	r2, [pc, #292]	@ (8003a88 <HAL_GPIO_Init+0x2f0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d019      	beq.n	800399a <HAL_GPIO_Init+0x202>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a48      	ldr	r2, [pc, #288]	@ (8003a8c <HAL_GPIO_Init+0x2f4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d013      	beq.n	8003996 <HAL_GPIO_Init+0x1fe>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a47      	ldr	r2, [pc, #284]	@ (8003a90 <HAL_GPIO_Init+0x2f8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00d      	beq.n	8003992 <HAL_GPIO_Init+0x1fa>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a46      	ldr	r2, [pc, #280]	@ (8003a94 <HAL_GPIO_Init+0x2fc>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d007      	beq.n	800398e <HAL_GPIO_Init+0x1f6>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a45      	ldr	r2, [pc, #276]	@ (8003a98 <HAL_GPIO_Init+0x300>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d101      	bne.n	800398a <HAL_GPIO_Init+0x1f2>
 8003986:	2304      	movs	r3, #4
 8003988:	e008      	b.n	800399c <HAL_GPIO_Init+0x204>
 800398a:	2307      	movs	r3, #7
 800398c:	e006      	b.n	800399c <HAL_GPIO_Init+0x204>
 800398e:	2303      	movs	r3, #3
 8003990:	e004      	b.n	800399c <HAL_GPIO_Init+0x204>
 8003992:	2302      	movs	r3, #2
 8003994:	e002      	b.n	800399c <HAL_GPIO_Init+0x204>
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <HAL_GPIO_Init+0x204>
 800399a:	2300      	movs	r3, #0
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	f002 0203 	and.w	r2, r2, #3
 80039a2:	0092      	lsls	r2, r2, #2
 80039a4:	4093      	lsls	r3, r2
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039ac:	4935      	ldr	r1, [pc, #212]	@ (8003a84 <HAL_GPIO_Init+0x2ec>)
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	089b      	lsrs	r3, r3, #2
 80039b2:	3302      	adds	r3, #2
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039ba:	4b38      	ldr	r3, [pc, #224]	@ (8003a9c <HAL_GPIO_Init+0x304>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	43db      	mvns	r3, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039de:	4a2f      	ldr	r2, [pc, #188]	@ (8003a9c <HAL_GPIO_Init+0x304>)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039e4:	4b2d      	ldr	r3, [pc, #180]	@ (8003a9c <HAL_GPIO_Init+0x304>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a08:	4a24      	ldr	r2, [pc, #144]	@ (8003a9c <HAL_GPIO_Init+0x304>)
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a0e:	4b23      	ldr	r3, [pc, #140]	@ (8003a9c <HAL_GPIO_Init+0x304>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a32:	4a1a      	ldr	r2, [pc, #104]	@ (8003a9c <HAL_GPIO_Init+0x304>)
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a38:	4b18      	ldr	r3, [pc, #96]	@ (8003a9c <HAL_GPIO_Init+0x304>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4013      	ands	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8003a9c <HAL_GPIO_Init+0x304>)
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	3301      	adds	r3, #1
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	2b0f      	cmp	r3, #15
 8003a6c:	f67f aea2 	bls.w	80037b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a70:	bf00      	nop
 8003a72:	bf00      	nop
 8003a74:	3724      	adds	r7, #36	@ 0x24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40023800 	.word	0x40023800
 8003a84:	40013800 	.word	0x40013800
 8003a88:	40020000 	.word	0x40020000
 8003a8c:	40020400 	.word	0x40020400
 8003a90:	40020800 	.word	0x40020800
 8003a94:	40020c00 	.word	0x40020c00
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40013c00 	.word	0x40013c00

08003aa0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	e0bb      	b.n	8003c34 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003abc:	2201      	movs	r2, #1
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4013      	ands	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	f040 80ab 	bne.w	8003c2e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003ad8:	4a5c      	ldr	r2, [pc, #368]	@ (8003c4c <HAL_GPIO_DeInit+0x1ac>)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	089b      	lsrs	r3, r3, #2
 8003ade:	3302      	adds	r3, #2
 8003ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	220f      	movs	r2, #15
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	4013      	ands	r3, r2
 8003af8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a54      	ldr	r2, [pc, #336]	@ (8003c50 <HAL_GPIO_DeInit+0x1b0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d019      	beq.n	8003b36 <HAL_GPIO_DeInit+0x96>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a53      	ldr	r2, [pc, #332]	@ (8003c54 <HAL_GPIO_DeInit+0x1b4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <HAL_GPIO_DeInit+0x92>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a52      	ldr	r2, [pc, #328]	@ (8003c58 <HAL_GPIO_DeInit+0x1b8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00d      	beq.n	8003b2e <HAL_GPIO_DeInit+0x8e>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a51      	ldr	r2, [pc, #324]	@ (8003c5c <HAL_GPIO_DeInit+0x1bc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d007      	beq.n	8003b2a <HAL_GPIO_DeInit+0x8a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a50      	ldr	r2, [pc, #320]	@ (8003c60 <HAL_GPIO_DeInit+0x1c0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d101      	bne.n	8003b26 <HAL_GPIO_DeInit+0x86>
 8003b22:	2304      	movs	r3, #4
 8003b24:	e008      	b.n	8003b38 <HAL_GPIO_DeInit+0x98>
 8003b26:	2307      	movs	r3, #7
 8003b28:	e006      	b.n	8003b38 <HAL_GPIO_DeInit+0x98>
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e004      	b.n	8003b38 <HAL_GPIO_DeInit+0x98>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e002      	b.n	8003b38 <HAL_GPIO_DeInit+0x98>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_GPIO_DeInit+0x98>
 8003b36:	2300      	movs	r3, #0
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	f002 0203 	and.w	r2, r2, #3
 8003b3e:	0092      	lsls	r2, r2, #2
 8003b40:	4093      	lsls	r3, r2
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d132      	bne.n	8003bae <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003b48:	4b46      	ldr	r3, [pc, #280]	@ (8003c64 <HAL_GPIO_DeInit+0x1c4>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	4944      	ldr	r1, [pc, #272]	@ (8003c64 <HAL_GPIO_DeInit+0x1c4>)
 8003b52:	4013      	ands	r3, r2
 8003b54:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003b56:	4b43      	ldr	r3, [pc, #268]	@ (8003c64 <HAL_GPIO_DeInit+0x1c4>)
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	4941      	ldr	r1, [pc, #260]	@ (8003c64 <HAL_GPIO_DeInit+0x1c4>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003b64:	4b3f      	ldr	r3, [pc, #252]	@ (8003c64 <HAL_GPIO_DeInit+0x1c4>)
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	493d      	ldr	r1, [pc, #244]	@ (8003c64 <HAL_GPIO_DeInit+0x1c4>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003b72:	4b3c      	ldr	r3, [pc, #240]	@ (8003c64 <HAL_GPIO_DeInit+0x1c4>)
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	493a      	ldr	r1, [pc, #232]	@ (8003c64 <HAL_GPIO_DeInit+0x1c4>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	220f      	movs	r2, #15
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003b90:	4a2e      	ldr	r2, [pc, #184]	@ (8003c4c <HAL_GPIO_DeInit+0x1ac>)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	089b      	lsrs	r3, r3, #2
 8003b96:	3302      	adds	r3, #2
 8003b98:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	43da      	mvns	r2, r3
 8003ba0:	482a      	ldr	r0, [pc, #168]	@ (8003c4c <HAL_GPIO_DeInit+0x1ac>)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	089b      	lsrs	r3, r3, #2
 8003ba6:	400a      	ands	r2, r1
 8003ba8:	3302      	adds	r3, #2
 8003baa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	2103      	movs	r1, #3
 8003bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	401a      	ands	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	08da      	lsrs	r2, r3, #3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3208      	adds	r2, #8
 8003bcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	220f      	movs	r2, #15
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	43db      	mvns	r3, r3
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	08d2      	lsrs	r2, r2, #3
 8003be4:	4019      	ands	r1, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3208      	adds	r2, #8
 8003bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	2103      	movs	r1, #3
 8003bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	401a      	ands	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	2101      	movs	r1, #1
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c10:	43db      	mvns	r3, r3
 8003c12:	401a      	ands	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	2103      	movs	r1, #3
 8003c22:	fa01 f303 	lsl.w	r3, r1, r3
 8003c26:	43db      	mvns	r3, r3
 8003c28:	401a      	ands	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	3301      	adds	r3, #1
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2b0f      	cmp	r3, #15
 8003c38:	f67f af40 	bls.w	8003abc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40013800 	.word	0x40013800
 8003c50:	40020000 	.word	0x40020000
 8003c54:	40020400 	.word	0x40020400
 8003c58:	40020800 	.word	0x40020800
 8003c5c:	40020c00 	.word	0x40020c00
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40013c00 	.word	0x40013c00

08003c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	807b      	strh	r3, [r7, #2]
 8003c74:	4613      	mov	r3, r2
 8003c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c78:	787b      	ldrb	r3, [r7, #1]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c7e:	887a      	ldrh	r2, [r7, #2]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c84:	e003      	b.n	8003c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c86:	887b      	ldrh	r3, [r7, #2]
 8003c88:	041a      	lsls	r2, r3, #16
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	619a      	str	r2, [r3, #24]
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
	...

08003c9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ca6:	4b08      	ldr	r3, [pc, #32]	@ (8003cc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	88fb      	ldrh	r3, [r7, #6]
 8003cac:	4013      	ands	r3, r2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d006      	beq.n	8003cc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cb2:	4a05      	ldr	r2, [pc, #20]	@ (8003cc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cb4:	88fb      	ldrh	r3, [r7, #6]
 8003cb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cb8:	88fb      	ldrh	r3, [r7, #6]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe f964 	bl	8001f88 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cc0:	bf00      	nop
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40013c00 	.word	0x40013c00

08003ccc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cce:	b08f      	sub	sp, #60	@ 0x3c
 8003cd0:	af0a      	add	r7, sp, #40	@ 0x28
 8003cd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e054      	b.n	8003d88 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 32f9 	ldrb.w	r3, [r3, #761]	@ 0x2f9
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d106      	bne.n	8003cfe <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f00c fe49 	bl	8010990 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2203      	movs	r2, #3
 8003d02:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d102      	bne.n	8003d18 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f005 fa69 	bl	80091f4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	687e      	ldr	r6, [r7, #4]
 8003d2a:	466d      	mov	r5, sp
 8003d2c:	f106 0410 	add.w	r4, r6, #16
 8003d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d40:	1d33      	adds	r3, r6, #4
 8003d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d44:	6838      	ldr	r0, [r7, #0]
 8003d46:	f005 f9e3 	bl	8009110 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2101      	movs	r1, #1
 8003d50:	4618      	mov	r0, r3
 8003d52:	f005 fa60 	bl	8009216 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	687e      	ldr	r6, [r7, #4]
 8003d5e:	466d      	mov	r5, sp
 8003d60:	f106 0410 	add.w	r4, r6, #16
 8003d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d70:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d74:	1d33      	adds	r3, r6, #4
 8003d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d78:	6838      	ldr	r0, [r7, #0]
 8003d7a:	f005 fbe9 	bl	8009550 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d90 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003d90:	b590      	push	{r4, r7, lr}
 8003d92:	b089      	sub	sp, #36	@ 0x24
 8003d94:	af04      	add	r7, sp, #16
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	4608      	mov	r0, r1
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4603      	mov	r3, r0
 8003da0:	70fb      	strb	r3, [r7, #3]
 8003da2:	460b      	mov	r3, r1
 8003da4:	70bb      	strb	r3, [r7, #2]
 8003da6:	4613      	mov	r3, r2
 8003da8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_HCD_HC_Init+0x28>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e076      	b.n	8003ea6 <HAL_HCD_HC_Init+0x116>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	212c      	movs	r1, #44	@ 0x2c
 8003dc6:	fb01 f303 	mul.w	r3, r1, r3
 8003dca:	4413      	add	r3, r2
 8003dcc:	333d      	adds	r3, #61	@ 0x3d
 8003dce:	2200      	movs	r2, #0
 8003dd0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	212c      	movs	r1, #44	@ 0x2c
 8003dd8:	fb01 f303 	mul.w	r3, r1, r3
 8003ddc:	4413      	add	r3, r2
 8003dde:	3338      	adds	r3, #56	@ 0x38
 8003de0:	787a      	ldrb	r2, [r7, #1]
 8003de2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	212c      	movs	r1, #44	@ 0x2c
 8003dea:	fb01 f303 	mul.w	r3, r1, r3
 8003dee:	4413      	add	r3, r2
 8003df0:	3340      	adds	r3, #64	@ 0x40
 8003df2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003df4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003df6:	78fb      	ldrb	r3, [r7, #3]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	212c      	movs	r1, #44	@ 0x2c
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	4413      	add	r3, r2
 8003e02:	3339      	adds	r3, #57	@ 0x39
 8003e04:	78fa      	ldrb	r2, [r7, #3]
 8003e06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	212c      	movs	r1, #44	@ 0x2c
 8003e0e:	fb01 f303 	mul.w	r3, r1, r3
 8003e12:	4413      	add	r3, r2
 8003e14:	333f      	adds	r3, #63	@ 0x3f
 8003e16:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003e1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	78ba      	ldrb	r2, [r7, #2]
 8003e20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e24:	b2d0      	uxtb	r0, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	212c      	movs	r1, #44	@ 0x2c
 8003e2a:	fb01 f303 	mul.w	r3, r1, r3
 8003e2e:	4413      	add	r3, r2
 8003e30:	333a      	adds	r3, #58	@ 0x3a
 8003e32:	4602      	mov	r2, r0
 8003e34:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003e36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	da09      	bge.n	8003e52 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003e3e:	78fb      	ldrb	r3, [r7, #3]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	212c      	movs	r1, #44	@ 0x2c
 8003e44:	fb01 f303 	mul.w	r3, r1, r3
 8003e48:	4413      	add	r3, r2
 8003e4a:	333b      	adds	r3, #59	@ 0x3b
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	701a      	strb	r2, [r3, #0]
 8003e50:	e008      	b.n	8003e64 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003e52:	78fb      	ldrb	r3, [r7, #3]
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	212c      	movs	r1, #44	@ 0x2c
 8003e58:	fb01 f303 	mul.w	r3, r1, r3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	333b      	adds	r3, #59	@ 0x3b
 8003e60:	2200      	movs	r2, #0
 8003e62:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003e64:	78fb      	ldrb	r3, [r7, #3]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	212c      	movs	r1, #44	@ 0x2c
 8003e6a:	fb01 f303 	mul.w	r3, r1, r3
 8003e6e:	4413      	add	r3, r2
 8003e70:	333c      	adds	r3, #60	@ 0x3c
 8003e72:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003e76:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	787c      	ldrb	r4, [r7, #1]
 8003e7e:	78ba      	ldrb	r2, [r7, #2]
 8003e80:	78f9      	ldrb	r1, [r7, #3]
 8003e82:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003e84:	9302      	str	r3, [sp, #8]
 8003e86:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003e8a:	9301      	str	r3, [sp, #4]
 8003e8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	4623      	mov	r3, r4
 8003e94:	f005 fce2 	bl	800985c <USB_HC_Init>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd90      	pop	{r4, r7, pc}

08003eae <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_HCD_HC_Halt+0x1e>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e00f      	b.n	8003eec <HAL_HCD_HC_Halt+0x3e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	4611      	mov	r1, r2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f005 ff32 	bl	8009d46 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	4608      	mov	r0, r1
 8003efe:	4611      	mov	r1, r2
 8003f00:	461a      	mov	r2, r3
 8003f02:	4603      	mov	r3, r0
 8003f04:	70fb      	strb	r3, [r7, #3]
 8003f06:	460b      	mov	r3, r1
 8003f08:	70bb      	strb	r3, [r7, #2]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003f0e:	78fb      	ldrb	r3, [r7, #3]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	212c      	movs	r1, #44	@ 0x2c
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	4413      	add	r3, r2
 8003f1a:	333b      	adds	r3, #59	@ 0x3b
 8003f1c:	78ba      	ldrb	r2, [r7, #2]
 8003f1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003f20:	78fb      	ldrb	r3, [r7, #3]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	212c      	movs	r1, #44	@ 0x2c
 8003f26:	fb01 f303 	mul.w	r3, r1, r3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	333f      	adds	r3, #63	@ 0x3f
 8003f2e:	787a      	ldrb	r2, [r7, #1]
 8003f30:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003f32:	7c3b      	ldrb	r3, [r7, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d112      	bne.n	8003f5e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003f38:	78fb      	ldrb	r3, [r7, #3]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	212c      	movs	r1, #44	@ 0x2c
 8003f3e:	fb01 f303 	mul.w	r3, r1, r3
 8003f42:	4413      	add	r3, r2
 8003f44:	3342      	adds	r3, #66	@ 0x42
 8003f46:	2203      	movs	r2, #3
 8003f48:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003f4a:	78fb      	ldrb	r3, [r7, #3]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	212c      	movs	r1, #44	@ 0x2c
 8003f50:	fb01 f303 	mul.w	r3, r1, r3
 8003f54:	4413      	add	r3, r2
 8003f56:	333d      	adds	r3, #61	@ 0x3d
 8003f58:	7f3a      	ldrb	r2, [r7, #28]
 8003f5a:	701a      	strb	r2, [r3, #0]
 8003f5c:	e008      	b.n	8003f70 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f5e:	78fb      	ldrb	r3, [r7, #3]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	212c      	movs	r1, #44	@ 0x2c
 8003f64:	fb01 f303 	mul.w	r3, r1, r3
 8003f68:	4413      	add	r3, r2
 8003f6a:	3342      	adds	r3, #66	@ 0x42
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003f70:	787b      	ldrb	r3, [r7, #1]
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	f200 80c6 	bhi.w	8004104 <HAL_HCD_HC_SubmitRequest+0x210>
 8003f78:	a201      	add	r2, pc, #4	@ (adr r2, 8003f80 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7e:	bf00      	nop
 8003f80:	08003f91 	.word	0x08003f91
 8003f84:	080040f1 	.word	0x080040f1
 8003f88:	08003ff5 	.word	0x08003ff5
 8003f8c:	08004073 	.word	0x08004073
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003f90:	7c3b      	ldrb	r3, [r7, #16]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	f040 80b8 	bne.w	8004108 <HAL_HCD_HC_SubmitRequest+0x214>
 8003f98:	78bb      	ldrb	r3, [r7, #2]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f040 80b4 	bne.w	8004108 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003fa0:	8b3b      	ldrh	r3, [r7, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d108      	bne.n	8003fb8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003fa6:	78fb      	ldrb	r3, [r7, #3]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	212c      	movs	r1, #44	@ 0x2c
 8003fac:	fb01 f303 	mul.w	r3, r1, r3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3355      	adds	r3, #85	@ 0x55
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	212c      	movs	r1, #44	@ 0x2c
 8003fbe:	fb01 f303 	mul.w	r3, r1, r3
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3355      	adds	r3, #85	@ 0x55
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d109      	bne.n	8003fe0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	212c      	movs	r1, #44	@ 0x2c
 8003fd2:	fb01 f303 	mul.w	r3, r1, r3
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3342      	adds	r3, #66	@ 0x42
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003fde:	e093      	b.n	8004108 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	212c      	movs	r1, #44	@ 0x2c
 8003fe6:	fb01 f303 	mul.w	r3, r1, r3
 8003fea:	4413      	add	r3, r2
 8003fec:	3342      	adds	r3, #66	@ 0x42
 8003fee:	2202      	movs	r2, #2
 8003ff0:	701a      	strb	r2, [r3, #0]
      break;
 8003ff2:	e089      	b.n	8004108 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003ff4:	78bb      	ldrb	r3, [r7, #2]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d11d      	bne.n	8004036 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ffa:	78fb      	ldrb	r3, [r7, #3]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	212c      	movs	r1, #44	@ 0x2c
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	4413      	add	r3, r2
 8004006:	3355      	adds	r3, #85	@ 0x55
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d109      	bne.n	8004022 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800400e:	78fb      	ldrb	r3, [r7, #3]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	212c      	movs	r1, #44	@ 0x2c
 8004014:	fb01 f303 	mul.w	r3, r1, r3
 8004018:	4413      	add	r3, r2
 800401a:	3342      	adds	r3, #66	@ 0x42
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004020:	e073      	b.n	800410a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	212c      	movs	r1, #44	@ 0x2c
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	4413      	add	r3, r2
 800402e:	3342      	adds	r3, #66	@ 0x42
 8004030:	2202      	movs	r2, #2
 8004032:	701a      	strb	r2, [r3, #0]
      break;
 8004034:	e069      	b.n	800410a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004036:	78fb      	ldrb	r3, [r7, #3]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	212c      	movs	r1, #44	@ 0x2c
 800403c:	fb01 f303 	mul.w	r3, r1, r3
 8004040:	4413      	add	r3, r2
 8004042:	3354      	adds	r3, #84	@ 0x54
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d109      	bne.n	800405e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800404a:	78fb      	ldrb	r3, [r7, #3]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	212c      	movs	r1, #44	@ 0x2c
 8004050:	fb01 f303 	mul.w	r3, r1, r3
 8004054:	4413      	add	r3, r2
 8004056:	3342      	adds	r3, #66	@ 0x42
 8004058:	2200      	movs	r2, #0
 800405a:	701a      	strb	r2, [r3, #0]
      break;
 800405c:	e055      	b.n	800410a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	212c      	movs	r1, #44	@ 0x2c
 8004064:	fb01 f303 	mul.w	r3, r1, r3
 8004068:	4413      	add	r3, r2
 800406a:	3342      	adds	r3, #66	@ 0x42
 800406c:	2202      	movs	r2, #2
 800406e:	701a      	strb	r2, [r3, #0]
      break;
 8004070:	e04b      	b.n	800410a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004072:	78bb      	ldrb	r3, [r7, #2]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d11d      	bne.n	80040b4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	212c      	movs	r1, #44	@ 0x2c
 800407e:	fb01 f303 	mul.w	r3, r1, r3
 8004082:	4413      	add	r3, r2
 8004084:	3355      	adds	r3, #85	@ 0x55
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d109      	bne.n	80040a0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	212c      	movs	r1, #44	@ 0x2c
 8004092:	fb01 f303 	mul.w	r3, r1, r3
 8004096:	4413      	add	r3, r2
 8004098:	3342      	adds	r3, #66	@ 0x42
 800409a:	2200      	movs	r2, #0
 800409c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800409e:	e034      	b.n	800410a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	212c      	movs	r1, #44	@ 0x2c
 80040a6:	fb01 f303 	mul.w	r3, r1, r3
 80040aa:	4413      	add	r3, r2
 80040ac:	3342      	adds	r3, #66	@ 0x42
 80040ae:	2202      	movs	r2, #2
 80040b0:	701a      	strb	r2, [r3, #0]
      break;
 80040b2:	e02a      	b.n	800410a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	212c      	movs	r1, #44	@ 0x2c
 80040ba:	fb01 f303 	mul.w	r3, r1, r3
 80040be:	4413      	add	r3, r2
 80040c0:	3354      	adds	r3, #84	@ 0x54
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d109      	bne.n	80040dc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	212c      	movs	r1, #44	@ 0x2c
 80040ce:	fb01 f303 	mul.w	r3, r1, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	3342      	adds	r3, #66	@ 0x42
 80040d6:	2200      	movs	r2, #0
 80040d8:	701a      	strb	r2, [r3, #0]
      break;
 80040da:	e016      	b.n	800410a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040dc:	78fb      	ldrb	r3, [r7, #3]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	212c      	movs	r1, #44	@ 0x2c
 80040e2:	fb01 f303 	mul.w	r3, r1, r3
 80040e6:	4413      	add	r3, r2
 80040e8:	3342      	adds	r3, #66	@ 0x42
 80040ea:	2202      	movs	r2, #2
 80040ec:	701a      	strb	r2, [r3, #0]
      break;
 80040ee:	e00c      	b.n	800410a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	212c      	movs	r1, #44	@ 0x2c
 80040f6:	fb01 f303 	mul.w	r3, r1, r3
 80040fa:	4413      	add	r3, r2
 80040fc:	3342      	adds	r3, #66	@ 0x42
 80040fe:	2200      	movs	r2, #0
 8004100:	701a      	strb	r2, [r3, #0]
      break;
 8004102:	e002      	b.n	800410a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004104:	bf00      	nop
 8004106:	e000      	b.n	800410a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004108:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	212c      	movs	r1, #44	@ 0x2c
 8004110:	fb01 f303 	mul.w	r3, r1, r3
 8004114:	4413      	add	r3, r2
 8004116:	3344      	adds	r3, #68	@ 0x44
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	8b3a      	ldrh	r2, [r7, #24]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	202c      	movs	r0, #44	@ 0x2c
 8004124:	fb00 f303 	mul.w	r3, r0, r3
 8004128:	440b      	add	r3, r1
 800412a:	334c      	adds	r3, #76	@ 0x4c
 800412c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800412e:	78fb      	ldrb	r3, [r7, #3]
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	212c      	movs	r1, #44	@ 0x2c
 8004134:	fb01 f303 	mul.w	r3, r1, r3
 8004138:	4413      	add	r3, r2
 800413a:	3360      	adds	r3, #96	@ 0x60
 800413c:	2200      	movs	r2, #0
 800413e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	212c      	movs	r1, #44	@ 0x2c
 8004146:	fb01 f303 	mul.w	r3, r1, r3
 800414a:	4413      	add	r3, r2
 800414c:	3350      	adds	r3, #80	@ 0x50
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	212c      	movs	r1, #44	@ 0x2c
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	4413      	add	r3, r2
 800415e:	3339      	adds	r3, #57	@ 0x39
 8004160:	78fa      	ldrb	r2, [r7, #3]
 8004162:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	212c      	movs	r1, #44	@ 0x2c
 800416a:	fb01 f303 	mul.w	r3, r1, r3
 800416e:	4413      	add	r3, r2
 8004170:	3361      	adds	r3, #97	@ 0x61
 8004172:	2200      	movs	r2, #0
 8004174:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6818      	ldr	r0, [r3, #0]
 800417a:	78fb      	ldrb	r3, [r7, #3]
 800417c:	222c      	movs	r2, #44	@ 0x2c
 800417e:	fb02 f303 	mul.w	r3, r2, r3
 8004182:	3338      	adds	r3, #56	@ 0x38
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	18d1      	adds	r1, r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	461a      	mov	r2, r3
 8004190:	f005 fc86 	bl	8009aa0 <USB_HC_StartXfer>
 8004194:	4603      	mov	r3, r0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop

080041a0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f005 f987 	bl	80094ca <USB_GetMode>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b01      	cmp	r3, #1
 80041c0:	f040 80f6 	bne.w	80043b0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f005 f96b 	bl	80094a4 <USB_ReadInterrupts>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 80ec 	beq.w	80043ae <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f005 f962 	bl	80094a4 <USB_ReadInterrupts>
 80041e0:	4603      	mov	r3, r0
 80041e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041ea:	d104      	bne.n	80041f6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80041f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f005 f952 	bl	80094a4 <USB_ReadInterrupts>
 8004200:	4603      	mov	r3, r0
 8004202:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004206:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800420a:	d104      	bne.n	8004216 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004214:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f005 f942 	bl	80094a4 <USB_ReadInterrupts>
 8004220:	4603      	mov	r3, r0
 8004222:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004226:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800422a:	d104      	bne.n	8004236 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004234:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f005 f932 	bl	80094a4 <USB_ReadInterrupts>
 8004240:	4603      	mov	r3, r0
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b02      	cmp	r3, #2
 8004248:	d103      	bne.n	8004252 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2202      	movs	r2, #2
 8004250:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f005 f924 	bl	80094a4 <USB_ReadInterrupts>
 800425c:	4603      	mov	r3, r0
 800425e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004262:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004266:	d11c      	bne.n	80042a2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004270:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10f      	bne.n	80042a2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004282:	2110      	movs	r1, #16
 8004284:	6938      	ldr	r0, [r7, #16]
 8004286:	f005 f813 	bl	80092b0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800428a:	6938      	ldr	r0, [r7, #16]
 800428c:	f005 f844 	bl	8009318 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2101      	movs	r1, #1
 8004296:	4618      	mov	r0, r3
 8004298:	f005 fa1a 	bl	80096d0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f00c fbf5 	bl	8010a8c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f005 f8fc 	bl	80094a4 <USB_ReadInterrupts>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042b6:	d102      	bne.n	80042be <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f001 f89e 	bl	80053fa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f005 f8ee 	bl	80094a4 <USB_ReadInterrupts>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d106      	bne.n	80042e0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f00c fbbe 	bl	8010a54 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2208      	movs	r2, #8
 80042de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f005 f8dd 	bl	80094a4 <USB_ReadInterrupts>
 80042ea:	4603      	mov	r3, r0
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	d101      	bne.n	80042f8 <HAL_HCD_IRQHandler+0x158>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <HAL_HCD_IRQHandler+0x15a>
 80042f8:	2300      	movs	r3, #0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d012      	beq.n	8004324 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	699a      	ldr	r2, [r3, #24]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0210 	bic.w	r2, r2, #16
 800430c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 ffa1 	bl	8005256 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0210 	orr.w	r2, r2, #16
 8004322:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f005 f8bb 	bl	80094a4 <USB_ReadInterrupts>
 800432e:	4603      	mov	r3, r0
 8004330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004334:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004338:	d13a      	bne.n	80043b0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f005 fcf0 	bl	8009d24 <USB_HC_ReadInterrupt>
 8004344:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	e025      	b.n	8004398 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	fa22 f303 	lsr.w	r3, r2, r3
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d018      	beq.n	8004392 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004372:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004376:	d106      	bne.n	8004386 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	4619      	mov	r1, r3
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f8ab 	bl	80044da <HCD_HC_IN_IRQHandler>
 8004384:	e005      	b.n	8004392 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	4619      	mov	r1, r3
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fbf9 	bl	8004b84 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	3301      	adds	r3, #1
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d3d4      	bcc.n	800434c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043aa:	615a      	str	r2, [r3, #20]
 80043ac:	e000      	b.n	80043b0 <HAL_HCD_IRQHandler+0x210>
      return;
 80043ae:	bf00      	nop
    }
  }
}
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_HCD_Start+0x16>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e013      	b.n	80043f4 <HAL_HCD_Start+0x3e>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2101      	movs	r1, #1
 80043da:	4618      	mov	r0, r3
 80043dc:	f005 f9dc 	bl	8009798 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f004 fef4 	bl	80091d2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_HCD_Stop+0x16>
 800440e:	2302      	movs	r3, #2
 8004410:	e00d      	b.n	800442e <HAL_HCD_Stop+0x32>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f005 fdca 	bl	8009fb8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f005 f97e 	bl	8009744 <USB_ResetPort>
 8004448:	4603      	mov	r3, r0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	460b      	mov	r3, r1
 800445c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800445e:	78fb      	ldrb	r3, [r7, #3]
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	212c      	movs	r1, #44	@ 0x2c
 8004464:	fb01 f303 	mul.w	r3, r1, r3
 8004468:	4413      	add	r3, r2
 800446a:	3360      	adds	r3, #96	@ 0x60
 800446c:	781b      	ldrb	r3, [r3, #0]
}
 800446e:	4618      	mov	r0, r3
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	460b      	mov	r3, r1
 8004484:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	212c      	movs	r1, #44	@ 0x2c
 800448c:	fb01 f303 	mul.w	r3, r1, r3
 8004490:	4413      	add	r3, r2
 8004492:	3350      	adds	r3, #80	@ 0x50
 8004494:	681b      	ldr	r3, [r3, #0]
}
 8004496:	4618      	mov	r0, r3
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f005 f9c2 	bl	8009838 <USB_GetCurrentFrame>
 80044b4:	4603      	mov	r3, r0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f005 f99d 	bl	800980a <USB_GetHostSpeed>
 80044d0:	4603      	mov	r3, r0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b086      	sub	sp, #24
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	460b      	mov	r3, r1
 80044e4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 0304 	and.w	r3, r3, #4
 8004506:	2b04      	cmp	r3, #4
 8004508:	d11a      	bne.n	8004540 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	4413      	add	r3, r2
 8004512:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004516:	461a      	mov	r2, r3
 8004518:	2304      	movs	r3, #4
 800451a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	212c      	movs	r1, #44	@ 0x2c
 8004522:	fb01 f303 	mul.w	r3, r1, r3
 8004526:	4413      	add	r3, r2
 8004528:	3361      	adds	r3, #97	@ 0x61
 800452a:	2206      	movs	r2, #6
 800452c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	4611      	mov	r1, r2
 8004538:	4618      	mov	r0, r3
 800453a:	f005 fc04 	bl	8009d46 <USB_HC_Halt>
 800453e:	e0af      	b.n	80046a0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4413      	add	r3, r2
 8004548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004556:	d11b      	bne.n	8004590 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	4413      	add	r3, r2
 8004560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004564:	461a      	mov	r2, r3
 8004566:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800456a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	212c      	movs	r1, #44	@ 0x2c
 8004572:	fb01 f303 	mul.w	r3, r1, r3
 8004576:	4413      	add	r3, r2
 8004578:	3361      	adds	r3, #97	@ 0x61
 800457a:	2207      	movs	r2, #7
 800457c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	4611      	mov	r1, r2
 8004588:	4618      	mov	r0, r3
 800458a:	f005 fbdc 	bl	8009d46 <USB_HC_Halt>
 800458e:	e087      	b.n	80046a0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	4413      	add	r3, r2
 8004598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b20      	cmp	r3, #32
 80045a4:	d109      	bne.n	80045ba <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045b2:	461a      	mov	r2, r3
 80045b4:	2320      	movs	r3, #32
 80045b6:	6093      	str	r3, [r2, #8]
 80045b8:	e072      	b.n	80046a0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d11a      	bne.n	8004606 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045dc:	461a      	mov	r2, r3
 80045de:	2308      	movs	r3, #8
 80045e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	212c      	movs	r1, #44	@ 0x2c
 80045e8:	fb01 f303 	mul.w	r3, r1, r3
 80045ec:	4413      	add	r3, r2
 80045ee:	3361      	adds	r3, #97	@ 0x61
 80045f0:	2205      	movs	r2, #5
 80045f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	4611      	mov	r1, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f005 fba1 	bl	8009d46 <USB_HC_Halt>
 8004604:	e04c      	b.n	80046a0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	4413      	add	r3, r2
 800460e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004618:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800461c:	d11b      	bne.n	8004656 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	4413      	add	r3, r2
 8004626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800462a:	461a      	mov	r2, r3
 800462c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004630:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	212c      	movs	r1, #44	@ 0x2c
 8004638:	fb01 f303 	mul.w	r3, r1, r3
 800463c:	4413      	add	r3, r2
 800463e:	3361      	adds	r3, #97	@ 0x61
 8004640:	2208      	movs	r2, #8
 8004642:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	4611      	mov	r1, r2
 800464e:	4618      	mov	r0, r3
 8004650:	f005 fb79 	bl	8009d46 <USB_HC_Halt>
 8004654:	e024      	b.n	80046a0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	4413      	add	r3, r2
 800465e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004668:	2b80      	cmp	r3, #128	@ 0x80
 800466a:	d119      	bne.n	80046a0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	4413      	add	r3, r2
 8004674:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004678:	461a      	mov	r2, r3
 800467a:	2380      	movs	r3, #128	@ 0x80
 800467c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	212c      	movs	r1, #44	@ 0x2c
 8004684:	fb01 f303 	mul.w	r3, r1, r3
 8004688:	4413      	add	r3, r2
 800468a:	3361      	adds	r3, #97	@ 0x61
 800468c:	2206      	movs	r2, #6
 800468e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	4611      	mov	r1, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f005 fb53 	bl	8009d46 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046b6:	d112      	bne.n	80046de <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	4611      	mov	r1, r2
 80046c2:	4618      	mov	r0, r3
 80046c4:	f005 fb3f 	bl	8009d46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046d4:	461a      	mov	r2, r3
 80046d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046da:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80046dc:	e24e      	b.n	8004b7c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	f040 80df 	bne.w	80048b4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d019      	beq.n	8004732 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	212c      	movs	r1, #44	@ 0x2c
 8004704:	fb01 f303 	mul.w	r3, r1, r3
 8004708:	4413      	add	r3, r2
 800470a:	3348      	adds	r3, #72	@ 0x48
 800470c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	0159      	lsls	r1, r3, #5
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	440b      	add	r3, r1
 8004716:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004720:	1ad2      	subs	r2, r2, r3
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	202c      	movs	r0, #44	@ 0x2c
 8004728:	fb00 f303 	mul.w	r3, r0, r3
 800472c:	440b      	add	r3, r1
 800472e:	3350      	adds	r3, #80	@ 0x50
 8004730:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	212c      	movs	r1, #44	@ 0x2c
 8004738:	fb01 f303 	mul.w	r3, r1, r3
 800473c:	4413      	add	r3, r2
 800473e:	3361      	adds	r3, #97	@ 0x61
 8004740:	2201      	movs	r2, #1
 8004742:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	212c      	movs	r1, #44	@ 0x2c
 800474a:	fb01 f303 	mul.w	r3, r1, r3
 800474e:	4413      	add	r3, r2
 8004750:	335c      	adds	r3, #92	@ 0x5c
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4413      	add	r3, r2
 800475e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004762:	461a      	mov	r2, r3
 8004764:	2301      	movs	r3, #1
 8004766:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	212c      	movs	r1, #44	@ 0x2c
 800476e:	fb01 f303 	mul.w	r3, r1, r3
 8004772:	4413      	add	r3, r2
 8004774:	333f      	adds	r3, #63	@ 0x3f
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d009      	beq.n	8004790 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	212c      	movs	r1, #44	@ 0x2c
 8004782:	fb01 f303 	mul.w	r3, r1, r3
 8004786:	4413      	add	r3, r2
 8004788:	333f      	adds	r3, #63	@ 0x3f
 800478a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800478c:	2b02      	cmp	r3, #2
 800478e:	d111      	bne.n	80047b4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	4611      	mov	r1, r2
 800479a:	4618      	mov	r0, r3
 800479c:	f005 fad3 	bl	8009d46 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047ac:	461a      	mov	r2, r3
 80047ae:	2310      	movs	r3, #16
 80047b0:	6093      	str	r3, [r2, #8]
 80047b2:	e03a      	b.n	800482a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	212c      	movs	r1, #44	@ 0x2c
 80047ba:	fb01 f303 	mul.w	r3, r1, r3
 80047be:	4413      	add	r3, r2
 80047c0:	333f      	adds	r3, #63	@ 0x3f
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d009      	beq.n	80047dc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	212c      	movs	r1, #44	@ 0x2c
 80047ce:	fb01 f303 	mul.w	r3, r1, r3
 80047d2:	4413      	add	r3, r2
 80047d4:	333f      	adds	r3, #63	@ 0x3f
 80047d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d126      	bne.n	800482a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	0151      	lsls	r1, r2, #5
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	440a      	add	r2, r1
 80047f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047f6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80047fa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	212c      	movs	r1, #44	@ 0x2c
 8004802:	fb01 f303 	mul.w	r3, r1, r3
 8004806:	4413      	add	r3, r2
 8004808:	3360      	adds	r3, #96	@ 0x60
 800480a:	2201      	movs	r2, #1
 800480c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	b2d9      	uxtb	r1, r3
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	202c      	movs	r0, #44	@ 0x2c
 8004818:	fb00 f303 	mul.w	r3, r0, r3
 800481c:	4413      	add	r3, r2
 800481e:	3360      	adds	r3, #96	@ 0x60
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f00c f93f 	bl	8010aa8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d12b      	bne.n	800488a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	212c      	movs	r1, #44	@ 0x2c
 8004838:	fb01 f303 	mul.w	r3, r1, r3
 800483c:	4413      	add	r3, r2
 800483e:	3348      	adds	r3, #72	@ 0x48
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	202c      	movs	r0, #44	@ 0x2c
 8004848:	fb00 f202 	mul.w	r2, r0, r2
 800484c:	440a      	add	r2, r1
 800484e:	3240      	adds	r2, #64	@ 0x40
 8004850:	8812      	ldrh	r2, [r2, #0]
 8004852:	fbb3 f3f2 	udiv	r3, r3, r2
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 818e 	beq.w	8004b7c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	212c      	movs	r1, #44	@ 0x2c
 8004866:	fb01 f303 	mul.w	r3, r1, r3
 800486a:	4413      	add	r3, r2
 800486c:	3354      	adds	r3, #84	@ 0x54
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	f083 0301 	eor.w	r3, r3, #1
 8004874:	b2d8      	uxtb	r0, r3
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	212c      	movs	r1, #44	@ 0x2c
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	4413      	add	r3, r2
 8004882:	3354      	adds	r3, #84	@ 0x54
 8004884:	4602      	mov	r2, r0
 8004886:	701a      	strb	r2, [r3, #0]
}
 8004888:	e178      	b.n	8004b7c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	212c      	movs	r1, #44	@ 0x2c
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	4413      	add	r3, r2
 8004896:	3354      	adds	r3, #84	@ 0x54
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	f083 0301 	eor.w	r3, r3, #1
 800489e:	b2d8      	uxtb	r0, r3
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	212c      	movs	r1, #44	@ 0x2c
 80048a6:	fb01 f303 	mul.w	r3, r1, r3
 80048aa:	4413      	add	r3, r2
 80048ac:	3354      	adds	r3, #84	@ 0x54
 80048ae:	4602      	mov	r2, r0
 80048b0:	701a      	strb	r2, [r3, #0]
}
 80048b2:	e163      	b.n	8004b7c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	f040 80f6 	bne.w	8004ab8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	212c      	movs	r1, #44	@ 0x2c
 80048d2:	fb01 f303 	mul.w	r3, r1, r3
 80048d6:	4413      	add	r3, r2
 80048d8:	3361      	adds	r3, #97	@ 0x61
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d109      	bne.n	80048f4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	212c      	movs	r1, #44	@ 0x2c
 80048e6:	fb01 f303 	mul.w	r3, r1, r3
 80048ea:	4413      	add	r3, r2
 80048ec:	3360      	adds	r3, #96	@ 0x60
 80048ee:	2201      	movs	r2, #1
 80048f0:	701a      	strb	r2, [r3, #0]
 80048f2:	e0c9      	b.n	8004a88 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	212c      	movs	r1, #44	@ 0x2c
 80048fa:	fb01 f303 	mul.w	r3, r1, r3
 80048fe:	4413      	add	r3, r2
 8004900:	3361      	adds	r3, #97	@ 0x61
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b05      	cmp	r3, #5
 8004906:	d109      	bne.n	800491c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	212c      	movs	r1, #44	@ 0x2c
 800490e:	fb01 f303 	mul.w	r3, r1, r3
 8004912:	4413      	add	r3, r2
 8004914:	3360      	adds	r3, #96	@ 0x60
 8004916:	2205      	movs	r2, #5
 8004918:	701a      	strb	r2, [r3, #0]
 800491a:	e0b5      	b.n	8004a88 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	212c      	movs	r1, #44	@ 0x2c
 8004922:	fb01 f303 	mul.w	r3, r1, r3
 8004926:	4413      	add	r3, r2
 8004928:	3361      	adds	r3, #97	@ 0x61
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b06      	cmp	r3, #6
 800492e:	d009      	beq.n	8004944 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	212c      	movs	r1, #44	@ 0x2c
 8004936:	fb01 f303 	mul.w	r3, r1, r3
 800493a:	4413      	add	r3, r2
 800493c:	3361      	adds	r3, #97	@ 0x61
 800493e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004940:	2b08      	cmp	r3, #8
 8004942:	d150      	bne.n	80049e6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	212c      	movs	r1, #44	@ 0x2c
 800494a:	fb01 f303 	mul.w	r3, r1, r3
 800494e:	4413      	add	r3, r2
 8004950:	335c      	adds	r3, #92	@ 0x5c
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	202c      	movs	r0, #44	@ 0x2c
 800495c:	fb00 f303 	mul.w	r3, r0, r3
 8004960:	440b      	add	r3, r1
 8004962:	335c      	adds	r3, #92	@ 0x5c
 8004964:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	212c      	movs	r1, #44	@ 0x2c
 800496c:	fb01 f303 	mul.w	r3, r1, r3
 8004970:	4413      	add	r3, r2
 8004972:	335c      	adds	r3, #92	@ 0x5c
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d912      	bls.n	80049a0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	212c      	movs	r1, #44	@ 0x2c
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	4413      	add	r3, r2
 8004986:	335c      	adds	r3, #92	@ 0x5c
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	212c      	movs	r1, #44	@ 0x2c
 8004992:	fb01 f303 	mul.w	r3, r1, r3
 8004996:	4413      	add	r3, r2
 8004998:	3360      	adds	r3, #96	@ 0x60
 800499a:	2204      	movs	r2, #4
 800499c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800499e:	e073      	b.n	8004a88 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	212c      	movs	r1, #44	@ 0x2c
 80049a6:	fb01 f303 	mul.w	r3, r1, r3
 80049aa:	4413      	add	r3, r2
 80049ac:	3360      	adds	r3, #96	@ 0x60
 80049ae:	2202      	movs	r2, #2
 80049b0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80049c8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80049d0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049de:	461a      	mov	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049e4:	e050      	b.n	8004a88 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	212c      	movs	r1, #44	@ 0x2c
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	4413      	add	r3, r2
 80049f2:	3361      	adds	r3, #97	@ 0x61
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d122      	bne.n	8004a40 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	212c      	movs	r1, #44	@ 0x2c
 8004a00:	fb01 f303 	mul.w	r3, r1, r3
 8004a04:	4413      	add	r3, r2
 8004a06:	3360      	adds	r3, #96	@ 0x60
 8004a08:	2202      	movs	r2, #2
 8004a0a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a22:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a2a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a38:	461a      	mov	r2, r3
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	e023      	b.n	8004a88 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	212c      	movs	r1, #44	@ 0x2c
 8004a46:	fb01 f303 	mul.w	r3, r1, r3
 8004a4a:	4413      	add	r3, r2
 8004a4c:	3361      	adds	r3, #97	@ 0x61
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b07      	cmp	r3, #7
 8004a52:	d119      	bne.n	8004a88 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	212c      	movs	r1, #44	@ 0x2c
 8004a5a:	fb01 f303 	mul.w	r3, r1, r3
 8004a5e:	4413      	add	r3, r2
 8004a60:	335c      	adds	r3, #92	@ 0x5c
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	202c      	movs	r0, #44	@ 0x2c
 8004a6c:	fb00 f303 	mul.w	r3, r0, r3
 8004a70:	440b      	add	r3, r1
 8004a72:	335c      	adds	r3, #92	@ 0x5c
 8004a74:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	212c      	movs	r1, #44	@ 0x2c
 8004a7c:	fb01 f303 	mul.w	r3, r1, r3
 8004a80:	4413      	add	r3, r2
 8004a82:	3360      	adds	r3, #96	@ 0x60
 8004a84:	2204      	movs	r2, #4
 8004a86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a94:	461a      	mov	r2, r3
 8004a96:	2302      	movs	r3, #2
 8004a98:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	b2d9      	uxtb	r1, r3
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	202c      	movs	r0, #44	@ 0x2c
 8004aa4:	fb00 f303 	mul.w	r3, r0, r3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	3360      	adds	r3, #96	@ 0x60
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f00b fff9 	bl	8010aa8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004ab6:	e061      	b.n	8004b7c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0310 	and.w	r3, r3, #16
 8004aca:	2b10      	cmp	r3, #16
 8004acc:	d156      	bne.n	8004b7c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	212c      	movs	r1, #44	@ 0x2c
 8004ad4:	fb01 f303 	mul.w	r3, r1, r3
 8004ad8:	4413      	add	r3, r2
 8004ada:	333f      	adds	r3, #63	@ 0x3f
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b03      	cmp	r3, #3
 8004ae0:	d111      	bne.n	8004b06 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	212c      	movs	r1, #44	@ 0x2c
 8004ae8:	fb01 f303 	mul.w	r3, r1, r3
 8004aec:	4413      	add	r3, r2
 8004aee:	335c      	adds	r3, #92	@ 0x5c
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	4611      	mov	r1, r2
 8004afe:	4618      	mov	r0, r3
 8004b00:	f005 f921 	bl	8009d46 <USB_HC_Halt>
 8004b04:	e031      	b.n	8004b6a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	212c      	movs	r1, #44	@ 0x2c
 8004b0c:	fb01 f303 	mul.w	r3, r1, r3
 8004b10:	4413      	add	r3, r2
 8004b12:	333f      	adds	r3, #63	@ 0x3f
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d009      	beq.n	8004b2e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	212c      	movs	r1, #44	@ 0x2c
 8004b20:	fb01 f303 	mul.w	r3, r1, r3
 8004b24:	4413      	add	r3, r2
 8004b26:	333f      	adds	r3, #63	@ 0x3f
 8004b28:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d11d      	bne.n	8004b6a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	212c      	movs	r1, #44	@ 0x2c
 8004b34:	fb01 f303 	mul.w	r3, r1, r3
 8004b38:	4413      	add	r3, r2
 8004b3a:	335c      	adds	r3, #92	@ 0x5c
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d110      	bne.n	8004b6a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	212c      	movs	r1, #44	@ 0x2c
 8004b4e:	fb01 f303 	mul.w	r3, r1, r3
 8004b52:	4413      	add	r3, r2
 8004b54:	3361      	adds	r3, #97	@ 0x61
 8004b56:	2203      	movs	r2, #3
 8004b58:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	4611      	mov	r1, r2
 8004b64:	4618      	mov	r0, r3
 8004b66:	f005 f8ee 	bl	8009d46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b76:	461a      	mov	r2, r3
 8004b78:	2310      	movs	r3, #16
 8004b7a:	6093      	str	r3, [r2, #8]
}
 8004b7c:	bf00      	nop
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b088      	sub	sp, #32
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d11a      	bne.n	8004bea <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	2304      	movs	r3, #4
 8004bc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	212c      	movs	r1, #44	@ 0x2c
 8004bcc:	fb01 f303 	mul.w	r3, r1, r3
 8004bd0:	4413      	add	r3, r2
 8004bd2:	3361      	adds	r3, #97	@ 0x61
 8004bd4:	2206      	movs	r2, #6
 8004bd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	4611      	mov	r1, r2
 8004be2:	4618      	mov	r0, r3
 8004be4:	f005 f8af 	bl	8009d46 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004be8:	e331      	b.n	800524e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	d12e      	bne.n	8004c5e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	2320      	movs	r3, #32
 8004c10:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	212c      	movs	r1, #44	@ 0x2c
 8004c18:	fb01 f303 	mul.w	r3, r1, r3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	333d      	adds	r3, #61	@ 0x3d
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	f040 8313 	bne.w	800524e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	212c      	movs	r1, #44	@ 0x2c
 8004c2e:	fb01 f303 	mul.w	r3, r1, r3
 8004c32:	4413      	add	r3, r2
 8004c34:	333d      	adds	r3, #61	@ 0x3d
 8004c36:	2200      	movs	r2, #0
 8004c38:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	212c      	movs	r1, #44	@ 0x2c
 8004c40:	fb01 f303 	mul.w	r3, r1, r3
 8004c44:	4413      	add	r3, r2
 8004c46:	3360      	adds	r3, #96	@ 0x60
 8004c48:	2202      	movs	r2, #2
 8004c4a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	4611      	mov	r1, r2
 8004c56:	4618      	mov	r0, r3
 8004c58:	f005 f875 	bl	8009d46 <USB_HC_Halt>
}
 8004c5c:	e2f7      	b.n	800524e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c74:	d112      	bne.n	8004c9c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c82:	461a      	mov	r2, r3
 8004c84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c88:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	4611      	mov	r1, r2
 8004c94:	4618      	mov	r0, r3
 8004c96:	f005 f856 	bl	8009d46 <USB_HC_Halt>
}
 8004c9a:	e2d8      	b.n	800524e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d140      	bne.n	8004d34 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	212c      	movs	r1, #44	@ 0x2c
 8004cb8:	fb01 f303 	mul.w	r3, r1, r3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	335c      	adds	r3, #92	@ 0x5c
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd6:	2b40      	cmp	r3, #64	@ 0x40
 8004cd8:	d111      	bne.n	8004cfe <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	212c      	movs	r1, #44	@ 0x2c
 8004ce0:	fb01 f303 	mul.w	r3, r1, r3
 8004ce4:	4413      	add	r3, r2
 8004ce6:	333d      	adds	r3, #61	@ 0x3d
 8004ce8:	2201      	movs	r2, #1
 8004cea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	2340      	movs	r3, #64	@ 0x40
 8004cfc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	212c      	movs	r1, #44	@ 0x2c
 8004d16:	fb01 f303 	mul.w	r3, r1, r3
 8004d1a:	4413      	add	r3, r2
 8004d1c:	3361      	adds	r3, #97	@ 0x61
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f005 f80a 	bl	8009d46 <USB_HC_Halt>
}
 8004d32:	e28c      	b.n	800524e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d46:	2b40      	cmp	r3, #64	@ 0x40
 8004d48:	d12c      	bne.n	8004da4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	212c      	movs	r1, #44	@ 0x2c
 8004d50:	fb01 f303 	mul.w	r3, r1, r3
 8004d54:	4413      	add	r3, r2
 8004d56:	3361      	adds	r3, #97	@ 0x61
 8004d58:	2204      	movs	r2, #4
 8004d5a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	212c      	movs	r1, #44	@ 0x2c
 8004d62:	fb01 f303 	mul.w	r3, r1, r3
 8004d66:	4413      	add	r3, r2
 8004d68:	333d      	adds	r3, #61	@ 0x3d
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	212c      	movs	r1, #44	@ 0x2c
 8004d74:	fb01 f303 	mul.w	r3, r1, r3
 8004d78:	4413      	add	r3, r2
 8004d7a:	335c      	adds	r3, #92	@ 0x5c
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	4611      	mov	r1, r2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f004 ffdb 	bl	8009d46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	2340      	movs	r3, #64	@ 0x40
 8004da0:	6093      	str	r3, [r2, #8]
}
 8004da2:	e254      	b.n	800524e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d11a      	bne.n	8004df0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	2308      	movs	r3, #8
 8004dca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	212c      	movs	r1, #44	@ 0x2c
 8004dd2:	fb01 f303 	mul.w	r3, r1, r3
 8004dd6:	4413      	add	r3, r2
 8004dd8:	3361      	adds	r3, #97	@ 0x61
 8004dda:	2205      	movs	r2, #5
 8004ddc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	4611      	mov	r1, r2
 8004de8:	4618      	mov	r0, r3
 8004dea:	f004 ffac 	bl	8009d46 <USB_HC_Halt>
}
 8004dee:	e22e      	b.n	800524e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 0310 	and.w	r3, r3, #16
 8004e02:	2b10      	cmp	r3, #16
 8004e04:	d140      	bne.n	8004e88 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	212c      	movs	r1, #44	@ 0x2c
 8004e0c:	fb01 f303 	mul.w	r3, r1, r3
 8004e10:	4413      	add	r3, r2
 8004e12:	335c      	adds	r3, #92	@ 0x5c
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	212c      	movs	r1, #44	@ 0x2c
 8004e1e:	fb01 f303 	mul.w	r3, r1, r3
 8004e22:	4413      	add	r3, r2
 8004e24:	3361      	adds	r3, #97	@ 0x61
 8004e26:	2203      	movs	r2, #3
 8004e28:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	212c      	movs	r1, #44	@ 0x2c
 8004e30:	fb01 f303 	mul.w	r3, r1, r3
 8004e34:	4413      	add	r3, r2
 8004e36:	333d      	adds	r3, #61	@ 0x3d
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d112      	bne.n	8004e64 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	212c      	movs	r1, #44	@ 0x2c
 8004e44:	fb01 f303 	mul.w	r3, r1, r3
 8004e48:	4413      	add	r3, r2
 8004e4a:	333c      	adds	r3, #60	@ 0x3c
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d108      	bne.n	8004e64 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	212c      	movs	r1, #44	@ 0x2c
 8004e58:	fb01 f303 	mul.w	r3, r1, r3
 8004e5c:	4413      	add	r3, r2
 8004e5e:	333d      	adds	r3, #61	@ 0x3d
 8004e60:	2201      	movs	r2, #1
 8004e62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	4611      	mov	r1, r2
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f004 ff69 	bl	8009d46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e80:	461a      	mov	r2, r3
 8004e82:	2310      	movs	r3, #16
 8004e84:	6093      	str	r3, [r2, #8]
}
 8004e86:	e1e2      	b.n	800524e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e9a:	2b80      	cmp	r3, #128	@ 0x80
 8004e9c:	d164      	bne.n	8004f68 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d111      	bne.n	8004eca <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	212c      	movs	r1, #44	@ 0x2c
 8004eac:	fb01 f303 	mul.w	r3, r1, r3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	3361      	adds	r3, #97	@ 0x61
 8004eb4:	2206      	movs	r2, #6
 8004eb6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f004 ff3f 	bl	8009d46 <USB_HC_Halt>
 8004ec8:	e044      	b.n	8004f54 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	212c      	movs	r1, #44	@ 0x2c
 8004ed0:	fb01 f303 	mul.w	r3, r1, r3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	335c      	adds	r3, #92	@ 0x5c
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	6879      	ldr	r1, [r7, #4]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	202c      	movs	r0, #44	@ 0x2c
 8004ee2:	fb00 f303 	mul.w	r3, r0, r3
 8004ee6:	440b      	add	r3, r1
 8004ee8:	335c      	adds	r3, #92	@ 0x5c
 8004eea:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	212c      	movs	r1, #44	@ 0x2c
 8004ef2:	fb01 f303 	mul.w	r3, r1, r3
 8004ef6:	4413      	add	r3, r2
 8004ef8:	335c      	adds	r3, #92	@ 0x5c
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d920      	bls.n	8004f42 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	212c      	movs	r1, #44	@ 0x2c
 8004f06:	fb01 f303 	mul.w	r3, r1, r3
 8004f0a:	4413      	add	r3, r2
 8004f0c:	335c      	adds	r3, #92	@ 0x5c
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	212c      	movs	r1, #44	@ 0x2c
 8004f18:	fb01 f303 	mul.w	r3, r1, r3
 8004f1c:	4413      	add	r3, r2
 8004f1e:	3360      	adds	r3, #96	@ 0x60
 8004f20:	2204      	movs	r2, #4
 8004f22:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	b2d9      	uxtb	r1, r3
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	202c      	movs	r0, #44	@ 0x2c
 8004f2e:	fb00 f303 	mul.w	r3, r0, r3
 8004f32:	4413      	add	r3, r2
 8004f34:	3360      	adds	r3, #96	@ 0x60
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f00b fdb4 	bl	8010aa8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f40:	e008      	b.n	8004f54 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	212c      	movs	r1, #44	@ 0x2c
 8004f48:	fb01 f303 	mul.w	r3, r1, r3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	3360      	adds	r3, #96	@ 0x60
 8004f50:	2202      	movs	r2, #2
 8004f52:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f60:	461a      	mov	r2, r3
 8004f62:	2380      	movs	r3, #128	@ 0x80
 8004f64:	6093      	str	r3, [r2, #8]
}
 8004f66:	e172      	b.n	800524e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f7e:	d11b      	bne.n	8004fb8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	212c      	movs	r1, #44	@ 0x2c
 8004f86:	fb01 f303 	mul.w	r3, r1, r3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	3361      	adds	r3, #97	@ 0x61
 8004f8e:	2208      	movs	r2, #8
 8004f90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f004 fed2 	bl	8009d46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fb4:	6093      	str	r3, [r2, #8]
}
 8004fb6:	e14a      	b.n	800524e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	f040 813f 	bne.w	800524e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	212c      	movs	r1, #44	@ 0x2c
 8004fd6:	fb01 f303 	mul.w	r3, r1, r3
 8004fda:	4413      	add	r3, r2
 8004fdc:	3361      	adds	r3, #97	@ 0x61
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d17d      	bne.n	80050e0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	212c      	movs	r1, #44	@ 0x2c
 8004fea:	fb01 f303 	mul.w	r3, r1, r3
 8004fee:	4413      	add	r3, r2
 8004ff0:	3360      	adds	r3, #96	@ 0x60
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	212c      	movs	r1, #44	@ 0x2c
 8004ffc:	fb01 f303 	mul.w	r3, r1, r3
 8005000:	4413      	add	r3, r2
 8005002:	333f      	adds	r3, #63	@ 0x3f
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b02      	cmp	r3, #2
 8005008:	d00a      	beq.n	8005020 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	212c      	movs	r1, #44	@ 0x2c
 8005010:	fb01 f303 	mul.w	r3, r1, r3
 8005014:	4413      	add	r3, r2
 8005016:	333f      	adds	r3, #63	@ 0x3f
 8005018:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800501a:	2b03      	cmp	r3, #3
 800501c:	f040 8100 	bne.w	8005220 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d113      	bne.n	8005050 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	212c      	movs	r1, #44	@ 0x2c
 800502e:	fb01 f303 	mul.w	r3, r1, r3
 8005032:	4413      	add	r3, r2
 8005034:	3355      	adds	r3, #85	@ 0x55
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	f083 0301 	eor.w	r3, r3, #1
 800503c:	b2d8      	uxtb	r0, r3
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	212c      	movs	r1, #44	@ 0x2c
 8005044:	fb01 f303 	mul.w	r3, r1, r3
 8005048:	4413      	add	r3, r2
 800504a:	3355      	adds	r3, #85	@ 0x55
 800504c:	4602      	mov	r2, r0
 800504e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	2b01      	cmp	r3, #1
 8005056:	f040 80e3 	bne.w	8005220 <HCD_HC_OUT_IRQHandler+0x69c>
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	212c      	movs	r1, #44	@ 0x2c
 8005060:	fb01 f303 	mul.w	r3, r1, r3
 8005064:	4413      	add	r3, r2
 8005066:	334c      	adds	r3, #76	@ 0x4c
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 80d8 	beq.w	8005220 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	212c      	movs	r1, #44	@ 0x2c
 8005076:	fb01 f303 	mul.w	r3, r1, r3
 800507a:	4413      	add	r3, r2
 800507c:	334c      	adds	r3, #76	@ 0x4c
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	202c      	movs	r0, #44	@ 0x2c
 8005086:	fb00 f202 	mul.w	r2, r0, r2
 800508a:	440a      	add	r2, r1
 800508c:	3240      	adds	r2, #64	@ 0x40
 800508e:	8812      	ldrh	r2, [r2, #0]
 8005090:	4413      	add	r3, r2
 8005092:	3b01      	subs	r3, #1
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	202c      	movs	r0, #44	@ 0x2c
 800509a:	fb00 f202 	mul.w	r2, r0, r2
 800509e:	440a      	add	r2, r1
 80050a0:	3240      	adds	r2, #64	@ 0x40
 80050a2:	8812      	ldrh	r2, [r2, #0]
 80050a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 80b5 	beq.w	8005220 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	212c      	movs	r1, #44	@ 0x2c
 80050bc:	fb01 f303 	mul.w	r3, r1, r3
 80050c0:	4413      	add	r3, r2
 80050c2:	3355      	adds	r3, #85	@ 0x55
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	f083 0301 	eor.w	r3, r3, #1
 80050ca:	b2d8      	uxtb	r0, r3
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	212c      	movs	r1, #44	@ 0x2c
 80050d2:	fb01 f303 	mul.w	r3, r1, r3
 80050d6:	4413      	add	r3, r2
 80050d8:	3355      	adds	r3, #85	@ 0x55
 80050da:	4602      	mov	r2, r0
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	e09f      	b.n	8005220 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	212c      	movs	r1, #44	@ 0x2c
 80050e6:	fb01 f303 	mul.w	r3, r1, r3
 80050ea:	4413      	add	r3, r2
 80050ec:	3361      	adds	r3, #97	@ 0x61
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d109      	bne.n	8005108 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	212c      	movs	r1, #44	@ 0x2c
 80050fa:	fb01 f303 	mul.w	r3, r1, r3
 80050fe:	4413      	add	r3, r2
 8005100:	3360      	adds	r3, #96	@ 0x60
 8005102:	2202      	movs	r2, #2
 8005104:	701a      	strb	r2, [r3, #0]
 8005106:	e08b      	b.n	8005220 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	212c      	movs	r1, #44	@ 0x2c
 800510e:	fb01 f303 	mul.w	r3, r1, r3
 8005112:	4413      	add	r3, r2
 8005114:	3361      	adds	r3, #97	@ 0x61
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b04      	cmp	r3, #4
 800511a:	d109      	bne.n	8005130 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	212c      	movs	r1, #44	@ 0x2c
 8005122:	fb01 f303 	mul.w	r3, r1, r3
 8005126:	4413      	add	r3, r2
 8005128:	3360      	adds	r3, #96	@ 0x60
 800512a:	2202      	movs	r2, #2
 800512c:	701a      	strb	r2, [r3, #0]
 800512e:	e077      	b.n	8005220 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	212c      	movs	r1, #44	@ 0x2c
 8005136:	fb01 f303 	mul.w	r3, r1, r3
 800513a:	4413      	add	r3, r2
 800513c:	3361      	adds	r3, #97	@ 0x61
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b05      	cmp	r3, #5
 8005142:	d109      	bne.n	8005158 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	212c      	movs	r1, #44	@ 0x2c
 800514a:	fb01 f303 	mul.w	r3, r1, r3
 800514e:	4413      	add	r3, r2
 8005150:	3360      	adds	r3, #96	@ 0x60
 8005152:	2205      	movs	r2, #5
 8005154:	701a      	strb	r2, [r3, #0]
 8005156:	e063      	b.n	8005220 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	212c      	movs	r1, #44	@ 0x2c
 800515e:	fb01 f303 	mul.w	r3, r1, r3
 8005162:	4413      	add	r3, r2
 8005164:	3361      	adds	r3, #97	@ 0x61
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b06      	cmp	r3, #6
 800516a:	d009      	beq.n	8005180 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	212c      	movs	r1, #44	@ 0x2c
 8005172:	fb01 f303 	mul.w	r3, r1, r3
 8005176:	4413      	add	r3, r2
 8005178:	3361      	adds	r3, #97	@ 0x61
 800517a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800517c:	2b08      	cmp	r3, #8
 800517e:	d14f      	bne.n	8005220 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	212c      	movs	r1, #44	@ 0x2c
 8005186:	fb01 f303 	mul.w	r3, r1, r3
 800518a:	4413      	add	r3, r2
 800518c:	335c      	adds	r3, #92	@ 0x5c
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	202c      	movs	r0, #44	@ 0x2c
 8005198:	fb00 f303 	mul.w	r3, r0, r3
 800519c:	440b      	add	r3, r1
 800519e:	335c      	adds	r3, #92	@ 0x5c
 80051a0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	212c      	movs	r1, #44	@ 0x2c
 80051a8:	fb01 f303 	mul.w	r3, r1, r3
 80051ac:	4413      	add	r3, r2
 80051ae:	335c      	adds	r3, #92	@ 0x5c
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d912      	bls.n	80051dc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	212c      	movs	r1, #44	@ 0x2c
 80051bc:	fb01 f303 	mul.w	r3, r1, r3
 80051c0:	4413      	add	r3, r2
 80051c2:	335c      	adds	r3, #92	@ 0x5c
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	212c      	movs	r1, #44	@ 0x2c
 80051ce:	fb01 f303 	mul.w	r3, r1, r3
 80051d2:	4413      	add	r3, r2
 80051d4:	3360      	adds	r3, #96	@ 0x60
 80051d6:	2204      	movs	r2, #4
 80051d8:	701a      	strb	r2, [r3, #0]
 80051da:	e021      	b.n	8005220 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	212c      	movs	r1, #44	@ 0x2c
 80051e2:	fb01 f303 	mul.w	r3, r1, r3
 80051e6:	4413      	add	r3, r2
 80051e8:	3360      	adds	r3, #96	@ 0x60
 80051ea:	2202      	movs	r2, #2
 80051ec:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005204:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800520c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	4413      	add	r3, r2
 8005216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800521a:	461a      	mov	r2, r3
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	4413      	add	r3, r2
 8005228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800522c:	461a      	mov	r2, r3
 800522e:	2302      	movs	r3, #2
 8005230:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	b2d9      	uxtb	r1, r3
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	202c      	movs	r0, #44	@ 0x2c
 800523c:	fb00 f303 	mul.w	r3, r0, r3
 8005240:	4413      	add	r3, r2
 8005242:	3360      	adds	r3, #96	@ 0x60
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f00b fc2d 	bl	8010aa8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800524e:	bf00      	nop
 8005250:	3720      	adds	r7, #32
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b08a      	sub	sp, #40	@ 0x28
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	0c5b      	lsrs	r3, r3, #17
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800528a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d004      	beq.n	800529c <HCD_RXQLVL_IRQHandler+0x46>
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b05      	cmp	r3, #5
 8005296:	f000 80a9 	beq.w	80053ec <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800529a:	e0aa      	b.n	80053f2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 80a6 	beq.w	80053f0 <HCD_RXQLVL_IRQHandler+0x19a>
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	212c      	movs	r1, #44	@ 0x2c
 80052aa:	fb01 f303 	mul.w	r3, r1, r3
 80052ae:	4413      	add	r3, r2
 80052b0:	3344      	adds	r3, #68	@ 0x44
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 809b 	beq.w	80053f0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	212c      	movs	r1, #44	@ 0x2c
 80052c0:	fb01 f303 	mul.w	r3, r1, r3
 80052c4:	4413      	add	r3, r2
 80052c6:	3350      	adds	r3, #80	@ 0x50
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	441a      	add	r2, r3
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	202c      	movs	r0, #44	@ 0x2c
 80052d4:	fb00 f303 	mul.w	r3, r0, r3
 80052d8:	440b      	add	r3, r1
 80052da:	334c      	adds	r3, #76	@ 0x4c
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d87a      	bhi.n	80053d8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	212c      	movs	r1, #44	@ 0x2c
 80052ec:	fb01 f303 	mul.w	r3, r1, r3
 80052f0:	4413      	add	r3, r2
 80052f2:	3344      	adds	r3, #68	@ 0x44
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	b292      	uxth	r2, r2
 80052fa:	4619      	mov	r1, r3
 80052fc:	f004 f87a 	bl	80093f4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	212c      	movs	r1, #44	@ 0x2c
 8005306:	fb01 f303 	mul.w	r3, r1, r3
 800530a:	4413      	add	r3, r2
 800530c:	3344      	adds	r3, #68	@ 0x44
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	441a      	add	r2, r3
 8005314:	6879      	ldr	r1, [r7, #4]
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	202c      	movs	r0, #44	@ 0x2c
 800531a:	fb00 f303 	mul.w	r3, r0, r3
 800531e:	440b      	add	r3, r1
 8005320:	3344      	adds	r3, #68	@ 0x44
 8005322:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	212c      	movs	r1, #44	@ 0x2c
 800532a:	fb01 f303 	mul.w	r3, r1, r3
 800532e:	4413      	add	r3, r2
 8005330:	3350      	adds	r3, #80	@ 0x50
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	441a      	add	r2, r3
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	202c      	movs	r0, #44	@ 0x2c
 800533e:	fb00 f303 	mul.w	r3, r0, r3
 8005342:	440b      	add	r3, r1
 8005344:	3350      	adds	r3, #80	@ 0x50
 8005346:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	4413      	add	r3, r2
 8005350:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	0cdb      	lsrs	r3, r3, #19
 8005358:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800535c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	212c      	movs	r1, #44	@ 0x2c
 8005364:	fb01 f303 	mul.w	r3, r1, r3
 8005368:	4413      	add	r3, r2
 800536a:	3340      	adds	r3, #64	@ 0x40
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	4293      	cmp	r3, r2
 8005374:	d13c      	bne.n	80053f0 <HCD_RXQLVL_IRQHandler+0x19a>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d039      	beq.n	80053f0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	4413      	add	r3, r2
 8005384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005392:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800539a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053a8:	461a      	mov	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	212c      	movs	r1, #44	@ 0x2c
 80053b4:	fb01 f303 	mul.w	r3, r1, r3
 80053b8:	4413      	add	r3, r2
 80053ba:	3354      	adds	r3, #84	@ 0x54
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	f083 0301 	eor.w	r3, r3, #1
 80053c2:	b2d8      	uxtb	r0, r3
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	212c      	movs	r1, #44	@ 0x2c
 80053ca:	fb01 f303 	mul.w	r3, r1, r3
 80053ce:	4413      	add	r3, r2
 80053d0:	3354      	adds	r3, #84	@ 0x54
 80053d2:	4602      	mov	r2, r0
 80053d4:	701a      	strb	r2, [r3, #0]
      break;
 80053d6:	e00b      	b.n	80053f0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	212c      	movs	r1, #44	@ 0x2c
 80053de:	fb01 f303 	mul.w	r3, r1, r3
 80053e2:	4413      	add	r3, r2
 80053e4:	3360      	adds	r3, #96	@ 0x60
 80053e6:	2204      	movs	r2, #4
 80053e8:	701a      	strb	r2, [r3, #0]
      break;
 80053ea:	e001      	b.n	80053f0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80053ec:	bf00      	nop
 80053ee:	e000      	b.n	80053f2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80053f0:	bf00      	nop
  }
}
 80053f2:	bf00      	nop
 80053f4:	3728      	adds	r7, #40	@ 0x28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b086      	sub	sp, #24
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005426:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b02      	cmp	r3, #2
 8005430:	d10b      	bne.n	800544a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b01      	cmp	r3, #1
 800543a:	d102      	bne.n	8005442 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f00b fb17 	bl	8010a70 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f043 0302 	orr.w	r3, r3, #2
 8005448:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f003 0308 	and.w	r3, r3, #8
 8005450:	2b08      	cmp	r3, #8
 8005452:	d132      	bne.n	80054ba <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f043 0308 	orr.w	r3, r3, #8
 800545a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b04      	cmp	r3, #4
 8005464:	d126      	bne.n	80054b4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	2b02      	cmp	r3, #2
 800546c:	d113      	bne.n	8005496 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005474:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005478:	d106      	bne.n	8005488 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2102      	movs	r1, #2
 8005480:	4618      	mov	r0, r3
 8005482:	f004 f925 	bl	80096d0 <USB_InitFSLSPClkSel>
 8005486:	e011      	b.n	80054ac <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2101      	movs	r1, #1
 800548e:	4618      	mov	r0, r3
 8005490:	f004 f91e 	bl	80096d0 <USB_InitFSLSPClkSel>
 8005494:	e00a      	b.n	80054ac <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d106      	bne.n	80054ac <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054a4:	461a      	mov	r2, r3
 80054a6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80054aa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f00b fb09 	bl	8010ac4 <HAL_HCD_PortEnabled_Callback>
 80054b2:	e002      	b.n	80054ba <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f00b fb13 	bl	8010ae0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d103      	bne.n	80054cc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f043 0320 	orr.w	r3, r3, #32
 80054ca:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80054d2:	461a      	mov	r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	6013      	str	r3, [r2, #0]
}
 80054d8:	bf00      	nop
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e12b      	b.n	800574a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d106      	bne.n	800550c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7fc fa62 	bl	80019d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2224      	movs	r2, #36	@ 0x24
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0201 	bic.w	r2, r2, #1
 8005522:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005532:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005542:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005544:	f002 ff88 	bl	8008458 <HAL_RCC_GetPCLK1Freq>
 8005548:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	4a81      	ldr	r2, [pc, #516]	@ (8005754 <HAL_I2C_Init+0x274>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d807      	bhi.n	8005564 <HAL_I2C_Init+0x84>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4a80      	ldr	r2, [pc, #512]	@ (8005758 <HAL_I2C_Init+0x278>)
 8005558:	4293      	cmp	r3, r2
 800555a:	bf94      	ite	ls
 800555c:	2301      	movls	r3, #1
 800555e:	2300      	movhi	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	e006      	b.n	8005572 <HAL_I2C_Init+0x92>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4a7d      	ldr	r2, [pc, #500]	@ (800575c <HAL_I2C_Init+0x27c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	bf94      	ite	ls
 800556c:	2301      	movls	r3, #1
 800556e:	2300      	movhi	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e0e7      	b.n	800574a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4a78      	ldr	r2, [pc, #480]	@ (8005760 <HAL_I2C_Init+0x280>)
 800557e:	fba2 2303 	umull	r2, r3, r2, r3
 8005582:	0c9b      	lsrs	r3, r3, #18
 8005584:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	430a      	orrs	r2, r1
 8005598:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	4a6a      	ldr	r2, [pc, #424]	@ (8005754 <HAL_I2C_Init+0x274>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d802      	bhi.n	80055b4 <HAL_I2C_Init+0xd4>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	3301      	adds	r3, #1
 80055b2:	e009      	b.n	80055c8 <HAL_I2C_Init+0xe8>
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80055ba:	fb02 f303 	mul.w	r3, r2, r3
 80055be:	4a69      	ldr	r2, [pc, #420]	@ (8005764 <HAL_I2C_Init+0x284>)
 80055c0:	fba2 2303 	umull	r2, r3, r2, r3
 80055c4:	099b      	lsrs	r3, r3, #6
 80055c6:	3301      	adds	r3, #1
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6812      	ldr	r2, [r2, #0]
 80055cc:	430b      	orrs	r3, r1
 80055ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80055da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	495c      	ldr	r1, [pc, #368]	@ (8005754 <HAL_I2C_Init+0x274>)
 80055e4:	428b      	cmp	r3, r1
 80055e6:	d819      	bhi.n	800561c <HAL_I2C_Init+0x13c>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	1e59      	subs	r1, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80055f6:	1c59      	adds	r1, r3, #1
 80055f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80055fc:	400b      	ands	r3, r1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00a      	beq.n	8005618 <HAL_I2C_Init+0x138>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	1e59      	subs	r1, r3, #1
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005610:	3301      	adds	r3, #1
 8005612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005616:	e051      	b.n	80056bc <HAL_I2C_Init+0x1dc>
 8005618:	2304      	movs	r3, #4
 800561a:	e04f      	b.n	80056bc <HAL_I2C_Init+0x1dc>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d111      	bne.n	8005648 <HAL_I2C_Init+0x168>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	1e58      	subs	r0, r3, #1
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6859      	ldr	r1, [r3, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	440b      	add	r3, r1
 8005632:	fbb0 f3f3 	udiv	r3, r0, r3
 8005636:	3301      	adds	r3, #1
 8005638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800563c:	2b00      	cmp	r3, #0
 800563e:	bf0c      	ite	eq
 8005640:	2301      	moveq	r3, #1
 8005642:	2300      	movne	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	e012      	b.n	800566e <HAL_I2C_Init+0x18e>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	1e58      	subs	r0, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6859      	ldr	r1, [r3, #4]
 8005650:	460b      	mov	r3, r1
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	0099      	lsls	r1, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	fbb0 f3f3 	udiv	r3, r0, r3
 800565e:	3301      	adds	r3, #1
 8005660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005664:	2b00      	cmp	r3, #0
 8005666:	bf0c      	ite	eq
 8005668:	2301      	moveq	r3, #1
 800566a:	2300      	movne	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <HAL_I2C_Init+0x196>
 8005672:	2301      	movs	r3, #1
 8005674:	e022      	b.n	80056bc <HAL_I2C_Init+0x1dc>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10e      	bne.n	800569c <HAL_I2C_Init+0x1bc>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1e58      	subs	r0, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6859      	ldr	r1, [r3, #4]
 8005686:	460b      	mov	r3, r1
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	440b      	add	r3, r1
 800568c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005690:	3301      	adds	r3, #1
 8005692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800569a:	e00f      	b.n	80056bc <HAL_I2C_Init+0x1dc>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	1e58      	subs	r0, r3, #1
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6859      	ldr	r1, [r3, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	0099      	lsls	r1, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80056b2:	3301      	adds	r3, #1
 80056b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	6809      	ldr	r1, [r1, #0]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69da      	ldr	r2, [r3, #28]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80056ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6911      	ldr	r1, [r2, #16]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68d2      	ldr	r2, [r2, #12]
 80056f6:	4311      	orrs	r1, r2
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6812      	ldr	r2, [r2, #0]
 80056fc:	430b      	orrs	r3, r1
 80056fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695a      	ldr	r2, [r3, #20]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0201 	orr.w	r2, r2, #1
 800572a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	000186a0 	.word	0x000186a0
 8005758:	001e847f 	.word	0x001e847f
 800575c:	003d08ff 	.word	0x003d08ff
 8005760:	431bde83 	.word	0x431bde83
 8005764:	10624dd3 	.word	0x10624dd3

08005768 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e021      	b.n	80057be <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2224      	movs	r2, #36	@ 0x24
 800577e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 0201 	bic.w	r2, r2, #1
 8005790:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fc f986 	bl	8001aa4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af02      	add	r7, sp, #8
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	607a      	str	r2, [r7, #4]
 80057d2:	461a      	mov	r2, r3
 80057d4:	460b      	mov	r3, r1
 80057d6:	817b      	strh	r3, [r7, #10]
 80057d8:	4613      	mov	r3, r2
 80057da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057dc:	f7fd fa3a 	bl	8002c54 <HAL_GetTick>
 80057e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	f040 80e0 	bne.w	80059b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	2319      	movs	r3, #25
 80057f6:	2201      	movs	r2, #1
 80057f8:	4970      	ldr	r1, [pc, #448]	@ (80059bc <HAL_I2C_Master_Transmit+0x1f4>)
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 ff3e 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005806:	2302      	movs	r3, #2
 8005808:	e0d3      	b.n	80059b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_I2C_Master_Transmit+0x50>
 8005814:	2302      	movs	r3, #2
 8005816:	e0cc      	b.n	80059b2 <HAL_I2C_Master_Transmit+0x1ea>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b01      	cmp	r3, #1
 800582c:	d007      	beq.n	800583e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f042 0201 	orr.w	r2, r2, #1
 800583c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800584c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2221      	movs	r2, #33	@ 0x21
 8005852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2210      	movs	r2, #16
 800585a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	893a      	ldrh	r2, [r7, #8]
 800586e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4a50      	ldr	r2, [pc, #320]	@ (80059c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800587e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005880:	8979      	ldrh	r1, [r7, #10]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	6a3a      	ldr	r2, [r7, #32]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fcf8 	bl	800627c <I2C_MasterRequestWrite>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e08d      	b.n	80059b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005896:	2300      	movs	r3, #0
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	613b      	str	r3, [r7, #16]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	613b      	str	r3, [r7, #16]
 80058aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80058ac:	e066      	b.n	800597c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	6a39      	ldr	r1, [r7, #32]
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 ffb8 	bl	8006828 <I2C_WaitOnTXEFlagUntilTimeout>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00d      	beq.n	80058da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d107      	bne.n	80058d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e06b      	b.n	80059b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058de:	781a      	ldrb	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005902:	3b01      	subs	r3, #1
 8005904:	b29a      	uxth	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b04      	cmp	r3, #4
 8005916:	d11b      	bne.n	8005950 <HAL_I2C_Master_Transmit+0x188>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800591c:	2b00      	cmp	r3, #0
 800591e:	d017      	beq.n	8005950 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005924:	781a      	ldrb	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b01      	subs	r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	6a39      	ldr	r1, [r7, #32]
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 ffa8 	bl	80068aa <I2C_WaitOnBTFFlagUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00d      	beq.n	800597c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005964:	2b04      	cmp	r3, #4
 8005966:	d107      	bne.n	8005978 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005976:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e01a      	b.n	80059b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005980:	2b00      	cmp	r3, #0
 8005982:	d194      	bne.n	80058ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	e000      	b.n	80059b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80059b0:	2302      	movs	r3, #2
  }
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	00100002 	.word	0x00100002
 80059c0:	ffff0000 	.word	0xffff0000

080059c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b088      	sub	sp, #32
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	4608      	mov	r0, r1
 80059ce:	4611      	mov	r1, r2
 80059d0:	461a      	mov	r2, r3
 80059d2:	4603      	mov	r3, r0
 80059d4:	817b      	strh	r3, [r7, #10]
 80059d6:	460b      	mov	r3, r1
 80059d8:	813b      	strh	r3, [r7, #8]
 80059da:	4613      	mov	r3, r2
 80059dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059de:	f7fd f939 	bl	8002c54 <HAL_GetTick>
 80059e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b20      	cmp	r3, #32
 80059ee:	f040 80d9 	bne.w	8005ba4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	2319      	movs	r3, #25
 80059f8:	2201      	movs	r2, #1
 80059fa:	496d      	ldr	r1, [pc, #436]	@ (8005bb0 <HAL_I2C_Mem_Write+0x1ec>)
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 fe3d 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e0cc      	b.n	8005ba6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d101      	bne.n	8005a1a <HAL_I2C_Mem_Write+0x56>
 8005a16:	2302      	movs	r3, #2
 8005a18:	e0c5      	b.n	8005ba6 <HAL_I2C_Mem_Write+0x1e2>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d007      	beq.n	8005a40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0201 	orr.w	r2, r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2221      	movs	r2, #33	@ 0x21
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2240      	movs	r2, #64	@ 0x40
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6a3a      	ldr	r2, [r7, #32]
 8005a6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005a70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4a4d      	ldr	r2, [pc, #308]	@ (8005bb4 <HAL_I2C_Mem_Write+0x1f0>)
 8005a80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a82:	88f8      	ldrh	r0, [r7, #6]
 8005a84:	893a      	ldrh	r2, [r7, #8]
 8005a86:	8979      	ldrh	r1, [r7, #10]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	9301      	str	r3, [sp, #4]
 8005a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	4603      	mov	r3, r0
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 fc74 	bl	8006380 <I2C_RequestMemoryWrite>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d052      	beq.n	8005b44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e081      	b.n	8005ba6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 febe 	bl	8006828 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00d      	beq.n	8005ace <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d107      	bne.n	8005aca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ac8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e06b      	b.n	8005ba6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad2:	781a      	ldrb	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	3b01      	subs	r3, #1
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d11b      	bne.n	8005b44 <HAL_I2C_Mem_Write+0x180>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d017      	beq.n	8005b44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b18:	781a      	ldrb	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b24:	1c5a      	adds	r2, r3, #1
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1aa      	bne.n	8005aa2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 feaa 	bl	80068aa <I2C_WaitOnBTFFlagUntilTimeout>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00d      	beq.n	8005b78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	d107      	bne.n	8005b74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e016      	b.n	8005ba6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e000      	b.n	8005ba6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005ba4:	2302      	movs	r3, #2
  }
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	00100002 	.word	0x00100002
 8005bb4:	ffff0000 	.word	0xffff0000

08005bb8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08c      	sub	sp, #48	@ 0x30
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	817b      	strh	r3, [r7, #10]
 8005bca:	460b      	mov	r3, r1
 8005bcc:	813b      	strh	r3, [r7, #8]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bd2:	f7fd f83f 	bl	8002c54 <HAL_GetTick>
 8005bd6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	f040 8208 	bne.w	8005ff6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	2319      	movs	r3, #25
 8005bec:	2201      	movs	r2, #1
 8005bee:	497b      	ldr	r1, [pc, #492]	@ (8005ddc <HAL_I2C_Mem_Read+0x224>)
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 fd43 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e1fb      	b.n	8005ff8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <HAL_I2C_Mem_Read+0x56>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e1f4      	b.n	8005ff8 <HAL_I2C_Mem_Read+0x440>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d007      	beq.n	8005c34 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2222      	movs	r2, #34	@ 0x22
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2240      	movs	r2, #64	@ 0x40
 8005c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005c64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4a5b      	ldr	r2, [pc, #364]	@ (8005de0 <HAL_I2C_Mem_Read+0x228>)
 8005c74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c76:	88f8      	ldrh	r0, [r7, #6]
 8005c78:	893a      	ldrh	r2, [r7, #8]
 8005c7a:	8979      	ldrh	r1, [r7, #10]
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	4603      	mov	r3, r0
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 fc10 	bl	80064ac <I2C_RequestMemoryRead>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e1b0      	b.n	8005ff8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d113      	bne.n	8005cc6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	623b      	str	r3, [r7, #32]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	623b      	str	r3, [r7, #32]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	623b      	str	r3, [r7, #32]
 8005cb2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	e184      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d11b      	bne.n	8005d06 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61fb      	str	r3, [r7, #28]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	61fb      	str	r3, [r7, #28]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	61fb      	str	r3, [r7, #28]
 8005cf2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	e164      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d11b      	bne.n	8005d46 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61bb      	str	r3, [r7, #24]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	61bb      	str	r3, [r7, #24]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	61bb      	str	r3, [r7, #24]
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	e144      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d46:	2300      	movs	r3, #0
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	617b      	str	r3, [r7, #20]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005d5c:	e138      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	f200 80f1 	bhi.w	8005f4a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d123      	bne.n	8005db8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 fdd9 	bl	800692c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e139      	b.n	8005ff8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	691a      	ldr	r2, [r3, #16]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005da0:	3b01      	subs	r3, #1
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	3b01      	subs	r3, #1
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005db6:	e10b      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d14e      	bne.n	8005e5e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	4906      	ldr	r1, [pc, #24]	@ (8005de4 <HAL_I2C_Mem_Read+0x22c>)
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 fc56 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d008      	beq.n	8005de8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e10e      	b.n	8005ff8 <HAL_I2C_Mem_Read+0x440>
 8005dda:	bf00      	nop
 8005ddc:	00100002 	.word	0x00100002
 8005de0:	ffff0000 	.word	0xffff0000
 8005de4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691a      	ldr	r2, [r3, #16]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691a      	ldr	r2, [r3, #16]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e5c:	e0b8      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e64:	2200      	movs	r2, #0
 8005e66:	4966      	ldr	r1, [pc, #408]	@ (8006000 <HAL_I2C_Mem_Read+0x448>)
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 fc07 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e0bf      	b.n	8005ff8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	691a      	ldr	r2, [r3, #16]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9a:	1c5a      	adds	r2, r3, #1
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	494f      	ldr	r1, [pc, #316]	@ (8006000 <HAL_I2C_Mem_Read+0x448>)
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 fbd9 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e091      	b.n	8005ff8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ee2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	691a      	ldr	r2, [r3, #16]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f20:	b2d2      	uxtb	r2, r2
 8005f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	3b01      	subs	r3, #1
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f48:	e042      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f4c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 fcec 	bl	800692c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e04c      	b.n	8005ff8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	691a      	ldr	r2, [r3, #16]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	f003 0304 	and.w	r3, r3, #4
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d118      	bne.n	8005fd0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	691a      	ldr	r2, [r3, #16]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f47f aec2 	bne.w	8005d5e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	e000      	b.n	8005ff8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005ff6:	2302      	movs	r3, #2
  }
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3728      	adds	r7, #40	@ 0x28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	00010004 	.word	0x00010004

08006004 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b08a      	sub	sp, #40	@ 0x28
 8006008:	af02      	add	r7, sp, #8
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	607a      	str	r2, [r7, #4]
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	460b      	mov	r3, r1
 8006012:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006014:	f7fc fe1e 	bl	8002c54 <HAL_GetTick>
 8006018:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800601a:	2300      	movs	r3, #0
 800601c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b20      	cmp	r3, #32
 8006028:	f040 8111 	bne.w	800624e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	2319      	movs	r3, #25
 8006032:	2201      	movs	r2, #1
 8006034:	4988      	ldr	r1, [pc, #544]	@ (8006258 <HAL_I2C_IsDeviceReady+0x254>)
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 fb20 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006042:	2302      	movs	r3, #2
 8006044:	e104      	b.n	8006250 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_I2C_IsDeviceReady+0x50>
 8006050:	2302      	movs	r3, #2
 8006052:	e0fd      	b.n	8006250 <HAL_I2C_IsDeviceReady+0x24c>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b01      	cmp	r3, #1
 8006068:	d007      	beq.n	800607a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f042 0201 	orr.w	r2, r2, #1
 8006078:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006088:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2224      	movs	r2, #36	@ 0x24
 800608e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4a70      	ldr	r2, [pc, #448]	@ (800625c <HAL_I2C_IsDeviceReady+0x258>)
 800609c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060ac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 fade 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00d      	beq.n	80060e2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060d4:	d103      	bne.n	80060de <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060dc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e0b6      	b.n	8006250 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060e2:	897b      	ldrh	r3, [r7, #10]
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	461a      	mov	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80060f0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80060f2:	f7fc fdaf 	bl	8002c54 <HAL_GetTick>
 80060f6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b02      	cmp	r3, #2
 8006104:	bf0c      	ite	eq
 8006106:	2301      	moveq	r3, #1
 8006108:	2300      	movne	r3, #0
 800610a:	b2db      	uxtb	r3, r3
 800610c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006118:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800611c:	bf0c      	ite	eq
 800611e:	2301      	moveq	r3, #1
 8006120:	2300      	movne	r3, #0
 8006122:	b2db      	uxtb	r3, r3
 8006124:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006126:	e025      	b.n	8006174 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006128:	f7fc fd94 	bl	8002c54 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d302      	bcc.n	800613e <HAL_I2C_IsDeviceReady+0x13a>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d103      	bne.n	8006146 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	22a0      	movs	r2, #160	@ 0xa0
 8006142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b02      	cmp	r3, #2
 8006152:	bf0c      	ite	eq
 8006154:	2301      	moveq	r3, #1
 8006156:	2300      	movne	r3, #0
 8006158:	b2db      	uxtb	r3, r3
 800615a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800616a:	bf0c      	ite	eq
 800616c:	2301      	moveq	r3, #1
 800616e:	2300      	movne	r3, #0
 8006170:	b2db      	uxtb	r3, r3
 8006172:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2ba0      	cmp	r3, #160	@ 0xa0
 800617e:	d005      	beq.n	800618c <HAL_I2C_IsDeviceReady+0x188>
 8006180:	7dfb      	ldrb	r3, [r7, #23]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d102      	bne.n	800618c <HAL_I2C_IsDeviceReady+0x188>
 8006186:	7dbb      	ldrb	r3, [r7, #22]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0cd      	beq.n	8006128 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2220      	movs	r2, #32
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d129      	bne.n	80061f6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061b0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061b2:	2300      	movs	r3, #0
 80061b4:	613b      	str	r3, [r7, #16]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	613b      	str	r3, [r7, #16]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	613b      	str	r3, [r7, #16]
 80061c6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	2319      	movs	r3, #25
 80061ce:	2201      	movs	r2, #1
 80061d0:	4921      	ldr	r1, [pc, #132]	@ (8006258 <HAL_I2C_IsDeviceReady+0x254>)
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 fa52 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e036      	b.n	8006250 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2220      	movs	r2, #32
 80061e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	e02c      	b.n	8006250 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006204:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800620e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	2319      	movs	r3, #25
 8006216:	2201      	movs	r2, #1
 8006218:	490f      	ldr	r1, [pc, #60]	@ (8006258 <HAL_I2C_IsDeviceReady+0x254>)
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 fa2e 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e012      	b.n	8006250 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	3301      	adds	r3, #1
 800622e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	429a      	cmp	r2, r3
 8006236:	f4ff af32 	bcc.w	800609e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2220      	movs	r2, #32
 800623e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e000      	b.n	8006250 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800624e:	2302      	movs	r3, #2
  }
}
 8006250:	4618      	mov	r0, r3
 8006252:	3720      	adds	r7, #32
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	00100002 	.word	0x00100002
 800625c:	ffff0000 	.word	0xffff0000

08006260 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800626e:	b2db      	uxtb	r3, r3
}
 8006270:	4618      	mov	r0, r3
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af02      	add	r7, sp, #8
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	607a      	str	r2, [r7, #4]
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	460b      	mov	r3, r1
 800628a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006290:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2b08      	cmp	r3, #8
 8006296:	d006      	beq.n	80062a6 <I2C_MasterRequestWrite+0x2a>
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d003      	beq.n	80062a6 <I2C_MasterRequestWrite+0x2a>
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80062a4:	d108      	bne.n	80062b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	e00b      	b.n	80062d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062bc:	2b12      	cmp	r3, #18
 80062be:	d107      	bne.n	80062d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 f9cd 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00d      	beq.n	8006304 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062f6:	d103      	bne.n	8006300 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e035      	b.n	8006370 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800630c:	d108      	bne.n	8006320 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800630e:	897b      	ldrh	r3, [r7, #10]
 8006310:	b2db      	uxtb	r3, r3
 8006312:	461a      	mov	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800631c:	611a      	str	r2, [r3, #16]
 800631e:	e01b      	b.n	8006358 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006320:	897b      	ldrh	r3, [r7, #10]
 8006322:	11db      	asrs	r3, r3, #7
 8006324:	b2db      	uxtb	r3, r3
 8006326:	f003 0306 	and.w	r3, r3, #6
 800632a:	b2db      	uxtb	r3, r3
 800632c:	f063 030f 	orn	r3, r3, #15
 8006330:	b2da      	uxtb	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	490e      	ldr	r1, [pc, #56]	@ (8006378 <I2C_MasterRequestWrite+0xfc>)
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 f9f3 	bl	800672a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e010      	b.n	8006370 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800634e:	897b      	ldrh	r3, [r7, #10]
 8006350:	b2da      	uxtb	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	4907      	ldr	r1, [pc, #28]	@ (800637c <I2C_MasterRequestWrite+0x100>)
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 f9e3 	bl	800672a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e000      	b.n	8006370 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	00010008 	.word	0x00010008
 800637c:	00010002 	.word	0x00010002

08006380 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b088      	sub	sp, #32
 8006384:	af02      	add	r7, sp, #8
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	4608      	mov	r0, r1
 800638a:	4611      	mov	r1, r2
 800638c:	461a      	mov	r2, r3
 800638e:	4603      	mov	r3, r0
 8006390:	817b      	strh	r3, [r7, #10]
 8006392:	460b      	mov	r3, r1
 8006394:	813b      	strh	r3, [r7, #8]
 8006396:	4613      	mov	r3, r2
 8006398:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 f960 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00d      	beq.n	80063de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063d0:	d103      	bne.n	80063da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e05f      	b.n	800649e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063de:	897b      	ldrh	r3, [r7, #10]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	461a      	mov	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80063ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f0:	6a3a      	ldr	r2, [r7, #32]
 80063f2:	492d      	ldr	r1, [pc, #180]	@ (80064a8 <I2C_RequestMemoryWrite+0x128>)
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 f998 	bl	800672a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e04c      	b.n	800649e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006404:	2300      	movs	r3, #0
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	617b      	str	r3, [r7, #20]
 8006418:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800641a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800641c:	6a39      	ldr	r1, [r7, #32]
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 fa02 	bl	8006828 <I2C_WaitOnTXEFlagUntilTimeout>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00d      	beq.n	8006446 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642e:	2b04      	cmp	r3, #4
 8006430:	d107      	bne.n	8006442 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006440:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e02b      	b.n	800649e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006446:	88fb      	ldrh	r3, [r7, #6]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d105      	bne.n	8006458 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800644c:	893b      	ldrh	r3, [r7, #8]
 800644e:	b2da      	uxtb	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	611a      	str	r2, [r3, #16]
 8006456:	e021      	b.n	800649c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006458:	893b      	ldrh	r3, [r7, #8]
 800645a:	0a1b      	lsrs	r3, r3, #8
 800645c:	b29b      	uxth	r3, r3
 800645e:	b2da      	uxtb	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006468:	6a39      	ldr	r1, [r7, #32]
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 f9dc 	bl	8006828 <I2C_WaitOnTXEFlagUntilTimeout>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00d      	beq.n	8006492 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647a:	2b04      	cmp	r3, #4
 800647c:	d107      	bne.n	800648e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800648c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e005      	b.n	800649e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006492:	893b      	ldrh	r3, [r7, #8]
 8006494:	b2da      	uxtb	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	00010002 	.word	0x00010002

080064ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af02      	add	r7, sp, #8
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	4608      	mov	r0, r1
 80064b6:	4611      	mov	r1, r2
 80064b8:	461a      	mov	r2, r3
 80064ba:	4603      	mov	r3, r0
 80064bc:	817b      	strh	r3, [r7, #10]
 80064be:	460b      	mov	r3, r1
 80064c0:	813b      	strh	r3, [r7, #8]
 80064c2:	4613      	mov	r3, r2
 80064c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80064d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 f8c2 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00d      	beq.n	800651a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800650c:	d103      	bne.n	8006516 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006514:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e0aa      	b.n	8006670 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800651a:	897b      	ldrh	r3, [r7, #10]
 800651c:	b2db      	uxtb	r3, r3
 800651e:	461a      	mov	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006528:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800652a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652c:	6a3a      	ldr	r2, [r7, #32]
 800652e:	4952      	ldr	r1, [pc, #328]	@ (8006678 <I2C_RequestMemoryRead+0x1cc>)
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 f8fa 	bl	800672a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e097      	b.n	8006670 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006540:	2300      	movs	r3, #0
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006558:	6a39      	ldr	r1, [r7, #32]
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 f964 	bl	8006828 <I2C_WaitOnTXEFlagUntilTimeout>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00d      	beq.n	8006582 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656a:	2b04      	cmp	r3, #4
 800656c:	d107      	bne.n	800657e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800657c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e076      	b.n	8006670 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006582:	88fb      	ldrh	r3, [r7, #6]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d105      	bne.n	8006594 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006588:	893b      	ldrh	r3, [r7, #8]
 800658a:	b2da      	uxtb	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	611a      	str	r2, [r3, #16]
 8006592:	e021      	b.n	80065d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006594:	893b      	ldrh	r3, [r7, #8]
 8006596:	0a1b      	lsrs	r3, r3, #8
 8006598:	b29b      	uxth	r3, r3
 800659a:	b2da      	uxtb	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065a4:	6a39      	ldr	r1, [r7, #32]
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 f93e 	bl	8006828 <I2C_WaitOnTXEFlagUntilTimeout>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00d      	beq.n	80065ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d107      	bne.n	80065ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e050      	b.n	8006670 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065ce:	893b      	ldrh	r3, [r7, #8]
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065da:	6a39      	ldr	r1, [r7, #32]
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 f923 	bl	8006828 <I2C_WaitOnTXEFlagUntilTimeout>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00d      	beq.n	8006604 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ec:	2b04      	cmp	r3, #4
 80065ee:	d107      	bne.n	8006600 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e035      	b.n	8006670 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006612:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	2200      	movs	r2, #0
 800661c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 f82b 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00d      	beq.n	8006648 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800663a:	d103      	bne.n	8006644 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006642:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e013      	b.n	8006670 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006648:	897b      	ldrh	r3, [r7, #10]
 800664a:	b2db      	uxtb	r3, r3
 800664c:	f043 0301 	orr.w	r3, r3, #1
 8006650:	b2da      	uxtb	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665a:	6a3a      	ldr	r2, [r7, #32]
 800665c:	4906      	ldr	r1, [pc, #24]	@ (8006678 <I2C_RequestMemoryRead+0x1cc>)
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 f863 	bl	800672a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e000      	b.n	8006670 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3718      	adds	r7, #24
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	00010002 	.word	0x00010002

0800667c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	4613      	mov	r3, r2
 800668a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800668c:	e025      	b.n	80066da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006694:	d021      	beq.n	80066da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006696:	f7fc fadd 	bl	8002c54 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d302      	bcc.n	80066ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d116      	bne.n	80066da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c6:	f043 0220 	orr.w	r2, r3, #32
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e023      	b.n	8006722 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	0c1b      	lsrs	r3, r3, #16
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d10d      	bne.n	8006700 <I2C_WaitOnFlagUntilTimeout+0x84>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	43da      	mvns	r2, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	4013      	ands	r3, r2
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	bf0c      	ite	eq
 80066f6:	2301      	moveq	r3, #1
 80066f8:	2300      	movne	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	461a      	mov	r2, r3
 80066fe:	e00c      	b.n	800671a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	43da      	mvns	r2, r3
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	4013      	ands	r3, r2
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	bf0c      	ite	eq
 8006712:	2301      	moveq	r3, #1
 8006714:	2300      	movne	r3, #0
 8006716:	b2db      	uxtb	r3, r3
 8006718:	461a      	mov	r2, r3
 800671a:	79fb      	ldrb	r3, [r7, #7]
 800671c:	429a      	cmp	r2, r3
 800671e:	d0b6      	beq.n	800668e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b084      	sub	sp, #16
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	607a      	str	r2, [r7, #4]
 8006736:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006738:	e051      	b.n	80067de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006744:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006748:	d123      	bne.n	8006792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006758:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006762:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2220      	movs	r2, #32
 800676e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677e:	f043 0204 	orr.w	r2, r3, #4
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e046      	b.n	8006820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006798:	d021      	beq.n	80067de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800679a:	f7fc fa5b 	bl	8002c54 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d302      	bcc.n	80067b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d116      	bne.n	80067de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ca:	f043 0220 	orr.w	r2, r3, #32
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e020      	b.n	8006820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	0c1b      	lsrs	r3, r3, #16
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d10c      	bne.n	8006802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	43da      	mvns	r2, r3
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	4013      	ands	r3, r2
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	bf14      	ite	ne
 80067fa:	2301      	movne	r3, #1
 80067fc:	2300      	moveq	r3, #0
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	e00b      	b.n	800681a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	43da      	mvns	r2, r3
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	4013      	ands	r3, r2
 800680e:	b29b      	uxth	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	bf14      	ite	ne
 8006814:	2301      	movne	r3, #1
 8006816:	2300      	moveq	r3, #0
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d18d      	bne.n	800673a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006834:	e02d      	b.n	8006892 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 f8ce 	bl	80069d8 <I2C_IsAcknowledgeFailed>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e02d      	b.n	80068a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684c:	d021      	beq.n	8006892 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800684e:	f7fc fa01 	bl	8002c54 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	429a      	cmp	r2, r3
 800685c:	d302      	bcc.n	8006864 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d116      	bne.n	8006892 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2220      	movs	r2, #32
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800687e:	f043 0220 	orr.w	r2, r3, #32
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e007      	b.n	80068a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800689c:	2b80      	cmp	r3, #128	@ 0x80
 800689e:	d1ca      	bne.n	8006836 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068b6:	e02d      	b.n	8006914 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 f88d 	bl	80069d8 <I2C_IsAcknowledgeFailed>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e02d      	b.n	8006924 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ce:	d021      	beq.n	8006914 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d0:	f7fc f9c0 	bl	8002c54 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d302      	bcc.n	80068e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d116      	bne.n	8006914 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006900:	f043 0220 	orr.w	r2, r3, #32
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e007      	b.n	8006924 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	f003 0304 	and.w	r3, r3, #4
 800691e:	2b04      	cmp	r3, #4
 8006920:	d1ca      	bne.n	80068b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006938:	e042      	b.n	80069c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	f003 0310 	and.w	r3, r3, #16
 8006944:	2b10      	cmp	r3, #16
 8006946:	d119      	bne.n	800697c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f06f 0210 	mvn.w	r2, #16
 8006950:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2220      	movs	r2, #32
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e029      	b.n	80069d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800697c:	f7fc f96a 	bl	8002c54 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	429a      	cmp	r2, r3
 800698a:	d302      	bcc.n	8006992 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d116      	bne.n	80069c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2220      	movs	r2, #32
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ac:	f043 0220 	orr.w	r2, r3, #32
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e007      	b.n	80069d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ca:	2b40      	cmp	r3, #64	@ 0x40
 80069cc:	d1b5      	bne.n	800693a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069ee:	d11b      	bne.n	8006a28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80069f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a14:	f043 0204 	orr.w	r2, r3, #4
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e000      	b.n	8006a2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
	...

08006a38 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b088      	sub	sp, #32
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e128      	b.n	8006c9c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d109      	bne.n	8006a6a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a90      	ldr	r2, [pc, #576]	@ (8006ca4 <HAL_I2S_Init+0x26c>)
 8006a62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7fb f871 	bl	8001b4c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6812      	ldr	r2, [r2, #0]
 8006a7c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006a80:	f023 030f 	bic.w	r3, r3, #15
 8006a84:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d060      	beq.n	8006b58 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d102      	bne.n	8006aa4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006a9e:	2310      	movs	r3, #16
 8006aa0:	617b      	str	r3, [r7, #20]
 8006aa2:	e001      	b.n	8006aa8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006aa4:	2320      	movs	r3, #32
 8006aa6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	d802      	bhi.n	8006ab6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006ab6:	2001      	movs	r0, #1
 8006ab8:	f001 fe14 	bl	80086e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006abc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ac6:	d125      	bne.n	8006b14 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d010      	beq.n	8006af2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ada:	4613      	mov	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aec:	3305      	adds	r3, #5
 8006aee:	613b      	str	r3, [r7, #16]
 8006af0:	e01f      	b.n	8006b32 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	00db      	lsls	r3, r3, #3
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006afc:	4613      	mov	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	461a      	mov	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0e:	3305      	adds	r3, #5
 8006b10:	613b      	str	r3, [r7, #16]
 8006b12:	e00e      	b.n	8006b32 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	461a      	mov	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2e:	3305      	adds	r3, #5
 8006b30:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	4a5c      	ldr	r2, [pc, #368]	@ (8006ca8 <HAL_I2S_Init+0x270>)
 8006b36:	fba2 2303 	umull	r2, r3, r2, r3
 8006b3a:	08db      	lsrs	r3, r3, #3
 8006b3c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	085b      	lsrs	r3, r3, #1
 8006b4e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	021b      	lsls	r3, r3, #8
 8006b54:	61bb      	str	r3, [r7, #24]
 8006b56:	e003      	b.n	8006b60 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006b58:	2302      	movs	r3, #2
 8006b5a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d902      	bls.n	8006b6c <HAL_I2S_Init+0x134>
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	2bff      	cmp	r3, #255	@ 0xff
 8006b6a:	d907      	bls.n	8006b7c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b70:	f043 0210 	orr.w	r2, r3, #16
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e08f      	b.n	8006c9c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	691a      	ldr	r2, [r3, #16]
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	ea42 0103 	orr.w	r1, r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	69fa      	ldr	r2, [r7, #28]
 8006b8c:	430a      	orrs	r2, r1
 8006b8e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006b9a:	f023 030f 	bic.w	r3, r3, #15
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	6851      	ldr	r1, [r2, #4]
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6892      	ldr	r2, [r2, #8]
 8006ba6:	4311      	orrs	r1, r2
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	68d2      	ldr	r2, [r2, #12]
 8006bac:	4311      	orrs	r1, r2
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	6992      	ldr	r2, [r2, #24]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bbe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d161      	bne.n	8006c8c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a38      	ldr	r2, [pc, #224]	@ (8006cac <HAL_I2S_Init+0x274>)
 8006bcc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a37      	ldr	r2, [pc, #220]	@ (8006cb0 <HAL_I2S_Init+0x278>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d101      	bne.n	8006bdc <HAL_I2S_Init+0x1a4>
 8006bd8:	4b36      	ldr	r3, [pc, #216]	@ (8006cb4 <HAL_I2S_Init+0x27c>)
 8006bda:	e001      	b.n	8006be0 <HAL_I2S_Init+0x1a8>
 8006bdc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	6812      	ldr	r2, [r2, #0]
 8006be6:	4932      	ldr	r1, [pc, #200]	@ (8006cb0 <HAL_I2S_Init+0x278>)
 8006be8:	428a      	cmp	r2, r1
 8006bea:	d101      	bne.n	8006bf0 <HAL_I2S_Init+0x1b8>
 8006bec:	4a31      	ldr	r2, [pc, #196]	@ (8006cb4 <HAL_I2S_Init+0x27c>)
 8006bee:	e001      	b.n	8006bf4 <HAL_I2S_Init+0x1bc>
 8006bf0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006bf4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006bf8:	f023 030f 	bic.w	r3, r3, #15
 8006bfc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a2b      	ldr	r2, [pc, #172]	@ (8006cb0 <HAL_I2S_Init+0x278>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d101      	bne.n	8006c0c <HAL_I2S_Init+0x1d4>
 8006c08:	4b2a      	ldr	r3, [pc, #168]	@ (8006cb4 <HAL_I2S_Init+0x27c>)
 8006c0a:	e001      	b.n	8006c10 <HAL_I2S_Init+0x1d8>
 8006c0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c10:	2202      	movs	r2, #2
 8006c12:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a25      	ldr	r2, [pc, #148]	@ (8006cb0 <HAL_I2S_Init+0x278>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d101      	bne.n	8006c22 <HAL_I2S_Init+0x1ea>
 8006c1e:	4b25      	ldr	r3, [pc, #148]	@ (8006cb4 <HAL_I2S_Init+0x27c>)
 8006c20:	e001      	b.n	8006c26 <HAL_I2S_Init+0x1ee>
 8006c22:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c32:	d003      	beq.n	8006c3c <HAL_I2S_Init+0x204>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d103      	bne.n	8006c44 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006c3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	e001      	b.n	8006c48 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006c44:	2300      	movs	r3, #0
 8006c46:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006c52:	4313      	orrs	r3, r2
 8006c54:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006c66:	4313      	orrs	r3, r2
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	897b      	ldrh	r3, [r7, #10]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006c74:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a0d      	ldr	r2, [pc, #52]	@ (8006cb0 <HAL_I2S_Init+0x278>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d101      	bne.n	8006c84 <HAL_I2S_Init+0x24c>
 8006c80:	4b0c      	ldr	r3, [pc, #48]	@ (8006cb4 <HAL_I2S_Init+0x27c>)
 8006c82:	e001      	b.n	8006c88 <HAL_I2S_Init+0x250>
 8006c84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c88:	897a      	ldrh	r2, [r7, #10]
 8006c8a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3720      	adds	r7, #32
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	0800753d 	.word	0x0800753d
 8006ca8:	cccccccd 	.word	0xcccccccd
 8006cac:	080076c5 	.word	0x080076c5
 8006cb0:	40003800 	.word	0x40003800
 8006cb4:	40003400 	.word	0x40003400

08006cb8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <HAL_I2S_Transmit_DMA+0x1a>
 8006ccc:	88fb      	ldrh	r3, [r7, #6]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e08e      	b.n	8006df4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_I2S_Transmit_DMA+0x2e>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e086      	b.n	8006df4 <HAL_I2S_Transmit_DMA+0x13c>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d005      	beq.n	8006d06 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 8006d02:	2302      	movs	r3, #2
 8006d04:	e076      	b.n	8006df4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2203      	movs	r2, #3
 8006d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2b03      	cmp	r3, #3
 8006d2a:	d002      	beq.n	8006d32 <HAL_I2S_Transmit_DMA+0x7a>
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	2b05      	cmp	r3, #5
 8006d30:	d10a      	bne.n	8006d48 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8006d32:	88fb      	ldrh	r3, [r7, #6]
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8006d3c:	88fb      	ldrh	r3, [r7, #6]
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d46:	e005      	b.n	8006d54 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	88fa      	ldrh	r2, [r7, #6]
 8006d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	88fa      	ldrh	r2, [r7, #6]
 8006d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d58:	4a28      	ldr	r2, [pc, #160]	@ (8006dfc <HAL_I2S_Transmit_DMA+0x144>)
 8006d5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d60:	4a27      	ldr	r2, [pc, #156]	@ (8006e00 <HAL_I2S_Transmit_DMA+0x148>)
 8006d62:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d68:	4a26      	ldr	r2, [pc, #152]	@ (8006e04 <HAL_I2S_Transmit_DMA+0x14c>)
 8006d6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006d74:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006d7c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d82:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006d84:	f7fc f9b4 	bl	80030f0 <HAL_DMA_Start_IT>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00f      	beq.n	8006dae <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d92:	f043 0208 	orr.w	r2, r3, #8
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e022      	b.n	8006df4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d107      	bne.n	8006dcc <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	69da      	ldr	r2, [r3, #28]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006dca:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d107      	bne.n	8006dea <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f042 0202 	orr.w	r2, r2, #2
 8006de8:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3718      	adds	r7, #24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	0800741b 	.word	0x0800741b
 8006e00:	080073d9 	.word	0x080073d9
 8006e04:	08007437 	.word	0x08007437

08006e08 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d101      	bne.n	8006e20 <HAL_I2S_DMAPause+0x18>
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	e04a      	b.n	8006eb6 <HAL_I2S_DMAPause+0xae>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d108      	bne.n	8006e46 <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f022 0202 	bic.w	r2, r2, #2
 8006e42:	605a      	str	r2, [r3, #4]
 8006e44:	e032      	b.n	8006eac <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	d108      	bne.n	8006e64 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0201 	bic.w	r2, r2, #1
 8006e60:	605a      	str	r2, [r3, #4]
 8006e62:	e023      	b.n	8006eac <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b05      	cmp	r3, #5
 8006e6e:	d11d      	bne.n	8006eac <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0203 	bic.w	r2, r2, #3
 8006e7e:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a0f      	ldr	r2, [pc, #60]	@ (8006ec4 <HAL_I2S_DMAPause+0xbc>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d101      	bne.n	8006e8e <HAL_I2S_DMAPause+0x86>
 8006e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8006ec8 <HAL_I2S_DMAPause+0xc0>)
 8006e8c:	e001      	b.n	8006e92 <HAL_I2S_DMAPause+0x8a>
 8006e8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	490a      	ldr	r1, [pc, #40]	@ (8006ec4 <HAL_I2S_DMAPause+0xbc>)
 8006e9a:	428b      	cmp	r3, r1
 8006e9c:	d101      	bne.n	8006ea2 <HAL_I2S_DMAPause+0x9a>
 8006e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006ec8 <HAL_I2S_DMAPause+0xc0>)
 8006ea0:	e001      	b.n	8006ea6 <HAL_I2S_DMAPause+0x9e>
 8006ea2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ea6:	f022 0203 	bic.w	r2, r2, #3
 8006eaa:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	40003800 	.word	0x40003800
 8006ec8:	40003400 	.word	0x40003400

08006ecc <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d101      	bne.n	8006ee4 <HAL_I2S_DMAResume+0x18>
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	e07d      	b.n	8006fe0 <HAL_I2S_DMAResume+0x114>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b03      	cmp	r3, #3
 8006ef6:	d108      	bne.n	8006f0a <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f042 0202 	orr.w	r2, r2, #2
 8006f06:	605a      	str	r2, [r3, #4]
 8006f08:	e056      	b.n	8006fb8 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b04      	cmp	r3, #4
 8006f14:	d108      	bne.n	8006f28 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f042 0201 	orr.w	r2, r2, #1
 8006f24:	605a      	str	r2, [r3, #4]
 8006f26:	e047      	b.n	8006fb8 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b05      	cmp	r3, #5
 8006f32:	d141      	bne.n	8006fb8 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0203 	orr.w	r2, r2, #3
 8006f42:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a28      	ldr	r2, [pc, #160]	@ (8006fec <HAL_I2S_DMAResume+0x120>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d101      	bne.n	8006f52 <HAL_I2S_DMAResume+0x86>
 8006f4e:	4b28      	ldr	r3, [pc, #160]	@ (8006ff0 <HAL_I2S_DMAResume+0x124>)
 8006f50:	e001      	b.n	8006f56 <HAL_I2S_DMAResume+0x8a>
 8006f52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4923      	ldr	r1, [pc, #140]	@ (8006fec <HAL_I2S_DMAResume+0x120>)
 8006f5e:	428b      	cmp	r3, r1
 8006f60:	d101      	bne.n	8006f66 <HAL_I2S_DMAResume+0x9a>
 8006f62:	4b23      	ldr	r3, [pc, #140]	@ (8006ff0 <HAL_I2S_DMAResume+0x124>)
 8006f64:	e001      	b.n	8006f6a <HAL_I2S_DMAResume+0x9e>
 8006f66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f6a:	f042 0203 	orr.w	r2, r2, #3
 8006f6e:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a1d      	ldr	r2, [pc, #116]	@ (8006fec <HAL_I2S_DMAResume+0x120>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d101      	bne.n	8006f7e <HAL_I2S_DMAResume+0xb2>
 8006f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ff0 <HAL_I2S_DMAResume+0x124>)
 8006f7c:	e001      	b.n	8006f82 <HAL_I2S_DMAResume+0xb6>
 8006f7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f82:	69db      	ldr	r3, [r3, #28]
 8006f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d115      	bne.n	8006fb8 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a16      	ldr	r2, [pc, #88]	@ (8006fec <HAL_I2S_DMAResume+0x120>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d101      	bne.n	8006f9a <HAL_I2S_DMAResume+0xce>
 8006f96:	4b16      	ldr	r3, [pc, #88]	@ (8006ff0 <HAL_I2S_DMAResume+0x124>)
 8006f98:	e001      	b.n	8006f9e <HAL_I2S_DMAResume+0xd2>
 8006f9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f9e:	69da      	ldr	r2, [r3, #28]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4911      	ldr	r1, [pc, #68]	@ (8006fec <HAL_I2S_DMAResume+0x120>)
 8006fa6:	428b      	cmp	r3, r1
 8006fa8:	d101      	bne.n	8006fae <HAL_I2S_DMAResume+0xe2>
 8006faa:	4b11      	ldr	r3, [pc, #68]	@ (8006ff0 <HAL_I2S_DMAResume+0x124>)
 8006fac:	e001      	b.n	8006fb2 <HAL_I2S_DMAResume+0xe6>
 8006fae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006fb2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006fb6:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d107      	bne.n	8006fd6 <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69da      	ldr	r2, [r3, #28]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006fd4:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	40003800 	.word	0x40003800
 8006ff0:	40003400 	.word	0x40003400

08006ff4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b088      	sub	sp, #32
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007008:	d004      	beq.n	8007014 <HAL_I2S_DMAStop+0x20>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	f040 80d1 	bne.w	80071b6 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00f      	beq.n	800703c <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007020:	4618      	mov	r0, r3
 8007022:	f7fc f8bd 	bl	80031a0 <HAL_DMA_Abort>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d007      	beq.n	800703c <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007030:	f043 0208 	orr.w	r2, r3, #8
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800703c:	2364      	movs	r3, #100	@ 0x64
 800703e:	2201      	movs	r2, #1
 8007040:	2102      	movs	r1, #2
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fb04 	bl	8007650 <I2S_WaitFlagStateUntilTimeout>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00b      	beq.n	8007066 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007052:	f043 0201 	orr.w	r2, r3, #1
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8007066:	2364      	movs	r3, #100	@ 0x64
 8007068:	2200      	movs	r2, #0
 800706a:	2180      	movs	r1, #128	@ 0x80
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 faef 	bl	8007650 <I2S_WaitFlagStateUntilTimeout>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00b      	beq.n	8007090 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800707c:	f043 0201 	orr.w	r2, r3, #1
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	69da      	ldr	r2, [r3, #28]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800709e:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80070a0:	2300      	movs	r3, #0
 80070a2:	617b      	str	r3, [r7, #20]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	617b      	str	r3, [r7, #20]
 80070ac:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0202 	bic.w	r2, r2, #2
 80070bc:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b05      	cmp	r3, #5
 80070c8:	f040 8165 	bne.w	8007396 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00f      	beq.n	80070f4 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fc f861 	bl	80031a0 <HAL_DMA_Abort>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d007      	beq.n	80070f4 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070e8:	f043 0208 	orr.w	r2, r3, #8
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a8a      	ldr	r2, [pc, #552]	@ (8007324 <HAL_I2S_DMAStop+0x330>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d101      	bne.n	8007102 <HAL_I2S_DMAStop+0x10e>
 80070fe:	4b8a      	ldr	r3, [pc, #552]	@ (8007328 <HAL_I2S_DMAStop+0x334>)
 8007100:	e001      	b.n	8007106 <HAL_I2S_DMAStop+0x112>
 8007102:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007106:	69da      	ldr	r2, [r3, #28]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4985      	ldr	r1, [pc, #532]	@ (8007324 <HAL_I2S_DMAStop+0x330>)
 800710e:	428b      	cmp	r3, r1
 8007110:	d101      	bne.n	8007116 <HAL_I2S_DMAStop+0x122>
 8007112:	4b85      	ldr	r3, [pc, #532]	@ (8007328 <HAL_I2S_DMAStop+0x334>)
 8007114:	e001      	b.n	800711a <HAL_I2S_DMAStop+0x126>
 8007116:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800711a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800711e:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8007120:	2300      	movs	r3, #0
 8007122:	613b      	str	r3, [r7, #16]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a7e      	ldr	r2, [pc, #504]	@ (8007324 <HAL_I2S_DMAStop+0x330>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d101      	bne.n	8007132 <HAL_I2S_DMAStop+0x13e>
 800712e:	4b7e      	ldr	r3, [pc, #504]	@ (8007328 <HAL_I2S_DMAStop+0x334>)
 8007130:	e001      	b.n	8007136 <HAL_I2S_DMAStop+0x142>
 8007132:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	613b      	str	r3, [r7, #16]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a79      	ldr	r2, [pc, #484]	@ (8007324 <HAL_I2S_DMAStop+0x330>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d101      	bne.n	8007148 <HAL_I2S_DMAStop+0x154>
 8007144:	4b78      	ldr	r3, [pc, #480]	@ (8007328 <HAL_I2S_DMAStop+0x334>)
 8007146:	e001      	b.n	800714c <HAL_I2S_DMAStop+0x158>
 8007148:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	613b      	str	r3, [r7, #16]
 8007150:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a73      	ldr	r2, [pc, #460]	@ (8007324 <HAL_I2S_DMAStop+0x330>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d101      	bne.n	8007160 <HAL_I2S_DMAStop+0x16c>
 800715c:	4b72      	ldr	r3, [pc, #456]	@ (8007328 <HAL_I2S_DMAStop+0x334>)
 800715e:	e001      	b.n	8007164 <HAL_I2S_DMAStop+0x170>
 8007160:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	496e      	ldr	r1, [pc, #440]	@ (8007324 <HAL_I2S_DMAStop+0x330>)
 800716c:	428b      	cmp	r3, r1
 800716e:	d101      	bne.n	8007174 <HAL_I2S_DMAStop+0x180>
 8007170:	4b6d      	ldr	r3, [pc, #436]	@ (8007328 <HAL_I2S_DMAStop+0x334>)
 8007172:	e001      	b.n	8007178 <HAL_I2S_DMAStop+0x184>
 8007174:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007178:	f022 0201 	bic.w	r2, r2, #1
 800717c:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10c      	bne.n	80071a0 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800718a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800719e:	e0fa      	b.n	8007396 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a5f      	ldr	r2, [pc, #380]	@ (8007324 <HAL_I2S_DMAStop+0x330>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d101      	bne.n	80071ae <HAL_I2S_DMAStop+0x1ba>
 80071aa:	4b5f      	ldr	r3, [pc, #380]	@ (8007328 <HAL_I2S_DMAStop+0x334>)
 80071ac:	e001      	b.n	80071b2 <HAL_I2S_DMAStop+0x1be>
 80071ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80071b2:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80071b4:	e0ef      	b.n	8007396 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071be:	d005      	beq.n	80071cc <HAL_I2S_DMAStop+0x1d8>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071c8:	f040 80e5 	bne.w	8007396 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00f      	beq.n	80071f4 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fb ffe1 	bl	80031a0 <HAL_DMA_Abort>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d007      	beq.n	80071f4 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071e8:	f043 0208 	orr.w	r2, r3, #8
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b05      	cmp	r3, #5
 80071fe:	f040 809a 	bne.w	8007336 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00f      	beq.n	800722a <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800720e:	4618      	mov	r0, r3
 8007210:	f7fb ffc6 	bl	80031a0 <HAL_DMA_Abort>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d007      	beq.n	800722a <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800721e:	f043 0208 	orr.w	r2, r3, #8
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 800722a:	f7fb fd13 	bl	8002c54 <HAL_GetTick>
 800722e:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8007230:	e012      	b.n	8007258 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8007232:	f7fb fd0f 	bl	8002c54 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b64      	cmp	r3, #100	@ 0x64
 800723e:	d90b      	bls.n	8007258 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007244:	f043 0201 	orr.w	r2, r3, #1
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a31      	ldr	r2, [pc, #196]	@ (8007324 <HAL_I2S_DMAStop+0x330>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d101      	bne.n	8007266 <HAL_I2S_DMAStop+0x272>
 8007262:	4b31      	ldr	r3, [pc, #196]	@ (8007328 <HAL_I2S_DMAStop+0x334>)
 8007264:	e001      	b.n	800726a <HAL_I2S_DMAStop+0x276>
 8007266:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b02      	cmp	r3, #2
 8007272:	d1de      	bne.n	8007232 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8007274:	e012      	b.n	800729c <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8007276:	f7fb fced 	bl	8002c54 <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	2b64      	cmp	r3, #100	@ 0x64
 8007282:	d90b      	bls.n	800729c <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007288:	f043 0201 	orr.w	r2, r3, #1
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a20      	ldr	r2, [pc, #128]	@ (8007324 <HAL_I2S_DMAStop+0x330>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d101      	bne.n	80072aa <HAL_I2S_DMAStop+0x2b6>
 80072a6:	4b20      	ldr	r3, [pc, #128]	@ (8007328 <HAL_I2S_DMAStop+0x334>)
 80072a8:	e001      	b.n	80072ae <HAL_I2S_DMAStop+0x2ba>
 80072aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072b4:	2b80      	cmp	r3, #128	@ 0x80
 80072b6:	d0de      	beq.n	8007276 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a19      	ldr	r2, [pc, #100]	@ (8007324 <HAL_I2S_DMAStop+0x330>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d101      	bne.n	80072c6 <HAL_I2S_DMAStop+0x2d2>
 80072c2:	4b19      	ldr	r3, [pc, #100]	@ (8007328 <HAL_I2S_DMAStop+0x334>)
 80072c4:	e001      	b.n	80072ca <HAL_I2S_DMAStop+0x2d6>
 80072c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80072ca:	69da      	ldr	r2, [r3, #28]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4914      	ldr	r1, [pc, #80]	@ (8007324 <HAL_I2S_DMAStop+0x330>)
 80072d2:	428b      	cmp	r3, r1
 80072d4:	d101      	bne.n	80072da <HAL_I2S_DMAStop+0x2e6>
 80072d6:	4b14      	ldr	r3, [pc, #80]	@ (8007328 <HAL_I2S_DMAStop+0x334>)
 80072d8:	e001      	b.n	80072de <HAL_I2S_DMAStop+0x2ea>
 80072da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80072de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072e2:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a0d      	ldr	r2, [pc, #52]	@ (8007324 <HAL_I2S_DMAStop+0x330>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d101      	bne.n	80072f6 <HAL_I2S_DMAStop+0x302>
 80072f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007328 <HAL_I2S_DMAStop+0x334>)
 80072f4:	e001      	b.n	80072fa <HAL_I2S_DMAStop+0x306>
 80072f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a07      	ldr	r2, [pc, #28]	@ (8007324 <HAL_I2S_DMAStop+0x330>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d101      	bne.n	800730e <HAL_I2S_DMAStop+0x31a>
 800730a:	4b07      	ldr	r3, [pc, #28]	@ (8007328 <HAL_I2S_DMAStop+0x334>)
 800730c:	e001      	b.n	8007312 <HAL_I2S_DMAStop+0x31e>
 800730e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4902      	ldr	r1, [pc, #8]	@ (8007324 <HAL_I2S_DMAStop+0x330>)
 800731a:	428b      	cmp	r3, r1
 800731c:	d106      	bne.n	800732c <HAL_I2S_DMAStop+0x338>
 800731e:	4b02      	ldr	r3, [pc, #8]	@ (8007328 <HAL_I2S_DMAStop+0x334>)
 8007320:	e006      	b.n	8007330 <HAL_I2S_DMAStop+0x33c>
 8007322:	bf00      	nop
 8007324:	40003800 	.word	0x40003800
 8007328:	40003400 	.word	0x40003400
 800732c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007330:	f022 0202 	bic.w	r2, r2, #2
 8007334:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69da      	ldr	r2, [r3, #28]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007344:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007346:	2300      	movs	r3, #0
 8007348:	60bb      	str	r3, [r7, #8]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	60bb      	str	r3, [r7, #8]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	60bb      	str	r3, [r7, #8]
 800735a:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f022 0201 	bic.w	r2, r2, #1
 800736a:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007374:	d10c      	bne.n	8007390 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800737a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	77fb      	strb	r3, [r7, #31]
 800738e:	e002      	b.n	8007396 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 800739e:	7ffb      	ldrb	r3, [r7, #31]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3720      	adds	r7, #32
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073ca:	b2db      	uxtb	r3, r3
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10e      	bne.n	800740c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0202 	bic.w	r2, r2, #2
 80073fc:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f7f9 f95d 	bl	80006cc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007412:	bf00      	nop
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007426:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f7f9 f961 	bl	80006f0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800742e:	bf00      	nop
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b084      	sub	sp, #16
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007442:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 0203 	bic.w	r2, r2, #3
 8007452:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800746c:	f043 0208 	orr.w	r2, r3, #8
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7f9 faab 	bl	80009d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800747a:	bf00      	nop
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748e:	881a      	ldrh	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800749a:	1c9a      	adds	r2, r3, #2
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	3b01      	subs	r3, #1
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10e      	bne.n	80074d6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80074c6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7f9 f8fb 	bl	80006cc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80074d6:	bf00      	nop
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b082      	sub	sp, #8
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68da      	ldr	r2, [r3, #12]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f0:	b292      	uxth	r2, r2
 80074f2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f8:	1c9a      	adds	r2, r3, #2
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007502:	b29b      	uxth	r3, r3
 8007504:	3b01      	subs	r3, #1
 8007506:	b29a      	uxth	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10e      	bne.n	8007534 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007524:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7ff ff3a 	bl	80073a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007534:	bf00      	nop
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b04      	cmp	r3, #4
 8007556:	d13a      	bne.n	80075ce <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b01      	cmp	r3, #1
 8007560:	d109      	bne.n	8007576 <I2S_IRQHandler+0x3a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800756c:	2b40      	cmp	r3, #64	@ 0x40
 800756e:	d102      	bne.n	8007576 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7ff ffb4 	bl	80074de <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800757c:	2b40      	cmp	r3, #64	@ 0x40
 800757e:	d126      	bne.n	80075ce <I2S_IRQHandler+0x92>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f003 0320 	and.w	r3, r3, #32
 800758a:	2b20      	cmp	r3, #32
 800758c:	d11f      	bne.n	80075ce <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685a      	ldr	r2, [r3, #4]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800759c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800759e:	2300      	movs	r3, #0
 80075a0:	613b      	str	r3, [r7, #16]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	613b      	str	r3, [r7, #16]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	613b      	str	r3, [r7, #16]
 80075b2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075c0:	f043 0202 	orr.w	r2, r3, #2
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7f9 fa01 	bl	80009d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d136      	bne.n	8007648 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f003 0302 	and.w	r3, r3, #2
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d109      	bne.n	80075f8 <I2S_IRQHandler+0xbc>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ee:	2b80      	cmp	r3, #128	@ 0x80
 80075f0:	d102      	bne.n	80075f8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7ff ff45 	bl	8007482 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f003 0308 	and.w	r3, r3, #8
 80075fe:	2b08      	cmp	r3, #8
 8007600:	d122      	bne.n	8007648 <I2S_IRQHandler+0x10c>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f003 0320 	and.w	r3, r3, #32
 800760c:	2b20      	cmp	r3, #32
 800760e:	d11b      	bne.n	8007648 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800761e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007620:	2300      	movs	r3, #0
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800763a:	f043 0204 	orr.w	r2, r3, #4
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7f9 f9c4 	bl	80009d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007648:	bf00      	nop
 800764a:	3718      	adds	r7, #24
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	4613      	mov	r3, r2
 800765e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007660:	f7fb faf8 	bl	8002c54 <HAL_GetTick>
 8007664:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007666:	e018      	b.n	800769a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766e:	d014      	beq.n	800769a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8007670:	f7fb faf0 	bl	8002c54 <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	683a      	ldr	r2, [r7, #0]
 800767c:	429a      	cmp	r2, r3
 800767e:	d902      	bls.n	8007686 <I2S_WaitFlagStateUntilTimeout+0x36>
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d109      	bne.n	800769a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e00f      	b.n	80076ba <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	4013      	ands	r3, r2
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	bf0c      	ite	eq
 80076aa:	2301      	moveq	r3, #1
 80076ac:	2300      	movne	r3, #0
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	461a      	mov	r2, r3
 80076b2:	79fb      	ldrb	r3, [r7, #7]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d1d7      	bne.n	8007668 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3718      	adds	r7, #24
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
	...

080076c4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b088      	sub	sp, #32
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a92      	ldr	r2, [pc, #584]	@ (8007924 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d101      	bne.n	80076e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80076de:	4b92      	ldr	r3, [pc, #584]	@ (8007928 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80076e0:	e001      	b.n	80076e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80076e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a8b      	ldr	r2, [pc, #556]	@ (8007924 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d101      	bne.n	8007700 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80076fc:	4b8a      	ldr	r3, [pc, #552]	@ (8007928 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80076fe:	e001      	b.n	8007704 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007700:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007710:	d004      	beq.n	800771c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	f040 8099 	bne.w	800784e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	f003 0302 	and.w	r3, r3, #2
 8007722:	2b02      	cmp	r3, #2
 8007724:	d107      	bne.n	8007736 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f925 	bl	8007980 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b01      	cmp	r3, #1
 800773e:	d107      	bne.n	8007750 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007746:	2b00      	cmp	r3, #0
 8007748:	d002      	beq.n	8007750 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f9c8 	bl	8007ae0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007756:	2b40      	cmp	r3, #64	@ 0x40
 8007758:	d13a      	bne.n	80077d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f003 0320 	and.w	r3, r3, #32
 8007760:	2b00      	cmp	r3, #0
 8007762:	d035      	beq.n	80077d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a6e      	ldr	r2, [pc, #440]	@ (8007924 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d101      	bne.n	8007772 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800776e:	4b6e      	ldr	r3, [pc, #440]	@ (8007928 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007770:	e001      	b.n	8007776 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007772:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4969      	ldr	r1, [pc, #420]	@ (8007924 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800777e:	428b      	cmp	r3, r1
 8007780:	d101      	bne.n	8007786 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007782:	4b69      	ldr	r3, [pc, #420]	@ (8007928 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007784:	e001      	b.n	800778a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007786:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800778a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800778e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800779e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80077a0:	2300      	movs	r3, #0
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077c2:	f043 0202 	orr.w	r2, r3, #2
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7f9 f900 	bl	80009d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	f003 0308 	and.w	r3, r3, #8
 80077d6:	2b08      	cmp	r3, #8
 80077d8:	f040 80c3 	bne.w	8007962 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f003 0320 	and.w	r3, r3, #32
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 80bd 	beq.w	8007962 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685a      	ldr	r2, [r3, #4]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80077f6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a49      	ldr	r2, [pc, #292]	@ (8007924 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d101      	bne.n	8007806 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007802:	4b49      	ldr	r3, [pc, #292]	@ (8007928 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007804:	e001      	b.n	800780a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007806:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4944      	ldr	r1, [pc, #272]	@ (8007924 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007812:	428b      	cmp	r3, r1
 8007814:	d101      	bne.n	800781a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007816:	4b44      	ldr	r3, [pc, #272]	@ (8007928 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007818:	e001      	b.n	800781e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800781a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800781e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007822:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007824:	2300      	movs	r3, #0
 8007826:	60bb      	str	r3, [r7, #8]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	60bb      	str	r3, [r7, #8]
 8007830:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800783e:	f043 0204 	orr.w	r2, r3, #4
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7f9 f8c2 	bl	80009d0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800784c:	e089      	b.n	8007962 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	f003 0302 	and.w	r3, r3, #2
 8007854:	2b02      	cmp	r3, #2
 8007856:	d107      	bne.n	8007868 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f8be 	bl	80079e4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b01      	cmp	r3, #1
 8007870:	d107      	bne.n	8007882 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f8fd 	bl	8007a7c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007888:	2b40      	cmp	r3, #64	@ 0x40
 800788a:	d12f      	bne.n	80078ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f003 0320 	and.w	r3, r3, #32
 8007892:	2b00      	cmp	r3, #0
 8007894:	d02a      	beq.n	80078ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80078a4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007924 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d101      	bne.n	80078b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80078b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007928 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80078b2:	e001      	b.n	80078b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80078b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4919      	ldr	r1, [pc, #100]	@ (8007924 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80078c0:	428b      	cmp	r3, r1
 80078c2:	d101      	bne.n	80078c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80078c4:	4b18      	ldr	r3, [pc, #96]	@ (8007928 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80078c6:	e001      	b.n	80078cc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80078c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80078cc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80078d0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078de:	f043 0202 	orr.w	r2, r3, #2
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7f9 f872 	bl	80009d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	f003 0308 	and.w	r3, r3, #8
 80078f2:	2b08      	cmp	r3, #8
 80078f4:	d136      	bne.n	8007964 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f003 0320 	and.w	r3, r3, #32
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d031      	beq.n	8007964 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a07      	ldr	r2, [pc, #28]	@ (8007924 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d101      	bne.n	800790e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800790a:	4b07      	ldr	r3, [pc, #28]	@ (8007928 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800790c:	e001      	b.n	8007912 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800790e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4902      	ldr	r1, [pc, #8]	@ (8007924 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800791a:	428b      	cmp	r3, r1
 800791c:	d106      	bne.n	800792c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800791e:	4b02      	ldr	r3, [pc, #8]	@ (8007928 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007920:	e006      	b.n	8007930 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8007922:	bf00      	nop
 8007924:	40003800 	.word	0x40003800
 8007928:	40003400 	.word	0x40003400
 800792c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007930:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007934:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007944:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007952:	f043 0204 	orr.w	r2, r3, #4
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7f9 f838 	bl	80009d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007960:	e000      	b.n	8007964 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007962:	bf00      	nop
}
 8007964:	bf00      	nop
 8007966:	3720      	adds	r7, #32
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800798c:	1c99      	adds	r1, r3, #2
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	6251      	str	r1, [r2, #36]	@ 0x24
 8007992:	881a      	ldrh	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800799e:	b29b      	uxth	r3, r3
 80079a0:	3b01      	subs	r3, #1
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d113      	bne.n	80079da <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80079c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d106      	bne.n	80079da <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff ffc9 	bl	800796c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80079da:	bf00      	nop
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
	...

080079e4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f0:	1c99      	adds	r1, r3, #2
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	6251      	str	r1, [r2, #36]	@ 0x24
 80079f6:	8819      	ldrh	r1, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a1d      	ldr	r2, [pc, #116]	@ (8007a74 <I2SEx_TxISR_I2SExt+0x90>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d101      	bne.n	8007a06 <I2SEx_TxISR_I2SExt+0x22>
 8007a02:	4b1d      	ldr	r3, [pc, #116]	@ (8007a78 <I2SEx_TxISR_I2SExt+0x94>)
 8007a04:	e001      	b.n	8007a0a <I2SEx_TxISR_I2SExt+0x26>
 8007a06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007a0a:	460a      	mov	r2, r1
 8007a0c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	3b01      	subs	r3, #1
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d121      	bne.n	8007a6a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a12      	ldr	r2, [pc, #72]	@ (8007a74 <I2SEx_TxISR_I2SExt+0x90>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d101      	bne.n	8007a34 <I2SEx_TxISR_I2SExt+0x50>
 8007a30:	4b11      	ldr	r3, [pc, #68]	@ (8007a78 <I2SEx_TxISR_I2SExt+0x94>)
 8007a32:	e001      	b.n	8007a38 <I2SEx_TxISR_I2SExt+0x54>
 8007a34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007a38:	685a      	ldr	r2, [r3, #4]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	490d      	ldr	r1, [pc, #52]	@ (8007a74 <I2SEx_TxISR_I2SExt+0x90>)
 8007a40:	428b      	cmp	r3, r1
 8007a42:	d101      	bne.n	8007a48 <I2SEx_TxISR_I2SExt+0x64>
 8007a44:	4b0c      	ldr	r3, [pc, #48]	@ (8007a78 <I2SEx_TxISR_I2SExt+0x94>)
 8007a46:	e001      	b.n	8007a4c <I2SEx_TxISR_I2SExt+0x68>
 8007a48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007a4c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007a50:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d106      	bne.n	8007a6a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7ff ff81 	bl	800796c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007a6a:	bf00      	nop
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	40003800 	.word	0x40003800
 8007a78:	40003400 	.word	0x40003400

08007a7c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68d8      	ldr	r0, [r3, #12]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8e:	1c99      	adds	r1, r3, #2
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007a94:	b282      	uxth	r2, r0
 8007a96:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d113      	bne.n	8007ad8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007abe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d106      	bne.n	8007ad8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff ff4a 	bl	800796c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007ad8:	bf00      	nop
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a20      	ldr	r2, [pc, #128]	@ (8007b70 <I2SEx_RxISR_I2SExt+0x90>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d101      	bne.n	8007af6 <I2SEx_RxISR_I2SExt+0x16>
 8007af2:	4b20      	ldr	r3, [pc, #128]	@ (8007b74 <I2SEx_RxISR_I2SExt+0x94>)
 8007af4:	e001      	b.n	8007afa <I2SEx_RxISR_I2SExt+0x1a>
 8007af6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007afa:	68d8      	ldr	r0, [r3, #12]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b00:	1c99      	adds	r1, r3, #2
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007b06:	b282      	uxth	r2, r0
 8007b08:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	3b01      	subs	r3, #1
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d121      	bne.n	8007b66 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a12      	ldr	r2, [pc, #72]	@ (8007b70 <I2SEx_RxISR_I2SExt+0x90>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d101      	bne.n	8007b30 <I2SEx_RxISR_I2SExt+0x50>
 8007b2c:	4b11      	ldr	r3, [pc, #68]	@ (8007b74 <I2SEx_RxISR_I2SExt+0x94>)
 8007b2e:	e001      	b.n	8007b34 <I2SEx_RxISR_I2SExt+0x54>
 8007b30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007b34:	685a      	ldr	r2, [r3, #4]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	490d      	ldr	r1, [pc, #52]	@ (8007b70 <I2SEx_RxISR_I2SExt+0x90>)
 8007b3c:	428b      	cmp	r3, r1
 8007b3e:	d101      	bne.n	8007b44 <I2SEx_RxISR_I2SExt+0x64>
 8007b40:	4b0c      	ldr	r3, [pc, #48]	@ (8007b74 <I2SEx_RxISR_I2SExt+0x94>)
 8007b42:	e001      	b.n	8007b48 <I2SEx_RxISR_I2SExt+0x68>
 8007b44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007b48:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007b4c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d106      	bne.n	8007b66 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7ff ff03 	bl	800796c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007b66:	bf00      	nop
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	40003800 	.word	0x40003800
 8007b74:	40003400 	.word	0x40003400

08007b78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e267      	b.n	800805a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d075      	beq.n	8007c82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007b96:	4b88      	ldr	r3, [pc, #544]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 030c 	and.w	r3, r3, #12
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d00c      	beq.n	8007bbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ba2:	4b85      	ldr	r3, [pc, #532]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007baa:	2b08      	cmp	r3, #8
 8007bac:	d112      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bae:	4b82      	ldr	r3, [pc, #520]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007bba:	d10b      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bbc:	4b7e      	ldr	r3, [pc, #504]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d05b      	beq.n	8007c80 <HAL_RCC_OscConfig+0x108>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d157      	bne.n	8007c80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e242      	b.n	800805a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bdc:	d106      	bne.n	8007bec <HAL_RCC_OscConfig+0x74>
 8007bde:	4b76      	ldr	r3, [pc, #472]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a75      	ldr	r2, [pc, #468]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	e01d      	b.n	8007c28 <HAL_RCC_OscConfig+0xb0>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007bf4:	d10c      	bne.n	8007c10 <HAL_RCC_OscConfig+0x98>
 8007bf6:	4b70      	ldr	r3, [pc, #448]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a6f      	ldr	r2, [pc, #444]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007bfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c00:	6013      	str	r3, [r2, #0]
 8007c02:	4b6d      	ldr	r3, [pc, #436]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a6c      	ldr	r2, [pc, #432]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c0c:	6013      	str	r3, [r2, #0]
 8007c0e:	e00b      	b.n	8007c28 <HAL_RCC_OscConfig+0xb0>
 8007c10:	4b69      	ldr	r3, [pc, #420]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a68      	ldr	r2, [pc, #416]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007c16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c1a:	6013      	str	r3, [r2, #0]
 8007c1c:	4b66      	ldr	r3, [pc, #408]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a65      	ldr	r2, [pc, #404]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007c22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d013      	beq.n	8007c58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c30:	f7fb f810 	bl	8002c54 <HAL_GetTick>
 8007c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c36:	e008      	b.n	8007c4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c38:	f7fb f80c 	bl	8002c54 <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	2b64      	cmp	r3, #100	@ 0x64
 8007c44:	d901      	bls.n	8007c4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e207      	b.n	800805a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c4a:	4b5b      	ldr	r3, [pc, #364]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0f0      	beq.n	8007c38 <HAL_RCC_OscConfig+0xc0>
 8007c56:	e014      	b.n	8007c82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c58:	f7fa fffc 	bl	8002c54 <HAL_GetTick>
 8007c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c5e:	e008      	b.n	8007c72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c60:	f7fa fff8 	bl	8002c54 <HAL_GetTick>
 8007c64:	4602      	mov	r2, r0
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	2b64      	cmp	r3, #100	@ 0x64
 8007c6c:	d901      	bls.n	8007c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e1f3      	b.n	800805a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c72:	4b51      	ldr	r3, [pc, #324]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1f0      	bne.n	8007c60 <HAL_RCC_OscConfig+0xe8>
 8007c7e:	e000      	b.n	8007c82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0302 	and.w	r3, r3, #2
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d063      	beq.n	8007d56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f003 030c 	and.w	r3, r3, #12
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00b      	beq.n	8007cb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c9a:	4b47      	ldr	r3, [pc, #284]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007ca2:	2b08      	cmp	r3, #8
 8007ca4:	d11c      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ca6:	4b44      	ldr	r3, [pc, #272]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d116      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cb2:	4b41      	ldr	r3, [pc, #260]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d005      	beq.n	8007cca <HAL_RCC_OscConfig+0x152>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d001      	beq.n	8007cca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e1c7      	b.n	800805a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cca:	4b3b      	ldr	r3, [pc, #236]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	4937      	ldr	r1, [pc, #220]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cde:	e03a      	b.n	8007d56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d020      	beq.n	8007d2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ce8:	4b34      	ldr	r3, [pc, #208]	@ (8007dbc <HAL_RCC_OscConfig+0x244>)
 8007cea:	2201      	movs	r2, #1
 8007cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cee:	f7fa ffb1 	bl	8002c54 <HAL_GetTick>
 8007cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cf4:	e008      	b.n	8007d08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cf6:	f7fa ffad 	bl	8002c54 <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d901      	bls.n	8007d08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e1a8      	b.n	800805a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d08:	4b2b      	ldr	r3, [pc, #172]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0302 	and.w	r3, r3, #2
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d0f0      	beq.n	8007cf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d14:	4b28      	ldr	r3, [pc, #160]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	00db      	lsls	r3, r3, #3
 8007d22:	4925      	ldr	r1, [pc, #148]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	600b      	str	r3, [r1, #0]
 8007d28:	e015      	b.n	8007d56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d2a:	4b24      	ldr	r3, [pc, #144]	@ (8007dbc <HAL_RCC_OscConfig+0x244>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d30:	f7fa ff90 	bl	8002c54 <HAL_GetTick>
 8007d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d36:	e008      	b.n	8007d4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d38:	f7fa ff8c 	bl	8002c54 <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d901      	bls.n	8007d4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e187      	b.n	800805a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 0302 	and.w	r3, r3, #2
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1f0      	bne.n	8007d38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0308 	and.w	r3, r3, #8
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d036      	beq.n	8007dd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	695b      	ldr	r3, [r3, #20]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d016      	beq.n	8007d98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d6a:	4b15      	ldr	r3, [pc, #84]	@ (8007dc0 <HAL_RCC_OscConfig+0x248>)
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d70:	f7fa ff70 	bl	8002c54 <HAL_GetTick>
 8007d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d76:	e008      	b.n	8007d8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d78:	f7fa ff6c 	bl	8002c54 <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d901      	bls.n	8007d8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e167      	b.n	800805a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8007db8 <HAL_RCC_OscConfig+0x240>)
 8007d8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d8e:	f003 0302 	and.w	r3, r3, #2
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0f0      	beq.n	8007d78 <HAL_RCC_OscConfig+0x200>
 8007d96:	e01b      	b.n	8007dd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d98:	4b09      	ldr	r3, [pc, #36]	@ (8007dc0 <HAL_RCC_OscConfig+0x248>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d9e:	f7fa ff59 	bl	8002c54 <HAL_GetTick>
 8007da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007da4:	e00e      	b.n	8007dc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007da6:	f7fa ff55 	bl	8002c54 <HAL_GetTick>
 8007daa:	4602      	mov	r2, r0
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d907      	bls.n	8007dc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e150      	b.n	800805a <HAL_RCC_OscConfig+0x4e2>
 8007db8:	40023800 	.word	0x40023800
 8007dbc:	42470000 	.word	0x42470000
 8007dc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dc4:	4b88      	ldr	r3, [pc, #544]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007dc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dc8:	f003 0302 	and.w	r3, r3, #2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1ea      	bne.n	8007da6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0304 	and.w	r3, r3, #4
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 8097 	beq.w	8007f0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007dde:	2300      	movs	r3, #0
 8007de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007de2:	4b81      	ldr	r3, [pc, #516]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10f      	bne.n	8007e0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dee:	2300      	movs	r3, #0
 8007df0:	60bb      	str	r3, [r7, #8]
 8007df2:	4b7d      	ldr	r3, [pc, #500]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df6:	4a7c      	ldr	r2, [pc, #496]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8007dfe:	4b7a      	ldr	r3, [pc, #488]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e06:	60bb      	str	r3, [r7, #8]
 8007e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e0e:	4b77      	ldr	r3, [pc, #476]	@ (8007fec <HAL_RCC_OscConfig+0x474>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d118      	bne.n	8007e4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e1a:	4b74      	ldr	r3, [pc, #464]	@ (8007fec <HAL_RCC_OscConfig+0x474>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a73      	ldr	r2, [pc, #460]	@ (8007fec <HAL_RCC_OscConfig+0x474>)
 8007e20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e26:	f7fa ff15 	bl	8002c54 <HAL_GetTick>
 8007e2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e2c:	e008      	b.n	8007e40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e2e:	f7fa ff11 	bl	8002c54 <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d901      	bls.n	8007e40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e10c      	b.n	800805a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e40:	4b6a      	ldr	r3, [pc, #424]	@ (8007fec <HAL_RCC_OscConfig+0x474>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d0f0      	beq.n	8007e2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d106      	bne.n	8007e62 <HAL_RCC_OscConfig+0x2ea>
 8007e54:	4b64      	ldr	r3, [pc, #400]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e58:	4a63      	ldr	r2, [pc, #396]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007e5a:	f043 0301 	orr.w	r3, r3, #1
 8007e5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e60:	e01c      	b.n	8007e9c <HAL_RCC_OscConfig+0x324>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	2b05      	cmp	r3, #5
 8007e68:	d10c      	bne.n	8007e84 <HAL_RCC_OscConfig+0x30c>
 8007e6a:	4b5f      	ldr	r3, [pc, #380]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e6e:	4a5e      	ldr	r2, [pc, #376]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007e70:	f043 0304 	orr.w	r3, r3, #4
 8007e74:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e76:	4b5c      	ldr	r3, [pc, #368]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e7a:	4a5b      	ldr	r2, [pc, #364]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007e7c:	f043 0301 	orr.w	r3, r3, #1
 8007e80:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e82:	e00b      	b.n	8007e9c <HAL_RCC_OscConfig+0x324>
 8007e84:	4b58      	ldr	r3, [pc, #352]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e88:	4a57      	ldr	r2, [pc, #348]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007e8a:	f023 0301 	bic.w	r3, r3, #1
 8007e8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e90:	4b55      	ldr	r3, [pc, #340]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e94:	4a54      	ldr	r2, [pc, #336]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007e96:	f023 0304 	bic.w	r3, r3, #4
 8007e9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d015      	beq.n	8007ed0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ea4:	f7fa fed6 	bl	8002c54 <HAL_GetTick>
 8007ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007eaa:	e00a      	b.n	8007ec2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007eac:	f7fa fed2 	bl	8002c54 <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d901      	bls.n	8007ec2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e0cb      	b.n	800805a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ec2:	4b49      	ldr	r3, [pc, #292]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ec6:	f003 0302 	and.w	r3, r3, #2
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d0ee      	beq.n	8007eac <HAL_RCC_OscConfig+0x334>
 8007ece:	e014      	b.n	8007efa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ed0:	f7fa fec0 	bl	8002c54 <HAL_GetTick>
 8007ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ed6:	e00a      	b.n	8007eee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ed8:	f7fa febc 	bl	8002c54 <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d901      	bls.n	8007eee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e0b5      	b.n	800805a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007eee:	4b3e      	ldr	r3, [pc, #248]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1ee      	bne.n	8007ed8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d105      	bne.n	8007f0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f00:	4b39      	ldr	r3, [pc, #228]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f04:	4a38      	ldr	r2, [pc, #224]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007f06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 80a1 	beq.w	8008058 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f16:	4b34      	ldr	r3, [pc, #208]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f003 030c 	and.w	r3, r3, #12
 8007f1e:	2b08      	cmp	r3, #8
 8007f20:	d05c      	beq.n	8007fdc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d141      	bne.n	8007fae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f2a:	4b31      	ldr	r3, [pc, #196]	@ (8007ff0 <HAL_RCC_OscConfig+0x478>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f30:	f7fa fe90 	bl	8002c54 <HAL_GetTick>
 8007f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f36:	e008      	b.n	8007f4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f38:	f7fa fe8c 	bl	8002c54 <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d901      	bls.n	8007f4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e087      	b.n	800805a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f4a:	4b27      	ldr	r3, [pc, #156]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1f0      	bne.n	8007f38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	69da      	ldr	r2, [r3, #28]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f64:	019b      	lsls	r3, r3, #6
 8007f66:	431a      	orrs	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f6c:	085b      	lsrs	r3, r3, #1
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	041b      	lsls	r3, r3, #16
 8007f72:	431a      	orrs	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f78:	061b      	lsls	r3, r3, #24
 8007f7a:	491b      	ldr	r1, [pc, #108]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f80:	4b1b      	ldr	r3, [pc, #108]	@ (8007ff0 <HAL_RCC_OscConfig+0x478>)
 8007f82:	2201      	movs	r2, #1
 8007f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f86:	f7fa fe65 	bl	8002c54 <HAL_GetTick>
 8007f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f8c:	e008      	b.n	8007fa0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f8e:	f7fa fe61 	bl	8002c54 <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d901      	bls.n	8007fa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e05c      	b.n	800805a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fa0:	4b11      	ldr	r3, [pc, #68]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d0f0      	beq.n	8007f8e <HAL_RCC_OscConfig+0x416>
 8007fac:	e054      	b.n	8008058 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fae:	4b10      	ldr	r3, [pc, #64]	@ (8007ff0 <HAL_RCC_OscConfig+0x478>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fb4:	f7fa fe4e 	bl	8002c54 <HAL_GetTick>
 8007fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fba:	e008      	b.n	8007fce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fbc:	f7fa fe4a 	bl	8002c54 <HAL_GetTick>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d901      	bls.n	8007fce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e045      	b.n	800805a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fce:	4b06      	ldr	r3, [pc, #24]	@ (8007fe8 <HAL_RCC_OscConfig+0x470>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1f0      	bne.n	8007fbc <HAL_RCC_OscConfig+0x444>
 8007fda:	e03d      	b.n	8008058 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d107      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e038      	b.n	800805a <HAL_RCC_OscConfig+0x4e2>
 8007fe8:	40023800 	.word	0x40023800
 8007fec:	40007000 	.word	0x40007000
 8007ff0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8008064 <HAL_RCC_OscConfig+0x4ec>)
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d028      	beq.n	8008054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800800c:	429a      	cmp	r2, r3
 800800e:	d121      	bne.n	8008054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800801a:	429a      	cmp	r2, r3
 800801c:	d11a      	bne.n	8008054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008024:	4013      	ands	r3, r2
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800802a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800802c:	4293      	cmp	r3, r2
 800802e:	d111      	bne.n	8008054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800803a:	085b      	lsrs	r3, r3, #1
 800803c:	3b01      	subs	r3, #1
 800803e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008040:	429a      	cmp	r2, r3
 8008042:	d107      	bne.n	8008054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800804e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008050:	429a      	cmp	r2, r3
 8008052:	d001      	beq.n	8008058 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e000      	b.n	800805a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3718      	adds	r7, #24
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	40023800 	.word	0x40023800

08008068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	e0cc      	b.n	8008216 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800807c:	4b68      	ldr	r3, [pc, #416]	@ (8008220 <HAL_RCC_ClockConfig+0x1b8>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0307 	and.w	r3, r3, #7
 8008084:	683a      	ldr	r2, [r7, #0]
 8008086:	429a      	cmp	r2, r3
 8008088:	d90c      	bls.n	80080a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800808a:	4b65      	ldr	r3, [pc, #404]	@ (8008220 <HAL_RCC_ClockConfig+0x1b8>)
 800808c:	683a      	ldr	r2, [r7, #0]
 800808e:	b2d2      	uxtb	r2, r2
 8008090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008092:	4b63      	ldr	r3, [pc, #396]	@ (8008220 <HAL_RCC_ClockConfig+0x1b8>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0307 	and.w	r3, r3, #7
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	429a      	cmp	r2, r3
 800809e:	d001      	beq.n	80080a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e0b8      	b.n	8008216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d020      	beq.n	80080f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0304 	and.w	r3, r3, #4
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d005      	beq.n	80080c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80080bc:	4b59      	ldr	r3, [pc, #356]	@ (8008224 <HAL_RCC_ClockConfig+0x1bc>)
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	4a58      	ldr	r2, [pc, #352]	@ (8008224 <HAL_RCC_ClockConfig+0x1bc>)
 80080c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80080c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0308 	and.w	r3, r3, #8
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d005      	beq.n	80080e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80080d4:	4b53      	ldr	r3, [pc, #332]	@ (8008224 <HAL_RCC_ClockConfig+0x1bc>)
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	4a52      	ldr	r2, [pc, #328]	@ (8008224 <HAL_RCC_ClockConfig+0x1bc>)
 80080da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80080de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080e0:	4b50      	ldr	r3, [pc, #320]	@ (8008224 <HAL_RCC_ClockConfig+0x1bc>)
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	494d      	ldr	r1, [pc, #308]	@ (8008224 <HAL_RCC_ClockConfig+0x1bc>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d044      	beq.n	8008188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	2b01      	cmp	r3, #1
 8008104:	d107      	bne.n	8008116 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008106:	4b47      	ldr	r3, [pc, #284]	@ (8008224 <HAL_RCC_ClockConfig+0x1bc>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d119      	bne.n	8008146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e07f      	b.n	8008216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	2b02      	cmp	r3, #2
 800811c:	d003      	beq.n	8008126 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008122:	2b03      	cmp	r3, #3
 8008124:	d107      	bne.n	8008136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008126:	4b3f      	ldr	r3, [pc, #252]	@ (8008224 <HAL_RCC_ClockConfig+0x1bc>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d109      	bne.n	8008146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e06f      	b.n	8008216 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008136:	4b3b      	ldr	r3, [pc, #236]	@ (8008224 <HAL_RCC_ClockConfig+0x1bc>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 0302 	and.w	r3, r3, #2
 800813e:	2b00      	cmp	r3, #0
 8008140:	d101      	bne.n	8008146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e067      	b.n	8008216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008146:	4b37      	ldr	r3, [pc, #220]	@ (8008224 <HAL_RCC_ClockConfig+0x1bc>)
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	f023 0203 	bic.w	r2, r3, #3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	4934      	ldr	r1, [pc, #208]	@ (8008224 <HAL_RCC_ClockConfig+0x1bc>)
 8008154:	4313      	orrs	r3, r2
 8008156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008158:	f7fa fd7c 	bl	8002c54 <HAL_GetTick>
 800815c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800815e:	e00a      	b.n	8008176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008160:	f7fa fd78 	bl	8002c54 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800816e:	4293      	cmp	r3, r2
 8008170:	d901      	bls.n	8008176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e04f      	b.n	8008216 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008176:	4b2b      	ldr	r3, [pc, #172]	@ (8008224 <HAL_RCC_ClockConfig+0x1bc>)
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	f003 020c 	and.w	r2, r3, #12
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	429a      	cmp	r2, r3
 8008186:	d1eb      	bne.n	8008160 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008188:	4b25      	ldr	r3, [pc, #148]	@ (8008220 <HAL_RCC_ClockConfig+0x1b8>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 0307 	and.w	r3, r3, #7
 8008190:	683a      	ldr	r2, [r7, #0]
 8008192:	429a      	cmp	r2, r3
 8008194:	d20c      	bcs.n	80081b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008196:	4b22      	ldr	r3, [pc, #136]	@ (8008220 <HAL_RCC_ClockConfig+0x1b8>)
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	b2d2      	uxtb	r2, r2
 800819c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800819e:	4b20      	ldr	r3, [pc, #128]	@ (8008220 <HAL_RCC_ClockConfig+0x1b8>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 0307 	and.w	r3, r3, #7
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d001      	beq.n	80081b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e032      	b.n	8008216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 0304 	and.w	r3, r3, #4
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d008      	beq.n	80081ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081bc:	4b19      	ldr	r3, [pc, #100]	@ (8008224 <HAL_RCC_ClockConfig+0x1bc>)
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	4916      	ldr	r1, [pc, #88]	@ (8008224 <HAL_RCC_ClockConfig+0x1bc>)
 80081ca:	4313      	orrs	r3, r2
 80081cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0308 	and.w	r3, r3, #8
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d009      	beq.n	80081ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80081da:	4b12      	ldr	r3, [pc, #72]	@ (8008224 <HAL_RCC_ClockConfig+0x1bc>)
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	00db      	lsls	r3, r3, #3
 80081e8:	490e      	ldr	r1, [pc, #56]	@ (8008224 <HAL_RCC_ClockConfig+0x1bc>)
 80081ea:	4313      	orrs	r3, r2
 80081ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80081ee:	f000 f821 	bl	8008234 <HAL_RCC_GetSysClockFreq>
 80081f2:	4602      	mov	r2, r0
 80081f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008224 <HAL_RCC_ClockConfig+0x1bc>)
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	091b      	lsrs	r3, r3, #4
 80081fa:	f003 030f 	and.w	r3, r3, #15
 80081fe:	490a      	ldr	r1, [pc, #40]	@ (8008228 <HAL_RCC_ClockConfig+0x1c0>)
 8008200:	5ccb      	ldrb	r3, [r1, r3]
 8008202:	fa22 f303 	lsr.w	r3, r2, r3
 8008206:	4a09      	ldr	r2, [pc, #36]	@ (800822c <HAL_RCC_ClockConfig+0x1c4>)
 8008208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800820a:	4b09      	ldr	r3, [pc, #36]	@ (8008230 <HAL_RCC_ClockConfig+0x1c8>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4618      	mov	r0, r3
 8008210:	f7fa fcdc 	bl	8002bcc <HAL_InitTick>

  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	40023c00 	.word	0x40023c00
 8008224:	40023800 	.word	0x40023800
 8008228:	080128f4 	.word	0x080128f4
 800822c:	2000007c 	.word	0x2000007c
 8008230:	20000084 	.word	0x20000084

08008234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008238:	b094      	sub	sp, #80	@ 0x50
 800823a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800823c:	2300      	movs	r3, #0
 800823e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008240:	2300      	movs	r3, #0
 8008242:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008244:	2300      	movs	r3, #0
 8008246:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008248:	2300      	movs	r3, #0
 800824a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800824c:	4b79      	ldr	r3, [pc, #484]	@ (8008434 <HAL_RCC_GetSysClockFreq+0x200>)
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f003 030c 	and.w	r3, r3, #12
 8008254:	2b08      	cmp	r3, #8
 8008256:	d00d      	beq.n	8008274 <HAL_RCC_GetSysClockFreq+0x40>
 8008258:	2b08      	cmp	r3, #8
 800825a:	f200 80e1 	bhi.w	8008420 <HAL_RCC_GetSysClockFreq+0x1ec>
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <HAL_RCC_GetSysClockFreq+0x34>
 8008262:	2b04      	cmp	r3, #4
 8008264:	d003      	beq.n	800826e <HAL_RCC_GetSysClockFreq+0x3a>
 8008266:	e0db      	b.n	8008420 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008268:	4b73      	ldr	r3, [pc, #460]	@ (8008438 <HAL_RCC_GetSysClockFreq+0x204>)
 800826a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800826c:	e0db      	b.n	8008426 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800826e:	4b73      	ldr	r3, [pc, #460]	@ (800843c <HAL_RCC_GetSysClockFreq+0x208>)
 8008270:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008272:	e0d8      	b.n	8008426 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008274:	4b6f      	ldr	r3, [pc, #444]	@ (8008434 <HAL_RCC_GetSysClockFreq+0x200>)
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800827c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800827e:	4b6d      	ldr	r3, [pc, #436]	@ (8008434 <HAL_RCC_GetSysClockFreq+0x200>)
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d063      	beq.n	8008352 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800828a:	4b6a      	ldr	r3, [pc, #424]	@ (8008434 <HAL_RCC_GetSysClockFreq+0x200>)
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	099b      	lsrs	r3, r3, #6
 8008290:	2200      	movs	r2, #0
 8008292:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008294:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800829c:	633b      	str	r3, [r7, #48]	@ 0x30
 800829e:	2300      	movs	r3, #0
 80082a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80082a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80082a6:	4622      	mov	r2, r4
 80082a8:	462b      	mov	r3, r5
 80082aa:	f04f 0000 	mov.w	r0, #0
 80082ae:	f04f 0100 	mov.w	r1, #0
 80082b2:	0159      	lsls	r1, r3, #5
 80082b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80082b8:	0150      	lsls	r0, r2, #5
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	4621      	mov	r1, r4
 80082c0:	1a51      	subs	r1, r2, r1
 80082c2:	6139      	str	r1, [r7, #16]
 80082c4:	4629      	mov	r1, r5
 80082c6:	eb63 0301 	sbc.w	r3, r3, r1
 80082ca:	617b      	str	r3, [r7, #20]
 80082cc:	f04f 0200 	mov.w	r2, #0
 80082d0:	f04f 0300 	mov.w	r3, #0
 80082d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80082d8:	4659      	mov	r1, fp
 80082da:	018b      	lsls	r3, r1, #6
 80082dc:	4651      	mov	r1, sl
 80082de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80082e2:	4651      	mov	r1, sl
 80082e4:	018a      	lsls	r2, r1, #6
 80082e6:	4651      	mov	r1, sl
 80082e8:	ebb2 0801 	subs.w	r8, r2, r1
 80082ec:	4659      	mov	r1, fp
 80082ee:	eb63 0901 	sbc.w	r9, r3, r1
 80082f2:	f04f 0200 	mov.w	r2, #0
 80082f6:	f04f 0300 	mov.w	r3, #0
 80082fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008302:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008306:	4690      	mov	r8, r2
 8008308:	4699      	mov	r9, r3
 800830a:	4623      	mov	r3, r4
 800830c:	eb18 0303 	adds.w	r3, r8, r3
 8008310:	60bb      	str	r3, [r7, #8]
 8008312:	462b      	mov	r3, r5
 8008314:	eb49 0303 	adc.w	r3, r9, r3
 8008318:	60fb      	str	r3, [r7, #12]
 800831a:	f04f 0200 	mov.w	r2, #0
 800831e:	f04f 0300 	mov.w	r3, #0
 8008322:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008326:	4629      	mov	r1, r5
 8008328:	024b      	lsls	r3, r1, #9
 800832a:	4621      	mov	r1, r4
 800832c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008330:	4621      	mov	r1, r4
 8008332:	024a      	lsls	r2, r1, #9
 8008334:	4610      	mov	r0, r2
 8008336:	4619      	mov	r1, r3
 8008338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800833a:	2200      	movs	r2, #0
 800833c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800833e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008340:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008344:	f7f7 ff48 	bl	80001d8 <__aeabi_uldivmod>
 8008348:	4602      	mov	r2, r0
 800834a:	460b      	mov	r3, r1
 800834c:	4613      	mov	r3, r2
 800834e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008350:	e058      	b.n	8008404 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008352:	4b38      	ldr	r3, [pc, #224]	@ (8008434 <HAL_RCC_GetSysClockFreq+0x200>)
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	099b      	lsrs	r3, r3, #6
 8008358:	2200      	movs	r2, #0
 800835a:	4618      	mov	r0, r3
 800835c:	4611      	mov	r1, r2
 800835e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008362:	623b      	str	r3, [r7, #32]
 8008364:	2300      	movs	r3, #0
 8008366:	627b      	str	r3, [r7, #36]	@ 0x24
 8008368:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800836c:	4642      	mov	r2, r8
 800836e:	464b      	mov	r3, r9
 8008370:	f04f 0000 	mov.w	r0, #0
 8008374:	f04f 0100 	mov.w	r1, #0
 8008378:	0159      	lsls	r1, r3, #5
 800837a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800837e:	0150      	lsls	r0, r2, #5
 8008380:	4602      	mov	r2, r0
 8008382:	460b      	mov	r3, r1
 8008384:	4641      	mov	r1, r8
 8008386:	ebb2 0a01 	subs.w	sl, r2, r1
 800838a:	4649      	mov	r1, r9
 800838c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008390:	f04f 0200 	mov.w	r2, #0
 8008394:	f04f 0300 	mov.w	r3, #0
 8008398:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800839c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80083a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80083a4:	ebb2 040a 	subs.w	r4, r2, sl
 80083a8:	eb63 050b 	sbc.w	r5, r3, fp
 80083ac:	f04f 0200 	mov.w	r2, #0
 80083b0:	f04f 0300 	mov.w	r3, #0
 80083b4:	00eb      	lsls	r3, r5, #3
 80083b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083ba:	00e2      	lsls	r2, r4, #3
 80083bc:	4614      	mov	r4, r2
 80083be:	461d      	mov	r5, r3
 80083c0:	4643      	mov	r3, r8
 80083c2:	18e3      	adds	r3, r4, r3
 80083c4:	603b      	str	r3, [r7, #0]
 80083c6:	464b      	mov	r3, r9
 80083c8:	eb45 0303 	adc.w	r3, r5, r3
 80083cc:	607b      	str	r3, [r7, #4]
 80083ce:	f04f 0200 	mov.w	r2, #0
 80083d2:	f04f 0300 	mov.w	r3, #0
 80083d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80083da:	4629      	mov	r1, r5
 80083dc:	028b      	lsls	r3, r1, #10
 80083de:	4621      	mov	r1, r4
 80083e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80083e4:	4621      	mov	r1, r4
 80083e6:	028a      	lsls	r2, r1, #10
 80083e8:	4610      	mov	r0, r2
 80083ea:	4619      	mov	r1, r3
 80083ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083ee:	2200      	movs	r2, #0
 80083f0:	61bb      	str	r3, [r7, #24]
 80083f2:	61fa      	str	r2, [r7, #28]
 80083f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083f8:	f7f7 feee 	bl	80001d8 <__aeabi_uldivmod>
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	4613      	mov	r3, r2
 8008402:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008404:	4b0b      	ldr	r3, [pc, #44]	@ (8008434 <HAL_RCC_GetSysClockFreq+0x200>)
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	0c1b      	lsrs	r3, r3, #16
 800840a:	f003 0303 	and.w	r3, r3, #3
 800840e:	3301      	adds	r3, #1
 8008410:	005b      	lsls	r3, r3, #1
 8008412:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8008414:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008418:	fbb2 f3f3 	udiv	r3, r2, r3
 800841c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800841e:	e002      	b.n	8008426 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008420:	4b05      	ldr	r3, [pc, #20]	@ (8008438 <HAL_RCC_GetSysClockFreq+0x204>)
 8008422:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008428:	4618      	mov	r0, r3
 800842a:	3750      	adds	r7, #80	@ 0x50
 800842c:	46bd      	mov	sp, r7
 800842e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008432:	bf00      	nop
 8008434:	40023800 	.word	0x40023800
 8008438:	00f42400 	.word	0x00f42400
 800843c:	007a1200 	.word	0x007a1200

08008440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008440:	b480      	push	{r7}
 8008442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008444:	4b03      	ldr	r3, [pc, #12]	@ (8008454 <HAL_RCC_GetHCLKFreq+0x14>)
 8008446:	681b      	ldr	r3, [r3, #0]
}
 8008448:	4618      	mov	r0, r3
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	2000007c 	.word	0x2000007c

08008458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800845c:	f7ff fff0 	bl	8008440 <HAL_RCC_GetHCLKFreq>
 8008460:	4602      	mov	r2, r0
 8008462:	4b05      	ldr	r3, [pc, #20]	@ (8008478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	0a9b      	lsrs	r3, r3, #10
 8008468:	f003 0307 	and.w	r3, r3, #7
 800846c:	4903      	ldr	r1, [pc, #12]	@ (800847c <HAL_RCC_GetPCLK1Freq+0x24>)
 800846e:	5ccb      	ldrb	r3, [r1, r3]
 8008470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008474:	4618      	mov	r0, r3
 8008476:	bd80      	pop	{r7, pc}
 8008478:	40023800 	.word	0x40023800
 800847c:	08012904 	.word	0x08012904

08008480 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800848c:	2300      	movs	r3, #0
 800848e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0301 	and.w	r3, r3, #1
 8008498:	2b00      	cmp	r3, #0
 800849a:	d105      	bne.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d038      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80084a8:	4b68      	ldr	r3, [pc, #416]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80084aa:	2200      	movs	r2, #0
 80084ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80084ae:	f7fa fbd1 	bl	8002c54 <HAL_GetTick>
 80084b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80084b4:	e008      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80084b6:	f7fa fbcd 	bl	8002c54 <HAL_GetTick>
 80084ba:	4602      	mov	r2, r0
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d901      	bls.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e0bd      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80084c8:	4b61      	ldr	r3, [pc, #388]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1f0      	bne.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685a      	ldr	r2, [r3, #4]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	019b      	lsls	r3, r3, #6
 80084de:	431a      	orrs	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	071b      	lsls	r3, r3, #28
 80084e6:	495a      	ldr	r1, [pc, #360]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80084ee:	4b57      	ldr	r3, [pc, #348]	@ (800864c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80084f0:	2201      	movs	r2, #1
 80084f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80084f4:	f7fa fbae 	bl	8002c54 <HAL_GetTick>
 80084f8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084fa:	e008      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80084fc:	f7fa fbaa 	bl	8002c54 <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	2b02      	cmp	r3, #2
 8008508:	d901      	bls.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	e09a      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800850e:	4b50      	ldr	r3, [pc, #320]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d0f0      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 0302 	and.w	r3, r3, #2
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 8083 	beq.w	800862e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008528:	2300      	movs	r3, #0
 800852a:	60fb      	str	r3, [r7, #12]
 800852c:	4b48      	ldr	r3, [pc, #288]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800852e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008530:	4a47      	ldr	r2, [pc, #284]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008536:	6413      	str	r3, [r2, #64]	@ 0x40
 8008538:	4b45      	ldr	r3, [pc, #276]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800853a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800853c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008540:	60fb      	str	r3, [r7, #12]
 8008542:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008544:	4b43      	ldr	r3, [pc, #268]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a42      	ldr	r2, [pc, #264]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800854a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800854e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008550:	f7fa fb80 	bl	8002c54 <HAL_GetTick>
 8008554:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008556:	e008      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008558:	f7fa fb7c 	bl	8002c54 <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	2b02      	cmp	r3, #2
 8008564:	d901      	bls.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e06c      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800856a:	4b3a      	ldr	r3, [pc, #232]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008572:	2b00      	cmp	r3, #0
 8008574:	d0f0      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008576:	4b36      	ldr	r3, [pc, #216]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800857a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800857e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d02f      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	429a      	cmp	r2, r3
 8008592:	d028      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008594:	4b2e      	ldr	r3, [pc, #184]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008598:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800859c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800859e:	4b2e      	ldr	r3, [pc, #184]	@ (8008658 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80085a0:	2201      	movs	r2, #1
 80085a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80085a4:	4b2c      	ldr	r3, [pc, #176]	@ (8008658 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80085a6:	2200      	movs	r2, #0
 80085a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80085aa:	4a29      	ldr	r2, [pc, #164]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80085b0:	4b27      	ldr	r3, [pc, #156]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085b4:	f003 0301 	and.w	r3, r3, #1
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d114      	bne.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80085bc:	f7fa fb4a 	bl	8002c54 <HAL_GetTick>
 80085c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085c2:	e00a      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085c4:	f7fa fb46 	bl	8002c54 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d901      	bls.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e034      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085da:	4b1d      	ldr	r3, [pc, #116]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085de:	f003 0302 	and.w	r3, r3, #2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d0ee      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085f2:	d10d      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80085f4:	4b16      	ldr	r3, [pc, #88]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008608:	4911      	ldr	r1, [pc, #68]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800860a:	4313      	orrs	r3, r2
 800860c:	608b      	str	r3, [r1, #8]
 800860e:	e005      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8008610:	4b0f      	ldr	r3, [pc, #60]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	4a0e      	ldr	r2, [pc, #56]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008616:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800861a:	6093      	str	r3, [r2, #8]
 800861c:	4b0c      	ldr	r3, [pc, #48]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800861e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008628:	4909      	ldr	r1, [pc, #36]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800862a:	4313      	orrs	r3, r2
 800862c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0308 	and.w	r3, r3, #8
 8008636:	2b00      	cmp	r3, #0
 8008638:	d003      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	7d1a      	ldrb	r2, [r3, #20]
 800863e:	4b07      	ldr	r3, [pc, #28]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8008640:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3718      	adds	r7, #24
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	42470068 	.word	0x42470068
 8008650:	40023800 	.word	0x40023800
 8008654:	40007000 	.word	0x40007000
 8008658:	42470e40 	.word	0x42470e40
 800865c:	424711e0 	.word	0x424711e0

08008660 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2203      	movs	r2, #3
 800866c:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800866e:	4b1c      	ldr	r3, [pc, #112]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008674:	099b      	lsrs	r3, r3, #6
 8008676:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800867e:	4b18      	ldr	r3, [pc, #96]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008680:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008684:	0f1b      	lsrs	r3, r3, #28
 8008686:	f003 0207 	and.w	r2, r3, #7
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 800868e:	4b14      	ldr	r3, [pc, #80]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008694:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800869c:	4b10      	ldr	r3, [pc, #64]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80086a4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80086a6:	4b0e      	ldr	r3, [pc, #56]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80086a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086aa:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	431a      	orrs	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 80086b6:	4b0a      	ldr	r3, [pc, #40]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80086b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d103      	bne.n	80086cc <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80086ca:	e002      	b.n	80086d2 <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	751a      	strb	r2, [r3, #20]
}
 80086d2:	bf00      	nop
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	40023800 	.word	0x40023800

080086e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b087      	sub	sp, #28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80086f0:	2300      	movs	r3, #0
 80086f2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80086f4:	2300      	movs	r3, #0
 80086f6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80086f8:	2300      	movs	r3, #0
 80086fa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d140      	bne.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008702:	4b24      	ldr	r3, [pc, #144]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800870a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d005      	beq.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d131      	bne.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008718:	4b1f      	ldr	r3, [pc, #124]	@ (8008798 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800871a:	617b      	str	r3, [r7, #20]
          break;
 800871c:	e031      	b.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800871e:	4b1d      	ldr	r3, [pc, #116]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008726:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800872a:	d109      	bne.n	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800872c:	4b19      	ldr	r3, [pc, #100]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800872e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008732:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008736:	4a19      	ldr	r2, [pc, #100]	@ (800879c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008738:	fbb2 f3f3 	udiv	r3, r2, r3
 800873c:	613b      	str	r3, [r7, #16]
 800873e:	e008      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008740:	4b14      	ldr	r3, [pc, #80]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008742:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008746:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800874a:	4a15      	ldr	r2, [pc, #84]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800874c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008750:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008752:	4b10      	ldr	r3, [pc, #64]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008754:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008758:	099b      	lsrs	r3, r3, #6
 800875a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	fb02 f303 	mul.w	r3, r2, r3
 8008764:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008766:	4b0b      	ldr	r3, [pc, #44]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008768:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800876c:	0f1b      	lsrs	r3, r3, #28
 800876e:	f003 0307 	and.w	r3, r3, #7
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	fbb2 f3f3 	udiv	r3, r2, r3
 8008778:	617b      	str	r3, [r7, #20]
          break;
 800877a:	e002      	b.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	617b      	str	r3, [r7, #20]
          break;
 8008780:	bf00      	nop
        }
      }
      break;
 8008782:	bf00      	nop
    }
  }
  return frequency;
 8008784:	697b      	ldr	r3, [r7, #20]
}
 8008786:	4618      	mov	r0, r3
 8008788:	371c      	adds	r7, #28
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	40023800 	.word	0x40023800
 8008798:	00bb8000 	.word	0x00bb8000
 800879c:	007a1200 	.word	0x007a1200
 80087a0:	00f42400 	.word	0x00f42400

080087a4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	4613      	mov	r3, r2
 80087b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	2b20      	cmp	r3, #32
 80087bc:	d11d      	bne.n	80087fa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <HAL_UART_Receive_IT+0x26>
 80087c4:	88fb      	ldrh	r3, [r7, #6]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d101      	bne.n	80087ce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e016      	b.n	80087fc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d101      	bne.n	80087dc <HAL_UART_Receive_IT+0x38>
 80087d8:	2302      	movs	r3, #2
 80087da:	e00f      	b.n	80087fc <HAL_UART_Receive_IT+0x58>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80087ea:	88fb      	ldrh	r3, [r7, #6]
 80087ec:	461a      	mov	r2, r3
 80087ee:	68b9      	ldr	r1, [r7, #8]
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f000 fab5 	bl	8008d60 <UART_Start_Receive_IT>
 80087f6:	4603      	mov	r3, r0
 80087f8:	e000      	b.n	80087fc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80087fa:	2302      	movs	r3, #2
  }
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b0ba      	sub	sp, #232	@ 0xe8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800882a:	2300      	movs	r3, #0
 800882c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008830:	2300      	movs	r3, #0
 8008832:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800883a:	f003 030f 	and.w	r3, r3, #15
 800883e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008842:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10f      	bne.n	800886a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800884a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800884e:	f003 0320 	and.w	r3, r3, #32
 8008852:	2b00      	cmp	r3, #0
 8008854:	d009      	beq.n	800886a <HAL_UART_IRQHandler+0x66>
 8008856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800885a:	f003 0320 	and.w	r3, r3, #32
 800885e:	2b00      	cmp	r3, #0
 8008860:	d003      	beq.n	800886a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fb99 	bl	8008f9a <UART_Receive_IT>
      return;
 8008868:	e256      	b.n	8008d18 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800886a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800886e:	2b00      	cmp	r3, #0
 8008870:	f000 80de 	beq.w	8008a30 <HAL_UART_IRQHandler+0x22c>
 8008874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008878:	f003 0301 	and.w	r3, r3, #1
 800887c:	2b00      	cmp	r3, #0
 800887e:	d106      	bne.n	800888e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008884:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 80d1 	beq.w	8008a30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800888e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008892:	f003 0301 	and.w	r3, r3, #1
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00b      	beq.n	80088b2 <HAL_UART_IRQHandler+0xae>
 800889a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800889e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d005      	beq.n	80088b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088aa:	f043 0201 	orr.w	r2, r3, #1
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088b6:	f003 0304 	and.w	r3, r3, #4
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00b      	beq.n	80088d6 <HAL_UART_IRQHandler+0xd2>
 80088be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088c2:	f003 0301 	and.w	r3, r3, #1
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d005      	beq.n	80088d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ce:	f043 0202 	orr.w	r2, r3, #2
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088da:	f003 0302 	and.w	r3, r3, #2
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00b      	beq.n	80088fa <HAL_UART_IRQHandler+0xf6>
 80088e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088e6:	f003 0301 	and.w	r3, r3, #1
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d005      	beq.n	80088fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f2:	f043 0204 	orr.w	r2, r3, #4
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80088fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088fe:	f003 0308 	and.w	r3, r3, #8
 8008902:	2b00      	cmp	r3, #0
 8008904:	d011      	beq.n	800892a <HAL_UART_IRQHandler+0x126>
 8008906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800890a:	f003 0320 	and.w	r3, r3, #32
 800890e:	2b00      	cmp	r3, #0
 8008910:	d105      	bne.n	800891e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	2b00      	cmp	r3, #0
 800891c:	d005      	beq.n	800892a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008922:	f043 0208 	orr.w	r2, r3, #8
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800892e:	2b00      	cmp	r3, #0
 8008930:	f000 81ed 	beq.w	8008d0e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008938:	f003 0320 	and.w	r3, r3, #32
 800893c:	2b00      	cmp	r3, #0
 800893e:	d008      	beq.n	8008952 <HAL_UART_IRQHandler+0x14e>
 8008940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008944:	f003 0320 	and.w	r3, r3, #32
 8008948:	2b00      	cmp	r3, #0
 800894a:	d002      	beq.n	8008952 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fb24 	bl	8008f9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	695b      	ldr	r3, [r3, #20]
 8008958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800895c:	2b40      	cmp	r3, #64	@ 0x40
 800895e:	bf0c      	ite	eq
 8008960:	2301      	moveq	r3, #1
 8008962:	2300      	movne	r3, #0
 8008964:	b2db      	uxtb	r3, r3
 8008966:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800896e:	f003 0308 	and.w	r3, r3, #8
 8008972:	2b00      	cmp	r3, #0
 8008974:	d103      	bne.n	800897e <HAL_UART_IRQHandler+0x17a>
 8008976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800897a:	2b00      	cmp	r3, #0
 800897c:	d04f      	beq.n	8008a1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fa2c 	bl	8008ddc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800898e:	2b40      	cmp	r3, #64	@ 0x40
 8008990:	d141      	bne.n	8008a16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	3314      	adds	r3, #20
 8008998:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80089a0:	e853 3f00 	ldrex	r3, [r3]
 80089a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80089a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	3314      	adds	r3, #20
 80089ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80089be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80089c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80089ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80089ce:	e841 2300 	strex	r3, r2, [r1]
 80089d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80089d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1d9      	bne.n	8008992 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d013      	beq.n	8008a0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ea:	4a7d      	ldr	r2, [pc, #500]	@ (8008be0 <HAL_UART_IRQHandler+0x3dc>)
 80089ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fa fc44 	bl	8003280 <HAL_DMA_Abort_IT>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d016      	beq.n	8008a2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008a08:	4610      	mov	r0, r2
 8008a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a0c:	e00e      	b.n	8008a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f990 	bl	8008d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a14:	e00a      	b.n	8008a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f98c 	bl	8008d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a1c:	e006      	b.n	8008a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f988 	bl	8008d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8008a2a:	e170      	b.n	8008d0e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a2c:	bf00      	nop
    return;
 8008a2e:	e16e      	b.n	8008d0e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	f040 814a 	bne.w	8008cce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a3e:	f003 0310 	and.w	r3, r3, #16
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 8143 	beq.w	8008cce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a4c:	f003 0310 	and.w	r3, r3, #16
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f000 813c 	beq.w	8008cce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a56:	2300      	movs	r3, #0
 8008a58:	60bb      	str	r3, [r7, #8]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	60bb      	str	r3, [r7, #8]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	60bb      	str	r3, [r7, #8]
 8008a6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a76:	2b40      	cmp	r3, #64	@ 0x40
 8008a78:	f040 80b4 	bne.w	8008be4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 8140 	beq.w	8008d12 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	f080 8139 	bcs.w	8008d12 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008aa6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ab2:	f000 8088 	beq.w	8008bc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	330c      	adds	r3, #12
 8008abc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ac4:	e853 3f00 	ldrex	r3, [r3]
 8008ac8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	330c      	adds	r3, #12
 8008ade:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008ae2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008ae6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008aee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008af2:	e841 2300 	strex	r3, r2, [r1]
 8008af6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1d9      	bne.n	8008ab6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3314      	adds	r3, #20
 8008b08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b0c:	e853 3f00 	ldrex	r3, [r3]
 8008b10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008b12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b14:	f023 0301 	bic.w	r3, r3, #1
 8008b18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3314      	adds	r3, #20
 8008b22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008b26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008b2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008b2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008b32:	e841 2300 	strex	r3, r2, [r1]
 8008b36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008b38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1e1      	bne.n	8008b02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3314      	adds	r3, #20
 8008b44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b48:	e853 3f00 	ldrex	r3, [r3]
 8008b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008b4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	3314      	adds	r3, #20
 8008b5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008b62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008b64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b6a:	e841 2300 	strex	r3, r2, [r1]
 8008b6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008b70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1e3      	bne.n	8008b3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2220      	movs	r2, #32
 8008b7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	330c      	adds	r3, #12
 8008b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b8e:	e853 3f00 	ldrex	r3, [r3]
 8008b92:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b96:	f023 0310 	bic.w	r3, r3, #16
 8008b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	330c      	adds	r3, #12
 8008ba4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008ba8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008baa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008bae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008bb0:	e841 2300 	strex	r3, r2, [r1]
 8008bb4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1e3      	bne.n	8008b84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7fa faed 	bl	80031a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f8b6 	bl	8008d48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008bdc:	e099      	b.n	8008d12 <HAL_UART_IRQHandler+0x50e>
 8008bde:	bf00      	nop
 8008be0:	08008ea3 	.word	0x08008ea3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 808b 	beq.w	8008d16 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f000 8086 	beq.w	8008d16 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	330c      	adds	r3, #12
 8008c10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c14:	e853 3f00 	ldrex	r3, [r3]
 8008c18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	330c      	adds	r3, #12
 8008c2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008c2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008c30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c36:	e841 2300 	strex	r3, r2, [r1]
 8008c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1e3      	bne.n	8008c0a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	3314      	adds	r3, #20
 8008c48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4c:	e853 3f00 	ldrex	r3, [r3]
 8008c50:	623b      	str	r3, [r7, #32]
   return(result);
 8008c52:	6a3b      	ldr	r3, [r7, #32]
 8008c54:	f023 0301 	bic.w	r3, r3, #1
 8008c58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3314      	adds	r3, #20
 8008c62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008c66:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c6e:	e841 2300 	strex	r3, r2, [r1]
 8008c72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1e3      	bne.n	8008c42 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2220      	movs	r2, #32
 8008c7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	330c      	adds	r3, #12
 8008c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	e853 3f00 	ldrex	r3, [r3]
 8008c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f023 0310 	bic.w	r3, r3, #16
 8008c9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	330c      	adds	r3, #12
 8008ca8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008cac:	61fa      	str	r2, [r7, #28]
 8008cae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb0:	69b9      	ldr	r1, [r7, #24]
 8008cb2:	69fa      	ldr	r2, [r7, #28]
 8008cb4:	e841 2300 	strex	r3, r2, [r1]
 8008cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1e3      	bne.n	8008c88 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008cc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f83e 	bl	8008d48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ccc:	e023      	b.n	8008d16 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d009      	beq.n	8008cee <HAL_UART_IRQHandler+0x4ea>
 8008cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d003      	beq.n	8008cee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f8ef 	bl	8008eca <UART_Transmit_IT>
    return;
 8008cec:	e014      	b.n	8008d18 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00e      	beq.n	8008d18 <HAL_UART_IRQHandler+0x514>
 8008cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d008      	beq.n	8008d18 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f92f 	bl	8008f6a <UART_EndTransmit_IT>
    return;
 8008d0c:	e004      	b.n	8008d18 <HAL_UART_IRQHandler+0x514>
    return;
 8008d0e:	bf00      	nop
 8008d10:	e002      	b.n	8008d18 <HAL_UART_IRQHandler+0x514>
      return;
 8008d12:	bf00      	nop
 8008d14:	e000      	b.n	8008d18 <HAL_UART_IRQHandler+0x514>
      return;
 8008d16:	bf00      	nop
  }
}
 8008d18:	37e8      	adds	r7, #232	@ 0xe8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop

08008d20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d54:	bf00      	nop
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	88fa      	ldrh	r2, [r7, #6]
 8008d78:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	88fa      	ldrh	r2, [r7, #6]
 8008d7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2222      	movs	r2, #34	@ 0x22
 8008d8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d007      	beq.n	8008dae <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68da      	ldr	r2, [r3, #12]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008dac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	695a      	ldr	r2, [r3, #20]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f042 0201 	orr.w	r2, r2, #1
 8008dbc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68da      	ldr	r2, [r3, #12]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f042 0220 	orr.w	r2, r2, #32
 8008dcc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3714      	adds	r7, #20
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b095      	sub	sp, #84	@ 0x54
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	330c      	adds	r3, #12
 8008dea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	330c      	adds	r3, #12
 8008e02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008e04:	643a      	str	r2, [r7, #64]	@ 0x40
 8008e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e5      	bne.n	8008de4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3314      	adds	r3, #20
 8008e1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e20:	6a3b      	ldr	r3, [r7, #32]
 8008e22:	e853 3f00 	ldrex	r3, [r3]
 8008e26:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	f023 0301 	bic.w	r3, r3, #1
 8008e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3314      	adds	r3, #20
 8008e36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e40:	e841 2300 	strex	r3, r2, [r1]
 8008e44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1e5      	bne.n	8008e18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d119      	bne.n	8008e88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	330c      	adds	r3, #12
 8008e5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	e853 3f00 	ldrex	r3, [r3]
 8008e62:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	f023 0310 	bic.w	r3, r3, #16
 8008e6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	330c      	adds	r3, #12
 8008e72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e74:	61ba      	str	r2, [r7, #24]
 8008e76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e78:	6979      	ldr	r1, [r7, #20]
 8008e7a:	69ba      	ldr	r2, [r7, #24]
 8008e7c:	e841 2300 	strex	r3, r2, [r1]
 8008e80:	613b      	str	r3, [r7, #16]
   return(result);
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1e5      	bne.n	8008e54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2220      	movs	r2, #32
 8008e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008e96:	bf00      	nop
 8008e98:	3754      	adds	r7, #84	@ 0x54
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b084      	sub	sp, #16
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f7ff ff39 	bl	8008d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ec2:	bf00      	nop
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b085      	sub	sp, #20
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b21      	cmp	r3, #33	@ 0x21
 8008edc:	d13e      	bne.n	8008f5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ee6:	d114      	bne.n	8008f12 <UART_Transmit_IT+0x48>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d110      	bne.n	8008f12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
 8008ef4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	881b      	ldrh	r3, [r3, #0]
 8008efa:	461a      	mov	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a1b      	ldr	r3, [r3, #32]
 8008f0a:	1c9a      	adds	r2, r3, #2
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	621a      	str	r2, [r3, #32]
 8008f10:	e008      	b.n	8008f24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	1c59      	adds	r1, r3, #1
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	6211      	str	r1, [r2, #32]
 8008f1c:	781a      	ldrb	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	4619      	mov	r1, r3
 8008f32:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10f      	bne.n	8008f58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68da      	ldr	r2, [r3, #12]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008f46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68da      	ldr	r2, [r3, #12]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	e000      	b.n	8008f5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f5c:	2302      	movs	r3, #2
  }
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b082      	sub	sp, #8
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68da      	ldr	r2, [r3, #12]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2220      	movs	r2, #32
 8008f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7ff fec8 	bl	8008d20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b08c      	sub	sp, #48	@ 0x30
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b22      	cmp	r3, #34	@ 0x22
 8008fac:	f040 80ab 	bne.w	8009106 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fb8:	d117      	bne.n	8008fea <UART_Receive_IT+0x50>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d113      	bne.n	8008fea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fca:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fdc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe2:	1c9a      	adds	r2, r3, #2
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	629a      	str	r2, [r3, #40]	@ 0x28
 8008fe8:	e026      	b.n	8009038 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ffc:	d007      	beq.n	800900e <UART_Receive_IT+0x74>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10a      	bne.n	800901c <UART_Receive_IT+0x82>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d106      	bne.n	800901c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	b2da      	uxtb	r2, r3
 8009016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009018:	701a      	strb	r2, [r3, #0]
 800901a:	e008      	b.n	800902e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	b2db      	uxtb	r3, r3
 8009024:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009028:	b2da      	uxtb	r2, r3
 800902a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800902c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009032:	1c5a      	adds	r2, r3, #1
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800903c:	b29b      	uxth	r3, r3
 800903e:	3b01      	subs	r3, #1
 8009040:	b29b      	uxth	r3, r3
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	4619      	mov	r1, r3
 8009046:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009048:	2b00      	cmp	r3, #0
 800904a:	d15a      	bne.n	8009102 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68da      	ldr	r2, [r3, #12]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f022 0220 	bic.w	r2, r2, #32
 800905a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68da      	ldr	r2, [r3, #12]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800906a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	695a      	ldr	r2, [r3, #20]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f022 0201 	bic.w	r2, r2, #1
 800907a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2220      	movs	r2, #32
 8009080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009088:	2b01      	cmp	r3, #1
 800908a:	d135      	bne.n	80090f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	330c      	adds	r3, #12
 8009098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	e853 3f00 	ldrex	r3, [r3]
 80090a0:	613b      	str	r3, [r7, #16]
   return(result);
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	f023 0310 	bic.w	r3, r3, #16
 80090a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	330c      	adds	r3, #12
 80090b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090b2:	623a      	str	r2, [r7, #32]
 80090b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b6:	69f9      	ldr	r1, [r7, #28]
 80090b8:	6a3a      	ldr	r2, [r7, #32]
 80090ba:	e841 2300 	strex	r3, r2, [r1]
 80090be:	61bb      	str	r3, [r7, #24]
   return(result);
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1e5      	bne.n	8009092 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0310 	and.w	r3, r3, #16
 80090d0:	2b10      	cmp	r3, #16
 80090d2:	d10a      	bne.n	80090ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090d4:	2300      	movs	r3, #0
 80090d6:	60fb      	str	r3, [r7, #12]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	60fb      	str	r3, [r7, #12]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	60fb      	str	r3, [r7, #12]
 80090e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80090ee:	4619      	mov	r1, r3
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7ff fe29 	bl	8008d48 <HAL_UARTEx_RxEventCallback>
 80090f6:	e002      	b.n	80090fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f7f8 ff27 	bl	8001f4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	e002      	b.n	8009108 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	e000      	b.n	8009108 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009106:	2302      	movs	r3, #2
  }
}
 8009108:	4618      	mov	r0, r3
 800910a:	3730      	adds	r7, #48	@ 0x30
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009110:	b084      	sub	sp, #16
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
 800911a:	f107 001c 	add.w	r0, r7, #28
 800911e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009124:	2b01      	cmp	r3, #1
 8009126:	d122      	bne.n	800916e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800912c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800913c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009152:	2b01      	cmp	r3, #1
 8009154:	d105      	bne.n	8009162 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f9c0 	bl	80094e8 <USB_CoreReset>
 8009168:	4603      	mov	r3, r0
 800916a:	73fb      	strb	r3, [r7, #15]
 800916c:	e01a      	b.n	80091a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f9b4 	bl	80094e8 <USB_CoreReset>
 8009180:	4603      	mov	r3, r0
 8009182:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009186:	2b00      	cmp	r3, #0
 8009188:	d106      	bne.n	8009198 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800918e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	639a      	str	r2, [r3, #56]	@ 0x38
 8009196:	e005      	b.n	80091a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800919c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80091a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d10b      	bne.n	80091c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	f043 0206 	orr.w	r2, r3, #6
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f043 0220 	orr.w	r2, r3, #32
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80091c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3710      	adds	r7, #16
 80091c8:	46bd      	mov	sp, r7
 80091ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091ce:	b004      	add	sp, #16
 80091d0:	4770      	bx	lr

080091d2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091d2:	b480      	push	{r7}
 80091d4:	b083      	sub	sp, #12
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	f043 0201 	orr.w	r2, r3, #1
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	f023 0201 	bic.w	r2, r3, #1
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	370c      	adds	r7, #12
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b084      	sub	sp, #16
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
 800921e:	460b      	mov	r3, r1
 8009220:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009222:	2300      	movs	r3, #0
 8009224:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009232:	78fb      	ldrb	r3, [r7, #3]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d115      	bne.n	8009264 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009244:	2001      	movs	r0, #1
 8009246:	f7f9 fd11 	bl	8002c6c <HAL_Delay>
      ms++;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	3301      	adds	r3, #1
 800924e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f93a 	bl	80094ca <USB_GetMode>
 8009256:	4603      	mov	r3, r0
 8009258:	2b01      	cmp	r3, #1
 800925a:	d01e      	beq.n	800929a <USB_SetCurrentMode+0x84>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2b31      	cmp	r3, #49	@ 0x31
 8009260:	d9f0      	bls.n	8009244 <USB_SetCurrentMode+0x2e>
 8009262:	e01a      	b.n	800929a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009264:	78fb      	ldrb	r3, [r7, #3]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d115      	bne.n	8009296 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009276:	2001      	movs	r0, #1
 8009278:	f7f9 fcf8 	bl	8002c6c <HAL_Delay>
      ms++;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	3301      	adds	r3, #1
 8009280:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f921 	bl	80094ca <USB_GetMode>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d005      	beq.n	800929a <USB_SetCurrentMode+0x84>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2b31      	cmp	r3, #49	@ 0x31
 8009292:	d9f0      	bls.n	8009276 <USB_SetCurrentMode+0x60>
 8009294:	e001      	b.n	800929a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	e005      	b.n	80092a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2b32      	cmp	r3, #50	@ 0x32
 800929e:	d101      	bne.n	80092a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e000      	b.n	80092a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
	...

080092b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b085      	sub	sp, #20
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80092ba:	2300      	movs	r3, #0
 80092bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	3301      	adds	r3, #1
 80092c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	4a13      	ldr	r2, [pc, #76]	@ (8009314 <USB_FlushTxFifo+0x64>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d901      	bls.n	80092d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e01b      	b.n	8009308 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	daf2      	bge.n	80092be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80092d8:	2300      	movs	r3, #0
 80092da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	019b      	lsls	r3, r3, #6
 80092e0:	f043 0220 	orr.w	r2, r3, #32
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	3301      	adds	r3, #1
 80092ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	4a08      	ldr	r2, [pc, #32]	@ (8009314 <USB_FlushTxFifo+0x64>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d901      	bls.n	80092fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e006      	b.n	8009308 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	f003 0320 	and.w	r3, r3, #32
 8009302:	2b20      	cmp	r3, #32
 8009304:	d0f0      	beq.n	80092e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3714      	adds	r7, #20
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr
 8009314:	00030d40 	.word	0x00030d40

08009318 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009320:	2300      	movs	r3, #0
 8009322:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	3301      	adds	r3, #1
 8009328:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	4a11      	ldr	r2, [pc, #68]	@ (8009374 <USB_FlushRxFifo+0x5c>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d901      	bls.n	8009336 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009332:	2303      	movs	r3, #3
 8009334:	e018      	b.n	8009368 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	daf2      	bge.n	8009324 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800933e:	2300      	movs	r3, #0
 8009340:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2210      	movs	r2, #16
 8009346:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	3301      	adds	r3, #1
 800934c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	4a08      	ldr	r2, [pc, #32]	@ (8009374 <USB_FlushRxFifo+0x5c>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d901      	bls.n	800935a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e006      	b.n	8009368 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	f003 0310 	and.w	r3, r3, #16
 8009362:	2b10      	cmp	r3, #16
 8009364:	d0f0      	beq.n	8009348 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3714      	adds	r7, #20
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr
 8009374:	00030d40 	.word	0x00030d40

08009378 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009378:	b480      	push	{r7}
 800937a:	b089      	sub	sp, #36	@ 0x24
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	4611      	mov	r1, r2
 8009384:	461a      	mov	r2, r3
 8009386:	460b      	mov	r3, r1
 8009388:	71fb      	strb	r3, [r7, #7]
 800938a:	4613      	mov	r3, r2
 800938c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009396:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800939a:	2b00      	cmp	r3, #0
 800939c:	d123      	bne.n	80093e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800939e:	88bb      	ldrh	r3, [r7, #4]
 80093a0:	3303      	adds	r3, #3
 80093a2:	089b      	lsrs	r3, r3, #2
 80093a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80093a6:	2300      	movs	r3, #0
 80093a8:	61bb      	str	r3, [r7, #24]
 80093aa:	e018      	b.n	80093de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80093ac:	79fb      	ldrb	r3, [r7, #7]
 80093ae:	031a      	lsls	r2, r3, #12
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	4413      	add	r3, r2
 80093b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093b8:	461a      	mov	r2, r3
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	3301      	adds	r3, #1
 80093c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	3301      	adds	r3, #1
 80093ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	3301      	adds	r3, #1
 80093d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	3301      	adds	r3, #1
 80093d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	3301      	adds	r3, #1
 80093dc:	61bb      	str	r3, [r7, #24]
 80093de:	69ba      	ldr	r2, [r7, #24]
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d3e2      	bcc.n	80093ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3724      	adds	r7, #36	@ 0x24
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b08b      	sub	sp, #44	@ 0x2c
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	4613      	mov	r3, r2
 8009400:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800940a:	88fb      	ldrh	r3, [r7, #6]
 800940c:	089b      	lsrs	r3, r3, #2
 800940e:	b29b      	uxth	r3, r3
 8009410:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009412:	88fb      	ldrh	r3, [r7, #6]
 8009414:	f003 0303 	and.w	r3, r3, #3
 8009418:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800941a:	2300      	movs	r3, #0
 800941c:	623b      	str	r3, [r7, #32]
 800941e:	e014      	b.n	800944a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800942a:	601a      	str	r2, [r3, #0]
    pDest++;
 800942c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800942e:	3301      	adds	r3, #1
 8009430:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009434:	3301      	adds	r3, #1
 8009436:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943a:	3301      	adds	r3, #1
 800943c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800943e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009440:	3301      	adds	r3, #1
 8009442:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009444:	6a3b      	ldr	r3, [r7, #32]
 8009446:	3301      	adds	r3, #1
 8009448:	623b      	str	r3, [r7, #32]
 800944a:	6a3a      	ldr	r2, [r7, #32]
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	429a      	cmp	r2, r3
 8009450:	d3e6      	bcc.n	8009420 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009452:	8bfb      	ldrh	r3, [r7, #30]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d01e      	beq.n	8009496 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009458:	2300      	movs	r3, #0
 800945a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009462:	461a      	mov	r2, r3
 8009464:	f107 0310 	add.w	r3, r7, #16
 8009468:	6812      	ldr	r2, [r2, #0]
 800946a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	6a3b      	ldr	r3, [r7, #32]
 8009470:	b2db      	uxtb	r3, r3
 8009472:	00db      	lsls	r3, r3, #3
 8009474:	fa22 f303 	lsr.w	r3, r2, r3
 8009478:	b2da      	uxtb	r2, r3
 800947a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947c:	701a      	strb	r2, [r3, #0]
      i++;
 800947e:	6a3b      	ldr	r3, [r7, #32]
 8009480:	3301      	adds	r3, #1
 8009482:	623b      	str	r3, [r7, #32]
      pDest++;
 8009484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009486:	3301      	adds	r3, #1
 8009488:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800948a:	8bfb      	ldrh	r3, [r7, #30]
 800948c:	3b01      	subs	r3, #1
 800948e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009490:	8bfb      	ldrh	r3, [r7, #30]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1ea      	bne.n	800946c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009498:	4618      	mov	r0, r3
 800949a:	372c      	adds	r7, #44	@ 0x2c
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	699b      	ldr	r3, [r3, #24]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	4013      	ands	r3, r2
 80094ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80094bc:	68fb      	ldr	r3, [r7, #12]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3714      	adds	r7, #20
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr

080094ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80094ca:	b480      	push	{r7}
 80094cc:	b083      	sub	sp, #12
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	695b      	ldr	r3, [r3, #20]
 80094d6:	f003 0301 	and.w	r3, r3, #1
}
 80094da:	4618      	mov	r0, r3
 80094dc:	370c      	adds	r7, #12
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
	...

080094e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094f0:	2300      	movs	r3, #0
 80094f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	3301      	adds	r3, #1
 80094f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	4a13      	ldr	r2, [pc, #76]	@ (800954c <USB_CoreReset+0x64>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d901      	bls.n	8009506 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009502:	2303      	movs	r3, #3
 8009504:	e01b      	b.n	800953e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	daf2      	bge.n	80094f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800950e:	2300      	movs	r3, #0
 8009510:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	f043 0201 	orr.w	r2, r3, #1
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	3301      	adds	r3, #1
 8009522:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	4a09      	ldr	r2, [pc, #36]	@ (800954c <USB_CoreReset+0x64>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d901      	bls.n	8009530 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800952c:	2303      	movs	r3, #3
 800952e:	e006      	b.n	800953e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	f003 0301 	and.w	r3, r3, #1
 8009538:	2b01      	cmp	r3, #1
 800953a:	d0f0      	beq.n	800951e <USB_CoreReset+0x36>

  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	00030d40 	.word	0x00030d40

08009550 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009550:	b084      	sub	sp, #16
 8009552:	b580      	push	{r7, lr}
 8009554:	b086      	sub	sp, #24
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800955e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009570:	461a      	mov	r2, r3
 8009572:	2300      	movs	r3, #0
 8009574:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800957a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009586:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009592:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800959e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d018      	beq.n	80095d8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80095a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d10a      	bne.n	80095c2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80095ba:	f043 0304 	orr.w	r3, r3, #4
 80095be:	6013      	str	r3, [r2, #0]
 80095c0:	e014      	b.n	80095ec <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80095d0:	f023 0304 	bic.w	r3, r3, #4
 80095d4:	6013      	str	r3, [r2, #0]
 80095d6:	e009      	b.n	80095ec <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80095e6:	f023 0304 	bic.w	r3, r3, #4
 80095ea:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80095ec:	2110      	movs	r1, #16
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7ff fe5e 	bl	80092b0 <USB_FlushTxFifo>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d001      	beq.n	80095fe <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7ff fe8a 	bl	8009318 <USB_FlushRxFifo>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800960e:	2300      	movs	r3, #0
 8009610:	613b      	str	r3, [r7, #16]
 8009612:	e015      	b.n	8009640 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	015a      	lsls	r2, r3, #5
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	4413      	add	r3, r2
 800961c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009620:	461a      	mov	r2, r3
 8009622:	f04f 33ff 	mov.w	r3, #4294967295
 8009626:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	015a      	lsls	r2, r3, #5
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	4413      	add	r3, r2
 8009630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009634:	461a      	mov	r2, r3
 8009636:	2300      	movs	r3, #0
 8009638:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	3301      	adds	r3, #1
 800963e:	613b      	str	r3, [r7, #16]
 8009640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	429a      	cmp	r2, r3
 8009646:	d3e5      	bcc.n	8009614 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f04f 32ff 	mov.w	r2, #4294967295
 8009654:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800965a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00b      	beq.n	800967a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009668:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a13      	ldr	r2, [pc, #76]	@ (80096bc <USB_HostInit+0x16c>)
 800966e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a13      	ldr	r2, [pc, #76]	@ (80096c0 <USB_HostInit+0x170>)
 8009674:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8009678:	e009      	b.n	800968e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2280      	movs	r2, #128	@ 0x80
 800967e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a10      	ldr	r2, [pc, #64]	@ (80096c4 <USB_HostInit+0x174>)
 8009684:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a0f      	ldr	r2, [pc, #60]	@ (80096c8 <USB_HostInit+0x178>)
 800968a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800968e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009690:	2b00      	cmp	r3, #0
 8009692:	d105      	bne.n	80096a0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	f043 0210 	orr.w	r2, r3, #16
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	699a      	ldr	r2, [r3, #24]
 80096a4:	4b09      	ldr	r3, [pc, #36]	@ (80096cc <USB_HostInit+0x17c>)
 80096a6:	4313      	orrs	r3, r2
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80096ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3718      	adds	r7, #24
 80096b2:	46bd      	mov	sp, r7
 80096b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096b8:	b004      	add	sp, #16
 80096ba:	4770      	bx	lr
 80096bc:	01000200 	.word	0x01000200
 80096c0:	00e00300 	.word	0x00e00300
 80096c4:	00600080 	.word	0x00600080
 80096c8:	004000e0 	.word	0x004000e0
 80096cc:	a3200008 	.word	0xa3200008

080096d0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	460b      	mov	r3, r1
 80096da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80096ee:	f023 0303 	bic.w	r3, r3, #3
 80096f2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	78fb      	ldrb	r3, [r7, #3]
 80096fe:	f003 0303 	and.w	r3, r3, #3
 8009702:	68f9      	ldr	r1, [r7, #12]
 8009704:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009708:	4313      	orrs	r3, r2
 800970a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800970c:	78fb      	ldrb	r3, [r7, #3]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d107      	bne.n	8009722 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009718:	461a      	mov	r2, r3
 800971a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800971e:	6053      	str	r3, [r2, #4]
 8009720:	e009      	b.n	8009736 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009722:	78fb      	ldrb	r3, [r7, #3]
 8009724:	2b02      	cmp	r3, #2
 8009726:	d106      	bne.n	8009736 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800972e:	461a      	mov	r2, r3
 8009730:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009734:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3714      	adds	r7, #20
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009750:	2300      	movs	r3, #0
 8009752:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009764:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800976e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009772:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009774:	2064      	movs	r0, #100	@ 0x64
 8009776:	f7f9 fa79 	bl	8002c6c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009782:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009786:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009788:	200a      	movs	r0, #10
 800978a:	f7f9 fa6f 	bl	8002c6c <HAL_Delay>

  return HAL_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	460b      	mov	r3, r1
 80097a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80097a8:	2300      	movs	r3, #0
 80097aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80097bc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d109      	bne.n	80097dc <USB_DriveVbus+0x44>
 80097c8:	78fb      	ldrb	r3, [r7, #3]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d106      	bne.n	80097dc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80097d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80097da:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80097e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097e6:	d109      	bne.n	80097fc <USB_DriveVbus+0x64>
 80097e8:	78fb      	ldrb	r3, [r7, #3]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d106      	bne.n	80097fc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80097f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097fa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800980a:	b480      	push	{r7}
 800980c:	b085      	sub	sp, #20
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009816:	2300      	movs	r3, #0
 8009818:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	0c5b      	lsrs	r3, r3, #17
 8009828:	f003 0303 	and.w	r3, r3, #3
}
 800982c:	4618      	mov	r0, r3
 800982e:	3714      	adds	r7, #20
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	b29b      	uxth	r3, r3
}
 800984e:	4618      	mov	r0, r3
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
	...

0800985c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b088      	sub	sp, #32
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	4608      	mov	r0, r1
 8009866:	4611      	mov	r1, r2
 8009868:	461a      	mov	r2, r3
 800986a:	4603      	mov	r3, r0
 800986c:	70fb      	strb	r3, [r7, #3]
 800986e:	460b      	mov	r3, r1
 8009870:	70bb      	strb	r3, [r7, #2]
 8009872:	4613      	mov	r3, r2
 8009874:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009876:	2300      	movs	r3, #0
 8009878:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800987e:	78fb      	ldrb	r3, [r7, #3]
 8009880:	015a      	lsls	r2, r3, #5
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	4413      	add	r3, r2
 8009886:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800988a:	461a      	mov	r2, r3
 800988c:	f04f 33ff 	mov.w	r3, #4294967295
 8009890:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009892:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009896:	2b03      	cmp	r3, #3
 8009898:	d87e      	bhi.n	8009998 <USB_HC_Init+0x13c>
 800989a:	a201      	add	r2, pc, #4	@ (adr r2, 80098a0 <USB_HC_Init+0x44>)
 800989c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a0:	080098b1 	.word	0x080098b1
 80098a4:	0800995b 	.word	0x0800995b
 80098a8:	080098b1 	.word	0x080098b1
 80098ac:	0800991d 	.word	0x0800991d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80098b0:	78fb      	ldrb	r3, [r7, #3]
 80098b2:	015a      	lsls	r2, r3, #5
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	4413      	add	r3, r2
 80098b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098bc:	461a      	mov	r2, r3
 80098be:	f240 439d 	movw	r3, #1181	@ 0x49d
 80098c2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80098c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	da10      	bge.n	80098ee <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80098cc:	78fb      	ldrb	r3, [r7, #3]
 80098ce:	015a      	lsls	r2, r3, #5
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	4413      	add	r3, r2
 80098d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	78fa      	ldrb	r2, [r7, #3]
 80098dc:	0151      	lsls	r1, r2, #5
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	440a      	add	r2, r1
 80098e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098ea:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80098ec:	e057      	b.n	800999e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d051      	beq.n	800999e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80098fa:	78fb      	ldrb	r3, [r7, #3]
 80098fc:	015a      	lsls	r2, r3, #5
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	4413      	add	r3, r2
 8009902:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	78fa      	ldrb	r2, [r7, #3]
 800990a:	0151      	lsls	r1, r2, #5
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	440a      	add	r2, r1
 8009910:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009914:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009918:	60d3      	str	r3, [r2, #12]
      break;
 800991a:	e040      	b.n	800999e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800991c:	78fb      	ldrb	r3, [r7, #3]
 800991e:	015a      	lsls	r2, r3, #5
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	4413      	add	r3, r2
 8009924:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009928:	461a      	mov	r2, r3
 800992a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800992e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009930:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009934:	2b00      	cmp	r3, #0
 8009936:	da34      	bge.n	80099a2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009938:	78fb      	ldrb	r3, [r7, #3]
 800993a:	015a      	lsls	r2, r3, #5
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	4413      	add	r3, r2
 8009940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	78fa      	ldrb	r2, [r7, #3]
 8009948:	0151      	lsls	r1, r2, #5
 800994a:	693a      	ldr	r2, [r7, #16]
 800994c:	440a      	add	r2, r1
 800994e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009952:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009956:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009958:	e023      	b.n	80099a2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800995a:	78fb      	ldrb	r3, [r7, #3]
 800995c:	015a      	lsls	r2, r3, #5
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	4413      	add	r3, r2
 8009962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009966:	461a      	mov	r2, r3
 8009968:	f240 2325 	movw	r3, #549	@ 0x225
 800996c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800996e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009972:	2b00      	cmp	r3, #0
 8009974:	da17      	bge.n	80099a6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009976:	78fb      	ldrb	r3, [r7, #3]
 8009978:	015a      	lsls	r2, r3, #5
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	4413      	add	r3, r2
 800997e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	78fa      	ldrb	r2, [r7, #3]
 8009986:	0151      	lsls	r1, r2, #5
 8009988:	693a      	ldr	r2, [r7, #16]
 800998a:	440a      	add	r2, r1
 800998c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009990:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8009994:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009996:	e006      	b.n	80099a6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	77fb      	strb	r3, [r7, #31]
      break;
 800999c:	e004      	b.n	80099a8 <USB_HC_Init+0x14c>
      break;
 800999e:	bf00      	nop
 80099a0:	e002      	b.n	80099a8 <USB_HC_Init+0x14c>
      break;
 80099a2:	bf00      	nop
 80099a4:	e000      	b.n	80099a8 <USB_HC_Init+0x14c>
      break;
 80099a6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80099a8:	78fb      	ldrb	r3, [r7, #3]
 80099aa:	015a      	lsls	r2, r3, #5
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	4413      	add	r3, r2
 80099b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	78fa      	ldrb	r2, [r7, #3]
 80099b8:	0151      	lsls	r1, r2, #5
 80099ba:	693a      	ldr	r2, [r7, #16]
 80099bc:	440a      	add	r2, r1
 80099be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80099c2:	f043 0302 	orr.w	r3, r3, #2
 80099c6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80099ce:	699a      	ldr	r2, [r3, #24]
 80099d0:	78fb      	ldrb	r3, [r7, #3]
 80099d2:	f003 030f 	and.w	r3, r3, #15
 80099d6:	2101      	movs	r1, #1
 80099d8:	fa01 f303 	lsl.w	r3, r1, r3
 80099dc:	6939      	ldr	r1, [r7, #16]
 80099de:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80099e2:	4313      	orrs	r3, r2
 80099e4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80099f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	da03      	bge.n	8009a02 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80099fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099fe:	61bb      	str	r3, [r7, #24]
 8009a00:	e001      	b.n	8009a06 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8009a02:	2300      	movs	r3, #0
 8009a04:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f7ff feff 	bl	800980a <USB_GetHostSpeed>
 8009a0c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009a0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d106      	bne.n	8009a24 <USB_HC_Init+0x1c8>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d003      	beq.n	8009a24 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009a1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009a20:	617b      	str	r3, [r7, #20]
 8009a22:	e001      	b.n	8009a28 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009a24:	2300      	movs	r3, #0
 8009a26:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009a28:	787b      	ldrb	r3, [r7, #1]
 8009a2a:	059b      	lsls	r3, r3, #22
 8009a2c:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009a30:	78bb      	ldrb	r3, [r7, #2]
 8009a32:	02db      	lsls	r3, r3, #11
 8009a34:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009a38:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009a3a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a3e:	049b      	lsls	r3, r3, #18
 8009a40:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009a44:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009a46:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009a48:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009a4c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009a52:	78fb      	ldrb	r3, [r7, #3]
 8009a54:	0159      	lsls	r1, r3, #5
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	440b      	add	r3, r1
 8009a5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a5e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009a64:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009a66:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a6a:	2b03      	cmp	r3, #3
 8009a6c:	d003      	beq.n	8009a76 <USB_HC_Init+0x21a>
 8009a6e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d10f      	bne.n	8009a96 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009a76:	78fb      	ldrb	r3, [r7, #3]
 8009a78:	015a      	lsls	r2, r3, #5
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	78fa      	ldrb	r2, [r7, #3]
 8009a86:	0151      	lsls	r1, r2, #5
 8009a88:	693a      	ldr	r2, [r7, #16]
 8009a8a:	440a      	add	r2, r1
 8009a8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009a90:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009a94:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009a96:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3720      	adds	r7, #32
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b08c      	sub	sp, #48	@ 0x30
 8009aa4:	af02      	add	r7, sp, #8
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	785b      	ldrb	r3, [r3, #1]
 8009ab6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009ab8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009abc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d02d      	beq.n	8009b26 <USB_HC_StartXfer+0x86>
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	791b      	ldrb	r3, [r3, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d129      	bne.n	8009b26 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009ad2:	79fb      	ldrb	r3, [r7, #7]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d117      	bne.n	8009b08 <USB_HC_StartXfer+0x68>
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	79db      	ldrb	r3, [r3, #7]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d003      	beq.n	8009ae8 <USB_HC_StartXfer+0x48>
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	79db      	ldrb	r3, [r3, #7]
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	d10f      	bne.n	8009b08 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	015a      	lsls	r2, r3, #5
 8009aec:	6a3b      	ldr	r3, [r7, #32]
 8009aee:	4413      	add	r3, r2
 8009af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	69fa      	ldr	r2, [r7, #28]
 8009af8:	0151      	lsls	r1, r2, #5
 8009afa:	6a3a      	ldr	r2, [r7, #32]
 8009afc:	440a      	add	r2, r1
 8009afe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b06:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009b08:	79fb      	ldrb	r3, [r7, #7]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10b      	bne.n	8009b26 <USB_HC_StartXfer+0x86>
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	795b      	ldrb	r3, [r3, #5]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d107      	bne.n	8009b26 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	785b      	ldrb	r3, [r3, #1]
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f000 fa0f 	bl	8009f40 <USB_DoPing>
      return HAL_OK;
 8009b22:	2300      	movs	r3, #0
 8009b24:	e0f8      	b.n	8009d18 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d018      	beq.n	8009b60 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	695b      	ldr	r3, [r3, #20]
 8009b32:	68ba      	ldr	r2, [r7, #8]
 8009b34:	8912      	ldrh	r2, [r2, #8]
 8009b36:	4413      	add	r3, r2
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	8912      	ldrh	r2, [r2, #8]
 8009b3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b42:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (num_packets > max_hc_pkt_count)
 8009b44:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009b46:	8b7b      	ldrh	r3, [r7, #26]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d90b      	bls.n	8009b64 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009b4c:	8b7b      	ldrh	r3, [r7, #26]
 8009b4e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009b50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	8912      	ldrh	r2, [r2, #8]
 8009b56:	fb03 f202 	mul.w	r2, r3, r2
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	611a      	str	r2, [r3, #16]
 8009b5e:	e001      	b.n	8009b64 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009b60:	2301      	movs	r3, #1
 8009b62:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	78db      	ldrb	r3, [r3, #3]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d007      	beq.n	8009b7c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009b6c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	8912      	ldrh	r2, [r2, #8]
 8009b72:	fb03 f202 	mul.w	r2, r3, r2
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	611a      	str	r2, [r3, #16]
 8009b7a:	e003      	b.n	8009b84 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	695a      	ldr	r2, [r3, #20]
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009b8c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009b8e:	04d9      	lsls	r1, r3, #19
 8009b90:	4b63      	ldr	r3, [pc, #396]	@ (8009d20 <USB_HC_StartXfer+0x280>)
 8009b92:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b94:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	7a9b      	ldrb	r3, [r3, #10]
 8009b9a:	075b      	lsls	r3, r3, #29
 8009b9c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009ba0:	69f9      	ldr	r1, [r7, #28]
 8009ba2:	0148      	lsls	r0, r1, #5
 8009ba4:	6a39      	ldr	r1, [r7, #32]
 8009ba6:	4401      	add	r1, r0
 8009ba8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009bac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009bae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009bb0:	79fb      	ldrb	r3, [r7, #7]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d009      	beq.n	8009bca <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	68d9      	ldr	r1, [r3, #12]
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	015a      	lsls	r2, r3, #5
 8009bbe:	6a3b      	ldr	r3, [r7, #32]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009bc6:	460a      	mov	r2, r1
 8009bc8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009bca:	6a3b      	ldr	r3, [r7, #32]
 8009bcc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	f003 0301 	and.w	r3, r3, #1
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	bf0c      	ite	eq
 8009bda:	2301      	moveq	r3, #1
 8009bdc:	2300      	movne	r3, #0
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	015a      	lsls	r2, r3, #5
 8009be6:	6a3b      	ldr	r3, [r7, #32]
 8009be8:	4413      	add	r3, r2
 8009bea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	69fa      	ldr	r2, [r7, #28]
 8009bf2:	0151      	lsls	r1, r2, #5
 8009bf4:	6a3a      	ldr	r2, [r7, #32]
 8009bf6:	440a      	add	r2, r1
 8009bf8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009bfc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009c00:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	015a      	lsls	r2, r3, #5
 8009c06:	6a3b      	ldr	r3, [r7, #32]
 8009c08:	4413      	add	r3, r2
 8009c0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	7e7b      	ldrb	r3, [r7, #25]
 8009c12:	075b      	lsls	r3, r3, #29
 8009c14:	69f9      	ldr	r1, [r7, #28]
 8009c16:	0148      	lsls	r0, r1, #5
 8009c18:	6a39      	ldr	r1, [r7, #32]
 8009c1a:	4401      	add	r1, r0
 8009c1c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8009c20:	4313      	orrs	r3, r2
 8009c22:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	015a      	lsls	r2, r3, #5
 8009c28:	6a3b      	ldr	r3, [r7, #32]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009c3a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	78db      	ldrb	r3, [r3, #3]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d004      	beq.n	8009c4e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c4a:	613b      	str	r3, [r7, #16]
 8009c4c:	e003      	b.n	8009c56 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009c54:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009c5c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	015a      	lsls	r2, r3, #5
 8009c62:	6a3b      	ldr	r3, [r7, #32]
 8009c64:	4413      	add	r3, r2
 8009c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009c70:	79fb      	ldrb	r3, [r7, #7]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d001      	beq.n	8009c7a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009c76:	2300      	movs	r3, #0
 8009c78:	e04e      	b.n	8009d18 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	78db      	ldrb	r3, [r3, #3]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d149      	bne.n	8009d16 <USB_HC_StartXfer+0x276>
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	695b      	ldr	r3, [r3, #20]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d045      	beq.n	8009d16 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	79db      	ldrb	r3, [r3, #7]
 8009c8e:	2b03      	cmp	r3, #3
 8009c90:	d830      	bhi.n	8009cf4 <USB_HC_StartXfer+0x254>
 8009c92:	a201      	add	r2, pc, #4	@ (adr r2, 8009c98 <USB_HC_StartXfer+0x1f8>)
 8009c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c98:	08009ca9 	.word	0x08009ca9
 8009c9c:	08009ccd 	.word	0x08009ccd
 8009ca0:	08009ca9 	.word	0x08009ca9
 8009ca4:	08009ccd 	.word	0x08009ccd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	695b      	ldr	r3, [r3, #20]
 8009cac:	3303      	adds	r3, #3
 8009cae:	089b      	lsrs	r3, r3, #2
 8009cb0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009cb2:	8afa      	ldrh	r2, [r7, #22]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d91c      	bls.n	8009cf8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	699b      	ldr	r3, [r3, #24]
 8009cc2:	f043 0220 	orr.w	r2, r3, #32
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	619a      	str	r2, [r3, #24]
        }
        break;
 8009cca:	e015      	b.n	8009cf8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	695b      	ldr	r3, [r3, #20]
 8009cd0:	3303      	adds	r3, #3
 8009cd2:	089b      	lsrs	r3, r3, #2
 8009cd4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009cd6:	8afa      	ldrh	r2, [r7, #22]
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d90a      	bls.n	8009cfc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	619a      	str	r2, [r3, #24]
        }
        break;
 8009cf2:	e003      	b.n	8009cfc <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009cf4:	bf00      	nop
 8009cf6:	e002      	b.n	8009cfe <USB_HC_StartXfer+0x25e>
        break;
 8009cf8:	bf00      	nop
 8009cfa:	e000      	b.n	8009cfe <USB_HC_StartXfer+0x25e>
        break;
 8009cfc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	68d9      	ldr	r1, [r3, #12]
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	785a      	ldrb	r2, [r3, #1]
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	695b      	ldr	r3, [r3, #20]
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	9000      	str	r0, [sp, #0]
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f7ff fb31 	bl	8009378 <USB_WritePacket>
  }

  return HAL_OK;
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3728      	adds	r7, #40	@ 0x28
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	1ff80000 	.word	0x1ff80000

08009d24 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009d36:	695b      	ldr	r3, [r3, #20]
 8009d38:	b29b      	uxth	r3, r3
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr

08009d46 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009d46:	b480      	push	{r7}
 8009d48:	b089      	sub	sp, #36	@ 0x24
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
 8009d4e:	460b      	mov	r3, r1
 8009d50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009d56:	78fb      	ldrb	r3, [r7, #3]
 8009d58:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	015a      	lsls	r2, r3, #5
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	4413      	add	r3, r2
 8009d66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	0c9b      	lsrs	r3, r3, #18
 8009d6e:	f003 0303 	and.w	r3, r3, #3
 8009d72:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	015a      	lsls	r2, r3, #5
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	0fdb      	lsrs	r3, r3, #31
 8009d84:	f003 0301 	and.w	r3, r3, #1
 8009d88:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f003 0320 	and.w	r3, r3, #32
 8009d92:	2b20      	cmp	r3, #32
 8009d94:	d104      	bne.n	8009da0 <USB_HC_Halt+0x5a>
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d101      	bne.n	8009da0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	e0c8      	b.n	8009f32 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d002      	beq.n	8009dac <USB_HC_Halt+0x66>
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	d163      	bne.n	8009e74 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	015a      	lsls	r2, r3, #5
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	4413      	add	r3, r2
 8009db4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	69ba      	ldr	r2, [r7, #24]
 8009dbc:	0151      	lsls	r1, r2, #5
 8009dbe:	69fa      	ldr	r2, [r7, #28]
 8009dc0:	440a      	add	r2, r1
 8009dc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009dc6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009dca:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	f003 0320 	and.w	r3, r3, #32
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f040 80ab 	bne.w	8009f30 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dde:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d133      	bne.n	8009e4e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	015a      	lsls	r2, r3, #5
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	4413      	add	r3, r2
 8009dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	69ba      	ldr	r2, [r7, #24]
 8009df6:	0151      	lsls	r1, r2, #5
 8009df8:	69fa      	ldr	r2, [r7, #28]
 8009dfa:	440a      	add	r2, r1
 8009dfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009e04:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	015a      	lsls	r2, r3, #5
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	69ba      	ldr	r2, [r7, #24]
 8009e16:	0151      	lsls	r1, r2, #5
 8009e18:	69fa      	ldr	r2, [r7, #28]
 8009e1a:	440a      	add	r2, r1
 8009e1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009e24:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009e32:	d81d      	bhi.n	8009e70 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	015a      	lsls	r2, r3, #5
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e4a:	d0ec      	beq.n	8009e26 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009e4c:	e070      	b.n	8009f30 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	015a      	lsls	r2, r3, #5
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	4413      	add	r3, r2
 8009e56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	69ba      	ldr	r2, [r7, #24]
 8009e5e:	0151      	lsls	r1, r2, #5
 8009e60:	69fa      	ldr	r2, [r7, #28]
 8009e62:	440a      	add	r2, r1
 8009e64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009e6c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009e6e:	e05f      	b.n	8009f30 <USB_HC_Halt+0x1ea>
            break;
 8009e70:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009e72:	e05d      	b.n	8009f30 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	015a      	lsls	r2, r3, #5
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	69ba      	ldr	r2, [r7, #24]
 8009e84:	0151      	lsls	r1, r2, #5
 8009e86:	69fa      	ldr	r2, [r7, #28]
 8009e88:	440a      	add	r2, r1
 8009e8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e92:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d133      	bne.n	8009f0c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	015a      	lsls	r2, r3, #5
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	4413      	add	r3, r2
 8009eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	69ba      	ldr	r2, [r7, #24]
 8009eb4:	0151      	lsls	r1, r2, #5
 8009eb6:	69fa      	ldr	r2, [r7, #28]
 8009eb8:	440a      	add	r2, r1
 8009eba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009ebe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ec2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009ec4:	69bb      	ldr	r3, [r7, #24]
 8009ec6:	015a      	lsls	r2, r3, #5
 8009ec8:	69fb      	ldr	r3, [r7, #28]
 8009eca:	4413      	add	r3, r2
 8009ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	69ba      	ldr	r2, [r7, #24]
 8009ed4:	0151      	lsls	r1, r2, #5
 8009ed6:	69fa      	ldr	r2, [r7, #28]
 8009ed8:	440a      	add	r2, r1
 8009eda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009ede:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009ee2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009ef0:	d81d      	bhi.n	8009f2e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	015a      	lsls	r2, r3, #5
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	4413      	add	r3, r2
 8009efa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f08:	d0ec      	beq.n	8009ee4 <USB_HC_Halt+0x19e>
 8009f0a:	e011      	b.n	8009f30 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	015a      	lsls	r2, r3, #5
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	4413      	add	r3, r2
 8009f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	69ba      	ldr	r2, [r7, #24]
 8009f1c:	0151      	lsls	r1, r2, #5
 8009f1e:	69fa      	ldr	r2, [r7, #28]
 8009f20:	440a      	add	r2, r1
 8009f22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009f26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009f2a:	6013      	str	r3, [r2, #0]
 8009f2c:	e000      	b.n	8009f30 <USB_HC_Halt+0x1ea>
          break;
 8009f2e:	bf00      	nop
    }
  }

  return HAL_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3724      	adds	r7, #36	@ 0x24
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
	...

08009f40 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b087      	sub	sp, #28
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009f50:	78fb      	ldrb	r3, [r7, #3]
 8009f52:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009f54:	2301      	movs	r3, #1
 8009f56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	04da      	lsls	r2, r3, #19
 8009f5c:	4b15      	ldr	r3, [pc, #84]	@ (8009fb4 <USB_DoPing+0x74>)
 8009f5e:	4013      	ands	r3, r2
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	0151      	lsls	r1, r2, #5
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	440a      	add	r2, r1
 8009f68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009f6c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009f70:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	015a      	lsls	r2, r3, #5
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009f88:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009f90:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	015a      	lsls	r2, r3, #5
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	4413      	add	r3, r2
 8009f9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	371c      	adds	r7, #28
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	1ff80000 	.word	0x1ff80000

08009fb8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b088      	sub	sp, #32
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f7ff f911 	bl	80091f4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009fd2:	2110      	movs	r1, #16
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f7ff f96b 	bl	80092b0 <USB_FlushTxFifo>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d001      	beq.n	8009fe4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f7ff f997 	bl	8009318 <USB_FlushRxFifo>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d001      	beq.n	8009ff4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	61bb      	str	r3, [r7, #24]
 8009ff8:	e01f      	b.n	800a03a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	015a      	lsls	r2, r3, #5
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	4413      	add	r3, r2
 800a002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a010:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a018:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a020:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	015a      	lsls	r2, r3, #5
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	4413      	add	r3, r2
 800a02a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a02e:	461a      	mov	r2, r3
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	3301      	adds	r3, #1
 800a038:	61bb      	str	r3, [r7, #24]
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	2b0f      	cmp	r3, #15
 800a03e:	d9dc      	bls.n	8009ffa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a040:	2300      	movs	r3, #0
 800a042:	61bb      	str	r3, [r7, #24]
 800a044:	e034      	b.n	800a0b0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	015a      	lsls	r2, r3, #5
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	4413      	add	r3, r2
 800a04e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a05c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a064:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a06c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	015a      	lsls	r2, r3, #5
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	4413      	add	r3, r2
 800a076:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a07a:	461a      	mov	r2, r3
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	3301      	adds	r3, #1
 800a084:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a08c:	d80c      	bhi.n	800a0a8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	015a      	lsls	r2, r3, #5
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	4413      	add	r3, r2
 800a096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0a4:	d0ec      	beq.n	800a080 <USB_StopHost+0xc8>
 800a0a6:	e000      	b.n	800a0aa <USB_StopHost+0xf2>
        break;
 800a0a8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	61bb      	str	r3, [r7, #24]
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	2b0f      	cmp	r3, #15
 800a0b4:	d9c7      	bls.n	800a046 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a0bc:	461a      	mov	r2, r3
 800a0be:	f04f 33ff 	mov.w	r3, #4294967295
 800a0c2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f7ff f880 	bl	80091d2 <USB_EnableGlobalInt>

  return ret;
 800a0d2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3720      	adds	r7, #32
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800a0e0:	4904      	ldr	r1, [pc, #16]	@ (800a0f4 <MX_FATFS_Init+0x18>)
 800a0e2:	4805      	ldr	r0, [pc, #20]	@ (800a0f8 <MX_FATFS_Init+0x1c>)
 800a0e4:	f006 fb20 	bl	8010728 <FATFS_LinkDriver>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	4b03      	ldr	r3, [pc, #12]	@ (800a0fc <MX_FATFS_Init+0x20>)
 800a0ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a0f0:	bf00      	nop
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	20001e80 	.word	0x20001e80
 800a0f8:	08012914 	.word	0x08012914
 800a0fc:	20001e7c 	.word	0x20001e7c

0800a100 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a100:	b480      	push	{r7}
 800a102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a104:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a106:	4618      	mov	r0, r3
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	4603      	mov	r3, r0
 800a118:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	4603      	mov	r3, r0
 800a130:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800a136:	79fb      	ldrb	r3, [r7, #7]
 800a138:	4619      	mov	r1, r3
 800a13a:	4808      	ldr	r0, [pc, #32]	@ (800a15c <USBH_status+0x34>)
 800a13c:	f000 fe30 	bl	800ada0 <USBH_MSC_UnitIsReady>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d002      	beq.n	800a14c <USBH_status+0x24>
  {
    res = RES_OK;
 800a146:	2300      	movs	r3, #0
 800a148:	73fb      	strb	r3, [r7, #15]
 800a14a:	e001      	b.n	800a150 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a150:	7bfb      	ldrb	r3, [r7, #15]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	200022ec 	.word	0x200022ec

0800a160 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b094      	sub	sp, #80	@ 0x50
 800a164:	af02      	add	r7, sp, #8
 800a166:	60b9      	str	r1, [r7, #8]
 800a168:	607a      	str	r2, [r7, #4]
 800a16a:	603b      	str	r3, [r7, #0]
 800a16c:	4603      	mov	r3, r0
 800a16e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800a176:	7bf9      	ldrb	r1, [r7, #15]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	9300      	str	r3, [sp, #0]
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	4813      	ldr	r0, [pc, #76]	@ (800a1d0 <USBH_read+0x70>)
 800a182:	f000 fe57 	bl	800ae34 <USBH_MSC_Read>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d103      	bne.n	800a194 <USBH_read+0x34>
  {
    res = RES_OK;
 800a18c:	2300      	movs	r3, #0
 800a18e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a192:	e017      	b.n	800a1c4 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a194:	f107 0210 	add.w	r2, r7, #16
 800a198:	7bfb      	ldrb	r3, [r7, #15]
 800a19a:	4619      	mov	r1, r3
 800a19c:	480c      	ldr	r0, [pc, #48]	@ (800a1d0 <USBH_read+0x70>)
 800a19e:	f000 fe25 	bl	800adec <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a1a2:	7f7b      	ldrb	r3, [r7, #29]
 800a1a4:	2b3a      	cmp	r3, #58	@ 0x3a
 800a1a6:	d005      	beq.n	800a1b4 <USBH_read+0x54>
 800a1a8:	2b3a      	cmp	r3, #58	@ 0x3a
 800a1aa:	dc07      	bgt.n	800a1bc <USBH_read+0x5c>
 800a1ac:	2b04      	cmp	r3, #4
 800a1ae:	d001      	beq.n	800a1b4 <USBH_read+0x54>
 800a1b0:	2b28      	cmp	r3, #40	@ 0x28
 800a1b2:	d103      	bne.n	800a1bc <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800a1ba:	e003      	b.n	800a1c4 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800a1c2:	bf00      	nop
    }
  }

  return res;
 800a1c4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3748      	adds	r7, #72	@ 0x48
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	200022ec 	.word	0x200022ec

0800a1d4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b094      	sub	sp, #80	@ 0x50
 800a1d8:	af02      	add	r7, sp, #8
 800a1da:	60b9      	str	r1, [r7, #8]
 800a1dc:	607a      	str	r2, [r7, #4]
 800a1de:	603b      	str	r3, [r7, #0]
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800a1ea:	7bf9      	ldrb	r1, [r7, #15]
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	4817      	ldr	r0, [pc, #92]	@ (800a254 <USBH_write+0x80>)
 800a1f6:	f000 fe86 	bl	800af06 <USBH_MSC_Write>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d103      	bne.n	800a208 <USBH_write+0x34>
  {
    res = RES_OK;
 800a200:	2300      	movs	r3, #0
 800a202:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a206:	e01f      	b.n	800a248 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a208:	f107 0210 	add.w	r2, r7, #16
 800a20c:	7bfb      	ldrb	r3, [r7, #15]
 800a20e:	4619      	mov	r1, r3
 800a210:	4810      	ldr	r0, [pc, #64]	@ (800a254 <USBH_write+0x80>)
 800a212:	f000 fdeb 	bl	800adec <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a216:	7f7b      	ldrb	r3, [r7, #29]
 800a218:	2b3a      	cmp	r3, #58	@ 0x3a
 800a21a:	d00d      	beq.n	800a238 <USBH_write+0x64>
 800a21c:	2b3a      	cmp	r3, #58	@ 0x3a
 800a21e:	dc0f      	bgt.n	800a240 <USBH_write+0x6c>
 800a220:	2b28      	cmp	r3, #40	@ 0x28
 800a222:	d009      	beq.n	800a238 <USBH_write+0x64>
 800a224:	2b28      	cmp	r3, #40	@ 0x28
 800a226:	dc0b      	bgt.n	800a240 <USBH_write+0x6c>
 800a228:	2b04      	cmp	r3, #4
 800a22a:	d005      	beq.n	800a238 <USBH_write+0x64>
 800a22c:	2b27      	cmp	r3, #39	@ 0x27
 800a22e:	d107      	bne.n	800a240 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800a230:	2302      	movs	r3, #2
 800a232:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800a236:	e007      	b.n	800a248 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a238:	2303      	movs	r3, #3
 800a23a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800a23e:	e003      	b.n	800a248 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800a246:	bf00      	nop
    }
  }

  return res;
 800a248:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3748      	adds	r7, #72	@ 0x48
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	200022ec 	.word	0x200022ec

0800a258 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b090      	sub	sp, #64	@ 0x40
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	4603      	mov	r3, r0
 800a260:	603a      	str	r2, [r7, #0]
 800a262:	71fb      	strb	r3, [r7, #7]
 800a264:	460b      	mov	r3, r1
 800a266:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a268:	2301      	movs	r3, #1
 800a26a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800a26e:	79bb      	ldrb	r3, [r7, #6]
 800a270:	2b03      	cmp	r3, #3
 800a272:	d852      	bhi.n	800a31a <USBH_ioctl+0xc2>
 800a274:	a201      	add	r2, pc, #4	@ (adr r2, 800a27c <USBH_ioctl+0x24>)
 800a276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27a:	bf00      	nop
 800a27c:	0800a28d 	.word	0x0800a28d
 800a280:	0800a295 	.word	0x0800a295
 800a284:	0800a2bf 	.word	0x0800a2bf
 800a288:	0800a2eb 	.word	0x0800a2eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800a292:	e045      	b.n	800a320 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a294:	f107 0208 	add.w	r2, r7, #8
 800a298:	79fb      	ldrb	r3, [r7, #7]
 800a29a:	4619      	mov	r1, r3
 800a29c:	4823      	ldr	r0, [pc, #140]	@ (800a32c <USBH_ioctl+0xd4>)
 800a29e:	f000 fda5 	bl	800adec <USBH_MSC_GetLUNInfo>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d106      	bne.n	800a2b6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a2b4:	e034      	b.n	800a320 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800a2bc:	e030      	b.n	800a320 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a2be:	f107 0208 	add.w	r2, r7, #8
 800a2c2:	79fb      	ldrb	r3, [r7, #7]
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4819      	ldr	r0, [pc, #100]	@ (800a32c <USBH_ioctl+0xd4>)
 800a2c8:	f000 fd90 	bl	800adec <USBH_MSC_GetLUNInfo>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d107      	bne.n	800a2e2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800a2d2:	8a3b      	ldrh	r3, [r7, #16]
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a2e0:	e01e      	b.n	800a320 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800a2e8:	e01a      	b.n	800a320 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a2ea:	f107 0208 	add.w	r2, r7, #8
 800a2ee:	79fb      	ldrb	r3, [r7, #7]
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	480e      	ldr	r0, [pc, #56]	@ (800a32c <USBH_ioctl+0xd4>)
 800a2f4:	f000 fd7a 	bl	800adec <USBH_MSC_GetLUNInfo>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d109      	bne.n	800a312 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800a2fe:	8a3b      	ldrh	r3, [r7, #16]
 800a300:	0a5b      	lsrs	r3, r3, #9
 800a302:	b29b      	uxth	r3, r3
 800a304:	461a      	mov	r2, r3
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a30a:	2300      	movs	r3, #0
 800a30c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a310:	e006      	b.n	800a320 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800a318:	e002      	b.n	800a320 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800a31a:	2304      	movs	r3, #4
 800a31c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 800a320:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800a324:	4618      	mov	r0, r3
 800a326:	3740      	adds	r7, #64	@ 0x40
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	200022ec 	.word	0x200022ec

0800a330 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a330:	b590      	push	{r4, r7, lr}
 800a332:	b089      	sub	sp, #36	@ 0x24
 800a334:	af04      	add	r7, sp, #16
 800a336:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a33e:	7919      	ldrb	r1, [r3, #4]
 800a340:	2350      	movs	r3, #80	@ 0x50
 800a342:	2206      	movs	r2, #6
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f001 fc68 	bl	800bc1a <USBH_FindInterface>
 800a34a:	4603      	mov	r3, r0
 800a34c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800a34e:	7bfb      	ldrb	r3, [r7, #15]
 800a350:	2bff      	cmp	r3, #255	@ 0xff
 800a352:	d002      	beq.n	800a35a <USBH_MSC_InterfaceInit+0x2a>
 800a354:	7bfb      	ldrb	r3, [r7, #15]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d901      	bls.n	800a35e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a35a:	2302      	movs	r3, #2
 800a35c:	e106      	b.n	800a56c <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800a35e:	7bfb      	ldrb	r3, [r7, #15]
 800a360:	4619      	mov	r1, r3
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f001 fc3d 	bl	800bbe2 <USBH_SelectInterface>
 800a368:	4603      	mov	r3, r0
 800a36a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a36c:	7bbb      	ldrb	r3, [r7, #14]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d001      	beq.n	800a376 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800a372:	2302      	movs	r3, #2
 800a374:	e0fa      	b.n	800a56c <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800a37c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a380:	f006 fde0 	bl	8010f44 <malloc>
 800a384:	4603      	mov	r3, r0
 800a386:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a38e:	69db      	ldr	r3, [r3, #28]
 800a390:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d101      	bne.n	800a39c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800a398:	2302      	movs	r3, #2
 800a39a:	e0e7      	b.n	800a56c <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800a39c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	68b8      	ldr	r0, [r7, #8]
 800a3a4:	f006 fe8c 	bl	80110c0 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a3a8:	7bfb      	ldrb	r3, [r7, #15]
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	211a      	movs	r1, #26
 800a3ae:	fb01 f303 	mul.w	r3, r1, r3
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	b25b      	sxtb	r3, r3
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	da16      	bge.n	800a3ee <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	211a      	movs	r1, #26
 800a3c6:	fb01 f303 	mul.w	r3, r1, r3
 800a3ca:	4413      	add	r3, r2
 800a3cc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a3d0:	781a      	ldrb	r2, [r3, #0]
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a3d6:	7bfb      	ldrb	r3, [r7, #15]
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	211a      	movs	r1, #26
 800a3dc:	fb01 f303 	mul.w	r3, r1, r3
 800a3e0:	4413      	add	r3, r2
 800a3e2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a3e6:	881a      	ldrh	r2, [r3, #0]
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	815a      	strh	r2, [r3, #10]
 800a3ec:	e015      	b.n	800a41a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a3ee:	7bfb      	ldrb	r3, [r7, #15]
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	211a      	movs	r1, #26
 800a3f4:	fb01 f303 	mul.w	r3, r1, r3
 800a3f8:	4413      	add	r3, r2
 800a3fa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a3fe:	781a      	ldrb	r2, [r3, #0]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a404:	7bfb      	ldrb	r3, [r7, #15]
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	211a      	movs	r1, #26
 800a40a:	fb01 f303 	mul.w	r3, r1, r3
 800a40e:	4413      	add	r3, r2
 800a410:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a414:	881a      	ldrh	r2, [r3, #0]
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a41a:	7bfb      	ldrb	r3, [r7, #15]
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	211a      	movs	r1, #26
 800a420:	fb01 f303 	mul.w	r3, r1, r3
 800a424:	4413      	add	r3, r2
 800a426:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	b25b      	sxtb	r3, r3
 800a42e:	2b00      	cmp	r3, #0
 800a430:	da16      	bge.n	800a460 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a432:	7bfb      	ldrb	r3, [r7, #15]
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	211a      	movs	r1, #26
 800a438:	fb01 f303 	mul.w	r3, r1, r3
 800a43c:	4413      	add	r3, r2
 800a43e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a442:	781a      	ldrb	r2, [r3, #0]
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a448:	7bfb      	ldrb	r3, [r7, #15]
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	211a      	movs	r1, #26
 800a44e:	fb01 f303 	mul.w	r3, r1, r3
 800a452:	4413      	add	r3, r2
 800a454:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a458:	881a      	ldrh	r2, [r3, #0]
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	815a      	strh	r2, [r3, #10]
 800a45e:	e015      	b.n	800a48c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a460:	7bfb      	ldrb	r3, [r7, #15]
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	211a      	movs	r1, #26
 800a466:	fb01 f303 	mul.w	r3, r1, r3
 800a46a:	4413      	add	r3, r2
 800a46c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a470:	781a      	ldrb	r2, [r3, #0]
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a476:	7bfb      	ldrb	r3, [r7, #15]
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	211a      	movs	r1, #26
 800a47c:	fb01 f303 	mul.w	r3, r1, r3
 800a480:	4413      	add	r3, r2
 800a482:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a486:	881a      	ldrh	r2, [r3, #0]
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	2200      	movs	r2, #0
 800a490:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	2200      	movs	r2, #0
 800a496:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	2200      	movs	r2, #0
 800a49c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	799b      	ldrb	r3, [r3, #6]
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f002 fec4 	bl	800d232 <USBH_AllocPipe>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	79db      	ldrb	r3, [r3, #7]
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f002 feba 	bl	800d232 <USBH_AllocPipe>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 fdc2 	bl	800b050 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	799b      	ldrb	r3, [r3, #6]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d01e      	beq.n	800a512 <USBH_MSC_InterfaceInit+0x1e2>
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	891b      	ldrh	r3, [r3, #8]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d01a      	beq.n	800a512 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	7959      	ldrb	r1, [r3, #5]
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	7998      	ldrb	r0, [r3, #6]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	8912      	ldrh	r2, [r2, #8]
 800a4f4:	9202      	str	r2, [sp, #8]
 800a4f6:	2202      	movs	r2, #2
 800a4f8:	9201      	str	r2, [sp, #4]
 800a4fa:	9300      	str	r3, [sp, #0]
 800a4fc:	4623      	mov	r3, r4
 800a4fe:	4602      	mov	r2, r0
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f002 fe67 	bl	800d1d4 <USBH_OpenPipe>
 800a506:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	79db      	ldrb	r3, [r3, #7]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d02c      	beq.n	800a56a <USBH_MSC_InterfaceInit+0x23a>
 800a510:	e001      	b.n	800a516 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800a512:	2303      	movs	r3, #3
 800a514:	e02a      	b.n	800a56c <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	895b      	ldrh	r3, [r3, #10]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d025      	beq.n	800a56a <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	7919      	ldrb	r1, [r3, #4]
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	79d8      	ldrb	r0, [r3, #7]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a532:	68ba      	ldr	r2, [r7, #8]
 800a534:	8952      	ldrh	r2, [r2, #10]
 800a536:	9202      	str	r2, [sp, #8]
 800a538:	2202      	movs	r2, #2
 800a53a:	9201      	str	r2, [sp, #4]
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	4623      	mov	r3, r4
 800a540:	4602      	mov	r2, r0
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f002 fe46 	bl	800d1d4 <USBH_OpenPipe>
 800a548:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	791b      	ldrb	r3, [r3, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	4619      	mov	r1, r3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f006 fc42 	bl	8010ddc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	795b      	ldrb	r3, [r3, #5]
 800a55c:	2200      	movs	r2, #0
 800a55e:	4619      	mov	r1, r3
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f006 fc3b 	bl	8010ddc <USBH_LL_SetToggle>

  return USBH_OK;
 800a566:	2300      	movs	r3, #0
 800a568:	e000      	b.n	800a56c <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800a56a:	2303      	movs	r3, #3
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3714      	adds	r7, #20
 800a570:	46bd      	mov	sp, r7
 800a572:	bd90      	pop	{r4, r7, pc}

0800a574 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a582:	69db      	ldr	r3, [r3, #28]
 800a584:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	795b      	ldrb	r3, [r3, #5]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00e      	beq.n	800a5ac <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	795b      	ldrb	r3, [r3, #5]
 800a592:	4619      	mov	r1, r3
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f002 fe3c 	bl	800d212 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	795b      	ldrb	r3, [r3, #5]
 800a59e:	4619      	mov	r1, r3
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f002 fe67 	bl	800d274 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	791b      	ldrb	r3, [r3, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00e      	beq.n	800a5d2 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	791b      	ldrb	r3, [r3, #4]
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f002 fe29 	bl	800d212 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	791b      	ldrb	r3, [r3, #4]
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f002 fe54 	bl	800d274 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a5d8:	69db      	ldr	r3, [r3, #28]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00b      	beq.n	800a5f6 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a5e4:	69db      	ldr	r3, [r3, #28]
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f006 fcb4 	bl	8010f54 <free>
    phost->pActiveClass->pData = 0U;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a60e:	69db      	ldr	r3, [r3, #28]
 800a610:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a612:	2301      	movs	r3, #1
 800a614:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	7b9b      	ldrb	r3, [r3, #14]
 800a61a:	2b03      	cmp	r3, #3
 800a61c:	d041      	beq.n	800a6a2 <USBH_MSC_ClassRequest+0xa2>
 800a61e:	2b03      	cmp	r3, #3
 800a620:	dc4b      	bgt.n	800a6ba <USBH_MSC_ClassRequest+0xba>
 800a622:	2b00      	cmp	r3, #0
 800a624:	d001      	beq.n	800a62a <USBH_MSC_ClassRequest+0x2a>
 800a626:	2b02      	cmp	r3, #2
 800a628:	d147      	bne.n	800a6ba <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	4619      	mov	r1, r3
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 fcef 	bl	800b012 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800a634:	4603      	mov	r3, r0
 800a636:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800a638:	7bfb      	ldrb	r3, [r7, #15]
 800a63a:	2b03      	cmp	r3, #3
 800a63c:	d104      	bne.n	800a648 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	2200      	movs	r2, #0
 800a642:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800a644:	2300      	movs	r3, #0
 800a646:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800a648:	7bfb      	ldrb	r3, [r7, #15]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d137      	bne.n	800a6be <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	2b02      	cmp	r3, #2
 800a654:	d804      	bhi.n	800a660 <USBH_MSC_ClassRequest+0x60>
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	3301      	adds	r3, #1
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	e000      	b.n	800a662 <USBH_MSC_ClassRequest+0x62>
 800a660:	2202      	movs	r2, #2
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a666:	2300      	movs	r3, #0
 800a668:	73bb      	strb	r3, [r7, #14]
 800a66a:	e014      	b.n	800a696 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800a66c:	7bbb      	ldrb	r3, [r7, #14]
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	2134      	movs	r1, #52	@ 0x34
 800a672:	fb01 f303 	mul.w	r3, r1, r3
 800a676:	4413      	add	r3, r2
 800a678:	3392      	adds	r3, #146	@ 0x92
 800a67a:	2202      	movs	r2, #2
 800a67c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800a67e:	7bbb      	ldrb	r3, [r7, #14]
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	2134      	movs	r1, #52	@ 0x34
 800a684:	fb01 f303 	mul.w	r3, r1, r3
 800a688:	4413      	add	r3, r2
 800a68a:	33c1      	adds	r3, #193	@ 0xc1
 800a68c:	2200      	movs	r2, #0
 800a68e:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a690:	7bbb      	ldrb	r3, [r7, #14]
 800a692:	3301      	adds	r3, #1
 800a694:	73bb      	strb	r3, [r7, #14]
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	7bba      	ldrb	r2, [r7, #14]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d3e5      	bcc.n	800a66c <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800a6a0:	e00d      	b.n	800a6be <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f002 f87e 	bl	800c7a6 <USBH_ClrFeature>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d108      	bne.n	800a6c2 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	7bda      	ldrb	r2, [r3, #15]
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	739a      	strb	r2, [r3, #14]
      }
      break;
 800a6b8:	e003      	b.n	800a6c2 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800a6ba:	bf00      	nop
 800a6bc:	e002      	b.n	800a6c4 <USBH_MSC_ClassRequest+0xc4>
      break;
 800a6be:	bf00      	nop
 800a6c0:	e000      	b.n	800a6c4 <USBH_MSC_ClassRequest+0xc4>
      break;
 800a6c2:	bf00      	nop
  }

  return status;
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
	...

0800a6d0 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b086      	sub	sp, #24
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6de:	69db      	ldr	r3, [r3, #28]
 800a6e0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	7b1b      	ldrb	r3, [r3, #12]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d003      	beq.n	800a6fe <USBH_MSC_Process+0x2e>
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	f000 826f 	beq.w	800abda <USBH_MSC_Process+0x50a>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800a6fc:	e270      	b.n	800abe0 <USBH_MSC_Process+0x510>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a704:	693a      	ldr	r2, [r7, #16]
 800a706:	7812      	ldrb	r2, [r2, #0]
 800a708:	4293      	cmp	r3, r2
 800a70a:	f080 824e 	bcs.w	800abaa <USBH_MSC_Process+0x4da>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a714:	4619      	mov	r1, r3
 800a716:	693a      	ldr	r2, [r7, #16]
 800a718:	2334      	movs	r3, #52	@ 0x34
 800a71a:	fb01 f303 	mul.w	r3, r1, r3
 800a71e:	4413      	add	r3, r2
 800a720:	3391      	adds	r3, #145	@ 0x91
 800a722:	2201      	movs	r2, #1
 800a724:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a72c:	4619      	mov	r1, r3
 800a72e:	693a      	ldr	r2, [r7, #16]
 800a730:	2334      	movs	r3, #52	@ 0x34
 800a732:	fb01 f303 	mul.w	r3, r1, r3
 800a736:	4413      	add	r3, r2
 800a738:	3390      	adds	r3, #144	@ 0x90
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	2b08      	cmp	r3, #8
 800a73e:	f200 8242 	bhi.w	800abc6 <USBH_MSC_Process+0x4f6>
 800a742:	a201      	add	r2, pc, #4	@ (adr r2, 800a748 <USBH_MSC_Process+0x78>)
 800a744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a748:	0800a76d 	.word	0x0800a76d
 800a74c:	0800abc7 	.word	0x0800abc7
 800a750:	0800a835 	.word	0x0800a835
 800a754:	0800a9b9 	.word	0x0800a9b9
 800a758:	0800a793 	.word	0x0800a793
 800a75c:	0800aa85 	.word	0x0800aa85
 800a760:	0800abc7 	.word	0x0800abc7
 800a764:	0800abc7 	.word	0x0800abc7
 800a768:	0800ab99 	.word	0x0800ab99
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a772:	4619      	mov	r1, r3
 800a774:	693a      	ldr	r2, [r7, #16]
 800a776:	2334      	movs	r3, #52	@ 0x34
 800a778:	fb01 f303 	mul.w	r3, r1, r3
 800a77c:	4413      	add	r3, r2
 800a77e:	3390      	adds	r3, #144	@ 0x90
 800a780:	2204      	movs	r2, #4
 800a782:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
            break;
 800a790:	e222      	b.n	800abd8 <USBH_MSC_Process+0x508>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a798:	b2d9      	uxtb	r1, r3
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	2334      	movs	r3, #52	@ 0x34
 800a7a4:	fb02 f303 	mul.w	r3, r2, r3
 800a7a8:	3398      	adds	r3, #152	@ 0x98
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	3307      	adds	r3, #7
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 ff69 	bl	800b68a <USBH_MSC_SCSI_Inquiry>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a7bc:	7bfb      	ldrb	r3, [r7, #15]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d10b      	bne.n	800a7da <USBH_MSC_Process+0x10a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	2334      	movs	r3, #52	@ 0x34
 800a7ce:	fb01 f303 	mul.w	r3, r1, r3
 800a7d2:	4413      	add	r3, r2
 800a7d4:	3390      	adds	r3, #144	@ 0x90
 800a7d6:	2202      	movs	r2, #2
 800a7d8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800a7da:	7bfb      	ldrb	r3, [r7, #15]
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d10c      	bne.n	800a7fa <USBH_MSC_Process+0x12a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	693a      	ldr	r2, [r7, #16]
 800a7ea:	2334      	movs	r3, #52	@ 0x34
 800a7ec:	fb01 f303 	mul.w	r3, r1, r3
 800a7f0:	4413      	add	r3, r2
 800a7f2:	3390      	adds	r3, #144	@ 0x90
 800a7f4:	2205      	movs	r2, #5
 800a7f6:	701a      	strb	r2, [r3, #0]
            break;
 800a7f8:	e1e7      	b.n	800abca <USBH_MSC_Process+0x4fa>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a7fa:	7bfb      	ldrb	r3, [r7, #15]
 800a7fc:	2b04      	cmp	r3, #4
 800a7fe:	f040 81e4 	bne.w	800abca <USBH_MSC_Process+0x4fa>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a808:	4619      	mov	r1, r3
 800a80a:	693a      	ldr	r2, [r7, #16]
 800a80c:	2334      	movs	r3, #52	@ 0x34
 800a80e:	fb01 f303 	mul.w	r3, r1, r3
 800a812:	4413      	add	r3, r2
 800a814:	3390      	adds	r3, #144	@ 0x90
 800a816:	2201      	movs	r2, #1
 800a818:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a820:	4619      	mov	r1, r3
 800a822:	693a      	ldr	r2, [r7, #16]
 800a824:	2334      	movs	r3, #52	@ 0x34
 800a826:	fb01 f303 	mul.w	r3, r1, r3
 800a82a:	4413      	add	r3, r2
 800a82c:	3391      	adds	r3, #145	@ 0x91
 800a82e:	2202      	movs	r2, #2
 800a830:	701a      	strb	r2, [r3, #0]
            break;
 800a832:	e1ca      	b.n	800abca <USBH_MSC_Process+0x4fa>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	4619      	mov	r1, r3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 fe66 	bl	800b510 <USBH_MSC_SCSI_TestUnitReady>
 800a844:	4603      	mov	r3, r0
 800a846:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800a848:	7bbb      	ldrb	r3, [r7, #14]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d149      	bne.n	800a8e2 <USBH_MSC_Process+0x212>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a854:	4619      	mov	r1, r3
 800a856:	693a      	ldr	r2, [r7, #16]
 800a858:	2334      	movs	r3, #52	@ 0x34
 800a85a:	fb01 f303 	mul.w	r3, r1, r3
 800a85e:	4413      	add	r3, r2
 800a860:	3392      	adds	r3, #146	@ 0x92
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00c      	beq.n	800a882 <USBH_MSC_Process+0x1b2>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a86e:	4619      	mov	r1, r3
 800a870:	693a      	ldr	r2, [r7, #16]
 800a872:	2334      	movs	r3, #52	@ 0x34
 800a874:	fb01 f303 	mul.w	r3, r1, r3
 800a878:	4413      	add	r3, r2
 800a87a:	33c1      	adds	r3, #193	@ 0xc1
 800a87c:	2201      	movs	r2, #1
 800a87e:	701a      	strb	r2, [r3, #0]
 800a880:	e00b      	b.n	800a89a <USBH_MSC_Process+0x1ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a888:	4619      	mov	r1, r3
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	2334      	movs	r3, #52	@ 0x34
 800a88e:	fb01 f303 	mul.w	r3, r1, r3
 800a892:	4413      	add	r3, r2
 800a894:	33c1      	adds	r3, #193	@ 0xc1
 800a896:	2200      	movs	r2, #0
 800a898:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	2334      	movs	r3, #52	@ 0x34
 800a8a6:	fb01 f303 	mul.w	r3, r1, r3
 800a8aa:	4413      	add	r3, r2
 800a8ac:	3390      	adds	r3, #144	@ 0x90
 800a8ae:	2203      	movs	r2, #3
 800a8b0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	693a      	ldr	r2, [r7, #16]
 800a8bc:	2334      	movs	r3, #52	@ 0x34
 800a8be:	fb01 f303 	mul.w	r3, r1, r3
 800a8c2:	4413      	add	r3, r2
 800a8c4:	3391      	adds	r3, #145	@ 0x91
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	693a      	ldr	r2, [r7, #16]
 800a8d4:	2334      	movs	r3, #52	@ 0x34
 800a8d6:	fb01 f303 	mul.w	r3, r1, r3
 800a8da:	4413      	add	r3, r2
 800a8dc:	3392      	adds	r3, #146	@ 0x92
 800a8de:	2200      	movs	r2, #0
 800a8e0:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800a8e2:	7bbb      	ldrb	r3, [r7, #14]
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d14a      	bne.n	800a97e <USBH_MSC_Process+0x2ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	693a      	ldr	r2, [r7, #16]
 800a8f2:	2334      	movs	r3, #52	@ 0x34
 800a8f4:	fb01 f303 	mul.w	r3, r1, r3
 800a8f8:	4413      	add	r3, r2
 800a8fa:	3392      	adds	r3, #146	@ 0x92
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d00c      	beq.n	800a91c <USBH_MSC_Process+0x24c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a908:	4619      	mov	r1, r3
 800a90a:	693a      	ldr	r2, [r7, #16]
 800a90c:	2334      	movs	r3, #52	@ 0x34
 800a90e:	fb01 f303 	mul.w	r3, r1, r3
 800a912:	4413      	add	r3, r2
 800a914:	33c1      	adds	r3, #193	@ 0xc1
 800a916:	2201      	movs	r2, #1
 800a918:	701a      	strb	r2, [r3, #0]
 800a91a:	e00b      	b.n	800a934 <USBH_MSC_Process+0x264>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a922:	4619      	mov	r1, r3
 800a924:	693a      	ldr	r2, [r7, #16]
 800a926:	2334      	movs	r3, #52	@ 0x34
 800a928:	fb01 f303 	mul.w	r3, r1, r3
 800a92c:	4413      	add	r3, r2
 800a92e:	33c1      	adds	r3, #193	@ 0xc1
 800a930:	2200      	movs	r2, #0
 800a932:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a93a:	4619      	mov	r1, r3
 800a93c:	693a      	ldr	r2, [r7, #16]
 800a93e:	2334      	movs	r3, #52	@ 0x34
 800a940:	fb01 f303 	mul.w	r3, r1, r3
 800a944:	4413      	add	r3, r2
 800a946:	3390      	adds	r3, #144	@ 0x90
 800a948:	2205      	movs	r2, #5
 800a94a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a952:	4619      	mov	r1, r3
 800a954:	693a      	ldr	r2, [r7, #16]
 800a956:	2334      	movs	r3, #52	@ 0x34
 800a958:	fb01 f303 	mul.w	r3, r1, r3
 800a95c:	4413      	add	r3, r2
 800a95e:	3391      	adds	r3, #145	@ 0x91
 800a960:	2201      	movs	r2, #1
 800a962:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a96a:	4619      	mov	r1, r3
 800a96c:	693a      	ldr	r2, [r7, #16]
 800a96e:	2334      	movs	r3, #52	@ 0x34
 800a970:	fb01 f303 	mul.w	r3, r1, r3
 800a974:	4413      	add	r3, r2
 800a976:	3392      	adds	r3, #146	@ 0x92
 800a978:	2202      	movs	r2, #2
 800a97a:	701a      	strb	r2, [r3, #0]
            break;
 800a97c:	e127      	b.n	800abce <USBH_MSC_Process+0x4fe>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800a97e:	7bbb      	ldrb	r3, [r7, #14]
 800a980:	2b04      	cmp	r3, #4
 800a982:	f040 8124 	bne.w	800abce <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a98c:	4619      	mov	r1, r3
 800a98e:	693a      	ldr	r2, [r7, #16]
 800a990:	2334      	movs	r3, #52	@ 0x34
 800a992:	fb01 f303 	mul.w	r3, r1, r3
 800a996:	4413      	add	r3, r2
 800a998:	3390      	adds	r3, #144	@ 0x90
 800a99a:	2201      	movs	r2, #1
 800a99c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	693a      	ldr	r2, [r7, #16]
 800a9a8:	2334      	movs	r3, #52	@ 0x34
 800a9aa:	fb01 f303 	mul.w	r3, r1, r3
 800a9ae:	4413      	add	r3, r2
 800a9b0:	3391      	adds	r3, #145	@ 0x91
 800a9b2:	2202      	movs	r2, #2
 800a9b4:	701a      	strb	r2, [r3, #0]
            break;
 800a9b6:	e10a      	b.n	800abce <USBH_MSC_Process+0x4fe>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a9be:	b2d9      	uxtb	r1, r3
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	2334      	movs	r3, #52	@ 0x34
 800a9ca:	fb02 f303 	mul.w	r3, r2, r3
 800a9ce:	3390      	adds	r3, #144	@ 0x90
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 fddc 	bl	800b596 <USBH_MSC_SCSI_ReadCapacity>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a9e2:	7bfb      	ldrb	r3, [r7, #15]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d120      	bne.n	800aa2a <USBH_MSC_Process+0x35a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	693a      	ldr	r2, [r7, #16]
 800a9f2:	2334      	movs	r3, #52	@ 0x34
 800a9f4:	fb01 f303 	mul.w	r3, r1, r3
 800a9f8:	4413      	add	r3, r2
 800a9fa:	3390      	adds	r3, #144	@ 0x90
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800aa06:	4619      	mov	r1, r3
 800aa08:	693a      	ldr	r2, [r7, #16]
 800aa0a:	2334      	movs	r3, #52	@ 0x34
 800aa0c:	fb01 f303 	mul.w	r3, r1, r3
 800aa10:	4413      	add	r3, r2
 800aa12:	3391      	adds	r3, #145	@ 0x91
 800aa14:	2200      	movs	r2, #0
 800aa16:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800aa1e:	3301      	adds	r3, #1
 800aa20:	b29a      	uxth	r2, r3
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800aa28:	e0d3      	b.n	800abd2 <USBH_MSC_Process+0x502>
            else if (scsi_status == USBH_FAIL)
 800aa2a:	7bfb      	ldrb	r3, [r7, #15]
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d10c      	bne.n	800aa4a <USBH_MSC_Process+0x37a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800aa36:	4619      	mov	r1, r3
 800aa38:	693a      	ldr	r2, [r7, #16]
 800aa3a:	2334      	movs	r3, #52	@ 0x34
 800aa3c:	fb01 f303 	mul.w	r3, r1, r3
 800aa40:	4413      	add	r3, r2
 800aa42:	3390      	adds	r3, #144	@ 0x90
 800aa44:	2205      	movs	r2, #5
 800aa46:	701a      	strb	r2, [r3, #0]
            break;
 800aa48:	e0c3      	b.n	800abd2 <USBH_MSC_Process+0x502>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800aa4a:	7bfb      	ldrb	r3, [r7, #15]
 800aa4c:	2b04      	cmp	r3, #4
 800aa4e:	f040 80c0 	bne.w	800abd2 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800aa58:	4619      	mov	r1, r3
 800aa5a:	693a      	ldr	r2, [r7, #16]
 800aa5c:	2334      	movs	r3, #52	@ 0x34
 800aa5e:	fb01 f303 	mul.w	r3, r1, r3
 800aa62:	4413      	add	r3, r2
 800aa64:	3390      	adds	r3, #144	@ 0x90
 800aa66:	2201      	movs	r2, #1
 800aa68:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800aa70:	4619      	mov	r1, r3
 800aa72:	693a      	ldr	r2, [r7, #16]
 800aa74:	2334      	movs	r3, #52	@ 0x34
 800aa76:	fb01 f303 	mul.w	r3, r1, r3
 800aa7a:	4413      	add	r3, r2
 800aa7c:	3391      	adds	r3, #145	@ 0x91
 800aa7e:	2202      	movs	r2, #2
 800aa80:	701a      	strb	r2, [r3, #0]
            break;
 800aa82:	e0a6      	b.n	800abd2 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800aa8a:	b2d9      	uxtb	r1, r3
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800aa92:	461a      	mov	r2, r3
 800aa94:	2334      	movs	r3, #52	@ 0x34
 800aa96:	fb02 f303 	mul.w	r3, r2, r3
 800aa9a:	3398      	adds	r3, #152	@ 0x98
 800aa9c:	693a      	ldr	r2, [r7, #16]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 fe95 	bl	800b7d4 <USBH_MSC_SCSI_RequestSense>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800aaae:	7bfb      	ldrb	r3, [r7, #15]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d145      	bne.n	800ab40 <USBH_MSC_Process+0x470>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800aaba:	4619      	mov	r1, r3
 800aabc:	693a      	ldr	r2, [r7, #16]
 800aabe:	2334      	movs	r3, #52	@ 0x34
 800aac0:	fb01 f303 	mul.w	r3, r1, r3
 800aac4:	4413      	add	r3, r2
 800aac6:	339c      	adds	r3, #156	@ 0x9c
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	2b06      	cmp	r3, #6
 800aacc:	d00c      	beq.n	800aae8 <USBH_MSC_Process+0x418>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800aad4:	4619      	mov	r1, r3
 800aad6:	693a      	ldr	r2, [r7, #16]
 800aad8:	2334      	movs	r3, #52	@ 0x34
 800aada:	fb01 f303 	mul.w	r3, r1, r3
 800aade:	4413      	add	r3, r2
 800aae0:	339c      	adds	r3, #156	@ 0x9c
 800aae2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d117      	bne.n	800ab18 <USBH_MSC_Process+0x448>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800aaf4:	1ad3      	subs	r3, r2, r3
 800aaf6:	f242 720f 	movw	r2, #9999	@ 0x270f
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d80c      	bhi.n	800ab18 <USBH_MSC_Process+0x448>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ab04:	4619      	mov	r1, r3
 800ab06:	693a      	ldr	r2, [r7, #16]
 800ab08:	2334      	movs	r3, #52	@ 0x34
 800ab0a:	fb01 f303 	mul.w	r3, r1, r3
 800ab0e:	4413      	add	r3, r2
 800ab10:	3390      	adds	r3, #144	@ 0x90
 800ab12:	2202      	movs	r2, #2
 800ab14:	701a      	strb	r2, [r3, #0]
                  break;
 800ab16:	e05f      	b.n	800abd8 <USBH_MSC_Process+0x508>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ab1e:	4619      	mov	r1, r3
 800ab20:	693a      	ldr	r2, [r7, #16]
 800ab22:	2334      	movs	r3, #52	@ 0x34
 800ab24:	fb01 f303 	mul.w	r3, r1, r3
 800ab28:	4413      	add	r3, r2
 800ab2a:	3390      	adds	r3, #144	@ 0x90
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ab36:	3301      	adds	r3, #1
 800ab38:	b29a      	uxth	r2, r3
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            if (scsi_status == USBH_FAIL)
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	d10c      	bne.n	800ab60 <USBH_MSC_Process+0x490>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	693a      	ldr	r2, [r7, #16]
 800ab50:	2334      	movs	r3, #52	@ 0x34
 800ab52:	fb01 f303 	mul.w	r3, r1, r3
 800ab56:	4413      	add	r3, r2
 800ab58:	3390      	adds	r3, #144	@ 0x90
 800ab5a:	2208      	movs	r2, #8
 800ab5c:	701a      	strb	r2, [r3, #0]
            break;
 800ab5e:	e03a      	b.n	800abd6 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ab60:	7bfb      	ldrb	r3, [r7, #15]
 800ab62:	2b04      	cmp	r3, #4
 800ab64:	d137      	bne.n	800abd6 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	2334      	movs	r3, #52	@ 0x34
 800ab72:	fb01 f303 	mul.w	r3, r1, r3
 800ab76:	4413      	add	r3, r2
 800ab78:	3390      	adds	r3, #144	@ 0x90
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ab84:	4619      	mov	r1, r3
 800ab86:	693a      	ldr	r2, [r7, #16]
 800ab88:	2334      	movs	r3, #52	@ 0x34
 800ab8a:	fb01 f303 	mul.w	r3, r1, r3
 800ab8e:	4413      	add	r3, r2
 800ab90:	3391      	adds	r3, #145	@ 0x91
 800ab92:	2202      	movs	r2, #2
 800ab94:	701a      	strb	r2, [r3, #0]
            break;
 800ab96:	e01e      	b.n	800abd6 <USBH_MSC_Process+0x506>
            MSC_Handle->current_lun++;
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800ab9e:	3301      	adds	r3, #1
 800aba0:	b29a      	uxth	r2, r3
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800aba8:	e016      	b.n	800abd8 <USBH_MSC_Process+0x508>
        MSC_Handle->current_lun = 0U;
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	2200      	movs	r2, #0
 800abae:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_IDLE;
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	2201      	movs	r2, #1
 800abb6:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800abbe:	2102      	movs	r1, #2
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	4798      	blx	r3
      break;
 800abc4:	e00c      	b.n	800abe0 <USBH_MSC_Process+0x510>
            break;
 800abc6:	bf00      	nop
 800abc8:	e00a      	b.n	800abe0 <USBH_MSC_Process+0x510>
            break;
 800abca:	bf00      	nop
 800abcc:	e008      	b.n	800abe0 <USBH_MSC_Process+0x510>
            break;
 800abce:	bf00      	nop
 800abd0:	e006      	b.n	800abe0 <USBH_MSC_Process+0x510>
            break;
 800abd2:	bf00      	nop
 800abd4:	e004      	b.n	800abe0 <USBH_MSC_Process+0x510>
            break;
 800abd6:	bf00      	nop
      break;
 800abd8:	e002      	b.n	800abe0 <USBH_MSC_Process+0x510>
      error = USBH_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	75fb      	strb	r3, [r7, #23]
      break;
 800abde:	bf00      	nop
  }
  return error;
 800abe0:	7dfb      	ldrb	r3, [r7, #23]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3718      	adds	r7, #24
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop

0800abec <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800abf4:	2300      	movs	r3, #0
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	370c      	adds	r7, #12
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b088      	sub	sp, #32
 800ac06:	af02      	add	r7, sp, #8
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac14:	69db      	ldr	r3, [r3, #28]
 800ac16:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800ac20:	78fb      	ldrb	r3, [r7, #3]
 800ac22:	693a      	ldr	r2, [r7, #16]
 800ac24:	2134      	movs	r1, #52	@ 0x34
 800ac26:	fb01 f303 	mul.w	r3, r1, r3
 800ac2a:	4413      	add	r3, r2
 800ac2c:	3390      	adds	r3, #144	@ 0x90
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	2b07      	cmp	r3, #7
 800ac32:	d03c      	beq.n	800acae <USBH_MSC_RdWrProcess+0xac>
 800ac34:	2b07      	cmp	r3, #7
 800ac36:	f300 80a7 	bgt.w	800ad88 <USBH_MSC_RdWrProcess+0x186>
 800ac3a:	2b05      	cmp	r3, #5
 800ac3c:	d06c      	beq.n	800ad18 <USBH_MSC_RdWrProcess+0x116>
 800ac3e:	2b06      	cmp	r3, #6
 800ac40:	f040 80a2 	bne.w	800ad88 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800ac44:	78f9      	ldrb	r1, [r7, #3]
 800ac46:	2300      	movs	r3, #0
 800ac48:	9300      	str	r3, [sp, #0]
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 fea4 	bl	800b99c <USBH_MSC_SCSI_Read>
 800ac54:	4603      	mov	r3, r0
 800ac56:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d10b      	bne.n	800ac76 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800ac5e:	78fb      	ldrb	r3, [r7, #3]
 800ac60:	693a      	ldr	r2, [r7, #16]
 800ac62:	2134      	movs	r1, #52	@ 0x34
 800ac64:	fb01 f303 	mul.w	r3, r1, r3
 800ac68:	4413      	add	r3, r2
 800ac6a:	3390      	adds	r3, #144	@ 0x90
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800ac70:	2300      	movs	r3, #0
 800ac72:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ac74:	e08a      	b.n	800ad8c <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800ac76:	7bfb      	ldrb	r3, [r7, #15]
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	d109      	bne.n	800ac90 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800ac7c:	78fb      	ldrb	r3, [r7, #3]
 800ac7e:	693a      	ldr	r2, [r7, #16]
 800ac80:	2134      	movs	r1, #52	@ 0x34
 800ac82:	fb01 f303 	mul.w	r3, r1, r3
 800ac86:	4413      	add	r3, r2
 800ac88:	3390      	adds	r3, #144	@ 0x90
 800ac8a:	2205      	movs	r2, #5
 800ac8c:	701a      	strb	r2, [r3, #0]
      break;
 800ac8e:	e07d      	b.n	800ad8c <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ac90:	7bfb      	ldrb	r3, [r7, #15]
 800ac92:	2b04      	cmp	r3, #4
 800ac94:	d17a      	bne.n	800ad8c <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800ac96:	78fb      	ldrb	r3, [r7, #3]
 800ac98:	693a      	ldr	r2, [r7, #16]
 800ac9a:	2134      	movs	r1, #52	@ 0x34
 800ac9c:	fb01 f303 	mul.w	r3, r1, r3
 800aca0:	4413      	add	r3, r2
 800aca2:	3390      	adds	r3, #144	@ 0x90
 800aca4:	2208      	movs	r2, #8
 800aca6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800aca8:	2302      	movs	r3, #2
 800acaa:	75fb      	strb	r3, [r7, #23]
      break;
 800acac:	e06e      	b.n	800ad8c <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800acae:	78f9      	ldrb	r1, [r7, #3]
 800acb0:	2300      	movs	r3, #0
 800acb2:	9300      	str	r3, [sp, #0]
 800acb4:	2300      	movs	r3, #0
 800acb6:	2200      	movs	r2, #0
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 fe04 	bl	800b8c6 <USBH_MSC_SCSI_Write>
 800acbe:	4603      	mov	r3, r0
 800acc0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800acc2:	7bfb      	ldrb	r3, [r7, #15]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d10b      	bne.n	800ace0 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800acc8:	78fb      	ldrb	r3, [r7, #3]
 800acca:	693a      	ldr	r2, [r7, #16]
 800accc:	2134      	movs	r1, #52	@ 0x34
 800acce:	fb01 f303 	mul.w	r3, r1, r3
 800acd2:	4413      	add	r3, r2
 800acd4:	3390      	adds	r3, #144	@ 0x90
 800acd6:	2201      	movs	r2, #1
 800acd8:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800acda:	2300      	movs	r3, #0
 800acdc:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800acde:	e057      	b.n	800ad90 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d109      	bne.n	800acfa <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800ace6:	78fb      	ldrb	r3, [r7, #3]
 800ace8:	693a      	ldr	r2, [r7, #16]
 800acea:	2134      	movs	r1, #52	@ 0x34
 800acec:	fb01 f303 	mul.w	r3, r1, r3
 800acf0:	4413      	add	r3, r2
 800acf2:	3390      	adds	r3, #144	@ 0x90
 800acf4:	2205      	movs	r2, #5
 800acf6:	701a      	strb	r2, [r3, #0]
      break;
 800acf8:	e04a      	b.n	800ad90 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800acfa:	7bfb      	ldrb	r3, [r7, #15]
 800acfc:	2b04      	cmp	r3, #4
 800acfe:	d147      	bne.n	800ad90 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800ad00:	78fb      	ldrb	r3, [r7, #3]
 800ad02:	693a      	ldr	r2, [r7, #16]
 800ad04:	2134      	movs	r1, #52	@ 0x34
 800ad06:	fb01 f303 	mul.w	r3, r1, r3
 800ad0a:	4413      	add	r3, r2
 800ad0c:	3390      	adds	r3, #144	@ 0x90
 800ad0e:	2208      	movs	r2, #8
 800ad10:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800ad12:	2302      	movs	r3, #2
 800ad14:	75fb      	strb	r3, [r7, #23]
      break;
 800ad16:	e03b      	b.n	800ad90 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800ad18:	78fb      	ldrb	r3, [r7, #3]
 800ad1a:	2234      	movs	r2, #52	@ 0x34
 800ad1c:	fb02 f303 	mul.w	r3, r2, r3
 800ad20:	3398      	adds	r3, #152	@ 0x98
 800ad22:	693a      	ldr	r2, [r7, #16]
 800ad24:	4413      	add	r3, r2
 800ad26:	1d1a      	adds	r2, r3, #4
 800ad28:	78fb      	ldrb	r3, [r7, #3]
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fd51 	bl	800b7d4 <USBH_MSC_SCSI_RequestSense>
 800ad32:	4603      	mov	r3, r0
 800ad34:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800ad36:	7bfb      	ldrb	r3, [r7, #15]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d113      	bne.n	800ad64 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800ad3c:	78fb      	ldrb	r3, [r7, #3]
 800ad3e:	693a      	ldr	r2, [r7, #16]
 800ad40:	2134      	movs	r1, #52	@ 0x34
 800ad42:	fb01 f303 	mul.w	r3, r1, r3
 800ad46:	4413      	add	r3, r2
 800ad48:	3390      	adds	r3, #144	@ 0x90
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800ad4e:	78fb      	ldrb	r3, [r7, #3]
 800ad50:	693a      	ldr	r2, [r7, #16]
 800ad52:	2134      	movs	r1, #52	@ 0x34
 800ad54:	fb01 f303 	mul.w	r3, r1, r3
 800ad58:	4413      	add	r3, r2
 800ad5a:	3391      	adds	r3, #145	@ 0x91
 800ad5c:	2202      	movs	r2, #2
 800ad5e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800ad60:	2302      	movs	r3, #2
 800ad62:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800ad64:	7bfb      	ldrb	r3, [r7, #15]
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	d014      	beq.n	800ad94 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ad6a:	7bfb      	ldrb	r3, [r7, #15]
 800ad6c:	2b04      	cmp	r3, #4
 800ad6e:	d111      	bne.n	800ad94 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800ad70:	78fb      	ldrb	r3, [r7, #3]
 800ad72:	693a      	ldr	r2, [r7, #16]
 800ad74:	2134      	movs	r1, #52	@ 0x34
 800ad76:	fb01 f303 	mul.w	r3, r1, r3
 800ad7a:	4413      	add	r3, r2
 800ad7c:	3390      	adds	r3, #144	@ 0x90
 800ad7e:	2208      	movs	r2, #8
 800ad80:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800ad82:	2302      	movs	r3, #2
 800ad84:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ad86:	e005      	b.n	800ad94 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800ad88:	bf00      	nop
 800ad8a:	e004      	b.n	800ad96 <USBH_MSC_RdWrProcess+0x194>
      break;
 800ad8c:	bf00      	nop
 800ad8e:	e002      	b.n	800ad96 <USBH_MSC_RdWrProcess+0x194>
      break;
 800ad90:	bf00      	nop
 800ad92:	e000      	b.n	800ad96 <USBH_MSC_RdWrProcess+0x194>
      break;
 800ad94:	bf00      	nop

  }
  return error;
 800ad96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3718      	adds	r7, #24
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b085      	sub	sp, #20
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	460b      	mov	r3, r1
 800adaa:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800adb2:	69db      	ldr	r3, [r3, #28]
 800adb4:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	2b0b      	cmp	r3, #11
 800adbe:	d10c      	bne.n	800adda <USBH_MSC_UnitIsReady+0x3a>
 800adc0:	78fb      	ldrb	r3, [r7, #3]
 800adc2:	68ba      	ldr	r2, [r7, #8]
 800adc4:	2134      	movs	r1, #52	@ 0x34
 800adc6:	fb01 f303 	mul.w	r3, r1, r3
 800adca:	4413      	add	r3, r2
 800adcc:	3391      	adds	r3, #145	@ 0x91
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d102      	bne.n	800adda <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800add4:	2301      	movs	r3, #1
 800add6:	73fb      	strb	r3, [r7, #15]
 800add8:	e001      	b.n	800adde <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800adda:	2300      	movs	r3, #0
 800addc:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800adde:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3714      	adds	r7, #20
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b086      	sub	sp, #24
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	460b      	mov	r3, r1
 800adf6:	607a      	str	r2, [r7, #4]
 800adf8:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ae00:	69db      	ldr	r3, [r3, #28]
 800ae02:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	2b0b      	cmp	r3, #11
 800ae0c:	d10d      	bne.n	800ae2a <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800ae0e:	7afb      	ldrb	r3, [r7, #11]
 800ae10:	2234      	movs	r2, #52	@ 0x34
 800ae12:	fb02 f303 	mul.w	r3, r2, r3
 800ae16:	3390      	adds	r3, #144	@ 0x90
 800ae18:	697a      	ldr	r2, [r7, #20]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	2234      	movs	r2, #52	@ 0x34
 800ae1e:	4619      	mov	r1, r3
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f006 f9bb 	bl	801119c <memcpy>
    return USBH_OK;
 800ae26:	2300      	movs	r3, #0
 800ae28:	e000      	b.n	800ae2c <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800ae2a:	2302      	movs	r3, #2
  }
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3718      	adds	r7, #24
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b088      	sub	sp, #32
 800ae38:	af02      	add	r7, sp, #8
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	607a      	str	r2, [r7, #4]
 800ae3e:	603b      	str	r3, [r7, #0]
 800ae40:	460b      	mov	r3, r1
 800ae42:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ae4a:	69db      	ldr	r3, [r3, #28]
 800ae4c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00e      	beq.n	800ae78 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800ae60:	2b0b      	cmp	r3, #11
 800ae62:	d109      	bne.n	800ae78 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800ae64:	7afb      	ldrb	r3, [r7, #11]
 800ae66:	697a      	ldr	r2, [r7, #20]
 800ae68:	2134      	movs	r1, #52	@ 0x34
 800ae6a:	fb01 f303 	mul.w	r3, r1, r3
 800ae6e:	4413      	add	r3, r2
 800ae70:	3390      	adds	r3, #144	@ 0x90
 800ae72:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d001      	beq.n	800ae7c <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800ae78:	2302      	movs	r3, #2
 800ae7a:	e040      	b.n	800aefe <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	2206      	movs	r2, #6
 800ae80:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800ae82:	7afb      	ldrb	r3, [r7, #11]
 800ae84:	697a      	ldr	r2, [r7, #20]
 800ae86:	2134      	movs	r1, #52	@ 0x34
 800ae88:	fb01 f303 	mul.w	r3, r1, r3
 800ae8c:	4413      	add	r3, r2
 800ae8e:	3390      	adds	r3, #144	@ 0x90
 800ae90:	2206      	movs	r2, #6
 800ae92:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800ae94:	7afb      	ldrb	r3, [r7, #11]
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800ae9e:	7af9      	ldrb	r1, [r7, #11]
 800aea0:	6a3b      	ldr	r3, [r7, #32]
 800aea2:	9300      	str	r3, [sp, #0]
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f000 fd77 	bl	800b99c <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800aeb4:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800aeb6:	e016      	b.n	800aee6 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	1ad2      	subs	r2, r2, r3
 800aec2:	6a3b      	ldr	r3, [r7, #32]
 800aec4:	f242 7110 	movw	r1, #10000	@ 0x2710
 800aec8:	fb01 f303 	mul.w	r3, r1, r3
 800aecc:	429a      	cmp	r2, r3
 800aece:	d805      	bhi.n	800aedc <USBH_MSC_Read+0xa8>
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d104      	bne.n	800aee6 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	2201      	movs	r2, #1
 800aee0:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800aee2:	2302      	movs	r3, #2
 800aee4:	e00b      	b.n	800aefe <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800aee6:	7afb      	ldrb	r3, [r7, #11]
 800aee8:	4619      	mov	r1, r3
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f7ff fe89 	bl	800ac02 <USBH_MSC_RdWrProcess>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d0e0      	beq.n	800aeb8 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	2201      	movs	r2, #1
 800aefa:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3718      	adds	r7, #24
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b088      	sub	sp, #32
 800af0a:	af02      	add	r7, sp, #8
 800af0c:	60f8      	str	r0, [r7, #12]
 800af0e:	607a      	str	r2, [r7, #4]
 800af10:	603b      	str	r3, [r7, #0]
 800af12:	460b      	mov	r3, r1
 800af14:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800af1c:	69db      	ldr	r3, [r3, #28]
 800af1e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800af26:	b2db      	uxtb	r3, r3
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00e      	beq.n	800af4a <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800af32:	2b0b      	cmp	r3, #11
 800af34:	d109      	bne.n	800af4a <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800af36:	7afb      	ldrb	r3, [r7, #11]
 800af38:	697a      	ldr	r2, [r7, #20]
 800af3a:	2134      	movs	r1, #52	@ 0x34
 800af3c:	fb01 f303 	mul.w	r3, r1, r3
 800af40:	4413      	add	r3, r2
 800af42:	3390      	adds	r3, #144	@ 0x90
 800af44:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800af46:	2b01      	cmp	r3, #1
 800af48:	d001      	beq.n	800af4e <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800af4a:	2302      	movs	r3, #2
 800af4c:	e040      	b.n	800afd0 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2207      	movs	r2, #7
 800af52:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800af54:	7afb      	ldrb	r3, [r7, #11]
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	2134      	movs	r1, #52	@ 0x34
 800af5a:	fb01 f303 	mul.w	r3, r1, r3
 800af5e:	4413      	add	r3, r2
 800af60:	3390      	adds	r3, #144	@ 0x90
 800af62:	2207      	movs	r2, #7
 800af64:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800af66:	7afb      	ldrb	r3, [r7, #11]
 800af68:	b29a      	uxth	r2, r3
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800af70:	7af9      	ldrb	r1, [r7, #11]
 800af72:	6a3b      	ldr	r3, [r7, #32]
 800af74:	9300      	str	r3, [sp, #0]
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	68f8      	ldr	r0, [r7, #12]
 800af7c:	f000 fca3 	bl	800b8c6 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800af86:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800af88:	e016      	b.n	800afb8 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	1ad2      	subs	r2, r2, r3
 800af94:	6a3b      	ldr	r3, [r7, #32]
 800af96:	f242 7110 	movw	r1, #10000	@ 0x2710
 800af9a:	fb01 f303 	mul.w	r3, r1, r3
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d805      	bhi.n	800afae <USBH_MSC_Write+0xa8>
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d104      	bne.n	800afb8 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	2201      	movs	r2, #1
 800afb2:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800afb4:	2302      	movs	r3, #2
 800afb6:	e00b      	b.n	800afd0 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800afb8:	7afb      	ldrb	r3, [r7, #11]
 800afba:	4619      	mov	r1, r3
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f7ff fe20 	bl	800ac02 <USBH_MSC_RdWrProcess>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d0e0      	beq.n	800af8a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	2201      	movs	r2, #1
 800afcc:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3718      	adds	r7, #24
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2221      	movs	r2, #33	@ 0x21
 800afe4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	22ff      	movs	r2, #255	@ 0xff
 800afea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800affe:	2200      	movs	r2, #0
 800b000:	2100      	movs	r1, #0
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f001 fe95 	bl	800cd32 <USBH_CtlReq>
 800b008:	4603      	mov	r3, r0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b082      	sub	sp, #8
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	22a1      	movs	r2, #161	@ 0xa1
 800b020:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	22fe      	movs	r2, #254	@ 0xfe
 800b026:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2200      	movs	r2, #0
 800b02c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800b03a:	2201      	movs	r2, #1
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f001 fe77 	bl	800cd32 <USBH_CtlReq>
 800b044:	4603      	mov	r3, r0
}
 800b046:	4618      	mov	r0, r3
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
	...

0800b050 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b05e:	69db      	ldr	r3, [r3, #28]
 800b060:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	4a09      	ldr	r2, [pc, #36]	@ (800b08c <USBH_MSC_BOT_Init+0x3c>)
 800b066:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	4a09      	ldr	r2, [pc, #36]	@ (800b090 <USBH_MSC_BOT_Init+0x40>)
 800b06c:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2201      	movs	r2, #1
 800b072:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2201      	movs	r2, #1
 800b07a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3714      	adds	r7, #20
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr
 800b08c:	43425355 	.word	0x43425355
 800b090:	20304050 	.word	0x20304050

0800b094 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b088      	sub	sp, #32
 800b098:	af02      	add	r7, sp, #8
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	460b      	mov	r3, r1
 800b09e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b0b6:	69db      	ldr	r3, [r3, #28]
 800b0b8:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	2b0a      	cmp	r3, #10
 800b0c8:	f200 819e 	bhi.w	800b408 <USBH_MSC_BOT_Process+0x374>
 800b0cc:	a201      	add	r2, pc, #4	@ (adr r2, 800b0d4 <USBH_MSC_BOT_Process+0x40>)
 800b0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d2:	bf00      	nop
 800b0d4:	0800b101 	.word	0x0800b101
 800b0d8:	0800b129 	.word	0x0800b129
 800b0dc:	0800b193 	.word	0x0800b193
 800b0e0:	0800b1b1 	.word	0x0800b1b1
 800b0e4:	0800b235 	.word	0x0800b235
 800b0e8:	0800b257 	.word	0x0800b257
 800b0ec:	0800b2ef 	.word	0x0800b2ef
 800b0f0:	0800b30b 	.word	0x0800b30b
 800b0f4:	0800b35d 	.word	0x0800b35d
 800b0f8:	0800b38d 	.word	0x0800b38d
 800b0fc:	0800b3ef 	.word	0x0800b3ef
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	78fa      	ldrb	r2, [r7, #3]
 800b104:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	2202      	movs	r2, #2
 800b10c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	795b      	ldrb	r3, [r3, #5]
 800b11a:	2201      	movs	r2, #1
 800b11c:	9200      	str	r2, [sp, #0]
 800b11e:	221f      	movs	r2, #31
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f002 f814 	bl	800d14e <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800b126:	e17e      	b.n	800b426 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	795b      	ldrb	r3, [r3, #5]
 800b12c:	4619      	mov	r1, r3
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f005 fe2a 	bl	8010d88 <USBH_LL_GetURBState>
 800b134:	4603      	mov	r3, r0
 800b136:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b138:	7d3b      	ldrb	r3, [r7, #20]
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d118      	bne.n	800b170 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00f      	beq.n	800b166 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800b14c:	b25b      	sxtb	r3, r3
 800b14e:	2b00      	cmp	r3, #0
 800b150:	da04      	bge.n	800b15c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	2203      	movs	r2, #3
 800b156:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b15a:	e157      	b.n	800b40c <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	2205      	movs	r2, #5
 800b160:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b164:	e152      	b.n	800b40c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	2207      	movs	r2, #7
 800b16a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b16e:	e14d      	b.n	800b40c <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b170:	7d3b      	ldrb	r3, [r7, #20]
 800b172:	2b02      	cmp	r3, #2
 800b174:	d104      	bne.n	800b180 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	2201      	movs	r2, #1
 800b17a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b17e:	e145      	b.n	800b40c <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800b180:	7d3b      	ldrb	r3, [r7, #20]
 800b182:	2b05      	cmp	r3, #5
 800b184:	f040 8142 	bne.w	800b40c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	220a      	movs	r2, #10
 800b18c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b190:	e13c      	b.n	800b40c <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	895a      	ldrh	r2, [r3, #10]
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	791b      	ldrb	r3, [r3, #4]
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f001 fff9 	bl	800d198 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	2204      	movs	r2, #4
 800b1aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 800b1ae:	e13a      	b.n	800b426 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	791b      	ldrb	r3, [r3, #4]
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f005 fde6 	bl	8010d88 <USBH_LL_GetURBState>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b1c0:	7d3b      	ldrb	r3, [r7, #20]
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d12d      	bne.n	800b222 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1ca:	693a      	ldr	r2, [r7, #16]
 800b1cc:	8952      	ldrh	r2, [r2, #10]
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d910      	bls.n	800b1f4 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1d8:	693a      	ldr	r2, [r7, #16]
 800b1da:	8952      	ldrh	r2, [r2, #10]
 800b1dc:	441a      	add	r2, r3
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1e8:	693a      	ldr	r2, [r7, #16]
 800b1ea:	8952      	ldrh	r2, [r2, #10]
 800b1ec:	1a9a      	subs	r2, r3, r2
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b1f2:	e002      	b.n	800b1fa <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d00a      	beq.n	800b218 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	895a      	ldrh	r2, [r3, #10]
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	791b      	ldrb	r3, [r3, #4]
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f001 ffc1 	bl	800d198 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800b216:	e0fb      	b.n	800b410 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	2207      	movs	r2, #7
 800b21c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b220:	e0f6      	b.n	800b410 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800b222:	7d3b      	ldrb	r3, [r7, #20]
 800b224:	2b05      	cmp	r3, #5
 800b226:	f040 80f3 	bne.w	800b410 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	2209      	movs	r2, #9
 800b22e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b232:	e0ed      	b.n	800b410 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	891a      	ldrh	r2, [r3, #8]
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	795b      	ldrb	r3, [r3, #5]
 800b242:	2001      	movs	r0, #1
 800b244:	9000      	str	r0, [sp, #0]
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f001 ff81 	bl	800d14e <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	2206      	movs	r2, #6
 800b250:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b254:	e0e7      	b.n	800b426 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	795b      	ldrb	r3, [r3, #5]
 800b25a:	4619      	mov	r1, r3
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f005 fd93 	bl	8010d88 <USBH_LL_GetURBState>
 800b262:	4603      	mov	r3, r0
 800b264:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b266:	7d3b      	ldrb	r3, [r7, #20]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d12f      	bne.n	800b2cc <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b270:	693a      	ldr	r2, [r7, #16]
 800b272:	8912      	ldrh	r2, [r2, #8]
 800b274:	4293      	cmp	r3, r2
 800b276:	d910      	bls.n	800b29a <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b27e:	693a      	ldr	r2, [r7, #16]
 800b280:	8912      	ldrh	r2, [r2, #8]
 800b282:	441a      	add	r2, r3
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b28e:	693a      	ldr	r2, [r7, #16]
 800b290:	8912      	ldrh	r2, [r2, #8]
 800b292:	1a9a      	subs	r2, r3, r2
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b298:	e002      	b.n	800b2a0 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	2200      	movs	r2, #0
 800b29e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00c      	beq.n	800b2c2 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	891a      	ldrh	r2, [r3, #8]
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	795b      	ldrb	r3, [r3, #5]
 800b2b6:	2001      	movs	r0, #1
 800b2b8:	9000      	str	r0, [sp, #0]
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f001 ff47 	bl	800d14e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800b2c0:	e0a8      	b.n	800b414 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	2207      	movs	r2, #7
 800b2c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b2ca:	e0a3      	b.n	800b414 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b2cc:	7d3b      	ldrb	r3, [r7, #20]
 800b2ce:	2b02      	cmp	r3, #2
 800b2d0:	d104      	bne.n	800b2dc <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	2205      	movs	r2, #5
 800b2d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b2da:	e09b      	b.n	800b414 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800b2dc:	7d3b      	ldrb	r3, [r7, #20]
 800b2de:	2b05      	cmp	r3, #5
 800b2e0:	f040 8098 	bne.w	800b414 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	220a      	movs	r2, #10
 800b2e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b2ec:	e092      	b.n	800b414 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	791b      	ldrb	r3, [r3, #4]
 800b2f8:	220d      	movs	r2, #13
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f001 ff4c 	bl	800d198 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	2208      	movs	r2, #8
 800b304:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b308:	e08d      	b.n	800b426 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	791b      	ldrb	r3, [r3, #4]
 800b30e:	4619      	mov	r1, r3
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f005 fd39 	bl	8010d88 <USBH_LL_GetURBState>
 800b316:	4603      	mov	r3, r0
 800b318:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800b31a:	7d3b      	ldrb	r3, [r7, #20]
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d115      	bne.n	800b34c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 f8a9 	bl	800b488 <USBH_MSC_DecodeCSW>
 800b336:	4603      	mov	r3, r0
 800b338:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800b33a:	7d7b      	ldrb	r3, [r7, #21]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d102      	bne.n	800b346 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800b340:	2300      	movs	r3, #0
 800b342:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800b344:	e068      	b.n	800b418 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800b346:	2302      	movs	r3, #2
 800b348:	75fb      	strb	r3, [r7, #23]
      break;
 800b34a:	e065      	b.n	800b418 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800b34c:	7d3b      	ldrb	r3, [r7, #20]
 800b34e:	2b05      	cmp	r3, #5
 800b350:	d162      	bne.n	800b418 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	2209      	movs	r2, #9
 800b356:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b35a:	e05d      	b.n	800b418 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800b35c:	78fb      	ldrb	r3, [r7, #3]
 800b35e:	2200      	movs	r2, #0
 800b360:	4619      	mov	r1, r3
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 f864 	bl	800b430 <USBH_MSC_BOT_Abort>
 800b368:	4603      	mov	r3, r0
 800b36a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b36c:	7dbb      	ldrb	r3, [r7, #22]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d104      	bne.n	800b37c <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	2207      	movs	r2, #7
 800b376:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800b37a:	e04f      	b.n	800b41c <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800b37c:	7dbb      	ldrb	r3, [r7, #22]
 800b37e:	2b04      	cmp	r3, #4
 800b380:	d14c      	bne.n	800b41c <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	220b      	movs	r2, #11
 800b386:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b38a:	e047      	b.n	800b41c <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800b38c:	78fb      	ldrb	r3, [r7, #3]
 800b38e:	2201      	movs	r2, #1
 800b390:	4619      	mov	r1, r3
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 f84c 	bl	800b430 <USBH_MSC_BOT_Abort>
 800b398:	4603      	mov	r3, r0
 800b39a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b39c:	7dbb      	ldrb	r3, [r7, #22]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d11d      	bne.n	800b3de <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	795b      	ldrb	r3, [r3, #5]
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f005 fd47 	bl	8010e3c <USBH_LL_GetToggle>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	7959      	ldrb	r1, [r3, #5]
 800b3b6:	7bfb      	ldrb	r3, [r7, #15]
 800b3b8:	f1c3 0301 	rsb	r3, r3, #1
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	461a      	mov	r2, r3
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f005 fd0b 	bl	8010ddc <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	791b      	ldrb	r3, [r3, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f005 fd04 	bl	8010ddc <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	2209      	movs	r2, #9
 800b3d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800b3dc:	e020      	b.n	800b420 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800b3de:	7dbb      	ldrb	r3, [r7, #22]
 800b3e0:	2b04      	cmp	r3, #4
 800b3e2:	d11d      	bne.n	800b420 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	220b      	movs	r2, #11
 800b3e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800b3ec:	e018      	b.n	800b420 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7ff fdf2 	bl	800afd8 <USBH_MSC_BOT_REQ_Reset>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800b3f8:	7dfb      	ldrb	r3, [r7, #23]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d112      	bne.n	800b424 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	2201      	movs	r2, #1
 800b402:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 800b406:	e00d      	b.n	800b424 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800b408:	bf00      	nop
 800b40a:	e00c      	b.n	800b426 <USBH_MSC_BOT_Process+0x392>
      break;
 800b40c:	bf00      	nop
 800b40e:	e00a      	b.n	800b426 <USBH_MSC_BOT_Process+0x392>
      break;
 800b410:	bf00      	nop
 800b412:	e008      	b.n	800b426 <USBH_MSC_BOT_Process+0x392>
      break;
 800b414:	bf00      	nop
 800b416:	e006      	b.n	800b426 <USBH_MSC_BOT_Process+0x392>
      break;
 800b418:	bf00      	nop
 800b41a:	e004      	b.n	800b426 <USBH_MSC_BOT_Process+0x392>
      break;
 800b41c:	bf00      	nop
 800b41e:	e002      	b.n	800b426 <USBH_MSC_BOT_Process+0x392>
      break;
 800b420:	bf00      	nop
 800b422:	e000      	b.n	800b426 <USBH_MSC_BOT_Process+0x392>
      break;
 800b424:	bf00      	nop
  }
  return status;
 800b426:	7dfb      	ldrb	r3, [r7, #23]
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3718      	adds	r7, #24
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	460b      	mov	r3, r1
 800b43a:	70fb      	strb	r3, [r7, #3]
 800b43c:	4613      	mov	r3, r2
 800b43e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800b440:	2302      	movs	r3, #2
 800b442:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b44a:	69db      	ldr	r3, [r3, #28]
 800b44c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800b44e:	78bb      	ldrb	r3, [r7, #2]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d002      	beq.n	800b45a <USBH_MSC_BOT_Abort+0x2a>
 800b454:	2b01      	cmp	r3, #1
 800b456:	d009      	beq.n	800b46c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800b458:	e011      	b.n	800b47e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	79db      	ldrb	r3, [r3, #7]
 800b45e:	4619      	mov	r1, r3
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f001 f9a0 	bl	800c7a6 <USBH_ClrFeature>
 800b466:	4603      	mov	r3, r0
 800b468:	73fb      	strb	r3, [r7, #15]
      break;
 800b46a:	e008      	b.n	800b47e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	799b      	ldrb	r3, [r3, #6]
 800b470:	4619      	mov	r1, r3
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f001 f997 	bl	800c7a6 <USBH_ClrFeature>
 800b478:	4603      	mov	r3, r0
 800b47a:	73fb      	strb	r3, [r7, #15]
      break;
 800b47c:	bf00      	nop
  }
  return status;
 800b47e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b496:	69db      	ldr	r3, [r3, #28]
 800b498:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800b49a:	2301      	movs	r3, #1
 800b49c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	791b      	ldrb	r3, [r3, #4]
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f005 fbdd 	bl	8010c64 <USBH_LL_GetLastXferSize>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b0d      	cmp	r3, #13
 800b4ae:	d002      	beq.n	800b4b6 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800b4b0:	2302      	movs	r3, #2
 800b4b2:	73fb      	strb	r3, [r7, #15]
 800b4b4:	e024      	b.n	800b500 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b4ba:	4a14      	ldr	r2, [pc, #80]	@ (800b50c <USBH_MSC_DecodeCSW+0x84>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d11d      	bne.n	800b4fc <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d119      	bne.n	800b500 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d102      	bne.n	800b4dc <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	73fb      	strb	r3, [r7, #15]
 800b4da:	e011      	b.n	800b500 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d102      	bne.n	800b4ec <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	73fb      	strb	r3, [r7, #15]
 800b4ea:	e009      	b.n	800b500 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b4f2:	2b02      	cmp	r3, #2
 800b4f4:	d104      	bne.n	800b500 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800b4f6:	2302      	movs	r3, #2
 800b4f8:	73fb      	strb	r3, [r7, #15]
 800b4fa:	e001      	b.n	800b500 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800b4fc:	2302      	movs	r3, #2
 800b4fe:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800b500:	7bfb      	ldrb	r3, [r7, #15]
}
 800b502:	4618      	mov	r0, r3
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	53425355 	.word	0x53425355

0800b510 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	460b      	mov	r3, r1
 800b51a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b51c:	2302      	movs	r3, #2
 800b51e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b526:	69db      	ldr	r3, [r3, #28]
 800b528:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800b530:	2b01      	cmp	r3, #1
 800b532:	d002      	beq.n	800b53a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800b534:	2b02      	cmp	r3, #2
 800b536:	d021      	beq.n	800b57c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b538:	e028      	b.n	800b58c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	2200      	movs	r2, #0
 800b53e:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	2200      	movs	r2, #0
 800b544:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	220a      	movs	r2, #10
 800b54c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	3363      	adds	r3, #99	@ 0x63
 800b554:	2210      	movs	r2, #16
 800b556:	2100      	movs	r1, #0
 800b558:	4618      	mov	r0, r3
 800b55a:	f005 fdb1 	bl	80110c0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	2201      	movs	r2, #1
 800b56a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	2202      	movs	r2, #2
 800b572:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 800b576:	2301      	movs	r3, #1
 800b578:	73fb      	strb	r3, [r7, #15]
      break;
 800b57a:	e007      	b.n	800b58c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b57c:	78fb      	ldrb	r3, [r7, #3]
 800b57e:	4619      	mov	r1, r3
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f7ff fd87 	bl	800b094 <USBH_MSC_BOT_Process>
 800b586:	4603      	mov	r3, r0
 800b588:	73fb      	strb	r3, [r7, #15]
      break;
 800b58a:	bf00      	nop
  }

  return error;
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3710      	adds	r7, #16
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800b596:	b580      	push	{r7, lr}
 800b598:	b086      	sub	sp, #24
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	60f8      	str	r0, [r7, #12]
 800b59e:	460b      	mov	r3, r1
 800b5a0:	607a      	str	r2, [r7, #4]
 800b5a2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b5ae:	69db      	ldr	r3, [r3, #28]
 800b5b0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d002      	beq.n	800b5c2 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800b5bc:	2b02      	cmp	r3, #2
 800b5be:	d027      	beq.n	800b610 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800b5c0:	e05e      	b.n	800b680 <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	2208      	movs	r2, #8
 800b5c6:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	2280      	movs	r2, #128	@ 0x80
 800b5cc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	220a      	movs	r2, #10
 800b5d4:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	3363      	adds	r3, #99	@ 0x63
 800b5dc:	2210      	movs	r2, #16
 800b5de:	2100      	movs	r1, #0
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f005 fd6d 	bl	80110c0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	2225      	movs	r2, #37	@ 0x25
 800b5ea:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	2202      	movs	r2, #2
 800b5fa:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	f103 0210 	add.w	r2, r3, #16
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800b60a:	2301      	movs	r3, #1
 800b60c:	75fb      	strb	r3, [r7, #23]
      break;
 800b60e:	e037      	b.n	800b680 <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b610:	7afb      	ldrb	r3, [r7, #11]
 800b612:	4619      	mov	r1, r3
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f7ff fd3d 	bl	800b094 <USBH_MSC_BOT_Process>
 800b61a:	4603      	mov	r3, r0
 800b61c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b61e:	7dfb      	ldrb	r3, [r7, #23]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d12c      	bne.n	800b67e <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b62a:	3303      	adds	r3, #3
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	461a      	mov	r2, r3
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b636:	3302      	adds	r3, #2
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	021b      	lsls	r3, r3, #8
 800b63c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b644:	3301      	adds	r3, #1
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b64a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	061b      	lsls	r3, r3, #24
 800b656:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b662:	3307      	adds	r3, #7
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	461a      	mov	r2, r3
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b66e:	3306      	adds	r3, #6
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	021b      	lsls	r3, r3, #8
 800b674:	b29b      	uxth	r3, r3
 800b676:	4313      	orrs	r3, r2
 800b678:	b29a      	uxth	r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	809a      	strh	r2, [r3, #4]
      break;
 800b67e:	bf00      	nop
  }

  return error;
 800b680:	7dfb      	ldrb	r3, [r7, #23]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3718      	adds	r7, #24
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b086      	sub	sp, #24
 800b68e:	af00      	add	r7, sp, #0
 800b690:	60f8      	str	r0, [r7, #12]
 800b692:	460b      	mov	r3, r1
 800b694:	607a      	str	r2, [r7, #4]
 800b696:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800b698:	2302      	movs	r3, #2
 800b69a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b6a2:	69db      	ldr	r3, [r3, #28]
 800b6a4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d002      	beq.n	800b6b6 <USBH_MSC_SCSI_Inquiry+0x2c>
 800b6b0:	2b02      	cmp	r3, #2
 800b6b2:	d03d      	beq.n	800b730 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800b6b4:	e089      	b.n	800b7ca <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	2224      	movs	r2, #36	@ 0x24
 800b6ba:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	2280      	movs	r2, #128	@ 0x80
 800b6c0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	220a      	movs	r2, #10
 800b6c8:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	3363      	adds	r3, #99	@ 0x63
 800b6d0:	220a      	movs	r2, #10
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f005 fcf3 	bl	80110c0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	2212      	movs	r2, #18
 800b6de:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b6e2:	7afb      	ldrb	r3, [r7, #11]
 800b6e4:	015b      	lsls	r3, r3, #5
 800b6e6:	b2da      	uxtb	r2, r3
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	2224      	movs	r2, #36	@ 0x24
 800b702:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	2200      	movs	r2, #0
 800b70a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	2201      	movs	r2, #1
 800b712:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	2202      	movs	r2, #2
 800b71a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	f103 0210 	add.w	r2, r3, #16
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800b72a:	2301      	movs	r3, #1
 800b72c:	75fb      	strb	r3, [r7, #23]
      break;
 800b72e:	e04c      	b.n	800b7ca <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b730:	7afb      	ldrb	r3, [r7, #11]
 800b732:	4619      	mov	r1, r3
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	f7ff fcad 	bl	800b094 <USBH_MSC_BOT_Process>
 800b73a:	4603      	mov	r3, r0
 800b73c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b73e:	7dfb      	ldrb	r3, [r7, #23]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d141      	bne.n	800b7c8 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800b744:	2222      	movs	r2, #34	@ 0x22
 800b746:	2100      	movs	r1, #0
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f005 fcb9 	bl	80110c0 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	f003 031f 	and.w	r3, r3, #31
 800b75a:	b2da      	uxtb	r2, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	095b      	lsrs	r3, r3, #5
 800b76a:	b2da      	uxtb	r2, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b776:	3301      	adds	r3, #1
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	b25b      	sxtb	r3, r3
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	da03      	bge.n	800b788 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2201      	movs	r2, #1
 800b784:	709a      	strb	r2, [r3, #2]
 800b786:	e002      	b.n	800b78e <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	1cd8      	adds	r0, r3, #3
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b798:	3308      	adds	r3, #8
 800b79a:	2208      	movs	r2, #8
 800b79c:	4619      	mov	r1, r3
 800b79e:	f005 fcfd 	bl	801119c <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f103 000c 	add.w	r0, r3, #12
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7ae:	3310      	adds	r3, #16
 800b7b0:	2210      	movs	r2, #16
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	f005 fcf2 	bl	801119c <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	331d      	adds	r3, #29
 800b7bc:	693a      	ldr	r2, [r7, #16]
 800b7be:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800b7c2:	3220      	adds	r2, #32
 800b7c4:	6812      	ldr	r2, [r2, #0]
 800b7c6:	601a      	str	r2, [r3, #0]
      break;
 800b7c8:	bf00      	nop
  }

  return error;
 800b7ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3718      	adds	r7, #24
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b086      	sub	sp, #24
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	460b      	mov	r3, r1
 800b7de:	607a      	str	r2, [r7, #4]
 800b7e0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b7e2:	2302      	movs	r3, #2
 800b7e4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b7ec:	69db      	ldr	r3, [r3, #28]
 800b7ee:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d002      	beq.n	800b800 <USBH_MSC_SCSI_RequestSense+0x2c>
 800b7fa:	2b02      	cmp	r3, #2
 800b7fc:	d03d      	beq.n	800b87a <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800b7fe:	e05d      	b.n	800b8bc <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	220e      	movs	r2, #14
 800b804:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	2280      	movs	r2, #128	@ 0x80
 800b80a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	220a      	movs	r2, #10
 800b812:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	3363      	adds	r3, #99	@ 0x63
 800b81a:	2210      	movs	r2, #16
 800b81c:	2100      	movs	r1, #0
 800b81e:	4618      	mov	r0, r3
 800b820:	f005 fc4e 	bl	80110c0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	2203      	movs	r2, #3
 800b828:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b82c:	7afb      	ldrb	r3, [r7, #11]
 800b82e:	015b      	lsls	r3, r3, #5
 800b830:	b2da      	uxtb	r2, r3
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	2200      	movs	r2, #0
 800b844:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	220e      	movs	r2, #14
 800b84c:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	2200      	movs	r2, #0
 800b854:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	2202      	movs	r2, #2
 800b864:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	f103 0210 	add.w	r2, r3, #16
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800b874:	2301      	movs	r3, #1
 800b876:	75fb      	strb	r3, [r7, #23]
      break;
 800b878:	e020      	b.n	800b8bc <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b87a:	7afb      	ldrb	r3, [r7, #11]
 800b87c:	4619      	mov	r1, r3
 800b87e:	68f8      	ldr	r0, [r7, #12]
 800b880:	f7ff fc08 	bl	800b094 <USBH_MSC_BOT_Process>
 800b884:	4603      	mov	r3, r0
 800b886:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b888:	7dfb      	ldrb	r3, [r7, #23]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d115      	bne.n	800b8ba <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b894:	3302      	adds	r3, #2
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	f003 030f 	and.w	r3, r3, #15
 800b89c:	b2da      	uxtb	r2, r3
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8a8:	7b1a      	ldrb	r2, [r3, #12]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8b4:	7b5a      	ldrb	r2, [r3, #13]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	709a      	strb	r2, [r3, #2]
      break;
 800b8ba:	bf00      	nop
  }

  return error;
 800b8bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3718      	adds	r7, #24
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b086      	sub	sp, #24
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	60f8      	str	r0, [r7, #12]
 800b8ce:	607a      	str	r2, [r7, #4]
 800b8d0:	603b      	str	r3, [r7, #0]
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b8d6:	2302      	movs	r3, #2
 800b8d8:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b8e0:	69db      	ldr	r3, [r3, #28]
 800b8e2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d002      	beq.n	800b8f4 <USBH_MSC_SCSI_Write+0x2e>
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	d047      	beq.n	800b982 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b8f2:	e04e      	b.n	800b992 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	6a3b      	ldr	r3, [r7, #32]
 800b8fe:	fb03 f202 	mul.w	r2, r3, r2
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	2200      	movs	r2, #0
 800b90a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	220a      	movs	r2, #10
 800b912:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	3363      	adds	r3, #99	@ 0x63
 800b91a:	2210      	movs	r2, #16
 800b91c:	2100      	movs	r1, #0
 800b91e:	4618      	mov	r0, r3
 800b920:	f005 fbce 	bl	80110c0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	222a      	movs	r2, #42	@ 0x2a
 800b928:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b92c:	79fa      	ldrb	r2, [r7, #7]
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b934:	79ba      	ldrb	r2, [r7, #6]
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b93c:	797a      	ldrb	r2, [r7, #5]
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b944:	1d3b      	adds	r3, r7, #4
 800b946:	781a      	ldrb	r2, [r3, #0]
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b94e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b958:	f107 0320 	add.w	r3, r7, #32
 800b95c:	781a      	ldrb	r2, [r3, #0]
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	2201      	movs	r2, #1
 800b968:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	2202      	movs	r2, #2
 800b970:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	683a      	ldr	r2, [r7, #0]
 800b978:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800b97c:	2301      	movs	r3, #1
 800b97e:	75fb      	strb	r3, [r7, #23]
      break;
 800b980:	e007      	b.n	800b992 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b982:	7afb      	ldrb	r3, [r7, #11]
 800b984:	4619      	mov	r1, r3
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f7ff fb84 	bl	800b094 <USBH_MSC_BOT_Process>
 800b98c:	4603      	mov	r3, r0
 800b98e:	75fb      	strb	r3, [r7, #23]
      break;
 800b990:	bf00      	nop
  }

  return error;
 800b992:	7dfb      	ldrb	r3, [r7, #23]
}
 800b994:	4618      	mov	r0, r3
 800b996:	3718      	adds	r7, #24
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b086      	sub	sp, #24
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	607a      	str	r2, [r7, #4]
 800b9a6:	603b      	str	r3, [r7, #0]
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b9ac:	2302      	movs	r3, #2
 800b9ae:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b9b6:	69db      	ldr	r3, [r3, #28]
 800b9b8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d002      	beq.n	800b9ca <USBH_MSC_SCSI_Read+0x2e>
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	d047      	beq.n	800ba58 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b9c8:	e04e      	b.n	800ba68 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	6a3b      	ldr	r3, [r7, #32]
 800b9d4:	fb03 f202 	mul.w	r2, r3, r2
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	2280      	movs	r2, #128	@ 0x80
 800b9e0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	220a      	movs	r2, #10
 800b9e8:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	3363      	adds	r3, #99	@ 0x63
 800b9f0:	2210      	movs	r2, #16
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f005 fb63 	bl	80110c0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	2228      	movs	r2, #40	@ 0x28
 800b9fe:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800ba02:	79fa      	ldrb	r2, [r7, #7]
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800ba0a:	79ba      	ldrb	r2, [r7, #6]
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800ba12:	797a      	ldrb	r2, [r7, #5]
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800ba1a:	1d3b      	adds	r3, r7, #4
 800ba1c:	781a      	ldrb	r2, [r3, #0]
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800ba24:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800ba2e:	f107 0320 	add.w	r3, r7, #32
 800ba32:	781a      	ldrb	r2, [r3, #0]
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	2202      	movs	r2, #2
 800ba46:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	683a      	ldr	r2, [r7, #0]
 800ba4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800ba52:	2301      	movs	r3, #1
 800ba54:	75fb      	strb	r3, [r7, #23]
      break;
 800ba56:	e007      	b.n	800ba68 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ba58:	7afb      	ldrb	r3, [r7, #11]
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	68f8      	ldr	r0, [r7, #12]
 800ba5e:	f7ff fb19 	bl	800b094 <USBH_MSC_BOT_Process>
 800ba62:	4603      	mov	r3, r0
 800ba64:	75fb      	strb	r3, [r7, #23]
      break;
 800ba66:	bf00      	nop
  }

  return error;
 800ba68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3718      	adds	r7, #24
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b084      	sub	sp, #16
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	60f8      	str	r0, [r7, #12]
 800ba7a:	60b9      	str	r1, [r7, #8]
 800ba7c:	4613      	mov	r3, r2
 800ba7e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d101      	bne.n	800ba8a <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ba86:	2302      	movs	r3, #2
 800ba88:	e029      	b.n	800bade <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	79fa      	ldrb	r2, [r7, #7]
 800ba8e:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2200      	movs	r2, #0
 800ba96:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f000 f81f 	bl	800bae6 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2200      	movs	r2, #0
 800babc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2200      	movs	r2, #0
 800bac4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d003      	beq.n	800bad6 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800bad6:	68f8      	ldr	r0, [r7, #12]
 800bad8:	f005 f810 	bl	8010afc <USBH_LL_Init>

  return USBH_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bae6:	b480      	push	{r7}
 800bae8:	b085      	sub	sp, #20
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800baee:	2300      	movs	r3, #0
 800baf0:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800baf2:	2300      	movs	r3, #0
 800baf4:	60fb      	str	r3, [r7, #12]
 800baf6:	e009      	b.n	800bb0c <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	33e0      	adds	r3, #224	@ 0xe0
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	4413      	add	r3, r2
 800bb02:	2200      	movs	r2, #0
 800bb04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	60fb      	str	r3, [r7, #12]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2b0f      	cmp	r3, #15
 800bb10:	d9f2      	bls.n	800baf8 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bb12:	2300      	movs	r3, #0
 800bb14:	60fb      	str	r3, [r7, #12]
 800bb16:	e009      	b.n	800bb2c <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bb22:	2200      	movs	r2, #0
 800bb24:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	60fb      	str	r3, [r7, #12]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb32:	d3f1      	bcc.n	800bb18 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2200      	movs	r2, #0
 800bb38:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2201      	movs	r2, #1
 800bb44:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2201      	movs	r2, #1
 800bb52:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2240      	movs	r2, #64	@ 0x40
 800bb58:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  return USBH_OK;
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3714      	adds	r7, #20
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr

0800bb8e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bb8e:	b480      	push	{r7}
 800bb90:	b085      	sub	sp, #20
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	6078      	str	r0, [r7, #4]
 800bb96:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d016      	beq.n	800bbd0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d10e      	bne.n	800bbca <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800bbb2:	1c59      	adds	r1, r3, #1
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	33de      	adds	r3, #222	@ 0xde
 800bbbe:	6839      	ldr	r1, [r7, #0]
 800bbc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	73fb      	strb	r3, [r7, #15]
 800bbc8:	e004      	b.n	800bbd4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800bbca:	2302      	movs	r3, #2
 800bbcc:	73fb      	strb	r3, [r7, #15]
 800bbce:	e001      	b.n	800bbd4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800bbd0:	2302      	movs	r3, #2
 800bbd2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3714      	adds	r7, #20
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr

0800bbe2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b085      	sub	sp, #20
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	460b      	mov	r3, r1
 800bbec:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800bbf8:	78fa      	ldrb	r2, [r7, #3]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d204      	bcs.n	800bc08 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	78fa      	ldrb	r2, [r7, #3]
 800bc02:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800bc06:	e001      	b.n	800bc0c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800bc08:	2302      	movs	r3, #2
 800bc0a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bc0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3714      	adds	r7, #20
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr

0800bc1a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800bc1a:	b480      	push	{r7}
 800bc1c:	b087      	sub	sp, #28
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
 800bc22:	4608      	mov	r0, r1
 800bc24:	4611      	mov	r1, r2
 800bc26:	461a      	mov	r2, r3
 800bc28:	4603      	mov	r3, r0
 800bc2a:	70fb      	strb	r3, [r7, #3]
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	70bb      	strb	r3, [r7, #2]
 800bc30:	4613      	mov	r3, r2
 800bc32:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800bc34:	2300      	movs	r3, #0
 800bc36:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800bc42:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bc44:	e025      	b.n	800bc92 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bc46:	7dfb      	ldrb	r3, [r7, #23]
 800bc48:	221a      	movs	r2, #26
 800bc4a:	fb02 f303 	mul.w	r3, r2, r3
 800bc4e:	3308      	adds	r3, #8
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	4413      	add	r3, r2
 800bc54:	3302      	adds	r3, #2
 800bc56:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	795b      	ldrb	r3, [r3, #5]
 800bc5c:	78fa      	ldrb	r2, [r7, #3]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d002      	beq.n	800bc68 <USBH_FindInterface+0x4e>
 800bc62:	78fb      	ldrb	r3, [r7, #3]
 800bc64:	2bff      	cmp	r3, #255	@ 0xff
 800bc66:	d111      	bne.n	800bc8c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bc6c:	78ba      	ldrb	r2, [r7, #2]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d002      	beq.n	800bc78 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bc72:	78bb      	ldrb	r3, [r7, #2]
 800bc74:	2bff      	cmp	r3, #255	@ 0xff
 800bc76:	d109      	bne.n	800bc8c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bc7c:	787a      	ldrb	r2, [r7, #1]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d002      	beq.n	800bc88 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bc82:	787b      	ldrb	r3, [r7, #1]
 800bc84:	2bff      	cmp	r3, #255	@ 0xff
 800bc86:	d101      	bne.n	800bc8c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bc88:	7dfb      	ldrb	r3, [r7, #23]
 800bc8a:	e006      	b.n	800bc9a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bc8c:	7dfb      	ldrb	r3, [r7, #23]
 800bc8e:	3301      	adds	r3, #1
 800bc90:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bc92:	7dfb      	ldrb	r3, [r7, #23]
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d9d6      	bls.n	800bc46 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bc98:	23ff      	movs	r3, #255	@ 0xff
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	371c      	adds	r7, #28
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b082      	sub	sp, #8
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f004 ff60 	bl	8010b74 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800bcb4:	2101      	movs	r1, #1
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f005 f879 	bl	8010dae <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3708      	adds	r7, #8
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
	...

0800bcc8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b088      	sub	sp, #32
 800bccc:	af04      	add	r7, sp, #16
 800bcce:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bcd0:	2302      	movs	r3, #2
 800bcd2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d102      	bne.n	800bcea <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2203      	movs	r2, #3
 800bce8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	2b0b      	cmp	r3, #11
 800bcf2:	f200 81bb 	bhi.w	800c06c <USBH_Process+0x3a4>
 800bcf6:	a201      	add	r2, pc, #4	@ (adr r2, 800bcfc <USBH_Process+0x34>)
 800bcf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcfc:	0800bd2d 	.word	0x0800bd2d
 800bd00:	0800bd5f 	.word	0x0800bd5f
 800bd04:	0800bdc7 	.word	0x0800bdc7
 800bd08:	0800c007 	.word	0x0800c007
 800bd0c:	0800c06d 	.word	0x0800c06d
 800bd10:	0800be67 	.word	0x0800be67
 800bd14:	0800bfad 	.word	0x0800bfad
 800bd18:	0800be9d 	.word	0x0800be9d
 800bd1c:	0800bebd 	.word	0x0800bebd
 800bd20:	0800bedb 	.word	0x0800bedb
 800bd24:	0800bf1f 	.word	0x0800bf1f
 800bd28:	0800bfef 	.word	0x0800bfef
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	f000 819b 	beq.w	800c070 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800bd40:	20c8      	movs	r0, #200	@ 0xc8
 800bd42:	f005 f8ab 	bl	8010e9c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f004 ff71 	bl	8010c2e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bd5c:	e188      	b.n	800c070 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d107      	bne.n	800bd78 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2202      	movs	r2, #2
 800bd74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bd76:	e18a      	b.n	800c08e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800bd7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bd82:	d914      	bls.n	800bdae <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	b2da      	uxtb	r2, r3
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800bd9a:	2b03      	cmp	r3, #3
 800bd9c:	d903      	bls.n	800bda6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	220d      	movs	r2, #13
 800bda2:	701a      	strb	r2, [r3, #0]
      break;
 800bda4:	e173      	b.n	800c08e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	701a      	strb	r2, [r3, #0]
      break;
 800bdac:	e16f      	b.n	800c08e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800bdb4:	f103 020a 	add.w	r2, r3, #10
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800bdbe:	200a      	movs	r0, #10
 800bdc0:	f005 f86c 	bl	8010e9c <USBH_Delay>
      break;
 800bdc4:	e163      	b.n	800c08e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d005      	beq.n	800bddc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bdd6:	2104      	movs	r1, #4
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800bddc:	2064      	movs	r0, #100	@ 0x64
 800bdde:	f005 f85d 	bl	8010e9c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f004 fefc 	bl	8010be0 <USBH_LL_GetSpeed>
 800bde8:	4603      	mov	r3, r0
 800bdea:	461a      	mov	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2205      	movs	r2, #5
 800bdf6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f001 fa19 	bl	800d232 <USBH_AllocPipe>
 800be00:	4603      	mov	r3, r0
 800be02:	461a      	mov	r2, r3
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800be08:	2180      	movs	r1, #128	@ 0x80
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f001 fa11 	bl	800d232 <USBH_AllocPipe>
 800be10:	4603      	mov	r3, r0
 800be12:	461a      	mov	r2, r3
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	7919      	ldrb	r1, [r3, #4]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800be2c:	9202      	str	r2, [sp, #8]
 800be2e:	2200      	movs	r2, #0
 800be30:	9201      	str	r2, [sp, #4]
 800be32:	9300      	str	r3, [sp, #0]
 800be34:	4603      	mov	r3, r0
 800be36:	2280      	movs	r2, #128	@ 0x80
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f001 f9cb 	bl	800d1d4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	7959      	ldrb	r1, [r3, #5]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800be52:	9202      	str	r2, [sp, #8]
 800be54:	2200      	movs	r2, #0
 800be56:	9201      	str	r2, [sp, #4]
 800be58:	9300      	str	r3, [sp, #0]
 800be5a:	4603      	mov	r3, r0
 800be5c:	2200      	movs	r2, #0
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f001 f9b8 	bl	800d1d4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800be64:	e113      	b.n	800c08e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 f916 	bl	800c098 <USBH_HandleEnum>
 800be6c:	4603      	mov	r3, r0
 800be6e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800be70:	7bbb      	ldrb	r3, [r7, #14]
 800be72:	b2db      	uxtb	r3, r3
 800be74:	2b00      	cmp	r3, #0
 800be76:	f040 80fd 	bne.w	800c074 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2200      	movs	r2, #0
 800be7e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d103      	bne.n	800be94 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2208      	movs	r2, #8
 800be90:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800be92:	e0ef      	b.n	800c074 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2207      	movs	r2, #7
 800be98:	701a      	strb	r2, [r3, #0]
      break;
 800be9a:	e0eb      	b.n	800c074 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	f000 80e8 	beq.w	800c078 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800beae:	2101      	movs	r1, #1
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2208      	movs	r2, #8
 800beb8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800beba:	e0dd      	b.n	800c078 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800bec2:	4619      	mov	r1, r3
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 fc27 	bl	800c718 <USBH_SetCfg>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	f040 80d5 	bne.w	800c07c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2209      	movs	r2, #9
 800bed6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bed8:	e0d0      	b.n	800c07c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800bee0:	f003 0320 	and.w	r3, r3, #32
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d016      	beq.n	800bf16 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800bee8:	2101      	movs	r1, #1
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 fc37 	bl	800c75e <USBH_SetFeature>
 800bef0:	4603      	mov	r3, r0
 800bef2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bef4:	7bbb      	ldrb	r3, [r7, #14]
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d103      	bne.n	800bf04 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	220a      	movs	r2, #10
 800bf00:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bf02:	e0bd      	b.n	800c080 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800bf04:	7bbb      	ldrb	r3, [r7, #14]
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	2b03      	cmp	r3, #3
 800bf0a:	f040 80b9 	bne.w	800c080 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	220a      	movs	r2, #10
 800bf12:	701a      	strb	r2, [r3, #0]
      break;
 800bf14:	e0b4      	b.n	800c080 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	220a      	movs	r2, #10
 800bf1a:	701a      	strb	r2, [r3, #0]
      break;
 800bf1c:	e0b0      	b.n	800c080 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f000 80ad 	beq.w	800c084 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bf32:	2300      	movs	r3, #0
 800bf34:	73fb      	strb	r3, [r7, #15]
 800bf36:	e016      	b.n	800bf66 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800bf38:	7bfa      	ldrb	r2, [r7, #15]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	32de      	adds	r2, #222	@ 0xde
 800bf3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf42:	791a      	ldrb	r2, [r3, #4]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d108      	bne.n	800bf60 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800bf4e:	7bfa      	ldrb	r2, [r7, #15]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	32de      	adds	r2, #222	@ 0xde
 800bf54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800bf5e:	e005      	b.n	800bf6c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bf60:	7bfb      	ldrb	r3, [r7, #15]
 800bf62:	3301      	adds	r3, #1
 800bf64:	73fb      	strb	r3, [r7, #15]
 800bf66:	7bfb      	ldrb	r3, [r7, #15]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d0e5      	beq.n	800bf38 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d016      	beq.n	800bfa4 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf7c:	689b      	ldr	r3, [r3, #8]
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	4798      	blx	r3
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d109      	bne.n	800bf9c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2206      	movs	r2, #6
 800bf8c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bf94:	2103      	movs	r1, #3
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bf9a:	e073      	b.n	800c084 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	220d      	movs	r2, #13
 800bfa0:	701a      	strb	r2, [r3, #0]
      break;
 800bfa2:	e06f      	b.n	800c084 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	220d      	movs	r2, #13
 800bfa8:	701a      	strb	r2, [r3, #0]
      break;
 800bfaa:	e06b      	b.n	800c084 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d017      	beq.n	800bfe6 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	4798      	blx	r3
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bfc6:	7bbb      	ldrb	r3, [r7, #14]
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d103      	bne.n	800bfd6 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	220b      	movs	r2, #11
 800bfd2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bfd4:	e058      	b.n	800c088 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800bfd6:	7bbb      	ldrb	r3, [r7, #14]
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	2b02      	cmp	r3, #2
 800bfdc:	d154      	bne.n	800c088 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	220d      	movs	r2, #13
 800bfe2:	701a      	strb	r2, [r3, #0]
      break;
 800bfe4:	e050      	b.n	800c088 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	220d      	movs	r2, #13
 800bfea:	701a      	strb	r2, [r3, #0]
      break;
 800bfec:	e04c      	b.n	800c088 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d049      	beq.n	800c08c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bffe:	695b      	ldr	r3, [r3, #20]
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	4798      	blx	r3
      }
      break;
 800c004:	e042      	b.n	800c08c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f7ff fd69 	bl	800bae6 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d009      	beq.n	800c032 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c024:	68db      	ldr	r3, [r3, #12]
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2200      	movs	r2, #0
 800c02e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d005      	beq.n	800c048 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c042:	2105      	movs	r1, #5
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	2b01      	cmp	r3, #1
 800c052:	d107      	bne.n	800c064 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2200      	movs	r2, #0
 800c058:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f7ff fe22 	bl	800bca6 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c062:	e014      	b.n	800c08e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f004 fd85 	bl	8010b74 <USBH_LL_Start>
      break;
 800c06a:	e010      	b.n	800c08e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800c06c:	bf00      	nop
 800c06e:	e00e      	b.n	800c08e <USBH_Process+0x3c6>
      break;
 800c070:	bf00      	nop
 800c072:	e00c      	b.n	800c08e <USBH_Process+0x3c6>
      break;
 800c074:	bf00      	nop
 800c076:	e00a      	b.n	800c08e <USBH_Process+0x3c6>
    break;
 800c078:	bf00      	nop
 800c07a:	e008      	b.n	800c08e <USBH_Process+0x3c6>
      break;
 800c07c:	bf00      	nop
 800c07e:	e006      	b.n	800c08e <USBH_Process+0x3c6>
      break;
 800c080:	bf00      	nop
 800c082:	e004      	b.n	800c08e <USBH_Process+0x3c6>
      break;
 800c084:	bf00      	nop
 800c086:	e002      	b.n	800c08e <USBH_Process+0x3c6>
      break;
 800c088:	bf00      	nop
 800c08a:	e000      	b.n	800c08e <USBH_Process+0x3c6>
      break;
 800c08c:	bf00      	nop
  }
  return USBH_OK;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3710      	adds	r7, #16
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b088      	sub	sp, #32
 800c09c:	af04      	add	r7, sp, #16
 800c09e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	785b      	ldrb	r3, [r3, #1]
 800c0ac:	2b07      	cmp	r3, #7
 800c0ae:	f200 81bd 	bhi.w	800c42c <USBH_HandleEnum+0x394>
 800c0b2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0b8 <USBH_HandleEnum+0x20>)
 800c0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b8:	0800c0d9 	.word	0x0800c0d9
 800c0bc:	0800c193 	.word	0x0800c193
 800c0c0:	0800c1fd 	.word	0x0800c1fd
 800c0c4:	0800c287 	.word	0x0800c287
 800c0c8:	0800c2f1 	.word	0x0800c2f1
 800c0cc:	0800c361 	.word	0x0800c361
 800c0d0:	0800c3a7 	.word	0x0800c3a7
 800c0d4:	0800c3ed 	.word	0x0800c3ed
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c0d8:	2108      	movs	r1, #8
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 fa4c 	bl	800c578 <USBH_Get_DevDesc>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c0e4:	7bbb      	ldrb	r3, [r7, #14]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d12e      	bne.n	800c148 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	7919      	ldrb	r1, [r3, #4]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c10e:	9202      	str	r2, [sp, #8]
 800c110:	2200      	movs	r2, #0
 800c112:	9201      	str	r2, [sp, #4]
 800c114:	9300      	str	r3, [sp, #0]
 800c116:	4603      	mov	r3, r0
 800c118:	2280      	movs	r2, #128	@ 0x80
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f001 f85a 	bl	800d1d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	7959      	ldrb	r1, [r3, #5]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c134:	9202      	str	r2, [sp, #8]
 800c136:	2200      	movs	r2, #0
 800c138:	9201      	str	r2, [sp, #4]
 800c13a:	9300      	str	r3, [sp, #0]
 800c13c:	4603      	mov	r3, r0
 800c13e:	2200      	movs	r2, #0
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f001 f847 	bl	800d1d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c146:	e173      	b.n	800c430 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c148:	7bbb      	ldrb	r3, [r7, #14]
 800c14a:	2b03      	cmp	r3, #3
 800c14c:	f040 8170 	bne.w	800c430 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c156:	3301      	adds	r3, #1
 800c158:	b2da      	uxtb	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c166:	2b03      	cmp	r3, #3
 800c168:	d903      	bls.n	800c172 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	220d      	movs	r2, #13
 800c16e:	701a      	strb	r2, [r3, #0]
      break;
 800c170:	e15e      	b.n	800c430 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	795b      	ldrb	r3, [r3, #5]
 800c176:	4619      	mov	r1, r3
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f001 f87b 	bl	800d274 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	791b      	ldrb	r3, [r3, #4]
 800c182:	4619      	mov	r1, r3
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f001 f875 	bl	800d274 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	701a      	strb	r2, [r3, #0]
      break;
 800c190:	e14e      	b.n	800c430 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c192:	2112      	movs	r1, #18
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 f9ef 	bl	800c578 <USBH_Get_DevDesc>
 800c19a:	4603      	mov	r3, r0
 800c19c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c19e:	7bbb      	ldrb	r3, [r7, #14]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d103      	bne.n	800c1ac <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2202      	movs	r2, #2
 800c1a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c1aa:	e143      	b.n	800c434 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c1ac:	7bbb      	ldrb	r3, [r7, #14]
 800c1ae:	2b03      	cmp	r3, #3
 800c1b0:	f040 8140 	bne.w	800c434 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	b2da      	uxtb	r2, r3
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c1ca:	2b03      	cmp	r3, #3
 800c1cc:	d903      	bls.n	800c1d6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	220d      	movs	r2, #13
 800c1d2:	701a      	strb	r2, [r3, #0]
      break;
 800c1d4:	e12e      	b.n	800c434 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	795b      	ldrb	r3, [r3, #5]
 800c1da:	4619      	mov	r1, r3
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f001 f849 	bl	800d274 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	791b      	ldrb	r3, [r3, #4]
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f001 f843 	bl	800d274 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	701a      	strb	r2, [r3, #0]
      break;
 800c1fa:	e11b      	b.n	800c434 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c1fc:	2101      	movs	r1, #1
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 fa66 	bl	800c6d0 <USBH_SetAddress>
 800c204:	4603      	mov	r3, r0
 800c206:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c208:	7bbb      	ldrb	r3, [r7, #14]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d130      	bne.n	800c270 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800c20e:	2002      	movs	r0, #2
 800c210:	f004 fe44 	bl	8010e9c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2201      	movs	r2, #1
 800c218:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2203      	movs	r2, #3
 800c220:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	7919      	ldrb	r1, [r3, #4]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c236:	9202      	str	r2, [sp, #8]
 800c238:	2200      	movs	r2, #0
 800c23a:	9201      	str	r2, [sp, #4]
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	4603      	mov	r3, r0
 800c240:	2280      	movs	r2, #128	@ 0x80
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 ffc6 	bl	800d1d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	7959      	ldrb	r1, [r3, #5]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c25c:	9202      	str	r2, [sp, #8]
 800c25e:	2200      	movs	r2, #0
 800c260:	9201      	str	r2, [sp, #4]
 800c262:	9300      	str	r3, [sp, #0]
 800c264:	4603      	mov	r3, r0
 800c266:	2200      	movs	r2, #0
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 ffb3 	bl	800d1d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c26e:	e0e3      	b.n	800c438 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c270:	7bbb      	ldrb	r3, [r7, #14]
 800c272:	2b03      	cmp	r3, #3
 800c274:	f040 80e0 	bne.w	800c438 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	220d      	movs	r2, #13
 800c27c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2200      	movs	r2, #0
 800c282:	705a      	strb	r2, [r3, #1]
      break;
 800c284:	e0d8      	b.n	800c438 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c286:	2109      	movs	r1, #9
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 f99d 	bl	800c5c8 <USBH_Get_CfgDesc>
 800c28e:	4603      	mov	r3, r0
 800c290:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c292:	7bbb      	ldrb	r3, [r7, #14]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d103      	bne.n	800c2a0 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2204      	movs	r2, #4
 800c29c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c29e:	e0cd      	b.n	800c43c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c2a0:	7bbb      	ldrb	r3, [r7, #14]
 800c2a2:	2b03      	cmp	r3, #3
 800c2a4:	f040 80ca 	bne.w	800c43c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	b2da      	uxtb	r2, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c2be:	2b03      	cmp	r3, #3
 800c2c0:	d903      	bls.n	800c2ca <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	220d      	movs	r2, #13
 800c2c6:	701a      	strb	r2, [r3, #0]
      break;
 800c2c8:	e0b8      	b.n	800c43c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	795b      	ldrb	r3, [r3, #5]
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 ffcf 	bl	800d274 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	791b      	ldrb	r3, [r3, #4]
 800c2da:	4619      	mov	r1, r3
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 ffc9 	bl	800d274 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	701a      	strb	r2, [r3, #0]
      break;
 800c2ee:	e0a5      	b.n	800c43c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 f965 	bl	800c5c8 <USBH_Get_CfgDesc>
 800c2fe:	4603      	mov	r3, r0
 800c300:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c302:	7bbb      	ldrb	r3, [r7, #14]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d103      	bne.n	800c310 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2205      	movs	r2, #5
 800c30c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c30e:	e097      	b.n	800c440 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c310:	7bbb      	ldrb	r3, [r7, #14]
 800c312:	2b03      	cmp	r3, #3
 800c314:	f040 8094 	bne.w	800c440 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c31e:	3301      	adds	r3, #1
 800c320:	b2da      	uxtb	r2, r3
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c32e:	2b03      	cmp	r3, #3
 800c330:	d903      	bls.n	800c33a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	220d      	movs	r2, #13
 800c336:	701a      	strb	r2, [r3, #0]
      break;
 800c338:	e082      	b.n	800c440 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	795b      	ldrb	r3, [r3, #5]
 800c33e:	4619      	mov	r1, r3
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 ff97 	bl	800d274 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	791b      	ldrb	r3, [r3, #4]
 800c34a:	4619      	mov	r1, r3
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 ff91 	bl	800d274 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2200      	movs	r2, #0
 800c356:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2200      	movs	r2, #0
 800c35c:	701a      	strb	r2, [r3, #0]
      break;
 800c35e:	e06f      	b.n	800c440 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800c366:	2b00      	cmp	r3, #0
 800c368:	d019      	beq.n	800c39e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c376:	23ff      	movs	r3, #255	@ 0xff
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 f949 	bl	800c610 <USBH_Get_StringDesc>
 800c37e:	4603      	mov	r3, r0
 800c380:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c382:	7bbb      	ldrb	r3, [r7, #14]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d103      	bne.n	800c390 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2206      	movs	r2, #6
 800c38c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c38e:	e059      	b.n	800c444 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c390:	7bbb      	ldrb	r3, [r7, #14]
 800c392:	2b03      	cmp	r3, #3
 800c394:	d156      	bne.n	800c444 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2206      	movs	r2, #6
 800c39a:	705a      	strb	r2, [r3, #1]
      break;
 800c39c:	e052      	b.n	800c444 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2206      	movs	r2, #6
 800c3a2:	705a      	strb	r2, [r3, #1]
      break;
 800c3a4:	e04e      	b.n	800c444 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d019      	beq.n	800c3e4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c3bc:	23ff      	movs	r3, #255	@ 0xff
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 f926 	bl	800c610 <USBH_Get_StringDesc>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c3c8:	7bbb      	ldrb	r3, [r7, #14]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d103      	bne.n	800c3d6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2207      	movs	r2, #7
 800c3d2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c3d4:	e038      	b.n	800c448 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c3d6:	7bbb      	ldrb	r3, [r7, #14]
 800c3d8:	2b03      	cmp	r3, #3
 800c3da:	d135      	bne.n	800c448 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2207      	movs	r2, #7
 800c3e0:	705a      	strb	r2, [r3, #1]
      break;
 800c3e2:	e031      	b.n	800c448 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2207      	movs	r2, #7
 800c3e8:	705a      	strb	r2, [r3, #1]
      break;
 800c3ea:	e02d      	b.n	800c448 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d017      	beq.n	800c426 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c402:	23ff      	movs	r3, #255	@ 0xff
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 f903 	bl	800c610 <USBH_Get_StringDesc>
 800c40a:	4603      	mov	r3, r0
 800c40c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c40e:	7bbb      	ldrb	r3, [r7, #14]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d102      	bne.n	800c41a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c414:	2300      	movs	r3, #0
 800c416:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c418:	e018      	b.n	800c44c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c41a:	7bbb      	ldrb	r3, [r7, #14]
 800c41c:	2b03      	cmp	r3, #3
 800c41e:	d115      	bne.n	800c44c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800c420:	2300      	movs	r3, #0
 800c422:	73fb      	strb	r3, [r7, #15]
      break;
 800c424:	e012      	b.n	800c44c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800c426:	2300      	movs	r3, #0
 800c428:	73fb      	strb	r3, [r7, #15]
      break;
 800c42a:	e00f      	b.n	800c44c <USBH_HandleEnum+0x3b4>

    default:
      break;
 800c42c:	bf00      	nop
 800c42e:	e00e      	b.n	800c44e <USBH_HandleEnum+0x3b6>
      break;
 800c430:	bf00      	nop
 800c432:	e00c      	b.n	800c44e <USBH_HandleEnum+0x3b6>
      break;
 800c434:	bf00      	nop
 800c436:	e00a      	b.n	800c44e <USBH_HandleEnum+0x3b6>
      break;
 800c438:	bf00      	nop
 800c43a:	e008      	b.n	800c44e <USBH_HandleEnum+0x3b6>
      break;
 800c43c:	bf00      	nop
 800c43e:	e006      	b.n	800c44e <USBH_HandleEnum+0x3b6>
      break;
 800c440:	bf00      	nop
 800c442:	e004      	b.n	800c44e <USBH_HandleEnum+0x3b6>
      break;
 800c444:	bf00      	nop
 800c446:	e002      	b.n	800c44e <USBH_HandleEnum+0x3b6>
      break;
 800c448:	bf00      	nop
 800c44a:	e000      	b.n	800c44e <USBH_HandleEnum+0x3b6>
      break;
 800c44c:	bf00      	nop
  }
  return Status;
 800c44e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c450:	4618      	mov	r0, r3
 800c452:	3710      	adds	r7, #16
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c458:	b480      	push	{r7}
 800c45a:	b083      	sub	sp, #12
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	683a      	ldr	r2, [r7, #0]
 800c466:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800c46a:	bf00      	nop
 800c46c:	370c      	adds	r7, #12
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr

0800c476 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c476:	b580      	push	{r7, lr}
 800c478:	b082      	sub	sp, #8
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c484:	1c5a      	adds	r2, r3, #1
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f000 f804 	bl	800c49a <USBH_HandleSof>
}
 800c492:	bf00      	nop
 800c494:	3708      	adds	r7, #8
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b082      	sub	sp, #8
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	2b0b      	cmp	r3, #11
 800c4aa:	d10a      	bne.n	800c4c2 <USBH_HandleSof+0x28>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d005      	beq.n	800c4c2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c4bc:	699b      	ldr	r3, [r3, #24]
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	4798      	blx	r3
  }
}
 800c4c2:	bf00      	nop
 800c4c4:	3708      	adds	r7, #8
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}

0800c4ca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c4ca:	b480      	push	{r7}
 800c4cc:	b083      	sub	sp, #12
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c4da:	bf00      	nop
}
 800c4dc:	370c      	adds	r7, #12
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr

0800c4e6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c4e6:	b480      	push	{r7}
 800c4e8:	b083      	sub	sp, #12
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800c4f6:	bf00      	nop
}
 800c4f8:	370c      	adds	r7, #12
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr

0800c502 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c502:	b480      	push	{r7}
 800c504:	b083      	sub	sp, #12
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2201      	movs	r2, #1
 800c50e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2200      	movs	r2, #0
 800c51e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c522:	2300      	movs	r3, #0
}
 800c524:	4618      	mov	r0, r3
 800c526:	370c      	adds	r7, #12
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr

0800c530 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2201      	movs	r2, #1
 800c53c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2200      	movs	r2, #0
 800c54c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f004 fb2a 	bl	8010baa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	791b      	ldrb	r3, [r3, #4]
 800c55a:	4619      	mov	r1, r3
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 fe89 	bl	800d274 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	795b      	ldrb	r3, [r3, #5]
 800c566:	4619      	mov	r1, r3
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 fe83 	bl	800d274 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c56e:	2300      	movs	r3, #0
}
 800c570:	4618      	mov	r0, r3
 800c572:	3708      	adds	r7, #8
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b086      	sub	sp, #24
 800c57c:	af02      	add	r7, sp, #8
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	460b      	mov	r3, r1
 800c582:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800c58a:	78fb      	ldrb	r3, [r7, #3]
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	9300      	str	r3, [sp, #0]
 800c590:	4613      	mov	r3, r2
 800c592:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c596:	2100      	movs	r1, #0
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 f864 	bl	800c666 <USBH_GetDescriptor>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800c5a2:	7bfb      	ldrb	r3, [r7, #15]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d10a      	bne.n	800c5be <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f203 3026 	addw	r0, r3, #806	@ 0x326
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c5b4:	78fa      	ldrb	r2, [r7, #3]
 800c5b6:	b292      	uxth	r2, r2
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	f000 f919 	bl	800c7f0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3710      	adds	r7, #16
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b086      	sub	sp, #24
 800c5cc:	af02      	add	r7, sp, #8
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	331c      	adds	r3, #28
 800c5d8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c5da:	887b      	ldrh	r3, [r7, #2]
 800c5dc:	9300      	str	r3, [sp, #0]
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 f83d 	bl	800c666 <USBH_GetDescriptor>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c5f0:	7bfb      	ldrb	r3, [r7, #15]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d107      	bne.n	800c606 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c5f6:	887b      	ldrh	r3, [r7, #2]
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	68b9      	ldr	r1, [r7, #8]
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 f985 	bl	800c90c <USBH_ParseCfgDesc>
 800c602:	4603      	mov	r3, r0
 800c604:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c606:	7bfb      	ldrb	r3, [r7, #15]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b088      	sub	sp, #32
 800c614:	af02      	add	r7, sp, #8
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	607a      	str	r2, [r7, #4]
 800c61a:	461a      	mov	r2, r3
 800c61c:	460b      	mov	r3, r1
 800c61e:	72fb      	strb	r3, [r7, #11]
 800c620:	4613      	mov	r3, r2
 800c622:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800c624:	7afb      	ldrb	r3, [r7, #11]
 800c626:	b29b      	uxth	r3, r3
 800c628:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800c62c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800c634:	893b      	ldrh	r3, [r7, #8]
 800c636:	9300      	str	r3, [sp, #0]
 800c638:	460b      	mov	r3, r1
 800c63a:	2100      	movs	r1, #0
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f000 f812 	bl	800c666 <USBH_GetDescriptor>
 800c642:	4603      	mov	r3, r0
 800c644:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c646:	7dfb      	ldrb	r3, [r7, #23]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d107      	bne.n	800c65c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c652:	893a      	ldrh	r2, [r7, #8]
 800c654:	6879      	ldr	r1, [r7, #4]
 800c656:	4618      	mov	r0, r3
 800c658:	f000 fb1e 	bl	800cc98 <USBH_ParseStringDesc>
  }

  return status;
 800c65c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3718      	adds	r7, #24
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b084      	sub	sp, #16
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	60f8      	str	r0, [r7, #12]
 800c66e:	607b      	str	r3, [r7, #4]
 800c670:	460b      	mov	r3, r1
 800c672:	72fb      	strb	r3, [r7, #11]
 800c674:	4613      	mov	r3, r2
 800c676:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	789b      	ldrb	r3, [r3, #2]
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d11c      	bne.n	800c6ba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c680:	7afb      	ldrb	r3, [r7, #11]
 800c682:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c686:	b2da      	uxtb	r2, r3
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2206      	movs	r2, #6
 800c690:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	893a      	ldrh	r2, [r7, #8]
 800c696:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c698:	893b      	ldrh	r3, [r7, #8]
 800c69a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c69e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c6a2:	d104      	bne.n	800c6ae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f240 4209 	movw	r2, #1033	@ 0x409
 800c6aa:	829a      	strh	r2, [r3, #20]
 800c6ac:	e002      	b.n	800c6b4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	8b3a      	ldrh	r2, [r7, #24]
 800c6b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c6ba:	8b3b      	ldrh	r3, [r7, #24]
 800c6bc:	461a      	mov	r2, r3
 800c6be:	6879      	ldr	r1, [r7, #4]
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	f000 fb36 	bl	800cd32 <USBH_CtlReq>
 800c6c6:	4603      	mov	r3, r0
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3710      	adds	r7, #16
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	460b      	mov	r3, r1
 800c6da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	789b      	ldrb	r3, [r3, #2]
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d10f      	bne.n	800c704 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2205      	movs	r2, #5
 800c6ee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c6f0:	78fb      	ldrb	r3, [r7, #3]
 800c6f2:	b29a      	uxth	r2, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2200      	movs	r2, #0
 800c702:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c704:	2200      	movs	r2, #0
 800c706:	2100      	movs	r1, #0
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f000 fb12 	bl	800cd32 <USBH_CtlReq>
 800c70e:	4603      	mov	r3, r0
}
 800c710:	4618      	mov	r0, r3
 800c712:	3708      	adds	r7, #8
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	460b      	mov	r3, r1
 800c722:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	789b      	ldrb	r3, [r3, #2]
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d10e      	bne.n	800c74a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2200      	movs	r2, #0
 800c730:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2209      	movs	r2, #9
 800c736:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	887a      	ldrh	r2, [r7, #2]
 800c73c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2200      	movs	r2, #0
 800c742:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2200      	movs	r2, #0
 800c748:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c74a:	2200      	movs	r2, #0
 800c74c:	2100      	movs	r1, #0
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 faef 	bl	800cd32 <USBH_CtlReq>
 800c754:	4603      	mov	r3, r0
}
 800c756:	4618      	mov	r0, r3
 800c758:	3708      	adds	r7, #8
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c75e:	b580      	push	{r7, lr}
 800c760:	b082      	sub	sp, #8
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
 800c766:	460b      	mov	r3, r1
 800c768:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	789b      	ldrb	r3, [r3, #2]
 800c76e:	2b01      	cmp	r3, #1
 800c770:	d10f      	bne.n	800c792 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2200      	movs	r2, #0
 800c776:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2203      	movs	r2, #3
 800c77c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c77e:	78fb      	ldrb	r3, [r7, #3]
 800c780:	b29a      	uxth	r2, r3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2200      	movs	r2, #0
 800c78a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2200      	movs	r2, #0
 800c790:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c792:	2200      	movs	r2, #0
 800c794:	2100      	movs	r1, #0
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 facb 	bl	800cd32 <USBH_CtlReq>
 800c79c:	4603      	mov	r3, r0
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3708      	adds	r7, #8
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}

0800c7a6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c7a6:	b580      	push	{r7, lr}
 800c7a8:	b082      	sub	sp, #8
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
 800c7ae:	460b      	mov	r3, r1
 800c7b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	789b      	ldrb	r3, [r3, #2]
 800c7b6:	2b01      	cmp	r3, #1
 800c7b8:	d10f      	bne.n	800c7da <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2202      	movs	r2, #2
 800c7be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c7cc:	78fb      	ldrb	r3, [r7, #3]
 800c7ce:	b29a      	uxth	r2, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c7da:	2200      	movs	r2, #0
 800c7dc:	2100      	movs	r1, #0
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 faa7 	bl	800cd32 <USBH_CtlReq>
 800c7e4:	4603      	mov	r3, r0
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3708      	adds	r7, #8
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
	...

0800c7f0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b085      	sub	sp, #20
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	60b9      	str	r1, [r7, #8]
 800c7fa:	4613      	mov	r3, r2
 800c7fc:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	781a      	ldrb	r2, [r3, #0]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	785a      	ldrb	r2, [r3, #1]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	3302      	adds	r3, #2
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	461a      	mov	r2, r3
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	3303      	adds	r3, #3
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	021b      	lsls	r3, r3, #8
 800c81e:	b29b      	uxth	r3, r3
 800c820:	4313      	orrs	r3, r2
 800c822:	b29a      	uxth	r2, r3
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	791a      	ldrb	r2, [r3, #4]
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	795a      	ldrb	r2, [r3, #5]
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	799a      	ldrb	r2, [r3, #6]
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	79da      	ldrb	r2, [r3, #7]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	79db      	ldrb	r3, [r3, #7]
 800c84c:	2b20      	cmp	r3, #32
 800c84e:	dc0f      	bgt.n	800c870 <USBH_ParseDevDesc+0x80>
 800c850:	2b08      	cmp	r3, #8
 800c852:	db14      	blt.n	800c87e <USBH_ParseDevDesc+0x8e>
 800c854:	3b08      	subs	r3, #8
 800c856:	4a2c      	ldr	r2, [pc, #176]	@ (800c908 <USBH_ParseDevDesc+0x118>)
 800c858:	fa22 f303 	lsr.w	r3, r2, r3
 800c85c:	f003 0301 	and.w	r3, r3, #1
 800c860:	2b00      	cmp	r3, #0
 800c862:	bf14      	ite	ne
 800c864:	2301      	movne	r3, #1
 800c866:	2300      	moveq	r3, #0
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d102      	bne.n	800c874 <USBH_ParseDevDesc+0x84>
 800c86e:	e006      	b.n	800c87e <USBH_ParseDevDesc+0x8e>
 800c870:	2b40      	cmp	r3, #64	@ 0x40
 800c872:	d104      	bne.n	800c87e <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	79da      	ldrb	r2, [r3, #7]
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	71da      	strb	r2, [r3, #7]
      break;
 800c87c:	e003      	b.n	800c886 <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2240      	movs	r2, #64	@ 0x40
 800c882:	71da      	strb	r2, [r3, #7]
      break;
 800c884:	bf00      	nop
  }

  if (length > 8U)
 800c886:	88fb      	ldrh	r3, [r7, #6]
 800c888:	2b08      	cmp	r3, #8
 800c88a:	d936      	bls.n	800c8fa <USBH_ParseDevDesc+0x10a>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	3308      	adds	r3, #8
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	461a      	mov	r2, r3
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	3309      	adds	r3, #9
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	021b      	lsls	r3, r3, #8
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	b29a      	uxth	r2, r3
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	330a      	adds	r3, #10
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	330b      	adds	r3, #11
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	021b      	lsls	r3, r3, #8
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	330c      	adds	r3, #12
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	330d      	adds	r3, #13
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	021b      	lsls	r3, r3, #8
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	b29a      	uxth	r2, r3
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	7b9a      	ldrb	r2, [r3, #14]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	7bda      	ldrb	r2, [r3, #15]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	7c1a      	ldrb	r2, [r3, #16]
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	7c5a      	ldrb	r2, [r3, #17]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	745a      	strb	r2, [r3, #17]
  }
}
 800c8fa:	bf00      	nop
 800c8fc:	3714      	adds	r7, #20
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr
 800c906:	bf00      	nop
 800c908:	01000101 	.word	0x01000101

0800c90c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b08c      	sub	sp, #48	@ 0x30
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	4613      	mov	r3, r2
 800c918:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c920:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c922:	2300      	movs	r3, #0
 800c924:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c92c:	2300      	movs	r3, #0
 800c92e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800c932:	2300      	movs	r3, #0
 800c934:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	781a      	ldrb	r2, [r3, #0]
 800c940:	6a3b      	ldr	r3, [r7, #32]
 800c942:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	785a      	ldrb	r2, [r3, #1]
 800c948:	6a3b      	ldr	r3, [r7, #32]
 800c94a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	3302      	adds	r3, #2
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	461a      	mov	r2, r3
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	3303      	adds	r3, #3
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	021b      	lsls	r3, r3, #8
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	4313      	orrs	r3, r2
 800c960:	b29b      	uxth	r3, r3
 800c962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c966:	bf28      	it	cs
 800c968:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	6a3b      	ldr	r3, [r7, #32]
 800c970:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	791a      	ldrb	r2, [r3, #4]
 800c976:	6a3b      	ldr	r3, [r7, #32]
 800c978:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	795a      	ldrb	r2, [r3, #5]
 800c97e:	6a3b      	ldr	r3, [r7, #32]
 800c980:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	799a      	ldrb	r2, [r3, #6]
 800c986:	6a3b      	ldr	r3, [r7, #32]
 800c988:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	79da      	ldrb	r2, [r3, #7]
 800c98e:	6a3b      	ldr	r3, [r7, #32]
 800c990:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	7a1a      	ldrb	r2, [r3, #8]
 800c996:	6a3b      	ldr	r3, [r7, #32]
 800c998:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800c99a:	6a3b      	ldr	r3, [r7, #32]
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	2b09      	cmp	r3, #9
 800c9a0:	d002      	beq.n	800c9a8 <USBH_ParseCfgDesc+0x9c>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c9a2:	6a3b      	ldr	r3, [r7, #32]
 800c9a4:	2209      	movs	r2, #9
 800c9a6:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c9a8:	88fb      	ldrh	r3, [r7, #6]
 800c9aa:	2b09      	cmp	r3, #9
 800c9ac:	f240 809d 	bls.w	800caea <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 800c9b0:	2309      	movs	r3, #9
 800c9b2:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c9b8:	e081      	b.n	800cabe <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c9ba:	f107 0316 	add.w	r3, r7, #22
 800c9be:	4619      	mov	r1, r3
 800c9c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9c2:	f000 f99c 	bl	800ccfe <USBH_GetNextDesc>
 800c9c6:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ca:	785b      	ldrb	r3, [r3, #1]
 800c9cc:	2b04      	cmp	r3, #4
 800c9ce:	d176      	bne.n	800cabe <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c9d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	2b09      	cmp	r3, #9
 800c9d6:	d002      	beq.n	800c9de <USBH_ParseCfgDesc+0xd2>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9da:	2209      	movs	r2, #9
 800c9dc:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c9de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9e2:	221a      	movs	r2, #26
 800c9e4:	fb02 f303 	mul.w	r3, r2, r3
 800c9e8:	3308      	adds	r3, #8
 800c9ea:	6a3a      	ldr	r2, [r7, #32]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	3302      	adds	r3, #2
 800c9f0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c9f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c9f4:	69f8      	ldr	r0, [r7, #28]
 800c9f6:	f000 f87e 	bl	800caf6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ca00:	2300      	movs	r3, #0
 800ca02:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ca04:	e043      	b.n	800ca8e <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ca06:	f107 0316 	add.w	r3, r7, #22
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca0e:	f000 f976 	bl	800ccfe <USBH_GetNextDesc>
 800ca12:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ca14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca16:	785b      	ldrb	r3, [r3, #1]
 800ca18:	2b05      	cmp	r3, #5
 800ca1a:	d138      	bne.n	800ca8e <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	795b      	ldrb	r3, [r3, #5]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d10f      	bne.n	800ca44 <USBH_ParseCfgDesc+0x138>
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	799b      	ldrb	r3, [r3, #6]
 800ca28:	2b02      	cmp	r3, #2
 800ca2a:	d10b      	bne.n	800ca44 <USBH_ParseCfgDesc+0x138>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	79db      	ldrb	r3, [r3, #7]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d10f      	bne.n	800ca54 <USBH_ParseCfgDesc+0x148>
 800ca34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	2b09      	cmp	r3, #9
 800ca3a:	d00b      	beq.n	800ca54 <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 800ca3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca3e:	2209      	movs	r2, #9
 800ca40:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ca42:	e007      	b.n	800ca54 <USBH_ParseCfgDesc+0x148>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800ca44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	2b07      	cmp	r3, #7
 800ca4a:	d004      	beq.n	800ca56 <USBH_ParseCfgDesc+0x14a>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800ca4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca4e:	2207      	movs	r2, #7
 800ca50:	701a      	strb	r2, [r3, #0]
 800ca52:	e000      	b.n	800ca56 <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ca54:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ca56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca5a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ca5e:	3201      	adds	r2, #1
 800ca60:	00d2      	lsls	r2, r2, #3
 800ca62:	211a      	movs	r1, #26
 800ca64:	fb01 f303 	mul.w	r3, r1, r3
 800ca68:	4413      	add	r3, r2
 800ca6a:	3308      	adds	r3, #8
 800ca6c:	6a3a      	ldr	r2, [r7, #32]
 800ca6e:	4413      	add	r3, r2
 800ca70:	3304      	adds	r3, #4
 800ca72:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ca74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca76:	69b9      	ldr	r1, [r7, #24]
 800ca78:	68f8      	ldr	r0, [r7, #12]
 800ca7a:	f000 f86b 	bl	800cb54 <USBH_ParseEPDesc>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800ca84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ca88:	3301      	adds	r3, #1
 800ca8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ca8e:	69fb      	ldr	r3, [r7, #28]
 800ca90:	791b      	ldrb	r3, [r3, #4]
 800ca92:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d204      	bcs.n	800caa4 <USBH_ParseCfgDesc+0x198>
 800ca9a:	6a3b      	ldr	r3, [r7, #32]
 800ca9c:	885a      	ldrh	r2, [r3, #2]
 800ca9e:	8afb      	ldrh	r3, [r7, #22]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d8b0      	bhi.n	800ca06 <USBH_ParseCfgDesc+0xfa>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	791b      	ldrb	r3, [r3, #4]
 800caa8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800caac:	429a      	cmp	r2, r3
 800caae:	d201      	bcs.n	800cab4 <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 800cab0:	2303      	movs	r3, #3
 800cab2:	e01c      	b.n	800caee <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 800cab4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cab8:	3301      	adds	r3, #1
 800caba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cabe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	d805      	bhi.n	800cad2 <USBH_ParseCfgDesc+0x1c6>
 800cac6:	6a3b      	ldr	r3, [r7, #32]
 800cac8:	885a      	ldrh	r2, [r3, #2]
 800caca:	8afb      	ldrh	r3, [r7, #22]
 800cacc:	429a      	cmp	r2, r3
 800cace:	f63f af74 	bhi.w	800c9ba <USBH_ParseCfgDesc+0xae>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800cad2:	6a3b      	ldr	r3, [r7, #32]
 800cad4:	791b      	ldrb	r3, [r3, #4]
 800cad6:	2b02      	cmp	r3, #2
 800cad8:	bf28      	it	cs
 800cada:	2302      	movcs	r3, #2
 800cadc:	b2db      	uxtb	r3, r3
 800cade:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d201      	bcs.n	800caea <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 800cae6:	2303      	movs	r3, #3
 800cae8:	e001      	b.n	800caee <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 800caea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3730      	adds	r7, #48	@ 0x30
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800caf6:	b480      	push	{r7}
 800caf8:	b083      	sub	sp, #12
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
 800cafe:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	781a      	ldrb	r2, [r3, #0]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	785a      	ldrb	r2, [r3, #1]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	789a      	ldrb	r2, [r3, #2]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	78da      	ldrb	r2, [r3, #3]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	791a      	ldrb	r2, [r3, #4]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	795a      	ldrb	r2, [r3, #5]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	799a      	ldrb	r2, [r3, #6]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	79da      	ldrb	r2, [r3, #7]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	7a1a      	ldrb	r2, [r3, #8]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	721a      	strb	r2, [r3, #8]
}
 800cb48:	bf00      	nop
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b087      	sub	sp, #28
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	60b9      	str	r1, [r7, #8]
 800cb5e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800cb60:	2300      	movs	r3, #0
 800cb62:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	781a      	ldrb	r2, [r3, #0]
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	785a      	ldrb	r2, [r3, #1]
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	789a      	ldrb	r2, [r3, #2]
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	78da      	ldrb	r2, [r3, #3]
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	3304      	adds	r3, #4
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	3305      	adds	r3, #5
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	021b      	lsls	r3, r3, #8
 800cb94:	b29b      	uxth	r3, r3
 800cb96:	4313      	orrs	r3, r2
 800cb98:	b29a      	uxth	r2, r3
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	799a      	ldrb	r2, [r3, #6]
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	889b      	ldrh	r3, [r3, #4]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d102      	bne.n	800cbb4 <USBH_ParseEPDesc+0x60>
  {
    status = USBH_NOT_SUPPORTED;
 800cbae:	2303      	movs	r3, #3
 800cbb0:	75fb      	strb	r3, [r7, #23]
 800cbb2:	e031      	b.n	800cc18 <USBH_ParseEPDesc+0xc4>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	889b      	ldrh	r3, [r3, #4]
 800cbb8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800cbbc:	f023 0307 	bic.w	r3, r3, #7
 800cbc0:	b29a      	uxth	r2, r3
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	889b      	ldrh	r3, [r3, #4]
 800cbca:	b21a      	sxth	r2, r3
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	3304      	adds	r3, #4
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	3305      	adds	r3, #5
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	021b      	lsls	r3, r3, #8
 800cbdc:	b29b      	uxth	r3, r3
 800cbde:	430b      	orrs	r3, r1
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d10f      	bne.n	800cc0a <USBH_ParseEPDesc+0xb6>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	3304      	adds	r3, #4
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	3305      	adds	r3, #5
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	021b      	lsls	r3, r3, #8
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	430b      	orrs	r3, r1
 800cbfe:	b29b      	uxth	r3, r3
 800cc00:	b21b      	sxth	r3, r3
 800cc02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc06:	b21b      	sxth	r3, r3
 800cc08:	e001      	b.n	800cc0e <USBH_ParseEPDesc+0xba>
 800cc0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	b21b      	sxth	r3, r3
 800cc12:	b29a      	uxth	r2, r3
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d116      	bne.n	800cc50 <USBH_ParseEPDesc+0xfc>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	78db      	ldrb	r3, [r3, #3]
 800cc26:	f003 0303 	and.w	r3, r3, #3
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d005      	beq.n	800cc3a <USBH_ParseEPDesc+0xe6>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	78db      	ldrb	r3, [r3, #3]
 800cc32:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cc36:	2b03      	cmp	r3, #3
 800cc38:	d127      	bne.n	800cc8a <USBH_ParseEPDesc+0x136>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	799b      	ldrb	r3, [r3, #6]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d003      	beq.n	800cc4a <USBH_ParseEPDesc+0xf6>
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	799b      	ldrb	r3, [r3, #6]
 800cc46:	2b10      	cmp	r3, #16
 800cc48:	d91f      	bls.n	800cc8a <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800cc4a:	2303      	movs	r3, #3
 800cc4c:	75fb      	strb	r3, [r7, #23]
 800cc4e:	e01c      	b.n	800cc8a <USBH_ParseEPDesc+0x136>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	78db      	ldrb	r3, [r3, #3]
 800cc54:	f003 0303 	and.w	r3, r3, #3
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d10a      	bne.n	800cc72 <USBH_ParseEPDesc+0x11e>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	799b      	ldrb	r3, [r3, #6]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d003      	beq.n	800cc6c <USBH_ParseEPDesc+0x118>
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	799b      	ldrb	r3, [r3, #6]
 800cc68:	2b10      	cmp	r3, #16
 800cc6a:	d90e      	bls.n	800cc8a <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800cc6c:	2303      	movs	r3, #3
 800cc6e:	75fb      	strb	r3, [r7, #23]
 800cc70:	e00b      	b.n	800cc8a <USBH_ParseEPDesc+0x136>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	78db      	ldrb	r3, [r3, #3]
 800cc76:	f003 0303 	and.w	r3, r3, #3
 800cc7a:	2b03      	cmp	r3, #3
 800cc7c:	d105      	bne.n	800cc8a <USBH_ParseEPDesc+0x136>
    {
      if (ep_descriptor->bInterval == 0U)
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	799b      	ldrb	r3, [r3, #6]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d101      	bne.n	800cc8a <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800cc86:	2303      	movs	r3, #3
 800cc88:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800cc8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	371c      	adds	r7, #28
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr

0800cc98 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b087      	sub	sp, #28
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	60b9      	str	r1, [r7, #8]
 800cca2:	4613      	mov	r3, r2
 800cca4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	3301      	adds	r3, #1
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	2b03      	cmp	r3, #3
 800ccae:	d120      	bne.n	800ccf2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	1e9a      	subs	r2, r3, #2
 800ccb6:	88fb      	ldrh	r3, [r7, #6]
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	bf28      	it	cs
 800ccbc:	4613      	movcs	r3, r2
 800ccbe:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	3302      	adds	r3, #2
 800ccc4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	82fb      	strh	r3, [r7, #22]
 800ccca:	e00b      	b.n	800cce4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cccc:	8afb      	ldrh	r3, [r7, #22]
 800ccce:	68fa      	ldr	r2, [r7, #12]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	781a      	ldrb	r2, [r3, #0]
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ccde:	8afb      	ldrh	r3, [r7, #22]
 800cce0:	3302      	adds	r3, #2
 800cce2:	82fb      	strh	r3, [r7, #22]
 800cce4:	8afa      	ldrh	r2, [r7, #22]
 800cce6:	8abb      	ldrh	r3, [r7, #20]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d3ef      	bcc.n	800cccc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	701a      	strb	r2, [r3, #0]
  }
}
 800ccf2:	bf00      	nop
 800ccf4:	371c      	adds	r7, #28
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr

0800ccfe <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800ccfe:	b480      	push	{r7}
 800cd00:	b085      	sub	sp, #20
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
 800cd06:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	881b      	ldrh	r3, [r3, #0]
 800cd0c:	687a      	ldr	r2, [r7, #4]
 800cd0e:	7812      	ldrb	r2, [r2, #0]
 800cd10:	4413      	add	r3, r2
 800cd12:	b29a      	uxth	r2, r3
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	4413      	add	r3, r2
 800cd22:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cd24:	68fb      	ldr	r3, [r7, #12]
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3714      	adds	r7, #20
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr

0800cd32 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800cd32:	b580      	push	{r7, lr}
 800cd34:	b086      	sub	sp, #24
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	60f8      	str	r0, [r7, #12]
 800cd3a:	60b9      	str	r1, [r7, #8]
 800cd3c:	4613      	mov	r3, r2
 800cd3e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800cd40:	2301      	movs	r3, #1
 800cd42:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	789b      	ldrb	r3, [r3, #2]
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d002      	beq.n	800cd52 <USBH_CtlReq+0x20>
 800cd4c:	2b02      	cmp	r3, #2
 800cd4e:	d00f      	beq.n	800cd70 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800cd50:	e027      	b.n	800cda2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	68ba      	ldr	r2, [r7, #8]
 800cd56:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	88fa      	ldrh	r2, [r7, #6]
 800cd5c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2201      	movs	r2, #1
 800cd62:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2202      	movs	r2, #2
 800cd68:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	75fb      	strb	r3, [r7, #23]
      break;
 800cd6e:	e018      	b.n	800cda2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	f000 f81b 	bl	800cdac <USBH_HandleControl>
 800cd76:	4603      	mov	r3, r0
 800cd78:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800cd7a:	7dfb      	ldrb	r3, [r7, #23]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d002      	beq.n	800cd86 <USBH_CtlReq+0x54>
 800cd80:	7dfb      	ldrb	r3, [r7, #23]
 800cd82:	2b03      	cmp	r3, #3
 800cd84:	d106      	bne.n	800cd94 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2201      	movs	r2, #1
 800cd8a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	761a      	strb	r2, [r3, #24]
      break;
 800cd92:	e005      	b.n	800cda0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800cd94:	7dfb      	ldrb	r3, [r7, #23]
 800cd96:	2b02      	cmp	r3, #2
 800cd98:	d102      	bne.n	800cda0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	709a      	strb	r2, [r3, #2]
      break;
 800cda0:	bf00      	nop
  }
  return status;
 800cda2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3718      	adds	r7, #24
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b086      	sub	sp, #24
 800cdb0:	af02      	add	r7, sp, #8
 800cdb2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	7e1b      	ldrb	r3, [r3, #24]
 800cdc0:	3b01      	subs	r3, #1
 800cdc2:	2b0a      	cmp	r3, #10
 800cdc4:	f200 8156 	bhi.w	800d074 <USBH_HandleControl+0x2c8>
 800cdc8:	a201      	add	r2, pc, #4	@ (adr r2, 800cdd0 <USBH_HandleControl+0x24>)
 800cdca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdce:	bf00      	nop
 800cdd0:	0800cdfd 	.word	0x0800cdfd
 800cdd4:	0800ce17 	.word	0x0800ce17
 800cdd8:	0800ce81 	.word	0x0800ce81
 800cddc:	0800cea7 	.word	0x0800cea7
 800cde0:	0800cedf 	.word	0x0800cedf
 800cde4:	0800cf09 	.word	0x0800cf09
 800cde8:	0800cf5b 	.word	0x0800cf5b
 800cdec:	0800cf7d 	.word	0x0800cf7d
 800cdf0:	0800cfb9 	.word	0x0800cfb9
 800cdf4:	0800cfdf 	.word	0x0800cfdf
 800cdf8:	0800d01d 	.word	0x0800d01d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f103 0110 	add.w	r1, r3, #16
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	795b      	ldrb	r3, [r3, #5]
 800ce06:	461a      	mov	r2, r3
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f000 f943 	bl	800d094 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2202      	movs	r2, #2
 800ce12:	761a      	strb	r2, [r3, #24]
      break;
 800ce14:	e139      	b.n	800d08a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	795b      	ldrb	r3, [r3, #5]
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f003 ffb3 	bl	8010d88 <USBH_LL_GetURBState>
 800ce22:	4603      	mov	r3, r0
 800ce24:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ce26:	7bbb      	ldrb	r3, [r7, #14]
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	d11e      	bne.n	800ce6a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	7c1b      	ldrb	r3, [r3, #16]
 800ce30:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ce34:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	8adb      	ldrh	r3, [r3, #22]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d00a      	beq.n	800ce54 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ce3e:	7b7b      	ldrb	r3, [r7, #13]
 800ce40:	2b80      	cmp	r3, #128	@ 0x80
 800ce42:	d103      	bne.n	800ce4c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2203      	movs	r2, #3
 800ce48:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ce4a:	e115      	b.n	800d078 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2205      	movs	r2, #5
 800ce50:	761a      	strb	r2, [r3, #24]
      break;
 800ce52:	e111      	b.n	800d078 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ce54:	7b7b      	ldrb	r3, [r7, #13]
 800ce56:	2b80      	cmp	r3, #128	@ 0x80
 800ce58:	d103      	bne.n	800ce62 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2209      	movs	r2, #9
 800ce5e:	761a      	strb	r2, [r3, #24]
      break;
 800ce60:	e10a      	b.n	800d078 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2207      	movs	r2, #7
 800ce66:	761a      	strb	r2, [r3, #24]
      break;
 800ce68:	e106      	b.n	800d078 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ce6a:	7bbb      	ldrb	r3, [r7, #14]
 800ce6c:	2b04      	cmp	r3, #4
 800ce6e:	d003      	beq.n	800ce78 <USBH_HandleControl+0xcc>
 800ce70:	7bbb      	ldrb	r3, [r7, #14]
 800ce72:	2b02      	cmp	r3, #2
 800ce74:	f040 8100 	bne.w	800d078 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	220b      	movs	r2, #11
 800ce7c:	761a      	strb	r2, [r3, #24]
      break;
 800ce7e:	e0fb      	b.n	800d078 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ce86:	b29a      	uxth	r2, r3
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6899      	ldr	r1, [r3, #8]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	899a      	ldrh	r2, [r3, #12]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	791b      	ldrb	r3, [r3, #4]
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f000 f93a 	bl	800d112 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2204      	movs	r2, #4
 800cea2:	761a      	strb	r2, [r3, #24]
      break;
 800cea4:	e0f1      	b.n	800d08a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	791b      	ldrb	r3, [r3, #4]
 800ceaa:	4619      	mov	r1, r3
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f003 ff6b 	bl	8010d88 <USBH_LL_GetURBState>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ceb6:	7bbb      	ldrb	r3, [r7, #14]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d102      	bne.n	800cec2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2209      	movs	r2, #9
 800cec0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800cec2:	7bbb      	ldrb	r3, [r7, #14]
 800cec4:	2b05      	cmp	r3, #5
 800cec6:	d102      	bne.n	800cece <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800cec8:	2303      	movs	r3, #3
 800ceca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cecc:	e0d6      	b.n	800d07c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800cece:	7bbb      	ldrb	r3, [r7, #14]
 800ced0:	2b04      	cmp	r3, #4
 800ced2:	f040 80d3 	bne.w	800d07c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	220b      	movs	r2, #11
 800ceda:	761a      	strb	r2, [r3, #24]
      break;
 800cedc:	e0ce      	b.n	800d07c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6899      	ldr	r1, [r3, #8]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	899a      	ldrh	r2, [r3, #12]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	795b      	ldrb	r3, [r3, #5]
 800ceea:	2001      	movs	r0, #1
 800ceec:	9000      	str	r0, [sp, #0]
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 f8ea 	bl	800d0c8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800cefa:	b29a      	uxth	r2, r3
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2206      	movs	r2, #6
 800cf04:	761a      	strb	r2, [r3, #24]
      break;
 800cf06:	e0c0      	b.n	800d08a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	795b      	ldrb	r3, [r3, #5]
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f003 ff3a 	bl	8010d88 <USBH_LL_GetURBState>
 800cf14:	4603      	mov	r3, r0
 800cf16:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cf18:	7bbb      	ldrb	r3, [r7, #14]
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d103      	bne.n	800cf26 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2207      	movs	r2, #7
 800cf22:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cf24:	e0ac      	b.n	800d080 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800cf26:	7bbb      	ldrb	r3, [r7, #14]
 800cf28:	2b05      	cmp	r3, #5
 800cf2a:	d105      	bne.n	800cf38 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	220c      	movs	r2, #12
 800cf30:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800cf32:	2303      	movs	r3, #3
 800cf34:	73fb      	strb	r3, [r7, #15]
      break;
 800cf36:	e0a3      	b.n	800d080 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cf38:	7bbb      	ldrb	r3, [r7, #14]
 800cf3a:	2b02      	cmp	r3, #2
 800cf3c:	d103      	bne.n	800cf46 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2205      	movs	r2, #5
 800cf42:	761a      	strb	r2, [r3, #24]
      break;
 800cf44:	e09c      	b.n	800d080 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800cf46:	7bbb      	ldrb	r3, [r7, #14]
 800cf48:	2b04      	cmp	r3, #4
 800cf4a:	f040 8099 	bne.w	800d080 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	220b      	movs	r2, #11
 800cf52:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cf54:	2302      	movs	r3, #2
 800cf56:	73fb      	strb	r3, [r7, #15]
      break;
 800cf58:	e092      	b.n	800d080 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	791b      	ldrb	r3, [r3, #4]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	2100      	movs	r1, #0
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f000 f8d5 	bl	800d112 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800cf6e:	b29a      	uxth	r2, r3
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2208      	movs	r2, #8
 800cf78:	761a      	strb	r2, [r3, #24]

      break;
 800cf7a:	e086      	b.n	800d08a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	791b      	ldrb	r3, [r3, #4]
 800cf80:	4619      	mov	r1, r3
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f003 ff00 	bl	8010d88 <USBH_LL_GetURBState>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cf8c:	7bbb      	ldrb	r3, [r7, #14]
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	d105      	bne.n	800cf9e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	220d      	movs	r2, #13
 800cf96:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cf9c:	e072      	b.n	800d084 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800cf9e:	7bbb      	ldrb	r3, [r7, #14]
 800cfa0:	2b04      	cmp	r3, #4
 800cfa2:	d103      	bne.n	800cfac <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	220b      	movs	r2, #11
 800cfa8:	761a      	strb	r2, [r3, #24]
      break;
 800cfaa:	e06b      	b.n	800d084 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800cfac:	7bbb      	ldrb	r3, [r7, #14]
 800cfae:	2b05      	cmp	r3, #5
 800cfb0:	d168      	bne.n	800d084 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800cfb2:	2303      	movs	r3, #3
 800cfb4:	73fb      	strb	r3, [r7, #15]
      break;
 800cfb6:	e065      	b.n	800d084 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	795b      	ldrb	r3, [r3, #5]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	9200      	str	r2, [sp, #0]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f000 f87f 	bl	800d0c8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800cfd0:	b29a      	uxth	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	220a      	movs	r2, #10
 800cfda:	761a      	strb	r2, [r3, #24]
      break;
 800cfdc:	e055      	b.n	800d08a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	795b      	ldrb	r3, [r3, #5]
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f003 fecf 	bl	8010d88 <USBH_LL_GetURBState>
 800cfea:	4603      	mov	r3, r0
 800cfec:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cfee:	7bbb      	ldrb	r3, [r7, #14]
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d105      	bne.n	800d000 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800cff4:	2300      	movs	r3, #0
 800cff6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	220d      	movs	r2, #13
 800cffc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cffe:	e043      	b.n	800d088 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d000:	7bbb      	ldrb	r3, [r7, #14]
 800d002:	2b02      	cmp	r3, #2
 800d004:	d103      	bne.n	800d00e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2209      	movs	r2, #9
 800d00a:	761a      	strb	r2, [r3, #24]
      break;
 800d00c:	e03c      	b.n	800d088 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d00e:	7bbb      	ldrb	r3, [r7, #14]
 800d010:	2b04      	cmp	r3, #4
 800d012:	d139      	bne.n	800d088 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	220b      	movs	r2, #11
 800d018:	761a      	strb	r2, [r3, #24]
      break;
 800d01a:	e035      	b.n	800d088 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	7e5b      	ldrb	r3, [r3, #25]
 800d020:	3301      	adds	r3, #1
 800d022:	b2da      	uxtb	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	765a      	strb	r2, [r3, #25]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	7e5b      	ldrb	r3, [r3, #25]
 800d02c:	2b02      	cmp	r3, #2
 800d02e:	d806      	bhi.n	800d03e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2201      	movs	r2, #1
 800d034:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2201      	movs	r2, #1
 800d03a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d03c:	e025      	b.n	800d08a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d044:	2106      	movs	r1, #6
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	795b      	ldrb	r3, [r3, #5]
 800d054:	4619      	mov	r1, r3
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 f90c 	bl	800d274 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	791b      	ldrb	r3, [r3, #4]
 800d060:	4619      	mov	r1, r3
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 f906 	bl	800d274 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2200      	movs	r2, #0
 800d06c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d06e:	2302      	movs	r3, #2
 800d070:	73fb      	strb	r3, [r7, #15]
      break;
 800d072:	e00a      	b.n	800d08a <USBH_HandleControl+0x2de>

    default:
      break;
 800d074:	bf00      	nop
 800d076:	e008      	b.n	800d08a <USBH_HandleControl+0x2de>
      break;
 800d078:	bf00      	nop
 800d07a:	e006      	b.n	800d08a <USBH_HandleControl+0x2de>
      break;
 800d07c:	bf00      	nop
 800d07e:	e004      	b.n	800d08a <USBH_HandleControl+0x2de>
      break;
 800d080:	bf00      	nop
 800d082:	e002      	b.n	800d08a <USBH_HandleControl+0x2de>
      break;
 800d084:	bf00      	nop
 800d086:	e000      	b.n	800d08a <USBH_HandleControl+0x2de>
      break;
 800d088:	bf00      	nop
  }

  return status;
 800d08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3710      	adds	r7, #16
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b088      	sub	sp, #32
 800d098:	af04      	add	r7, sp, #16
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	4613      	mov	r3, r2
 800d0a0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d0a2:	79f9      	ldrb	r1, [r7, #7]
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	9303      	str	r3, [sp, #12]
 800d0a8:	2308      	movs	r3, #8
 800d0aa:	9302      	str	r3, [sp, #8]
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	9301      	str	r3, [sp, #4]
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	9300      	str	r3, [sp, #0]
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	68f8      	ldr	r0, [r7, #12]
 800d0ba:	f003 fe34 	bl	8010d26 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d0be:	2300      	movs	r3, #0
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3710      	adds	r7, #16
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}

0800d0c8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b088      	sub	sp, #32
 800d0cc:	af04      	add	r7, sp, #16
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	60b9      	str	r1, [r7, #8]
 800d0d2:	4611      	mov	r1, r2
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	80fb      	strh	r3, [r7, #6]
 800d0da:	4613      	mov	r3, r2
 800d0dc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d001      	beq.n	800d0ec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d0ec:	7979      	ldrb	r1, [r7, #5]
 800d0ee:	7e3b      	ldrb	r3, [r7, #24]
 800d0f0:	9303      	str	r3, [sp, #12]
 800d0f2:	88fb      	ldrh	r3, [r7, #6]
 800d0f4:	9302      	str	r3, [sp, #8]
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	9301      	str	r3, [sp, #4]
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	9300      	str	r3, [sp, #0]
 800d0fe:	2300      	movs	r3, #0
 800d100:	2200      	movs	r2, #0
 800d102:	68f8      	ldr	r0, [r7, #12]
 800d104:	f003 fe0f 	bl	8010d26 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b088      	sub	sp, #32
 800d116:	af04      	add	r7, sp, #16
 800d118:	60f8      	str	r0, [r7, #12]
 800d11a:	60b9      	str	r1, [r7, #8]
 800d11c:	4611      	mov	r1, r2
 800d11e:	461a      	mov	r2, r3
 800d120:	460b      	mov	r3, r1
 800d122:	80fb      	strh	r3, [r7, #6]
 800d124:	4613      	mov	r3, r2
 800d126:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d128:	7979      	ldrb	r1, [r7, #5]
 800d12a:	2300      	movs	r3, #0
 800d12c:	9303      	str	r3, [sp, #12]
 800d12e:	88fb      	ldrh	r3, [r7, #6]
 800d130:	9302      	str	r3, [sp, #8]
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	9301      	str	r3, [sp, #4]
 800d136:	2301      	movs	r3, #1
 800d138:	9300      	str	r3, [sp, #0]
 800d13a:	2300      	movs	r3, #0
 800d13c:	2201      	movs	r2, #1
 800d13e:	68f8      	ldr	r0, [r7, #12]
 800d140:	f003 fdf1 	bl	8010d26 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d144:	2300      	movs	r3, #0

}
 800d146:	4618      	mov	r0, r3
 800d148:	3710      	adds	r7, #16
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d14e:	b580      	push	{r7, lr}
 800d150:	b088      	sub	sp, #32
 800d152:	af04      	add	r7, sp, #16
 800d154:	60f8      	str	r0, [r7, #12]
 800d156:	60b9      	str	r1, [r7, #8]
 800d158:	4611      	mov	r1, r2
 800d15a:	461a      	mov	r2, r3
 800d15c:	460b      	mov	r3, r1
 800d15e:	80fb      	strh	r3, [r7, #6]
 800d160:	4613      	mov	r3, r2
 800d162:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d001      	beq.n	800d172 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d16e:	2300      	movs	r3, #0
 800d170:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d172:	7979      	ldrb	r1, [r7, #5]
 800d174:	7e3b      	ldrb	r3, [r7, #24]
 800d176:	9303      	str	r3, [sp, #12]
 800d178:	88fb      	ldrh	r3, [r7, #6]
 800d17a:	9302      	str	r3, [sp, #8]
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	9301      	str	r3, [sp, #4]
 800d180:	2301      	movs	r3, #1
 800d182:	9300      	str	r3, [sp, #0]
 800d184:	2302      	movs	r3, #2
 800d186:	2200      	movs	r2, #0
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f003 fdcc 	bl	8010d26 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d18e:	2300      	movs	r3, #0
}
 800d190:	4618      	mov	r0, r3
 800d192:	3710      	adds	r7, #16
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b088      	sub	sp, #32
 800d19c:	af04      	add	r7, sp, #16
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	4611      	mov	r1, r2
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	80fb      	strh	r3, [r7, #6]
 800d1aa:	4613      	mov	r3, r2
 800d1ac:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d1ae:	7979      	ldrb	r1, [r7, #5]
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	9303      	str	r3, [sp, #12]
 800d1b4:	88fb      	ldrh	r3, [r7, #6]
 800d1b6:	9302      	str	r3, [sp, #8]
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	9301      	str	r3, [sp, #4]
 800d1bc:	2301      	movs	r3, #1
 800d1be:	9300      	str	r3, [sp, #0]
 800d1c0:	2302      	movs	r3, #2
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	68f8      	ldr	r0, [r7, #12]
 800d1c6:	f003 fdae 	bl	8010d26 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d1ca:	2300      	movs	r3, #0
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3710      	adds	r7, #16
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b086      	sub	sp, #24
 800d1d8:	af04      	add	r7, sp, #16
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	4608      	mov	r0, r1
 800d1de:	4611      	mov	r1, r2
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	70fb      	strb	r3, [r7, #3]
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	70bb      	strb	r3, [r7, #2]
 800d1ea:	4613      	mov	r3, r2
 800d1ec:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d1ee:	7878      	ldrb	r0, [r7, #1]
 800d1f0:	78ba      	ldrb	r2, [r7, #2]
 800d1f2:	78f9      	ldrb	r1, [r7, #3]
 800d1f4:	8b3b      	ldrh	r3, [r7, #24]
 800d1f6:	9302      	str	r3, [sp, #8]
 800d1f8:	7d3b      	ldrb	r3, [r7, #20]
 800d1fa:	9301      	str	r3, [sp, #4]
 800d1fc:	7c3b      	ldrb	r3, [r7, #16]
 800d1fe:	9300      	str	r3, [sp, #0]
 800d200:	4603      	mov	r3, r0
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f003 fd41 	bl	8010c8a <USBH_LL_OpenPipe>

  return USBH_OK;
 800d208:	2300      	movs	r3, #0
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3708      	adds	r7, #8
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}

0800d212 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d212:	b580      	push	{r7, lr}
 800d214:	b082      	sub	sp, #8
 800d216:	af00      	add	r7, sp, #0
 800d218:	6078      	str	r0, [r7, #4]
 800d21a:	460b      	mov	r3, r1
 800d21c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d21e:	78fb      	ldrb	r3, [r7, #3]
 800d220:	4619      	mov	r1, r3
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f003 fd60 	bl	8010ce8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d228:	2300      	movs	r3, #0
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3708      	adds	r7, #8
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b084      	sub	sp, #16
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
 800d23a:	460b      	mov	r3, r1
 800d23c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 f836 	bl	800d2b0 <USBH_GetFreePipe>
 800d244:	4603      	mov	r3, r0
 800d246:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d248:	89fb      	ldrh	r3, [r7, #14]
 800d24a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d24e:	4293      	cmp	r3, r2
 800d250:	d00a      	beq.n	800d268 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d252:	78fa      	ldrb	r2, [r7, #3]
 800d254:	89fb      	ldrh	r3, [r7, #14]
 800d256:	f003 030f 	and.w	r3, r3, #15
 800d25a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d25e:	6879      	ldr	r1, [r7, #4]
 800d260:	33e0      	adds	r3, #224	@ 0xe0
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	440b      	add	r3, r1
 800d266:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d268:	89fb      	ldrh	r3, [r7, #14]
 800d26a:	b2db      	uxtb	r3, r3
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3710      	adds	r7, #16
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d274:	b480      	push	{r7}
 800d276:	b083      	sub	sp, #12
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	460b      	mov	r3, r1
 800d27e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d280:	78fb      	ldrb	r3, [r7, #3]
 800d282:	2b0f      	cmp	r3, #15
 800d284:	d80d      	bhi.n	800d2a2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d286:	78fb      	ldrb	r3, [r7, #3]
 800d288:	687a      	ldr	r2, [r7, #4]
 800d28a:	33e0      	adds	r3, #224	@ 0xe0
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	4413      	add	r3, r2
 800d290:	685a      	ldr	r2, [r3, #4]
 800d292:	78fb      	ldrb	r3, [r7, #3]
 800d294:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d298:	6879      	ldr	r1, [r7, #4]
 800d29a:	33e0      	adds	r3, #224	@ 0xe0
 800d29c:	009b      	lsls	r3, r3, #2
 800d29e:	440b      	add	r3, r1
 800d2a0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d2a2:	2300      	movs	r3, #0
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	370c      	adds	r7, #12
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr

0800d2b0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b085      	sub	sp, #20
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d2bc:	2300      	movs	r3, #0
 800d2be:	73fb      	strb	r3, [r7, #15]
 800d2c0:	e00f      	b.n	800d2e2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d2c2:	7bfb      	ldrb	r3, [r7, #15]
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	33e0      	adds	r3, #224	@ 0xe0
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	4413      	add	r3, r2
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d102      	bne.n	800d2dc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d2d6:	7bfb      	ldrb	r3, [r7, #15]
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	e007      	b.n	800d2ec <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d2dc:	7bfb      	ldrb	r3, [r7, #15]
 800d2de:	3301      	adds	r3, #1
 800d2e0:	73fb      	strb	r3, [r7, #15]
 800d2e2:	7bfb      	ldrb	r3, [r7, #15]
 800d2e4:	2b0f      	cmp	r3, #15
 800d2e6:	d9ec      	bls.n	800d2c2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d2e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3714      	adds	r7, #20
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr

0800d2f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	4603      	mov	r3, r0
 800d300:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d302:	79fb      	ldrb	r3, [r7, #7]
 800d304:	4a08      	ldr	r2, [pc, #32]	@ (800d328 <disk_status+0x30>)
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	4413      	add	r3, r2
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	79fa      	ldrb	r2, [r7, #7]
 800d310:	4905      	ldr	r1, [pc, #20]	@ (800d328 <disk_status+0x30>)
 800d312:	440a      	add	r2, r1
 800d314:	7a12      	ldrb	r2, [r2, #8]
 800d316:	4610      	mov	r0, r2
 800d318:	4798      	blx	r3
 800d31a:	4603      	mov	r3, r0
 800d31c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d31e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d320:	4618      	mov	r0, r3
 800d322:	3710      	adds	r7, #16
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}
 800d328:	200022e0 	.word	0x200022e0

0800d32c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
 800d332:	4603      	mov	r3, r0
 800d334:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d336:	2300      	movs	r3, #0
 800d338:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d33a:	79fb      	ldrb	r3, [r7, #7]
 800d33c:	4a0d      	ldr	r2, [pc, #52]	@ (800d374 <disk_initialize+0x48>)
 800d33e:	5cd3      	ldrb	r3, [r2, r3]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d111      	bne.n	800d368 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d344:	79fb      	ldrb	r3, [r7, #7]
 800d346:	4a0b      	ldr	r2, [pc, #44]	@ (800d374 <disk_initialize+0x48>)
 800d348:	2101      	movs	r1, #1
 800d34a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d34c:	79fb      	ldrb	r3, [r7, #7]
 800d34e:	4a09      	ldr	r2, [pc, #36]	@ (800d374 <disk_initialize+0x48>)
 800d350:	009b      	lsls	r3, r3, #2
 800d352:	4413      	add	r3, r2
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	79fa      	ldrb	r2, [r7, #7]
 800d35a:	4906      	ldr	r1, [pc, #24]	@ (800d374 <disk_initialize+0x48>)
 800d35c:	440a      	add	r2, r1
 800d35e:	7a12      	ldrb	r2, [r2, #8]
 800d360:	4610      	mov	r0, r2
 800d362:	4798      	blx	r3
 800d364:	4603      	mov	r3, r0
 800d366:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d368:	7bfb      	ldrb	r3, [r7, #15]
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3710      	adds	r7, #16
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop
 800d374:	200022e0 	.word	0x200022e0

0800d378 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d378:	b590      	push	{r4, r7, lr}
 800d37a:	b087      	sub	sp, #28
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60b9      	str	r1, [r7, #8]
 800d380:	607a      	str	r2, [r7, #4]
 800d382:	603b      	str	r3, [r7, #0]
 800d384:	4603      	mov	r3, r0
 800d386:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d388:	7bfb      	ldrb	r3, [r7, #15]
 800d38a:	4a0a      	ldr	r2, [pc, #40]	@ (800d3b4 <disk_read+0x3c>)
 800d38c:	009b      	lsls	r3, r3, #2
 800d38e:	4413      	add	r3, r2
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	689c      	ldr	r4, [r3, #8]
 800d394:	7bfb      	ldrb	r3, [r7, #15]
 800d396:	4a07      	ldr	r2, [pc, #28]	@ (800d3b4 <disk_read+0x3c>)
 800d398:	4413      	add	r3, r2
 800d39a:	7a18      	ldrb	r0, [r3, #8]
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	68b9      	ldr	r1, [r7, #8]
 800d3a2:	47a0      	blx	r4
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	75fb      	strb	r3, [r7, #23]
  return res;
 800d3a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	371c      	adds	r7, #28
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd90      	pop	{r4, r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	200022e0 	.word	0x200022e0

0800d3b8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d3b8:	b590      	push	{r4, r7, lr}
 800d3ba:	b087      	sub	sp, #28
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60b9      	str	r1, [r7, #8]
 800d3c0:	607a      	str	r2, [r7, #4]
 800d3c2:	603b      	str	r3, [r7, #0]
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d3c8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ca:	4a0a      	ldr	r2, [pc, #40]	@ (800d3f4 <disk_write+0x3c>)
 800d3cc:	009b      	lsls	r3, r3, #2
 800d3ce:	4413      	add	r3, r2
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	68dc      	ldr	r4, [r3, #12]
 800d3d4:	7bfb      	ldrb	r3, [r7, #15]
 800d3d6:	4a07      	ldr	r2, [pc, #28]	@ (800d3f4 <disk_write+0x3c>)
 800d3d8:	4413      	add	r3, r2
 800d3da:	7a18      	ldrb	r0, [r3, #8]
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	68b9      	ldr	r1, [r7, #8]
 800d3e2:	47a0      	blx	r4
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	75fb      	strb	r3, [r7, #23]
  return res;
 800d3e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	371c      	adds	r7, #28
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd90      	pop	{r4, r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	200022e0 	.word	0x200022e0

0800d3f8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b084      	sub	sp, #16
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	4603      	mov	r3, r0
 800d400:	603a      	str	r2, [r7, #0]
 800d402:	71fb      	strb	r3, [r7, #7]
 800d404:	460b      	mov	r3, r1
 800d406:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d408:	79fb      	ldrb	r3, [r7, #7]
 800d40a:	4a09      	ldr	r2, [pc, #36]	@ (800d430 <disk_ioctl+0x38>)
 800d40c:	009b      	lsls	r3, r3, #2
 800d40e:	4413      	add	r3, r2
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	691b      	ldr	r3, [r3, #16]
 800d414:	79fa      	ldrb	r2, [r7, #7]
 800d416:	4906      	ldr	r1, [pc, #24]	@ (800d430 <disk_ioctl+0x38>)
 800d418:	440a      	add	r2, r1
 800d41a:	7a10      	ldrb	r0, [r2, #8]
 800d41c:	79b9      	ldrb	r1, [r7, #6]
 800d41e:	683a      	ldr	r2, [r7, #0]
 800d420:	4798      	blx	r3
 800d422:	4603      	mov	r3, r0
 800d424:	73fb      	strb	r3, [r7, #15]
  return res;
 800d426:	7bfb      	ldrb	r3, [r7, #15]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3710      	adds	r7, #16
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	200022e0 	.word	0x200022e0

0800d434 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d434:	b480      	push	{r7}
 800d436:	b085      	sub	sp, #20
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	3301      	adds	r3, #1
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d444:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d448:	021b      	lsls	r3, r3, #8
 800d44a:	b21a      	sxth	r2, r3
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	b21b      	sxth	r3, r3
 800d452:	4313      	orrs	r3, r2
 800d454:	b21b      	sxth	r3, r3
 800d456:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d458:	89fb      	ldrh	r3, [r7, #14]
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3714      	adds	r7, #20
 800d45e:	46bd      	mov	sp, r7
 800d460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d464:	4770      	bx	lr

0800d466 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d466:	b480      	push	{r7}
 800d468:	b085      	sub	sp, #20
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	3303      	adds	r3, #3
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	021b      	lsls	r3, r3, #8
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	3202      	adds	r2, #2
 800d47e:	7812      	ldrb	r2, [r2, #0]
 800d480:	4313      	orrs	r3, r2
 800d482:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	021b      	lsls	r3, r3, #8
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	3201      	adds	r2, #1
 800d48c:	7812      	ldrb	r2, [r2, #0]
 800d48e:	4313      	orrs	r3, r2
 800d490:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	021b      	lsls	r3, r3, #8
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	7812      	ldrb	r2, [r2, #0]
 800d49a:	4313      	orrs	r3, r2
 800d49c:	60fb      	str	r3, [r7, #12]
	return rv;
 800d49e:	68fb      	ldr	r3, [r7, #12]
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3714      	adds	r7, #20
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr

0800d4ac <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	460b      	mov	r3, r1
 800d4b6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	1c5a      	adds	r2, r3, #1
 800d4bc:	607a      	str	r2, [r7, #4]
 800d4be:	887a      	ldrh	r2, [r7, #2]
 800d4c0:	b2d2      	uxtb	r2, r2
 800d4c2:	701a      	strb	r2, [r3, #0]
 800d4c4:	887b      	ldrh	r3, [r7, #2]
 800d4c6:	0a1b      	lsrs	r3, r3, #8
 800d4c8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	1c5a      	adds	r2, r3, #1
 800d4ce:	607a      	str	r2, [r7, #4]
 800d4d0:	887a      	ldrh	r2, [r7, #2]
 800d4d2:	b2d2      	uxtb	r2, r2
 800d4d4:	701a      	strb	r2, [r3, #0]
}
 800d4d6:	bf00      	nop
 800d4d8:	370c      	adds	r7, #12
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr

0800d4e2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d4e2:	b480      	push	{r7}
 800d4e4:	b083      	sub	sp, #12
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
 800d4ea:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	1c5a      	adds	r2, r3, #1
 800d4f0:	607a      	str	r2, [r7, #4]
 800d4f2:	683a      	ldr	r2, [r7, #0]
 800d4f4:	b2d2      	uxtb	r2, r2
 800d4f6:	701a      	strb	r2, [r3, #0]
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	0a1b      	lsrs	r3, r3, #8
 800d4fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	1c5a      	adds	r2, r3, #1
 800d502:	607a      	str	r2, [r7, #4]
 800d504:	683a      	ldr	r2, [r7, #0]
 800d506:	b2d2      	uxtb	r2, r2
 800d508:	701a      	strb	r2, [r3, #0]
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	0a1b      	lsrs	r3, r3, #8
 800d50e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	1c5a      	adds	r2, r3, #1
 800d514:	607a      	str	r2, [r7, #4]
 800d516:	683a      	ldr	r2, [r7, #0]
 800d518:	b2d2      	uxtb	r2, r2
 800d51a:	701a      	strb	r2, [r3, #0]
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	0a1b      	lsrs	r3, r3, #8
 800d520:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	1c5a      	adds	r2, r3, #1
 800d526:	607a      	str	r2, [r7, #4]
 800d528:	683a      	ldr	r2, [r7, #0]
 800d52a:	b2d2      	uxtb	r2, r2
 800d52c:	701a      	strb	r2, [r3, #0]
}
 800d52e:	bf00      	nop
 800d530:	370c      	adds	r7, #12
 800d532:	46bd      	mov	sp, r7
 800d534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d538:	4770      	bx	lr

0800d53a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d53a:	b480      	push	{r7}
 800d53c:	b087      	sub	sp, #28
 800d53e:	af00      	add	r7, sp, #0
 800d540:	60f8      	str	r0, [r7, #12]
 800d542:	60b9      	str	r1, [r7, #8]
 800d544:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d00d      	beq.n	800d570 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d554:	693a      	ldr	r2, [r7, #16]
 800d556:	1c53      	adds	r3, r2, #1
 800d558:	613b      	str	r3, [r7, #16]
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	1c59      	adds	r1, r3, #1
 800d55e:	6179      	str	r1, [r7, #20]
 800d560:	7812      	ldrb	r2, [r2, #0]
 800d562:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	3b01      	subs	r3, #1
 800d568:	607b      	str	r3, [r7, #4]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d1f1      	bne.n	800d554 <mem_cpy+0x1a>
	}
}
 800d570:	bf00      	nop
 800d572:	371c      	adds	r7, #28
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d57c:	b480      	push	{r7}
 800d57e:	b087      	sub	sp, #28
 800d580:	af00      	add	r7, sp, #0
 800d582:	60f8      	str	r0, [r7, #12]
 800d584:	60b9      	str	r1, [r7, #8]
 800d586:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	1c5a      	adds	r2, r3, #1
 800d590:	617a      	str	r2, [r7, #20]
 800d592:	68ba      	ldr	r2, [r7, #8]
 800d594:	b2d2      	uxtb	r2, r2
 800d596:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	3b01      	subs	r3, #1
 800d59c:	607b      	str	r3, [r7, #4]
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d1f3      	bne.n	800d58c <mem_set+0x10>
}
 800d5a4:	bf00      	nop
 800d5a6:	bf00      	nop
 800d5a8:	371c      	adds	r7, #28
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr

0800d5b2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d5b2:	b480      	push	{r7}
 800d5b4:	b089      	sub	sp, #36	@ 0x24
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	60f8      	str	r0, [r7, #12]
 800d5ba:	60b9      	str	r1, [r7, #8]
 800d5bc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	61fb      	str	r3, [r7, #28]
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d5ca:	69fb      	ldr	r3, [r7, #28]
 800d5cc:	1c5a      	adds	r2, r3, #1
 800d5ce:	61fa      	str	r2, [r7, #28]
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	4619      	mov	r1, r3
 800d5d4:	69bb      	ldr	r3, [r7, #24]
 800d5d6:	1c5a      	adds	r2, r3, #1
 800d5d8:	61ba      	str	r2, [r7, #24]
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	1acb      	subs	r3, r1, r3
 800d5de:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	3b01      	subs	r3, #1
 800d5e4:	607b      	str	r3, [r7, #4]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d002      	beq.n	800d5f2 <mem_cmp+0x40>
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d0eb      	beq.n	800d5ca <mem_cmp+0x18>

	return r;
 800d5f2:	697b      	ldr	r3, [r7, #20]
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3724      	adds	r7, #36	@ 0x24
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr

0800d600 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d600:	b480      	push	{r7}
 800d602:	b083      	sub	sp, #12
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d60a:	e002      	b.n	800d612 <chk_chr+0x12>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	3301      	adds	r3, #1
 800d610:	607b      	str	r3, [r7, #4]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d005      	beq.n	800d626 <chk_chr+0x26>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	461a      	mov	r2, r3
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	4293      	cmp	r3, r2
 800d624:	d1f2      	bne.n	800d60c <chk_chr+0xc>
	return *str;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	781b      	ldrb	r3, [r3, #0]
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	370c      	adds	r7, #12
 800d62e:	46bd      	mov	sp, r7
 800d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d634:	4770      	bx	lr
	...

0800d638 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d638:	b480      	push	{r7}
 800d63a:	b085      	sub	sp, #20
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d642:	2300      	movs	r3, #0
 800d644:	60bb      	str	r3, [r7, #8]
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	60fb      	str	r3, [r7, #12]
 800d64a:	e029      	b.n	800d6a0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d64c:	4a27      	ldr	r2, [pc, #156]	@ (800d6ec <chk_lock+0xb4>)
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	011b      	lsls	r3, r3, #4
 800d652:	4413      	add	r3, r2
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d01d      	beq.n	800d696 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d65a:	4a24      	ldr	r2, [pc, #144]	@ (800d6ec <chk_lock+0xb4>)
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	011b      	lsls	r3, r3, #4
 800d660:	4413      	add	r3, r2
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	429a      	cmp	r2, r3
 800d66a:	d116      	bne.n	800d69a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d66c:	4a1f      	ldr	r2, [pc, #124]	@ (800d6ec <chk_lock+0xb4>)
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	011b      	lsls	r3, r3, #4
 800d672:	4413      	add	r3, r2
 800d674:	3304      	adds	r3, #4
 800d676:	681a      	ldr	r2, [r3, #0]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d10c      	bne.n	800d69a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d680:	4a1a      	ldr	r2, [pc, #104]	@ (800d6ec <chk_lock+0xb4>)
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	011b      	lsls	r3, r3, #4
 800d686:	4413      	add	r3, r2
 800d688:	3308      	adds	r3, #8
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d690:	429a      	cmp	r2, r3
 800d692:	d102      	bne.n	800d69a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d694:	e007      	b.n	800d6a6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d696:	2301      	movs	r3, #1
 800d698:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	3301      	adds	r3, #1
 800d69e:	60fb      	str	r3, [r7, #12]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d9d2      	bls.n	800d64c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2b02      	cmp	r3, #2
 800d6aa:	d109      	bne.n	800d6c0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d102      	bne.n	800d6b8 <chk_lock+0x80>
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	2b02      	cmp	r3, #2
 800d6b6:	d101      	bne.n	800d6bc <chk_lock+0x84>
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	e010      	b.n	800d6de <chk_lock+0xa6>
 800d6bc:	2312      	movs	r3, #18
 800d6be:	e00e      	b.n	800d6de <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d108      	bne.n	800d6d8 <chk_lock+0xa0>
 800d6c6:	4a09      	ldr	r2, [pc, #36]	@ (800d6ec <chk_lock+0xb4>)
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	011b      	lsls	r3, r3, #4
 800d6cc:	4413      	add	r3, r2
 800d6ce:	330c      	adds	r3, #12
 800d6d0:	881b      	ldrh	r3, [r3, #0]
 800d6d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6d6:	d101      	bne.n	800d6dc <chk_lock+0xa4>
 800d6d8:	2310      	movs	r3, #16
 800d6da:	e000      	b.n	800d6de <chk_lock+0xa6>
 800d6dc:	2300      	movs	r3, #0
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3714      	adds	r7, #20
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr
 800d6ea:	bf00      	nop
 800d6ec:	200020c0 	.word	0x200020c0

0800d6f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	607b      	str	r3, [r7, #4]
 800d6fa:	e002      	b.n	800d702 <enq_lock+0x12>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	3301      	adds	r3, #1
 800d700:	607b      	str	r3, [r7, #4]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2b01      	cmp	r3, #1
 800d706:	d806      	bhi.n	800d716 <enq_lock+0x26>
 800d708:	4a09      	ldr	r2, [pc, #36]	@ (800d730 <enq_lock+0x40>)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	011b      	lsls	r3, r3, #4
 800d70e:	4413      	add	r3, r2
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d1f2      	bne.n	800d6fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2b02      	cmp	r3, #2
 800d71a:	bf14      	ite	ne
 800d71c:	2301      	movne	r3, #1
 800d71e:	2300      	moveq	r3, #0
 800d720:	b2db      	uxtb	r3, r3
}
 800d722:	4618      	mov	r0, r3
 800d724:	370c      	adds	r7, #12
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	200020c0 	.word	0x200020c0

0800d734 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d734:	b480      	push	{r7}
 800d736:	b085      	sub	sp, #20
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d73e:	2300      	movs	r3, #0
 800d740:	60fb      	str	r3, [r7, #12]
 800d742:	e01f      	b.n	800d784 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d744:	4a41      	ldr	r2, [pc, #260]	@ (800d84c <inc_lock+0x118>)
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	011b      	lsls	r3, r3, #4
 800d74a:	4413      	add	r3, r2
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	429a      	cmp	r2, r3
 800d754:	d113      	bne.n	800d77e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d756:	4a3d      	ldr	r2, [pc, #244]	@ (800d84c <inc_lock+0x118>)
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	011b      	lsls	r3, r3, #4
 800d75c:	4413      	add	r3, r2
 800d75e:	3304      	adds	r3, #4
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d766:	429a      	cmp	r2, r3
 800d768:	d109      	bne.n	800d77e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d76a:	4a38      	ldr	r2, [pc, #224]	@ (800d84c <inc_lock+0x118>)
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	011b      	lsls	r3, r3, #4
 800d770:	4413      	add	r3, r2
 800d772:	3308      	adds	r3, #8
 800d774:	681a      	ldr	r2, [r3, #0]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d006      	beq.n	800d78c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	3301      	adds	r3, #1
 800d782:	60fb      	str	r3, [r7, #12]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2b01      	cmp	r3, #1
 800d788:	d9dc      	bls.n	800d744 <inc_lock+0x10>
 800d78a:	e000      	b.n	800d78e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d78c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2b02      	cmp	r3, #2
 800d792:	d132      	bne.n	800d7fa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d794:	2300      	movs	r3, #0
 800d796:	60fb      	str	r3, [r7, #12]
 800d798:	e002      	b.n	800d7a0 <inc_lock+0x6c>
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	3301      	adds	r3, #1
 800d79e:	60fb      	str	r3, [r7, #12]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d806      	bhi.n	800d7b4 <inc_lock+0x80>
 800d7a6:	4a29      	ldr	r2, [pc, #164]	@ (800d84c <inc_lock+0x118>)
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	011b      	lsls	r3, r3, #4
 800d7ac:	4413      	add	r3, r2
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d1f2      	bne.n	800d79a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2b02      	cmp	r3, #2
 800d7b8:	d101      	bne.n	800d7be <inc_lock+0x8a>
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	e040      	b.n	800d840 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681a      	ldr	r2, [r3, #0]
 800d7c2:	4922      	ldr	r1, [pc, #136]	@ (800d84c <inc_lock+0x118>)
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	011b      	lsls	r3, r3, #4
 800d7c8:	440b      	add	r3, r1
 800d7ca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	689a      	ldr	r2, [r3, #8]
 800d7d0:	491e      	ldr	r1, [pc, #120]	@ (800d84c <inc_lock+0x118>)
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	011b      	lsls	r3, r3, #4
 800d7d6:	440b      	add	r3, r1
 800d7d8:	3304      	adds	r3, #4
 800d7da:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	695a      	ldr	r2, [r3, #20]
 800d7e0:	491a      	ldr	r1, [pc, #104]	@ (800d84c <inc_lock+0x118>)
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	011b      	lsls	r3, r3, #4
 800d7e6:	440b      	add	r3, r1
 800d7e8:	3308      	adds	r3, #8
 800d7ea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d7ec:	4a17      	ldr	r2, [pc, #92]	@ (800d84c <inc_lock+0x118>)
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	011b      	lsls	r3, r3, #4
 800d7f2:	4413      	add	r3, r2
 800d7f4:	330c      	adds	r3, #12
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d009      	beq.n	800d814 <inc_lock+0xe0>
 800d800:	4a12      	ldr	r2, [pc, #72]	@ (800d84c <inc_lock+0x118>)
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	011b      	lsls	r3, r3, #4
 800d806:	4413      	add	r3, r2
 800d808:	330c      	adds	r3, #12
 800d80a:	881b      	ldrh	r3, [r3, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d001      	beq.n	800d814 <inc_lock+0xe0>
 800d810:	2300      	movs	r3, #0
 800d812:	e015      	b.n	800d840 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d108      	bne.n	800d82c <inc_lock+0xf8>
 800d81a:	4a0c      	ldr	r2, [pc, #48]	@ (800d84c <inc_lock+0x118>)
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	011b      	lsls	r3, r3, #4
 800d820:	4413      	add	r3, r2
 800d822:	330c      	adds	r3, #12
 800d824:	881b      	ldrh	r3, [r3, #0]
 800d826:	3301      	adds	r3, #1
 800d828:	b29a      	uxth	r2, r3
 800d82a:	e001      	b.n	800d830 <inc_lock+0xfc>
 800d82c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d830:	4906      	ldr	r1, [pc, #24]	@ (800d84c <inc_lock+0x118>)
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	011b      	lsls	r3, r3, #4
 800d836:	440b      	add	r3, r1
 800d838:	330c      	adds	r3, #12
 800d83a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	3301      	adds	r3, #1
}
 800d840:	4618      	mov	r0, r3
 800d842:	3714      	adds	r7, #20
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr
 800d84c:	200020c0 	.word	0x200020c0

0800d850 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d850:	b480      	push	{r7}
 800d852:	b085      	sub	sp, #20
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	3b01      	subs	r3, #1
 800d85c:	607b      	str	r3, [r7, #4]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2b01      	cmp	r3, #1
 800d862:	d825      	bhi.n	800d8b0 <dec_lock+0x60>
		n = Files[i].ctr;
 800d864:	4a17      	ldr	r2, [pc, #92]	@ (800d8c4 <dec_lock+0x74>)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	011b      	lsls	r3, r3, #4
 800d86a:	4413      	add	r3, r2
 800d86c:	330c      	adds	r3, #12
 800d86e:	881b      	ldrh	r3, [r3, #0]
 800d870:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d872:	89fb      	ldrh	r3, [r7, #14]
 800d874:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d878:	d101      	bne.n	800d87e <dec_lock+0x2e>
 800d87a:	2300      	movs	r3, #0
 800d87c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d87e:	89fb      	ldrh	r3, [r7, #14]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d002      	beq.n	800d88a <dec_lock+0x3a>
 800d884:	89fb      	ldrh	r3, [r7, #14]
 800d886:	3b01      	subs	r3, #1
 800d888:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d88a:	4a0e      	ldr	r2, [pc, #56]	@ (800d8c4 <dec_lock+0x74>)
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	011b      	lsls	r3, r3, #4
 800d890:	4413      	add	r3, r2
 800d892:	330c      	adds	r3, #12
 800d894:	89fa      	ldrh	r2, [r7, #14]
 800d896:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d898:	89fb      	ldrh	r3, [r7, #14]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d105      	bne.n	800d8aa <dec_lock+0x5a>
 800d89e:	4a09      	ldr	r2, [pc, #36]	@ (800d8c4 <dec_lock+0x74>)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	011b      	lsls	r3, r3, #4
 800d8a4:	4413      	add	r3, r2
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	737b      	strb	r3, [r7, #13]
 800d8ae:	e001      	b.n	800d8b4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d8b0:	2302      	movs	r3, #2
 800d8b2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d8b4:	7b7b      	ldrb	r3, [r7, #13]
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3714      	adds	r7, #20
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr
 800d8c2:	bf00      	nop
 800d8c4:	200020c0 	.word	0x200020c0

0800d8c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b085      	sub	sp, #20
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	60fb      	str	r3, [r7, #12]
 800d8d4:	e010      	b.n	800d8f8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d8d6:	4a0d      	ldr	r2, [pc, #52]	@ (800d90c <clear_lock+0x44>)
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	011b      	lsls	r3, r3, #4
 800d8dc:	4413      	add	r3, r2
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	687a      	ldr	r2, [r7, #4]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d105      	bne.n	800d8f2 <clear_lock+0x2a>
 800d8e6:	4a09      	ldr	r2, [pc, #36]	@ (800d90c <clear_lock+0x44>)
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	011b      	lsls	r3, r3, #4
 800d8ec:	4413      	add	r3, r2
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	60fb      	str	r3, [r7, #12]
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	2b01      	cmp	r3, #1
 800d8fc:	d9eb      	bls.n	800d8d6 <clear_lock+0xe>
	}
}
 800d8fe:	bf00      	nop
 800d900:	bf00      	nop
 800d902:	3714      	adds	r7, #20
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr
 800d90c:	200020c0 	.word	0x200020c0

0800d910 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b086      	sub	sp, #24
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d918:	2300      	movs	r3, #0
 800d91a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	78db      	ldrb	r3, [r3, #3]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d034      	beq.n	800d98e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d928:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	7858      	ldrb	r0, [r3, #1]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d934:	2301      	movs	r3, #1
 800d936:	697a      	ldr	r2, [r7, #20]
 800d938:	f7ff fd3e 	bl	800d3b8 <disk_write>
 800d93c:	4603      	mov	r3, r0
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d002      	beq.n	800d948 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d942:	2301      	movs	r3, #1
 800d944:	73fb      	strb	r3, [r7, #15]
 800d946:	e022      	b.n	800d98e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2200      	movs	r2, #0
 800d94c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d952:	697a      	ldr	r2, [r7, #20]
 800d954:	1ad2      	subs	r2, r2, r3
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	69db      	ldr	r3, [r3, #28]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d217      	bcs.n	800d98e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	789b      	ldrb	r3, [r3, #2]
 800d962:	613b      	str	r3, [r7, #16]
 800d964:	e010      	b.n	800d988 <sync_window+0x78>
					wsect += fs->fsize;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	69db      	ldr	r3, [r3, #28]
 800d96a:	697a      	ldr	r2, [r7, #20]
 800d96c:	4413      	add	r3, r2
 800d96e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	7858      	ldrb	r0, [r3, #1]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d97a:	2301      	movs	r3, #1
 800d97c:	697a      	ldr	r2, [r7, #20]
 800d97e:	f7ff fd1b 	bl	800d3b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	3b01      	subs	r3, #1
 800d986:	613b      	str	r3, [r7, #16]
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d8eb      	bhi.n	800d966 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d98e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d990:	4618      	mov	r0, r3
 800d992:	3718      	adds	r7, #24
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b084      	sub	sp, #16
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9aa:	683a      	ldr	r2, [r7, #0]
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d01b      	beq.n	800d9e8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f7ff ffad 	bl	800d910 <sync_window>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d9ba:	7bfb      	ldrb	r3, [r7, #15]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d113      	bne.n	800d9e8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	7858      	ldrb	r0, [r3, #1]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	683a      	ldr	r2, [r7, #0]
 800d9ce:	f7ff fcd3 	bl	800d378 <disk_read>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d004      	beq.n	800d9e2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d9d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	683a      	ldr	r2, [r7, #0]
 800d9e6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800d9e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3710      	adds	r7, #16
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
	...

0800d9f4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f7ff ff87 	bl	800d910 <sync_window>
 800da02:	4603      	mov	r3, r0
 800da04:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800da06:	7bfb      	ldrb	r3, [r7, #15]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d158      	bne.n	800dabe <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	2b03      	cmp	r3, #3
 800da12:	d148      	bne.n	800daa6 <sync_fs+0xb2>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	791b      	ldrb	r3, [r3, #4]
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d144      	bne.n	800daa6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	3334      	adds	r3, #52	@ 0x34
 800da20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800da24:	2100      	movs	r1, #0
 800da26:	4618      	mov	r0, r3
 800da28:	f7ff fda8 	bl	800d57c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	3334      	adds	r3, #52	@ 0x34
 800da30:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800da34:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800da38:	4618      	mov	r0, r3
 800da3a:	f7ff fd37 	bl	800d4ac <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	3334      	adds	r3, #52	@ 0x34
 800da42:	4921      	ldr	r1, [pc, #132]	@ (800dac8 <sync_fs+0xd4>)
 800da44:	4618      	mov	r0, r3
 800da46:	f7ff fd4c 	bl	800d4e2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	3334      	adds	r3, #52	@ 0x34
 800da4e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800da52:	491e      	ldr	r1, [pc, #120]	@ (800dacc <sync_fs+0xd8>)
 800da54:	4618      	mov	r0, r3
 800da56:	f7ff fd44 	bl	800d4e2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	3334      	adds	r3, #52	@ 0x34
 800da5e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	695b      	ldr	r3, [r3, #20]
 800da66:	4619      	mov	r1, r3
 800da68:	4610      	mov	r0, r2
 800da6a:	f7ff fd3a 	bl	800d4e2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	3334      	adds	r3, #52	@ 0x34
 800da72:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	691b      	ldr	r3, [r3, #16]
 800da7a:	4619      	mov	r1, r3
 800da7c:	4610      	mov	r0, r2
 800da7e:	f7ff fd30 	bl	800d4e2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6a1b      	ldr	r3, [r3, #32]
 800da86:	1c5a      	adds	r2, r3, #1
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	7858      	ldrb	r0, [r3, #1]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800da9a:	2301      	movs	r3, #1
 800da9c:	f7ff fc8c 	bl	800d3b8 <disk_write>
			fs->fsi_flag = 0;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2200      	movs	r2, #0
 800daa4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	785b      	ldrb	r3, [r3, #1]
 800daaa:	2200      	movs	r2, #0
 800daac:	2100      	movs	r1, #0
 800daae:	4618      	mov	r0, r3
 800dab0:	f7ff fca2 	bl	800d3f8 <disk_ioctl>
 800dab4:	4603      	mov	r3, r0
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d001      	beq.n	800dabe <sync_fs+0xca>
 800daba:	2301      	movs	r3, #1
 800dabc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800dabe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3710      	adds	r7, #16
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}
 800dac8:	41615252 	.word	0x41615252
 800dacc:	61417272 	.word	0x61417272

0800dad0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800dad0:	b480      	push	{r7}
 800dad2:	b083      	sub	sp, #12
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	3b02      	subs	r3, #2
 800dade:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	699b      	ldr	r3, [r3, #24]
 800dae4:	3b02      	subs	r3, #2
 800dae6:	683a      	ldr	r2, [r7, #0]
 800dae8:	429a      	cmp	r2, r3
 800daea:	d301      	bcc.n	800daf0 <clust2sect+0x20>
 800daec:	2300      	movs	r3, #0
 800daee:	e008      	b.n	800db02 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	895b      	ldrh	r3, [r3, #10]
 800daf4:	461a      	mov	r2, r3
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	fb03 f202 	mul.w	r2, r3, r2
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db00:	4413      	add	r3, r2
}
 800db02:	4618      	mov	r0, r3
 800db04:	370c      	adds	r7, #12
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr

0800db0e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800db0e:	b580      	push	{r7, lr}
 800db10:	b086      	sub	sp, #24
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
 800db16:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	2b01      	cmp	r3, #1
 800db22:	d904      	bls.n	800db2e <get_fat+0x20>
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	699b      	ldr	r3, [r3, #24]
 800db28:	683a      	ldr	r2, [r7, #0]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d302      	bcc.n	800db34 <get_fat+0x26>
		val = 1;	/* Internal error */
 800db2e:	2301      	movs	r3, #1
 800db30:	617b      	str	r3, [r7, #20]
 800db32:	e08e      	b.n	800dc52 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800db34:	f04f 33ff 	mov.w	r3, #4294967295
 800db38:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	2b03      	cmp	r3, #3
 800db40:	d061      	beq.n	800dc06 <get_fat+0xf8>
 800db42:	2b03      	cmp	r3, #3
 800db44:	dc7b      	bgt.n	800dc3e <get_fat+0x130>
 800db46:	2b01      	cmp	r3, #1
 800db48:	d002      	beq.n	800db50 <get_fat+0x42>
 800db4a:	2b02      	cmp	r3, #2
 800db4c:	d041      	beq.n	800dbd2 <get_fat+0xc4>
 800db4e:	e076      	b.n	800dc3e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	60fb      	str	r3, [r7, #12]
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	085b      	lsrs	r3, r3, #1
 800db58:	68fa      	ldr	r2, [r7, #12]
 800db5a:	4413      	add	r3, r2
 800db5c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	0a5b      	lsrs	r3, r3, #9
 800db66:	4413      	add	r3, r2
 800db68:	4619      	mov	r1, r3
 800db6a:	6938      	ldr	r0, [r7, #16]
 800db6c:	f7ff ff14 	bl	800d998 <move_window>
 800db70:	4603      	mov	r3, r0
 800db72:	2b00      	cmp	r3, #0
 800db74:	d166      	bne.n	800dc44 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	1c5a      	adds	r2, r3, #1
 800db7a:	60fa      	str	r2, [r7, #12]
 800db7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db80:	693a      	ldr	r2, [r7, #16]
 800db82:	4413      	add	r3, r2
 800db84:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800db88:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	0a5b      	lsrs	r3, r3, #9
 800db92:	4413      	add	r3, r2
 800db94:	4619      	mov	r1, r3
 800db96:	6938      	ldr	r0, [r7, #16]
 800db98:	f7ff fefe 	bl	800d998 <move_window>
 800db9c:	4603      	mov	r3, r0
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d152      	bne.n	800dc48 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dba8:	693a      	ldr	r2, [r7, #16]
 800dbaa:	4413      	add	r3, r2
 800dbac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dbb0:	021b      	lsls	r3, r3, #8
 800dbb2:	68ba      	ldr	r2, [r7, #8]
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	f003 0301 	and.w	r3, r3, #1
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d002      	beq.n	800dbc8 <get_fat+0xba>
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	091b      	lsrs	r3, r3, #4
 800dbc6:	e002      	b.n	800dbce <get_fat+0xc0>
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dbce:	617b      	str	r3, [r7, #20]
			break;
 800dbd0:	e03f      	b.n	800dc52 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	0a1b      	lsrs	r3, r3, #8
 800dbda:	4413      	add	r3, r2
 800dbdc:	4619      	mov	r1, r3
 800dbde:	6938      	ldr	r0, [r7, #16]
 800dbe0:	f7ff feda 	bl	800d998 <move_window>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d130      	bne.n	800dc4c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	005b      	lsls	r3, r3, #1
 800dbf4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800dbf8:	4413      	add	r3, r2
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7ff fc1a 	bl	800d434 <ld_word>
 800dc00:	4603      	mov	r3, r0
 800dc02:	617b      	str	r3, [r7, #20]
			break;
 800dc04:	e025      	b.n	800dc52 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	09db      	lsrs	r3, r3, #7
 800dc0e:	4413      	add	r3, r2
 800dc10:	4619      	mov	r1, r3
 800dc12:	6938      	ldr	r0, [r7, #16]
 800dc14:	f7ff fec0 	bl	800d998 <move_window>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d118      	bne.n	800dc50 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800dc2c:	4413      	add	r3, r2
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7ff fc19 	bl	800d466 <ld_dword>
 800dc34:	4603      	mov	r3, r0
 800dc36:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800dc3a:	617b      	str	r3, [r7, #20]
			break;
 800dc3c:	e009      	b.n	800dc52 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dc3e:	2301      	movs	r3, #1
 800dc40:	617b      	str	r3, [r7, #20]
 800dc42:	e006      	b.n	800dc52 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc44:	bf00      	nop
 800dc46:	e004      	b.n	800dc52 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc48:	bf00      	nop
 800dc4a:	e002      	b.n	800dc52 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dc4c:	bf00      	nop
 800dc4e:	e000      	b.n	800dc52 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dc50:	bf00      	nop
		}
	}

	return val;
 800dc52:	697b      	ldr	r3, [r7, #20]
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3718      	adds	r7, #24
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dc5c:	b590      	push	{r4, r7, lr}
 800dc5e:	b089      	sub	sp, #36	@ 0x24
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	60f8      	str	r0, [r7, #12]
 800dc64:	60b9      	str	r1, [r7, #8]
 800dc66:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dc68:	2302      	movs	r3, #2
 800dc6a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	f240 80d9 	bls.w	800de26 <put_fat+0x1ca>
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	699b      	ldr	r3, [r3, #24]
 800dc78:	68ba      	ldr	r2, [r7, #8]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	f080 80d3 	bcs.w	800de26 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	2b03      	cmp	r3, #3
 800dc86:	f000 8096 	beq.w	800ddb6 <put_fat+0x15a>
 800dc8a:	2b03      	cmp	r3, #3
 800dc8c:	f300 80cb 	bgt.w	800de26 <put_fat+0x1ca>
 800dc90:	2b01      	cmp	r3, #1
 800dc92:	d002      	beq.n	800dc9a <put_fat+0x3e>
 800dc94:	2b02      	cmp	r3, #2
 800dc96:	d06e      	beq.n	800dd76 <put_fat+0x11a>
 800dc98:	e0c5      	b.n	800de26 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	61bb      	str	r3, [r7, #24]
 800dc9e:	69bb      	ldr	r3, [r7, #24]
 800dca0:	085b      	lsrs	r3, r3, #1
 800dca2:	69ba      	ldr	r2, [r7, #24]
 800dca4:	4413      	add	r3, r2
 800dca6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dcac:	69bb      	ldr	r3, [r7, #24]
 800dcae:	0a5b      	lsrs	r3, r3, #9
 800dcb0:	4413      	add	r3, r2
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	68f8      	ldr	r0, [r7, #12]
 800dcb6:	f7ff fe6f 	bl	800d998 <move_window>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dcbe:	7ffb      	ldrb	r3, [r7, #31]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	f040 80a9 	bne.w	800de18 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dccc:	69bb      	ldr	r3, [r7, #24]
 800dcce:	1c59      	adds	r1, r3, #1
 800dcd0:	61b9      	str	r1, [r7, #24]
 800dcd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcd6:	4413      	add	r3, r2
 800dcd8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	f003 0301 	and.w	r3, r3, #1
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d00d      	beq.n	800dd00 <put_fat+0xa4>
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	781b      	ldrb	r3, [r3, #0]
 800dce8:	b25b      	sxtb	r3, r3
 800dcea:	f003 030f 	and.w	r3, r3, #15
 800dcee:	b25a      	sxtb	r2, r3
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	b25b      	sxtb	r3, r3
 800dcf4:	011b      	lsls	r3, r3, #4
 800dcf6:	b25b      	sxtb	r3, r3
 800dcf8:	4313      	orrs	r3, r2
 800dcfa:	b25b      	sxtb	r3, r3
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	e001      	b.n	800dd04 <put_fat+0xa8>
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	b2db      	uxtb	r3, r3
 800dd04:	697a      	ldr	r2, [r7, #20]
 800dd06:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dd12:	69bb      	ldr	r3, [r7, #24]
 800dd14:	0a5b      	lsrs	r3, r3, #9
 800dd16:	4413      	add	r3, r2
 800dd18:	4619      	mov	r1, r3
 800dd1a:	68f8      	ldr	r0, [r7, #12]
 800dd1c:	f7ff fe3c 	bl	800d998 <move_window>
 800dd20:	4603      	mov	r3, r0
 800dd22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd24:	7ffb      	ldrb	r3, [r7, #31]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d178      	bne.n	800de1c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dd30:	69bb      	ldr	r3, [r7, #24]
 800dd32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd36:	4413      	add	r3, r2
 800dd38:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	f003 0301 	and.w	r3, r3, #1
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d003      	beq.n	800dd4c <put_fat+0xf0>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	091b      	lsrs	r3, r3, #4
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	e00e      	b.n	800dd6a <put_fat+0x10e>
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	b25b      	sxtb	r3, r3
 800dd52:	f023 030f 	bic.w	r3, r3, #15
 800dd56:	b25a      	sxtb	r2, r3
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	0a1b      	lsrs	r3, r3, #8
 800dd5c:	b25b      	sxtb	r3, r3
 800dd5e:	f003 030f 	and.w	r3, r3, #15
 800dd62:	b25b      	sxtb	r3, r3
 800dd64:	4313      	orrs	r3, r2
 800dd66:	b25b      	sxtb	r3, r3
 800dd68:	b2db      	uxtb	r3, r3
 800dd6a:	697a      	ldr	r2, [r7, #20]
 800dd6c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	2201      	movs	r2, #1
 800dd72:	70da      	strb	r2, [r3, #3]
			break;
 800dd74:	e057      	b.n	800de26 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	0a1b      	lsrs	r3, r3, #8
 800dd7e:	4413      	add	r3, r2
 800dd80:	4619      	mov	r1, r3
 800dd82:	68f8      	ldr	r0, [r7, #12]
 800dd84:	f7ff fe08 	bl	800d998 <move_window>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd8c:	7ffb      	ldrb	r3, [r7, #31]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d146      	bne.n	800de20 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	005b      	lsls	r3, r3, #1
 800dd9c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800dda0:	4413      	add	r3, r2
 800dda2:	687a      	ldr	r2, [r7, #4]
 800dda4:	b292      	uxth	r2, r2
 800dda6:	4611      	mov	r1, r2
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7ff fb7f 	bl	800d4ac <st_word>
			fs->wflag = 1;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2201      	movs	r2, #1
 800ddb2:	70da      	strb	r2, [r3, #3]
			break;
 800ddb4:	e037      	b.n	800de26 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	09db      	lsrs	r3, r3, #7
 800ddbe:	4413      	add	r3, r2
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	68f8      	ldr	r0, [r7, #12]
 800ddc4:	f7ff fde8 	bl	800d998 <move_window>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ddcc:	7ffb      	ldrb	r3, [r7, #31]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d128      	bne.n	800de24 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	009b      	lsls	r3, r3, #2
 800dde2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800dde6:	4413      	add	r3, r2
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7ff fb3c 	bl	800d466 <ld_dword>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ddf4:	4323      	orrs	r3, r4
 800ddf6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	009b      	lsls	r3, r3, #2
 800de02:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800de06:	4413      	add	r3, r2
 800de08:	6879      	ldr	r1, [r7, #4]
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7ff fb69 	bl	800d4e2 <st_dword>
			fs->wflag = 1;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	2201      	movs	r2, #1
 800de14:	70da      	strb	r2, [r3, #3]
			break;
 800de16:	e006      	b.n	800de26 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800de18:	bf00      	nop
 800de1a:	e004      	b.n	800de26 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800de1c:	bf00      	nop
 800de1e:	e002      	b.n	800de26 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800de20:	bf00      	nop
 800de22:	e000      	b.n	800de26 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800de24:	bf00      	nop
		}
	}
	return res;
 800de26:	7ffb      	ldrb	r3, [r7, #31]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3724      	adds	r7, #36	@ 0x24
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd90      	pop	{r4, r7, pc}

0800de30 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b088      	sub	sp, #32
 800de34:	af00      	add	r7, sp, #0
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800de3c:	2300      	movs	r3, #0
 800de3e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d904      	bls.n	800de56 <remove_chain+0x26>
 800de4c:	69bb      	ldr	r3, [r7, #24]
 800de4e:	699b      	ldr	r3, [r3, #24]
 800de50:	68ba      	ldr	r2, [r7, #8]
 800de52:	429a      	cmp	r2, r3
 800de54:	d301      	bcc.n	800de5a <remove_chain+0x2a>
 800de56:	2302      	movs	r3, #2
 800de58:	e04b      	b.n	800def2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d00c      	beq.n	800de7a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800de60:	f04f 32ff 	mov.w	r2, #4294967295
 800de64:	6879      	ldr	r1, [r7, #4]
 800de66:	69b8      	ldr	r0, [r7, #24]
 800de68:	f7ff fef8 	bl	800dc5c <put_fat>
 800de6c:	4603      	mov	r3, r0
 800de6e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800de70:	7ffb      	ldrb	r3, [r7, #31]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d001      	beq.n	800de7a <remove_chain+0x4a>
 800de76:	7ffb      	ldrb	r3, [r7, #31]
 800de78:	e03b      	b.n	800def2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800de7a:	68b9      	ldr	r1, [r7, #8]
 800de7c:	68f8      	ldr	r0, [r7, #12]
 800de7e:	f7ff fe46 	bl	800db0e <get_fat>
 800de82:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d031      	beq.n	800deee <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d101      	bne.n	800de94 <remove_chain+0x64>
 800de90:	2302      	movs	r3, #2
 800de92:	e02e      	b.n	800def2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de9a:	d101      	bne.n	800dea0 <remove_chain+0x70>
 800de9c:	2301      	movs	r3, #1
 800de9e:	e028      	b.n	800def2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800dea0:	2200      	movs	r2, #0
 800dea2:	68b9      	ldr	r1, [r7, #8]
 800dea4:	69b8      	ldr	r0, [r7, #24]
 800dea6:	f7ff fed9 	bl	800dc5c <put_fat>
 800deaa:	4603      	mov	r3, r0
 800deac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800deae:	7ffb      	ldrb	r3, [r7, #31]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d001      	beq.n	800deb8 <remove_chain+0x88>
 800deb4:	7ffb      	ldrb	r3, [r7, #31]
 800deb6:	e01c      	b.n	800def2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800deb8:	69bb      	ldr	r3, [r7, #24]
 800deba:	695a      	ldr	r2, [r3, #20]
 800debc:	69bb      	ldr	r3, [r7, #24]
 800debe:	699b      	ldr	r3, [r3, #24]
 800dec0:	3b02      	subs	r3, #2
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d20b      	bcs.n	800dede <remove_chain+0xae>
			fs->free_clst++;
 800dec6:	69bb      	ldr	r3, [r7, #24]
 800dec8:	695b      	ldr	r3, [r3, #20]
 800deca:	1c5a      	adds	r2, r3, #1
 800decc:	69bb      	ldr	r3, [r7, #24]
 800dece:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	791b      	ldrb	r3, [r3, #4]
 800ded4:	f043 0301 	orr.w	r3, r3, #1
 800ded8:	b2da      	uxtb	r2, r3
 800deda:	69bb      	ldr	r3, [r7, #24]
 800dedc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800dee2:	69bb      	ldr	r3, [r7, #24]
 800dee4:	699b      	ldr	r3, [r3, #24]
 800dee6:	68ba      	ldr	r2, [r7, #8]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d3c6      	bcc.n	800de7a <remove_chain+0x4a>
 800deec:	e000      	b.n	800def0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800deee:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800def0:	2300      	movs	r3, #0
}
 800def2:	4618      	mov	r0, r3
 800def4:	3720      	adds	r7, #32
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}

0800defa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800defa:	b580      	push	{r7, lr}
 800defc:	b088      	sub	sp, #32
 800defe:	af00      	add	r7, sp, #0
 800df00:	6078      	str	r0, [r7, #4]
 800df02:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d10d      	bne.n	800df2c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	691b      	ldr	r3, [r3, #16]
 800df14:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800df16:	69bb      	ldr	r3, [r7, #24]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d004      	beq.n	800df26 <create_chain+0x2c>
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	699b      	ldr	r3, [r3, #24]
 800df20:	69ba      	ldr	r2, [r7, #24]
 800df22:	429a      	cmp	r2, r3
 800df24:	d31b      	bcc.n	800df5e <create_chain+0x64>
 800df26:	2301      	movs	r3, #1
 800df28:	61bb      	str	r3, [r7, #24]
 800df2a:	e018      	b.n	800df5e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800df2c:	6839      	ldr	r1, [r7, #0]
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f7ff fded 	bl	800db0e <get_fat>
 800df34:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d801      	bhi.n	800df40 <create_chain+0x46>
 800df3c:	2301      	movs	r3, #1
 800df3e:	e070      	b.n	800e022 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df46:	d101      	bne.n	800df4c <create_chain+0x52>
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	e06a      	b.n	800e022 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	699b      	ldr	r3, [r3, #24]
 800df50:	68fa      	ldr	r2, [r7, #12]
 800df52:	429a      	cmp	r2, r3
 800df54:	d201      	bcs.n	800df5a <create_chain+0x60>
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	e063      	b.n	800e022 <create_chain+0x128>
		scl = clst;
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800df5e:	69bb      	ldr	r3, [r7, #24]
 800df60:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800df62:	69fb      	ldr	r3, [r7, #28]
 800df64:	3301      	adds	r3, #1
 800df66:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	699b      	ldr	r3, [r3, #24]
 800df6c:	69fa      	ldr	r2, [r7, #28]
 800df6e:	429a      	cmp	r2, r3
 800df70:	d307      	bcc.n	800df82 <create_chain+0x88>
				ncl = 2;
 800df72:	2302      	movs	r3, #2
 800df74:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800df76:	69fa      	ldr	r2, [r7, #28]
 800df78:	69bb      	ldr	r3, [r7, #24]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d901      	bls.n	800df82 <create_chain+0x88>
 800df7e:	2300      	movs	r3, #0
 800df80:	e04f      	b.n	800e022 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800df82:	69f9      	ldr	r1, [r7, #28]
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f7ff fdc2 	bl	800db0e <get_fat>
 800df8a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d00e      	beq.n	800dfb0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2b01      	cmp	r3, #1
 800df96:	d003      	beq.n	800dfa0 <create_chain+0xa6>
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df9e:	d101      	bne.n	800dfa4 <create_chain+0xaa>
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	e03e      	b.n	800e022 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dfa4:	69fa      	ldr	r2, [r7, #28]
 800dfa6:	69bb      	ldr	r3, [r7, #24]
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d1da      	bne.n	800df62 <create_chain+0x68>
 800dfac:	2300      	movs	r3, #0
 800dfae:	e038      	b.n	800e022 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dfb0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dfb2:	f04f 32ff 	mov.w	r2, #4294967295
 800dfb6:	69f9      	ldr	r1, [r7, #28]
 800dfb8:	6938      	ldr	r0, [r7, #16]
 800dfba:	f7ff fe4f 	bl	800dc5c <put_fat>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dfc2:	7dfb      	ldrb	r3, [r7, #23]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d109      	bne.n	800dfdc <create_chain+0xe2>
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d006      	beq.n	800dfdc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dfce:	69fa      	ldr	r2, [r7, #28]
 800dfd0:	6839      	ldr	r1, [r7, #0]
 800dfd2:	6938      	ldr	r0, [r7, #16]
 800dfd4:	f7ff fe42 	bl	800dc5c <put_fat>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dfdc:	7dfb      	ldrb	r3, [r7, #23]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d116      	bne.n	800e010 <create_chain+0x116>
		fs->last_clst = ncl;
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	69fa      	ldr	r2, [r7, #28]
 800dfe6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	695a      	ldr	r2, [r3, #20]
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	699b      	ldr	r3, [r3, #24]
 800dff0:	3b02      	subs	r3, #2
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d804      	bhi.n	800e000 <create_chain+0x106>
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	695b      	ldr	r3, [r3, #20]
 800dffa:	1e5a      	subs	r2, r3, #1
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	791b      	ldrb	r3, [r3, #4]
 800e004:	f043 0301 	orr.w	r3, r3, #1
 800e008:	b2da      	uxtb	r2, r3
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	711a      	strb	r2, [r3, #4]
 800e00e:	e007      	b.n	800e020 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e010:	7dfb      	ldrb	r3, [r7, #23]
 800e012:	2b01      	cmp	r3, #1
 800e014:	d102      	bne.n	800e01c <create_chain+0x122>
 800e016:	f04f 33ff 	mov.w	r3, #4294967295
 800e01a:	e000      	b.n	800e01e <create_chain+0x124>
 800e01c:	2301      	movs	r3, #1
 800e01e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e020:	69fb      	ldr	r3, [r7, #28]
}
 800e022:	4618      	mov	r0, r3
 800e024:	3720      	adds	r7, #32
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}

0800e02a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e02a:	b480      	push	{r7}
 800e02c:	b087      	sub	sp, #28
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
 800e032:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e03e:	3304      	adds	r3, #4
 800e040:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	0a5b      	lsrs	r3, r3, #9
 800e046:	68fa      	ldr	r2, [r7, #12]
 800e048:	8952      	ldrh	r2, [r2, #10]
 800e04a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e04e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	1d1a      	adds	r2, r3, #4
 800e054:	613a      	str	r2, [r7, #16]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d101      	bne.n	800e064 <clmt_clust+0x3a>
 800e060:	2300      	movs	r3, #0
 800e062:	e010      	b.n	800e086 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e064:	697a      	ldr	r2, [r7, #20]
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d307      	bcc.n	800e07c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e06c:	697a      	ldr	r2, [r7, #20]
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	1ad3      	subs	r3, r2, r3
 800e072:	617b      	str	r3, [r7, #20]
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	3304      	adds	r3, #4
 800e078:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e07a:	e7e9      	b.n	800e050 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e07c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	4413      	add	r3, r2
}
 800e086:	4618      	mov	r0, r3
 800e088:	371c      	adds	r7, #28
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr

0800e092 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e092:	b580      	push	{r7, lr}
 800e094:	b086      	sub	sp, #24
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
 800e09a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e0a8:	d204      	bcs.n	800e0b4 <dir_sdi+0x22>
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	f003 031f 	and.w	r3, r3, #31
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d001      	beq.n	800e0b8 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e0b4:	2302      	movs	r3, #2
 800e0b6:	e063      	b.n	800e180 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	683a      	ldr	r2, [r7, #0]
 800e0bc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	689b      	ldr	r3, [r3, #8]
 800e0c2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d106      	bne.n	800e0d8 <dir_sdi+0x46>
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	781b      	ldrb	r3, [r3, #0]
 800e0ce:	2b02      	cmp	r3, #2
 800e0d0:	d902      	bls.n	800e0d8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e0d2:	693b      	ldr	r3, [r7, #16]
 800e0d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0d6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d10c      	bne.n	800e0f8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	095b      	lsrs	r3, r3, #5
 800e0e2:	693a      	ldr	r2, [r7, #16]
 800e0e4:	8912      	ldrh	r2, [r2, #8]
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	d301      	bcc.n	800e0ee <dir_sdi+0x5c>
 800e0ea:	2302      	movs	r3, #2
 800e0ec:	e048      	b.n	800e180 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	61da      	str	r2, [r3, #28]
 800e0f6:	e029      	b.n	800e14c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	895b      	ldrh	r3, [r3, #10]
 800e0fc:	025b      	lsls	r3, r3, #9
 800e0fe:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e100:	e019      	b.n	800e136 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6979      	ldr	r1, [r7, #20]
 800e106:	4618      	mov	r0, r3
 800e108:	f7ff fd01 	bl	800db0e <get_fat>
 800e10c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e114:	d101      	bne.n	800e11a <dir_sdi+0x88>
 800e116:	2301      	movs	r3, #1
 800e118:	e032      	b.n	800e180 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d904      	bls.n	800e12a <dir_sdi+0x98>
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	699b      	ldr	r3, [r3, #24]
 800e124:	697a      	ldr	r2, [r7, #20]
 800e126:	429a      	cmp	r2, r3
 800e128:	d301      	bcc.n	800e12e <dir_sdi+0x9c>
 800e12a:	2302      	movs	r3, #2
 800e12c:	e028      	b.n	800e180 <dir_sdi+0xee>
			ofs -= csz;
 800e12e:	683a      	ldr	r2, [r7, #0]
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	1ad3      	subs	r3, r2, r3
 800e134:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e136:	683a      	ldr	r2, [r7, #0]
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d2e1      	bcs.n	800e102 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e13e:	6979      	ldr	r1, [r7, #20]
 800e140:	6938      	ldr	r0, [r7, #16]
 800e142:	f7ff fcc5 	bl	800dad0 <clust2sect>
 800e146:	4602      	mov	r2, r0
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	697a      	ldr	r2, [r7, #20]
 800e150:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	69db      	ldr	r3, [r3, #28]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d101      	bne.n	800e15e <dir_sdi+0xcc>
 800e15a:	2302      	movs	r3, #2
 800e15c:	e010      	b.n	800e180 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	69da      	ldr	r2, [r3, #28]
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	0a5b      	lsrs	r3, r3, #9
 800e166:	441a      	add	r2, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e178:	441a      	add	r2, r3
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e17e:	2300      	movs	r3, #0
}
 800e180:	4618      	mov	r0, r3
 800e182:	3718      	adds	r7, #24
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b086      	sub	sp, #24
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	695b      	ldr	r3, [r3, #20]
 800e19c:	3320      	adds	r3, #32
 800e19e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	69db      	ldr	r3, [r3, #28]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d003      	beq.n	800e1b0 <dir_next+0x28>
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e1ae:	d301      	bcc.n	800e1b4 <dir_next+0x2c>
 800e1b0:	2304      	movs	r3, #4
 800e1b2:	e0aa      	b.n	800e30a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	f040 8098 	bne.w	800e2f0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	69db      	ldr	r3, [r3, #28]
 800e1c4:	1c5a      	adds	r2, r3, #1
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	699b      	ldr	r3, [r3, #24]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d10b      	bne.n	800e1ea <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	095b      	lsrs	r3, r3, #5
 800e1d6:	68fa      	ldr	r2, [r7, #12]
 800e1d8:	8912      	ldrh	r2, [r2, #8]
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	f0c0 8088 	bcc.w	800e2f0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	61da      	str	r2, [r3, #28]
 800e1e6:	2304      	movs	r3, #4
 800e1e8:	e08f      	b.n	800e30a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	0a5b      	lsrs	r3, r3, #9
 800e1ee:	68fa      	ldr	r2, [r7, #12]
 800e1f0:	8952      	ldrh	r2, [r2, #10]
 800e1f2:	3a01      	subs	r2, #1
 800e1f4:	4013      	ands	r3, r2
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d17a      	bne.n	800e2f0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	699b      	ldr	r3, [r3, #24]
 800e200:	4619      	mov	r1, r3
 800e202:	4610      	mov	r0, r2
 800e204:	f7ff fc83 	bl	800db0e <get_fat>
 800e208:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d801      	bhi.n	800e214 <dir_next+0x8c>
 800e210:	2302      	movs	r3, #2
 800e212:	e07a      	b.n	800e30a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e21a:	d101      	bne.n	800e220 <dir_next+0x98>
 800e21c:	2301      	movs	r3, #1
 800e21e:	e074      	b.n	800e30a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	699b      	ldr	r3, [r3, #24]
 800e224:	697a      	ldr	r2, [r7, #20]
 800e226:	429a      	cmp	r2, r3
 800e228:	d358      	bcc.n	800e2dc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d104      	bne.n	800e23a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2200      	movs	r2, #0
 800e234:	61da      	str	r2, [r3, #28]
 800e236:	2304      	movs	r3, #4
 800e238:	e067      	b.n	800e30a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	699b      	ldr	r3, [r3, #24]
 800e240:	4619      	mov	r1, r3
 800e242:	4610      	mov	r0, r2
 800e244:	f7ff fe59 	bl	800defa <create_chain>
 800e248:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d101      	bne.n	800e254 <dir_next+0xcc>
 800e250:	2307      	movs	r3, #7
 800e252:	e05a      	b.n	800e30a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	2b01      	cmp	r3, #1
 800e258:	d101      	bne.n	800e25e <dir_next+0xd6>
 800e25a:	2302      	movs	r3, #2
 800e25c:	e055      	b.n	800e30a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e264:	d101      	bne.n	800e26a <dir_next+0xe2>
 800e266:	2301      	movs	r3, #1
 800e268:	e04f      	b.n	800e30a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e26a:	68f8      	ldr	r0, [r7, #12]
 800e26c:	f7ff fb50 	bl	800d910 <sync_window>
 800e270:	4603      	mov	r3, r0
 800e272:	2b00      	cmp	r3, #0
 800e274:	d001      	beq.n	800e27a <dir_next+0xf2>
 800e276:	2301      	movs	r3, #1
 800e278:	e047      	b.n	800e30a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	3334      	adds	r3, #52	@ 0x34
 800e27e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e282:	2100      	movs	r1, #0
 800e284:	4618      	mov	r0, r3
 800e286:	f7ff f979 	bl	800d57c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e28a:	2300      	movs	r3, #0
 800e28c:	613b      	str	r3, [r7, #16]
 800e28e:	6979      	ldr	r1, [r7, #20]
 800e290:	68f8      	ldr	r0, [r7, #12]
 800e292:	f7ff fc1d 	bl	800dad0 <clust2sect>
 800e296:	4602      	mov	r2, r0
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	631a      	str	r2, [r3, #48]	@ 0x30
 800e29c:	e012      	b.n	800e2c4 <dir_next+0x13c>
						fs->wflag = 1;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2201      	movs	r2, #1
 800e2a2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e2a4:	68f8      	ldr	r0, [r7, #12]
 800e2a6:	f7ff fb33 	bl	800d910 <sync_window>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d001      	beq.n	800e2b4 <dir_next+0x12c>
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	e02a      	b.n	800e30a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	613b      	str	r3, [r7, #16]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2be:	1c5a      	adds	r2, r3, #1
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	631a      	str	r2, [r3, #48]	@ 0x30
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	895b      	ldrh	r3, [r3, #10]
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d3e6      	bcc.n	800e29e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	1ad2      	subs	r2, r2, r3
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	697a      	ldr	r2, [r7, #20]
 800e2e0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e2e2:	6979      	ldr	r1, [r7, #20]
 800e2e4:	68f8      	ldr	r0, [r7, #12]
 800e2e6:	f7ff fbf3 	bl	800dad0 <clust2sect>
 800e2ea:	4602      	mov	r2, r0
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	68ba      	ldr	r2, [r7, #8]
 800e2f4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e302:	441a      	add	r2, r3
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e308:	2300      	movs	r3, #0
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3718      	adds	r7, #24
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}

0800e312 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e312:	b580      	push	{r7, lr}
 800e314:	b086      	sub	sp, #24
 800e316:	af00      	add	r7, sp, #0
 800e318:	6078      	str	r0, [r7, #4]
 800e31a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e322:	2100      	movs	r1, #0
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f7ff feb4 	bl	800e092 <dir_sdi>
 800e32a:	4603      	mov	r3, r0
 800e32c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e32e:	7dfb      	ldrb	r3, [r7, #23]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d12b      	bne.n	800e38c <dir_alloc+0x7a>
		n = 0;
 800e334:	2300      	movs	r3, #0
 800e336:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	69db      	ldr	r3, [r3, #28]
 800e33c:	4619      	mov	r1, r3
 800e33e:	68f8      	ldr	r0, [r7, #12]
 800e340:	f7ff fb2a 	bl	800d998 <move_window>
 800e344:	4603      	mov	r3, r0
 800e346:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e348:	7dfb      	ldrb	r3, [r7, #23]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d11d      	bne.n	800e38a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6a1b      	ldr	r3, [r3, #32]
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	2be5      	cmp	r3, #229	@ 0xe5
 800e356:	d004      	beq.n	800e362 <dir_alloc+0x50>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6a1b      	ldr	r3, [r3, #32]
 800e35c:	781b      	ldrb	r3, [r3, #0]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d107      	bne.n	800e372 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	3301      	adds	r3, #1
 800e366:	613b      	str	r3, [r7, #16]
 800e368:	693a      	ldr	r2, [r7, #16]
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d102      	bne.n	800e376 <dir_alloc+0x64>
 800e370:	e00c      	b.n	800e38c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e372:	2300      	movs	r3, #0
 800e374:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e376:	2101      	movs	r1, #1
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f7ff ff05 	bl	800e188 <dir_next>
 800e37e:	4603      	mov	r3, r0
 800e380:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e382:	7dfb      	ldrb	r3, [r7, #23]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d0d7      	beq.n	800e338 <dir_alloc+0x26>
 800e388:	e000      	b.n	800e38c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e38a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e38c:	7dfb      	ldrb	r3, [r7, #23]
 800e38e:	2b04      	cmp	r3, #4
 800e390:	d101      	bne.n	800e396 <dir_alloc+0x84>
 800e392:	2307      	movs	r3, #7
 800e394:	75fb      	strb	r3, [r7, #23]
	return res;
 800e396:	7dfb      	ldrb	r3, [r7, #23]
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3718      	adds	r7, #24
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}

0800e3a0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	331a      	adds	r3, #26
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7ff f840 	bl	800d434 <ld_word>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	781b      	ldrb	r3, [r3, #0]
 800e3bc:	2b03      	cmp	r3, #3
 800e3be:	d109      	bne.n	800e3d4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	3314      	adds	r3, #20
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7ff f835 	bl	800d434 <ld_word>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	041b      	lsls	r3, r3, #16
 800e3ce:	68fa      	ldr	r2, [r7, #12]
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3710      	adds	r7, #16
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}

0800e3de <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e3de:	b580      	push	{r7, lr}
 800e3e0:	b084      	sub	sp, #16
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	60f8      	str	r0, [r7, #12]
 800e3e6:	60b9      	str	r1, [r7, #8]
 800e3e8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	331a      	adds	r3, #26
 800e3ee:	687a      	ldr	r2, [r7, #4]
 800e3f0:	b292      	uxth	r2, r2
 800e3f2:	4611      	mov	r1, r2
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7ff f859 	bl	800d4ac <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	2b03      	cmp	r3, #3
 800e400:	d109      	bne.n	800e416 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	f103 0214 	add.w	r2, r3, #20
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	0c1b      	lsrs	r3, r3, #16
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	4619      	mov	r1, r3
 800e410:	4610      	mov	r0, r2
 800e412:	f7ff f84b 	bl	800d4ac <st_word>
	}
}
 800e416:	bf00      	nop
 800e418:	3710      	adds	r7, #16
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
	...

0800e420 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e420:	b590      	push	{r4, r7, lr}
 800e422:	b087      	sub	sp, #28
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	331a      	adds	r3, #26
 800e42e:	4618      	mov	r0, r3
 800e430:	f7ff f800 	bl	800d434 <ld_word>
 800e434:	4603      	mov	r3, r0
 800e436:	2b00      	cmp	r3, #0
 800e438:	d001      	beq.n	800e43e <cmp_lfn+0x1e>
 800e43a:	2300      	movs	r3, #0
 800e43c:	e059      	b.n	800e4f2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e446:	1e5a      	subs	r2, r3, #1
 800e448:	4613      	mov	r3, r2
 800e44a:	005b      	lsls	r3, r3, #1
 800e44c:	4413      	add	r3, r2
 800e44e:	009b      	lsls	r3, r3, #2
 800e450:	4413      	add	r3, r2
 800e452:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e454:	2301      	movs	r3, #1
 800e456:	81fb      	strh	r3, [r7, #14]
 800e458:	2300      	movs	r3, #0
 800e45a:	613b      	str	r3, [r7, #16]
 800e45c:	e033      	b.n	800e4c6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e45e:	4a27      	ldr	r2, [pc, #156]	@ (800e4fc <cmp_lfn+0xdc>)
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	4413      	add	r3, r2
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	461a      	mov	r2, r3
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	4413      	add	r3, r2
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7fe ffe1 	bl	800d434 <ld_word>
 800e472:	4603      	mov	r3, r0
 800e474:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e476:	89fb      	ldrh	r3, [r7, #14]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d01a      	beq.n	800e4b2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	2bfe      	cmp	r3, #254	@ 0xfe
 800e480:	d812      	bhi.n	800e4a8 <cmp_lfn+0x88>
 800e482:	89bb      	ldrh	r3, [r7, #12]
 800e484:	4618      	mov	r0, r3
 800e486:	f002 f99b 	bl	80107c0 <ff_wtoupper>
 800e48a:	4603      	mov	r3, r0
 800e48c:	461c      	mov	r4, r3
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	1c5a      	adds	r2, r3, #1
 800e492:	617a      	str	r2, [r7, #20]
 800e494:	005b      	lsls	r3, r3, #1
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	4413      	add	r3, r2
 800e49a:	881b      	ldrh	r3, [r3, #0]
 800e49c:	4618      	mov	r0, r3
 800e49e:	f002 f98f 	bl	80107c0 <ff_wtoupper>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	429c      	cmp	r4, r3
 800e4a6:	d001      	beq.n	800e4ac <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	e022      	b.n	800e4f2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e4ac:	89bb      	ldrh	r3, [r7, #12]
 800e4ae:	81fb      	strh	r3, [r7, #14]
 800e4b0:	e006      	b.n	800e4c0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e4b2:	89bb      	ldrh	r3, [r7, #12]
 800e4b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d001      	beq.n	800e4c0 <cmp_lfn+0xa0>
 800e4bc:	2300      	movs	r3, #0
 800e4be:	e018      	b.n	800e4f2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	613b      	str	r3, [r7, #16]
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	2b0c      	cmp	r3, #12
 800e4ca:	d9c8      	bls.n	800e45e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	781b      	ldrb	r3, [r3, #0]
 800e4d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d00b      	beq.n	800e4f0 <cmp_lfn+0xd0>
 800e4d8:	89fb      	ldrh	r3, [r7, #14]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d008      	beq.n	800e4f0 <cmp_lfn+0xd0>
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	005b      	lsls	r3, r3, #1
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	4413      	add	r3, r2
 800e4e6:	881b      	ldrh	r3, [r3, #0]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d001      	beq.n	800e4f0 <cmp_lfn+0xd0>
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	e000      	b.n	800e4f2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e4f0:	2301      	movs	r3, #1
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	371c      	adds	r7, #28
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd90      	pop	{r4, r7, pc}
 800e4fa:	bf00      	nop
 800e4fc:	080129a8 	.word	0x080129a8

0800e500 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b086      	sub	sp, #24
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	331a      	adds	r3, #26
 800e50e:	4618      	mov	r0, r3
 800e510:	f7fe ff90 	bl	800d434 <ld_word>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d001      	beq.n	800e51e <pick_lfn+0x1e>
 800e51a:	2300      	movs	r3, #0
 800e51c:	e04d      	b.n	800e5ba <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e526:	1e5a      	subs	r2, r3, #1
 800e528:	4613      	mov	r3, r2
 800e52a:	005b      	lsls	r3, r3, #1
 800e52c:	4413      	add	r3, r2
 800e52e:	009b      	lsls	r3, r3, #2
 800e530:	4413      	add	r3, r2
 800e532:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e534:	2301      	movs	r3, #1
 800e536:	81fb      	strh	r3, [r7, #14]
 800e538:	2300      	movs	r3, #0
 800e53a:	613b      	str	r3, [r7, #16]
 800e53c:	e028      	b.n	800e590 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e53e:	4a21      	ldr	r2, [pc, #132]	@ (800e5c4 <pick_lfn+0xc4>)
 800e540:	693b      	ldr	r3, [r7, #16]
 800e542:	4413      	add	r3, r2
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	461a      	mov	r2, r3
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	4413      	add	r3, r2
 800e54c:	4618      	mov	r0, r3
 800e54e:	f7fe ff71 	bl	800d434 <ld_word>
 800e552:	4603      	mov	r3, r0
 800e554:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e556:	89fb      	ldrh	r3, [r7, #14]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d00f      	beq.n	800e57c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	2bfe      	cmp	r3, #254	@ 0xfe
 800e560:	d901      	bls.n	800e566 <pick_lfn+0x66>
 800e562:	2300      	movs	r3, #0
 800e564:	e029      	b.n	800e5ba <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e566:	89bb      	ldrh	r3, [r7, #12]
 800e568:	81fb      	strh	r3, [r7, #14]
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	1c5a      	adds	r2, r3, #1
 800e56e:	617a      	str	r2, [r7, #20]
 800e570:	005b      	lsls	r3, r3, #1
 800e572:	687a      	ldr	r2, [r7, #4]
 800e574:	4413      	add	r3, r2
 800e576:	89fa      	ldrh	r2, [r7, #14]
 800e578:	801a      	strh	r2, [r3, #0]
 800e57a:	e006      	b.n	800e58a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e57c:	89bb      	ldrh	r3, [r7, #12]
 800e57e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e582:	4293      	cmp	r3, r2
 800e584:	d001      	beq.n	800e58a <pick_lfn+0x8a>
 800e586:	2300      	movs	r3, #0
 800e588:	e017      	b.n	800e5ba <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	3301      	adds	r3, #1
 800e58e:	613b      	str	r3, [r7, #16]
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	2b0c      	cmp	r3, #12
 800e594:	d9d3      	bls.n	800e53e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d00a      	beq.n	800e5b8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	2bfe      	cmp	r3, #254	@ 0xfe
 800e5a6:	d901      	bls.n	800e5ac <pick_lfn+0xac>
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	e006      	b.n	800e5ba <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	005b      	lsls	r3, r3, #1
 800e5b0:	687a      	ldr	r2, [r7, #4]
 800e5b2:	4413      	add	r3, r2
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e5b8:	2301      	movs	r3, #1
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3718      	adds	r7, #24
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	080129a8 	.word	0x080129a8

0800e5c8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b088      	sub	sp, #32
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	60b9      	str	r1, [r7, #8]
 800e5d2:	4611      	mov	r1, r2
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	460b      	mov	r3, r1
 800e5d8:	71fb      	strb	r3, [r7, #7]
 800e5da:	4613      	mov	r3, r2
 800e5dc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	330d      	adds	r3, #13
 800e5e2:	79ba      	ldrb	r2, [r7, #6]
 800e5e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	330b      	adds	r3, #11
 800e5ea:	220f      	movs	r2, #15
 800e5ec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	330c      	adds	r3, #12
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	331a      	adds	r3, #26
 800e5fa:	2100      	movs	r1, #0
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f7fe ff55 	bl	800d4ac <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e602:	79fb      	ldrb	r3, [r7, #7]
 800e604:	1e5a      	subs	r2, r3, #1
 800e606:	4613      	mov	r3, r2
 800e608:	005b      	lsls	r3, r3, #1
 800e60a:	4413      	add	r3, r2
 800e60c:	009b      	lsls	r3, r3, #2
 800e60e:	4413      	add	r3, r2
 800e610:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e612:	2300      	movs	r3, #0
 800e614:	82fb      	strh	r3, [r7, #22]
 800e616:	2300      	movs	r3, #0
 800e618:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e61a:	8afb      	ldrh	r3, [r7, #22]
 800e61c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e620:	4293      	cmp	r3, r2
 800e622:	d007      	beq.n	800e634 <put_lfn+0x6c>
 800e624:	69fb      	ldr	r3, [r7, #28]
 800e626:	1c5a      	adds	r2, r3, #1
 800e628:	61fa      	str	r2, [r7, #28]
 800e62a:	005b      	lsls	r3, r3, #1
 800e62c:	68fa      	ldr	r2, [r7, #12]
 800e62e:	4413      	add	r3, r2
 800e630:	881b      	ldrh	r3, [r3, #0]
 800e632:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e634:	4a17      	ldr	r2, [pc, #92]	@ (800e694 <put_lfn+0xcc>)
 800e636:	69bb      	ldr	r3, [r7, #24]
 800e638:	4413      	add	r3, r2
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	461a      	mov	r2, r3
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	4413      	add	r3, r2
 800e642:	8afa      	ldrh	r2, [r7, #22]
 800e644:	4611      	mov	r1, r2
 800e646:	4618      	mov	r0, r3
 800e648:	f7fe ff30 	bl	800d4ac <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e64c:	8afb      	ldrh	r3, [r7, #22]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d102      	bne.n	800e658 <put_lfn+0x90>
 800e652:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e656:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e658:	69bb      	ldr	r3, [r7, #24]
 800e65a:	3301      	adds	r3, #1
 800e65c:	61bb      	str	r3, [r7, #24]
 800e65e:	69bb      	ldr	r3, [r7, #24]
 800e660:	2b0c      	cmp	r3, #12
 800e662:	d9da      	bls.n	800e61a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e664:	8afb      	ldrh	r3, [r7, #22]
 800e666:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d006      	beq.n	800e67c <put_lfn+0xb4>
 800e66e:	69fb      	ldr	r3, [r7, #28]
 800e670:	005b      	lsls	r3, r3, #1
 800e672:	68fa      	ldr	r2, [r7, #12]
 800e674:	4413      	add	r3, r2
 800e676:	881b      	ldrh	r3, [r3, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d103      	bne.n	800e684 <put_lfn+0xbc>
 800e67c:	79fb      	ldrb	r3, [r7, #7]
 800e67e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e682:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	79fa      	ldrb	r2, [r7, #7]
 800e688:	701a      	strb	r2, [r3, #0]
}
 800e68a:	bf00      	nop
 800e68c:	3720      	adds	r7, #32
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
 800e692:	bf00      	nop
 800e694:	080129a8 	.word	0x080129a8

0800e698 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b08c      	sub	sp, #48	@ 0x30
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	607a      	str	r2, [r7, #4]
 800e6a4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e6a6:	220b      	movs	r2, #11
 800e6a8:	68b9      	ldr	r1, [r7, #8]
 800e6aa:	68f8      	ldr	r0, [r7, #12]
 800e6ac:	f7fe ff45 	bl	800d53a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	2b05      	cmp	r3, #5
 800e6b4:	d92b      	bls.n	800e70e <gen_numname+0x76>
		sr = seq;
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e6ba:	e022      	b.n	800e702 <gen_numname+0x6a>
			wc = *lfn++;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	1c9a      	adds	r2, r3, #2
 800e6c0:	607a      	str	r2, [r7, #4]
 800e6c2:	881b      	ldrh	r3, [r3, #0]
 800e6c4:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e6ca:	e017      	b.n	800e6fc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e6cc:	69fb      	ldr	r3, [r7, #28]
 800e6ce:	005a      	lsls	r2, r3, #1
 800e6d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e6d2:	f003 0301 	and.w	r3, r3, #1
 800e6d6:	4413      	add	r3, r2
 800e6d8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e6da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e6dc:	085b      	lsrs	r3, r3, #1
 800e6de:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d005      	beq.n	800e6f6 <gen_numname+0x5e>
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800e6f0:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800e6f4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6fe:	2b0f      	cmp	r3, #15
 800e700:	d9e4      	bls.n	800e6cc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	881b      	ldrh	r3, [r3, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d1d8      	bne.n	800e6bc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e70e:	2307      	movs	r3, #7
 800e710:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	b2db      	uxtb	r3, r3
 800e716:	f003 030f 	and.w	r3, r3, #15
 800e71a:	b2db      	uxtb	r3, r3
 800e71c:	3330      	adds	r3, #48	@ 0x30
 800e71e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800e722:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e726:	2b39      	cmp	r3, #57	@ 0x39
 800e728:	d904      	bls.n	800e734 <gen_numname+0x9c>
 800e72a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e72e:	3307      	adds	r3, #7
 800e730:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800e734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e736:	1e5a      	subs	r2, r3, #1
 800e738:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e73a:	3330      	adds	r3, #48	@ 0x30
 800e73c:	443b      	add	r3, r7
 800e73e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e742:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	091b      	lsrs	r3, r3, #4
 800e74a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d1df      	bne.n	800e712 <gen_numname+0x7a>
	ns[i] = '~';
 800e752:	f107 0214 	add.w	r2, r7, #20
 800e756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e758:	4413      	add	r3, r2
 800e75a:	227e      	movs	r2, #126	@ 0x7e
 800e75c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e75e:	2300      	movs	r3, #0
 800e760:	627b      	str	r3, [r7, #36]	@ 0x24
 800e762:	e002      	b.n	800e76a <gen_numname+0xd2>
 800e764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e766:	3301      	adds	r3, #1
 800e768:	627b      	str	r3, [r7, #36]	@ 0x24
 800e76a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e76e:	429a      	cmp	r2, r3
 800e770:	d205      	bcs.n	800e77e <gen_numname+0xe6>
 800e772:	68fa      	ldr	r2, [r7, #12]
 800e774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e776:	4413      	add	r3, r2
 800e778:	781b      	ldrb	r3, [r3, #0]
 800e77a:	2b20      	cmp	r3, #32
 800e77c:	d1f2      	bne.n	800e764 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e780:	2b07      	cmp	r3, #7
 800e782:	d807      	bhi.n	800e794 <gen_numname+0xfc>
 800e784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e786:	1c5a      	adds	r2, r3, #1
 800e788:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e78a:	3330      	adds	r3, #48	@ 0x30
 800e78c:	443b      	add	r3, r7
 800e78e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e792:	e000      	b.n	800e796 <gen_numname+0xfe>
 800e794:	2120      	movs	r1, #32
 800e796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e798:	1c5a      	adds	r2, r3, #1
 800e79a:	627a      	str	r2, [r7, #36]	@ 0x24
 800e79c:	68fa      	ldr	r2, [r7, #12]
 800e79e:	4413      	add	r3, r2
 800e7a0:	460a      	mov	r2, r1
 800e7a2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7a6:	2b07      	cmp	r3, #7
 800e7a8:	d9e9      	bls.n	800e77e <gen_numname+0xe6>
}
 800e7aa:	bf00      	nop
 800e7ac:	bf00      	nop
 800e7ae:	3730      	adds	r7, #48	@ 0x30
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b085      	sub	sp, #20
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e7c0:	230b      	movs	r3, #11
 800e7c2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e7c4:	7bfb      	ldrb	r3, [r7, #15]
 800e7c6:	b2da      	uxtb	r2, r3
 800e7c8:	0852      	lsrs	r2, r2, #1
 800e7ca:	01db      	lsls	r3, r3, #7
 800e7cc:	4313      	orrs	r3, r2
 800e7ce:	b2da      	uxtb	r2, r3
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	1c59      	adds	r1, r3, #1
 800e7d4:	6079      	str	r1, [r7, #4]
 800e7d6:	781b      	ldrb	r3, [r3, #0]
 800e7d8:	4413      	add	r3, r2
 800e7da:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	3b01      	subs	r3, #1
 800e7e0:	60bb      	str	r3, [r7, #8]
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d1ed      	bne.n	800e7c4 <sum_sfn+0x10>
	return sum;
 800e7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3714      	adds	r7, #20
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f4:	4770      	bx	lr

0800e7f6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e7f6:	b580      	push	{r7, lr}
 800e7f8:	b086      	sub	sp, #24
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6078      	str	r0, [r7, #4]
 800e7fe:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e800:	2304      	movs	r3, #4
 800e802:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e80a:	23ff      	movs	r3, #255	@ 0xff
 800e80c:	757b      	strb	r3, [r7, #21]
 800e80e:	23ff      	movs	r3, #255	@ 0xff
 800e810:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e812:	e081      	b.n	800e918 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	69db      	ldr	r3, [r3, #28]
 800e818:	4619      	mov	r1, r3
 800e81a:	6938      	ldr	r0, [r7, #16]
 800e81c:	f7ff f8bc 	bl	800d998 <move_window>
 800e820:	4603      	mov	r3, r0
 800e822:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e824:	7dfb      	ldrb	r3, [r7, #23]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d17c      	bne.n	800e924 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6a1b      	ldr	r3, [r3, #32]
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e832:	7dbb      	ldrb	r3, [r7, #22]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d102      	bne.n	800e83e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e838:	2304      	movs	r3, #4
 800e83a:	75fb      	strb	r3, [r7, #23]
 800e83c:	e077      	b.n	800e92e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6a1b      	ldr	r3, [r3, #32]
 800e842:	330b      	adds	r3, #11
 800e844:	781b      	ldrb	r3, [r3, #0]
 800e846:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e84a:	73fb      	strb	r3, [r7, #15]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	7bfa      	ldrb	r2, [r7, #15]
 800e850:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e852:	7dbb      	ldrb	r3, [r7, #22]
 800e854:	2be5      	cmp	r3, #229	@ 0xe5
 800e856:	d00e      	beq.n	800e876 <dir_read+0x80>
 800e858:	7dbb      	ldrb	r3, [r7, #22]
 800e85a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e85c:	d00b      	beq.n	800e876 <dir_read+0x80>
 800e85e:	7bfb      	ldrb	r3, [r7, #15]
 800e860:	f023 0320 	bic.w	r3, r3, #32
 800e864:	2b08      	cmp	r3, #8
 800e866:	bf0c      	ite	eq
 800e868:	2301      	moveq	r3, #1
 800e86a:	2300      	movne	r3, #0
 800e86c:	b2db      	uxtb	r3, r3
 800e86e:	461a      	mov	r2, r3
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	4293      	cmp	r3, r2
 800e874:	d002      	beq.n	800e87c <dir_read+0x86>
				ord = 0xFF;
 800e876:	23ff      	movs	r3, #255	@ 0xff
 800e878:	757b      	strb	r3, [r7, #21]
 800e87a:	e044      	b.n	800e906 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e87c:	7bfb      	ldrb	r3, [r7, #15]
 800e87e:	2b0f      	cmp	r3, #15
 800e880:	d12f      	bne.n	800e8e2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e882:	7dbb      	ldrb	r3, [r7, #22]
 800e884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d00d      	beq.n	800e8a8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6a1b      	ldr	r3, [r3, #32]
 800e890:	7b5b      	ldrb	r3, [r3, #13]
 800e892:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e894:	7dbb      	ldrb	r3, [r7, #22]
 800e896:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e89a:	75bb      	strb	r3, [r7, #22]
 800e89c:	7dbb      	ldrb	r3, [r7, #22]
 800e89e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	695a      	ldr	r2, [r3, #20]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e8a8:	7dba      	ldrb	r2, [r7, #22]
 800e8aa:	7d7b      	ldrb	r3, [r7, #21]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d115      	bne.n	800e8dc <dir_read+0xe6>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6a1b      	ldr	r3, [r3, #32]
 800e8b4:	330d      	adds	r3, #13
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	7d3a      	ldrb	r2, [r7, #20]
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d10e      	bne.n	800e8dc <dir_read+0xe6>
 800e8be:	693b      	ldr	r3, [r7, #16]
 800e8c0:	68da      	ldr	r2, [r3, #12]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6a1b      	ldr	r3, [r3, #32]
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	4610      	mov	r0, r2
 800e8ca:	f7ff fe19 	bl	800e500 <pick_lfn>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d003      	beq.n	800e8dc <dir_read+0xe6>
 800e8d4:	7d7b      	ldrb	r3, [r7, #21]
 800e8d6:	3b01      	subs	r3, #1
 800e8d8:	b2db      	uxtb	r3, r3
 800e8da:	e000      	b.n	800e8de <dir_read+0xe8>
 800e8dc:	23ff      	movs	r3, #255	@ 0xff
 800e8de:	757b      	strb	r3, [r7, #21]
 800e8e0:	e011      	b.n	800e906 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e8e2:	7d7b      	ldrb	r3, [r7, #21]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d109      	bne.n	800e8fc <dir_read+0x106>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6a1b      	ldr	r3, [r3, #32]
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7ff ff61 	bl	800e7b4 <sum_sfn>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	461a      	mov	r2, r3
 800e8f6:	7d3b      	ldrb	r3, [r7, #20]
 800e8f8:	4293      	cmp	r3, r2
 800e8fa:	d015      	beq.n	800e928 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f04f 32ff 	mov.w	r2, #4294967295
 800e902:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 800e904:	e010      	b.n	800e928 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e906:	2100      	movs	r1, #0
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f7ff fc3d 	bl	800e188 <dir_next>
 800e90e:	4603      	mov	r3, r0
 800e910:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e912:	7dfb      	ldrb	r3, [r7, #23]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d109      	bne.n	800e92c <dir_read+0x136>
	while (dp->sect) {
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	69db      	ldr	r3, [r3, #28]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	f47f af79 	bne.w	800e814 <dir_read+0x1e>
 800e922:	e004      	b.n	800e92e <dir_read+0x138>
		if (res != FR_OK) break;
 800e924:	bf00      	nop
 800e926:	e002      	b.n	800e92e <dir_read+0x138>
					break;
 800e928:	bf00      	nop
 800e92a:	e000      	b.n	800e92e <dir_read+0x138>
		if (res != FR_OK) break;
 800e92c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e92e:	7dfb      	ldrb	r3, [r7, #23]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d002      	beq.n	800e93a <dir_read+0x144>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2200      	movs	r2, #0
 800e938:	61da      	str	r2, [r3, #28]
	return res;
 800e93a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3718      	adds	r7, #24
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b086      	sub	sp, #24
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e952:	2100      	movs	r1, #0
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f7ff fb9c 	bl	800e092 <dir_sdi>
 800e95a:	4603      	mov	r3, r0
 800e95c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e95e:	7dfb      	ldrb	r3, [r7, #23]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d001      	beq.n	800e968 <dir_find+0x24>
 800e964:	7dfb      	ldrb	r3, [r7, #23]
 800e966:	e0a9      	b.n	800eabc <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e968:	23ff      	movs	r3, #255	@ 0xff
 800e96a:	753b      	strb	r3, [r7, #20]
 800e96c:	7d3b      	ldrb	r3, [r7, #20]
 800e96e:	757b      	strb	r3, [r7, #21]
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f04f 32ff 	mov.w	r2, #4294967295
 800e976:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	69db      	ldr	r3, [r3, #28]
 800e97c:	4619      	mov	r1, r3
 800e97e:	6938      	ldr	r0, [r7, #16]
 800e980:	f7ff f80a 	bl	800d998 <move_window>
 800e984:	4603      	mov	r3, r0
 800e986:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e988:	7dfb      	ldrb	r3, [r7, #23]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	f040 8090 	bne.w	800eab0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6a1b      	ldr	r3, [r3, #32]
 800e994:	781b      	ldrb	r3, [r3, #0]
 800e996:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e998:	7dbb      	ldrb	r3, [r7, #22]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d102      	bne.n	800e9a4 <dir_find+0x60>
 800e99e:	2304      	movs	r3, #4
 800e9a0:	75fb      	strb	r3, [r7, #23]
 800e9a2:	e08a      	b.n	800eaba <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6a1b      	ldr	r3, [r3, #32]
 800e9a8:	330b      	adds	r3, #11
 800e9aa:	781b      	ldrb	r3, [r3, #0]
 800e9ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e9b0:	73fb      	strb	r3, [r7, #15]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	7bfa      	ldrb	r2, [r7, #15]
 800e9b6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e9b8:	7dbb      	ldrb	r3, [r7, #22]
 800e9ba:	2be5      	cmp	r3, #229	@ 0xe5
 800e9bc:	d007      	beq.n	800e9ce <dir_find+0x8a>
 800e9be:	7bfb      	ldrb	r3, [r7, #15]
 800e9c0:	f003 0308 	and.w	r3, r3, #8
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d009      	beq.n	800e9dc <dir_find+0x98>
 800e9c8:	7bfb      	ldrb	r3, [r7, #15]
 800e9ca:	2b0f      	cmp	r3, #15
 800e9cc:	d006      	beq.n	800e9dc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e9ce:	23ff      	movs	r3, #255	@ 0xff
 800e9d0:	757b      	strb	r3, [r7, #21]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f04f 32ff 	mov.w	r2, #4294967295
 800e9d8:	631a      	str	r2, [r3, #48]	@ 0x30
 800e9da:	e05e      	b.n	800ea9a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e9dc:	7bfb      	ldrb	r3, [r7, #15]
 800e9de:	2b0f      	cmp	r3, #15
 800e9e0:	d136      	bne.n	800ea50 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e9e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d154      	bne.n	800ea9a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e9f0:	7dbb      	ldrb	r3, [r7, #22]
 800e9f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d00d      	beq.n	800ea16 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6a1b      	ldr	r3, [r3, #32]
 800e9fe:	7b5b      	ldrb	r3, [r3, #13]
 800ea00:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ea02:	7dbb      	ldrb	r3, [r7, #22]
 800ea04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea08:	75bb      	strb	r3, [r7, #22]
 800ea0a:	7dbb      	ldrb	r3, [r7, #22]
 800ea0c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	695a      	ldr	r2, [r3, #20]
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ea16:	7dba      	ldrb	r2, [r7, #22]
 800ea18:	7d7b      	ldrb	r3, [r7, #21]
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d115      	bne.n	800ea4a <dir_find+0x106>
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6a1b      	ldr	r3, [r3, #32]
 800ea22:	330d      	adds	r3, #13
 800ea24:	781b      	ldrb	r3, [r3, #0]
 800ea26:	7d3a      	ldrb	r2, [r7, #20]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d10e      	bne.n	800ea4a <dir_find+0x106>
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	68da      	ldr	r2, [r3, #12]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6a1b      	ldr	r3, [r3, #32]
 800ea34:	4619      	mov	r1, r3
 800ea36:	4610      	mov	r0, r2
 800ea38:	f7ff fcf2 	bl	800e420 <cmp_lfn>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d003      	beq.n	800ea4a <dir_find+0x106>
 800ea42:	7d7b      	ldrb	r3, [r7, #21]
 800ea44:	3b01      	subs	r3, #1
 800ea46:	b2db      	uxtb	r3, r3
 800ea48:	e000      	b.n	800ea4c <dir_find+0x108>
 800ea4a:	23ff      	movs	r3, #255	@ 0xff
 800ea4c:	757b      	strb	r3, [r7, #21]
 800ea4e:	e024      	b.n	800ea9a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ea50:	7d7b      	ldrb	r3, [r7, #21]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d109      	bne.n	800ea6a <dir_find+0x126>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6a1b      	ldr	r3, [r3, #32]
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7ff feaa 	bl	800e7b4 <sum_sfn>
 800ea60:	4603      	mov	r3, r0
 800ea62:	461a      	mov	r2, r3
 800ea64:	7d3b      	ldrb	r3, [r7, #20]
 800ea66:	4293      	cmp	r3, r2
 800ea68:	d024      	beq.n	800eab4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ea70:	f003 0301 	and.w	r3, r3, #1
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d10a      	bne.n	800ea8e <dir_find+0x14a>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6a18      	ldr	r0, [r3, #32]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	3324      	adds	r3, #36	@ 0x24
 800ea80:	220b      	movs	r2, #11
 800ea82:	4619      	mov	r1, r3
 800ea84:	f7fe fd95 	bl	800d5b2 <mem_cmp>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d014      	beq.n	800eab8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ea8e:	23ff      	movs	r3, #255	@ 0xff
 800ea90:	757b      	strb	r3, [r7, #21]
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f04f 32ff 	mov.w	r2, #4294967295
 800ea98:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ea9a:	2100      	movs	r1, #0
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f7ff fb73 	bl	800e188 <dir_next>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800eaa6:	7dfb      	ldrb	r3, [r7, #23]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	f43f af65 	beq.w	800e978 <dir_find+0x34>
 800eaae:	e004      	b.n	800eaba <dir_find+0x176>
		if (res != FR_OK) break;
 800eab0:	bf00      	nop
 800eab2:	e002      	b.n	800eaba <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800eab4:	bf00      	nop
 800eab6:	e000      	b.n	800eaba <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800eab8:	bf00      	nop

	return res;
 800eaba:	7dfb      	ldrb	r3, [r7, #23]
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3718      	adds	r7, #24
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}

0800eac4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b08c      	sub	sp, #48	@ 0x30
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ead8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d001      	beq.n	800eae4 <dir_register+0x20>
 800eae0:	2306      	movs	r3, #6
 800eae2:	e0e0      	b.n	800eca6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800eae4:	2300      	movs	r3, #0
 800eae6:	627b      	str	r3, [r7, #36]	@ 0x24
 800eae8:	e002      	b.n	800eaf0 <dir_register+0x2c>
 800eaea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaec:	3301      	adds	r3, #1
 800eaee:	627b      	str	r3, [r7, #36]	@ 0x24
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	68da      	ldr	r2, [r3, #12]
 800eaf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf6:	005b      	lsls	r3, r3, #1
 800eaf8:	4413      	add	r3, r2
 800eafa:	881b      	ldrh	r3, [r3, #0]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d1f4      	bne.n	800eaea <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800eb06:	f107 030c 	add.w	r3, r7, #12
 800eb0a:	220c      	movs	r2, #12
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f7fe fd14 	bl	800d53a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800eb12:	7dfb      	ldrb	r3, [r7, #23]
 800eb14:	f003 0301 	and.w	r3, r3, #1
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d032      	beq.n	800eb82 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2240      	movs	r2, #64	@ 0x40
 800eb20:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800eb24:	2301      	movs	r3, #1
 800eb26:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eb28:	e016      	b.n	800eb58 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800eb30:	69fb      	ldr	r3, [r7, #28]
 800eb32:	68da      	ldr	r2, [r3, #12]
 800eb34:	f107 010c 	add.w	r1, r7, #12
 800eb38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb3a:	f7ff fdad 	bl	800e698 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f7ff ff00 	bl	800e944 <dir_find>
 800eb44:	4603      	mov	r3, r0
 800eb46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800eb4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d106      	bne.n	800eb60 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800eb52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb54:	3301      	adds	r3, #1
 800eb56:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eb58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb5a:	2b63      	cmp	r3, #99	@ 0x63
 800eb5c:	d9e5      	bls.n	800eb2a <dir_register+0x66>
 800eb5e:	e000      	b.n	800eb62 <dir_register+0x9e>
			if (res != FR_OK) break;
 800eb60:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800eb62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb64:	2b64      	cmp	r3, #100	@ 0x64
 800eb66:	d101      	bne.n	800eb6c <dir_register+0xa8>
 800eb68:	2307      	movs	r3, #7
 800eb6a:	e09c      	b.n	800eca6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800eb6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eb70:	2b04      	cmp	r3, #4
 800eb72:	d002      	beq.n	800eb7a <dir_register+0xb6>
 800eb74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eb78:	e095      	b.n	800eca6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800eb7a:	7dfa      	ldrb	r2, [r7, #23]
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800eb82:	7dfb      	ldrb	r3, [r7, #23]
 800eb84:	f003 0302 	and.w	r3, r3, #2
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d007      	beq.n	800eb9c <dir_register+0xd8>
 800eb8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb8e:	330c      	adds	r3, #12
 800eb90:	4a47      	ldr	r2, [pc, #284]	@ (800ecb0 <dir_register+0x1ec>)
 800eb92:	fba2 2303 	umull	r2, r3, r2, r3
 800eb96:	089b      	lsrs	r3, r3, #2
 800eb98:	3301      	adds	r3, #1
 800eb9a:	e000      	b.n	800eb9e <dir_register+0xda>
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800eba0:	6a39      	ldr	r1, [r7, #32]
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f7ff fbb5 	bl	800e312 <dir_alloc>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ebae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d148      	bne.n	800ec48 <dir_register+0x184>
 800ebb6:	6a3b      	ldr	r3, [r7, #32]
 800ebb8:	3b01      	subs	r3, #1
 800ebba:	623b      	str	r3, [r7, #32]
 800ebbc:	6a3b      	ldr	r3, [r7, #32]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d042      	beq.n	800ec48 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	695a      	ldr	r2, [r3, #20]
 800ebc6:	6a3b      	ldr	r3, [r7, #32]
 800ebc8:	015b      	lsls	r3, r3, #5
 800ebca:	1ad3      	subs	r3, r2, r3
 800ebcc:	4619      	mov	r1, r3
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f7ff fa5f 	bl	800e092 <dir_sdi>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800ebda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d132      	bne.n	800ec48 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	3324      	adds	r3, #36	@ 0x24
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7ff fde4 	bl	800e7b4 <sum_sfn>
 800ebec:	4603      	mov	r3, r0
 800ebee:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	69db      	ldr	r3, [r3, #28]
 800ebf4:	4619      	mov	r1, r3
 800ebf6:	69f8      	ldr	r0, [r7, #28]
 800ebf8:	f7fe fece 	bl	800d998 <move_window>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800ec02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d11d      	bne.n	800ec46 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ec0a:	69fb      	ldr	r3, [r7, #28]
 800ec0c:	68d8      	ldr	r0, [r3, #12]
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6a19      	ldr	r1, [r3, #32]
 800ec12:	6a3b      	ldr	r3, [r7, #32]
 800ec14:	b2da      	uxtb	r2, r3
 800ec16:	7efb      	ldrb	r3, [r7, #27]
 800ec18:	f7ff fcd6 	bl	800e5c8 <put_lfn>
				fs->wflag = 1;
 800ec1c:	69fb      	ldr	r3, [r7, #28]
 800ec1e:	2201      	movs	r2, #1
 800ec20:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ec22:	2100      	movs	r1, #0
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f7ff faaf 	bl	800e188 <dir_next>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800ec30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d107      	bne.n	800ec48 <dir_register+0x184>
 800ec38:	6a3b      	ldr	r3, [r7, #32]
 800ec3a:	3b01      	subs	r3, #1
 800ec3c:	623b      	str	r3, [r7, #32]
 800ec3e:	6a3b      	ldr	r3, [r7, #32]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d1d5      	bne.n	800ebf0 <dir_register+0x12c>
 800ec44:	e000      	b.n	800ec48 <dir_register+0x184>
				if (res != FR_OK) break;
 800ec46:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ec48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d128      	bne.n	800eca2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	69db      	ldr	r3, [r3, #28]
 800ec54:	4619      	mov	r1, r3
 800ec56:	69f8      	ldr	r0, [r7, #28]
 800ec58:	f7fe fe9e 	bl	800d998 <move_window>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800ec62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d11b      	bne.n	800eca2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6a1b      	ldr	r3, [r3, #32]
 800ec6e:	2220      	movs	r2, #32
 800ec70:	2100      	movs	r1, #0
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7fe fc82 	bl	800d57c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6a18      	ldr	r0, [r3, #32]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	3324      	adds	r3, #36	@ 0x24
 800ec80:	220b      	movs	r2, #11
 800ec82:	4619      	mov	r1, r3
 800ec84:	f7fe fc59 	bl	800d53a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6a1b      	ldr	r3, [r3, #32]
 800ec92:	330c      	adds	r3, #12
 800ec94:	f002 0218 	and.w	r2, r2, #24
 800ec98:	b2d2      	uxtb	r2, r2
 800ec9a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ec9c:	69fb      	ldr	r3, [r7, #28]
 800ec9e:	2201      	movs	r2, #1
 800eca0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800eca2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3730      	adds	r7, #48	@ 0x30
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	4ec4ec4f 	.word	0x4ec4ec4f

0800ecb4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b088      	sub	sp, #32
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	69db      	ldr	r3, [r3, #28]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	f000 80ca 	beq.w	800ee68 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecdc:	d032      	beq.n	800ed44 <get_fileinfo+0x90>
			i = j = 0;
 800ecde:	2300      	movs	r3, #0
 800ece0:	61bb      	str	r3, [r7, #24]
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ece6:	e01b      	b.n	800ed20 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800ece8:	89fb      	ldrh	r3, [r7, #14]
 800ecea:	2100      	movs	r1, #0
 800ecec:	4618      	mov	r0, r3
 800ecee:	f001 fd2b 	bl	8010748 <ff_convert>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ecf6:	89fb      	ldrh	r3, [r7, #14]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d102      	bne.n	800ed02 <get_fileinfo+0x4e>
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	61fb      	str	r3, [r7, #28]
 800ed00:	e01a      	b.n	800ed38 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ed02:	69fb      	ldr	r3, [r7, #28]
 800ed04:	2bfe      	cmp	r3, #254	@ 0xfe
 800ed06:	d902      	bls.n	800ed0e <get_fileinfo+0x5a>
 800ed08:	2300      	movs	r3, #0
 800ed0a:	61fb      	str	r3, [r7, #28]
 800ed0c:	e014      	b.n	800ed38 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800ed0e:	69fb      	ldr	r3, [r7, #28]
 800ed10:	1c5a      	adds	r2, r3, #1
 800ed12:	61fa      	str	r2, [r7, #28]
 800ed14:	89fa      	ldrh	r2, [r7, #14]
 800ed16:	b2d1      	uxtb	r1, r2
 800ed18:	683a      	ldr	r2, [r7, #0]
 800ed1a:	4413      	add	r3, r2
 800ed1c:	460a      	mov	r2, r1
 800ed1e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	68da      	ldr	r2, [r3, #12]
 800ed24:	69bb      	ldr	r3, [r7, #24]
 800ed26:	1c59      	adds	r1, r3, #1
 800ed28:	61b9      	str	r1, [r7, #24]
 800ed2a:	005b      	lsls	r3, r3, #1
 800ed2c:	4413      	add	r3, r2
 800ed2e:	881b      	ldrh	r3, [r3, #0]
 800ed30:	81fb      	strh	r3, [r7, #14]
 800ed32:	89fb      	ldrh	r3, [r7, #14]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d1d7      	bne.n	800ece8 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800ed38:	683a      	ldr	r2, [r7, #0]
 800ed3a:	69fb      	ldr	r3, [r7, #28]
 800ed3c:	4413      	add	r3, r2
 800ed3e:	3316      	adds	r3, #22
 800ed40:	2200      	movs	r2, #0
 800ed42:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800ed44:	2300      	movs	r3, #0
 800ed46:	61bb      	str	r3, [r7, #24]
 800ed48:	69bb      	ldr	r3, [r7, #24]
 800ed4a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800ed4c:	683a      	ldr	r2, [r7, #0]
 800ed4e:	69fb      	ldr	r3, [r7, #28]
 800ed50:	4413      	add	r3, r2
 800ed52:	3316      	adds	r3, #22
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800ed58:	e04d      	b.n	800edf6 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6a1a      	ldr	r2, [r3, #32]
 800ed5e:	69fb      	ldr	r3, [r7, #28]
 800ed60:	1c59      	adds	r1, r3, #1
 800ed62:	61f9      	str	r1, [r7, #28]
 800ed64:	4413      	add	r3, r2
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ed6a:	7dfb      	ldrb	r3, [r7, #23]
 800ed6c:	2b20      	cmp	r3, #32
 800ed6e:	d041      	beq.n	800edf4 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ed70:	7dfb      	ldrb	r3, [r7, #23]
 800ed72:	2b05      	cmp	r3, #5
 800ed74:	d101      	bne.n	800ed7a <get_fileinfo+0xc6>
 800ed76:	23e5      	movs	r3, #229	@ 0xe5
 800ed78:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800ed7a:	69fb      	ldr	r3, [r7, #28]
 800ed7c:	2b09      	cmp	r3, #9
 800ed7e:	d10f      	bne.n	800eda0 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800ed80:	89bb      	ldrh	r3, [r7, #12]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d105      	bne.n	800ed92 <get_fileinfo+0xde>
 800ed86:	683a      	ldr	r2, [r7, #0]
 800ed88:	69bb      	ldr	r3, [r7, #24]
 800ed8a:	4413      	add	r3, r2
 800ed8c:	3316      	adds	r3, #22
 800ed8e:	222e      	movs	r2, #46	@ 0x2e
 800ed90:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800ed92:	69bb      	ldr	r3, [r7, #24]
 800ed94:	1c5a      	adds	r2, r3, #1
 800ed96:	61ba      	str	r2, [r7, #24]
 800ed98:	683a      	ldr	r2, [r7, #0]
 800ed9a:	4413      	add	r3, r2
 800ed9c:	222e      	movs	r2, #46	@ 0x2e
 800ed9e:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800eda0:	683a      	ldr	r2, [r7, #0]
 800eda2:	69bb      	ldr	r3, [r7, #24]
 800eda4:	4413      	add	r3, r2
 800eda6:	3309      	adds	r3, #9
 800eda8:	7dfa      	ldrb	r2, [r7, #23]
 800edaa:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800edac:	89bb      	ldrh	r3, [r7, #12]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d11c      	bne.n	800edec <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800edb2:	7dfb      	ldrb	r3, [r7, #23]
 800edb4:	2b40      	cmp	r3, #64	@ 0x40
 800edb6:	d913      	bls.n	800ede0 <get_fileinfo+0x12c>
 800edb8:	7dfb      	ldrb	r3, [r7, #23]
 800edba:	2b5a      	cmp	r3, #90	@ 0x5a
 800edbc:	d810      	bhi.n	800ede0 <get_fileinfo+0x12c>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6a1b      	ldr	r3, [r3, #32]
 800edc2:	330c      	adds	r3, #12
 800edc4:	781b      	ldrb	r3, [r3, #0]
 800edc6:	461a      	mov	r2, r3
 800edc8:	69fb      	ldr	r3, [r7, #28]
 800edca:	2b08      	cmp	r3, #8
 800edcc:	d901      	bls.n	800edd2 <get_fileinfo+0x11e>
 800edce:	2310      	movs	r3, #16
 800edd0:	e000      	b.n	800edd4 <get_fileinfo+0x120>
 800edd2:	2308      	movs	r3, #8
 800edd4:	4013      	ands	r3, r2
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d002      	beq.n	800ede0 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800edda:	7dfb      	ldrb	r3, [r7, #23]
 800eddc:	3320      	adds	r3, #32
 800edde:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800ede0:	683a      	ldr	r2, [r7, #0]
 800ede2:	69bb      	ldr	r3, [r7, #24]
 800ede4:	4413      	add	r3, r2
 800ede6:	3316      	adds	r3, #22
 800ede8:	7dfa      	ldrb	r2, [r7, #23]
 800edea:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800edec:	69bb      	ldr	r3, [r7, #24]
 800edee:	3301      	adds	r3, #1
 800edf0:	61bb      	str	r3, [r7, #24]
 800edf2:	e000      	b.n	800edf6 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 800edf4:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800edf6:	69fb      	ldr	r3, [r7, #28]
 800edf8:	2b0a      	cmp	r3, #10
 800edfa:	d9ae      	bls.n	800ed5a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800edfc:	89bb      	ldrh	r3, [r7, #12]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d10d      	bne.n	800ee1e <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800ee02:	683a      	ldr	r2, [r7, #0]
 800ee04:	69bb      	ldr	r3, [r7, #24]
 800ee06:	4413      	add	r3, r2
 800ee08:	3316      	adds	r3, #22
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6a1b      	ldr	r3, [r3, #32]
 800ee12:	330c      	adds	r3, #12
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d101      	bne.n	800ee1e <get_fileinfo+0x16a>
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800ee1e:	683a      	ldr	r2, [r7, #0]
 800ee20:	69bb      	ldr	r3, [r7, #24]
 800ee22:	4413      	add	r3, r2
 800ee24:	3309      	adds	r3, #9
 800ee26:	2200      	movs	r2, #0
 800ee28:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6a1b      	ldr	r3, [r3, #32]
 800ee2e:	7ada      	ldrb	r2, [r3, #11]
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6a1b      	ldr	r3, [r3, #32]
 800ee38:	331c      	adds	r3, #28
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7fe fb13 	bl	800d466 <ld_dword>
 800ee40:	4602      	mov	r2, r0
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6a1b      	ldr	r3, [r3, #32]
 800ee4a:	3316      	adds	r3, #22
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f7fe fb0a 	bl	800d466 <ld_dword>
 800ee52:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	b29a      	uxth	r2, r3
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	80da      	strh	r2, [r3, #6]
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	0c1b      	lsrs	r3, r3, #16
 800ee60:	b29a      	uxth	r2, r3
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	809a      	strh	r2, [r3, #4]
 800ee66:	e000      	b.n	800ee6a <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ee68:	bf00      	nop
}
 800ee6a:	3720      	adds	r7, #32
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}

0800ee70 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b08a      	sub	sp, #40	@ 0x28
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
 800ee78:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	613b      	str	r3, [r7, #16]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	68db      	ldr	r3, [r3, #12]
 800ee86:	60fb      	str	r3, [r7, #12]
 800ee88:	2300      	movs	r3, #0
 800ee8a:	617b      	str	r3, [r7, #20]
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ee90:	69bb      	ldr	r3, [r7, #24]
 800ee92:	1c5a      	adds	r2, r3, #1
 800ee94:	61ba      	str	r2, [r7, #24]
 800ee96:	693a      	ldr	r2, [r7, #16]
 800ee98:	4413      	add	r3, r2
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ee9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eea0:	2b1f      	cmp	r3, #31
 800eea2:	d940      	bls.n	800ef26 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800eea4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eea6:	2b2f      	cmp	r3, #47	@ 0x2f
 800eea8:	d006      	beq.n	800eeb8 <create_name+0x48>
 800eeaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eeac:	2b5c      	cmp	r3, #92	@ 0x5c
 800eeae:	d110      	bne.n	800eed2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800eeb0:	e002      	b.n	800eeb8 <create_name+0x48>
 800eeb2:	69bb      	ldr	r3, [r7, #24]
 800eeb4:	3301      	adds	r3, #1
 800eeb6:	61bb      	str	r3, [r7, #24]
 800eeb8:	693a      	ldr	r2, [r7, #16]
 800eeba:	69bb      	ldr	r3, [r7, #24]
 800eebc:	4413      	add	r3, r2
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	2b2f      	cmp	r3, #47	@ 0x2f
 800eec2:	d0f6      	beq.n	800eeb2 <create_name+0x42>
 800eec4:	693a      	ldr	r2, [r7, #16]
 800eec6:	69bb      	ldr	r3, [r7, #24]
 800eec8:	4413      	add	r3, r2
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	2b5c      	cmp	r3, #92	@ 0x5c
 800eece:	d0f0      	beq.n	800eeb2 <create_name+0x42>
			break;
 800eed0:	e02a      	b.n	800ef28 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	2bfe      	cmp	r3, #254	@ 0xfe
 800eed6:	d901      	bls.n	800eedc <create_name+0x6c>
 800eed8:	2306      	movs	r3, #6
 800eeda:	e17d      	b.n	800f1d8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800eedc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eede:	b2db      	uxtb	r3, r3
 800eee0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800eee2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eee4:	2101      	movs	r1, #1
 800eee6:	4618      	mov	r0, r3
 800eee8:	f001 fc2e 	bl	8010748 <ff_convert>
 800eeec:	4603      	mov	r3, r0
 800eeee:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800eef0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d101      	bne.n	800eefa <create_name+0x8a>
 800eef6:	2306      	movs	r3, #6
 800eef8:	e16e      	b.n	800f1d8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800eefa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eefc:	2b7f      	cmp	r3, #127	@ 0x7f
 800eefe:	d809      	bhi.n	800ef14 <create_name+0xa4>
 800ef00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef02:	4619      	mov	r1, r3
 800ef04:	488d      	ldr	r0, [pc, #564]	@ (800f13c <create_name+0x2cc>)
 800ef06:	f7fe fb7b 	bl	800d600 <chk_chr>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <create_name+0xa4>
 800ef10:	2306      	movs	r3, #6
 800ef12:	e161      	b.n	800f1d8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	1c5a      	adds	r2, r3, #1
 800ef18:	617a      	str	r2, [r7, #20]
 800ef1a:	005b      	lsls	r3, r3, #1
 800ef1c:	68fa      	ldr	r2, [r7, #12]
 800ef1e:	4413      	add	r3, r2
 800ef20:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ef22:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ef24:	e7b4      	b.n	800ee90 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ef26:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ef28:	693a      	ldr	r2, [r7, #16]
 800ef2a:	69bb      	ldr	r3, [r7, #24]
 800ef2c:	441a      	add	r2, r3
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ef32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef34:	2b1f      	cmp	r3, #31
 800ef36:	d801      	bhi.n	800ef3c <create_name+0xcc>
 800ef38:	2304      	movs	r3, #4
 800ef3a:	e000      	b.n	800ef3e <create_name+0xce>
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ef42:	e011      	b.n	800ef68 <create_name+0xf8>
		w = lfn[di - 1];
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ef4a:	3b01      	subs	r3, #1
 800ef4c:	005b      	lsls	r3, r3, #1
 800ef4e:	68fa      	ldr	r2, [r7, #12]
 800ef50:	4413      	add	r3, r2
 800ef52:	881b      	ldrh	r3, [r3, #0]
 800ef54:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800ef56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef58:	2b20      	cmp	r3, #32
 800ef5a:	d002      	beq.n	800ef62 <create_name+0xf2>
 800ef5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef5e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef60:	d106      	bne.n	800ef70 <create_name+0x100>
		di--;
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	3b01      	subs	r3, #1
 800ef66:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d1ea      	bne.n	800ef44 <create_name+0xd4>
 800ef6e:	e000      	b.n	800ef72 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ef70:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	005b      	lsls	r3, r3, #1
 800ef76:	68fa      	ldr	r2, [r7, #12]
 800ef78:	4413      	add	r3, r2
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d101      	bne.n	800ef88 <create_name+0x118>
 800ef84:	2306      	movs	r3, #6
 800ef86:	e127      	b.n	800f1d8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	3324      	adds	r3, #36	@ 0x24
 800ef8c:	220b      	movs	r2, #11
 800ef8e:	2120      	movs	r1, #32
 800ef90:	4618      	mov	r0, r3
 800ef92:	f7fe faf3 	bl	800d57c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ef96:	2300      	movs	r3, #0
 800ef98:	61bb      	str	r3, [r7, #24]
 800ef9a:	e002      	b.n	800efa2 <create_name+0x132>
 800ef9c:	69bb      	ldr	r3, [r7, #24]
 800ef9e:	3301      	adds	r3, #1
 800efa0:	61bb      	str	r3, [r7, #24]
 800efa2:	69bb      	ldr	r3, [r7, #24]
 800efa4:	005b      	lsls	r3, r3, #1
 800efa6:	68fa      	ldr	r2, [r7, #12]
 800efa8:	4413      	add	r3, r2
 800efaa:	881b      	ldrh	r3, [r3, #0]
 800efac:	2b20      	cmp	r3, #32
 800efae:	d0f5      	beq.n	800ef9c <create_name+0x12c>
 800efb0:	69bb      	ldr	r3, [r7, #24]
 800efb2:	005b      	lsls	r3, r3, #1
 800efb4:	68fa      	ldr	r2, [r7, #12]
 800efb6:	4413      	add	r3, r2
 800efb8:	881b      	ldrh	r3, [r3, #0]
 800efba:	2b2e      	cmp	r3, #46	@ 0x2e
 800efbc:	d0ee      	beq.n	800ef9c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800efbe:	69bb      	ldr	r3, [r7, #24]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d009      	beq.n	800efd8 <create_name+0x168>
 800efc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800efc8:	f043 0303 	orr.w	r3, r3, #3
 800efcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800efd0:	e002      	b.n	800efd8 <create_name+0x168>
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	3b01      	subs	r3, #1
 800efd6:	617b      	str	r3, [r7, #20]
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d009      	beq.n	800eff2 <create_name+0x182>
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800efe4:	3b01      	subs	r3, #1
 800efe6:	005b      	lsls	r3, r3, #1
 800efe8:	68fa      	ldr	r2, [r7, #12]
 800efea:	4413      	add	r3, r2
 800efec:	881b      	ldrh	r3, [r3, #0]
 800efee:	2b2e      	cmp	r3, #46	@ 0x2e
 800eff0:	d1ef      	bne.n	800efd2 <create_name+0x162>

	i = b = 0; ni = 8;
 800eff2:	2300      	movs	r3, #0
 800eff4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800eff8:	2300      	movs	r3, #0
 800effa:	623b      	str	r3, [r7, #32]
 800effc:	2308      	movs	r3, #8
 800effe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f000:	69bb      	ldr	r3, [r7, #24]
 800f002:	1c5a      	adds	r2, r3, #1
 800f004:	61ba      	str	r2, [r7, #24]
 800f006:	005b      	lsls	r3, r3, #1
 800f008:	68fa      	ldr	r2, [r7, #12]
 800f00a:	4413      	add	r3, r2
 800f00c:	881b      	ldrh	r3, [r3, #0]
 800f00e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f010:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f012:	2b00      	cmp	r3, #0
 800f014:	f000 8090 	beq.w	800f138 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f018:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f01a:	2b20      	cmp	r3, #32
 800f01c:	d006      	beq.n	800f02c <create_name+0x1bc>
 800f01e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f020:	2b2e      	cmp	r3, #46	@ 0x2e
 800f022:	d10a      	bne.n	800f03a <create_name+0x1ca>
 800f024:	69ba      	ldr	r2, [r7, #24]
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	429a      	cmp	r2, r3
 800f02a:	d006      	beq.n	800f03a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f02c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f030:	f043 0303 	orr.w	r3, r3, #3
 800f034:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f038:	e07d      	b.n	800f136 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f03a:	6a3a      	ldr	r2, [r7, #32]
 800f03c:	69fb      	ldr	r3, [r7, #28]
 800f03e:	429a      	cmp	r2, r3
 800f040:	d203      	bcs.n	800f04a <create_name+0x1da>
 800f042:	69ba      	ldr	r2, [r7, #24]
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	429a      	cmp	r2, r3
 800f048:	d123      	bne.n	800f092 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f04a:	69fb      	ldr	r3, [r7, #28]
 800f04c:	2b0b      	cmp	r3, #11
 800f04e:	d106      	bne.n	800f05e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f050:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f054:	f043 0303 	orr.w	r3, r3, #3
 800f058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f05c:	e075      	b.n	800f14a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f05e:	69ba      	ldr	r2, [r7, #24]
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	429a      	cmp	r2, r3
 800f064:	d005      	beq.n	800f072 <create_name+0x202>
 800f066:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f06a:	f043 0303 	orr.w	r3, r3, #3
 800f06e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800f072:	69ba      	ldr	r2, [r7, #24]
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	429a      	cmp	r2, r3
 800f078:	d866      	bhi.n	800f148 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	61bb      	str	r3, [r7, #24]
 800f07e:	2308      	movs	r3, #8
 800f080:	623b      	str	r3, [r7, #32]
 800f082:	230b      	movs	r3, #11
 800f084:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f086:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f08a:	009b      	lsls	r3, r3, #2
 800f08c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f090:	e051      	b.n	800f136 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f092:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f094:	2b7f      	cmp	r3, #127	@ 0x7f
 800f096:	d914      	bls.n	800f0c2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f098:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f09a:	2100      	movs	r1, #0
 800f09c:	4618      	mov	r0, r3
 800f09e:	f001 fb53 	bl	8010748 <ff_convert>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f0a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d004      	beq.n	800f0b6 <create_name+0x246>
 800f0ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f0ae:	3b80      	subs	r3, #128	@ 0x80
 800f0b0:	4a23      	ldr	r2, [pc, #140]	@ (800f140 <create_name+0x2d0>)
 800f0b2:	5cd3      	ldrb	r3, [r2, r3]
 800f0b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f0b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f0ba:	f043 0302 	orr.w	r3, r3, #2
 800f0be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f0c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d007      	beq.n	800f0d8 <create_name+0x268>
 800f0c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f0ca:	4619      	mov	r1, r3
 800f0cc:	481d      	ldr	r0, [pc, #116]	@ (800f144 <create_name+0x2d4>)
 800f0ce:	f7fe fa97 	bl	800d600 <chk_chr>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d008      	beq.n	800f0ea <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f0d8:	235f      	movs	r3, #95	@ 0x5f
 800f0da:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800f0dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f0e0:	f043 0303 	orr.w	r3, r3, #3
 800f0e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f0e8:	e01b      	b.n	800f122 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f0ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f0ec:	2b40      	cmp	r3, #64	@ 0x40
 800f0ee:	d909      	bls.n	800f104 <create_name+0x294>
 800f0f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f0f2:	2b5a      	cmp	r3, #90	@ 0x5a
 800f0f4:	d806      	bhi.n	800f104 <create_name+0x294>
					b |= 2;
 800f0f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f0fa:	f043 0302 	orr.w	r3, r3, #2
 800f0fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f102:	e00e      	b.n	800f122 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f104:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f106:	2b60      	cmp	r3, #96	@ 0x60
 800f108:	d90b      	bls.n	800f122 <create_name+0x2b2>
 800f10a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f10c:	2b7a      	cmp	r3, #122	@ 0x7a
 800f10e:	d808      	bhi.n	800f122 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f110:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f114:	f043 0301 	orr.w	r3, r3, #1
 800f118:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f11c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f11e:	3b20      	subs	r3, #32
 800f120:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f122:	6a3b      	ldr	r3, [r7, #32]
 800f124:	1c5a      	adds	r2, r3, #1
 800f126:	623a      	str	r2, [r7, #32]
 800f128:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f12a:	b2d1      	uxtb	r1, r2
 800f12c:	687a      	ldr	r2, [r7, #4]
 800f12e:	4413      	add	r3, r2
 800f130:	460a      	mov	r2, r1
 800f132:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f136:	e763      	b.n	800f000 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f138:	bf00      	nop
 800f13a:	e006      	b.n	800f14a <create_name+0x2da>
 800f13c:	08011384 	.word	0x08011384
 800f140:	08012928 	.word	0x08012928
 800f144:	08011390 	.word	0x08011390
			if (si > di) break;			/* No extension */
 800f148:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f150:	2be5      	cmp	r3, #229	@ 0xe5
 800f152:	d103      	bne.n	800f15c <create_name+0x2ec>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2205      	movs	r2, #5
 800f158:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	2b08      	cmp	r3, #8
 800f160:	d104      	bne.n	800f16c <create_name+0x2fc>
 800f162:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f166:	009b      	lsls	r3, r3, #2
 800f168:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f16c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f170:	f003 030c 	and.w	r3, r3, #12
 800f174:	2b0c      	cmp	r3, #12
 800f176:	d005      	beq.n	800f184 <create_name+0x314>
 800f178:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f17c:	f003 0303 	and.w	r3, r3, #3
 800f180:	2b03      	cmp	r3, #3
 800f182:	d105      	bne.n	800f190 <create_name+0x320>
 800f184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f188:	f043 0302 	orr.w	r3, r3, #2
 800f18c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f190:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f194:	f003 0302 	and.w	r3, r3, #2
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d117      	bne.n	800f1cc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f19c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f1a0:	f003 0303 	and.w	r3, r3, #3
 800f1a4:	2b01      	cmp	r3, #1
 800f1a6:	d105      	bne.n	800f1b4 <create_name+0x344>
 800f1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1ac:	f043 0310 	orr.w	r3, r3, #16
 800f1b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f1b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f1b8:	f003 030c 	and.w	r3, r3, #12
 800f1bc:	2b04      	cmp	r3, #4
 800f1be:	d105      	bne.n	800f1cc <create_name+0x35c>
 800f1c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1c4:	f043 0308 	orr.w	r3, r3, #8
 800f1c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800f1d2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800f1d6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3728      	adds	r7, #40	@ 0x28
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}

0800f1e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b086      	sub	sp, #24
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f1f4:	e002      	b.n	800f1fc <follow_path+0x1c>
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	3301      	adds	r3, #1
 800f1fa:	603b      	str	r3, [r7, #0]
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	781b      	ldrb	r3, [r3, #0]
 800f200:	2b2f      	cmp	r3, #47	@ 0x2f
 800f202:	d0f8      	beq.n	800f1f6 <follow_path+0x16>
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	2b5c      	cmp	r3, #92	@ 0x5c
 800f20a:	d0f4      	beq.n	800f1f6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f20c:	693b      	ldr	r3, [r7, #16]
 800f20e:	2200      	movs	r2, #0
 800f210:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	781b      	ldrb	r3, [r3, #0]
 800f216:	2b1f      	cmp	r3, #31
 800f218:	d80a      	bhi.n	800f230 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2280      	movs	r2, #128	@ 0x80
 800f21e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800f222:	2100      	movs	r1, #0
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f7fe ff34 	bl	800e092 <dir_sdi>
 800f22a:	4603      	mov	r3, r0
 800f22c:	75fb      	strb	r3, [r7, #23]
 800f22e:	e043      	b.n	800f2b8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f230:	463b      	mov	r3, r7
 800f232:	4619      	mov	r1, r3
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f7ff fe1b 	bl	800ee70 <create_name>
 800f23a:	4603      	mov	r3, r0
 800f23c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f23e:	7dfb      	ldrb	r3, [r7, #23]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d134      	bne.n	800f2ae <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f7ff fb7d 	bl	800e944 <dir_find>
 800f24a:	4603      	mov	r3, r0
 800f24c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f254:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f256:	7dfb      	ldrb	r3, [r7, #23]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d00a      	beq.n	800f272 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f25c:	7dfb      	ldrb	r3, [r7, #23]
 800f25e:	2b04      	cmp	r3, #4
 800f260:	d127      	bne.n	800f2b2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f262:	7afb      	ldrb	r3, [r7, #11]
 800f264:	f003 0304 	and.w	r3, r3, #4
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d122      	bne.n	800f2b2 <follow_path+0xd2>
 800f26c:	2305      	movs	r3, #5
 800f26e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f270:	e01f      	b.n	800f2b2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f272:	7afb      	ldrb	r3, [r7, #11]
 800f274:	f003 0304 	and.w	r3, r3, #4
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d11c      	bne.n	800f2b6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f27c:	693b      	ldr	r3, [r7, #16]
 800f27e:	799b      	ldrb	r3, [r3, #6]
 800f280:	f003 0310 	and.w	r3, r3, #16
 800f284:	2b00      	cmp	r3, #0
 800f286:	d102      	bne.n	800f28e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f288:	2305      	movs	r3, #5
 800f28a:	75fb      	strb	r3, [r7, #23]
 800f28c:	e014      	b.n	800f2b8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	695b      	ldr	r3, [r3, #20]
 800f298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f29c:	4413      	add	r3, r2
 800f29e:	4619      	mov	r1, r3
 800f2a0:	68f8      	ldr	r0, [r7, #12]
 800f2a2:	f7ff f87d 	bl	800e3a0 <ld_clust>
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f2ac:	e7c0      	b.n	800f230 <follow_path+0x50>
			if (res != FR_OK) break;
 800f2ae:	bf00      	nop
 800f2b0:	e002      	b.n	800f2b8 <follow_path+0xd8>
				break;
 800f2b2:	bf00      	nop
 800f2b4:	e000      	b.n	800f2b8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f2b6:	bf00      	nop
			}
		}
	}

	return res;
 800f2b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3718      	adds	r7, #24
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}

0800f2c2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f2c2:	b480      	push	{r7}
 800f2c4:	b087      	sub	sp, #28
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f2ca:	f04f 33ff 	mov.w	r3, #4294967295
 800f2ce:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d031      	beq.n	800f33c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	617b      	str	r3, [r7, #20]
 800f2de:	e002      	b.n	800f2e6 <get_ldnumber+0x24>
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	617b      	str	r3, [r7, #20]
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	2b1f      	cmp	r3, #31
 800f2ec:	d903      	bls.n	800f2f6 <get_ldnumber+0x34>
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	2b3a      	cmp	r3, #58	@ 0x3a
 800f2f4:	d1f4      	bne.n	800f2e0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	2b3a      	cmp	r3, #58	@ 0x3a
 800f2fc:	d11c      	bne.n	800f338 <get_ldnumber+0x76>
			tp = *path;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	1c5a      	adds	r2, r3, #1
 800f308:	60fa      	str	r2, [r7, #12]
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	3b30      	subs	r3, #48	@ 0x30
 800f30e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	2b09      	cmp	r3, #9
 800f314:	d80e      	bhi.n	800f334 <get_ldnumber+0x72>
 800f316:	68fa      	ldr	r2, [r7, #12]
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	429a      	cmp	r2, r3
 800f31c:	d10a      	bne.n	800f334 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d107      	bne.n	800f334 <get_ldnumber+0x72>
					vol = (int)i;
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	3301      	adds	r3, #1
 800f32c:	617b      	str	r3, [r7, #20]
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	697a      	ldr	r2, [r7, #20]
 800f332:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	e002      	b.n	800f33e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f338:	2300      	movs	r3, #0
 800f33a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f33c:	693b      	ldr	r3, [r7, #16]
}
 800f33e:	4618      	mov	r0, r3
 800f340:	371c      	adds	r7, #28
 800f342:	46bd      	mov	sp, r7
 800f344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f348:	4770      	bx	lr
	...

0800f34c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2200      	movs	r2, #0
 800f35a:	70da      	strb	r2, [r3, #3]
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f04f 32ff 	mov.w	r2, #4294967295
 800f362:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f364:	6839      	ldr	r1, [r7, #0]
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f7fe fb16 	bl	800d998 <move_window>
 800f36c:	4603      	mov	r3, r0
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d001      	beq.n	800f376 <check_fs+0x2a>
 800f372:	2304      	movs	r3, #4
 800f374:	e038      	b.n	800f3e8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	3334      	adds	r3, #52	@ 0x34
 800f37a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f37e:	4618      	mov	r0, r3
 800f380:	f7fe f858 	bl	800d434 <ld_word>
 800f384:	4603      	mov	r3, r0
 800f386:	461a      	mov	r2, r3
 800f388:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d001      	beq.n	800f394 <check_fs+0x48>
 800f390:	2303      	movs	r3, #3
 800f392:	e029      	b.n	800f3e8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f39a:	2be9      	cmp	r3, #233	@ 0xe9
 800f39c:	d009      	beq.n	800f3b2 <check_fs+0x66>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f3a4:	2beb      	cmp	r3, #235	@ 0xeb
 800f3a6:	d11e      	bne.n	800f3e6 <check_fs+0x9a>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800f3ae:	2b90      	cmp	r3, #144	@ 0x90
 800f3b0:	d119      	bne.n	800f3e6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	3334      	adds	r3, #52	@ 0x34
 800f3b6:	3336      	adds	r3, #54	@ 0x36
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7fe f854 	bl	800d466 <ld_dword>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f3c4:	4a0a      	ldr	r2, [pc, #40]	@ (800f3f0 <check_fs+0xa4>)
 800f3c6:	4293      	cmp	r3, r2
 800f3c8:	d101      	bne.n	800f3ce <check_fs+0x82>
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	e00c      	b.n	800f3e8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	3334      	adds	r3, #52	@ 0x34
 800f3d2:	3352      	adds	r3, #82	@ 0x52
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f7fe f846 	bl	800d466 <ld_dword>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	4a05      	ldr	r2, [pc, #20]	@ (800f3f4 <check_fs+0xa8>)
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	d101      	bne.n	800f3e6 <check_fs+0x9a>
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	e000      	b.n	800f3e8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f3e6:	2302      	movs	r3, #2
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3708      	adds	r7, #8
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}
 800f3f0:	00544146 	.word	0x00544146
 800f3f4:	33544146 	.word	0x33544146

0800f3f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b096      	sub	sp, #88	@ 0x58
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	60f8      	str	r0, [r7, #12]
 800f400:	60b9      	str	r1, [r7, #8]
 800f402:	4613      	mov	r3, r2
 800f404:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	2200      	movs	r2, #0
 800f40a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f40c:	68f8      	ldr	r0, [r7, #12]
 800f40e:	f7ff ff58 	bl	800f2c2 <get_ldnumber>
 800f412:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f416:	2b00      	cmp	r3, #0
 800f418:	da01      	bge.n	800f41e <find_volume+0x26>
 800f41a:	230b      	movs	r3, #11
 800f41c:	e230      	b.n	800f880 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f41e:	4aa1      	ldr	r2, [pc, #644]	@ (800f6a4 <find_volume+0x2ac>)
 800f420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f426:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d101      	bne.n	800f432 <find_volume+0x3a>
 800f42e:	230c      	movs	r3, #12
 800f430:	e226      	b.n	800f880 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f436:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f438:	79fb      	ldrb	r3, [r7, #7]
 800f43a:	f023 0301 	bic.w	r3, r3, #1
 800f43e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f442:	781b      	ldrb	r3, [r3, #0]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d01a      	beq.n	800f47e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f44a:	785b      	ldrb	r3, [r3, #1]
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7fd ff53 	bl	800d2f8 <disk_status>
 800f452:	4603      	mov	r3, r0
 800f454:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f458:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f45c:	f003 0301 	and.w	r3, r3, #1
 800f460:	2b00      	cmp	r3, #0
 800f462:	d10c      	bne.n	800f47e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f464:	79fb      	ldrb	r3, [r7, #7]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d007      	beq.n	800f47a <find_volume+0x82>
 800f46a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f46e:	f003 0304 	and.w	r3, r3, #4
 800f472:	2b00      	cmp	r3, #0
 800f474:	d001      	beq.n	800f47a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f476:	230a      	movs	r3, #10
 800f478:	e202      	b.n	800f880 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800f47a:	2300      	movs	r3, #0
 800f47c:	e200      	b.n	800f880 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f47e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f480:	2200      	movs	r2, #0
 800f482:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f486:	b2da      	uxtb	r2, r3
 800f488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f48a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f48e:	785b      	ldrb	r3, [r3, #1]
 800f490:	4618      	mov	r0, r3
 800f492:	f7fd ff4b 	bl	800d32c <disk_initialize>
 800f496:	4603      	mov	r3, r0
 800f498:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f49c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f4a0:	f003 0301 	and.w	r3, r3, #1
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d001      	beq.n	800f4ac <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f4a8:	2303      	movs	r3, #3
 800f4aa:	e1e9      	b.n	800f880 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f4ac:	79fb      	ldrb	r3, [r7, #7]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d007      	beq.n	800f4c2 <find_volume+0xca>
 800f4b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f4b6:	f003 0304 	and.w	r3, r3, #4
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d001      	beq.n	800f4c2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f4be:	230a      	movs	r3, #10
 800f4c0:	e1de      	b.n	800f880 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f4c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f4c8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f4ca:	f7ff ff3f 	bl	800f34c <check_fs>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f4d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f4d8:	2b02      	cmp	r3, #2
 800f4da:	d149      	bne.n	800f570 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f4dc:	2300      	movs	r3, #0
 800f4de:	643b      	str	r3, [r7, #64]	@ 0x40
 800f4e0:	e01e      	b.n	800f520 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4e4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f4e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4ea:	011b      	lsls	r3, r3, #4
 800f4ec:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f4f0:	4413      	add	r3, r2
 800f4f2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4f6:	3304      	adds	r3, #4
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d006      	beq.n	800f50c <find_volume+0x114>
 800f4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f500:	3308      	adds	r3, #8
 800f502:	4618      	mov	r0, r3
 800f504:	f7fd ffaf 	bl	800d466 <ld_dword>
 800f508:	4602      	mov	r2, r0
 800f50a:	e000      	b.n	800f50e <find_volume+0x116>
 800f50c:	2200      	movs	r2, #0
 800f50e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f510:	009b      	lsls	r3, r3, #2
 800f512:	3358      	adds	r3, #88	@ 0x58
 800f514:	443b      	add	r3, r7
 800f516:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f51a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f51c:	3301      	adds	r3, #1
 800f51e:	643b      	str	r3, [r7, #64]	@ 0x40
 800f520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f522:	2b03      	cmp	r3, #3
 800f524:	d9dd      	bls.n	800f4e2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f526:	2300      	movs	r3, #0
 800f528:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800f52a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d002      	beq.n	800f536 <find_volume+0x13e>
 800f530:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f532:	3b01      	subs	r3, #1
 800f534:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f538:	009b      	lsls	r3, r3, #2
 800f53a:	3358      	adds	r3, #88	@ 0x58
 800f53c:	443b      	add	r3, r7
 800f53e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f542:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f546:	2b00      	cmp	r3, #0
 800f548:	d005      	beq.n	800f556 <find_volume+0x15e>
 800f54a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f54c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f54e:	f7ff fefd 	bl	800f34c <check_fs>
 800f552:	4603      	mov	r3, r0
 800f554:	e000      	b.n	800f558 <find_volume+0x160>
 800f556:	2303      	movs	r3, #3
 800f558:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f55c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f560:	2b01      	cmp	r3, #1
 800f562:	d905      	bls.n	800f570 <find_volume+0x178>
 800f564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f566:	3301      	adds	r3, #1
 800f568:	643b      	str	r3, [r7, #64]	@ 0x40
 800f56a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f56c:	2b03      	cmp	r3, #3
 800f56e:	d9e2      	bls.n	800f536 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f570:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f574:	2b04      	cmp	r3, #4
 800f576:	d101      	bne.n	800f57c <find_volume+0x184>
 800f578:	2301      	movs	r3, #1
 800f57a:	e181      	b.n	800f880 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f57c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f580:	2b01      	cmp	r3, #1
 800f582:	d901      	bls.n	800f588 <find_volume+0x190>
 800f584:	230d      	movs	r3, #13
 800f586:	e17b      	b.n	800f880 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f58a:	3334      	adds	r3, #52	@ 0x34
 800f58c:	330b      	adds	r3, #11
 800f58e:	4618      	mov	r0, r3
 800f590:	f7fd ff50 	bl	800d434 <ld_word>
 800f594:	4603      	mov	r3, r0
 800f596:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f59a:	d001      	beq.n	800f5a0 <find_volume+0x1a8>
 800f59c:	230d      	movs	r3, #13
 800f59e:	e16f      	b.n	800f880 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5a2:	3334      	adds	r3, #52	@ 0x34
 800f5a4:	3316      	adds	r3, #22
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7fd ff44 	bl	800d434 <ld_word>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f5b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d106      	bne.n	800f5c4 <find_volume+0x1cc>
 800f5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5b8:	3334      	adds	r3, #52	@ 0x34
 800f5ba:	3324      	adds	r3, #36	@ 0x24
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f7fd ff52 	bl	800d466 <ld_dword>
 800f5c2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800f5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f5c8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5cc:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800f5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5d2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5d6:	789b      	ldrb	r3, [r3, #2]
 800f5d8:	2b01      	cmp	r3, #1
 800f5da:	d005      	beq.n	800f5e8 <find_volume+0x1f0>
 800f5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5de:	789b      	ldrb	r3, [r3, #2]
 800f5e0:	2b02      	cmp	r3, #2
 800f5e2:	d001      	beq.n	800f5e8 <find_volume+0x1f0>
 800f5e4:	230d      	movs	r3, #13
 800f5e6:	e14b      	b.n	800f880 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ea:	789b      	ldrb	r3, [r3, #2]
 800f5ec:	461a      	mov	r2, r3
 800f5ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f5f0:	fb02 f303 	mul.w	r3, r2, r3
 800f5f4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f5fc:	461a      	mov	r2, r3
 800f5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f600:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f604:	895b      	ldrh	r3, [r3, #10]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d008      	beq.n	800f61c <find_volume+0x224>
 800f60a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f60c:	895b      	ldrh	r3, [r3, #10]
 800f60e:	461a      	mov	r2, r3
 800f610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f612:	895b      	ldrh	r3, [r3, #10]
 800f614:	3b01      	subs	r3, #1
 800f616:	4013      	ands	r3, r2
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d001      	beq.n	800f620 <find_volume+0x228>
 800f61c:	230d      	movs	r3, #13
 800f61e:	e12f      	b.n	800f880 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f622:	3334      	adds	r3, #52	@ 0x34
 800f624:	3311      	adds	r3, #17
 800f626:	4618      	mov	r0, r3
 800f628:	f7fd ff04 	bl	800d434 <ld_word>
 800f62c:	4603      	mov	r3, r0
 800f62e:	461a      	mov	r2, r3
 800f630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f632:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f636:	891b      	ldrh	r3, [r3, #8]
 800f638:	f003 030f 	and.w	r3, r3, #15
 800f63c:	b29b      	uxth	r3, r3
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d001      	beq.n	800f646 <find_volume+0x24e>
 800f642:	230d      	movs	r3, #13
 800f644:	e11c      	b.n	800f880 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f648:	3334      	adds	r3, #52	@ 0x34
 800f64a:	3313      	adds	r3, #19
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7fd fef1 	bl	800d434 <ld_word>
 800f652:	4603      	mov	r3, r0
 800f654:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d106      	bne.n	800f66a <find_volume+0x272>
 800f65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f65e:	3334      	adds	r3, #52	@ 0x34
 800f660:	3320      	adds	r3, #32
 800f662:	4618      	mov	r0, r3
 800f664:	f7fd feff 	bl	800d466 <ld_dword>
 800f668:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f66c:	3334      	adds	r3, #52	@ 0x34
 800f66e:	330e      	adds	r3, #14
 800f670:	4618      	mov	r0, r3
 800f672:	f7fd fedf 	bl	800d434 <ld_word>
 800f676:	4603      	mov	r3, r0
 800f678:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f67a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d101      	bne.n	800f684 <find_volume+0x28c>
 800f680:	230d      	movs	r3, #13
 800f682:	e0fd      	b.n	800f880 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f684:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f688:	4413      	add	r3, r2
 800f68a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f68c:	8912      	ldrh	r2, [r2, #8]
 800f68e:	0912      	lsrs	r2, r2, #4
 800f690:	b292      	uxth	r2, r2
 800f692:	4413      	add	r3, r2
 800f694:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f696:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d204      	bcs.n	800f6a8 <find_volume+0x2b0>
 800f69e:	230d      	movs	r3, #13
 800f6a0:	e0ee      	b.n	800f880 <find_volume+0x488>
 800f6a2:	bf00      	nop
 800f6a4:	200020b8 	.word	0x200020b8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f6a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ac:	1ad3      	subs	r3, r2, r3
 800f6ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f6b0:	8952      	ldrh	r2, [r2, #10]
 800f6b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6b6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d101      	bne.n	800f6c2 <find_volume+0x2ca>
 800f6be:	230d      	movs	r3, #13
 800f6c0:	e0de      	b.n	800f880 <find_volume+0x488>
		fmt = FS_FAT32;
 800f6c2:	2303      	movs	r3, #3
 800f6c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6ca:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	d802      	bhi.n	800f6d8 <find_volume+0x2e0>
 800f6d2:	2302      	movs	r3, #2
 800f6d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6da:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d802      	bhi.n	800f6e8 <find_volume+0x2f0>
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6ea:	1c9a      	adds	r2, r3, #2
 800f6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ee:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800f6f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f6f4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f6f6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f6f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6fa:	441a      	add	r2, r3
 800f6fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6fe:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f700:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f704:	441a      	add	r2, r3
 800f706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f708:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800f70a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f70e:	2b03      	cmp	r3, #3
 800f710:	d11e      	bne.n	800f750 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f714:	3334      	adds	r3, #52	@ 0x34
 800f716:	332a      	adds	r3, #42	@ 0x2a
 800f718:	4618      	mov	r0, r3
 800f71a:	f7fd fe8b 	bl	800d434 <ld_word>
 800f71e:	4603      	mov	r3, r0
 800f720:	2b00      	cmp	r3, #0
 800f722:	d001      	beq.n	800f728 <find_volume+0x330>
 800f724:	230d      	movs	r3, #13
 800f726:	e0ab      	b.n	800f880 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f72a:	891b      	ldrh	r3, [r3, #8]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d001      	beq.n	800f734 <find_volume+0x33c>
 800f730:	230d      	movs	r3, #13
 800f732:	e0a5      	b.n	800f880 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f736:	3334      	adds	r3, #52	@ 0x34
 800f738:	332c      	adds	r3, #44	@ 0x2c
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7fd fe93 	bl	800d466 <ld_dword>
 800f740:	4602      	mov	r2, r0
 800f742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f744:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f748:	699b      	ldr	r3, [r3, #24]
 800f74a:	009b      	lsls	r3, r3, #2
 800f74c:	647b      	str	r3, [r7, #68]	@ 0x44
 800f74e:	e01f      	b.n	800f790 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f752:	891b      	ldrh	r3, [r3, #8]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d101      	bne.n	800f75c <find_volume+0x364>
 800f758:	230d      	movs	r3, #13
 800f75a:	e091      	b.n	800f880 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f75e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f762:	441a      	add	r2, r3
 800f764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f766:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f768:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f76c:	2b02      	cmp	r3, #2
 800f76e:	d103      	bne.n	800f778 <find_volume+0x380>
 800f770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f772:	699b      	ldr	r3, [r3, #24]
 800f774:	005b      	lsls	r3, r3, #1
 800f776:	e00a      	b.n	800f78e <find_volume+0x396>
 800f778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f77a:	699a      	ldr	r2, [r3, #24]
 800f77c:	4613      	mov	r3, r2
 800f77e:	005b      	lsls	r3, r3, #1
 800f780:	4413      	add	r3, r2
 800f782:	085a      	lsrs	r2, r3, #1
 800f784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f786:	699b      	ldr	r3, [r3, #24]
 800f788:	f003 0301 	and.w	r3, r3, #1
 800f78c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f78e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f792:	69da      	ldr	r2, [r3, #28]
 800f794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f796:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800f79a:	0a5b      	lsrs	r3, r3, #9
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d201      	bcs.n	800f7a4 <find_volume+0x3ac>
 800f7a0:	230d      	movs	r3, #13
 800f7a2:	e06d      	b.n	800f880 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7a6:	f04f 32ff 	mov.w	r2, #4294967295
 800f7aa:	615a      	str	r2, [r3, #20]
 800f7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ae:	695a      	ldr	r2, [r3, #20]
 800f7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b6:	2280      	movs	r2, #128	@ 0x80
 800f7b8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f7ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f7be:	2b03      	cmp	r3, #3
 800f7c0:	d149      	bne.n	800f856 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7c4:	3334      	adds	r3, #52	@ 0x34
 800f7c6:	3330      	adds	r3, #48	@ 0x30
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7fd fe33 	bl	800d434 <ld_word>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	d140      	bne.n	800f856 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f7d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	4619      	mov	r1, r3
 800f7da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f7dc:	f7fe f8dc 	bl	800d998 <move_window>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d137      	bne.n	800f856 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800f7e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ee:	3334      	adds	r3, #52	@ 0x34
 800f7f0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f7fd fe1d 	bl	800d434 <ld_word>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f802:	429a      	cmp	r2, r3
 800f804:	d127      	bne.n	800f856 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f808:	3334      	adds	r3, #52	@ 0x34
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7fd fe2b 	bl	800d466 <ld_dword>
 800f810:	4603      	mov	r3, r0
 800f812:	4a1d      	ldr	r2, [pc, #116]	@ (800f888 <find_volume+0x490>)
 800f814:	4293      	cmp	r3, r2
 800f816:	d11e      	bne.n	800f856 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f81a:	3334      	adds	r3, #52	@ 0x34
 800f81c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f820:	4618      	mov	r0, r3
 800f822:	f7fd fe20 	bl	800d466 <ld_dword>
 800f826:	4603      	mov	r3, r0
 800f828:	4a18      	ldr	r2, [pc, #96]	@ (800f88c <find_volume+0x494>)
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d113      	bne.n	800f856 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f82e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f830:	3334      	adds	r3, #52	@ 0x34
 800f832:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f836:	4618      	mov	r0, r3
 800f838:	f7fd fe15 	bl	800d466 <ld_dword>
 800f83c:	4602      	mov	r2, r0
 800f83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f840:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f844:	3334      	adds	r3, #52	@ 0x34
 800f846:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7fd fe0b 	bl	800d466 <ld_dword>
 800f850:	4602      	mov	r2, r0
 800f852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f854:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f858:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f85c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f85e:	4b0c      	ldr	r3, [pc, #48]	@ (800f890 <find_volume+0x498>)
 800f860:	881b      	ldrh	r3, [r3, #0]
 800f862:	3301      	adds	r3, #1
 800f864:	b29a      	uxth	r2, r3
 800f866:	4b0a      	ldr	r3, [pc, #40]	@ (800f890 <find_volume+0x498>)
 800f868:	801a      	strh	r2, [r3, #0]
 800f86a:	4b09      	ldr	r3, [pc, #36]	@ (800f890 <find_volume+0x498>)
 800f86c:	881a      	ldrh	r2, [r3, #0]
 800f86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f870:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f874:	4a07      	ldr	r2, [pc, #28]	@ (800f894 <find_volume+0x49c>)
 800f876:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f878:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f87a:	f7fe f825 	bl	800d8c8 <clear_lock>
#endif
	return FR_OK;
 800f87e:	2300      	movs	r3, #0
}
 800f880:	4618      	mov	r0, r3
 800f882:	3758      	adds	r7, #88	@ 0x58
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}
 800f888:	41615252 	.word	0x41615252
 800f88c:	61417272 	.word	0x61417272
 800f890:	200020bc 	.word	0x200020bc
 800f894:	200020e0 	.word	0x200020e0

0800f898 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b084      	sub	sp, #16
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f8a2:	2309      	movs	r3, #9
 800f8a4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d01c      	beq.n	800f8e6 <validate+0x4e>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d018      	beq.n	800f8e6 <validate+0x4e>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d013      	beq.n	800f8e6 <validate+0x4e>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	889a      	ldrh	r2, [r3, #4]
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	88db      	ldrh	r3, [r3, #6]
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d10c      	bne.n	800f8e6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	785b      	ldrb	r3, [r3, #1]
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7fd fd10 	bl	800d2f8 <disk_status>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	f003 0301 	and.w	r3, r3, #1
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d101      	bne.n	800f8e6 <validate+0x4e>
			res = FR_OK;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f8e6:	7bfb      	ldrb	r3, [r7, #15]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d102      	bne.n	800f8f2 <validate+0x5a>
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	e000      	b.n	800f8f4 <validate+0x5c>
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	683a      	ldr	r2, [r7, #0]
 800f8f6:	6013      	str	r3, [r2, #0]
	return res;
 800f8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	3710      	adds	r7, #16
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}
	...

0800f904 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b088      	sub	sp, #32
 800f908:	af00      	add	r7, sp, #0
 800f90a:	60f8      	str	r0, [r7, #12]
 800f90c:	60b9      	str	r1, [r7, #8]
 800f90e:	4613      	mov	r3, r2
 800f910:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f916:	f107 0310 	add.w	r3, r7, #16
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7ff fcd1 	bl	800f2c2 <get_ldnumber>
 800f920:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f922:	69fb      	ldr	r3, [r7, #28]
 800f924:	2b00      	cmp	r3, #0
 800f926:	da01      	bge.n	800f92c <f_mount+0x28>
 800f928:	230b      	movs	r3, #11
 800f92a:	e02b      	b.n	800f984 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f92c:	4a17      	ldr	r2, [pc, #92]	@ (800f98c <f_mount+0x88>)
 800f92e:	69fb      	ldr	r3, [r7, #28]
 800f930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f934:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f936:	69bb      	ldr	r3, [r7, #24]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d005      	beq.n	800f948 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f93c:	69b8      	ldr	r0, [r7, #24]
 800f93e:	f7fd ffc3 	bl	800d8c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f942:	69bb      	ldr	r3, [r7, #24]
 800f944:	2200      	movs	r2, #0
 800f946:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d002      	beq.n	800f954 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	2200      	movs	r2, #0
 800f952:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f954:	68fa      	ldr	r2, [r7, #12]
 800f956:	490d      	ldr	r1, [pc, #52]	@ (800f98c <f_mount+0x88>)
 800f958:	69fb      	ldr	r3, [r7, #28]
 800f95a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d002      	beq.n	800f96a <f_mount+0x66>
 800f964:	79fb      	ldrb	r3, [r7, #7]
 800f966:	2b01      	cmp	r3, #1
 800f968:	d001      	beq.n	800f96e <f_mount+0x6a>
 800f96a:	2300      	movs	r3, #0
 800f96c:	e00a      	b.n	800f984 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f96e:	f107 010c 	add.w	r1, r7, #12
 800f972:	f107 0308 	add.w	r3, r7, #8
 800f976:	2200      	movs	r2, #0
 800f978:	4618      	mov	r0, r3
 800f97a:	f7ff fd3d 	bl	800f3f8 <find_volume>
 800f97e:	4603      	mov	r3, r0
 800f980:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f982:	7dfb      	ldrb	r3, [r7, #23]
}
 800f984:	4618      	mov	r0, r3
 800f986:	3720      	adds	r7, #32
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}
 800f98c:	200020b8 	.word	0x200020b8

0800f990 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b09a      	sub	sp, #104	@ 0x68
 800f994:	af00      	add	r7, sp, #0
 800f996:	60f8      	str	r0, [r7, #12]
 800f998:	60b9      	str	r1, [r7, #8]
 800f99a:	4613      	mov	r3, r2
 800f99c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d101      	bne.n	800f9a8 <f_open+0x18>
 800f9a4:	2309      	movs	r3, #9
 800f9a6:	e1a9      	b.n	800fcfc <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f9a8:	79fb      	ldrb	r3, [r7, #7]
 800f9aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f9ae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f9b0:	79fa      	ldrb	r2, [r7, #7]
 800f9b2:	f107 0114 	add.w	r1, r7, #20
 800f9b6:	f107 0308 	add.w	r3, r7, #8
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7ff fd1c 	bl	800f3f8 <find_volume>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800f9c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	f040 818d 	bne.w	800fcea <f_open+0x35a>
		dj.obj.fs = fs;
 800f9d0:	697b      	ldr	r3, [r7, #20]
 800f9d2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f9d4:	68ba      	ldr	r2, [r7, #8]
 800f9d6:	f107 0318 	add.w	r3, r7, #24
 800f9da:	4611      	mov	r1, r2
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7ff fbff 	bl	800f1e0 <follow_path>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f9e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d118      	bne.n	800fa22 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f9f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800f9f4:	b25b      	sxtb	r3, r3
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	da03      	bge.n	800fa02 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f9fa:	2306      	movs	r3, #6
 800f9fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800fa00:	e00f      	b.n	800fa22 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fa02:	79fb      	ldrb	r3, [r7, #7]
 800fa04:	2b01      	cmp	r3, #1
 800fa06:	bf8c      	ite	hi
 800fa08:	2301      	movhi	r3, #1
 800fa0a:	2300      	movls	r3, #0
 800fa0c:	b2db      	uxtb	r3, r3
 800fa0e:	461a      	mov	r2, r3
 800fa10:	f107 0318 	add.w	r3, r7, #24
 800fa14:	4611      	mov	r1, r2
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7fd fe0e 	bl	800d638 <chk_lock>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fa22:	79fb      	ldrb	r3, [r7, #7]
 800fa24:	f003 031c 	and.w	r3, r3, #28
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d07f      	beq.n	800fb2c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800fa2c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d017      	beq.n	800fa64 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fa34:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fa38:	2b04      	cmp	r3, #4
 800fa3a:	d10e      	bne.n	800fa5a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fa3c:	f7fd fe58 	bl	800d6f0 <enq_lock>
 800fa40:	4603      	mov	r3, r0
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d006      	beq.n	800fa54 <f_open+0xc4>
 800fa46:	f107 0318 	add.w	r3, r7, #24
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7ff f83a 	bl	800eac4 <dir_register>
 800fa50:	4603      	mov	r3, r0
 800fa52:	e000      	b.n	800fa56 <f_open+0xc6>
 800fa54:	2312      	movs	r3, #18
 800fa56:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fa5a:	79fb      	ldrb	r3, [r7, #7]
 800fa5c:	f043 0308 	orr.w	r3, r3, #8
 800fa60:	71fb      	strb	r3, [r7, #7]
 800fa62:	e010      	b.n	800fa86 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fa64:	7fbb      	ldrb	r3, [r7, #30]
 800fa66:	f003 0311 	and.w	r3, r3, #17
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d003      	beq.n	800fa76 <f_open+0xe6>
					res = FR_DENIED;
 800fa6e:	2307      	movs	r3, #7
 800fa70:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800fa74:	e007      	b.n	800fa86 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fa76:	79fb      	ldrb	r3, [r7, #7]
 800fa78:	f003 0304 	and.w	r3, r3, #4
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d002      	beq.n	800fa86 <f_open+0xf6>
 800fa80:	2308      	movs	r3, #8
 800fa82:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fa86:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d168      	bne.n	800fb60 <f_open+0x1d0>
 800fa8e:	79fb      	ldrb	r3, [r7, #7]
 800fa90:	f003 0308 	and.w	r3, r3, #8
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d063      	beq.n	800fb60 <f_open+0x1d0>
				dw = GET_FATTIME();
 800fa98:	f7fa fb32 	bl	800a100 <get_fattime>
 800fa9c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fa9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faa0:	330e      	adds	r3, #14
 800faa2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800faa4:	4618      	mov	r0, r3
 800faa6:	f7fd fd1c 	bl	800d4e2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800faaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faac:	3316      	adds	r3, #22
 800faae:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7fd fd16 	bl	800d4e2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fab8:	330b      	adds	r3, #11
 800faba:	2220      	movs	r2, #32
 800fabc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fac2:	4611      	mov	r1, r2
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7fe fc6b 	bl	800e3a0 <ld_clust>
 800faca:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fad0:	2200      	movs	r2, #0
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7fe fc83 	bl	800e3de <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fada:	331c      	adds	r3, #28
 800fadc:	2100      	movs	r1, #0
 800fade:	4618      	mov	r0, r3
 800fae0:	f7fd fcff 	bl	800d4e2 <st_dword>
					fs->wflag = 1;
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	2201      	movs	r2, #1
 800fae8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800faea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800faec:	2b00      	cmp	r3, #0
 800faee:	d037      	beq.n	800fb60 <f_open+0x1d0>
						dw = fs->winsect;
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800faf4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800faf6:	f107 0318 	add.w	r3, r7, #24
 800fafa:	2200      	movs	r2, #0
 800fafc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7fe f996 	bl	800de30 <remove_chain>
 800fb04:	4603      	mov	r3, r0
 800fb06:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800fb0a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d126      	bne.n	800fb60 <f_open+0x1d0>
							res = move_window(fs, dw);
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7fd ff3e 	bl	800d998 <move_window>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fb26:	3a01      	subs	r2, #1
 800fb28:	611a      	str	r2, [r3, #16]
 800fb2a:	e019      	b.n	800fb60 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fb2c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d115      	bne.n	800fb60 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fb34:	7fbb      	ldrb	r3, [r7, #30]
 800fb36:	f003 0310 	and.w	r3, r3, #16
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d003      	beq.n	800fb46 <f_open+0x1b6>
					res = FR_NO_FILE;
 800fb3e:	2304      	movs	r3, #4
 800fb40:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800fb44:	e00c      	b.n	800fb60 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fb46:	79fb      	ldrb	r3, [r7, #7]
 800fb48:	f003 0302 	and.w	r3, r3, #2
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d007      	beq.n	800fb60 <f_open+0x1d0>
 800fb50:	7fbb      	ldrb	r3, [r7, #30]
 800fb52:	f003 0301 	and.w	r3, r3, #1
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d002      	beq.n	800fb60 <f_open+0x1d0>
						res = FR_DENIED;
 800fb5a:	2307      	movs	r3, #7
 800fb5c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800fb60:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d126      	bne.n	800fbb6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fb68:	79fb      	ldrb	r3, [r7, #7]
 800fb6a:	f003 0308 	and.w	r3, r3, #8
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d003      	beq.n	800fb7a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800fb72:	79fb      	ldrb	r3, [r7, #7]
 800fb74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb78:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fb7a:	697b      	ldr	r3, [r7, #20]
 800fb7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800fb82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fb88:	79fb      	ldrb	r3, [r7, #7]
 800fb8a:	2b01      	cmp	r3, #1
 800fb8c:	bf8c      	ite	hi
 800fb8e:	2301      	movhi	r3, #1
 800fb90:	2300      	movls	r3, #0
 800fb92:	b2db      	uxtb	r3, r3
 800fb94:	461a      	mov	r2, r3
 800fb96:	f107 0318 	add.w	r3, r7, #24
 800fb9a:	4611      	mov	r1, r2
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7fd fdc9 	bl	800d734 <inc_lock>
 800fba2:	4602      	mov	r2, r0
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	691b      	ldr	r3, [r3, #16]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d102      	bne.n	800fbb6 <f_open+0x226>
 800fbb0:	2302      	movs	r3, #2
 800fbb2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fbb6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	f040 8095 	bne.w	800fcea <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fbc4:	4611      	mov	r1, r2
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7fe fbea 	bl	800e3a0 <ld_clust>
 800fbcc:	4602      	mov	r2, r0
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fbd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbd4:	331c      	adds	r3, #28
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7fd fc45 	bl	800d466 <ld_dword>
 800fbdc:	4602      	mov	r2, r0
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fbe8:	697a      	ldr	r2, [r7, #20]
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	88da      	ldrh	r2, [r3, #6]
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	79fa      	ldrb	r2, [r7, #7]
 800fbfa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	2200      	movs	r2, #0
 800fc00:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	2200      	movs	r2, #0
 800fc06:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	3330      	adds	r3, #48	@ 0x30
 800fc12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc16:	2100      	movs	r1, #0
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7fd fcaf 	bl	800d57c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fc1e:	79fb      	ldrb	r3, [r7, #7]
 800fc20:	f003 0320 	and.w	r3, r3, #32
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d060      	beq.n	800fcea <f_open+0x35a>
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	68db      	ldr	r3, [r3, #12]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d05c      	beq.n	800fcea <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	68da      	ldr	r2, [r3, #12]
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	895b      	ldrh	r3, [r3, #10]
 800fc3c:	025b      	lsls	r3, r3, #9
 800fc3e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	689b      	ldr	r3, [r3, #8]
 800fc44:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	68db      	ldr	r3, [r3, #12]
 800fc4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fc4c:	e016      	b.n	800fc7c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7fd ff5b 	bl	800db0e <get_fat>
 800fc58:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800fc5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fc5c:	2b01      	cmp	r3, #1
 800fc5e:	d802      	bhi.n	800fc66 <f_open+0x2d6>
 800fc60:	2302      	movs	r3, #2
 800fc62:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fc66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fc68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc6c:	d102      	bne.n	800fc74 <f_open+0x2e4>
 800fc6e:	2301      	movs	r3, #1
 800fc70:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fc74:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fc76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc78:	1ad3      	subs	r3, r2, r3
 800fc7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fc7c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d103      	bne.n	800fc8c <f_open+0x2fc>
 800fc84:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fc86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	d8e0      	bhi.n	800fc4e <f_open+0x2be>
				}
				fp->clust = clst;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800fc90:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fc92:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d127      	bne.n	800fcea <f_open+0x35a>
 800fc9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fc9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d022      	beq.n	800fcea <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f7fd ff11 	bl	800dad0 <clust2sect>
 800fcae:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800fcb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d103      	bne.n	800fcbe <f_open+0x32e>
						res = FR_INT_ERR;
 800fcb6:	2302      	movs	r3, #2
 800fcb8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800fcbc:	e015      	b.n	800fcea <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fcbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fcc0:	0a5a      	lsrs	r2, r3, #9
 800fcc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcc4:	441a      	add	r2, r3
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	7858      	ldrb	r0, [r3, #1]
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	6a1a      	ldr	r2, [r3, #32]
 800fcd8:	2301      	movs	r3, #1
 800fcda:	f7fd fb4d 	bl	800d378 <disk_read>
 800fcde:	4603      	mov	r3, r0
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d002      	beq.n	800fcea <f_open+0x35a>
 800fce4:	2301      	movs	r3, #1
 800fce6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fcea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d002      	beq.n	800fcf8 <f_open+0x368>
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fcf8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3768      	adds	r7, #104	@ 0x68
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}

0800fd04 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b08e      	sub	sp, #56	@ 0x38
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	60f8      	str	r0, [r7, #12]
 800fd0c:	60b9      	str	r1, [r7, #8]
 800fd0e:	607a      	str	r2, [r7, #4]
 800fd10:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	2200      	movs	r2, #0
 800fd1a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f107 0214 	add.w	r2, r7, #20
 800fd22:	4611      	mov	r1, r2
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7ff fdb7 	bl	800f898 <validate>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fd30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d107      	bne.n	800fd48 <f_read+0x44>
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	7d5b      	ldrb	r3, [r3, #21]
 800fd3c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800fd40:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d002      	beq.n	800fd4e <f_read+0x4a>
 800fd48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd4c:	e115      	b.n	800ff7a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	7d1b      	ldrb	r3, [r3, #20]
 800fd52:	f003 0301 	and.w	r3, r3, #1
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d101      	bne.n	800fd5e <f_read+0x5a>
 800fd5a:	2307      	movs	r3, #7
 800fd5c:	e10d      	b.n	800ff7a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	68da      	ldr	r2, [r3, #12]
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	699b      	ldr	r3, [r3, #24]
 800fd66:	1ad3      	subs	r3, r2, r3
 800fd68:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800fd6a:	687a      	ldr	r2, [r7, #4]
 800fd6c:	6a3b      	ldr	r3, [r7, #32]
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	f240 80fe 	bls.w	800ff70 <f_read+0x26c>
 800fd74:	6a3b      	ldr	r3, [r7, #32]
 800fd76:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800fd78:	e0fa      	b.n	800ff70 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	699b      	ldr	r3, [r3, #24]
 800fd7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	f040 80c6 	bne.w	800ff14 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	699b      	ldr	r3, [r3, #24]
 800fd8c:	0a5b      	lsrs	r3, r3, #9
 800fd8e:	697a      	ldr	r2, [r7, #20]
 800fd90:	8952      	ldrh	r2, [r2, #10]
 800fd92:	3a01      	subs	r2, #1
 800fd94:	4013      	ands	r3, r2
 800fd96:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800fd98:	69fb      	ldr	r3, [r7, #28]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d12f      	bne.n	800fdfe <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	699b      	ldr	r3, [r3, #24]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d103      	bne.n	800fdae <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	689b      	ldr	r3, [r3, #8]
 800fdaa:	633b      	str	r3, [r7, #48]	@ 0x30
 800fdac:	e013      	b.n	800fdd6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d007      	beq.n	800fdc6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	699b      	ldr	r3, [r3, #24]
 800fdba:	4619      	mov	r1, r3
 800fdbc:	68f8      	ldr	r0, [r7, #12]
 800fdbe:	f7fe f934 	bl	800e02a <clmt_clust>
 800fdc2:	6338      	str	r0, [r7, #48]	@ 0x30
 800fdc4:	e007      	b.n	800fdd6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800fdc6:	68fa      	ldr	r2, [r7, #12]
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	69db      	ldr	r3, [r3, #28]
 800fdcc:	4619      	mov	r1, r3
 800fdce:	4610      	mov	r0, r2
 800fdd0:	f7fd fe9d 	bl	800db0e <get_fat>
 800fdd4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800fdd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdd8:	2b01      	cmp	r3, #1
 800fdda:	d804      	bhi.n	800fde6 <f_read+0xe2>
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	2202      	movs	r2, #2
 800fde0:	755a      	strb	r2, [r3, #21]
 800fde2:	2302      	movs	r3, #2
 800fde4:	e0c9      	b.n	800ff7a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fde6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fde8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdec:	d104      	bne.n	800fdf8 <f_read+0xf4>
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2201      	movs	r2, #1
 800fdf2:	755a      	strb	r2, [r3, #21]
 800fdf4:	2301      	movs	r3, #1
 800fdf6:	e0c0      	b.n	800ff7a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fdfc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fdfe:	697a      	ldr	r2, [r7, #20]
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	69db      	ldr	r3, [r3, #28]
 800fe04:	4619      	mov	r1, r3
 800fe06:	4610      	mov	r0, r2
 800fe08:	f7fd fe62 	bl	800dad0 <clust2sect>
 800fe0c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fe0e:	69bb      	ldr	r3, [r7, #24]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d104      	bne.n	800fe1e <f_read+0x11a>
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2202      	movs	r2, #2
 800fe18:	755a      	strb	r2, [r3, #21]
 800fe1a:	2302      	movs	r3, #2
 800fe1c:	e0ad      	b.n	800ff7a <f_read+0x276>
			sect += csect;
 800fe1e:	69ba      	ldr	r2, [r7, #24]
 800fe20:	69fb      	ldr	r3, [r7, #28]
 800fe22:	4413      	add	r3, r2
 800fe24:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	0a5b      	lsrs	r3, r3, #9
 800fe2a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800fe2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d039      	beq.n	800fea6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fe32:	69fa      	ldr	r2, [r7, #28]
 800fe34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe36:	4413      	add	r3, r2
 800fe38:	697a      	ldr	r2, [r7, #20]
 800fe3a:	8952      	ldrh	r2, [r2, #10]
 800fe3c:	4293      	cmp	r3, r2
 800fe3e:	d905      	bls.n	800fe4c <f_read+0x148>
					cc = fs->csize - csect;
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	895b      	ldrh	r3, [r3, #10]
 800fe44:	461a      	mov	r2, r3
 800fe46:	69fb      	ldr	r3, [r7, #28]
 800fe48:	1ad3      	subs	r3, r2, r3
 800fe4a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	7858      	ldrb	r0, [r3, #1]
 800fe50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe52:	69ba      	ldr	r2, [r7, #24]
 800fe54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fe56:	f7fd fa8f 	bl	800d378 <disk_read>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d004      	beq.n	800fe6a <f_read+0x166>
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	2201      	movs	r2, #1
 800fe64:	755a      	strb	r2, [r3, #21]
 800fe66:	2301      	movs	r3, #1
 800fe68:	e087      	b.n	800ff7a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	7d1b      	ldrb	r3, [r3, #20]
 800fe6e:	b25b      	sxtb	r3, r3
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	da14      	bge.n	800fe9e <f_read+0x19a>
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	6a1a      	ldr	r2, [r3, #32]
 800fe78:	69bb      	ldr	r3, [r7, #24]
 800fe7a:	1ad3      	subs	r3, r2, r3
 800fe7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d90d      	bls.n	800fe9e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	6a1a      	ldr	r2, [r3, #32]
 800fe86:	69bb      	ldr	r3, [r7, #24]
 800fe88:	1ad3      	subs	r3, r2, r3
 800fe8a:	025b      	lsls	r3, r3, #9
 800fe8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe8e:	18d0      	adds	r0, r2, r3
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	3330      	adds	r3, #48	@ 0x30
 800fe94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe98:	4619      	mov	r1, r3
 800fe9a:	f7fd fb4e 	bl	800d53a <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800fe9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fea0:	025b      	lsls	r3, r3, #9
 800fea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800fea4:	e050      	b.n	800ff48 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	6a1b      	ldr	r3, [r3, #32]
 800feaa:	69ba      	ldr	r2, [r7, #24]
 800feac:	429a      	cmp	r2, r3
 800feae:	d02e      	beq.n	800ff0e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	7d1b      	ldrb	r3, [r3, #20]
 800feb4:	b25b      	sxtb	r3, r3
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	da18      	bge.n	800feec <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	7858      	ldrb	r0, [r3, #1]
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	6a1a      	ldr	r2, [r3, #32]
 800fec8:	2301      	movs	r3, #1
 800feca:	f7fd fa75 	bl	800d3b8 <disk_write>
 800fece:	4603      	mov	r3, r0
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d004      	beq.n	800fede <f_read+0x1da>
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	2201      	movs	r2, #1
 800fed8:	755a      	strb	r2, [r3, #21]
 800feda:	2301      	movs	r3, #1
 800fedc:	e04d      	b.n	800ff7a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	7d1b      	ldrb	r3, [r3, #20]
 800fee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fee6:	b2da      	uxtb	r2, r3
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	7858      	ldrb	r0, [r3, #1]
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fef6:	2301      	movs	r3, #1
 800fef8:	69ba      	ldr	r2, [r7, #24]
 800fefa:	f7fd fa3d 	bl	800d378 <disk_read>
 800fefe:	4603      	mov	r3, r0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d004      	beq.n	800ff0e <f_read+0x20a>
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	2201      	movs	r2, #1
 800ff08:	755a      	strb	r2, [r3, #21]
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	e035      	b.n	800ff7a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	69ba      	ldr	r2, [r7, #24]
 800ff12:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	699b      	ldr	r3, [r3, #24]
 800ff18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff1c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ff20:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ff22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	429a      	cmp	r2, r3
 800ff28:	d901      	bls.n	800ff2e <f_read+0x22a>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	699b      	ldr	r3, [r3, #24]
 800ff38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff3c:	4413      	add	r3, r2
 800ff3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ff40:	4619      	mov	r1, r3
 800ff42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ff44:	f7fd faf9 	bl	800d53a <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ff48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff4c:	4413      	add	r3, r2
 800ff4e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	699a      	ldr	r2, [r3, #24]
 800ff54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff56:	441a      	add	r2, r3
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	619a      	str	r2, [r3, #24]
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	681a      	ldr	r2, [r3, #0]
 800ff60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff62:	441a      	add	r2, r3
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	601a      	str	r2, [r3, #0]
 800ff68:	687a      	ldr	r2, [r7, #4]
 800ff6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff6c:	1ad3      	subs	r3, r2, r3
 800ff6e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	f47f af01 	bne.w	800fd7a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ff78:	2300      	movs	r3, #0
}
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	3738      	adds	r7, #56	@ 0x38
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}

0800ff82 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ff82:	b580      	push	{r7, lr}
 800ff84:	b086      	sub	sp, #24
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f107 0208 	add.w	r2, r7, #8
 800ff90:	4611      	mov	r1, r2
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7ff fc80 	bl	800f898 <validate>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ff9c:	7dfb      	ldrb	r3, [r7, #23]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d168      	bne.n	8010074 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	7d1b      	ldrb	r3, [r3, #20]
 800ffa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d062      	beq.n	8010074 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	7d1b      	ldrb	r3, [r3, #20]
 800ffb2:	b25b      	sxtb	r3, r3
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	da15      	bge.n	800ffe4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	7858      	ldrb	r0, [r3, #1]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6a1a      	ldr	r2, [r3, #32]
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	f7fd f9f6 	bl	800d3b8 <disk_write>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d001      	beq.n	800ffd6 <f_sync+0x54>
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	e04f      	b.n	8010076 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	7d1b      	ldrb	r3, [r3, #20]
 800ffda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ffde:	b2da      	uxtb	r2, r3
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ffe4:	f7fa f88c 	bl	800a100 <get_fattime>
 800ffe8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ffea:	68ba      	ldr	r2, [r7, #8]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fff0:	4619      	mov	r1, r3
 800fff2:	4610      	mov	r0, r2
 800fff4:	f7fd fcd0 	bl	800d998 <move_window>
 800fff8:	4603      	mov	r3, r0
 800fffa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fffc:	7dfb      	ldrb	r3, [r7, #23]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d138      	bne.n	8010074 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010006:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	330b      	adds	r3, #11
 801000c:	781a      	ldrb	r2, [r3, #0]
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	330b      	adds	r3, #11
 8010012:	f042 0220 	orr.w	r2, r2, #32
 8010016:	b2d2      	uxtb	r2, r2
 8010018:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6818      	ldr	r0, [r3, #0]
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	689b      	ldr	r3, [r3, #8]
 8010022:	461a      	mov	r2, r3
 8010024:	68f9      	ldr	r1, [r7, #12]
 8010026:	f7fe f9da 	bl	800e3de <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	f103 021c 	add.w	r2, r3, #28
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	68db      	ldr	r3, [r3, #12]
 8010034:	4619      	mov	r1, r3
 8010036:	4610      	mov	r0, r2
 8010038:	f7fd fa53 	bl	800d4e2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	3316      	adds	r3, #22
 8010040:	6939      	ldr	r1, [r7, #16]
 8010042:	4618      	mov	r0, r3
 8010044:	f7fd fa4d 	bl	800d4e2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	3312      	adds	r3, #18
 801004c:	2100      	movs	r1, #0
 801004e:	4618      	mov	r0, r3
 8010050:	f7fd fa2c 	bl	800d4ac <st_word>
					fs->wflag = 1;
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	2201      	movs	r2, #1
 8010058:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	4618      	mov	r0, r3
 801005e:	f7fd fcc9 	bl	800d9f4 <sync_fs>
 8010062:	4603      	mov	r3, r0
 8010064:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	7d1b      	ldrb	r3, [r3, #20]
 801006a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801006e:	b2da      	uxtb	r2, r3
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010074:	7dfb      	ldrb	r3, [r7, #23]
}
 8010076:	4618      	mov	r0, r3
 8010078:	3718      	adds	r7, #24
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}

0801007e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801007e:	b580      	push	{r7, lr}
 8010080:	b084      	sub	sp, #16
 8010082:	af00      	add	r7, sp, #0
 8010084:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f7ff ff7b 	bl	800ff82 <f_sync>
 801008c:	4603      	mov	r3, r0
 801008e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010090:	7bfb      	ldrb	r3, [r7, #15]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d118      	bne.n	80100c8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	f107 0208 	add.w	r2, r7, #8
 801009c:	4611      	mov	r1, r2
 801009e:	4618      	mov	r0, r3
 80100a0:	f7ff fbfa 	bl	800f898 <validate>
 80100a4:	4603      	mov	r3, r0
 80100a6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80100a8:	7bfb      	ldrb	r3, [r7, #15]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d10c      	bne.n	80100c8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	691b      	ldr	r3, [r3, #16]
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7fd fbcc 	bl	800d850 <dec_lock>
 80100b8:	4603      	mov	r3, r0
 80100ba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80100bc:	7bfb      	ldrb	r3, [r7, #15]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d102      	bne.n	80100c8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2200      	movs	r2, #0
 80100c6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80100c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3710      	adds	r7, #16
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}

080100d2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80100d2:	b580      	push	{r7, lr}
 80100d4:	b090      	sub	sp, #64	@ 0x40
 80100d6:	af00      	add	r7, sp, #0
 80100d8:	6078      	str	r0, [r7, #4]
 80100da:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f107 0208 	add.w	r2, r7, #8
 80100e2:	4611      	mov	r1, r2
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7ff fbd7 	bl	800f898 <validate>
 80100ea:	4603      	mov	r3, r0
 80100ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80100f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d103      	bne.n	8010100 <f_lseek+0x2e>
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	7d5b      	ldrb	r3, [r3, #21]
 80100fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010100:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010104:	2b00      	cmp	r3, #0
 8010106:	d002      	beq.n	801010e <f_lseek+0x3c>
 8010108:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801010c:	e1e6      	b.n	80104dc <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010112:	2b00      	cmp	r3, #0
 8010114:	f000 80d1 	beq.w	80102ba <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801011e:	d15a      	bne.n	80101d6 <f_lseek+0x104>
			tbl = fp->cltbl;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010124:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010128:	1d1a      	adds	r2, r3, #4
 801012a:	627a      	str	r2, [r7, #36]	@ 0x24
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	617b      	str	r3, [r7, #20]
 8010130:	2302      	movs	r3, #2
 8010132:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	689b      	ldr	r3, [r3, #8]
 8010138:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 801013a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801013c:	2b00      	cmp	r3, #0
 801013e:	d03a      	beq.n	80101b6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010142:	613b      	str	r3, [r7, #16]
 8010144:	2300      	movs	r3, #0
 8010146:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801014a:	3302      	adds	r3, #2
 801014c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 801014e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010150:	60fb      	str	r3, [r7, #12]
 8010152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010154:	3301      	adds	r3, #1
 8010156:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801015c:	4618      	mov	r0, r3
 801015e:	f7fd fcd6 	bl	800db0e <get_fat>
 8010162:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010166:	2b01      	cmp	r3, #1
 8010168:	d804      	bhi.n	8010174 <f_lseek+0xa2>
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2202      	movs	r2, #2
 801016e:	755a      	strb	r2, [r3, #21]
 8010170:	2302      	movs	r3, #2
 8010172:	e1b3      	b.n	80104dc <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010176:	f1b3 3fff 	cmp.w	r3, #4294967295
 801017a:	d104      	bne.n	8010186 <f_lseek+0xb4>
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2201      	movs	r2, #1
 8010180:	755a      	strb	r2, [r3, #21]
 8010182:	2301      	movs	r3, #1
 8010184:	e1aa      	b.n	80104dc <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	3301      	adds	r3, #1
 801018a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801018c:	429a      	cmp	r2, r3
 801018e:	d0de      	beq.n	801014e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010190:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	429a      	cmp	r2, r3
 8010196:	d809      	bhi.n	80101ac <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801019a:	1d1a      	adds	r2, r3, #4
 801019c:	627a      	str	r2, [r7, #36]	@ 0x24
 801019e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80101a0:	601a      	str	r2, [r3, #0]
 80101a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101a4:	1d1a      	adds	r2, r3, #4
 80101a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80101a8:	693a      	ldr	r2, [r7, #16]
 80101aa:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	699b      	ldr	r3, [r3, #24]
 80101b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d3c4      	bcc.n	8010140 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80101bc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80101be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d803      	bhi.n	80101ce <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80101c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101c8:	2200      	movs	r2, #0
 80101ca:	601a      	str	r2, [r3, #0]
 80101cc:	e184      	b.n	80104d8 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80101ce:	2311      	movs	r3, #17
 80101d0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80101d4:	e180      	b.n	80104d8 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	68db      	ldr	r3, [r3, #12]
 80101da:	683a      	ldr	r2, [r7, #0]
 80101dc:	429a      	cmp	r2, r3
 80101de:	d902      	bls.n	80101e6 <f_lseek+0x114>
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	68db      	ldr	r3, [r3, #12]
 80101e4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	683a      	ldr	r2, [r7, #0]
 80101ea:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	f000 8172 	beq.w	80104d8 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	3b01      	subs	r3, #1
 80101f8:	4619      	mov	r1, r3
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f7fd ff15 	bl	800e02a <clmt_clust>
 8010200:	4602      	mov	r2, r0
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010206:	68ba      	ldr	r2, [r7, #8]
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	69db      	ldr	r3, [r3, #28]
 801020c:	4619      	mov	r1, r3
 801020e:	4610      	mov	r0, r2
 8010210:	f7fd fc5e 	bl	800dad0 <clust2sect>
 8010214:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010216:	69bb      	ldr	r3, [r7, #24]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d104      	bne.n	8010226 <f_lseek+0x154>
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2202      	movs	r2, #2
 8010220:	755a      	strb	r2, [r3, #21]
 8010222:	2302      	movs	r3, #2
 8010224:	e15a      	b.n	80104dc <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	3b01      	subs	r3, #1
 801022a:	0a5b      	lsrs	r3, r3, #9
 801022c:	68ba      	ldr	r2, [r7, #8]
 801022e:	8952      	ldrh	r2, [r2, #10]
 8010230:	3a01      	subs	r2, #1
 8010232:	4013      	ands	r3, r2
 8010234:	69ba      	ldr	r2, [r7, #24]
 8010236:	4413      	add	r3, r2
 8010238:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	699b      	ldr	r3, [r3, #24]
 801023e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010242:	2b00      	cmp	r3, #0
 8010244:	f000 8148 	beq.w	80104d8 <f_lseek+0x406>
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6a1b      	ldr	r3, [r3, #32]
 801024c:	69ba      	ldr	r2, [r7, #24]
 801024e:	429a      	cmp	r2, r3
 8010250:	f000 8142 	beq.w	80104d8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	7d1b      	ldrb	r3, [r3, #20]
 8010258:	b25b      	sxtb	r3, r3
 801025a:	2b00      	cmp	r3, #0
 801025c:	da18      	bge.n	8010290 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	7858      	ldrb	r0, [r3, #1]
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6a1a      	ldr	r2, [r3, #32]
 801026c:	2301      	movs	r3, #1
 801026e:	f7fd f8a3 	bl	800d3b8 <disk_write>
 8010272:	4603      	mov	r3, r0
 8010274:	2b00      	cmp	r3, #0
 8010276:	d004      	beq.n	8010282 <f_lseek+0x1b0>
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2201      	movs	r2, #1
 801027c:	755a      	strb	r2, [r3, #21]
 801027e:	2301      	movs	r3, #1
 8010280:	e12c      	b.n	80104dc <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	7d1b      	ldrb	r3, [r3, #20]
 8010286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801028a:	b2da      	uxtb	r2, r3
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	7858      	ldrb	r0, [r3, #1]
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801029a:	2301      	movs	r3, #1
 801029c:	69ba      	ldr	r2, [r7, #24]
 801029e:	f7fd f86b 	bl	800d378 <disk_read>
 80102a2:	4603      	mov	r3, r0
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d004      	beq.n	80102b2 <f_lseek+0x1e0>
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2201      	movs	r2, #1
 80102ac:	755a      	strb	r2, [r3, #21]
 80102ae:	2301      	movs	r3, #1
 80102b0:	e114      	b.n	80104dc <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	69ba      	ldr	r2, [r7, #24]
 80102b6:	621a      	str	r2, [r3, #32]
 80102b8:	e10e      	b.n	80104d8 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	68db      	ldr	r3, [r3, #12]
 80102be:	683a      	ldr	r2, [r7, #0]
 80102c0:	429a      	cmp	r2, r3
 80102c2:	d908      	bls.n	80102d6 <f_lseek+0x204>
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	7d1b      	ldrb	r3, [r3, #20]
 80102c8:	f003 0302 	and.w	r3, r3, #2
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d102      	bne.n	80102d6 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	68db      	ldr	r3, [r3, #12]
 80102d4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	699b      	ldr	r3, [r3, #24]
 80102da:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80102dc:	2300      	movs	r3, #0
 80102de:	637b      	str	r3, [r7, #52]	@ 0x34
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80102e4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	f000 80a7 	beq.w	801043c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	895b      	ldrh	r3, [r3, #10]
 80102f2:	025b      	lsls	r3, r3, #9
 80102f4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80102f6:	6a3b      	ldr	r3, [r7, #32]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d01b      	beq.n	8010334 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	1e5a      	subs	r2, r3, #1
 8010300:	69fb      	ldr	r3, [r7, #28]
 8010302:	fbb2 f2f3 	udiv	r2, r2, r3
 8010306:	6a3b      	ldr	r3, [r7, #32]
 8010308:	1e59      	subs	r1, r3, #1
 801030a:	69fb      	ldr	r3, [r7, #28]
 801030c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010310:	429a      	cmp	r2, r3
 8010312:	d30f      	bcc.n	8010334 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010314:	6a3b      	ldr	r3, [r7, #32]
 8010316:	1e5a      	subs	r2, r3, #1
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	425b      	negs	r3, r3
 801031c:	401a      	ands	r2, r3
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	699b      	ldr	r3, [r3, #24]
 8010326:	683a      	ldr	r2, [r7, #0]
 8010328:	1ad3      	subs	r3, r2, r3
 801032a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	69db      	ldr	r3, [r3, #28]
 8010330:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010332:	e022      	b.n	801037a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	689b      	ldr	r3, [r3, #8]
 8010338:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801033a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801033c:	2b00      	cmp	r3, #0
 801033e:	d119      	bne.n	8010374 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2100      	movs	r1, #0
 8010344:	4618      	mov	r0, r3
 8010346:	f7fd fdd8 	bl	800defa <create_chain>
 801034a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801034c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801034e:	2b01      	cmp	r3, #1
 8010350:	d104      	bne.n	801035c <f_lseek+0x28a>
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	2202      	movs	r2, #2
 8010356:	755a      	strb	r2, [r3, #21]
 8010358:	2302      	movs	r3, #2
 801035a:	e0bf      	b.n	80104dc <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801035c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801035e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010362:	d104      	bne.n	801036e <f_lseek+0x29c>
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2201      	movs	r2, #1
 8010368:	755a      	strb	r2, [r3, #21]
 801036a:	2301      	movs	r3, #1
 801036c:	e0b6      	b.n	80104dc <f_lseek+0x40a>
					fp->obj.sclust = clst;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010372:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010378:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801037a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801037c:	2b00      	cmp	r3, #0
 801037e:	d05d      	beq.n	801043c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8010380:	e03a      	b.n	80103f8 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8010382:	683a      	ldr	r2, [r7, #0]
 8010384:	69fb      	ldr	r3, [r7, #28]
 8010386:	1ad3      	subs	r3, r2, r3
 8010388:	603b      	str	r3, [r7, #0]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	699a      	ldr	r2, [r3, #24]
 801038e:	69fb      	ldr	r3, [r7, #28]
 8010390:	441a      	add	r2, r3
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	7d1b      	ldrb	r3, [r3, #20]
 801039a:	f003 0302 	and.w	r3, r3, #2
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d00b      	beq.n	80103ba <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7fd fda7 	bl	800defa <create_chain>
 80103ac:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80103ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d108      	bne.n	80103c6 <f_lseek+0x2f4>
							ofs = 0; break;
 80103b4:	2300      	movs	r3, #0
 80103b6:	603b      	str	r3, [r7, #0]
 80103b8:	e022      	b.n	8010400 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80103be:	4618      	mov	r0, r3
 80103c0:	f7fd fba5 	bl	800db0e <get_fat>
 80103c4:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80103c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103cc:	d104      	bne.n	80103d8 <f_lseek+0x306>
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2201      	movs	r2, #1
 80103d2:	755a      	strb	r2, [r3, #21]
 80103d4:	2301      	movs	r3, #1
 80103d6:	e081      	b.n	80104dc <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80103d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103da:	2b01      	cmp	r3, #1
 80103dc:	d904      	bls.n	80103e8 <f_lseek+0x316>
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	699b      	ldr	r3, [r3, #24]
 80103e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d304      	bcc.n	80103f2 <f_lseek+0x320>
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2202      	movs	r2, #2
 80103ec:	755a      	strb	r2, [r3, #21]
 80103ee:	2302      	movs	r3, #2
 80103f0:	e074      	b.n	80104dc <f_lseek+0x40a>
					fp->clust = clst;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80103f6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80103f8:	683a      	ldr	r2, [r7, #0]
 80103fa:	69fb      	ldr	r3, [r7, #28]
 80103fc:	429a      	cmp	r2, r3
 80103fe:	d8c0      	bhi.n	8010382 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	699a      	ldr	r2, [r3, #24]
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	441a      	add	r2, r3
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010412:	2b00      	cmp	r3, #0
 8010414:	d012      	beq.n	801043c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801041a:	4618      	mov	r0, r3
 801041c:	f7fd fb58 	bl	800dad0 <clust2sect>
 8010420:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010424:	2b00      	cmp	r3, #0
 8010426:	d104      	bne.n	8010432 <f_lseek+0x360>
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2202      	movs	r2, #2
 801042c:	755a      	strb	r2, [r3, #21]
 801042e:	2302      	movs	r3, #2
 8010430:	e054      	b.n	80104dc <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	0a5b      	lsrs	r3, r3, #9
 8010436:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010438:	4413      	add	r3, r2
 801043a:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	699a      	ldr	r2, [r3, #24]
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	68db      	ldr	r3, [r3, #12]
 8010444:	429a      	cmp	r2, r3
 8010446:	d90a      	bls.n	801045e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	699a      	ldr	r2, [r3, #24]
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	7d1b      	ldrb	r3, [r3, #20]
 8010454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010458:	b2da      	uxtb	r2, r3
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	699b      	ldr	r3, [r3, #24]
 8010462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010466:	2b00      	cmp	r3, #0
 8010468:	d036      	beq.n	80104d8 <f_lseek+0x406>
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6a1b      	ldr	r3, [r3, #32]
 801046e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010470:	429a      	cmp	r2, r3
 8010472:	d031      	beq.n	80104d8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	7d1b      	ldrb	r3, [r3, #20]
 8010478:	b25b      	sxtb	r3, r3
 801047a:	2b00      	cmp	r3, #0
 801047c:	da18      	bge.n	80104b0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801047e:	68bb      	ldr	r3, [r7, #8]
 8010480:	7858      	ldrb	r0, [r3, #1]
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	6a1a      	ldr	r2, [r3, #32]
 801048c:	2301      	movs	r3, #1
 801048e:	f7fc ff93 	bl	800d3b8 <disk_write>
 8010492:	4603      	mov	r3, r0
 8010494:	2b00      	cmp	r3, #0
 8010496:	d004      	beq.n	80104a2 <f_lseek+0x3d0>
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2201      	movs	r2, #1
 801049c:	755a      	strb	r2, [r3, #21]
 801049e:	2301      	movs	r3, #1
 80104a0:	e01c      	b.n	80104dc <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	7d1b      	ldrb	r3, [r3, #20]
 80104a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80104aa:	b2da      	uxtb	r2, r3
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	7858      	ldrb	r0, [r3, #1]
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80104ba:	2301      	movs	r3, #1
 80104bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80104be:	f7fc ff5b 	bl	800d378 <disk_read>
 80104c2:	4603      	mov	r3, r0
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d004      	beq.n	80104d2 <f_lseek+0x400>
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2201      	movs	r2, #1
 80104cc:	755a      	strb	r2, [r3, #21]
 80104ce:	2301      	movs	r3, #1
 80104d0:	e004      	b.n	80104dc <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80104d6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80104d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3740      	adds	r7, #64	@ 0x40
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}

080104e4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b086      	sub	sp, #24
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d101      	bne.n	80104f8 <f_opendir+0x14>
 80104f4:	2309      	movs	r3, #9
 80104f6:	e064      	b.n	80105c2 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80104fc:	f107 010c 	add.w	r1, r7, #12
 8010500:	463b      	mov	r3, r7
 8010502:	2200      	movs	r2, #0
 8010504:	4618      	mov	r0, r3
 8010506:	f7fe ff77 	bl	800f3f8 <find_volume>
 801050a:	4603      	mov	r3, r0
 801050c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801050e:	7dfb      	ldrb	r3, [r7, #23]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d14f      	bne.n	80105b4 <f_opendir+0xd0>
		obj->fs = fs;
 8010514:	68fa      	ldr	r2, [r7, #12]
 8010516:	693b      	ldr	r3, [r7, #16]
 8010518:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	4619      	mov	r1, r3
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f7fe fe5e 	bl	800f1e0 <follow_path>
 8010524:	4603      	mov	r3, r0
 8010526:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8010528:	7dfb      	ldrb	r3, [r7, #23]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d13d      	bne.n	80105aa <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010534:	b25b      	sxtb	r3, r3
 8010536:	2b00      	cmp	r3, #0
 8010538:	db12      	blt.n	8010560 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	799b      	ldrb	r3, [r3, #6]
 801053e:	f003 0310 	and.w	r3, r3, #16
 8010542:	2b00      	cmp	r3, #0
 8010544:	d00a      	beq.n	801055c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8010546:	68fa      	ldr	r2, [r7, #12]
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6a1b      	ldr	r3, [r3, #32]
 801054c:	4619      	mov	r1, r3
 801054e:	4610      	mov	r0, r2
 8010550:	f7fd ff26 	bl	800e3a0 <ld_clust>
 8010554:	4602      	mov	r2, r0
 8010556:	693b      	ldr	r3, [r7, #16]
 8010558:	609a      	str	r2, [r3, #8]
 801055a:	e001      	b.n	8010560 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801055c:	2305      	movs	r3, #5
 801055e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8010560:	7dfb      	ldrb	r3, [r7, #23]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d121      	bne.n	80105aa <f_opendir+0xc6>
				obj->id = fs->id;
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	88da      	ldrh	r2, [r3, #6]
 801056a:	693b      	ldr	r3, [r7, #16]
 801056c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801056e:	2100      	movs	r1, #0
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f7fd fd8e 	bl	800e092 <dir_sdi>
 8010576:	4603      	mov	r3, r0
 8010578:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801057a:	7dfb      	ldrb	r3, [r7, #23]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d114      	bne.n	80105aa <f_opendir+0xc6>
					if (obj->sclust) {
 8010580:	693b      	ldr	r3, [r7, #16]
 8010582:	689b      	ldr	r3, [r3, #8]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d00d      	beq.n	80105a4 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8010588:	2100      	movs	r1, #0
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f7fd f8d2 	bl	800d734 <inc_lock>
 8010590:	4602      	mov	r2, r0
 8010592:	693b      	ldr	r3, [r7, #16]
 8010594:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	691b      	ldr	r3, [r3, #16]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d105      	bne.n	80105aa <f_opendir+0xc6>
 801059e:	2312      	movs	r3, #18
 80105a0:	75fb      	strb	r3, [r7, #23]
 80105a2:	e002      	b.n	80105aa <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80105a4:	693b      	ldr	r3, [r7, #16]
 80105a6:	2200      	movs	r2, #0
 80105a8:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80105aa:	7dfb      	ldrb	r3, [r7, #23]
 80105ac:	2b04      	cmp	r3, #4
 80105ae:	d101      	bne.n	80105b4 <f_opendir+0xd0>
 80105b0:	2305      	movs	r3, #5
 80105b2:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80105b4:	7dfb      	ldrb	r3, [r7, #23]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d002      	beq.n	80105c0 <f_opendir+0xdc>
 80105ba:	693b      	ldr	r3, [r7, #16]
 80105bc:	2200      	movs	r2, #0
 80105be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80105c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	3718      	adds	r7, #24
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}

080105ca <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80105ca:	b580      	push	{r7, lr}
 80105cc:	b084      	sub	sp, #16
 80105ce:	af00      	add	r7, sp, #0
 80105d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f107 0208 	add.w	r2, r7, #8
 80105d8:	4611      	mov	r1, r2
 80105da:	4618      	mov	r0, r3
 80105dc:	f7ff f95c 	bl	800f898 <validate>
 80105e0:	4603      	mov	r3, r0
 80105e2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80105e4:	7bfb      	ldrb	r3, [r7, #15]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d110      	bne.n	801060c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	691b      	ldr	r3, [r3, #16]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d006      	beq.n	8010600 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	691b      	ldr	r3, [r3, #16]
 80105f6:	4618      	mov	r0, r3
 80105f8:	f7fd f92a 	bl	800d850 <dec_lock>
 80105fc:	4603      	mov	r3, r0
 80105fe:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8010600:	7bfb      	ldrb	r3, [r7, #15]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d102      	bne.n	801060c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2200      	movs	r2, #0
 801060a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801060c:	7bfb      	ldrb	r3, [r7, #15]
}
 801060e:	4618      	mov	r0, r3
 8010610:	3710      	adds	r7, #16
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}

08010616 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010616:	b580      	push	{r7, lr}
 8010618:	b084      	sub	sp, #16
 801061a:	af00      	add	r7, sp, #0
 801061c:	6078      	str	r0, [r7, #4]
 801061e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f107 0208 	add.w	r2, r7, #8
 8010626:	4611      	mov	r1, r2
 8010628:	4618      	mov	r0, r3
 801062a:	f7ff f935 	bl	800f898 <validate>
 801062e:	4603      	mov	r3, r0
 8010630:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010632:	7bfb      	ldrb	r3, [r7, #15]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d126      	bne.n	8010686 <f_readdir+0x70>
		if (!fno) {
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d106      	bne.n	801064c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801063e:	2100      	movs	r1, #0
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f7fd fd26 	bl	800e092 <dir_sdi>
 8010646:	4603      	mov	r3, r0
 8010648:	73fb      	strb	r3, [r7, #15]
 801064a:	e01c      	b.n	8010686 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801064c:	2100      	movs	r1, #0
 801064e:	6878      	ldr	r0, [r7, #4]
 8010650:	f7fe f8d1 	bl	800e7f6 <dir_read>
 8010654:	4603      	mov	r3, r0
 8010656:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8010658:	7bfb      	ldrb	r3, [r7, #15]
 801065a:	2b04      	cmp	r3, #4
 801065c:	d101      	bne.n	8010662 <f_readdir+0x4c>
 801065e:	2300      	movs	r3, #0
 8010660:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8010662:	7bfb      	ldrb	r3, [r7, #15]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d10e      	bne.n	8010686 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8010668:	6839      	ldr	r1, [r7, #0]
 801066a:	6878      	ldr	r0, [r7, #4]
 801066c:	f7fe fb22 	bl	800ecb4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8010670:	2100      	movs	r1, #0
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	f7fd fd88 	bl	800e188 <dir_next>
 8010678:	4603      	mov	r3, r0
 801067a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801067c:	7bfb      	ldrb	r3, [r7, #15]
 801067e:	2b04      	cmp	r3, #4
 8010680:	d101      	bne.n	8010686 <f_readdir+0x70>
 8010682:	2300      	movs	r3, #0
 8010684:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8010686:	7bfb      	ldrb	r3, [r7, #15]
}
 8010688:	4618      	mov	r0, r3
 801068a:	3710      	adds	r7, #16
 801068c:	46bd      	mov	sp, r7
 801068e:	bd80      	pop	{r7, pc}

08010690 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010690:	b480      	push	{r7}
 8010692:	b087      	sub	sp, #28
 8010694:	af00      	add	r7, sp, #0
 8010696:	60f8      	str	r0, [r7, #12]
 8010698:	60b9      	str	r1, [r7, #8]
 801069a:	4613      	mov	r3, r2
 801069c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801069e:	2301      	movs	r3, #1
 80106a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80106a2:	2300      	movs	r3, #0
 80106a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80106a6:	4b1f      	ldr	r3, [pc, #124]	@ (8010724 <FATFS_LinkDriverEx+0x94>)
 80106a8:	7a5b      	ldrb	r3, [r3, #9]
 80106aa:	b2db      	uxtb	r3, r3
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d131      	bne.n	8010714 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80106b0:	4b1c      	ldr	r3, [pc, #112]	@ (8010724 <FATFS_LinkDriverEx+0x94>)
 80106b2:	7a5b      	ldrb	r3, [r3, #9]
 80106b4:	b2db      	uxtb	r3, r3
 80106b6:	461a      	mov	r2, r3
 80106b8:	4b1a      	ldr	r3, [pc, #104]	@ (8010724 <FATFS_LinkDriverEx+0x94>)
 80106ba:	2100      	movs	r1, #0
 80106bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80106be:	4b19      	ldr	r3, [pc, #100]	@ (8010724 <FATFS_LinkDriverEx+0x94>)
 80106c0:	7a5b      	ldrb	r3, [r3, #9]
 80106c2:	b2db      	uxtb	r3, r3
 80106c4:	4a17      	ldr	r2, [pc, #92]	@ (8010724 <FATFS_LinkDriverEx+0x94>)
 80106c6:	009b      	lsls	r3, r3, #2
 80106c8:	4413      	add	r3, r2
 80106ca:	68fa      	ldr	r2, [r7, #12]
 80106cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80106ce:	4b15      	ldr	r3, [pc, #84]	@ (8010724 <FATFS_LinkDriverEx+0x94>)
 80106d0:	7a5b      	ldrb	r3, [r3, #9]
 80106d2:	b2db      	uxtb	r3, r3
 80106d4:	461a      	mov	r2, r3
 80106d6:	4b13      	ldr	r3, [pc, #76]	@ (8010724 <FATFS_LinkDriverEx+0x94>)
 80106d8:	4413      	add	r3, r2
 80106da:	79fa      	ldrb	r2, [r7, #7]
 80106dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80106de:	4b11      	ldr	r3, [pc, #68]	@ (8010724 <FATFS_LinkDriverEx+0x94>)
 80106e0:	7a5b      	ldrb	r3, [r3, #9]
 80106e2:	b2db      	uxtb	r3, r3
 80106e4:	1c5a      	adds	r2, r3, #1
 80106e6:	b2d1      	uxtb	r1, r2
 80106e8:	4a0e      	ldr	r2, [pc, #56]	@ (8010724 <FATFS_LinkDriverEx+0x94>)
 80106ea:	7251      	strb	r1, [r2, #9]
 80106ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80106ee:	7dbb      	ldrb	r3, [r7, #22]
 80106f0:	3330      	adds	r3, #48	@ 0x30
 80106f2:	b2da      	uxtb	r2, r3
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	3301      	adds	r3, #1
 80106fc:	223a      	movs	r2, #58	@ 0x3a
 80106fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	3302      	adds	r3, #2
 8010704:	222f      	movs	r2, #47	@ 0x2f
 8010706:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	3303      	adds	r3, #3
 801070c:	2200      	movs	r2, #0
 801070e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010710:	2300      	movs	r3, #0
 8010712:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010714:	7dfb      	ldrb	r3, [r7, #23]
}
 8010716:	4618      	mov	r0, r3
 8010718:	371c      	adds	r7, #28
 801071a:	46bd      	mov	sp, r7
 801071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010720:	4770      	bx	lr
 8010722:	bf00      	nop
 8010724:	200022e0 	.word	0x200022e0

08010728 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b082      	sub	sp, #8
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
 8010730:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010732:	2200      	movs	r2, #0
 8010734:	6839      	ldr	r1, [r7, #0]
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f7ff ffaa 	bl	8010690 <FATFS_LinkDriverEx>
 801073c:	4603      	mov	r3, r0
}
 801073e:	4618      	mov	r0, r3
 8010740:	3708      	adds	r7, #8
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}
	...

08010748 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010748:	b480      	push	{r7}
 801074a:	b085      	sub	sp, #20
 801074c:	af00      	add	r7, sp, #0
 801074e:	4603      	mov	r3, r0
 8010750:	6039      	str	r1, [r7, #0]
 8010752:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010754:	88fb      	ldrh	r3, [r7, #6]
 8010756:	2b7f      	cmp	r3, #127	@ 0x7f
 8010758:	d802      	bhi.n	8010760 <ff_convert+0x18>
		c = chr;
 801075a:	88fb      	ldrh	r3, [r7, #6]
 801075c:	81fb      	strh	r3, [r7, #14]
 801075e:	e025      	b.n	80107ac <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d00b      	beq.n	801077e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010766:	88fb      	ldrh	r3, [r7, #6]
 8010768:	2bff      	cmp	r3, #255	@ 0xff
 801076a:	d805      	bhi.n	8010778 <ff_convert+0x30>
 801076c:	88fb      	ldrh	r3, [r7, #6]
 801076e:	3b80      	subs	r3, #128	@ 0x80
 8010770:	4a12      	ldr	r2, [pc, #72]	@ (80107bc <ff_convert+0x74>)
 8010772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010776:	e000      	b.n	801077a <ff_convert+0x32>
 8010778:	2300      	movs	r3, #0
 801077a:	81fb      	strh	r3, [r7, #14]
 801077c:	e016      	b.n	80107ac <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801077e:	2300      	movs	r3, #0
 8010780:	81fb      	strh	r3, [r7, #14]
 8010782:	e009      	b.n	8010798 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010784:	89fb      	ldrh	r3, [r7, #14]
 8010786:	4a0d      	ldr	r2, [pc, #52]	@ (80107bc <ff_convert+0x74>)
 8010788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801078c:	88fa      	ldrh	r2, [r7, #6]
 801078e:	429a      	cmp	r2, r3
 8010790:	d006      	beq.n	80107a0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010792:	89fb      	ldrh	r3, [r7, #14]
 8010794:	3301      	adds	r3, #1
 8010796:	81fb      	strh	r3, [r7, #14]
 8010798:	89fb      	ldrh	r3, [r7, #14]
 801079a:	2b7f      	cmp	r3, #127	@ 0x7f
 801079c:	d9f2      	bls.n	8010784 <ff_convert+0x3c>
 801079e:	e000      	b.n	80107a2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80107a0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80107a2:	89fb      	ldrh	r3, [r7, #14]
 80107a4:	3380      	adds	r3, #128	@ 0x80
 80107a6:	b29b      	uxth	r3, r3
 80107a8:	b2db      	uxtb	r3, r3
 80107aa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80107ac:	89fb      	ldrh	r3, [r7, #14]
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	3714      	adds	r7, #20
 80107b2:	46bd      	mov	sp, r7
 80107b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b8:	4770      	bx	lr
 80107ba:	bf00      	nop
 80107bc:	080129b8 	.word	0x080129b8

080107c0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80107c0:	b480      	push	{r7}
 80107c2:	b087      	sub	sp, #28
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	4603      	mov	r3, r0
 80107c8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80107ca:	88fb      	ldrh	r3, [r7, #6]
 80107cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80107d0:	d201      	bcs.n	80107d6 <ff_wtoupper+0x16>
 80107d2:	4b3e      	ldr	r3, [pc, #248]	@ (80108cc <ff_wtoupper+0x10c>)
 80107d4:	e000      	b.n	80107d8 <ff_wtoupper+0x18>
 80107d6:	4b3e      	ldr	r3, [pc, #248]	@ (80108d0 <ff_wtoupper+0x110>)
 80107d8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	1c9a      	adds	r2, r3, #2
 80107de:	617a      	str	r2, [r7, #20]
 80107e0:	881b      	ldrh	r3, [r3, #0]
 80107e2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80107e4:	8a7b      	ldrh	r3, [r7, #18]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d068      	beq.n	80108bc <ff_wtoupper+0xfc>
 80107ea:	88fa      	ldrh	r2, [r7, #6]
 80107ec:	8a7b      	ldrh	r3, [r7, #18]
 80107ee:	429a      	cmp	r2, r3
 80107f0:	d364      	bcc.n	80108bc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	1c9a      	adds	r2, r3, #2
 80107f6:	617a      	str	r2, [r7, #20]
 80107f8:	881b      	ldrh	r3, [r3, #0]
 80107fa:	823b      	strh	r3, [r7, #16]
 80107fc:	8a3b      	ldrh	r3, [r7, #16]
 80107fe:	0a1b      	lsrs	r3, r3, #8
 8010800:	81fb      	strh	r3, [r7, #14]
 8010802:	8a3b      	ldrh	r3, [r7, #16]
 8010804:	b2db      	uxtb	r3, r3
 8010806:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010808:	88fa      	ldrh	r2, [r7, #6]
 801080a:	8a79      	ldrh	r1, [r7, #18]
 801080c:	8a3b      	ldrh	r3, [r7, #16]
 801080e:	440b      	add	r3, r1
 8010810:	429a      	cmp	r2, r3
 8010812:	da49      	bge.n	80108a8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010814:	89fb      	ldrh	r3, [r7, #14]
 8010816:	2b08      	cmp	r3, #8
 8010818:	d84f      	bhi.n	80108ba <ff_wtoupper+0xfa>
 801081a:	a201      	add	r2, pc, #4	@ (adr r2, 8010820 <ff_wtoupper+0x60>)
 801081c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010820:	08010845 	.word	0x08010845
 8010824:	08010857 	.word	0x08010857
 8010828:	0801086d 	.word	0x0801086d
 801082c:	08010875 	.word	0x08010875
 8010830:	0801087d 	.word	0x0801087d
 8010834:	08010885 	.word	0x08010885
 8010838:	0801088d 	.word	0x0801088d
 801083c:	08010895 	.word	0x08010895
 8010840:	0801089d 	.word	0x0801089d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010844:	88fa      	ldrh	r2, [r7, #6]
 8010846:	8a7b      	ldrh	r3, [r7, #18]
 8010848:	1ad3      	subs	r3, r2, r3
 801084a:	005b      	lsls	r3, r3, #1
 801084c:	697a      	ldr	r2, [r7, #20]
 801084e:	4413      	add	r3, r2
 8010850:	881b      	ldrh	r3, [r3, #0]
 8010852:	80fb      	strh	r3, [r7, #6]
 8010854:	e027      	b.n	80108a6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010856:	88fa      	ldrh	r2, [r7, #6]
 8010858:	8a7b      	ldrh	r3, [r7, #18]
 801085a:	1ad3      	subs	r3, r2, r3
 801085c:	b29b      	uxth	r3, r3
 801085e:	f003 0301 	and.w	r3, r3, #1
 8010862:	b29b      	uxth	r3, r3
 8010864:	88fa      	ldrh	r2, [r7, #6]
 8010866:	1ad3      	subs	r3, r2, r3
 8010868:	80fb      	strh	r3, [r7, #6]
 801086a:	e01c      	b.n	80108a6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801086c:	88fb      	ldrh	r3, [r7, #6]
 801086e:	3b10      	subs	r3, #16
 8010870:	80fb      	strh	r3, [r7, #6]
 8010872:	e018      	b.n	80108a6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010874:	88fb      	ldrh	r3, [r7, #6]
 8010876:	3b20      	subs	r3, #32
 8010878:	80fb      	strh	r3, [r7, #6]
 801087a:	e014      	b.n	80108a6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801087c:	88fb      	ldrh	r3, [r7, #6]
 801087e:	3b30      	subs	r3, #48	@ 0x30
 8010880:	80fb      	strh	r3, [r7, #6]
 8010882:	e010      	b.n	80108a6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010884:	88fb      	ldrh	r3, [r7, #6]
 8010886:	3b1a      	subs	r3, #26
 8010888:	80fb      	strh	r3, [r7, #6]
 801088a:	e00c      	b.n	80108a6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801088c:	88fb      	ldrh	r3, [r7, #6]
 801088e:	3308      	adds	r3, #8
 8010890:	80fb      	strh	r3, [r7, #6]
 8010892:	e008      	b.n	80108a6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010894:	88fb      	ldrh	r3, [r7, #6]
 8010896:	3b50      	subs	r3, #80	@ 0x50
 8010898:	80fb      	strh	r3, [r7, #6]
 801089a:	e004      	b.n	80108a6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801089c:	88fb      	ldrh	r3, [r7, #6]
 801089e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80108a2:	80fb      	strh	r3, [r7, #6]
 80108a4:	bf00      	nop
			}
			break;
 80108a6:	e008      	b.n	80108ba <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80108a8:	89fb      	ldrh	r3, [r7, #14]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d195      	bne.n	80107da <ff_wtoupper+0x1a>
 80108ae:	8a3b      	ldrh	r3, [r7, #16]
 80108b0:	005b      	lsls	r3, r3, #1
 80108b2:	697a      	ldr	r2, [r7, #20]
 80108b4:	4413      	add	r3, r2
 80108b6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80108b8:	e78f      	b.n	80107da <ff_wtoupper+0x1a>
			break;
 80108ba:	bf00      	nop
	}

	return chr;
 80108bc:	88fb      	ldrh	r3, [r7, #6]
}
 80108be:	4618      	mov	r0, r3
 80108c0:	371c      	adds	r7, #28
 80108c2:	46bd      	mov	sp, r7
 80108c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c8:	4770      	bx	lr
 80108ca:	bf00      	nop
 80108cc:	08012ab8 	.word	0x08012ab8
 80108d0:	08012cac 	.word	0x08012cac

080108d4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80108d8:	2201      	movs	r2, #1
 80108da:	490e      	ldr	r1, [pc, #56]	@ (8010914 <MX_USB_HOST_Init+0x40>)
 80108dc:	480e      	ldr	r0, [pc, #56]	@ (8010918 <MX_USB_HOST_Init+0x44>)
 80108de:	f7fb f8c8 	bl	800ba72 <USBH_Init>
 80108e2:	4603      	mov	r3, r0
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d001      	beq.n	80108ec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80108e8:	f7f1 fb7e 	bl	8001fe8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 80108ec:	490b      	ldr	r1, [pc, #44]	@ (801091c <MX_USB_HOST_Init+0x48>)
 80108ee:	480a      	ldr	r0, [pc, #40]	@ (8010918 <MX_USB_HOST_Init+0x44>)
 80108f0:	f7fb f94d 	bl	800bb8e <USBH_RegisterClass>
 80108f4:	4603      	mov	r3, r0
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d001      	beq.n	80108fe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80108fa:	f7f1 fb75 	bl	8001fe8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80108fe:	4806      	ldr	r0, [pc, #24]	@ (8010918 <MX_USB_HOST_Init+0x44>)
 8010900:	f7fb f9d1 	bl	800bca6 <USBH_Start>
 8010904:	4603      	mov	r3, r0
 8010906:	2b00      	cmp	r3, #0
 8010908:	d001      	beq.n	801090e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801090a:	f7f1 fb6d 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801090e:	bf00      	nop
 8010910:	bd80      	pop	{r7, pc}
 8010912:	bf00      	nop
 8010914:	08010935 	.word	0x08010935
 8010918:	200022ec 	.word	0x200022ec
 801091c:	2000008c 	.word	0x2000008c

08010920 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010920:	b580      	push	{r7, lr}
 8010922:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8010924:	4802      	ldr	r0, [pc, #8]	@ (8010930 <MX_USB_HOST_Process+0x10>)
 8010926:	f7fb f9cf 	bl	800bcc8 <USBH_Process>
}
 801092a:	bf00      	nop
 801092c:	bd80      	pop	{r7, pc}
 801092e:	bf00      	nop
 8010930:	200022ec 	.word	0x200022ec

08010934 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010934:	b480      	push	{r7}
 8010936:	b083      	sub	sp, #12
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
 801093c:	460b      	mov	r3, r1
 801093e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010940:	78fb      	ldrb	r3, [r7, #3]
 8010942:	3b01      	subs	r3, #1
 8010944:	2b04      	cmp	r3, #4
 8010946:	d819      	bhi.n	801097c <USBH_UserProcess+0x48>
 8010948:	a201      	add	r2, pc, #4	@ (adr r2, 8010950 <USBH_UserProcess+0x1c>)
 801094a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801094e:	bf00      	nop
 8010950:	0801097d 	.word	0x0801097d
 8010954:	0801096d 	.word	0x0801096d
 8010958:	0801097d 	.word	0x0801097d
 801095c:	08010975 	.word	0x08010975
 8010960:	08010965 	.word	0x08010965
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010964:	4b09      	ldr	r3, [pc, #36]	@ (801098c <USBH_UserProcess+0x58>)
 8010966:	2203      	movs	r2, #3
 8010968:	701a      	strb	r2, [r3, #0]
  break;
 801096a:	e008      	b.n	801097e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801096c:	4b07      	ldr	r3, [pc, #28]	@ (801098c <USBH_UserProcess+0x58>)
 801096e:	2202      	movs	r2, #2
 8010970:	701a      	strb	r2, [r3, #0]
  break;
 8010972:	e004      	b.n	801097e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010974:	4b05      	ldr	r3, [pc, #20]	@ (801098c <USBH_UserProcess+0x58>)
 8010976:	2201      	movs	r2, #1
 8010978:	701a      	strb	r2, [r3, #0]
  break;
 801097a:	e000      	b.n	801097e <USBH_UserProcess+0x4a>

  default:
  break;
 801097c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801097e:	bf00      	nop
 8010980:	370c      	adds	r7, #12
 8010982:	46bd      	mov	sp, r7
 8010984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010988:	4770      	bx	lr
 801098a:	bf00      	nop
 801098c:	200026c4 	.word	0x200026c4

08010990 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b08a      	sub	sp, #40	@ 0x28
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010998:	f107 0314 	add.w	r3, r7, #20
 801099c:	2200      	movs	r2, #0
 801099e:	601a      	str	r2, [r3, #0]
 80109a0:	605a      	str	r2, [r3, #4]
 80109a2:	609a      	str	r2, [r3, #8]
 80109a4:	60da      	str	r2, [r3, #12]
 80109a6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80109b0:	d147      	bne.n	8010a42 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80109b2:	2300      	movs	r3, #0
 80109b4:	613b      	str	r3, [r7, #16]
 80109b6:	4b25      	ldr	r3, [pc, #148]	@ (8010a4c <HAL_HCD_MspInit+0xbc>)
 80109b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109ba:	4a24      	ldr	r2, [pc, #144]	@ (8010a4c <HAL_HCD_MspInit+0xbc>)
 80109bc:	f043 0301 	orr.w	r3, r3, #1
 80109c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80109c2:	4b22      	ldr	r3, [pc, #136]	@ (8010a4c <HAL_HCD_MspInit+0xbc>)
 80109c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109c6:	f003 0301 	and.w	r3, r3, #1
 80109ca:	613b      	str	r3, [r7, #16]
 80109cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80109ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80109d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80109d4:	2300      	movs	r3, #0
 80109d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109d8:	2300      	movs	r3, #0
 80109da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80109dc:	f107 0314 	add.w	r3, r7, #20
 80109e0:	4619      	mov	r1, r3
 80109e2:	481b      	ldr	r0, [pc, #108]	@ (8010a50 <HAL_HCD_MspInit+0xc0>)
 80109e4:	f7f2 fed8 	bl	8003798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80109e8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80109ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80109ee:	2302      	movs	r3, #2
 80109f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109f2:	2300      	movs	r3, #0
 80109f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80109f6:	2303      	movs	r3, #3
 80109f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80109fa:	230a      	movs	r3, #10
 80109fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80109fe:	f107 0314 	add.w	r3, r7, #20
 8010a02:	4619      	mov	r1, r3
 8010a04:	4812      	ldr	r0, [pc, #72]	@ (8010a50 <HAL_HCD_MspInit+0xc0>)
 8010a06:	f7f2 fec7 	bl	8003798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010a0a:	4b10      	ldr	r3, [pc, #64]	@ (8010a4c <HAL_HCD_MspInit+0xbc>)
 8010a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a0e:	4a0f      	ldr	r2, [pc, #60]	@ (8010a4c <HAL_HCD_MspInit+0xbc>)
 8010a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a14:	6353      	str	r3, [r2, #52]	@ 0x34
 8010a16:	2300      	movs	r3, #0
 8010a18:	60fb      	str	r3, [r7, #12]
 8010a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8010a4c <HAL_HCD_MspInit+0xbc>)
 8010a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8010a4c <HAL_HCD_MspInit+0xbc>)
 8010a20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8010a26:	4b09      	ldr	r3, [pc, #36]	@ (8010a4c <HAL_HCD_MspInit+0xbc>)
 8010a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010a2e:	60fb      	str	r3, [r7, #12]
 8010a30:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010a32:	2200      	movs	r2, #0
 8010a34:	2100      	movs	r1, #0
 8010a36:	2043      	movs	r0, #67	@ 0x43
 8010a38:	f7f2 fa17 	bl	8002e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010a3c:	2043      	movs	r0, #67	@ 0x43
 8010a3e:	f7f2 fa30 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010a42:	bf00      	nop
 8010a44:	3728      	adds	r7, #40	@ 0x28
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}
 8010a4a:	bf00      	nop
 8010a4c:	40023800 	.word	0x40023800
 8010a50:	40020000 	.word	0x40020000

08010a54 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8010a62:	4618      	mov	r0, r3
 8010a64:	f7fb fd07 	bl	800c476 <USBH_LL_IncTimer>
}
 8010a68:	bf00      	nop
 8010a6a:	3708      	adds	r7, #8
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}

08010a70 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b082      	sub	sp, #8
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7fb fd3f 	bl	800c502 <USBH_LL_Connect>
}
 8010a84:	bf00      	nop
 8010a86:	3708      	adds	r7, #8
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}

08010a8c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b082      	sub	sp, #8
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7fb fd48 	bl	800c530 <USBH_LL_Disconnect>
}
 8010aa0:	bf00      	nop
 8010aa2:	3708      	adds	r7, #8
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}

08010aa8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010aa8:	b480      	push	{r7}
 8010aaa:	b083      	sub	sp, #12
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
 8010ab0:	460b      	mov	r3, r1
 8010ab2:	70fb      	strb	r3, [r7, #3]
 8010ab4:	4613      	mov	r3, r2
 8010ab6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010ab8:	bf00      	nop
 8010aba:	370c      	adds	r7, #12
 8010abc:	46bd      	mov	sp, r7
 8010abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac2:	4770      	bx	lr

08010ac4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f7fb fcf9 	bl	800c4ca <USBH_LL_PortEnabled>
}
 8010ad8:	bf00      	nop
 8010ada:	3708      	adds	r7, #8
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}

08010ae0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b082      	sub	sp, #8
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7fb fcf9 	bl	800c4e6 <USBH_LL_PortDisabled>
}
 8010af4:	bf00      	nop
 8010af6:	3708      	adds	r7, #8
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}

08010afc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b082      	sub	sp, #8
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010b0a:	2b01      	cmp	r3, #1
 8010b0c:	d12a      	bne.n	8010b64 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010b0e:	4a18      	ldr	r2, [pc, #96]	@ (8010b70 <USBH_LL_Init+0x74>)
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	4a15      	ldr	r2, [pc, #84]	@ (8010b70 <USBH_LL_Init+0x74>)
 8010b1a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010b1e:	4b14      	ldr	r3, [pc, #80]	@ (8010b70 <USBH_LL_Init+0x74>)
 8010b20:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8010b24:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010b26:	4b12      	ldr	r3, [pc, #72]	@ (8010b70 <USBH_LL_Init+0x74>)
 8010b28:	2208      	movs	r2, #8
 8010b2a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010b2c:	4b10      	ldr	r3, [pc, #64]	@ (8010b70 <USBH_LL_Init+0x74>)
 8010b2e:	2201      	movs	r2, #1
 8010b30:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010b32:	4b0f      	ldr	r3, [pc, #60]	@ (8010b70 <USBH_LL_Init+0x74>)
 8010b34:	2200      	movs	r2, #0
 8010b36:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010b38:	4b0d      	ldr	r3, [pc, #52]	@ (8010b70 <USBH_LL_Init+0x74>)
 8010b3a:	2202      	movs	r2, #2
 8010b3c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8010b70 <USBH_LL_Init+0x74>)
 8010b40:	2200      	movs	r2, #0
 8010b42:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010b44:	480a      	ldr	r0, [pc, #40]	@ (8010b70 <USBH_LL_Init+0x74>)
 8010b46:	f7f3 f8c1 	bl	8003ccc <HAL_HCD_Init>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d001      	beq.n	8010b54 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010b50:	f7f1 fa4a 	bl	8001fe8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010b54:	4806      	ldr	r0, [pc, #24]	@ (8010b70 <USBH_LL_Init+0x74>)
 8010b56:	f7f3 fca4 	bl	80044a2 <HAL_HCD_GetCurrentFrame>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	4619      	mov	r1, r3
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f7fb fc7a 	bl	800c458 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010b64:	2300      	movs	r3, #0
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3708      	adds	r7, #8
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}
 8010b6e:	bf00      	nop
 8010b70:	200026c8 	.word	0x200026c8

08010b74 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b084      	sub	sp, #16
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010b80:	2300      	movs	r3, #0
 8010b82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7f3 fc13 	bl	80043b6 <HAL_HCD_Start>
 8010b90:	4603      	mov	r3, r0
 8010b92:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010b94:	7bfb      	ldrb	r3, [r7, #15]
 8010b96:	4618      	mov	r0, r3
 8010b98:	f000 f98c 	bl	8010eb4 <USBH_Get_USB_Status>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ba0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3710      	adds	r7, #16
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}

08010baa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b084      	sub	sp, #16
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7f3 fc1b 	bl	80043fc <HAL_HCD_Stop>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010bca:	7bfb      	ldrb	r3, [r7, #15]
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f000 f971 	bl	8010eb4 <USBH_Get_USB_Status>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3710      	adds	r7, #16
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}

08010be0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b084      	sub	sp, #16
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010be8:	2301      	movs	r3, #1
 8010bea:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7f3 fc63 	bl	80044be <HAL_HCD_GetCurrentSpeed>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	2b02      	cmp	r3, #2
 8010bfc:	d00c      	beq.n	8010c18 <USBH_LL_GetSpeed+0x38>
 8010bfe:	2b02      	cmp	r3, #2
 8010c00:	d80d      	bhi.n	8010c1e <USBH_LL_GetSpeed+0x3e>
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d002      	beq.n	8010c0c <USBH_LL_GetSpeed+0x2c>
 8010c06:	2b01      	cmp	r3, #1
 8010c08:	d003      	beq.n	8010c12 <USBH_LL_GetSpeed+0x32>
 8010c0a:	e008      	b.n	8010c1e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	73fb      	strb	r3, [r7, #15]
    break;
 8010c10:	e008      	b.n	8010c24 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010c12:	2301      	movs	r3, #1
 8010c14:	73fb      	strb	r3, [r7, #15]
    break;
 8010c16:	e005      	b.n	8010c24 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010c18:	2302      	movs	r3, #2
 8010c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8010c1c:	e002      	b.n	8010c24 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010c1e:	2301      	movs	r3, #1
 8010c20:	73fb      	strb	r3, [r7, #15]
    break;
 8010c22:	bf00      	nop
  }
  return  speed;
 8010c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c26:	4618      	mov	r0, r3
 8010c28:	3710      	adds	r7, #16
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}

08010c2e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010c2e:	b580      	push	{r7, lr}
 8010c30:	b084      	sub	sp, #16
 8010c32:	af00      	add	r7, sp, #0
 8010c34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c36:	2300      	movs	r3, #0
 8010c38:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010c44:	4618      	mov	r0, r3
 8010c46:	f7f3 fbf6 	bl	8004436 <HAL_HCD_ResetPort>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010c4e:	7bfb      	ldrb	r3, [r7, #15]
 8010c50:	4618      	mov	r0, r3
 8010c52:	f000 f92f 	bl	8010eb4 <USBH_Get_USB_Status>
 8010c56:	4603      	mov	r3, r0
 8010c58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3710      	adds	r7, #16
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}

08010c64 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b082      	sub	sp, #8
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	460b      	mov	r3, r1
 8010c6e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010c76:	78fa      	ldrb	r2, [r7, #3]
 8010c78:	4611      	mov	r1, r2
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7f3 fbfd 	bl	800447a <HAL_HCD_HC_GetXferCount>
 8010c80:	4603      	mov	r3, r0
}
 8010c82:	4618      	mov	r0, r3
 8010c84:	3708      	adds	r7, #8
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}

08010c8a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010c8a:	b590      	push	{r4, r7, lr}
 8010c8c:	b089      	sub	sp, #36	@ 0x24
 8010c8e:	af04      	add	r7, sp, #16
 8010c90:	6078      	str	r0, [r7, #4]
 8010c92:	4608      	mov	r0, r1
 8010c94:	4611      	mov	r1, r2
 8010c96:	461a      	mov	r2, r3
 8010c98:	4603      	mov	r3, r0
 8010c9a:	70fb      	strb	r3, [r7, #3]
 8010c9c:	460b      	mov	r3, r1
 8010c9e:	70bb      	strb	r3, [r7, #2]
 8010ca0:	4613      	mov	r3, r2
 8010ca2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010ca8:	2300      	movs	r3, #0
 8010caa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8010cb2:	787c      	ldrb	r4, [r7, #1]
 8010cb4:	78ba      	ldrb	r2, [r7, #2]
 8010cb6:	78f9      	ldrb	r1, [r7, #3]
 8010cb8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010cba:	9302      	str	r3, [sp, #8]
 8010cbc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010cc0:	9301      	str	r3, [sp, #4]
 8010cc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010cc6:	9300      	str	r3, [sp, #0]
 8010cc8:	4623      	mov	r3, r4
 8010cca:	f7f3 f861 	bl	8003d90 <HAL_HCD_HC_Init>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010cd2:	7bfb      	ldrb	r3, [r7, #15]
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f000 f8ed 	bl	8010eb4 <USBH_Get_USB_Status>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010cde:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3714      	adds	r7, #20
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd90      	pop	{r4, r7, pc}

08010ce8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b084      	sub	sp, #16
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
 8010cf0:	460b      	mov	r3, r1
 8010cf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010d02:	78fa      	ldrb	r2, [r7, #3]
 8010d04:	4611      	mov	r1, r2
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7f3 f8d1 	bl	8003eae <HAL_HCD_HC_Halt>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010d10:	7bfb      	ldrb	r3, [r7, #15]
 8010d12:	4618      	mov	r0, r3
 8010d14:	f000 f8ce 	bl	8010eb4 <USBH_Get_USB_Status>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	3710      	adds	r7, #16
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}

08010d26 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010d26:	b590      	push	{r4, r7, lr}
 8010d28:	b089      	sub	sp, #36	@ 0x24
 8010d2a:	af04      	add	r7, sp, #16
 8010d2c:	6078      	str	r0, [r7, #4]
 8010d2e:	4608      	mov	r0, r1
 8010d30:	4611      	mov	r1, r2
 8010d32:	461a      	mov	r2, r3
 8010d34:	4603      	mov	r3, r0
 8010d36:	70fb      	strb	r3, [r7, #3]
 8010d38:	460b      	mov	r3, r1
 8010d3a:	70bb      	strb	r3, [r7, #2]
 8010d3c:	4613      	mov	r3, r2
 8010d3e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d40:	2300      	movs	r3, #0
 8010d42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010d44:	2300      	movs	r3, #0
 8010d46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8010d4e:	787c      	ldrb	r4, [r7, #1]
 8010d50:	78ba      	ldrb	r2, [r7, #2]
 8010d52:	78f9      	ldrb	r1, [r7, #3]
 8010d54:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010d58:	9303      	str	r3, [sp, #12]
 8010d5a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010d5c:	9302      	str	r3, [sp, #8]
 8010d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d60:	9301      	str	r3, [sp, #4]
 8010d62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010d66:	9300      	str	r3, [sp, #0]
 8010d68:	4623      	mov	r3, r4
 8010d6a:	f7f3 f8c3 	bl	8003ef4 <HAL_HCD_HC_SubmitRequest>
 8010d6e:	4603      	mov	r3, r0
 8010d70:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010d72:	7bfb      	ldrb	r3, [r7, #15]
 8010d74:	4618      	mov	r0, r3
 8010d76:	f000 f89d 	bl	8010eb4 <USBH_Get_USB_Status>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	3714      	adds	r7, #20
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd90      	pop	{r4, r7, pc}

08010d88 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b082      	sub	sp, #8
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	460b      	mov	r3, r1
 8010d92:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010d9a:	78fa      	ldrb	r2, [r7, #3]
 8010d9c:	4611      	mov	r1, r2
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7f3 fb57 	bl	8004452 <HAL_HCD_HC_GetURBState>
 8010da4:	4603      	mov	r3, r0
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	3708      	adds	r7, #8
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}

08010dae <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010dae:	b580      	push	{r7, lr}
 8010db0:	b082      	sub	sp, #8
 8010db2:	af00      	add	r7, sp, #0
 8010db4:	6078      	str	r0, [r7, #4]
 8010db6:	460b      	mov	r3, r1
 8010db8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010dc0:	2b01      	cmp	r3, #1
 8010dc2:	d103      	bne.n	8010dcc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010dc4:	78fb      	ldrb	r3, [r7, #3]
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f000 f8a0 	bl	8010f0c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010dcc:	20c8      	movs	r0, #200	@ 0xc8
 8010dce:	f7f1 ff4d 	bl	8002c6c <HAL_Delay>
  return USBH_OK;
 8010dd2:	2300      	movs	r3, #0
}
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	3708      	adds	r7, #8
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	bd80      	pop	{r7, pc}

08010ddc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010ddc:	b480      	push	{r7}
 8010dde:	b085      	sub	sp, #20
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
 8010de4:	460b      	mov	r3, r1
 8010de6:	70fb      	strb	r3, [r7, #3]
 8010de8:	4613      	mov	r3, r2
 8010dea:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010df2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010df4:	78fb      	ldrb	r3, [r7, #3]
 8010df6:	68fa      	ldr	r2, [r7, #12]
 8010df8:	212c      	movs	r1, #44	@ 0x2c
 8010dfa:	fb01 f303 	mul.w	r3, r1, r3
 8010dfe:	4413      	add	r3, r2
 8010e00:	333b      	adds	r3, #59	@ 0x3b
 8010e02:	781b      	ldrb	r3, [r3, #0]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d009      	beq.n	8010e1c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010e08:	78fb      	ldrb	r3, [r7, #3]
 8010e0a:	68fa      	ldr	r2, [r7, #12]
 8010e0c:	212c      	movs	r1, #44	@ 0x2c
 8010e0e:	fb01 f303 	mul.w	r3, r1, r3
 8010e12:	4413      	add	r3, r2
 8010e14:	3354      	adds	r3, #84	@ 0x54
 8010e16:	78ba      	ldrb	r2, [r7, #2]
 8010e18:	701a      	strb	r2, [r3, #0]
 8010e1a:	e008      	b.n	8010e2e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010e1c:	78fb      	ldrb	r3, [r7, #3]
 8010e1e:	68fa      	ldr	r2, [r7, #12]
 8010e20:	212c      	movs	r1, #44	@ 0x2c
 8010e22:	fb01 f303 	mul.w	r3, r1, r3
 8010e26:	4413      	add	r3, r2
 8010e28:	3355      	adds	r3, #85	@ 0x55
 8010e2a:	78ba      	ldrb	r2, [r7, #2]
 8010e2c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010e2e:	2300      	movs	r3, #0
}
 8010e30:	4618      	mov	r0, r3
 8010e32:	3714      	adds	r7, #20
 8010e34:	46bd      	mov	sp, r7
 8010e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3a:	4770      	bx	lr

08010e3c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010e3c:	b480      	push	{r7}
 8010e3e:	b085      	sub	sp, #20
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
 8010e44:	460b      	mov	r3, r1
 8010e46:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8010e48:	2300      	movs	r3, #0
 8010e4a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010e52:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8010e54:	78fb      	ldrb	r3, [r7, #3]
 8010e56:	68ba      	ldr	r2, [r7, #8]
 8010e58:	212c      	movs	r1, #44	@ 0x2c
 8010e5a:	fb01 f303 	mul.w	r3, r1, r3
 8010e5e:	4413      	add	r3, r2
 8010e60:	333b      	adds	r3, #59	@ 0x3b
 8010e62:	781b      	ldrb	r3, [r3, #0]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d009      	beq.n	8010e7c <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8010e68:	78fb      	ldrb	r3, [r7, #3]
 8010e6a:	68ba      	ldr	r2, [r7, #8]
 8010e6c:	212c      	movs	r1, #44	@ 0x2c
 8010e6e:	fb01 f303 	mul.w	r3, r1, r3
 8010e72:	4413      	add	r3, r2
 8010e74:	3354      	adds	r3, #84	@ 0x54
 8010e76:	781b      	ldrb	r3, [r3, #0]
 8010e78:	73fb      	strb	r3, [r7, #15]
 8010e7a:	e008      	b.n	8010e8e <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8010e7c:	78fb      	ldrb	r3, [r7, #3]
 8010e7e:	68ba      	ldr	r2, [r7, #8]
 8010e80:	212c      	movs	r1, #44	@ 0x2c
 8010e82:	fb01 f303 	mul.w	r3, r1, r3
 8010e86:	4413      	add	r3, r2
 8010e88:	3355      	adds	r3, #85	@ 0x55
 8010e8a:	781b      	ldrb	r3, [r3, #0]
 8010e8c:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8010e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e90:	4618      	mov	r0, r3
 8010e92:	3714      	adds	r7, #20
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr

08010e9c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b082      	sub	sp, #8
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f7f1 fee1 	bl	8002c6c <HAL_Delay>
}
 8010eaa:	bf00      	nop
 8010eac:	3708      	adds	r7, #8
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
	...

08010eb4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010eb4:	b480      	push	{r7}
 8010eb6:	b085      	sub	sp, #20
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	4603      	mov	r3, r0
 8010ebc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010ec2:	79fb      	ldrb	r3, [r7, #7]
 8010ec4:	2b03      	cmp	r3, #3
 8010ec6:	d817      	bhi.n	8010ef8 <USBH_Get_USB_Status+0x44>
 8010ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8010ed0 <USBH_Get_USB_Status+0x1c>)
 8010eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ece:	bf00      	nop
 8010ed0:	08010ee1 	.word	0x08010ee1
 8010ed4:	08010ee7 	.word	0x08010ee7
 8010ed8:	08010eed 	.word	0x08010eed
 8010edc:	08010ef3 	.word	0x08010ef3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	73fb      	strb	r3, [r7, #15]
    break;
 8010ee4:	e00b      	b.n	8010efe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010ee6:	2302      	movs	r3, #2
 8010ee8:	73fb      	strb	r3, [r7, #15]
    break;
 8010eea:	e008      	b.n	8010efe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010eec:	2301      	movs	r3, #1
 8010eee:	73fb      	strb	r3, [r7, #15]
    break;
 8010ef0:	e005      	b.n	8010efe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010ef2:	2302      	movs	r3, #2
 8010ef4:	73fb      	strb	r3, [r7, #15]
    break;
 8010ef6:	e002      	b.n	8010efe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010ef8:	2302      	movs	r3, #2
 8010efa:	73fb      	strb	r3, [r7, #15]
    break;
 8010efc:	bf00      	nop
  }
  return usb_status;
 8010efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	3714      	adds	r7, #20
 8010f04:	46bd      	mov	sp, r7
 8010f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0a:	4770      	bx	lr

08010f0c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b084      	sub	sp, #16
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	4603      	mov	r3, r0
 8010f14:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010f16:	79fb      	ldrb	r3, [r7, #7]
 8010f18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010f1a:	79fb      	ldrb	r3, [r7, #7]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d102      	bne.n	8010f26 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010f20:	2301      	movs	r3, #1
 8010f22:	73fb      	strb	r3, [r7, #15]
 8010f24:	e001      	b.n	8010f2a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8010f26:	2300      	movs	r3, #0
 8010f28:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8010f2a:	7bfb      	ldrb	r3, [r7, #15]
 8010f2c:	461a      	mov	r2, r3
 8010f2e:	2101      	movs	r1, #1
 8010f30:	4803      	ldr	r0, [pc, #12]	@ (8010f40 <MX_DriverVbusFS+0x34>)
 8010f32:	f7f2 fe99 	bl	8003c68 <HAL_GPIO_WritePin>
}
 8010f36:	bf00      	nop
 8010f38:	3710      	adds	r7, #16
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}
 8010f3e:	bf00      	nop
 8010f40:	40020800 	.word	0x40020800

08010f44 <malloc>:
 8010f44:	4b02      	ldr	r3, [pc, #8]	@ (8010f50 <malloc+0xc>)
 8010f46:	4601      	mov	r1, r0
 8010f48:	6818      	ldr	r0, [r3, #0]
 8010f4a:	f000 b82d 	b.w	8010fa8 <_malloc_r>
 8010f4e:	bf00      	nop
 8010f50:	200000ac 	.word	0x200000ac

08010f54 <free>:
 8010f54:	4b02      	ldr	r3, [pc, #8]	@ (8010f60 <free+0xc>)
 8010f56:	4601      	mov	r1, r0
 8010f58:	6818      	ldr	r0, [r3, #0]
 8010f5a:	f000 b92d 	b.w	80111b8 <_free_r>
 8010f5e:	bf00      	nop
 8010f60:	200000ac 	.word	0x200000ac

08010f64 <sbrk_aligned>:
 8010f64:	b570      	push	{r4, r5, r6, lr}
 8010f66:	4e0f      	ldr	r6, [pc, #60]	@ (8010fa4 <sbrk_aligned+0x40>)
 8010f68:	460c      	mov	r4, r1
 8010f6a:	6831      	ldr	r1, [r6, #0]
 8010f6c:	4605      	mov	r5, r0
 8010f6e:	b911      	cbnz	r1, 8010f76 <sbrk_aligned+0x12>
 8010f70:	f000 f8d8 	bl	8011124 <_sbrk_r>
 8010f74:	6030      	str	r0, [r6, #0]
 8010f76:	4621      	mov	r1, r4
 8010f78:	4628      	mov	r0, r5
 8010f7a:	f000 f8d3 	bl	8011124 <_sbrk_r>
 8010f7e:	1c43      	adds	r3, r0, #1
 8010f80:	d103      	bne.n	8010f8a <sbrk_aligned+0x26>
 8010f82:	f04f 34ff 	mov.w	r4, #4294967295
 8010f86:	4620      	mov	r0, r4
 8010f88:	bd70      	pop	{r4, r5, r6, pc}
 8010f8a:	1cc4      	adds	r4, r0, #3
 8010f8c:	f024 0403 	bic.w	r4, r4, #3
 8010f90:	42a0      	cmp	r0, r4
 8010f92:	d0f8      	beq.n	8010f86 <sbrk_aligned+0x22>
 8010f94:	1a21      	subs	r1, r4, r0
 8010f96:	4628      	mov	r0, r5
 8010f98:	f000 f8c4 	bl	8011124 <_sbrk_r>
 8010f9c:	3001      	adds	r0, #1
 8010f9e:	d1f2      	bne.n	8010f86 <sbrk_aligned+0x22>
 8010fa0:	e7ef      	b.n	8010f82 <sbrk_aligned+0x1e>
 8010fa2:	bf00      	nop
 8010fa4:	200029cc 	.word	0x200029cc

08010fa8 <_malloc_r>:
 8010fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fac:	1ccd      	adds	r5, r1, #3
 8010fae:	f025 0503 	bic.w	r5, r5, #3
 8010fb2:	3508      	adds	r5, #8
 8010fb4:	2d0c      	cmp	r5, #12
 8010fb6:	bf38      	it	cc
 8010fb8:	250c      	movcc	r5, #12
 8010fba:	2d00      	cmp	r5, #0
 8010fbc:	4606      	mov	r6, r0
 8010fbe:	db01      	blt.n	8010fc4 <_malloc_r+0x1c>
 8010fc0:	42a9      	cmp	r1, r5
 8010fc2:	d904      	bls.n	8010fce <_malloc_r+0x26>
 8010fc4:	230c      	movs	r3, #12
 8010fc6:	6033      	str	r3, [r6, #0]
 8010fc8:	2000      	movs	r0, #0
 8010fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80110a4 <_malloc_r+0xfc>
 8010fd2:	f000 f869 	bl	80110a8 <__malloc_lock>
 8010fd6:	f8d8 3000 	ldr.w	r3, [r8]
 8010fda:	461c      	mov	r4, r3
 8010fdc:	bb44      	cbnz	r4, 8011030 <_malloc_r+0x88>
 8010fde:	4629      	mov	r1, r5
 8010fe0:	4630      	mov	r0, r6
 8010fe2:	f7ff ffbf 	bl	8010f64 <sbrk_aligned>
 8010fe6:	1c43      	adds	r3, r0, #1
 8010fe8:	4604      	mov	r4, r0
 8010fea:	d158      	bne.n	801109e <_malloc_r+0xf6>
 8010fec:	f8d8 4000 	ldr.w	r4, [r8]
 8010ff0:	4627      	mov	r7, r4
 8010ff2:	2f00      	cmp	r7, #0
 8010ff4:	d143      	bne.n	801107e <_malloc_r+0xd6>
 8010ff6:	2c00      	cmp	r4, #0
 8010ff8:	d04b      	beq.n	8011092 <_malloc_r+0xea>
 8010ffa:	6823      	ldr	r3, [r4, #0]
 8010ffc:	4639      	mov	r1, r7
 8010ffe:	4630      	mov	r0, r6
 8011000:	eb04 0903 	add.w	r9, r4, r3
 8011004:	f000 f88e 	bl	8011124 <_sbrk_r>
 8011008:	4581      	cmp	r9, r0
 801100a:	d142      	bne.n	8011092 <_malloc_r+0xea>
 801100c:	6821      	ldr	r1, [r4, #0]
 801100e:	1a6d      	subs	r5, r5, r1
 8011010:	4629      	mov	r1, r5
 8011012:	4630      	mov	r0, r6
 8011014:	f7ff ffa6 	bl	8010f64 <sbrk_aligned>
 8011018:	3001      	adds	r0, #1
 801101a:	d03a      	beq.n	8011092 <_malloc_r+0xea>
 801101c:	6823      	ldr	r3, [r4, #0]
 801101e:	442b      	add	r3, r5
 8011020:	6023      	str	r3, [r4, #0]
 8011022:	f8d8 3000 	ldr.w	r3, [r8]
 8011026:	685a      	ldr	r2, [r3, #4]
 8011028:	bb62      	cbnz	r2, 8011084 <_malloc_r+0xdc>
 801102a:	f8c8 7000 	str.w	r7, [r8]
 801102e:	e00f      	b.n	8011050 <_malloc_r+0xa8>
 8011030:	6822      	ldr	r2, [r4, #0]
 8011032:	1b52      	subs	r2, r2, r5
 8011034:	d420      	bmi.n	8011078 <_malloc_r+0xd0>
 8011036:	2a0b      	cmp	r2, #11
 8011038:	d917      	bls.n	801106a <_malloc_r+0xc2>
 801103a:	1961      	adds	r1, r4, r5
 801103c:	42a3      	cmp	r3, r4
 801103e:	6025      	str	r5, [r4, #0]
 8011040:	bf18      	it	ne
 8011042:	6059      	strne	r1, [r3, #4]
 8011044:	6863      	ldr	r3, [r4, #4]
 8011046:	bf08      	it	eq
 8011048:	f8c8 1000 	streq.w	r1, [r8]
 801104c:	5162      	str	r2, [r4, r5]
 801104e:	604b      	str	r3, [r1, #4]
 8011050:	4630      	mov	r0, r6
 8011052:	f000 f82f 	bl	80110b4 <__malloc_unlock>
 8011056:	f104 000b 	add.w	r0, r4, #11
 801105a:	1d23      	adds	r3, r4, #4
 801105c:	f020 0007 	bic.w	r0, r0, #7
 8011060:	1ac2      	subs	r2, r0, r3
 8011062:	bf1c      	itt	ne
 8011064:	1a1b      	subne	r3, r3, r0
 8011066:	50a3      	strne	r3, [r4, r2]
 8011068:	e7af      	b.n	8010fca <_malloc_r+0x22>
 801106a:	6862      	ldr	r2, [r4, #4]
 801106c:	42a3      	cmp	r3, r4
 801106e:	bf0c      	ite	eq
 8011070:	f8c8 2000 	streq.w	r2, [r8]
 8011074:	605a      	strne	r2, [r3, #4]
 8011076:	e7eb      	b.n	8011050 <_malloc_r+0xa8>
 8011078:	4623      	mov	r3, r4
 801107a:	6864      	ldr	r4, [r4, #4]
 801107c:	e7ae      	b.n	8010fdc <_malloc_r+0x34>
 801107e:	463c      	mov	r4, r7
 8011080:	687f      	ldr	r7, [r7, #4]
 8011082:	e7b6      	b.n	8010ff2 <_malloc_r+0x4a>
 8011084:	461a      	mov	r2, r3
 8011086:	685b      	ldr	r3, [r3, #4]
 8011088:	42a3      	cmp	r3, r4
 801108a:	d1fb      	bne.n	8011084 <_malloc_r+0xdc>
 801108c:	2300      	movs	r3, #0
 801108e:	6053      	str	r3, [r2, #4]
 8011090:	e7de      	b.n	8011050 <_malloc_r+0xa8>
 8011092:	230c      	movs	r3, #12
 8011094:	6033      	str	r3, [r6, #0]
 8011096:	4630      	mov	r0, r6
 8011098:	f000 f80c 	bl	80110b4 <__malloc_unlock>
 801109c:	e794      	b.n	8010fc8 <_malloc_r+0x20>
 801109e:	6005      	str	r5, [r0, #0]
 80110a0:	e7d6      	b.n	8011050 <_malloc_r+0xa8>
 80110a2:	bf00      	nop
 80110a4:	200029d0 	.word	0x200029d0

080110a8 <__malloc_lock>:
 80110a8:	4801      	ldr	r0, [pc, #4]	@ (80110b0 <__malloc_lock+0x8>)
 80110aa:	f000 b875 	b.w	8011198 <__retarget_lock_acquire_recursive>
 80110ae:	bf00      	nop
 80110b0:	20002b10 	.word	0x20002b10

080110b4 <__malloc_unlock>:
 80110b4:	4801      	ldr	r0, [pc, #4]	@ (80110bc <__malloc_unlock+0x8>)
 80110b6:	f000 b870 	b.w	801119a <__retarget_lock_release_recursive>
 80110ba:	bf00      	nop
 80110bc:	20002b10 	.word	0x20002b10

080110c0 <memset>:
 80110c0:	4402      	add	r2, r0
 80110c2:	4603      	mov	r3, r0
 80110c4:	4293      	cmp	r3, r2
 80110c6:	d100      	bne.n	80110ca <memset+0xa>
 80110c8:	4770      	bx	lr
 80110ca:	f803 1b01 	strb.w	r1, [r3], #1
 80110ce:	e7f9      	b.n	80110c4 <memset+0x4>

080110d0 <strncpy>:
 80110d0:	b510      	push	{r4, lr}
 80110d2:	3901      	subs	r1, #1
 80110d4:	4603      	mov	r3, r0
 80110d6:	b132      	cbz	r2, 80110e6 <strncpy+0x16>
 80110d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80110dc:	f803 4b01 	strb.w	r4, [r3], #1
 80110e0:	3a01      	subs	r2, #1
 80110e2:	2c00      	cmp	r4, #0
 80110e4:	d1f7      	bne.n	80110d6 <strncpy+0x6>
 80110e6:	441a      	add	r2, r3
 80110e8:	2100      	movs	r1, #0
 80110ea:	4293      	cmp	r3, r2
 80110ec:	d100      	bne.n	80110f0 <strncpy+0x20>
 80110ee:	bd10      	pop	{r4, pc}
 80110f0:	f803 1b01 	strb.w	r1, [r3], #1
 80110f4:	e7f9      	b.n	80110ea <strncpy+0x1a>

080110f6 <strstr>:
 80110f6:	780a      	ldrb	r2, [r1, #0]
 80110f8:	b570      	push	{r4, r5, r6, lr}
 80110fa:	b96a      	cbnz	r2, 8011118 <strstr+0x22>
 80110fc:	bd70      	pop	{r4, r5, r6, pc}
 80110fe:	429a      	cmp	r2, r3
 8011100:	d109      	bne.n	8011116 <strstr+0x20>
 8011102:	460c      	mov	r4, r1
 8011104:	4605      	mov	r5, r0
 8011106:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801110a:	2b00      	cmp	r3, #0
 801110c:	d0f6      	beq.n	80110fc <strstr+0x6>
 801110e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8011112:	429e      	cmp	r6, r3
 8011114:	d0f7      	beq.n	8011106 <strstr+0x10>
 8011116:	3001      	adds	r0, #1
 8011118:	7803      	ldrb	r3, [r0, #0]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d1ef      	bne.n	80110fe <strstr+0x8>
 801111e:	4618      	mov	r0, r3
 8011120:	e7ec      	b.n	80110fc <strstr+0x6>
	...

08011124 <_sbrk_r>:
 8011124:	b538      	push	{r3, r4, r5, lr}
 8011126:	4d06      	ldr	r5, [pc, #24]	@ (8011140 <_sbrk_r+0x1c>)
 8011128:	2300      	movs	r3, #0
 801112a:	4604      	mov	r4, r0
 801112c:	4608      	mov	r0, r1
 801112e:	602b      	str	r3, [r5, #0]
 8011130:	f7f1 fb02 	bl	8002738 <_sbrk>
 8011134:	1c43      	adds	r3, r0, #1
 8011136:	d102      	bne.n	801113e <_sbrk_r+0x1a>
 8011138:	682b      	ldr	r3, [r5, #0]
 801113a:	b103      	cbz	r3, 801113e <_sbrk_r+0x1a>
 801113c:	6023      	str	r3, [r4, #0]
 801113e:	bd38      	pop	{r3, r4, r5, pc}
 8011140:	20002b0c 	.word	0x20002b0c

08011144 <__errno>:
 8011144:	4b01      	ldr	r3, [pc, #4]	@ (801114c <__errno+0x8>)
 8011146:	6818      	ldr	r0, [r3, #0]
 8011148:	4770      	bx	lr
 801114a:	bf00      	nop
 801114c:	200000ac 	.word	0x200000ac

08011150 <__libc_init_array>:
 8011150:	b570      	push	{r4, r5, r6, lr}
 8011152:	4d0d      	ldr	r5, [pc, #52]	@ (8011188 <__libc_init_array+0x38>)
 8011154:	4c0d      	ldr	r4, [pc, #52]	@ (801118c <__libc_init_array+0x3c>)
 8011156:	1b64      	subs	r4, r4, r5
 8011158:	10a4      	asrs	r4, r4, #2
 801115a:	2600      	movs	r6, #0
 801115c:	42a6      	cmp	r6, r4
 801115e:	d109      	bne.n	8011174 <__libc_init_array+0x24>
 8011160:	4d0b      	ldr	r5, [pc, #44]	@ (8011190 <__libc_init_array+0x40>)
 8011162:	4c0c      	ldr	r4, [pc, #48]	@ (8011194 <__libc_init_array+0x44>)
 8011164:	f000 f872 	bl	801124c <_init>
 8011168:	1b64      	subs	r4, r4, r5
 801116a:	10a4      	asrs	r4, r4, #2
 801116c:	2600      	movs	r6, #0
 801116e:	42a6      	cmp	r6, r4
 8011170:	d105      	bne.n	801117e <__libc_init_array+0x2e>
 8011172:	bd70      	pop	{r4, r5, r6, pc}
 8011174:	f855 3b04 	ldr.w	r3, [r5], #4
 8011178:	4798      	blx	r3
 801117a:	3601      	adds	r6, #1
 801117c:	e7ee      	b.n	801115c <__libc_init_array+0xc>
 801117e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011182:	4798      	blx	r3
 8011184:	3601      	adds	r6, #1
 8011186:	e7f2      	b.n	801116e <__libc_init_array+0x1e>
 8011188:	08012d70 	.word	0x08012d70
 801118c:	08012d70 	.word	0x08012d70
 8011190:	08012d70 	.word	0x08012d70
 8011194:	08012d74 	.word	0x08012d74

08011198 <__retarget_lock_acquire_recursive>:
 8011198:	4770      	bx	lr

0801119a <__retarget_lock_release_recursive>:
 801119a:	4770      	bx	lr

0801119c <memcpy>:
 801119c:	440a      	add	r2, r1
 801119e:	4291      	cmp	r1, r2
 80111a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80111a4:	d100      	bne.n	80111a8 <memcpy+0xc>
 80111a6:	4770      	bx	lr
 80111a8:	b510      	push	{r4, lr}
 80111aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80111b2:	4291      	cmp	r1, r2
 80111b4:	d1f9      	bne.n	80111aa <memcpy+0xe>
 80111b6:	bd10      	pop	{r4, pc}

080111b8 <_free_r>:
 80111b8:	b538      	push	{r3, r4, r5, lr}
 80111ba:	4605      	mov	r5, r0
 80111bc:	2900      	cmp	r1, #0
 80111be:	d041      	beq.n	8011244 <_free_r+0x8c>
 80111c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111c4:	1f0c      	subs	r4, r1, #4
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	bfb8      	it	lt
 80111ca:	18e4      	addlt	r4, r4, r3
 80111cc:	f7ff ff6c 	bl	80110a8 <__malloc_lock>
 80111d0:	4a1d      	ldr	r2, [pc, #116]	@ (8011248 <_free_r+0x90>)
 80111d2:	6813      	ldr	r3, [r2, #0]
 80111d4:	b933      	cbnz	r3, 80111e4 <_free_r+0x2c>
 80111d6:	6063      	str	r3, [r4, #4]
 80111d8:	6014      	str	r4, [r2, #0]
 80111da:	4628      	mov	r0, r5
 80111dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111e0:	f7ff bf68 	b.w	80110b4 <__malloc_unlock>
 80111e4:	42a3      	cmp	r3, r4
 80111e6:	d908      	bls.n	80111fa <_free_r+0x42>
 80111e8:	6820      	ldr	r0, [r4, #0]
 80111ea:	1821      	adds	r1, r4, r0
 80111ec:	428b      	cmp	r3, r1
 80111ee:	bf01      	itttt	eq
 80111f0:	6819      	ldreq	r1, [r3, #0]
 80111f2:	685b      	ldreq	r3, [r3, #4]
 80111f4:	1809      	addeq	r1, r1, r0
 80111f6:	6021      	streq	r1, [r4, #0]
 80111f8:	e7ed      	b.n	80111d6 <_free_r+0x1e>
 80111fa:	461a      	mov	r2, r3
 80111fc:	685b      	ldr	r3, [r3, #4]
 80111fe:	b10b      	cbz	r3, 8011204 <_free_r+0x4c>
 8011200:	42a3      	cmp	r3, r4
 8011202:	d9fa      	bls.n	80111fa <_free_r+0x42>
 8011204:	6811      	ldr	r1, [r2, #0]
 8011206:	1850      	adds	r0, r2, r1
 8011208:	42a0      	cmp	r0, r4
 801120a:	d10b      	bne.n	8011224 <_free_r+0x6c>
 801120c:	6820      	ldr	r0, [r4, #0]
 801120e:	4401      	add	r1, r0
 8011210:	1850      	adds	r0, r2, r1
 8011212:	4283      	cmp	r3, r0
 8011214:	6011      	str	r1, [r2, #0]
 8011216:	d1e0      	bne.n	80111da <_free_r+0x22>
 8011218:	6818      	ldr	r0, [r3, #0]
 801121a:	685b      	ldr	r3, [r3, #4]
 801121c:	6053      	str	r3, [r2, #4]
 801121e:	4408      	add	r0, r1
 8011220:	6010      	str	r0, [r2, #0]
 8011222:	e7da      	b.n	80111da <_free_r+0x22>
 8011224:	d902      	bls.n	801122c <_free_r+0x74>
 8011226:	230c      	movs	r3, #12
 8011228:	602b      	str	r3, [r5, #0]
 801122a:	e7d6      	b.n	80111da <_free_r+0x22>
 801122c:	6820      	ldr	r0, [r4, #0]
 801122e:	1821      	adds	r1, r4, r0
 8011230:	428b      	cmp	r3, r1
 8011232:	bf04      	itt	eq
 8011234:	6819      	ldreq	r1, [r3, #0]
 8011236:	685b      	ldreq	r3, [r3, #4]
 8011238:	6063      	str	r3, [r4, #4]
 801123a:	bf04      	itt	eq
 801123c:	1809      	addeq	r1, r1, r0
 801123e:	6021      	streq	r1, [r4, #0]
 8011240:	6054      	str	r4, [r2, #4]
 8011242:	e7ca      	b.n	80111da <_free_r+0x22>
 8011244:	bd38      	pop	{r3, r4, r5, pc}
 8011246:	bf00      	nop
 8011248:	200029d0 	.word	0x200029d0

0801124c <_init>:
 801124c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801124e:	bf00      	nop
 8011250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011252:	bc08      	pop	{r3}
 8011254:	469e      	mov	lr, r3
 8011256:	4770      	bx	lr

08011258 <_fini>:
 8011258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801125a:	bf00      	nop
 801125c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801125e:	bc08      	pop	{r3}
 8011260:	469e      	mov	lr, r3
 8011262:	4770      	bx	lr
